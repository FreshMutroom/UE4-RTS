//-------------------------------------------------------------
//-------------------------------------------------------------
//------- STOP. This file is created via C++. -----------------
//------- If you are modifying it then you should -------------
//------- probably be modifying the C++ code that -------------
//------- creates it instead ----------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------


class ArraysOfFolderPaths
{
	constructor()
	{
		this.classes = [];
		this.structs = [];
		this.variables = [];
		this.functions = [];
		this.enums = [];
		this.enumValues = [];
	}
};

class SearchPaths
{
	constructor(inFolderPath)
	{
		this.partialMatches = new ArraysOfFolderPaths();

		this.exactMatches = new ArraysOfFolderPaths();
	}
};

class BasicSearchInfo
{
	/**
	 *	@param inType - "class", "struct", "enum", "function", "variable", "enumValue"
	 *	@param inOwner - can be left blank. This is the "item" that owns this item
	 *	e.g. something of type "function" will usually have an owner that is the name of the
	 *	class/struct that it was declared in
	 */
	constructor(inName, inDescription, inType, inOwner)
	{
		// name supports case
		this.name = inName;
		this.description = inDescription;
		this.type = inType;
		this.owner = inOwner;
	}
};


// Key = a string, value = class SearchPaths
var searchTokenToPaths = new Map();

// Maps folder path to basic info about the item such as it's description
var pathToBasicInfo = new Map();


/**
 *	@param name - should not be coverted to lower case
 *	@param description - description of class. Needs escaped characters
 *	@param partialTokens - array. Should all be lower case
 *	@param owner - can be left blank
 */
function addToContainers_class(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.classes.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.classes.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "class", owner));
}

function addToContainers_struct(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.structs.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.structs.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "struct", owner));
}

function addToContainers_enum(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.enums.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.enums.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "enum", owner));
}

function addToContainers_function(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.functions.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.functions.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "function", owner));
}

function addToContainers_variable(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.variables.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.variables.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "variable", owner));
}

function addToContainers_enumValue(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.enumValues.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.enumValues.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "enumValue", owner));
}


addToContainers_class("UFogObeyingAudioComponent", "A sound component that can decide who hears the sounds in relation to teams and fog of war.", "Docs/Classes/UFogObeyingAudioComponent/UFogObeyingAudioComponent.html", ["fog", "obeying", "audio", "component"], "");
addToContainers_function("UFogObeyingAudioComponent", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/UFogObeyingAudioComponent.html", ["fog", "obeying", "audio", "component"], "UFogObeyingAudioComponent");
addToContainers_variable("SavedVolumeMultiplier", "Volume multiplier before this audio component was muted", "Docs/Classes/UFogObeyingAudioComponent/Variables/SavedVolumeMultiplier.html", ["saved", "volume", "multiplier"], "UFogObeyingAudioComponent");
addToContainers_variable("bMuted", "", "Docs/Classes/UFogObeyingAudioComponent/Variables/bMuted.html", [], "UFogObeyingAudioComponent");
addToContainers_variable("bInContainer", "Whether the audio component is in a game state container. Faster to just query this bool than to do a contains check on the array. Actually I use a TMap but this is still probably faster", "Docs/Classes/UFogObeyingAudioComponent/Variables/bInContainer.html", ["in", "container"], "UFogObeyingAudioComponent");
addToContainers_variable("FogObeyingRule", "How audio played through this component obeys fog of war", "Docs/Classes/UFogObeyingAudioComponent/Variables/FogObeyingRule.html", ["fog", "obeying", "rule"], "UFogObeyingAudioComponent");
addToContainers_class("URTSUnrealEdEngine", "Custom editor engine. I added this class so important editor utility widgets are automatically created. My notes: I tried making this class a part of my RTS_Ver2Editor module but it wouldn\'t load. Not sure if there\'s something I\'m missing or if that\'s just not allowed in the first place.", "Docs/Classes/URTSUnrealEdEngine/URTSUnrealEdEngine.html", ["r", "t", "s", "unreal", "ed", "engine"], "");
addToContainers_struct("FAtLeastOneInt32", "An integer that is clamped to always be at least 1", "Docs/Structs/FAtLeastOneInt32/FAtLeastOneInt32.html", ["at", "least", "one", "int32"], "");
addToContainers_function("FAtLeastOneInt32", "", "Docs/Structs/FAtLeastOneInt32/Functions/FAtLeastOneInt32.html", ["at", "least", "one", "int32"], "FAtLeastOneInt32");
addToContainers_variable("", "", "Docs/Structs/FAtLeastOneInt32/Variables/.html", [], "FAtLeastOneInt32");
addToContainers_struct("FUnitTypeArray", "", "Docs/Structs/FUnitTypeArray/FUnitTypeArray.html", ["unit", "type", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/FUnitTypeArray/Variables/Array.html", [], "FUnitTypeArray");
addToContainers_struct("FBuildingTypeArray", "", "Docs/Structs/FBuildingTypeArray/FBuildingTypeArray.html", ["building", "type", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/FBuildingTypeArray/Variables/Array.html", [], "FBuildingTypeArray");
addToContainers_struct("FButtonArray", "An array of FContextButton", "Docs/Structs/FButtonArray/FButtonArray.html", ["button", "array"], "");
addToContainers_variable("Buttons", "", "Docs/Structs/FButtonArray/Variables/Buttons.html", [], "FButtonArray");
addToContainers_struct("FRankInfo", "Holds information about things that happen when leveling up", "Docs/Structs/FRankInfo/FRankInfo.html", ["rank", "info"], "");
addToContainers_function("FRankInfo", "", "Docs/Structs/FRankInfo/Functions/FRankInfo.html", ["rank", "info"], "FRankInfo");
addToContainers_variable("", "Optional. Upgrade effect applied to unit when reaching this level", "Docs/Structs/FRankInfo/Variables/.html", [], "FRankInfo");
addToContainers_variable("", "Optional. Particle effect to play when reaching this level. If multiple levels are gained at the same time then only the particle effect for the highest level gained will be played", "Docs/Structs/FRankInfo/Variables/_1.html", [], "FRankInfo");
addToContainers_variable("", "Sound to play when a unit reaches this level", "Docs/Structs/FRankInfo/Variables/_2.html", [], "FRankInfo");
addToContainers_variable("", "Image to display on unit for this unit. If you are choosing to display level icons on your unit widgets then you will need to give this a value", "Docs/Structs/FRankInfo/Variables/_3.html", [], "FRankInfo");
addToContainers_class("AFactionInfo", "A info class that holds all the data about a faction. It is a pure info class. This object stores no state.", "Docs/Classes/AFactionInfo/AFactionInfo.html", ["faction", "info"], "");
addToContainers_function("AFactionInfo", "", "Docs/Classes/AFactionInfo/Functions/AFactionInfo.html", ["faction", "info"], "AFactionInfo");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/AFactionInfo/Variables/.html", [], "AFactionInfo");
addToContainers_variable("Faction", "The faction this info is for", "Docs/Classes/AFactionInfo/Variables/Faction.html", [], "AFactionInfo");
addToContainers_variable("", "The name to appear in UI", "Docs/Classes/AFactionInfo/Variables/_1.html", [], "AFactionInfo");
addToContainers_variable("", "Image to appear in UI", "Docs/Classes/AFactionInfo/Variables/_2.html", [], "AFactionInfo");
addToContainers_variable("", "Buildings that can be built by this faction.", "Docs/Classes/AFactionInfo/Variables/_3.html", [], "AFactionInfo");
addToContainers_variable("", "Units that can be built by this faction", "Docs/Classes/AFactionInfo/Variables/_4.html", [], "AFactionInfo");
addToContainers_variable("", "The starting grid to use for this faction. Starting grids define what and where buildings/units this faction starts a match with", "Docs/Classes/AFactionInfo/Variables/_5.html", [], "AFactionInfo");
addToContainers_variable("", "Upgrades this faction can research", "Docs/Classes/AFactionInfo/Variables/_6.html", [], "AFactionInfo");
addToContainers_variable("UpgradesResearchableThroughBuildings", "These are upgrades that can be researched through a building as opposed to being aquired by a commander ability. Note: I currently don\'t use this at any other time besides setup. It could be removed as a class variable to save on memory.", "Docs/Classes/AFactionInfo/Variables/UpgradesResearchableThroughBuildings.html", ["upgrades", "researchable", "through", "buildings"], "AFactionInfo");
addToContainers_variable("", "Maps level to info about what happens to a selectable upon reaching that level. The entry for the starting level will ignore the bonus and particles - it is just for the icon", "Docs/Classes/AFactionInfo/Variables/_7.html", [], "AFactionInfo");
addToContainers_variable("", "What happens when the commander gains a rank. Maps rank to the bonuses", "Docs/Classes/AFactionInfo/Variables/_8.html", [], "AFactionInfo");
addToContainers_variable("", "How many commander skill points players who play this faction should start the game with", "Docs/Classes/AFactionInfo/Variables/_9.html", [], "AFactionInfo");
addToContainers_variable("", "Holds information for all buildings for this faction", "Docs/Classes/AFactionInfo/Variables/_10.html", [], "AFactionInfo");
addToContainers_variable("", "Holds information for all units for this faction", "Docs/Classes/AFactionInfo/Variables/_11.html", [], "AFactionInfo");
addToContainers_variable("", "Holds bonuses from level ups for selectables as created UObjects", "Docs/Classes/AFactionInfo/Variables/_12.html", [], "AFactionInfo");
addToContainers_variable("", "Optional override for mouse cursor to use when playing matches as this faction. Leaving Cursor Path blank will default to using the one defined in game instance", "Docs/Classes/AFactionInfo/Variables/_13.html", [], "AFactionInfo");
addToContainers_variable("", "8 edge scrolling cursors", "Docs/Classes/AFactionInfo/Variables/_14.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_15.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_16.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_17.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_18.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_19.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_20.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_21.html", [], "AFactionInfo");
addToContainers_variable("MouseCursor_Info", "", "Docs/Classes/AFactionInfo/Variables/MouseCursor_Info.html", ["mouse", "cursor_", "info"], "AFactionInfo");
addToContainers_variable("EdgeScrollingCursor_Infos[8]", "Array of the 8 mouse cursors that appear when the player has their mouse close enough to the edge of the screen that the camera moves Index 0 = left Index 1 = right Index 2 = up Index 3 = left + up Index 4 = right + up Index 5 = down Index 6 = left + down Index 7 = right + down The indices are set out like this so just additions can be used to figure out the index in ARTSPlayerController::MoveIfAtEdgeOfScreen", "Docs/Classes/AFactionInfo/Variables/EdgeScrollingCursor_Infos[8].html", ["edge", "scrolling", "cursor_", "infos[8]"], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering the mouse over a hostile unit and it can be attacked by at least one selected selectable", "Docs/Classes/AFactionInfo/Variables/_22.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering the mouse over a hostile unit and it cannot be attacked by any selected selectables", "Docs/Classes/AFactionInfo/Variables/_23.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering the mouse over a friendly unit and it can be \'attacked\' by at least one selected selectable. The attack is hopefully something helpful that heals the target or something.", "Docs/Classes/AFactionInfo/Variables/_24.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_25.html", [], "AFactionInfo");
addToContainers_variable("", "Same deal as the unit cursors except for buildings instead", "Docs/Classes/AFactionInfo/Variables/_26.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_27.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_28.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_29.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering mouse over an inventory item in the world and at least one selected selectable can pick it up", "Docs/Classes/AFactionInfo/Variables/_30.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering mouse over an inventory item in the world and no selected selectable can pick it up.", "Docs/Classes/AFactionInfo/Variables/_31.html", [], "AFactionInfo");
addToContainers_variable("", "Default cursors to show when hovering mouse over a resource spot and at least one selected selectable can gather from it.", "Docs/Classes/AFactionInfo/Variables/_32.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_33.html", [], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredHostileUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHoveredHostileUnit_Info.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "hostile", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredHostileUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHoveredHostileUnit_Info.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "hostile", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredFriendlyUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHoveredFriendlyUnit_Info.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "friendly", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredFriendlyUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHoveredFriendlyUnit_Info.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "friendly", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredHostileBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHoveredHostileBuilding_Info.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "hostile", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredHostileBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHoveredHostileBuilding_Info.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "hostile", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredFriendlyBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHoveredFriendlyBuilding_Info.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "friendly", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredFriendlyBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHoveredFriendlyBuilding_Info.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "friendly", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanPickUpHoveredInventoryItem_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanPickUpHoveredInventoryItem_Info.html", ["default", "mouse", "cursor_", "can", "pick", "up", "hovered", "inventory", "item_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotPickUpHoveredInventoryItem_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotPickUpHoveredInventoryItem_Info.html", ["default", "mouse", "cursor_", "cannot", "pick", "up", "hovered", "inventory", "item_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]", "Use Statics::ResourceTypeToArrayIndex to get the right index", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES].html", ["default", "mouse", "cursor_", "can", "gather", "from", "hovered", "resource", "spot_", "info[", "statics::", "n", "u", "m_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s]"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES].html", ["default", "mouse", "cursor_", "cannot", "gather", "from", "hovered", "resource", "spot_", "info[", "statics::", "n", "u", "m_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s]"], "AFactionInfo");
addToContainers_variable("", "The widget to attach to all selectables when playing this faction excluding resource spots", "Docs/Classes/AFactionInfo/Variables/_34.html", [], "AFactionInfo");
addToContainers_variable("", "The widget to attach to all selectables when they are selected excluding resource spots", "Docs/Classes/AFactionInfo/Variables/_35.html", [], "AFactionInfo");
addToContainers_variable("", "The widget to attach to all resource spots. This widget should not have any health displaying widgets bound", "Docs/Classes/AFactionInfo/Variables/_36.html", [], "AFactionInfo");
addToContainers_variable("", "The widget to attach to a resource spot when it is selected. This widget should not have any health displaying widgets bound", "Docs/Classes/AFactionInfo/Variables/_37.html", [], "AFactionInfo");
addToContainers_variable("", "Decal to show under a selectable when it is selected. Set size individually on each selectable", "Docs/Classes/AFactionInfo/Variables/_38.html", [], "AFactionInfo");
addToContainers_variable("", "Maps affiliation to particles to display on selectable when selecting them. Different size templates can be set instead of just scaling the particles which sometimes does not look right", "Docs/Classes/AFactionInfo/Variables/_39.html", [], "AFactionInfo");
addToContainers_variable("", "Maps affiliation to particles to display on a selectable when right-clicking it", "Docs/Classes/AFactionInfo/Variables/_40.html", [], "AFactionInfo");
addToContainers_variable("", "Particle system to spawn on world when right mouse click command is issued, if any. Note these do not attach to the selectable clicked so the target ones might want to be left blank", "Docs/Classes/AFactionInfo/Variables/_41.html", [], "AFactionInfo");
addToContainers_variable("", "Decal to show under a selectable when right-clicking it. Setup size in each specific selectable\'s BP. These do attach to the selectable clicked", "Docs/Classes/AFactionInfo/Variables/_42.html", [], "AFactionInfo");
addToContainers_variable("", "Optional set of widgets than can override the default in-game widgets. Any widget types without entries will use the widget defined in the game instance.", "Docs/Classes/AFactionInfo/Variables/_43.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for events such as \'Production queue is full\'. Any warning types without entries will use the message defined in game instance.", "Docs/Classes/AFactionInfo/Variables/_44.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for whatever custom checks are performed by abilities e.g. \"Target not below 30% HP\", \"Buff not present on target\" Any warning types without entries will use the message defined in game instance.", "Docs/Classes/AFactionInfo/Variables/_45.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for times when you try to spend more resources than you have. Any resource types without entries will use the message defined in game instance", "Docs/Classes/AFactionInfo/Variables/_46.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for times when you do not have enough housing resources Any resource types without entries will use the message defined in game instance", "Docs/Classes/AFactionInfo/Variables/_47.html", [], "AFactionInfo");
addToContainers_variable("", "Maps HUD persistent tab type to sorted array of order buttons should appear on that tab", "Docs/Classes/AFactionInfo/Variables/_48.html", [], "AFactionInfo");
addToContainers_variable("", "Maps button type to what HUD persistent tab it should be in", "Docs/Classes/AFactionInfo/Variables/_49.html", [], "AFactionInfo");
addToContainers_variable("", "How much housing resources are always provided no matter what. e.g. in SCII if you have 0 pylons and 0 nexus then you have 0 supply. However if this variable is 5 then you would have 5. After you build a pylon you would have 13.", "Docs/Classes/AFactionInfo/Variables/_50.html", [], "AFactionInfo");
addToContainers_variable("", "Copy of ConstantHousingResourceAmountProvided that is populated on post edit. It exists for performance only", "Docs/Classes/AFactionInfo/Variables/_51.html", [], "AFactionInfo");
addToContainers_variable("", "Limits on the max value a housing resource can provide. Leaving no entry means the resource has no limit. e.g. in SCII population has a limit of 200", "Docs/Classes/AFactionInfo/Variables/_52.html", [], "AFactionInfo");
addToContainers_variable("", "Copy of HousingResourceLimits that is populated in post edit. It exists for performance only", "Docs/Classes/AFactionInfo/Variables/_53.html", [], "AFactionInfo");
addToContainers_variable("", "Maps building type to the maximum amount of that building each player is allowed to have when playing as this faction. e.g. in C&C generals sometimes each player is only allowed to build a maximum of one superweapon. Maps from building type to the limit. All values should be at least one. If you do not want a limit then just remove its key/value pair from this container.", "Docs/Classes/AFactionInfo/Variables/_54.html", [], "AFactionInfo");
addToContainers_variable("", "Same as BuildingQuantityLimits except for units instead e.g. in RA2 only one tanya can be built per player at a time", "Docs/Classes/AFactionInfo/Variables/_55.html", [], "AFactionInfo");
addToContainers_variable("", "The default way buildings are built for this faction. This can be overridden on a per building basis", "Docs/Classes/AFactionInfo/Variables/_56.html", [], "AFactionInfo");
addToContainers_variable("", "The distance a building must be from another owned/allied (see bCanBuildOffAllies below) building for it to be built. This is measured from the center of the building trying to be placed to the edge of other buildings. 0 = unlimited. This can be overridden and ignored on a per building basis e.g. In C&C 3 and many other C&Cs there is a rule where the building must be placed close to other buildings. In SCII there is no restriction", "Docs/Classes/AFactionInfo/Variables/_57.html", [], "AFactionInfo");
addToContainers_variable("", "Whether BuildingProximityRange can use allied buildings aswell. So if true you can build off allies buildings too. An example of true is in Red Alert 2 where you can place buildings near friendlies buildings Because BuildingProximityRange can be overridden on a per building basis this can still be relevant even if BuildingProximityRange = 0", "Docs/Classes/AFactionInfo/Variables/_58.html", [], "AFactionInfo");
addToContainers_variable("", "Optional overrides for the default image set in game instance. These are for different resource types", "Docs/Classes/AFactionInfo/Variables/_59.html", [], "AFactionInfo");
addToContainers_variable("", "Music to play when playing match as this faction", "Docs/Classes/AFactionInfo/Variables/_60.html", [], "AFactionInfo");
addToContainers_variable("", "Sound to play when setting a rally point for a unit producing building", "Docs/Classes/AFactionInfo/Variables/_61.html", [], "AFactionInfo");
addToContainers_variable("", "Buildings that have a persistent queue i.e. are construction yard type buildings. This is mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_62.html", [], "AFactionInfo");
addToContainers_variable("", "Units that can build at least one building. This is mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_63.html", [], "AFactionInfo");
addToContainers_variable("", "Unit types that are considered \'attacking\' types. Anything not a collector or a worker will be considered an attacking type. This is mainly here for CPU player AI controller", "Docs/Classes/AFactionInfo/Variables/_64.html", [], "AFactionInfo");
addToContainers_variable("", "Maps resource type to unit types that can gather that resource. This is mainly here for CPU player AI controller", "Docs/Classes/AFactionInfo/Variables/_65.html", [], "AFactionInfo");
addToContainers_variable("", "Maps resource type to the type of buildings that serve as a drop point for it. Mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_66.html", [], "AFactionInfo");
addToContainers_variable("", "Array of all building types that can build at least one unit. Does not distinguish between whether they are a worker/collector/army unit. Mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_67.html", [], "AFactionInfo");
addToContainers_variable("", "Array of building types that are considered base defenses. Mainly here for CPU player AI controller", "Docs/Classes/AFactionInfo/Variables/_68.html", [], "AFactionInfo");
addToContainers_variable("LargestContextMenu", "Largest context menu on this faction", "Docs/Classes/AFactionInfo/Variables/LargestContextMenu.html", ["largest", "context", "menu"], "AFactionInfo");
addToContainers_variable("LargestProductionQueueCapacity", "Largest production queue for all buildings on this faction\'s building roster. Context queues only", "Docs/Classes/AFactionInfo/Variables/LargestProductionQueueCapacity.html", ["largest", "production", "queue", "capacity"], "AFactionInfo");
addToContainers_variable("LargestBuildingGarrisonSlotCapacity", "Most unit garrison slots a building on this faction has", "Docs/Classes/AFactionInfo/Variables/LargestBuildingGarrisonSlotCapacity.html", ["largest", "building", "garrison", "slot", "capacity"], "AFactionInfo");
addToContainers_variable("MaxNumberOfShopItemsOnAShop", "The maximum number of items a shop on this faction has on display and/or sells", "Docs/Classes/AFactionInfo/Variables/MaxNumberOfShopItemsOnAShop.html", ["max", "number", "of", "shop", "items", "on", "a", "shop"], "AFactionInfo");
addToContainers_variable("MaxUnitInventoryCapacity", "The maximum size inventory a selectable on this faction has", "Docs/Classes/AFactionInfo/Variables/MaxUnitInventoryCapacity.html", ["max", "unit", "inventory", "capacity"], "AFactionInfo");
addToContainers_variable("Info2)", "For sorting", "Docs/Classes/AFactionInfo/Variables/Info2).html", [], "AFactionInfo");
addToContainers_variable("", "Stores all the blueprints for each selectable on this faction. Here to speed up the process of removing already placed on map selectables right before a PIE session", "Docs/Classes/AFactionInfo/Variables/_69.html", [], "AFactionInfo");
addToContainers_class("URTSGameInstance", "A very important class. Contains a lot of properties for your game.", "Docs/Classes/URTSGameInstance/URTSGameInstance.html", ["r", "t", "s", "game", "instance"], "");
addToContainers_function("URTSGameInstance", "", "Docs/Classes/URTSGameInstance/Functions/URTSGameInstance.html", ["r", "t", "s", "game", "instance"], "URTSGameInstance");
addToContainers_variable("", "Holds FactionInfo blueprints for the different factions. Needs one entry for every type of faction", "Docs/Classes/URTSGameInstance/Variables/.html", [], "URTSGameInstance");
addToContainers_variable("", "Map that stores information about context button types.", "Docs/Classes/URTSGameInstance/Variables/_1.html", [], "URTSGameInstance");
addToContainers_variable("", "Essentially the contexts of ContextActionsMap but sorted. Using this because it\'s faster to lookup in array than hashmap given array index is known", "Docs/Classes/URTSGameInstance/Variables/_2.html", [], "URTSGameInstance");
addToContainers_variable("", "Different abilities the commander can use", "Docs/Classes/URTSGameInstance/Variables/_3.html", [], "URTSGameInstance");
addToContainers_variable("", "Contents of CommanderAbilitiesTMap but in an array because it\'s faster to access an array instead of a hashmap if the index is known", "Docs/Classes/URTSGameInstance/Variables/_4.html", [], "URTSGameInstance");
addToContainers_variable("", "Different types of nodes that can appear on a commander\'s skill tree", "Docs/Classes/URTSGameInstance/Variables/_5.html", [], "URTSGameInstance");
addToContainers_variable("", "Contents of the TMap transfered to an array because array lookup is faster than hashmap when the index is known", "Docs/Classes/URTSGameInstance/Variables/_6.html", [], "URTSGameInstance");
addToContainers_variable("", "----------------------------------------------------------------------", "Docs/Classes/URTSGameInstance/Variables/_7.html", [], "URTSGameInstance");
addToContainers_variable("", "Object pooling manager", "Docs/Classes/URTSGameInstance/Variables/_8.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_9.html", [], "URTSGameInstance");
addToContainers_variable("", "Gets filled with information about each faction", "Docs/Classes/URTSGameInstance/Variables/_10.html", [], "URTSGameInstance");
addToContainers_variable("", "Holds damage multipliers for each attack type towards each armour type. To add new damage types see DamageTypes.h. 0 and negative values can be used to create damage types that do nothing/heal. That way you never need to pass a negative value into TakeDamage - just pass the amount and let the multiplier decide whether it should heal or not", "Docs/Classes/URTSGameInstance/Variables/_11.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about building garrison networks", "Docs/Classes/URTSGameInstance/Variables/_12.html", [], "URTSGameInstance");
addToContainers_variable("", "Static buffs and debuffs for your project. Only some of their info can be filled in here - the rest of their behavior will need to be implemented in C++. See BuffAndDebuffManager.h", "Docs/Classes/URTSGameInstance/Variables/_13.html", [], "URTSGameInstance");
addToContainers_variable("", "Tickable buffs and debuffs for your project. Only some of their info can be filled in here - the rest of their behavior will need to be implemented in C++. See BuffAndDebuffManager.h", "Docs/Classes/URTSGameInstance/Variables/_14.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about subtypes of buffs/debuffs", "Docs/Classes/URTSGameInstance/Variables/_15.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about different selectable resources. Selectable resources are things like mana or energy", "Docs/Classes/URTSGameInstance/Variables/_16.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about each inventory item", "Docs/Classes/URTSGameInstance/Variables/_17.html", [], "URTSGameInstance");
addToContainers_variable("", "The image to display for an inventory slot that does not have any item in it", "Docs/Classes/URTSGameInstance/Variables/_18.html", [], "URTSGameInstance");
addToContainers_variable("", "The image to display for an inventory slot that does not have any item in it and the mouse is hovered over it. This will be ignored if you use a unified hover image. @See UnifiedMouseHoverImage_InventoryItems", "Docs/Classes/URTSGameInstance/Variables/_19.html", [], "URTSGameInstance");
addToContainers_variable("", "The image to display for an inventory slot that does not have any item in it and the mouse is pressed on it. This will be ignored if you use a unified pressed image", "Docs/Classes/URTSGameInstance/Variables/_20.html", [], "URTSGameInstance");
addToContainers_variable("", "The sound to play when hovering over an emtpy inventory slot", "Docs/Classes/URTSGameInstance/Variables/_21.html", [], "URTSGameInstance");
addToContainers_variable("", "The sound to play when pressing an empty inventpry slot with LMB", "Docs/Classes/URTSGameInstance/Variables/_22.html", [], "URTSGameInstance");
addToContainers_variable("", "The sound to play when pressing an empty inventory slot with RMB", "Docs/Classes/URTSGameInstance/Variables/_23.html", [], "URTSGameInstance");
addToContainers_variable("", "How much experience bounty is multiplied by when a unit levels up. e.g. if this = 1.2 then a level 1 unit when destroyed will award 20% more experience to the unit that destroyed them", "Docs/Classes/URTSGameInstance/Variables/_24.html", [], "URTSGameInstance");
addToContainers_variable("bIsInitializingFactionInfo", "True if initializing faction info. Prevents spawned actors from running their BeginPlay which could rely on things that have not been set up yet.", "Docs/Classes/URTSGameInstance/Variables/bIsInitializingFactionInfo.html", ["is", "initializing", "faction", "info"], "URTSGameInstance");
addToContainers_variable("bHasInitialized", "True if Initialize has been called", "Docs/Classes/URTSGameInstance/Variables/bHasInitialized.html", ["has", "initialized"], "URTSGameInstance");
addToContainers_variable("bHasSpawnedInfoActors", "True if info actors have been spawned. Reset on every map change", "Docs/Classes/URTSGameInstance/Variables/bHasSpawnedInfoActors.html", ["has", "spawned", "info", "actors"], "URTSGameInstance");
addToContainers_variable("", "If you choose to use a cursor here then it will override anything you have set in project settings under hardware cursors. This cursor will show up when using the main menu. If tesing in PIE and using bSkipMainMenu this still needs to be set. Make it the same as your match cursor", "Docs/Classes/URTSGameInstance/Variables/_25.html", [], "URTSGameInstance");
addToContainers_variable("", "Mouse cursor to use during matches. This can be overriddem on a per-faction basis. If choosing to use custom mouse cursors for abilities then this or faction infos will need to set a cursor here for the game to roll back to it - I know no way of setting the hardware cursor back to the default white arrow cursor.", "Docs/Classes/URTSGameInstance/Variables/_26.html", [], "URTSGameInstance");
addToContainers_variable("", "8 edge scrolling cursors. The cursors that appear when the mouse is close enough to the edge of the screen that the camera moves", "Docs/Classes/URTSGameInstance/Variables/_27.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_28.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_29.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_30.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_31.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_32.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_33.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_34.html", [], "URTSGameInstance");
addToContainers_variable("", "Default mouse cursor to use if ability does not have one set", "Docs/Classes/URTSGameInstance/Variables/_35.html", [], "URTSGameInstance");
addToContainers_variable("", "Default mouse cursor to use if ability does not have one set", "Docs/Classes/URTSGameInstance/Variables/_36.html", [], "URTSGameInstance");
addToContainers_variable("", "Default mouse cursor to use if ability does not have one set", "Docs/Classes/URTSGameInstance/Variables/_37.html", [], "URTSGameInstance");
addToContainers_variable("MenuMouseCursor_Info", "", "Docs/Classes/URTSGameInstance/Variables/MenuMouseCursor_Info.html", ["menu", "mouse", "cursor_", "info"], "URTSGameInstance");
addToContainers_variable("DefaultAbilityCursor_Default_Info", "", "Docs/Classes/URTSGameInstance/Variables/DefaultAbilityCursor_Default_Info.html", ["default", "ability", "cursor_", "default_", "info"], "URTSGameInstance");
addToContainers_variable("DefaultAbilityCursor_AcceptableTarget_Info", "", "Docs/Classes/URTSGameInstance/Variables/DefaultAbilityCursor_AcceptableTarget_Info.html", ["default", "ability", "cursor_", "acceptable", "target_", "info"], "URTSGameInstance");
addToContainers_variable("DefaultAbilityCursor_UnacceptableTarget_Info", "", "Docs/Classes/URTSGameInstance/Variables/DefaultAbilityCursor_UnacceptableTarget_Info.html", ["default", "ability", "cursor_", "unacceptable", "target_", "info"], "URTSGameInstance");
addToContainers_variable("", "Selection decal to appear under a selectable when a match observer selects something", "Docs/Classes/URTSGameInstance/Variables/_38.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to appear on a selectable when it is selected and the player is a match observer. Not used for resource spots", "Docs/Classes/URTSGameInstance/Variables/_39.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to always appear on selectables when the player is a match observer. Widget can show things like health, construction status etc. Not used for resource spots", "Docs/Classes/URTSGameInstance/Variables/_40.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to appear on a resource spot when it is selected and the player is a match observer Made these seperate because the ObserverSelectableSelectionWorldWidget will likely have a health bar and resource spots won\'t need that", "Docs/Classes/URTSGameInstance/Variables/_41.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to always appear on a resource spot and the player is a match observer", "Docs/Classes/URTSGameInstance/Variables/_42.html", [], "URTSGameInstance");
addToContainers_variable("", "How world widget (like health bars) are positioned whenever the player\'s camera moves, rotates or zooms", "Docs/Classes/URTSGameInstance/Variables/_43.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps each defeat condition to info about it. To actually change what function is called to check if condition is met will require adding code to game mode", "Docs/Classes/URTSGameInstance/Variables/_44.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps integer to FName for less bandwidth across wire when changing map", "Docs/Classes/URTSGameInstance/Variables/_45.html", [], "URTSGameInstance");
addToContainers_variable("", "List of maps that matches can be played on. Maps map name (the name it was given in editor minus any extensions e.g. Minimal_Default, Entry, etc) to info about it Limit 256 maps If changing the name of this variable then update ALevelVolume::StoreMapInfo", "Docs/Classes/URTSGameInstance/Variables/_46.html", [], "URTSGameInstance");
addToContainers_variable("", "Mouse cursors. Map enum type to the path/hotspot info. Note: if your mouse cursor appears to be off of its location make sure to adjust the host spot", "Docs/Classes/URTSGameInstance/Variables/_47.html", [], "URTSGameInstance");
addToContainers_variable("", "The rule for choosing player starts for players that weren\'t assigned one before match started", "Docs/Classes/URTSGameInstance/Variables/_48.html", [], "URTSGameInstance");
addToContainers_variable("", "A sound mix which will modify the volume of all sounds", "Docs/Classes/URTSGameInstance/Variables/_49.html", [], "URTSGameInstance");
addToContainers_variable("", "Map of all sound classes. Maps their GetName() to the UObject. The TMap is so a user can enter the type of sound class they want a audio settings widget to modify", "Docs/Classes/URTSGameInstance/Variables/_50.html", [], "URTSGameInstance");
addToContainers_variable("", "Match loading screen messages", "Docs/Classes/URTSGameInstance/Variables/_51.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps CPU player difficulty info about them", "Docs/Classes/URTSGameInstance/Variables/_52.html", [], "URTSGameInstance");
addToContainers_variable("", "Widgets to use during a match. Faction info that has not specified a specific widget will default to using the one from here", "Docs/Classes/URTSGameInstance/Variables/_53.html", [], "URTSGameInstance");
addToContainers_variable("", "Information about resources", "Docs/Classes/URTSGameInstance/Variables/_54.html", [], "URTSGameInstance");
addToContainers_variable("", "Defines how much resources players start with at start of match", "Docs/Classes/URTSGameInstance/Variables/_55.html", [], "URTSGameInstance");
addToContainers_variable("", "Game notification messages to appear in HUD + sound to play", "Docs/Classes/URTSGameInstance/Variables/_56.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages to appear when things happen in game. Can be overridden on a per-faction basis", "Docs/Classes/URTSGameInstance/Variables/_57.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages for custom reasons abilities can fail", "Docs/Classes/URTSGameInstance/Variables/_58.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages to display when you try to spend more of a resource than you have", "Docs/Classes/URTSGameInstance/Variables/_59.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages to display when you try to spend more of a resource than you have", "Docs/Classes/URTSGameInstance/Variables/_60.html", [], "URTSGameInstance");
addToContainers_variable("", "Minimum time between game warning messages being allowed to show on HUD. If player say spams a build button without the prereqs met then messages will appear on HUD only if this amount of time has passed", "Docs/Classes/URTSGameInstance/Variables/_61.html", [], "URTSGameInstance");
addToContainers_variable("", "How to draw the marquee selection box", "Docs/Classes/URTSGameInstance/Variables/_62.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_63.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_64.html", [], "URTSGameInstance");
addToContainers_variable("", "Color of the marquee box filled rectangle if using it", "Docs/Classes/URTSGameInstance/Variables/_65.html", [], "URTSGameInstance");
addToContainers_variable("", "Color of the marquee box border. Always drawn opaque - alpha value will be ignored", "Docs/Classes/URTSGameInstance/Variables/_66.html", [], "URTSGameInstance");
addToContainers_variable("", "How thick to draw the line for the marquee box border", "Docs/Classes/URTSGameInstance/Variables/_67.html", [], "URTSGameInstance");
addToContainers_variable("", "The percentage of max health building starts with at the start of its construction (in the range 0 to 1). Clamped to 0.01 (1%) because possible replicated float compresssion may cause it to be rounded to 0 (if that is even a thing)", "Docs/Classes/URTSGameInstance/Variables/_68.html", [], "URTSGameInstance");
addToContainers_variable("", "Rule for being able to see and change unit rally point for a unit-producing building. The rule refers to the state of the building", "Docs/Classes/URTSGameInstance/Variables/_69.html", [], "URTSGameInstance");
addToContainers_variable("", "The name of the vector param on each of the ghost building mesh\'s materials to modify when the ghost is in a suitable/non-suitable build location e.g. in most RTSes the building will change to a red color when not in a suitable build location", "Docs/Classes/URTSGameInstance/Variables/_70.html", [], "URTSGameInstance");
addToContainers_variable("", "The value to change GhostBadLocationParam to when not in a suitable build location", "Docs/Classes/URTSGameInstance/Variables/_71.html", [], "URTSGameInstance");
addToContainers_variable("", "Fog of war material", "Docs/Classes/URTSGameInstance/Variables/_72.html", [], "URTSGameInstance");
addToContainers_variable("", "Selectable\'s action bar / Persistent HUD panel / Production queue", "Docs/Classes/URTSGameInstance/Variables/_73.html", [], "URTSGameInstance");
addToContainers_variable("", "Selectable\'s inventory / Item shop", "Docs/Classes/URTSGameInstance/Variables/_74.html", [], "URTSGameInstance");
addToContainers_variable("", "Menus. I have only used these for the pause menu but may want to use them for main menu, lobby, etc", "Docs/Classes/URTSGameInstance/Variables/_75.html", [], "URTSGameInstance");
addToContainers_variable("", "These hold data already contained in the structs above. It is here for performance", "Docs/Classes/URTSGameInstance/Variables/_76.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_77.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_78.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_79.html", [], "URTSGameInstance");
addToContainers_variable("", "A curve that says how fast the camera moves at different zoom levels X axis = Zoom amount e.g. if your range of zoom amounts is 500 to 5000 then that is what should be along this axis Y axis = speed multiplier", "Docs/Classes/URTSGameInstance/Variables/_80.html", [], "URTSGameInstance");
addToContainers_variable("", "SHOULD BE LINEAR, NOT CURVED. Actually zooming doesn\'t really work very well anyway so doesn\'t matter. Curve used for gradual zoom in/out when scrolling mouse wheel. Can be left null and zoom amount will be changed instantly. X axis = base time to reset camera. Will be multiplied by CameraZoomSpeed Y axis = Lerp amount, range should be from 0 to 1 At some point a pointer on the PC is set to this. But are there performance gains from having it as a EditDefaultsOnly variable on the PC to begin with? Unless there is some serious black magic with UE4 then I would think not. If there is though could just remove that variable on PC and go GI->GetCameraMouseWheelZoomCurve() whenever we need it.", "Docs/Classes/URTSGameInstance/Variables/_81.html", [], "URTSGameInstance");
addToContainers_variable("", "Curve to use to transition from current camera rotation/zoom to defaults. Can be left null and transition will happen instantly. X axis = base time to complete zoom. Will be multiplied by ResetCameraToDefaultRate. Good to make it at least from 0 to 1 and adjust ResetCameraToDefaultRate to get desired time taken Y axis = Lerp amount, range should be from 0 to 1", "Docs/Classes/URTSGameInstance/Variables/_82.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps a key on the keyboard/mouse to information about it", "Docs/Classes/URTSGameInstance/Variables/_83.html", [], "URTSGameInstance");
addToContainers_variable("", "The \"plus: symbol to put in between modifier keys e.g. CTRL + ALT + P", "Docs/Classes/URTSGameInstance/Variables/_84.html", [], "URTSGameInstance");
addToContainers_variable("", "The symbol for the CTRL key when it is being used as a modifier", "Docs/Classes/URTSGameInstance/Variables/_85.html", [], "URTSGameInstance");
addToContainers_variable("", "The symbol for the ALT key when it is being used as a modifier", "Docs/Classes/URTSGameInstance/Variables/_86.html", [], "URTSGameInstance");
addToContainers_variable("", "The symbol for the SHIFT key when it is being used as a modifier", "Docs/Classes/URTSGameInstance/Variables/_87.html", [], "URTSGameInstance");
addToContainers_variable("", "If true then you want the image representation of a keyboard/mouse key to have some text drawn overtop of some image and you want this to happen for every key. My notes: could perhaps allow certain FKeyInfo to opt out of having this applied to them", "Docs/Classes/URTSGameInstance/Variables/_88.html", [], "URTSGameInstance");
addToContainers_variable("", "How to use the image override", "Docs/Classes/URTSGameInstance/Variables/_89.html", [], "URTSGameInstance");
addToContainers_variable("", "How to use the font override", "Docs/Classes/URTSGameInstance/Variables/_90.html", [], "URTSGameInstance");
addToContainers_variable("", "Partial brush override", "Docs/Classes/URTSGameInstance/Variables/_91.html", [], "URTSGameInstance");
addToContainers_variable("", "Partial font override", "Docs/Classes/URTSGameInstance/Variables/_92.html", [], "URTSGameInstance");
addToContainers_variable("LeaveOnMapList", "UPROPERTY() // Can maybe get away without this", "Docs/Classes/URTSGameInstance/Variables/LeaveOnMapList.html", ["leave", "on", "map", "list"], "URTSGameInstance");
addToContainers_variable("LargestShopCatalogueSize", "Most amount of items a shop has on display and/or sells", "Docs/Classes/URTSGameInstance/Variables/LargestShopCatalogueSize.html", ["largest", "shop", "catalogue", "size"], "URTSGameInstance");
addToContainers_variable("LargestInventoryCapacity", "The largest inventory a selectable has", "Docs/Classes/URTSGameInstance/Variables/LargestInventoryCapacity.html", ["largest", "inventory", "capacity"], "URTSGameInstance");
addToContainers_variable("", "The audio component in charge of playing music, both in the main menu and in match", "Docs/Classes/URTSGameInstance/Variables/_93.html", [], "URTSGameInstance");
addToContainers_variable("", "The audio component in charge of playing the sound when player selects a selectable e.g. \"Ready to roll out!\"", "Docs/Classes/URTSGameInstance/Variables/_94.html", [], "URTSGameInstance");
addToContainers_variable("", "Audio component in charge of playing sounds when the player issues a command", "Docs/Classes/URTSGameInstance/Variables/_95.html", [], "URTSGameInstance");
addToContainers_variable("", "Audio component to play zero health sounds", "Docs/Classes/URTSGameInstance/Variables/_96.html", [], "URTSGameInstance");
addToContainers_variable("", "Audio component to play various effects that don\'t fall into a category above for example: the sound when player sets a buildings rally point", "Docs/Classes/URTSGameInstance/Variables/_97.html", [], "URTSGameInstance");
addToContainers_variable("", "The music to play while in main menu/lobby", "Docs/Classes/URTSGameInstance/Variables/_98.html", [], "URTSGameInstance");
addToContainers_variable("", "The sounds to play when a chat message is received", "Docs/Classes/URTSGameInstance/Variables/_99.html", [], "URTSGameInstance");
addToContainers_variable("", "Main menu widgets blueprints", "Docs/Classes/URTSGameInstance/Variables/_100.html", [], "URTSGameInstance");
addToContainers_variable("", "Main menu widgets that have already been created", "Docs/Classes/URTSGameInstance/Variables/_101.html", [], "URTSGameInstance");
addToContainers_variable("", "Array to keep track of previous menus visited to implement back behaviour. Index 0 holds the first widget viewed, index 1 the next etc. If returning to a previous menu then show widget at WidgetHistory.Num() - 2 provided it\'s a valid index. ShowWidget() and ShowPreviousWidget() are the only two functions that change this array", "Docs/Classes/URTSGameInstance/Variables/_102.html", [], "URTSGameInstance");
addToContainers_variable("WidgetTransitionFunction", "Optional function to call after widget exit anim finishes. Mainly here to aid in playing widget animations and changing maps", "Docs/Classes/URTSGameInstance/Variables/WidgetTransitionFunction.html", ["widget", "transition", "function"], "URTSGameInstance");
addToContainers_variable("WidgetToShow", "Widget to show after camera fade", "Docs/Classes/URTSGameInstance/Variables/WidgetToShow.html", ["widget", "to", "show"], "URTSGameInstance");
addToContainers_variable("NumWidgetsBack", "When calling ShowPreviousWidget how many widgets back to go. Also used as a signal to know whether we are showing a new widget or returning to a previous one. 0 means showing new widget. > 0 means returning to a previous one", "Docs/Classes/URTSGameInstance/Variables/NumWidgetsBack.html", ["num", "widgets", "back"], "URTSGameInstance");
addToContainers_variable("", "Widget to show up when a warning or something wants to be shown to player while in menus", "Docs/Classes/URTSGameInstance/Variables/_103.html", [], "URTSGameInstance");
addToContainers_variable("", "Popup widget once it has been created", "Docs/Classes/URTSGameInstance/Variables/_104.html", [], "URTSGameInstance");
addToContainers_variable("SessionSettings", "Session settings here so they persist across map changes", "Docs/Classes/URTSGameInstance/Variables/SessionSettings.html", ["session", "settings"], "URTSGameInstance");
addToContainers_variable("LobbyPassword", "Only known on host", "Docs/Classes/URTSGameInstance/Variables/LobbyPassword.html", ["lobby", "password"], "URTSGameInstance");
addToContainers_variable("PendingSessionSettings", "Session settings for session we are trying to create. Cached here so delegates can reference it when trying to recreate session", "Docs/Classes/URTSGameInstance/Variables/PendingSessionSettings.html", ["pending", "session", "settings"], "URTSGameInstance");
addToContainers_variable("bIsColdBooting", "Because same game mode used for all maps. Helps GM know to show intro or not. True while main menu has never been seen", "Docs/Classes/URTSGameInstance/Variables/bIsColdBooting.html", ["is", "cold", "booting"], "URTSGameInstance");
addToContainers_variable("bIsInMainMenuMap", "Because same game mode if used for main menu, lobby and matches this helps game mode decide what to do each time it initializes and call BeginPlay etc", "Docs/Classes/URTSGameInstance/Variables/bIsInMainMenuMap.html", ["is", "in", "main", "menu", "map"], "URTSGameInstance");
addToContainers_variable("MatchInfo", "Info about match for when level has loaded. Saving as a reference/pointer will not work after OpenLevel because widgets must get destroyed after map change", "Docs/Classes/URTSGameInstance/Variables/MatchInfo.html", ["match", "info"], "URTSGameInstance");
addToContainers_variable("", "Class that holds settings that can be changed while not in shipping build to speed up development", "Docs/Classes/URTSGameInstance/Variables/_105.html", [], "URTSGameInstance");
addToContainers_variable("", "Development settings actor once spawned", "Docs/Classes/URTSGameInstance/Variables/_106.html", [], "URTSGameInstance");
addToContainers_variable("EditorPlaySettingsWidget", "Alternative to DevelopmentSettings", "Docs/Classes/URTSGameInstance/Variables/EditorPlaySettingsWidget.html", ["editor", "play", "settings", "widget"], "URTSGameInstance");
addToContainers_struct("FMinimalPlayerInfo", "==============================================================================================", "Docs/Structs/FMinimalPlayerInfo/FMinimalPlayerInfo.html", ["minimal", "player", "info"], "");
addToContainers_function("FMinimalPlayerInfo", "", "Docs/Structs/FMinimalPlayerInfo/Functions/FMinimalPlayerInfo.html", ["minimal", "player", "info"], "FMinimalPlayerInfo");
addToContainers_function("FMinimalPlayerInfo", "", "Docs/Structs/FMinimalPlayerInfo/Functions/FMinimalPlayerInfo_1.html", ["minimal", "player", "info"], "FMinimalPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FMinimalPlayerInfo/Variables/.html", [], "FMinimalPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FMinimalPlayerInfo/Variables/_1.html", [], "FMinimalPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FMinimalPlayerInfo/Variables/_2.html", [], "FMinimalPlayerInfo");
addToContainers_variable("", "This can change during GI::AssignOptimalStartingSpots", "Docs/Structs/FMinimalPlayerInfo/Variables/_3.html", [], "FMinimalPlayerInfo");
addToContainers_struct("FPIESelectableLoggingInfo", "Info for logging about selectables already in map on PIE", "Docs/Structs/FPIESelectableLoggingInfo/FPIESelectableLoggingInfo.html", ["p", "i", "e", "selectable", "logging", "info"], "");
addToContainers_function("FPIESelectableLoggingInfo", "", "Docs/Structs/FPIESelectableLoggingInfo/Functions/FPIESelectableLoggingInfo.html", ["p", "i", "e", "selectable", "logging", "info"], "FPIESelectableLoggingInfo");
addToContainers_function("FPIESelectableLoggingInfo", "", "Docs/Structs/FPIESelectableLoggingInfo/Functions/FPIESelectableLoggingInfo_1.html", ["p", "i", "e", "selectable", "logging", "info"], "FPIESelectableLoggingInfo");
addToContainers_variable("", "Actor name", "Docs/Structs/FPIESelectableLoggingInfo/Variables/.html", [], "FPIESelectableLoggingInfo");
addToContainers_variable("", "Owner index", "Docs/Structs/FPIESelectableLoggingInfo/Variables/_1.html", [], "FPIESelectableLoggingInfo");
addToContainers_struct("FPIEStartingSelectableInfo", "For PIE testing only. Info needed to respawn a selectable already placed in map", "Docs/Structs/FPIEStartingSelectableInfo/FPIEStartingSelectableInfo.html", ["p", "i", "e", "starting", "selectable", "info"], "");
addToContainers_function("FPIEStartingSelectableInfo", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/FPIEStartingSelectableInfo.html", ["p", "i", "e", "starting", "selectable", "info"], "FPIEStartingSelectableInfo");
addToContainers_function("FPIEStartingSelectableInfo", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/FPIEStartingSelectableInfo_1.html", ["p", "i", "e", "starting", "selectable", "info"], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Blueprint of selectable", "Docs/Structs/FPIEStartingSelectableInfo/Variables/.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Transform to spawn actor at", "Docs/Structs/FPIEStartingSelectableInfo/Variables/_1.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Index of player that will own selectable. -2 = no one 0 = server player 1 = client 1 2 = client 2 and so on", "Docs/Structs/FPIEStartingSelectableInfo/Variables/_2.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Whether the owner index is for a CPU or human player", "Docs/Structs/FPIEStartingSelectableInfo/Variables/_3.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("BuildingType", "The type of building/unit this is. Here for CPU player AI controllers. NotBuilding if selectablke is not a building, and NotUnit if selectable is not a unit", "Docs/Structs/FPIEStartingSelectableInfo/Variables/BuildingType.html", ["building", "type"], "FPIEStartingSelectableInfo");
addToContainers_variable("UnitType", "", "Docs/Structs/FPIEStartingSelectableInfo/Variables/UnitType.html", ["unit", "type"], "FPIEStartingSelectableInfo");
addToContainers_struct("FNewPlayerDefaultValues", "Multiplayer lobbies only. Holds what settings a newly joined player wants to set as their default values when they join", "Docs/Structs/FNewPlayerDefaultValues/FNewPlayerDefaultValues.html", ["new", "player", "default", "values"], "");
addToContainers_function("FNewPlayerDefaultValues", "Default constructor, never to be used", "Docs/Structs/FNewPlayerDefaultValues/Functions/FNewPlayerDefaultValues.html", ["new", "player", "default", "values"], "FNewPlayerDefaultValues");
addToContainers_function("FNewPlayerDefaultValues", "Constructor intended to be used", "Docs/Structs/FNewPlayerDefaultValues/Functions/FNewPlayerDefaultValues_1.html", ["new", "player", "default", "values"], "FNewPlayerDefaultValues");
addToContainers_variable("", "The faction they want to be when they join", "Docs/Structs/FNewPlayerDefaultValues/Variables/.html", [], "FNewPlayerDefaultValues");
addToContainers_class("ARTSGameMode", "Game mode handles checking if players are defeated during a match. It also handles what to do when testing in PIE/standalone When testing in PIE game mode and auto-connect true game mode will only be spawned for the server player, or at least BeginPlay only gets called for server player", "Docs/Classes/ARTSGameMode/ARTSGameMode.html", ["r", "t", "s", "game", "mode"], "");
addToContainers_function("ARTSGameMode", "", "Docs/Classes/ARTSGameMode/Functions/ARTSGameMode.html", ["r", "t", "s", "game", "mode"], "ARTSGameMode");
addToContainers_variable("", "Info about players that gets parsed from their options string during Login(). It needs to be cached here because it is not safe to send by RPC until PostLogin()", "Docs/Classes/ARTSGameMode/Variables/.html", [], "ARTSGameMode");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSGameMode/Variables/_1.html", [], "ARTSGameMode");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ARTSGameMode/Variables/_2.html", [], "ARTSGameMode");
addToContainers_variable("NumPIEClients", "The number of PIE players including server player. Excludes CPU players", "Docs/Classes/ARTSGameMode/Variables/NumPIEClients.html", ["num", "p", "i", "e", "clients"], "ARTSGameMode");
addToContainers_variable("NumPIECPUPlayers", "Number of CPU players actually spawned for PIE/standalone session, not the number desired", "Docs/Classes/ARTSGameMode/Variables/NumPIECPUPlayers.html", ["num", "p", "i", "e", "c", "p", "u", "players"], "ARTSGameMode");
addToContainers_variable("", "Array of info about actors to respawn as part of the PIE/standalone setup", "Docs/Classes/ARTSGameMode/Variables/_3.html", [], "ARTSGameMode");
addToContainers_variable("NeutralSelectables", "Neutral selectables that should be setup close to starting match", "Docs/Classes/ARTSGameMode/Variables/NeutralSelectables.html", ["neutral", "selectables"], "ARTSGameMode");
addToContainers_variable("DefeatCondition", "Rule for if player is defeated", "Docs/Classes/ARTSGameMode/Variables/DefeatCondition.html", ["defeat", "condition"], "ARTSGameMode");
addToContainers_variable("DefeatFunctions[Statics::NUM_DEFEAT_CONDITIONS]", "Function pointer to function to use to check if team has been defeated", "Docs/Classes/ARTSGameMode/Variables/DefeatFunctions[Statics::NUM_DEFEAT_CONDITIONS].html", ["defeat", "functions[", "statics::", "n", "u", "m_", "d", "e", "f", "e", "a", "t_", "c", "o", "n", "d", "i", "t", "i", "o", "n", "s]"], "ARTSGameMode");
addToContainers_variable("", "Having custom victory conditions means polling seems like the most feasible option. Rate at which checks to see if defeat conditions are fulfilled. The larger the value the greater the chance of a draw", "Docs/Classes/ARTSGameMode/Variables/_4.html", [], "ARTSGameMode");
addToContainers_variable("TimerHandle_DefeatCondition", "Timer handle for checking if players have been defeated and as a consquence if the match should end", "Docs/Classes/ARTSGameMode/Variables/TimerHandle_DefeatCondition.html", ["timer", "handle_", "defeat", "condition"], "ARTSGameMode");
addToContainers_struct("FResourcesArray", "Array of resource spots", "Docs/Structs/FResourcesArray/FResourcesArray.html", ["resources", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/FResourcesArray/Variables/Array.html", [], "FResourcesArray");
addToContainers_struct("FAudioComponentContainer", "TMap and TArray of UAudioComponents. TMap and TArray contain the same elements. Did it like this for O(1) contains, add and remove and array speed iteration.", "Docs/Structs/FAudioComponentContainer/FAudioComponentContainer.html", ["audio", "component", "container"], "");
addToContainers_variable("Map", "Key = index in Array component is", "Docs/Structs/FAudioComponentContainer/Variables/Map.html", [], "FAudioComponentContainer");
addToContainers_variable("", "", "Docs/Structs/FAudioComponentContainer/Variables/.html", [], "FAudioComponentContainer");
addToContainers_class("ARTSGameState", "Same game state used all the time. Handles lobby state aswell", "Docs/Classes/ARTSGameState/ARTSGameState.html", ["r", "t", "s", "game", "state"], "");
addToContainers_function("ARTSGameState", "", "Docs/Classes/ARTSGameState/Functions/ARTSGameState.html", ["r", "t", "s", "game", "state"], "ARTSGameState");
addToContainers_variable("AccumulatedTimeTowardsNextGameTick", "[Server] Amount of time towards incrementing TickCounter", "Docs/Classes/ARTSGameState/Variables/AccumulatedTimeTowardsNextGameTick.html", ["accumulated", "time", "towards", "next", "game", "tick"], "ARTSGameState");
addToContainers_variable("", "A counter that tracks number of ticks. To reduce bandwidth it is kept as 1 byte but can be increased if needed. It will overflow often and that is ok. This should never equal 255", "Docs/Classes/ARTSGameState/Variables/.html", [], "ARTSGameState");
addToContainers_variable("Server_SelectableResourceUsersThatRegen", "[Server] Stores a pointer to selectables that have a selectable resource that thas a regen rate != 0", "Docs/Classes/ARTSGameState/Variables/Server_SelectableResourceUsersThatRegen.html", ["server_", "selectable", "resource", "users", "that", "regen"], "ARTSGameState");
addToContainers_variable("PreviousTickCounterValue", "[Client] The last value of TickCounter", "Docs/Classes/ARTSGameState/Variables/PreviousTickCounterValue.html", ["previous", "tick", "counter", "value"], "ARTSGameState");
addToContainers_variable("Client_SelectableResourceUsersThatRegen", "[Client] Stores pointers to selectables that regen a selectable resource over time", "Docs/Classes/ARTSGameState/Variables/Client_SelectableResourceUsersThatRegen.html", ["client_", "selectable", "resource", "users", "that", "regen"], "ARTSGameState");
addToContainers_variable("TimeWhenMatchStarted", "[Server] The time when match started. Used to create a custom match timer", "Docs/Classes/ARTSGameState/Variables/TimeWhenMatchStarted.html", ["time", "when", "match", "started"], "ARTSGameState");
addToContainers_variable("NextUniquePlayerID", "The unique ID to assign to the next player. These will be assigned when loading a match from lobby or testing with PIE. APlayerState::PlayerId used to work but now always shows 0 in PIE", "Docs/Classes/ARTSGameState/Variables/NextUniquePlayerID.html", ["next", "unique", "player", "i", "d"], "ARTSGameState");
addToContainers_variable("LocalPlayersTeam", "The team the local player is on", "Docs/Classes/ARTSGameState/Variables/LocalPlayersTeam.html", ["local", "players", "team"], "ARTSGameState");
addToContainers_variable("NumTeams", "Number of different teams in the match excluding neutral", "Docs/Classes/ARTSGameState/Variables/NumTeams.html", ["num", "teams"], "ARTSGameState");
addToContainers_variable("", "Array of the player states of each team.", "Docs/Classes/ARTSGameState/Variables/_1.html", [], "ARTSGameState");
addToContainers_variable("", "Holds the FNames to appear in actor tags for each team. Use UStatics::TeamToArrayIndex to convert an ETeam to its index in this array", "Docs/Classes/ARTSGameState/Variables/_2.html", [], "ARTSGameState");
addToContainers_variable("", "Array of player controllers server-side only", "Docs/Classes/ARTSGameState/Variables/_3.html", [], "ARTSGameState");
addToContainers_variable("", "Array of all player states excluding observers, usable by both server and client", "Docs/Classes/ARTSGameState/Variables/_4.html", [], "ARTSGameState");
addToContainers_variable("", "Array of CPU player AI controllers", "Docs/Classes/ARTSGameState/Variables/_5.html", [], "ARTSGameState");
addToContainers_variable("", "Array of players that have not been defeated in the current match", "Docs/Classes/ARTSGameState/Variables/_6.html", [], "ARTSGameState");
addToContainers_variable("", "Array of player states for players that are match observers", "Docs/Classes/ARTSGameState/Variables/_7.html", [], "ARTSGameState");
addToContainers_variable("", "Maps RTS player ID (uint8) to the player", "Docs/Classes/ARTSGameState/Variables/_8.html", [], "ARTSGameState");
addToContainers_variable("", "Reference to fog of war manager once a match has started", "Docs/Classes/ARTSGameState/Variables/_9.html", [], "ARTSGameState");
addToContainers_variable("", "Modified on server only. Accessed by the fog of war manager on the server. Holds all info about the visibiliy of all selectables for all teams. Used to avoid sending updates over the wire when a selectables visibility has not changed", "Docs/Classes/ARTSGameState/Variables/_10.html", [], "ARTSGameState");
addToContainers_variable("", "Map elements that do not belong to a team but are selectable e.g. resource spots. Updated server-side only", "Docs/Classes/ARTSGameState/Variables/_11.html", [], "ARTSGameState");
addToContainers_variable("", "Actors that have been spawned into the world such as projectiles that follow the rules of fog of war", "Docs/Classes/ARTSGameState/Variables/_12.html", [], "ARTSGameState");
addToContainers_variable("", "Particle systems components that have been spawned into the world that follow the rules of fog of war", "Docs/Classes/ARTSGameState/Variables/_13.html", [], "ARTSGameState");
addToContainers_variable("", "Maps context action type to a actor that handles that context action", "Docs/Classes/ARTSGameState/Variables/_14.html", [], "ARTSGameState");
addToContainers_variable("", "Maps commander ability type to its effect object", "Docs/Classes/ARTSGameState/Variables/_15.html", [], "ARTSGameState");
addToContainers_variable("", "[Performance] Array of all inventory items that are in the world. Maintained on both server and clients. This just basically exists because it\'s faster iterating a TArray than a TMap. It was added here for the fog of war manager. We could remove this.", "Docs/Classes/ARTSGameState/Variables/_16.html", [], "ARTSGameState");
addToContainers_variable("", "Maps ID to item for it. Replica of InventoryItemsInWorldArray. Maintained on both server and clients.", "Docs/Classes/ARTSGameState/Variables/_17.html", [], "ARTSGameState");
addToContainers_variable("", "Maps team to their trace channel as a uint64. Key = static_cast<uint8>(Team).", "Docs/Classes/ARTSGameState/Variables/_18.html", [], "ARTSGameState");
addToContainers_variable("", "Maps team to array of every collision channel of their enemies. Key = static_cast<uint8>(Team).", "Docs/Classes/ARTSGameState/Variables/_19.html", [], "ARTSGameState");
addToContainers_variable("EnemyQueryParams", "Maps team to all the trace channels for their enemies Key = Statics::TeamToArrayIndex(Team)", "Docs/Classes/ARTSGameState/Variables/EnemyQueryParams.html", ["enemy", "query", "params"], "ARTSGameState");
addToContainers_variable("NeutralTraceChannel", "The trace channel for neutrals that want to be a part of queries. An example of neutrals that might want to use this is neutral item shops", "Docs/Classes/ARTSGameState/Variables/NeutralTraceChannel.html", ["neutral", "trace", "channel"], "ARTSGameState");
addToContainers_variable("AllTeamsQueryParams", "Query params to use when querying for all teams selectables", "Docs/Classes/ARTSGameState/Variables/AllTeamsQueryParams.html", ["all", "teams", "query", "params"], "ARTSGameState");
addToContainers_variable("AllTeams_Overlap", "Collsion struct that is set to overlap with all team channels and ignore everything else", "Docs/Classes/ARTSGameState/Variables/AllTeams_Overlap.html", ["all", "teams_", "overlap"], "ARTSGameState");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/ARTSGameState/Variables/_20.html", [], "ARTSGameState");
addToContainers_variable("", "List of resource spots on map. Should be populated when the map loads", "Docs/Classes/ARTSGameState/Variables/_21.html", [], "ARTSGameState");
addToContainers_variable("", "Array of all resource spots on map", "Docs/Classes/ARTSGameState/Variables/_22.html", [], "ARTSGameState");
addToContainers_variable("CurrentInventoryItemUniqueID", "The ID to give to the next inventory item in actor form that requests one", "Docs/Classes/ARTSGameState/Variables/CurrentInventoryItemUniqueID.html", ["current", "inventory", "item", "unique", "i", "d"], "ARTSGameState");
addToContainers_variable("", "Sounds in the world with EFogSoundRules::Dynamic", "Docs/Classes/ARTSGameState/Variables/_23.html", [], "ARTSGameState");
addToContainers_variable("", "Unheard AlwaysKnownOnceHeard sounds", "Docs/Classes/ARTSGameState/Variables/_24.html", [], "ARTSGameState");
addToContainers_variable("", "This will only contain the the sounds of hostiles", "Docs/Classes/ARTSGameState/Variables/_25.html", [], "ARTSGameState");
addToContainers_variable("", "True if playing game, false if in say lobby. Used to know whether to consider certain lobby-specific variables for replication", "Docs/Classes/ARTSGameState/Variables/_26.html", [], "ARTSGameState");
addToContainers_variable("", "Name of lobby", "Docs/Classes/ARTSGameState/Variables/_27.html", [], "ARTSGameState");
addToContainers_variable("", "Player states in lobby. Using this player name, team and faction can be derived", "Docs/Classes/ARTSGameState/Variables/_28.html", [], "ARTSGameState");
addToContainers_variable("", "Whether lobby players are human or CPU players. Also whether slot is open or closed", "Docs/Classes/ARTSGameState/Variables/_29.html", [], "ARTSGameState");
addToContainers_variable("", "Difficulty of CPU player if CPU player", "Docs/Classes/ARTSGameState/Variables/_30.html", [], "ARTSGameState");
addToContainers_variable("", "What team each person in lobby is", "Docs/Classes/ARTSGameState/Variables/_31.html", [], "ARTSGameState");
addToContainers_variable("", "What faction each person in lobby is", "Docs/Classes/ARTSGameState/Variables/_32.html", [], "ARTSGameState");
addToContainers_variable("", "What player start location each player in lobby has. -1 == unassigned", "Docs/Classes/ARTSGameState/Variables/_33.html", [], "ARTSGameState");
addToContainers_variable("", "Amount of resources to start match with. Value is the value currently set in lobby", "Docs/Classes/ARTSGameState/Variables/_34.html", [], "ARTSGameState");
addToContainers_variable("", "Defeat condition for match that is currently set in lobby", "Docs/Classes/ARTSGameState/Variables/_35.html", [], "ARTSGameState");
addToContainers_variable("", "Index of lobby map in some array", "Docs/Classes/ARTSGameState/Variables/_36.html", [], "ARTSGameState");
addToContainers_variable(":", "If true then no human players should be allowed to join lobby and players already in lobby are not allowed to change anything like their team, faction etc but can still leave. This gives host a chance to review the lobby state without sneaky changes before match starts", "Docs/Classes/ARTSGameState/Variables/:.html", [], "ARTSGameState");
addToContainers_variable("PIE_NumPCSetupCompleteAcks", "Counter for the number of PCs that have completed Client_SetupForMatch when testing with PIE and skip main menu", "Docs/Classes/ARTSGameState/Variables/PIE_NumPCSetupCompleteAcks.html", ["i", "e_", "num", "p", "c", "setup", "complete", "acks"], "ARTSGameState");
addToContainers_variable("PIE_NumPSSetInitialValuesAcks", "Number of acks received for PS::Multicast_SetInitialValues", "Docs/Classes/ARTSGameState/Variables/PIE_NumPSSetInitialValuesAcks.html", ["i", "e_", "num", "p", "s", "set", "initial", "values", "acks"], "ARTSGameState");
addToContainers_variable("", "The status of loading the match", "Docs/Classes/ARTSGameState/Variables/_37.html", [], "ARTSGameState");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSGameState/Variables/_38.html", [], "ARTSGameState");
addToContainers_variable("ExpectedNumHumanPlayers", "Number of human players expected to be in the match", "Docs/Classes/ARTSGameState/Variables/ExpectedNumHumanPlayers.html", ["expected", "num", "human", "players"], "ARTSGameState");
addToContainers_variable("ExpectedNumPlayers", "Expected number of players in match including CPU players", "Docs/Classes/ARTSGameState/Variables/ExpectedNumPlayers.html", ["expected", "num", "players"], "ARTSGameState");
addToContainers_variable("NumPCSetupAcks", "Number of match player controllers that have completed their Client_SetupForMatch", "Docs/Classes/ARTSGameState/Variables/NumPCSetupAcks.html", ["num", "p", "c", "setup", "acks"], "ARTSGameState");
addToContainers_variable("NumLoadedLevelAcks", "Number of players that have finished streaming in the level", "Docs/Classes/ARTSGameState/Variables/NumLoadedLevelAcks.html", ["num", "loaded", "level", "acks"], "ARTSGameState");
addToContainers_variable("NumInitialValueAcks", "Number of player states that have had their inital values set up. This should be larger than the number of players because it is one ack for every player state", "Docs/Classes/ARTSGameState/Variables/NumInitialValueAcks.html", ["num", "initial", "value", "acks"], "ARTSGameState");
addToContainers_variable("NumFinalSetupAcks", "Number of acks from AMyPlayerState::Client_FinalSetup", "Docs/Classes/ARTSGameState/Variables/NumFinalSetupAcks.html", ["num", "final", "setup", "acks"], "ARTSGameState");
addToContainers_variable("NumLevelsStreamedOut", "", "Docs/Classes/ARTSGameState/Variables/NumLevelsStreamedOut.html", ["num", "levels", "streamed", "out"], "ARTSGameState");
addToContainers_variable("bHasStreamedInMatchLevel", "", "Docs/Classes/ARTSGameState/Variables/bHasStreamedInMatchLevel.html", ["has", "streamed", "in", "match", "level"], "ARTSGameState");
addToContainers_variable("bHasAckedPostLoginsAndMaps", "True if check above was successful. Only here for debugging purposes", "Docs/Classes/ARTSGameState/Variables/bHasAckedPostLoginsAndMaps.html", ["has", "acked", "post", "logins", "and", "maps"], "ARTSGameState");
addToContainers_class("URTSLocalPlayer", "Here for one reason: - to pass data such as password to the server when connecting to an online session How to set custom ULocalPlayer class: edit DefaultEngine.ini", "Docs/Classes/URTSLocalPlayer/URTSLocalPlayer.html", ["r", "t", "s", "local", "player"], "");
addToContainers_function("URTSLocalPlayer", "", "Docs/Classes/URTSLocalPlayer/Functions/URTSLocalPlayer.html", ["r", "t", "s", "local", "player"], "URTSLocalPlayer");
addToContainers_variable("", "Password to send to server when trying to connect to networked lobby", "Docs/Classes/URTSLocalPlayer/Variables/.html", [], "URTSLocalPlayer");
addToContainers_struct("FCtrlGroupList", "Array that holds what selectables are in a ctrl group", "Docs/Structs/FCtrlGroupList/FCtrlGroupList.html", ["ctrl", "group", "list"], "");
addToContainers_variable("", "Holds the selectable in the ctrl group. Not quite there yet in using selectable IDs because it is hard to know if an actor was destroyed, then their ID was assigned to a newly built selectable and now that selectable will be in the ctrl group even though it shouldn\'t be", "Docs/Structs/FCtrlGroupList/Variables/.html", [], "FCtrlGroupList");
addToContainers_struct("FTryBindActionResult", "The result of trying to change a key binding", "Docs/Structs/FTryBindActionResult/FTryBindActionResult.html", ["try", "bind", "action", "result"], "");
addToContainers_function("FTryBindActionResult", "", "Docs/Structs/FTryBindActionResult/Functions/FTryBindActionResult.html", ["try", "bind", "action", "result"], "FTryBindActionResult");
addToContainers_variable("KeyWeAreTryingToAssign", "", "Docs/Structs/FTryBindActionResult/Variables/KeyWeAreTryingToAssign.html", ["key", "we", "are", "trying", "to", "assign"], "FTryBindActionResult");
addToContainers_variable("AlreadyBoundToKey_Axis", "If this != None then an axis is already bound to key. Also if binding was successful then the axis that gets unbinded can be stored here, or it will be None if no axis was unbinded. This will be None if we\'re just changing the key for the same axis e.g. MoveCameraForward is changing from W to T and there\'s nothing becoming unbound", "Docs/Structs/FTryBindActionResult/Variables/AlreadyBoundToKey_Axis.html", ["already", "bound", "to", "key_", "axis"], "FTryBindActionResult");
addToContainers_variable("AlreadyBoundToKey_Action[8]", "Same as above except for action mappings instead. If it was an axis binding we were trying to bind then it will unmap every modifier combination with that key so there can be up to 8 actions unmapped from a rebinding", "Docs/Structs/FTryBindActionResult/Variables/AlreadyBoundToKey_Action[8].html", ["already", "bound", "to", "key_", "action[8]"], "FTryBindActionResult");
addToContainers_variable("Warning", "If this != None then something else was the problem", "Docs/Structs/FTryBindActionResult/Variables/Warning.html", [], "FTryBindActionResult");
addToContainers_class("ARTSPlayerController", "All input handled through this class, well at least non-widget input. Both players and obsevers use this class", "Docs/Classes/ARTSPlayerController/ARTSPlayerController.html", ["r", "t", "s", "player", "controller"], "");
addToContainers_function("ARTSPlayerController", "", "Docs/Classes/ARTSPlayerController/Functions/ARTSPlayerController.html", ["r", "t", "s", "player", "controller"], "ARTSPlayerController");
addToContainers_variable("", "Reference to ViewTarget\'s sprint arm", "Docs/Classes/ARTSPlayerController/Variables/.html", [], "ARTSPlayerController");
addToContainers_variable("TeamTag", "Team this player is on in FName form", "Docs/Classes/ARTSPlayerController/Variables/TeamTag.html", ["team", "tag"], "ARTSPlayerController");
addToContainers_variable("Team", "Team this player is on", "Docs/Classes/ARTSPlayerController/Variables/Team.html", [], "ARTSPlayerController");
addToContainers_variable("Type", "What type of player this is; either player participating in match or an observer", "Docs/Classes/ARTSPlayerController/Variables/Type.html", [], "ARTSPlayerController");
addToContainers_variable("", "Particle system that will be drawn on world when right clicking on world or selectable. Use UStatics::CommandTargetTypeToArrayIndex to get correct array index", "Docs/Classes/ARTSPlayerController/Variables/_1.html", [], "ARTSPlayerController");
addToContainers_variable("", "The last spawned right click particle so it can be hidden when a new right click happens because we only show one max", "Docs/Classes/ARTSPlayerController/Variables/_2.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to owning game instance", "Docs/Classes/ARTSPlayerController/Variables/_3.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to owning player state", "Docs/Classes/ARTSPlayerController/Variables/_4.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ARTSPlayerController/Variables/_5.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to object pooling manager for handling creating projectiles. One for each client", "Docs/Classes/ARTSPlayerController/Variables/_6.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to the HUD widget", "Docs/Classes/ARTSPlayerController/Variables/_7.html", [], "ARTSPlayerController");
addToContainers_variable("HoveredUIElement", "Widget the mouse is hovered over", "Docs/Classes/ARTSPlayerController/Variables/HoveredUIElement.html", ["hovered", "u", "i", "element"], "ARTSPlayerController");
addToContainers_variable("HighlightedButton", "The button on the UI that is \'highlighted\'. Null if no button is highlighted", "Docs/Classes/ARTSPlayerController/Variables/HighlightedButton.html", ["highlighted", "button"], "ARTSPlayerController");
addToContainers_variable("HoveredUserWidget", "", "Docs/Classes/ARTSPlayerController/Variables/HoveredUserWidget.html", ["hovered", "user", "widget"], "ARTSPlayerController");
addToContainers_variable("AccumulatedTimeSpentHoveringUIElement", "Time spent hovering a UI element", "Docs/Classes/ARTSPlayerController/Variables/AccumulatedTimeSpentHoveringUIElement.html", ["accumulated", "time", "spent", "hovering", "u", "i", "element"], "ARTSPlayerController");
addToContainers_variable("TimeSpentNotHoveringUIElement", "Time spent not hovering a UI element", "Docs/Classes/ARTSPlayerController/Variables/TimeSpentNotHoveringUIElement.html", ["time", "spent", "not", "hovering", "u", "i", "element"], "ARTSPlayerController");
addToContainers_variable("1", "Whether a tooltip for a UI element is showing", "Docs/Classes/ARTSPlayerController/Variables/1.html", [], "ARTSPlayerController");
addToContainers_variable("1", "", "Docs/Classes/ARTSPlayerController/Variables/1_1.html", [], "ARTSPlayerController");
addToContainers_variable("AccumulatedTimeSpentHoveringSelectable", "Time spent hovering a selectable", "Docs/Classes/ARTSPlayerController/Variables/AccumulatedTimeSpentHoveringSelectable.html", ["accumulated", "time", "spent", "hovering", "selectable"], "ARTSPlayerController");
addToContainers_variable("TimeSpentNotHoveringSelectable", "Time spent not hovering a selectable", "Docs/Classes/ARTSPlayerController/Variables/TimeSpentNotHoveringSelectable.html", ["time", "spent", "not", "hovering", "selectable"], "ARTSPlayerController");
addToContainers_variable("", "A reference to the marquee box drawing HUD", "Docs/Classes/ARTSPlayerController/Variables/_8.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to the faction info for the faction this player is currently controlling. Is just used for visual things currently like appearance of ghost building.", "Docs/Classes/ARTSPlayerController/Variables/_9.html", [], "ARTSPlayerController");
addToContainers_variable("Faction", "Faction this player controller is commanding", "Docs/Classes/ARTSPlayerController/Variables/Faction.html", [], "ARTSPlayerController");
addToContainers_variable("", "Pool of ghost buildings for our faction. To avoid spawn actor during match", "Docs/Classes/ARTSPlayerController/Variables/_10.html", [], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_Action", "If one of these are not \"None\" then the player wants to change one of their key bindings", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_Action.html", ["pending", "key", "rebind_", "action"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_Axis", "", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_Axis.html", ["pending", "key", "rebind_", "axis"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_bWaitingForConfirmation", "If true then the game is asking the player \"Are you sure you want to rebind this key?\" likely because there is a key mapping collision with another action", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_bWaitingForConfirmation.html", ["pending", "key", "rebind_b", "waiting", "for", "confirmation"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_PressedModifierFlags_Left", "Flags to keep track of what modifier keys are pressed while trying to rebind a key. Only meaningfull while trying to rebind a key. Do not query these at any other time. Use PlayerInput->IsCtrlPressed() etc instead. There are two sets of flags - one for modifier keys on the left of the keyboard and one for modifier keys on the right side of the keyboard", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_PressedModifierFlags_Left.html", ["pending", "key", "rebind_", "pressed", "modifier", "flags_", "left"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_PressedModifierFlags_Right", "", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_PressedModifierFlags_Right.html", ["pending", "key", "rebind_", "pressed", "modifier", "flags_", "right"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_KeyBindingsWidget", "The widget for key bindings. Can be null", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_KeyBindingsWidget.html", ["pending", "key", "rebind_", "key", "bindings", "widget"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_TimeSpentTryingToCancel", "If >= 0 then the player is holding the cancel key down while a key bind change is pending TODO move this closer to other variables used in tick", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_TimeSpentTryingToCancel.html", ["pending", "key", "rebind_", "time", "spent", "trying", "to", "cancel"], "ARTSPlayerController");
addToContainers_variable("", "Ctrl group TArray. Maps button pressed to array of selectables that are part of that ctrl group. Ctrl groups are NOT updated when the selectables they contain become invalid and/or reach zero health. This is because there are 10 groups with potentially a lot of selectables in each one and it would be too much of a hit to performance. Instead you will have to check validity/health of each entry before using it. I don\'t really know what is best here - either hard pointers, weak pointers or using the selectableIDs in terms of performance, keeping GC in mind", "Docs/Classes/ARTSPlayerController/Variables/_11.html", [], "ARTSPlayerController");
addToContainers_variable("LastSelectControlGroupButtonReleased", "The last number button that was released from being pressed. Here to detect double presses", "Docs/Classes/ARTSPlayerController/Variables/LastSelectControlGroupButtonReleased.html", ["last", "select", "control", "group", "button", "released"], "ARTSPlayerController");
addToContainers_variable("LastSelectControlGroupButtonReleaseTime", "The time the last number button press was released", "Docs/Classes/ARTSPlayerController/Variables/LastSelectControlGroupButtonReleaseTime.html", ["last", "select", "control", "group", "button", "release", "time"], "ARTSPlayerController");
addToContainers_variable("bWasLastSelectControlGroupButtonPressADoublePress", "", "Docs/Classes/ARTSPlayerController/Variables/bWasLastSelectControlGroupButtonPressADoublePress.html", ["was", "last", "select", "control", "group", "button", "press", "a", "double", "press"], "ARTSPlayerController");
addToContainers_variable("", "Reference to players camera pawn during a match", "Docs/Classes/ARTSPlayerController/Variables/_12.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to ghost building", "Docs/Classes/ARTSPlayerController/Variables/_13.html", [], "ARTSPlayerController");
addToContainers_variable("bNeedToRecordGhostLocOnNextTick", "Here to delay recording the screen location of ghost until tick. Recording it on LMB press may give slightly off value, but haven\'t tested if this is the case", "Docs/Classes/ARTSPlayerController/Variables/bNeedToRecordGhostLocOnNextTick.html", ["need", "to", "record", "ghost", "loc", "on", "next", "tick"], "ARTSPlayerController");
addToContainers_variable("bIsGhostRotationActive", "True if mouse has moved at least GhostRotationRadius", "Docs/Classes/ARTSPlayerController/Variables/bIsGhostRotationActive.html", ["is", "ghost", "rotation", "active"], "ARTSPlayerController");
addToContainers_variable("GhostScreenSpaceLoc", "The screen location of the ghost building. Should not change while rotating ghost. Will be updated before calling RotateGhost", "Docs/Classes/ARTSPlayerController/Variables/GhostScreenSpaceLoc.html", ["ghost", "screen", "space", "loc"], "ARTSPlayerController");
addToContainers_variable("GhostRotationRadius", "The larger this is the more you have to move the mouse to rotate ghost. Small values mean the ghost building can sometimes rotate undesirably when trying to actually place it", "Docs/Classes/ARTSPlayerController/Variables/GhostRotationRadius.html", ["ghost", "rotation", "radius"], "ARTSPlayerController");
addToContainers_variable("GhostRotationSpeed", "Higher values mean ghost rotates faster", "Docs/Classes/ARTSPlayerController/Variables/GhostRotationSpeed.html", ["ghost", "rotation", "speed"], "ARTSPlayerController");
addToContainers_variable("GhostRotationDirection", "The way the ghost is currently rotating", "Docs/Classes/ARTSPlayerController/Variables/GhostRotationDirection.html", ["ghost", "rotation", "direction"], "ARTSPlayerController");
addToContainers_variable("GhostAccumulatedMovementTowardsDirection", "This is used to decide if ghost rotation direction should change. When negative mouse movement is in a direction that should cause rotation in the opposite direction then this number will be decreased, while movement in the current direction will increase it (up to a certain limit)", "Docs/Classes/ARTSPlayerController/Variables/GhostAccumulatedMovementTowardsDirection.html", ["ghost", "accumulated", "movement", "towards", "direction"], "ARTSPlayerController");
addToContainers_variable("bIsCameraFreeLookEnabled", "True if the player can rotate the camera with mouse movement. By default this is the middle mouse button", "Docs/Classes/ARTSPlayerController/Variables/bIsCameraFreeLookEnabled.html", ["is", "camera", "free", "look", "enabled"], "ARTSPlayerController");
addToContainers_variable("MouseLocLastFrame", "Screen space location of mouse in previous frame or when the LMB was pressed", "Docs/Classes/ARTSPlayerController/Variables/MouseLocLastFrame.html", ["mouse", "loc", "last", "frame"], "ARTSPlayerController");
addToContainers_variable("MouseLocThisFrame", "Screen space location", "Docs/Classes/ARTSPlayerController/Variables/MouseLocThisFrame.html", ["mouse", "loc", "this", "frame"], "ARTSPlayerController");
addToContainers_variable("MaxLineTraceDistance", "Max distance that GetHitResultUnderCursorByChannel will consider it a hit", "Docs/Classes/ARTSPlayerController/Variables/MaxLineTraceDistance.html", ["max", "line", "trace", "distance"], "ARTSPlayerController");
addToContainers_variable("", "Array of widgets currently being displayed (excluding any shown with ShowWidget where 2nd param is false, for example HUD). .Last() is the widget being displayed right now", "Docs/Classes/ARTSPlayerController/Variables/_14.html", [], "ARTSPlayerController");
addToContainers_variable("", "Holds already created widgets", "Docs/Classes/ARTSPlayerController/Variables/_15.html", [], "ARTSPlayerController");
addToContainers_variable("HitResult", "Hit result for trace under mouse on tick", "Docs/Classes/ARTSPlayerController/Variables/HitResult.html", ["hit", "result"], "ARTSPlayerController");
addToContainers_variable("", "Object under mouse on tick. Used for example to highlight selectables under mouse", "Docs/Classes/ARTSPlayerController/Variables/_16.html", [], "ARTSPlayerController");
addToContainers_variable("", "The object under the mouse when it is pressed. Needs to be the same object under mouse when LMB is released for it to get selected.", "Docs/Classes/ARTSPlayerController/Variables/_17.html", [], "ARTSPlayerController");
addToContainers_variable("bIsLMBPressed", "True if LMB is currently held down", "Docs/Classes/ARTSPlayerController/Variables/bIsLMBPressed.html", ["is", "l", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("bWantsMarquee", "Used in On_Mouse_Move_X/Y to know whether we should consider maequee selection to be active or not", "Docs/Classes/ARTSPlayerController/Variables/bWantsMarquee.html", ["wants", "marquee"], "ARTSPlayerController");
addToContainers_variable("bIsMarqueeActive", "True if marquee selection is active", "Docs/Classes/ARTSPlayerController/Variables/bIsMarqueeActive.html", ["is", "marquee", "active"], "ARTSPlayerController");
addToContainers_variable("ButtonPressedOnLMBPressed", "The button that was pressed/released with the mouse button", "Docs/Classes/ARTSPlayerController/Variables/ButtonPressedOnLMBPressed.html", ["button", "pressed", "on", "l", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("ButtonPressedOnRMBPressed", "", "Docs/Classes/ARTSPlayerController/Variables/ButtonPressedOnRMBPressed.html", ["button", "pressed", "on", "r", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("MouseMovement", "How far the mouse has moved since it was clicked", "Docs/Classes/ARTSPlayerController/Variables/MouseMovement.html", ["mouse", "movement"], "ARTSPlayerController");
addToContainers_variable("MouseMovementThreshold", "How far mouse is can move before it is no longer considered a click. Used by marquee selection", "Docs/Classes/ARTSPlayerController/Variables/MouseMovementThreshold.html", ["mouse", "movement", "threshold"], "ARTSPlayerController");
addToContainers_variable("PlayerID", "ID of player. Used to determine what is under control by this player. Assigned on PostLogin", "Docs/Classes/ARTSPlayerController/Variables/PlayerID.html", ["player", "i", "d"], "ARTSPlayerController");
addToContainers_variable("", "Spawned decal to be drawn under mouse cursor. This is not the mouse cursor itself but a decal for context actions that have an AoE. If this is null then no decal will de drawn.", "Docs/Classes/ARTSPlayerController/Variables/_18.html", [], "ARTSPlayerController");
addToContainers_variable("DefaultCursor", "Pointer to mouse cursor that is considered the default cursor. If null then no custom cursor has been set. In that case problems will arise if the cursor changes while doing an ability because the cursor will have nothing to revert back to, so if using custom cursors for abilities then this will need to be non null.", "Docs/Classes/ARTSPlayerController/Variables/DefaultCursor.html", ["default", "cursor"], "ARTSPlayerController");
addToContainers_variable("ScreenLocationCurrentCursor", "I could not think of a better name. This is the cursor that is considered the default given where the mouse is taking into account: - edge scrolling - hovering a UI element So if the mouse is at the edge of the screen then this will be set to one of the edge scrolling cursors. This does not take into account abilities", "Docs/Classes/ARTSPlayerController/Variables/ScreenLocationCurrentCursor.html", ["screen", "location", "current", "cursor"], "ARTSPlayerController");
addToContainers_variable("CurrentCursor", "Pointer to currently set mouse cursor", "Docs/Classes/ARTSPlayerController/Variables/CurrentCursor.html", ["current", "cursor"], "ARTSPlayerController");
addToContainers_variable("", "Size of decal drawn under mouse for Z axis only. Higher values means less performance but the decal will draw up/down slopes better.", "Docs/Classes/ARTSPlayerController/Variables/_19.html", [], "ARTSPlayerController");
addToContainers_variable("PendingContextAction", "The action that requires more than just pressing the context button to carry out. Added \'_A\' onto name for a temporary name change, change it back. All the other pending action variables are irrelevant if this equals \"None\"", "Docs/Classes/ARTSPlayerController/Variables/PendingContextAction.html", ["pending", "context", "action"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionUseMethod", "How the pending context action is being carried out", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionUseMethod.html", ["pending", "context", "action", "use", "method"], "ARTSPlayerController");
addToContainers_variable("GhostInstigatorID", "[Client] If pending context action is to place ghost building, the ID of the selectable that wants to place the building. 0 means no selectable. Will only be non-zero if building is being placed from a context menu. This is sent with Server_PlaceBuilding. If building is placed successfully then on confirmation RPC unit with this ID will be ordered to go over and start working on building", "Docs/Classes/ARTSPlayerController/Variables/GhostInstigatorID.html", ["ghost", "instigator", "i", "d"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionAuxilleryData", "Data that is needed by pending context command. One time this is used is when using inventory items we store the item type here. May be possible to actually remove GhostInstigatorID and make it use this instead", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionAuxilleryData.html", ["pending", "context", "action", "auxillery", "data"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionMoreAuxilleryData", "For inventory item use I store the inventory slot index here (the index the server likes i.e. the index in FInventory::SlotsArray)", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionMoreAuxilleryData.html", ["pending", "context", "action", "more", "auxillery", "data"], "ARTSPlayerController");
addToContainers_variable("bHasPrimarySelectedChanged", "Whether from the time we made the ability pending the primary selected has changed to something else. I think I have currently coded it so this variable will be set to true if the primary selected is the only selectable selected and it gets removed from Selected", "Docs/Classes/ARTSPlayerController/Variables/bHasPrimarySelectedChanged.html", ["has", "primary", "selected", "changed"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionAuxilleryDataPtr", "Pointer to something that is needed for carrying out the pending context command. Currently this is only used to point to an inventory slot", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionAuxilleryDataPtr.html", ["pending", "context", "action", "auxillery", "data", "ptr"], "ARTSPlayerController");
addToContainers_variable("PendingCommanderAbility", "Pointer to the pending commander ability. Will be null if there is none", "Docs/Classes/ARTSPlayerController/Variables/PendingCommanderAbility.html", ["pending", "commander", "ability"], "ARTSPlayerController");
addToContainers_variable("TimeOfLastSelection_Owned", "World time when last selection of an owned selectable was made", "Docs/Classes/ARTSPlayerController/Variables/TimeOfLastSelection_Owned.html", ["time", "of", "last", "selection_", "owned"], "ARTSPlayerController");
addToContainers_variable("", "All selected units/buildings. The selectable whose context menu will be shown in in index 0", "Docs/Classes/ARTSPlayerController/Variables/_20.html", [], "ARTSPlayerController");
addToContainers_variable("", "Selected unit/building whose context menu is showing. This only needs to be updated on the client", "Docs/Classes/ARTSPlayerController/Variables/_21.html", [], "ARTSPlayerController");
addToContainers_variable("", "Set of IDs of each selected selectable. Whenever selection changes this should be updated. Empty if selection is not owned", "Docs/Classes/ARTSPlayerController/Variables/_22.html", [], "ARTSPlayerController");
addToContainers_variable("", "Array of selectable IDs for selectables that were last given orders. Used to reduce size of RPCs for commands by allowing a \'selection has not changed\' signal to be sent instead of sending all the selectables\' IDs", "Docs/Classes/ARTSPlayerController/Variables/_23.html", [], "ARTSPlayerController");
addToContainers_variable("", "This is mainly here to speed up performance in tick. It will be populated when a non-issuedInstantly context button is pressed. It contains all the selectables that are selected and have the PendingContextAction in their context menu. If PendingContextAction is only ment to be issued to the CurrentSelected then it should only contain the CurrentSelected (but that behavior has been depreciated). Haven\'t decided whether we can assume entries are valid or not. Currently this is only updated on a context button click therefore validity of each element will need to be checked whenever accessing them This array is updated on clients (not just remote clients) so sending an RPC across the wire that relies on this being up to date will not work. May decide to get rid of this array. Main implication would be that now whenever we have a 2 click context command pending we will need to iterate the whole of Selected and check which selectables support the action", "Docs/Classes/ARTSPlayerController/Variables/_24.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to fog of war manager. On clients this only affects rendering. On server it affects rendering and also calculates which buildings/units can see what", "Docs/Classes/ARTSPlayerController/Variables/_25.html", [], "ARTSPlayerController");
addToContainers_variable("bShowingUIButtonPressedImage", "This variable is for the unified mouse hovered/pressed effects. If true then we a re showing the pressed image over some button", "Docs/Classes/ARTSPlayerController/Variables/bShowingUIButtonPressedImage.html", ["showing", "u", "i", "button", "pressed", "image"], "ARTSPlayerController");
addToContainers_variable("UNKNOWN_PLAYER_NAME", "What player name to use when we can\'t figure out who sent the message", "Docs/Classes/ARTSPlayerController/Variables/UNKNOWN_PLAYER_NAME.html", ["n", "k", "n", "o", "w", "n_", "p", "l", "a", "y", "e", "r_", "n", "a", "m", "e"], "ARTSPlayerController");
addToContainers_variable("LobbySlotIndex", "Slot in lobby this player is in", "Docs/Classes/ARTSPlayerController/Variables/LobbySlotIndex.html", ["lobby", "slot", "index"], "ARTSPlayerController");
addToContainers_variable("CameraMoveSpeed", "Camera move speed when using keyboard. Limited by camera\'s movement component\'s max speed, which I\'ve just set really big", "Docs/Classes/ARTSPlayerController/Variables/CameraMoveSpeed.html", ["camera", "move", "speed"], "ARTSPlayerController");
addToContainers_variable("CameraEdgeMoveSpeed", "Camera move speed when moving mouse to edge of screen. Limited by camera\'s movement component\'s max speed, which I\'ve just set really big", "Docs/Classes/ARTSPlayerController/Variables/CameraEdgeMoveSpeed.html", ["camera", "edge", "move", "speed"], "ARTSPlayerController");
addToContainers_variable("CameraEdgeThreshold", "How close to the edge the mouse has to be to allow movement 0.05 = within 5% of screen edge", "Docs/Classes/ARTSPlayerController/Variables/CameraEdgeThreshold.html", ["camera", "edge", "threshold"], "ARTSPlayerController");
addToContainers_variable("CameraZoomIncrementalAmount", "How much to zoom in/out by when scrolling mouse wheel", "Docs/Classes/ARTSPlayerController/Variables/CameraZoomIncrementalAmount.html", ["camera", "zoom", "incremental", "amount"], "ARTSPlayerController");
addToContainers_variable("", "Curve for zooming camera", "Docs/Classes/ARTSPlayerController/Variables/_26.html", [], "ARTSPlayerController");
addToContainers_variable("CameraZoomSpeed", "Speed camera zooms in/out", "Docs/Classes/ARTSPlayerController/Variables/CameraZoomSpeed.html", ["camera", "zoom", "speed"], "ARTSPlayerController");
addToContainers_variable("NumPendingScrollZooms", "Positive means pending zoom out, negative means pending zoom in. 0 means stop zooming", "Docs/Classes/ARTSPlayerController/Variables/NumPendingScrollZooms.html", ["num", "pending", "scroll", "zooms"], "ARTSPlayerController");
addToContainers_variable("DefaultCameraRotation", "The rotation to set to camera at start of match and also the rotation to return to when pressing a \'return to default rotation\' button", "Docs/Classes/ARTSPlayerController/Variables/DefaultCameraRotation.html", ["default", "camera", "rotation"], "ARTSPlayerController");
addToContainers_variable("DefaultCameraZoomAmount", "The zoom amount to start the match at and also the zoom amount to return to when pressing a \'return to default zoom\' button", "Docs/Classes/ARTSPlayerController/Variables/DefaultCameraZoomAmount.html", ["default", "camera", "zoom", "amount"], "ARTSPlayerController");
addToContainers_variable("ResetCameraCurve", "Curve to use to transition from current camera rotation/zoom to defaults. Can be left null and transition will happen instantly X axis = base time to complete zoom. Will be multiplied by ResetCameraToDefaultRate. Good to make it at least from 0 to 1 and adjust ResetCameraToDefaultRate to get desired time taken Y axis = Lerp amount, range should be from 0 to 1", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraCurve.html", ["reset", "camera", "curve"], "ARTSPlayerController");
addToContainers_variable("ResetCameraToDefaultRate", "Speed camera resets to default rotation/zoom", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraToDefaultRate.html", ["reset", "camera", "to", "default", "rate"], "ARTSPlayerController");
addToContainers_variable("ViewportSize_Y", "Size of viewport in pixels (I think) but as a float", "Docs/Classes/ARTSPlayerController/Variables/ViewportSize_Y.html", ["viewport", "size_", "y"], "ARTSPlayerController");
addToContainers_variable("bIsForwardBackwardCameraMovementKeyPressed", "By default these are the WASD keys but can be changed ", "Docs/Classes/ARTSPlayerController/Variables/bIsForwardBackwardCameraMovementKeyPressed.html", ["is", "forward", "backward", "camera", "movement", "key", "pressed"], "ARTSPlayerController");
addToContainers_variable("bIsResettingCameraRotation", "True if \'reset camera rotation\' button was pressed recently. Tell mouse movement func to ignore changing control rotation", "Docs/Classes/ARTSPlayerController/Variables/bIsResettingCameraRotation.html", ["is", "resetting", "camera", "rotation"], "ARTSPlayerController");
addToContainers_variable("MouseWheelZoomCurveAccumulatedTime", "Amount of time through CameraMouseWheelZoomCurve", "Docs/Classes/ARTSPlayerController/Variables/MouseWheelZoomCurveAccumulatedTime.html", ["mouse", "wheel", "zoom", "curve", "accumulated", "time"], "ARTSPlayerController");
addToContainers_variable("MouseWheelZoomCurveMax", "X axis values I presume", "Docs/Classes/ARTSPlayerController/Variables/MouseWheelZoomCurveMax.html", ["mouse", "wheel", "zoom", "curve", "max"], "ARTSPlayerController");
addToContainers_variable("bIsResettingCameraZoom", "True if \'reset camera zoom\' button was pressed recently. Tell mouse wheel func to ignore zooming", "Docs/Classes/ARTSPlayerController/Variables/bIsResettingCameraZoom.html", ["is", "resetting", "camera", "zoom"], "ARTSPlayerController");
addToContainers_variable("ResetCameraCurveAccumulatedTime", "Amount of time through ResetCameraCurve", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraCurveAccumulatedTime.html", ["reset", "camera", "curve", "accumulated", "time"], "ARTSPlayerController");
addToContainers_variable("ResetCameraCurveMax", "", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraCurveMax.html", ["reset", "camera", "curve", "max"], "ARTSPlayerController");
addToContainers_variable("StartResetRotation", "Control rotation when request to reset rotation was made so lerp can work", "Docs/Classes/ARTSPlayerController/Variables/StartResetRotation.html", ["start", "reset", "rotation"], "ARTSPlayerController");
addToContainers_variable("TargetResetRotation", "The rotation camera is trying to reset to. If this equals current control rotation then no change needs to be done", "Docs/Classes/ARTSPlayerController/Variables/TargetResetRotation.html", ["target", "reset", "rotation"], "ARTSPlayerController");
addToContainers_variable("StartZoomAmount", "Camera zoom when request to change zoom is initiated. Here os lerp can work", "Docs/Classes/ARTSPlayerController/Variables/StartZoomAmount.html", ["start", "zoom", "amount"], "ARTSPlayerController");
addToContainers_variable("TargetZoomAmount", "Same as above but for camera zoom", "Docs/Classes/ARTSPlayerController/Variables/TargetZoomAmount.html", ["target", "zoom", "amount"], "ARTSPlayerController");
addToContainers_variable("", "Not sure if WITH_EDITOR or WITH_EDITORONLY_DATA is the right thing to use here. Will see whether stuff compiles and works", "Docs/Classes/ARTSPlayerController/Variables/_27.html", [], "ARTSPlayerController");
addToContainers_variable("Development_bIsLMBPressed", "", "Docs/Classes/ARTSPlayerController/Variables/Development_bIsLMBPressed.html", ["development_b", "is", "l", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("DevelopmentInputIntercept_LMBPress", "", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentInputIntercept_LMBPress.html", ["development", "input", "intercept_", "l", "m", "b", "press"], "ARTSPlayerController");
addToContainers_variable("DevelopmentInputIntercept_LMBRelease", "", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentInputIntercept_LMBRelease.html", ["development", "input", "intercept_", "l", "m", "b", "release"], "ARTSPlayerController");
addToContainers_variable("DevelopmentInputIntercept_RMBPress", "", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentInputIntercept_RMBPress.html", ["development", "input", "intercept_", "r", "m", "b", "press"], "ARTSPlayerController");
addToContainers_variable("DevelopmentWidgetAuxilleryData", "Auxillery data that may be needed by the action e.g. an item type if we are giving an item to a selectable", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentWidgetAuxilleryData.html", ["development", "widget", "auxillery", "data"], "ARTSPlayerController");
addToContainers_struct("FUpgradeTypeArray", "Array of EUpgradeType. Where I use this we could replace with a TSet. The only reason it is an array is that the ArePrerequisitesMet func that returns the type of missing prereq would require getting an element from the TSet which I assume reqires iteration of it. In fact I could even use an int32 instead of this struct if the ArePrerequisitesMet that returns the missing upgrade type didn\'t exist.", "Docs/Structs/FUpgradeTypeArray/FUpgradeTypeArray.html", ["upgrade", "type", "array"], "");
addToContainers_function("FUpgradeTypeArray", "", "Docs/Structs/FUpgradeTypeArray/Functions/FUpgradeTypeArray.html", ["upgrade", "type", "array"], "FUpgradeTypeArray");
addToContainers_variable("Array", "", "Docs/Structs/FUpgradeTypeArray/Variables/Array.html", [], "FUpgradeTypeArray");
addToContainers_struct("FBuildingSet", "A simple struct that holds a TSet as a workaround for non-2D TArrays", "Docs/Structs/FBuildingSet/FBuildingSet.html", ["building", "set"], "");
addToContainers_variable("", "", "Docs/Structs/FBuildingSet/Variables/.html", [], "FBuildingSet");
addToContainers_struct("FBuildingArray", "Array of buildings as aworkaround for non-2D TArrays", "Docs/Structs/FBuildingArray/FBuildingArray.html", ["building", "array"], "");
addToContainers_variable("", "", "Docs/Structs/FBuildingArray/Variables/.html", [], "FBuildingArray");
addToContainers_class("ARTSPlayerState", "RTS Player state. Used by both human players and CPU players", "Docs/Classes/ARTSPlayerState/ARTSPlayerState.html", ["r", "t", "s", "player", "state"], "");
addToContainers_function("ARTSPlayerState", "", "Docs/Classes/ARTSPlayerState/Functions/ARTSPlayerState.html", ["r", "t", "s", "player", "state"], "ARTSPlayerState");
addToContainers_variable("", "Sound component to play \'building just built\' sound when building has been fully constructed", "Docs/Classes/ARTSPlayerState/Variables/.html", [], "ARTSPlayerState");
addToContainers_variable("", "Sound component to play \'Unit just built\' sound e.g. \"Kirov reporting\", \"My life for Aiur\"", "Docs/Classes/ARTSPlayerState/Variables/_1.html", [], "ARTSPlayerState");
addToContainers_variable("", "Array that holds current resource values. Updated when an OnRep for a resource happens", "Docs/Classes/ARTSPlayerState/Variables/_2.html", [], "ARTSPlayerState");
addToContainers_variable("", "Array that holds previous resource values before a new value was replicated. Updated when an OnRep for a resource happens", "Docs/Classes/ARTSPlayerState/Variables/_3.html", [], "ARTSPlayerState");
addToContainers_variable("", "Resource array for housing resources. Not replicated", "Docs/Classes/ARTSPlayerState/Variables/_4.html", [], "ARTSPlayerState");
addToContainers_variable("", "Amount of cash resource", "Docs/Classes/ARTSPlayerState/Variables/_5.html", [], "ARTSPlayerState");
addToContainers_variable("", "Amount of sand resource", "Docs/Classes/ARTSPlayerState/Variables/_6.html", [], "ARTSPlayerState");
addToContainers_variable("BuildingGarrisonNetworkInfos", "All the information about all building garrison networks for buildings owned by this player", "Docs/Classes/ARTSPlayerState/Variables/BuildingGarrisonNetworkInfos.html", ["building", "garrison", "network", "infos"], "ARTSPlayerState");
addToContainers_variable("", "How much total experience the player has obtained. Does not decrease when the player levels up", "Docs/Classes/ARTSPlayerState/Variables/_7.html", [], "ARTSPlayerState");
addToContainers_variable("NumUnspentSkillPoints", "", "Docs/Classes/ARTSPlayerState/Variables/NumUnspentSkillPoints.html", ["num", "unspent", "skill", "points"], "ARTSPlayerState");
addToContainers_variable("Rank", "The player\'s rank or level. This starts at 0", "Docs/Classes/ARTSPlayerState/Variables/Rank.html", [], "ARTSPlayerState");
addToContainers_variable("AllCommanderSkillTreeNodes", "Ordering is important. It should be the same across server/clients. This container belongs on the faction info really", "Docs/Classes/ARTSPlayerState/Variables/AllCommanderSkillTreeNodes.html", ["all", "commander", "skill", "tree", "nodes"], "ARTSPlayerState");
addToContainers_variable("CommanderAbilityToNodeType", "Maps ability type to which skill tree node it belongs to. This container belongs on the faction info really", "Docs/Classes/ARTSPlayerState/Variables/CommanderAbilityToNodeType.html", ["commander", "ability", "to", "node", "type"], "ARTSPlayerState");
addToContainers_variable("", "Abilities from the commander skill tree the player has not aquired yet.", "Docs/Classes/ARTSPlayerState/Variables/_8.html", [], "ARTSPlayerState");
addToContainers_variable("", "Abilities the player has aquired", "Docs/Classes/ARTSPlayerState/Variables/_9.html", [], "ARTSPlayerState");
addToContainers_variable("AquiredCommanderAbilitiesTMap", "", "Docs/Classes/ARTSPlayerState/Variables/AquiredCommanderAbilitiesTMap.html", ["aquired", "commander", "abilities", "t", "map"], "ARTSPlayerState");
addToContainers_variable("", "The UI image for this player. Maybe this could go on the ULocalPlayer class instead. I don\'t think I actually let the player set this in any way", "Docs/Classes/ARTSPlayerState/Variables/_10.html", [], "ARTSPlayerState");
addToContainers_variable("", "", "Docs/Classes/ARTSPlayerState/Variables/_11.html", [], "ARTSPlayerState");
addToContainers_variable("", "", "Docs/Classes/ARTSPlayerState/Variables/_12.html", [], "ARTSPlayerState");
addToContainers_variable("bBelongsToLocalPlayer", "Whether this player state belongs to the local player", "Docs/Classes/ARTSPlayerState/Variables/bBelongsToLocalPlayer.html", ["belongs", "to", "local", "player"], "ARTSPlayerState");
addToContainers_variable("bHasBeenDefeated", "If true then this player has been defeated", "Docs/Classes/ARTSPlayerState/Variables/bHasBeenDefeated.html", ["has", "been", "defeated"], "ARTSPlayerState");
addToContainers_variable("", "Reference to the players HUD widget", "Docs/Classes/ARTSPlayerState/Variables/_13.html", [], "ARTSPlayerState");
addToContainers_variable("IDAsInt", "ID as a single byte", "Docs/Classes/ARTSPlayerState/Variables/IDAsInt.html", ["d", "as", "int"], "ARTSPlayerState");
addToContainers_variable("", "ID of player who owns this state. Used to determine what can and can\'t be selected. Unique to each player", "Docs/Classes/ARTSPlayerState/Variables/_14.html", [], "ARTSPlayerState");
addToContainers_variable("Team", "", "Docs/Classes/ARTSPlayerState/Variables/Team.html", [], "ARTSPlayerState");
addToContainers_variable("", "Team as FName", "Docs/Classes/ARTSPlayerState/Variables/_15.html", [], "ARTSPlayerState");
addToContainers_variable("Affiliation", "Affiliation towards local player. Not safe to use until Client_FinalSetup() has completed", "Docs/Classes/ARTSPlayerState/Variables/Affiliation.html", [], "ARTSPlayerState");
addToContainers_variable("Faction", "", "Docs/Classes/ARTSPlayerState/Variables/Faction.html", [], "ARTSPlayerState");
addToContainers_variable("StartingSpot", "Unique ID of RTS player start player started match at. Can change and is only final after GI::AssignOptimalStartingSpots has been called. -2 implies was never assigned a spot and was most likely spawned at origin", "Docs/Classes/ARTSPlayerState/Variables/StartingSpot.html", ["starting", "spot"], "ARTSPlayerState");
addToContainers_variable("StartLocation", "The actual world location on the map where the player starts", "Docs/Classes/ARTSPlayerState/Variables/StartLocation.html", ["start", "location"], "ARTSPlayerState");
addToContainers_variable("", "Reference to the faction info of the faction of this player", "Docs/Classes/ARTSPlayerState/Variables/_16.html", [], "ARTSPlayerState");
addToContainers_variable("NumQueuedSelectables", "Number of selectables that are in production queues, so does not include upgrades. This variable was added because of the selectable cap", "Docs/Classes/ARTSPlayerState/Variables/NumQueuedSelectables.html", ["num", "queued", "selectables"], "ARTSPlayerState");
addToContainers_variable("", "Holds all the buildings this player owns. Includes both placed and fully constructed buildings (comment used to say just fully constructed but from inspecting code that looks to be wrong)", "Docs/Classes/ARTSPlayerState/Variables/_17.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps building type to how many of it are in all production queues for this player. This includes building\'s production queues This was added for implementing unique buildings", "Docs/Classes/ARTSPlayerState/Variables/_18.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps building type to how many of that type this unit has placed but not fully constructed. This was added for implementing unique buildings", "Docs/Classes/ARTSPlayerState/Variables/_19.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps building type to how many of that type this player has that are fully constructed. No entry means they have 0. Useful to know what prerequisites are fulfilled My notes: this was called PrerequisitesMet or similar for a long time", "Docs/Classes/ARTSPlayerState/Variables/_20.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps unit type to the quantity that is in a production queue. Considers all production queues this player owns This was added to implement unique units", "Docs/Classes/ARTSPlayerState/Variables/_21.html", [], "ARTSPlayerState");
addToContainers_variable("", "Holds all the infantry this player owns.", "Docs/Classes/ARTSPlayerState/Variables/_22.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps unit type to the quantity of that unit the player has. No key/value pair means the player has 0 of that type. This does not take into account units that are in production queues This was added to implement unique units", "Docs/Classes/ARTSPlayerState/Variables/_23.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to player controller that owns this. Will be null for clients that do not own this. Will be null if player state belongs to CPU player", "Docs/Classes/ARTSPlayerState/Variables/_24.html", [], "ARTSPlayerState");
addToContainers_variable("", "The AI controller who owns this. Will be null if player state belongs to a human player", "Docs/Classes/ARTSPlayerState/Variables/_25.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSPlayerState/Variables/_26.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ARTSPlayerState/Variables/_27.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to upgrade manager", "Docs/Classes/ARTSPlayerState/Variables/_28.html", [], "ARTSPlayerState");
addToContainers_variable("BuildingTypeToMissingUpgradePrereqs", "These containers map building/unit/upgrade type to an array of all the upgrades that are prerequisites for it and that have not been researched yet. If a building/unit/upgrade does not have any upgrade prerequisites then it might not get any entry in the map.", "Docs/Classes/ARTSPlayerState/Variables/BuildingTypeToMissingUpgradePrereqs.html", ["building", "type", "to", "missing", "upgrade", "prereqs"], "ARTSPlayerState");
addToContainers_variable("UnitTypeToMissingUpgradePrereqs", "", "Docs/Classes/ARTSPlayerState/Variables/UnitTypeToMissingUpgradePrereqs.html", ["unit", "type", "to", "missing", "upgrade", "prereqs"], "ARTSPlayerState");
addToContainers_variable("UpgradeTypeToMissingUpgradePrereqs", "", "Docs/Classes/ARTSPlayerState/Variables/UpgradeTypeToMissingUpgradePrereqs.html", ["upgrade", "type", "to", "missing", "upgrade", "prereqs"], "ARTSPlayerState");
addToContainers_variable("", "Set of resource depots owned by this player. Used to calculate the closest depot when collectors return from gathering resources", "Docs/Classes/ARTSPlayerState/Variables/_29.html", [], "ARTSPlayerState");
addToContainers_variable("", "Buildings that have at least one persistent build slot, like construction yard type buildings", "Docs/Classes/ARTSPlayerState/Variables/_30.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps a button type to all the buildings that support producing what that button requests.", "Docs/Classes/ARTSPlayerState/Variables/_31.html", [], "ARTSPlayerState");
addToContainers_variable("", "Array of buildings that have completed construction of a building using the BuildsInTab build method and therefore it should be ready to place when player clicks HUD persistent panel button corrisponding to it. This array contains the constructors, not the constructed", "Docs/Classes/ARTSPlayerState/Variables/_32.html", [], "ARTSPlayerState");
addToContainers_variable("IDQueue", "[Server] A queue that contains IDs that haven\'t been assigned to any selectables. This queue is only ever modified by this class on the server only so Spsc is very fitting It can range from having 0 elements (at selectable cap) to ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER (0 selectables) Side note: after adding this variable to this class a editor restart is required otherise you get massive memory usage which eventually uses all system memory. I also vaguely remember this happening when I tried using this a while back.", "Docs/Classes/ARTSPlayerState/Variables/IDQueue.html", ["d", "queue"], "ARTSPlayerState");
addToContainers_variable("IDQueueNum", "Number of items in IDQueue. Useful when we want to know whether we are at the selectable cap or not. We actually also update on the client to serve as a way for them to know whether they are at the selectable cap or not", "Docs/Classes/ARTSPlayerState/Variables/IDQueueNum.html", ["d", "queue", "num"], "ARTSPlayerState");
addToContainers_variable("", "Maps ID to selectable for issuing commands. Key = selectable\'s ID. Pretty sure we maintain this for all players but really that could be unecessary. Only the server player and the player this player state belongs to need to maintain it.", "Docs/Classes/ARTSPlayerState/Variables/_33.html", [], "ARTSPlayerState");
addToContainers_variable("TimerHandle_GameWarning", "Timer handle for throttling game messages that appear on HUD", "Docs/Classes/ARTSPlayerState/Variables/TimerHandle_GameWarning.html", ["timer", "handle_", "game", "warning"], "ARTSPlayerState");
addToContainers_struct("FSelectableRootComponent2DShapeInfo", "Macro for fatal logging name of function. To be placed inside the base implementation of functions that really should be pure virtual", "Docs/Structs/FSelectableRootComponent2DShapeInfo/FSelectableRootComponent2DShapeInfo.html", ["selectable", "root", "component2", "d", "shape", "info"], "");
addToContainers_function("FSelectableRootComponent2DShapeInfo", "", "Docs/Structs/FSelectableRootComponent2DShapeInfo/Functions/FSelectableRootComponent2DShapeInfo.html", ["selectable", "root", "component2", "d", "shape", "info"], "FSelectableRootComponent2DShapeInfo");
addToContainers_function("FSelectableRootComponent2DShapeInfo", "", "Docs/Structs/FSelectableRootComponent2DShapeInfo/Functions/FSelectableRootComponent2DShapeInfo_1.html", ["selectable", "root", "component2", "d", "shape", "info"], "FSelectableRootComponent2DShapeInfo");
addToContainers_variable("Data", "If Y is negative then X holds radius for a sphere or capsule. Otherwise it holds data for a box, but remember this is 2D not 3D so the Z axis data is not here", "Docs/Structs/FSelectableRootComponent2DShapeInfo/Variables/Data.html", [], "FSelectableRootComponent2DShapeInfo");
addToContainers_class("ISelectable", "Any class implementing this interface means they can be selected by the player during a match.", "Docs/Classes/ISelectable/ISelectable.html", [], "");
addToContainers_class("ABuffAndDebuffManager", "Buff and debuff manager is where to define the behavior of buffs and debuffs. This file has nothing to do with abilities. All it has is the behavior for each buff/debuff. Assign function pointers in URTSGameInstance::SetupBuffsAndDebuffInfos() Buffs/debuffs also really have nothing to do with upgrades. Buffs and debuffs come in two types: static and tickable. Most of your buffs/debuffs will likely be tickable. Static buffs/debuffs do not have any tick logic and never expire on their own. They require some event to remove them. They give a slight performance increase over tickable buffs/debuffs so you should use them when you can. @See EStaticBuffAndDebuffType and ETickableBuffAndDebuffType About ticking: if a buff ticks 3 times with a 2sec tick interval it will last 6 seconds, and does not tick when first applied but rather 2 secs after. This behavior can easily be changed though in the buffs TryApplyTo function. If you want it to tick straight away then just add its logic in there Stackable buffs/debuffs not implemented Trying this with function pointers instead of virtuals but may switch to virtuals. =========================================================================================== How to create new buffs/debuffs: 1. Close editor if it is open 2. In CommonEnums.h add an entry to either EStaticBuffAndDebuffType or ETickableBuffAndDebuffType. 3. Copy and paste a group of 3 function signatures below. Do not need the DoTick one if you chose to add a static buff/debuff in step 2. 4. Implement the 3 or 2 functions. 5. In URTSGameInstance::SetupBuffsAndDebuffInfos add entry for the newly defined buff/debuff. 6. Compile C++ code. 7. Inside your game instance blueprint there should be an entry for the buff/debuff you just defined. Change the values to suit the behavior of your buff/debuff", "Docs/Classes/ABuffAndDebuffManager/ABuffAndDebuffManager.html", ["buff", "and", "debuff", "manager"], "");
addToContainers_function("ABuffAndDebuffManager", "", "Docs/Classes/ABuffAndDebuffManager/Functions/ABuffAndDebuffManager.html", ["buff", "and", "debuff", "manager"], "ABuffAndDebuffManager");
addToContainers_class("ACPUControllerTickManager", "Tick manager responsible for ticking the CPU player AI controllers. The tick manager is here so at most one CPU player ticks each tick. CPU player tick behavior can range from doing next to nothing to doing many sweeps and large amounts of iteration. By using the tick manager this guarantees at most one AI controller ticks each engine tick. CPU player tick rate is dependent on engine tick rate i.e. at 120fps twice as many AI controller ticks will happen than if at 60fps. This can be easily changed but isn\'t that big of a deal. A good thing to note though is that the number of CPU players in the match does not affect how often they will tick i.e. in a 1 CPU player match, that CPU player ticks just as often as if they were in a 7 CPU player match.", "Docs/Classes/ACPUControllerTickManager/ACPUControllerTickManager.html", ["c", "p", "u", "controller", "tick", "manager"], "");
addToContainers_function("ACPUControllerTickManager", "", "Docs/Classes/ACPUControllerTickManager/Functions/ACPUControllerTickManager.html", ["c", "p", "u", "controller", "tick", "manager"], "ACPUControllerTickManager");
addToContainers_variable("NUM_CONTROLLER_ARRAY_ENTRIES", "How many entries to put in AIControllers array", "Docs/Classes/ACPUControllerTickManager/Variables/NUM_CONTROLLER_ARRAY_ENTRIES.html", ["u", "m_", "c", "o", "n", "t", "r", "o", "l", "l", "e", "r_", "a", "r", "r", "a", "y_", "e", "n", "t", "r", "i", "e", "s"], "ACPUControllerTickManager");
addToContainers_variable("Index", "Index for AIControllers", "Docs/Classes/ACPUControllerTickManager/Variables/Index.html", [], "ACPUControllerTickManager");
addToContainers_variable("AIControllers", "CPU Player AI controllers this manager is in charge if ticking", "Docs/Classes/ACPUControllerTickManager/Variables/AIControllers.html", ["i", "controllers"], "ACPUControllerTickManager");
addToContainers_variable("NumAIControllers", "How many CPU AI controllers have been registered", "Docs/Classes/ACPUControllerTickManager/Variables/NumAIControllers.html", ["num", "a", "i", "controllers"], "ACPUControllerTickManager");
addToContainers_struct("FTileArray", "Workaround for non-multidimension TArrays", "Docs/Structs/FTileArray/FTileArray.html", ["tile", "array"], "");
addToContainers_variable("", "", "Docs/Structs/FTileArray/Variables/.html", [], "FTileArray");
addToContainers_struct("FIntegerArray", "Array of FVector2D", "Docs/Structs/FIntegerArray/FIntegerArray.html", ["integer", "array"], "");
addToContainers_function("FIntegerArray", "", "Docs/Structs/FIntegerArray/Functions/FIntegerArray.html", ["integer", "array"], "FIntegerArray");
addToContainers_function("FIntegerArray", "", "Docs/Structs/FIntegerArray/Functions/FIntegerArray_1.html", ["integer", "array"], "FIntegerArray");
addToContainers_variable("", "", "Docs/Structs/FIntegerArray/Variables/.html", [], "FIntegerArray");
addToContainers_class("AFogOfWarManager", "------------------------------------------------------------------------------------------ This class if for single threaded fog of war that runs on the game thread only. Look at MultithreadedFogOfWar.h for an implementation that runs on its own thread. ------------------------------------------------------------------------------------------ On clients: Responsible for deciding what tiles your team can see, hiding/revealing things on those tiles and rendering the fog of war. On server: Responsible for deciding which tiles every team can see and storing this information for 2 reasons: - Knowing what can see what for AI behavior purposes - Stopping replication updates on a per connection basis for some things inside fog Server also hides/reveals the things the local player can/can\'t see and renders its own fog Currently relies on fog of war volume having equal width and length", "Docs/Classes/AFogOfWarManager/AFogOfWarManager.html", ["fog", "of", "war", "manager"], "");
addToContainers_function("AFogOfWarManager", "", "Docs/Classes/AFogOfWarManager/Functions/AFogOfWarManager.html", ["fog", "of", "war", "manager"], "AFogOfWarManager");
addToContainers_variable("NumTeams", "Number of teams in match", "Docs/Classes/AFogOfWarManager/Variables/NumTeams.html", ["num", "teams"], "AFogOfWarManager");
addToContainers_variable("LocalPlayersTeam", "The team of the local player", "Docs/Classes/AFogOfWarManager/Variables/LocalPlayersTeam.html", ["local", "players", "team"], "AFogOfWarManager");
addToContainers_variable("", "Reference to player state this is for", "Docs/Classes/AFogOfWarManager/Variables/.html", [], "AFogOfWarManager");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AFogOfWarManager/Variables/_1.html", [], "AFogOfWarManager");
addToContainers_variable("TeamTempRevealEffects", "Temporary reveal effects for teams. Key = Statics::TeamToArrayIndex e.g. command center scans, patch revealed by using nuke at it", "Docs/Classes/AFogOfWarManager/Variables/TeamTempRevealEffects.html", ["team", "temp", "reveal", "effects"], "AFogOfWarManager");
addToContainers_variable("", "Each teams visibility of each tile. On clients only their own teams array will be updated. On server every teams array will be updated", "Docs/Classes/AFogOfWarManager/Variables/_2.html", [], "AFogOfWarManager");
addToContainers_variable("", "Maps building to all the indices in Tiles that their visibility should be checked against", "Docs/Classes/AFogOfWarManager/Variables/_3.html", [], "AFogOfWarManager");
addToContainers_variable("MapCenter", "Map center ignoring Z axis", "Docs/Classes/AFogOfWarManager/Variables/MapCenter.html", ["map", "center"], "AFogOfWarManager");
addToContainers_variable("MapDimensions", "Width and height of map in Unreal Units.", "Docs/Classes/AFogOfWarManager/Variables/MapDimensions.html", ["map", "dimensions"], "AFogOfWarManager");
addToContainers_variable("MapTileDimensions", "Map dimensions in tiles.", "Docs/Classes/AFogOfWarManager/Variables/MapTileDimensions.html", ["map", "tile", "dimensions"], "AFogOfWarManager");
addToContainers_variable("", "Post process fog of war material", "Docs/Classes/AFogOfWarManager/Variables/_4.html", [], "AFogOfWarManager");
addToContainers_variable("", "Renders fog of war", "Docs/Classes/AFogOfWarManager/Variables/_5.html", [], "AFogOfWarManager");
addToContainers_variable("TextureBuffer", "Fog of war buffer for rendering. Array. TODO: try and just use Tiles array instead", "Docs/Classes/AFogOfWarManager/Variables/TextureBuffer.html", ["texture", "buffer"], "AFogOfWarManager");
addToContainers_variable("FogTexture", "Fog of war texture", "Docs/Classes/AFogOfWarManager/Variables/FogTexture.html", ["fog", "texture"], "AFogOfWarManager");
addToContainers_variable("TextureRegions", "For rendering fog of war", "Docs/Classes/AFogOfWarManager/Variables/TextureRegions.html", ["texture", "regions"], "AFogOfWarManager");
addToContainers_variable("MapDimensionsInverse", "1.f / MapDimensions. Used to avoid division", "Docs/Classes/AFogOfWarManager/Variables/MapDimensionsInverse.html", ["map", "dimensions", "inverse"], "AFogOfWarManager");
addToContainers_class("UHeavyTaskManager", "Heavy task manager is ment to carry out computer resource intense tasks as \'spread out\' as possible to avoid any hitching. e.g. every so often a capsule sweep is required to see what units are in range of other units. Well this manager is ment to make it so each frame does approx the same number of sweeps as the last frame.", "Docs/Classes/UHeavyTaskManager/UHeavyTaskManager.html", ["heavy", "task", "manager"], "");
addToContainers_variable("NUM_BUILDING_ATTACK_COMP_BUCKETS", "----------------------------------------------------------------", "Docs/Classes/UHeavyTaskManager/Variables/NUM_BUILDING_ATTACK_COMP_BUCKETS.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "a", "t", "t", "a", "c", "k_", "c", "o", "m", "p_", "b", "u", "c", "k", "e", "t", "s"], "UHeavyTaskManager");
addToContainers_variable("CurrentBuildingAttackCompBucketForTick", "", "Docs/Classes/UHeavyTaskManager/Variables/CurrentBuildingAttackCompBucketForTick.html", ["current", "building", "attack", "comp", "bucket", "for", "tick"], "UHeavyTaskManager");
addToContainers_variable("BuildingAttackComps[NUM_BUILDING_ATTACK_COMP_BUCKETS]", "Each building attack comp that wants to find targets.", "Docs/Classes/UHeavyTaskManager/Variables/BuildingAttackComps[NUM_BUILDING_ATTACK_COMP_BUCKETS].html", ["building", "attack", "comps[", "n", "u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "a", "t", "t", "a", "c", "k_", "c", "o", "m", "p_", "b", "u", "c", "k", "e", "t", "s]"], "UHeavyTaskManager");
addToContainers_struct("BuildingAttackComp_TurretData", "Data to carry out a sweep for a building turret component", "Docs/Structs/BuildingAttackComp_TurretData/BuildingAttackComp_TurretData.html", ["building", "attack", "comp_", "turret", "data"], "");
addToContainers_function("BuildingAttackComp_TurretData", "Constructor for a IBuildingAttackComp_Turret to call", "Docs/Structs/BuildingAttackComp_TurretData/Functions/BuildingAttackComp_TurretData.html", ["building", "attack", "comp_", "turret", "data"], "BuildingAttackComp_TurretData");
addToContainers_variable("AttackComponent", "", "Docs/Structs/BuildingAttackComp_TurretData/Variables/AttackComponent.html", ["attack", "component"], "BuildingAttackComp_TurretData");
addToContainers_variable("TraceDelegate", "", "Docs/Structs/BuildingAttackComp_TurretData/Variables/TraceDelegate.html", ["trace", "delegate"], "BuildingAttackComp_TurretData");
addToContainers_variable("QueryParams", "", "Docs/Structs/BuildingAttackComp_TurretData/Variables/QueryParams.html", ["query", "params"], "BuildingAttackComp_TurretData");
addToContainers_variable("Location", "World location where to do sweep from", "Docs/Structs/BuildingAttackComp_TurretData/Variables/Location.html", [], "BuildingAttackComp_TurretData");
addToContainers_variable("SweepRadius", "Radius of sweep", "Docs/Structs/BuildingAttackComp_TurretData/Variables/SweepRadius.html", ["sweep", "radius"], "BuildingAttackComp_TurretData");
addToContainers_struct("Array_BuildingAttackComp_TurretData", "", "Docs/Structs/Array_BuildingAttackComp_TurretData/Array_BuildingAttackComp_TurretData.html", ["array_", "building", "attack", "comp_", "turret", "data"], "");
addToContainers_variable("Array", "", "Docs/Structs/Array_BuildingAttackComp_TurretData/Variables/Array.html", [], "Array_BuildingAttackComp_TurretData");
addToContainers_struct("FTaskManagerBucketInfo", "All the data required for an object to find itself in O(1)", "Docs/Structs/FTaskManagerBucketInfo/FTaskManagerBucketInfo.html", ["task", "manager", "bucket", "info"], "");
addToContainers_function("FTaskManagerBucketInfo", "", "Docs/Structs/FTaskManagerBucketInfo/Functions/FTaskManagerBucketInfo.html", ["task", "manager", "bucket", "info"], "FTaskManagerBucketInfo");
addToContainers_function("FTaskManagerBucketInfo", "", "Docs/Structs/FTaskManagerBucketInfo/Functions/FTaskManagerBucketInfo_1.html", ["task", "manager", "bucket", "info"], "FTaskManagerBucketInfo");
addToContainers_variable("BucketIndex", "The bucket the object is in", "Docs/Structs/FTaskManagerBucketInfo/Variables/BucketIndex.html", ["bucket", "index"], "FTaskManagerBucketInfo");
addToContainers_variable("ArrayIndex", "Index in bucket the object is in", "Docs/Structs/FTaskManagerBucketInfo/Variables/ArrayIndex.html", ["array", "index"], "FTaskManagerBucketInfo");
addToContainers_class("MultithreadedFogOfWarManager", "TODO: implement the whole acknowledging of selectable IDs becoming freed due to a selectable becoming destroyed. So basically what this is is the fog manager will need to ack that the selectable has been destroyed because otherwise it may send some vision info back to the game thread: it could be a huge reveal radius but the ID has now been assigned to some small radius revealing selectable so it would not look right. TODO: fix up names in this file, and very thouroughly check code", "Docs/Classes/MultithreadedFogOfWarManager/MultithreadedFogOfWarManager.html", ["multithreaded", "fog", "of", "war", "manager"], "");
addToContainers_variable("FogManager", "Fog of war manager", "Docs/Classes/MultithreadedFogOfWarManager/Variables/FogManager.html", ["fog", "manager"], "MultithreadedFogOfWarManager");
addToContainers_variable("TextureBuffer", "Texture buffer for rendering fog of war. Local player only because we only render fog for them", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TextureBuffer.html", ["texture", "buffer"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyCreatedBuildings[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s buildings that have been recently placed", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyCreatedBuildings[ProjectSettings::MAX_NUM_TEAMS].html", ["recently", "created", "buildings[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyModifiedBuildings[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s buildings that have had a modification done to them that fog manager needs to know about e.g. their sight radius is now bigger", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyModifiedBuildings[ProjectSettings::MAX_NUM_TEAMS].html", ["recently", "modified", "buildings[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyDestroyedBuildings[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s buildings that were recently destroyed", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyDestroyedBuildings[ProjectSettings::MAX_NUM_TEAMS].html", ["recently", "destroyed", "buildings[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamsInfantry[ProjectSettings::MAX_NUM_TEAMS]", "Holds arrays of all the infantry on a team. Make sure infantry add themselves to this when they start revealing fog and remove themselves when they want to stop revealing fog (usually when they are destroyed)", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamsInfantry[ProjectSettings::MAX_NUM_TEAMS].html", ["teams", "infantry[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyCreatedTemporaryRevealEffects[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s temporary reveal effects (such as a from placing a superweapon at a location) that were recently created and yet to enter the fog system", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyCreatedTemporaryRevealEffects[ProjectSettings::MAX_NUM_TEAMS].html", ["recently", "created", "temporary", "reveal", "effects[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TilesArrays[ProjectSettings::MAX_NUM_TEAMS]", "Visibility of every tile", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TilesArrays[ProjectSettings::MAX_NUM_TEAMS].html", ["tiles", "arrays[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamVisibilityInfo[ProjectSettings::MAX_NUM_TEAMS][ProjectSettings::MAX_NUM_TEAMS]", "[Team we are checking from][Team of selecable we are checking]", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamVisibilityInfo[ProjectSettings::MAX_NUM_TEAMS][ProjectSettings::MAX_NUM_TEAMS].html", ["team", "visibility", "info[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s][", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("1", "Whether machine is server (listen or dedicated)", "Docs/Classes/MultithreadedFogOfWarManager/Variables/1.html", [], "MultithreadedFogOfWarManager");
addToContainers_variable("1", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/1_1.html", [], "MultithreadedFogOfWarManager");
addToContainers_variable("LocalPlayersTeamIndex", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/LocalPlayersTeamIndex.html", ["local", "players", "team", "index"], "MultithreadedFogOfWarManager");
addToContainers_variable("NumTeams", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/NumTeams.html", ["num", "teams"], "MultithreadedFogOfWarManager");
addToContainers_variable("ServerIdleThreads", "Threads that are idle. If on server then the client version will be empty and vice versa", "Docs/Classes/MultithreadedFogOfWarManager/Variables/ServerIdleThreads.html", ["server", "idle", "threads"], "MultithreadedFogOfWarManager");
addToContainers_variable("ClientIdleThreads", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/ClientIdleThreads.html", ["client", "idle", "threads"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamProgress[ProjectSettings::MAX_NUM_TEAMS]", "Array of how far through calculations for each team we are. Key = Statics::TeamToArrayIndex", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamProgress[ProjectSettings::MAX_NUM_TEAMS].html", ["team", "progress[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamTilesShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamTilesShared[ProjectSettings::MAX_NUM_TEAMS].html", ["team", "tiles", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("InfantryStatesShared[ProjectSettings::MAX_NUM_TEAMS]", "Array of arrays. Contains each team\'s infantry state info. Key = Statics::TeamToArrayIndex", "Docs/Classes/MultithreadedFogOfWarManager/Variables/InfantryStatesShared[ProjectSettings::MAX_NUM_TEAMS].html", ["infantry", "states", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("BuildingStatesShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/BuildingStatesShared[ProjectSettings::MAX_NUM_TEAMS].html", ["building", "states", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TemporaryRevealEffectsShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TemporaryRevealEffectsShared[ProjectSettings::MAX_NUM_TEAMS].html", ["temporary", "reveal", "effects", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("InfantryStatesBasicShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/InfantryStatesBasicShared[ProjectSettings::MAX_NUM_TEAMS].html", ["infantry", "states", "basic", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("DestroyedBuildingsShared[ProjectSettings::MAX_NUM_TEAMS]", "Contains selectable IDs of buildings that want to be removed from fog calculations (probably because they were destroyed)", "Docs/Classes/MultithreadedFogOfWarManager/Variables/DestroyedBuildingsShared[ProjectSettings::MAX_NUM_TEAMS].html", ["destroyed", "buildings", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("VisibilityInfoShared[ProjectSettings::MAX_NUM_TEAMS]", "Contains each team\'s visibility info", "Docs/Classes/MultithreadedFogOfWarManager/Variables/VisibilityInfoShared[ProjectSettings::MAX_NUM_TEAMS].html", ["visibility", "info", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("DeltaTime", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/DeltaTime.html", ["delta", "time"], "MultithreadedFogOfWarManager");
addToContainers_variable("DeltaTimeNotThreadSafe", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/DeltaTimeNotThreadSafe.html", ["delta", "time", "not", "thread", "safe"], "MultithreadedFogOfWarManager");
addToContainers_variable("MapTileDimensions", "Map dimensions in tiles.", "Docs/Classes/MultithreadedFogOfWarManager/Variables/MapTileDimensions.html", ["map", "tile", "dimensions"], "MultithreadedFogOfWarManager");
addToContainers_variable("MapCenter", "Map center ignoring Z axis", "Docs/Classes/MultithreadedFogOfWarManager/Variables/MapCenter.html", ["map", "center"], "MultithreadedFogOfWarManager");
addToContainers_variable("MapDimensionsInverse", "1.f / MapDimensions. Used to avoid division", "Docs/Classes/MultithreadedFogOfWarManager/Variables/MapDimensionsInverse.html", ["map", "dimensions", "inverse"], "MultithreadedFogOfWarManager");
addToContainers_variable("FogTexture", "------------------------------------------------------------------", "Docs/Classes/MultithreadedFogOfWarManager/Variables/FogTexture.html", ["fog", "texture"], "MultithreadedFogOfWarManager");
addToContainers_variable("TextureRegions", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TextureRegions.html", ["texture", "regions"], "MultithreadedFogOfWarManager");
addToContainers_variable("FogOfWarMaterialInstance", "UPROPERTY() // Hopefully this isn\'t required", "Docs/Classes/MultithreadedFogOfWarManager/Variables/FogOfWarMaterialInstance.html", ["fog", "of", "war", "material", "instance"], "MultithreadedFogOfWarManager");
addToContainers_class("ServerFogOfWarThread", "A fog of war thread that the server player will spawn", "Docs/Classes/ServerFogOfWarThread/ServerFogOfWarThread.html", ["server", "fog", "of", "war", "thread"], "");
addToContainers_function("ServerFogOfWarThread", "Default constructor", "Docs/Classes/ServerFogOfWarThread/Functions/ServerFogOfWarThread.html", ["server", "fog", "of", "war", "thread"], "ServerFogOfWarThread");
addToContainers_class("ClientFogOfWarThread", "A fog of war thread that remote clients will spawn", "Docs/Classes/ClientFogOfWarThread/ClientFogOfWarThread.html", ["client", "fog", "of", "war", "thread"], "");
addToContainers_function("ClientFogOfWarThread", "", "Docs/Classes/ClientFogOfWarThread/Functions/ClientFogOfWarThread.html", ["client", "fog", "of", "war", "thread"], "ClientFogOfWarThread");
addToContainers_struct("FogLock", "Wrapper for what I will use as a lock for critical sections", "Docs/Structs/FogLock/FogLock.html", ["fog", "lock"], "");
addToContainers_variable("LockObject", "", "Docs/Structs/FogLock/Variables/LockObject.html", ["lock", "object"], "FogLock");
addToContainers_struct("CalculationProgress", "", "Docs/Structs/CalculationProgress/CalculationProgress.html", ["calculation", "progress"], "");
addToContainers_function("CalculationProgress", "", "Docs/Structs/CalculationProgress/Functions/CalculationProgress.html", ["calculation", "progress"], "CalculationProgress");
addToContainers_variable("Lock", "Lock to access the data in this struct", "Docs/Structs/CalculationProgress/Variables/Lock.html", [], "CalculationProgress");
addToContainers_variable("NextTask", "What the next thread to finish its task should work on next", "Docs/Structs/CalculationProgress/Variables/NextTask.html", ["next", "task"], "CalculationProgress");
addToContainers_variable("NextTeamIndexForStoringSelectableVisibilityInfo", "", "Docs/Structs/CalculationProgress/Variables/NextTeamIndexForStoringSelectableVisibilityInfo.html", ["next", "team", "index", "for", "storing", "selectable", "visibility", "info"], "CalculationProgress");
addToContainers_struct("JobQueue", "", "Docs/Structs/JobQueue/JobQueue.html", ["job", "queue"], "");
addToContainers_variable("BitField", "A 1 means that job is in the queue", "Docs/Structs/JobQueue/Variables/BitField.html", ["bit", "field"], "JobQueue");
addToContainers_struct("TilesArray_NoLock", "", "Docs/Structs/TilesArray_NoLock/TilesArray_NoLock.html", ["tiles", "array_", "no", "lock"], "");
addToContainers_variable("Array", "", "Docs/Structs/TilesArray_NoLock/Variables/Array.html", [], "TilesArray_NoLock");
addToContainers_struct("ServerThreadArray", "", "Docs/Structs/ServerThreadArray/ServerThreadArray.html", ["server", "thread", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/ServerThreadArray/Variables/Array.html", [], "ServerThreadArray");
addToContainers_variable("Lock", "", "Docs/Structs/ServerThreadArray/Variables/Lock.html", [], "ServerThreadArray");
addToContainers_struct("ClientThreadArray", "", "Docs/Structs/ClientThreadArray/ClientThreadArray.html", ["client", "thread", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/ClientThreadArray/Variables/Array.html", [], "ClientThreadArray");
addToContainers_variable("Lock", "", "Docs/Structs/ClientThreadArray/Variables/Lock.html", [], "ClientThreadArray");
addToContainers_struct("InfantryFogInfo", "", "Docs/Structs/InfantryFogInfo/InfantryFogInfo.html", ["infantry", "fog", "info"], "");
addToContainers_function("InfantryFogInfo", "", "Docs/Structs/InfantryFogInfo/Functions/InfantryFogInfo.html", ["infantry", "fog", "info"], "InfantryFogInfo");
addToContainers_variable("WorldLocation", "The world location of the infantry in 2D coords (fog of war does not care about Z axis)", "Docs/Structs/InfantryFogInfo/Variables/WorldLocation.html", ["world", "location"], "InfantryFogInfo");
addToContainers_variable("SightRadius", "", "Docs/Structs/InfantryFogInfo/Variables/SightRadius.html", ["sight", "radius"], "InfantryFogInfo");
addToContainers_variable("StealthRevealRadius", "", "Docs/Structs/InfantryFogInfo/Variables/StealthRevealRadius.html", ["stealth", "reveal", "radius"], "InfantryFogInfo");
addToContainers_struct("BuildingFogInfo", "", "Docs/Structs/BuildingFogInfo/BuildingFogInfo.html", ["building", "fog", "info"], "");
addToContainers_function("BuildingFogInfo", "", "Docs/Structs/BuildingFogInfo/Functions/BuildingFogInfo.html", ["building", "fog", "info"], "BuildingFogInfo");
addToContainers_variable("WorldLocation", "", "Docs/Structs/BuildingFogInfo/Variables/WorldLocation.html", ["world", "location"], "BuildingFogInfo");
addToContainers_variable("SightRadius", "", "Docs/Structs/BuildingFogInfo/Variables/SightRadius.html", ["sight", "radius"], "BuildingFogInfo");
addToContainers_variable("StealthRevealRadius", "", "Docs/Structs/BuildingFogInfo/Variables/StealthRevealRadius.html", ["stealth", "reveal", "radius"], "BuildingFogInfo");
addToContainers_variable("SelectableID", "", "Docs/Structs/BuildingFogInfo/Variables/SelectableID.html", ["selectable", "i", "d"], "BuildingFogInfo");
addToContainers_variable("FogStatus", "", "Docs/Structs/BuildingFogInfo/Variables/FogStatus.html", ["fog", "status"], "BuildingFogInfo");
addToContainers_variable("FogLocationsIndices", "Indices into tiles array that this building is occupying", "Docs/Structs/BuildingFogInfo/Variables/FogLocationsIndices.html", ["fog", "locations", "indices"], "BuildingFogInfo");
addToContainers_struct("InfantryFogInfoArray", "", "Docs/Structs/InfantryFogInfoArray/InfantryFogInfoArray.html", ["infantry", "fog", "info", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/InfantryFogInfoArray/Variables/Array.html", [], "InfantryFogInfoArray");
addToContainers_variable("ArrayLock", "Lock for accessing Array. Do not read/write to array without first holding this", "Docs/Structs/InfantryFogInfoArray/Variables/ArrayLock.html", ["array", "lock"], "InfantryFogInfoArray");
addToContainers_struct("InfantryFogInfoBasic", "", "Docs/Structs/InfantryFogInfoBasic/InfantryFogInfoBasic.html", ["infantry", "fog", "info", "basic"], "");
addToContainers_function("InfantryFogInfoBasic", "", "Docs/Structs/InfantryFogInfoBasic/Functions/InfantryFogInfoBasic.html", ["infantry", "fog", "info", "basic"], "InfantryFogInfoBasic");
addToContainers_variable("WorldLocation", "", "Docs/Structs/InfantryFogInfoBasic/Variables/WorldLocation.html", ["world", "location"], "InfantryFogInfoBasic");
addToContainers_variable("SelectableID", "Selectable ID of the infantry", "Docs/Structs/InfantryFogInfoBasic/Variables/SelectableID.html", ["selectable", "i", "d"], "InfantryFogInfoBasic");
addToContainers_variable("FogStatus", "Fog status of the tile the infantry is standing on", "Docs/Structs/InfantryFogInfoBasic/Variables/FogStatus.html", ["fog", "status"], "InfantryFogInfoBasic");
addToContainers_struct("InfantryFogInfoFinal", "", "Docs/Structs/InfantryFogInfoFinal/InfantryFogInfoFinal.html", ["infantry", "fog", "info", "final"], "");
addToContainers_variable("TilesFogStatus", "Fog status of the tile the infantry is standing on", "Docs/Structs/InfantryFogInfoFinal/Variables/TilesFogStatus.html", ["tiles", "fog", "status"], "InfantryFogInfoFinal");
addToContainers_struct("InfantryArray", "", "Docs/Structs/InfantryArray/InfantryArray.html", ["infantry", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/InfantryArray/Variables/Array.html", [], "InfantryArray");
addToContainers_struct("InfantryFogInfoBasicArray", "", "Docs/Structs/InfantryFogInfoBasicArray/InfantryFogInfoBasicArray.html", ["infantry", "fog", "info", "basic", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/InfantryFogInfoBasicArray/Variables/Array.html", [], "InfantryFogInfoBasicArray");
addToContainers_variable("ArrayLock", "", "Docs/Structs/InfantryFogInfoBasicArray/Variables/ArrayLock.html", ["array", "lock"], "InfantryFogInfoBasicArray");
addToContainers_struct("BuildingFogInfoArray", "", "Docs/Structs/BuildingFogInfoArray/BuildingFogInfoArray.html", ["building", "fog", "info", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/BuildingFogInfoArray/Variables/Array.html", [], "BuildingFogInfoArray");
addToContainers_variable("ArrayLock", "Lock for accessing Array. Do not read/write to array without first holding this", "Docs/Structs/BuildingFogInfoArray/Variables/ArrayLock.html", ["array", "lock"], "BuildingFogInfoArray");
addToContainers_struct("BuildingFogInfoArrayBasic", "", "Docs/Structs/BuildingFogInfoArrayBasic/BuildingFogInfoArrayBasic.html", ["building", "fog", "info", "array", "basic"], "");
addToContainers_variable("Array", "", "Docs/Structs/BuildingFogInfoArrayBasic/Variables/Array.html", [], "BuildingFogInfoArrayBasic");
addToContainers_struct("SelectableIDArray", "This container will likely be used for checking if a building has been marked as recently destroyed", "Docs/Structs/SelectableIDArray/SelectableIDArray.html", ["selectable", "i", "d", "array"], "");
addToContainers_variable("Array", "Array of selectable IDs", "Docs/Structs/SelectableIDArray/Variables/Array.html", [], "SelectableIDArray");
addToContainers_struct("DestroyedBuildingArray", "", "Docs/Structs/DestroyedBuildingArray/DestroyedBuildingArray.html", ["destroyed", "building", "array"], "");
addToContainers_variable("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]", "TODO make this an array of bitfields instead, unless that\'s how TArray<bool> is implemented in the first place...", "Docs/Structs/DestroyedBuildingArray/Variables/Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER].html", ["array[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "s", "e", "l", "e", "c", "t", "a", "b", "l", "e", "s_", "p", "e", "r_", "p", "l", "a", "y", "e", "r]"], "DestroyedBuildingArray");
addToContainers_struct("TempRevealEffectArray", "", "Docs/Structs/TempRevealEffectArray/TempRevealEffectArray.html", ["temp", "reveal", "effect", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/TempRevealEffectArray/Variables/Array.html", [], "TempRevealEffectArray");
addToContainers_variable("ArrayLock", "", "Docs/Structs/TempRevealEffectArray/Variables/ArrayLock.html", ["array", "lock"], "TempRevealEffectArray");
addToContainers_struct("TempRevealEffectArray_NoLock", "", "Docs/Structs/TempRevealEffectArray_NoLock/TempRevealEffectArray_NoLock.html", ["temp", "reveal", "effect", "array_", "no", "lock"], "");
addToContainers_variable("Array", "", "Docs/Structs/TempRevealEffectArray_NoLock/Variables/Array.html", [], "TempRevealEffectArray_NoLock");
addToContainers_struct("TeamVisibilityInfoStruct", "", "Docs/Structs/TeamVisibilityInfoStruct/TeamVisibilityInfoStruct.html", ["team", "visibility", "info", "struct"], "");
addToContainers_variable("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]", "Index = selectable\'s ID", "Docs/Structs/TeamVisibilityInfoStruct/Variables/Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER].html", ["array[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "s", "e", "l", "e", "c", "t", "a", "b", "l", "e", "s_", "p", "e", "r_", "p", "l", "a", "y", "e", "r]"], "TeamVisibilityInfoStruct");
addToContainers_variable("ArrayLock", "Lock for accessing Array. Do not read/write to array without first holding this", "Docs/Structs/TeamVisibilityInfoStruct/Variables/ArrayLock.html", ["array", "lock"], "TeamVisibilityInfoStruct");
addToContainers_struct("TilesArray", "", "Docs/Structs/TilesArray/TilesArray.html", ["tiles", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/TilesArray/Variables/Array.html", [], "TilesArray");
addToContainers_variable("Lock", "", "Docs/Structs/TilesArray/Variables/Lock.html", [], "TilesArray");
addToContainers_struct("FSuggestProjectileVelocityEntry", "Contains data about the time SuggestProjectileVelocity failed to find a solution", "Docs/Structs/FSuggestProjectileVelocityEntry/FSuggestProjectileVelocityEntry.html", ["suggest", "projectile", "velocity", "entry"], "");
addToContainers_function("FSuggestProjectileVelocityEntry", "", "Docs/Structs/FSuggestProjectileVelocityEntry/Functions/FSuggestProjectileVelocityEntry.html", ["suggest", "projectile", "velocity", "entry"], "FSuggestProjectileVelocityEntry");
addToContainers_variable("StartLocation", "", "Docs/Structs/FSuggestProjectileVelocityEntry/Variables/StartLocation.html", ["start", "location"], "FSuggestProjectileVelocityEntry");
addToContainers_variable("TargetLocation", "", "Docs/Structs/FSuggestProjectileVelocityEntry/Variables/TargetLocation.html", ["target", "location"], "FSuggestProjectileVelocityEntry");
addToContainers_variable("Distance", "Distance between StartLocation and EndLocation", "Docs/Structs/FSuggestProjectileVelocityEntry/Variables/Distance.html", [], "FSuggestProjectileVelocityEntry");
addToContainers_struct("FSuggestProjectileVelocityEntryContainer", "", "Docs/Structs/FSuggestProjectileVelocityEntryContainer/FSuggestProjectileVelocityEntryContainer.html", ["suggest", "projectile", "velocity", "entry", "container"], "");
addToContainers_function("FSuggestProjectileVelocityEntryContainer", "", "Docs/Structs/FSuggestProjectileVelocityEntryContainer/Functions/FSuggestProjectileVelocityEntryContainer.html", ["suggest", "projectile", "velocity", "entry", "container"], "FSuggestProjectileVelocityEntryContainer");
addToContainers_variable("Array", "", "Docs/Structs/FSuggestProjectileVelocityEntryContainer/Variables/Array.html", [], "FSuggestProjectileVelocityEntryContainer");
addToContainers_variable("MAX_CONTAINER_ENTRIES", "", "Docs/Structs/FSuggestProjectileVelocityEntryContainer/Variables/MAX_CONTAINER_ENTRIES.html", ["a", "x_", "c", "o", "n", "t", "a", "i", "n", "e", "r_", "e", "n", "t", "r", "i", "e", "s"], "FSuggestProjectileVelocityEntryContainer");
addToContainers_struct("FProjectileArray", "Workaround for non 2D TArrays", "Docs/Structs/FProjectileArray/FProjectileArray.html", ["projectile", "array"], "");
addToContainers_function("FProjectileArray", "", "Docs/Structs/FProjectileArray/Functions/FProjectileArray.html", ["projectile", "array"], "FProjectileArray");
addToContainers_function("FProjectileArray", "", "Docs/Structs/FProjectileArray/Functions/FProjectileArray_1.html", ["projectile", "array"], "FProjectileArray");
addToContainers_variable("", "Holds created projectiles. Will be used like a stack", "Docs/Structs/FProjectileArray/Variables/.html", [], "FProjectileArray");
addToContainers_class("AObjectPoolingManager", "Handles requests for adding and removing actors from an object pool. Some things that are pooled: - projectiles - inventory items - ghost buildings (although I don\'t think they\'re handled by this class, PC does it instead) TODO I do not think there is any need for this to be an AActor; a UObject is good enough", "Docs/Classes/AObjectPoolingManager/AObjectPoolingManager.html", ["object", "pooling", "manager"], "");
addToContainers_function("AObjectPoolingManager", "", "Docs/Classes/AObjectPoolingManager/Functions/AObjectPoolingManager.html", ["object", "pooling", "manager"], "AObjectPoolingManager");
addToContainers_variable("", "Reference to gamestate for sending RPCs", "Docs/Classes/AObjectPoolingManager/Variables/.html", [], "AObjectPoolingManager");
addToContainers_variable("", "Holds all BP for each projectile used by selectables", "Docs/Classes/AObjectPoolingManager/Variables/_1.html", [], "AObjectPoolingManager");
addToContainers_variable("", "Maps blueprint to struct that holds array of already spawned objects for that blueprint", "Docs/Classes/AObjectPoolingManager/Variables/_2.html", [], "AObjectPoolingManager");
addToContainers_variable("CurrentFrameNumber", "", "Docs/Classes/AObjectPoolingManager/Variables/CurrentFrameNumber.html", ["current", "frame", "number"], "AObjectPoolingManager");
addToContainers_variable("NumProjectilesSpawnedThisFrame", "Maps projectile type to how many of it have been spawned this frame", "Docs/Classes/AObjectPoolingManager/Variables/NumProjectilesSpawnedThisFrame.html", ["num", "projectiles", "spawned", "this", "frame"], "AObjectPoolingManager");
addToContainers_variable("WorstProjectileFrame", "Maps projectile type to how many of it have been spawned this frame. This will contain what is considered the worst frame for performance in terms of projectiles spawned", "Docs/Classes/AObjectPoolingManager/Variables/WorstProjectileFrame.html", ["worst", "projectile", "frame"], "AObjectPoolingManager");
addToContainers_variable("WorstProjectileFrameNumber", "Frame count of the worst frame", "Docs/Classes/AObjectPoolingManager/Variables/WorstProjectileFrameNumber.html", ["worst", "projectile", "frame", "number"], "AObjectPoolingManager");
addToContainers_variable("SuggestProjectileVelocityFails", "Every time SuggestProjectileVelocity fails to find a solution an entry is added here", "Docs/Classes/AObjectPoolingManager/Variables/SuggestProjectileVelocityFails.html", ["suggest", "projectile", "velocity", "fails"], "AObjectPoolingManager");
addToContainers_variable("", "Pool for inventory item actors that use static meshes. If pool is empty and we request an object from it then we will spawn a new actor to fulfill the request as opposed to crashing", "Docs/Classes/AObjectPoolingManager/Variables/_3.html", [], "AObjectPoolingManager");
addToContainers_variable("", "This array is for the ones with skeletal meshes", "Docs/Classes/AObjectPoolingManager/Variables/_4.html", [], "AObjectPoolingManager");
addToContainers_variable("bHasCreatedPools", "To make sure we aren\'t calling SetupPools more than once accidentally", "Docs/Classes/AObjectPoolingManager/Variables/bHasCreatedPools.html", ["has", "created", "pools"], "AObjectPoolingManager");
addToContainers_struct("FUpgradeTypeArrayPtrArray", "Array of pointers to array of upgrade types", "Docs/Structs/FUpgradeTypeArrayPtrArray/FUpgradeTypeArrayPtrArray.html", ["upgrade", "type", "array", "ptr", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/FUpgradeTypeArrayPtrArray/Variables/Array.html", [], "FUpgradeTypeArrayPtrArray");
addToContainers_struct("FUpgradeArray", "Array containing upgrades. Workaround for non 2D TArrays", "Docs/Structs/FUpgradeArray/FUpgradeArray.html", ["upgrade", "array"], "");
addToContainers_variable("", "", "Docs/Structs/FUpgradeArray/Variables/.html", [], "FUpgradeArray");
addToContainers_class("AUpgradeManager", "One exists for each player state, both on server and client. On client-side this is mainly used for instant knowing of whether am upgrade button worked and for showing UI timers.", "Docs/Classes/AUpgradeManager/AUpgradeManager.html", ["upgrade", "manager"], "");
addToContainers_function("AUpgradeManager", "", "Docs/Classes/AUpgradeManager/Functions/AUpgradeManager.html", ["upgrade", "manager"], "AUpgradeManager");
addToContainers_variable("", "Reference to player state that owns this", "Docs/Classes/AUpgradeManager/Variables/.html", [], "AUpgradeManager");
addToContainers_variable("", "Reference to faction info of owning player state", "Docs/Classes/AUpgradeManager/Variables/_1.html", [], "AUpgradeManager");
addToContainers_variable("TotalNumUpgradesResearched", "Total number of upgrades this player has researched. This will exclude any upgrades that can be obtained through using commander abilities", "Docs/Classes/AUpgradeManager/Variables/TotalNumUpgradesResearched.html", ["total", "num", "upgrades", "researched"], "AUpgradeManager");
addToContainers_variable("", "Maps upgrade type to how many times it has been researched, which is limited to 0 or 1 at the moment", "Docs/Classes/AUpgradeManager/Variables/_2.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps upgrade type to its effects", "Docs/Classes/AUpgradeManager/Variables/_3.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps building type to array of all upgrades completed for it", "Docs/Classes/AUpgradeManager/Variables/_4.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps unit type to array of all upgrades completed for it", "Docs/Classes/AUpgradeManager/Variables/_5.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps from upgrade type to actor (usually building) that has upgrade queued (not necessarily researching it yet). Updated server-side only", "Docs/Classes/AUpgradeManager/Variables/_6.html", [], "AUpgradeManager");
addToContainers_variable("", "Upgrades that the owner\'s faction has on its roster but have not been researched yet. This was added to enable a quick way to get a random unresearched upgrade. This will not include upgrades that are aquired through commander abilities", "Docs/Classes/AUpgradeManager/Variables/_7.html", [], "AUpgradeManager");
addToContainers_variable("HasUpgradePrerequisite_Buildings", "Maps upgrade type to an array. The array points to arrays in PS. These arrays contain upgrade types that have not yet been obtained but that are a prerequisite for a building/unit/upgrade. If the upgrade isn\'t a prerequisite for anything then it will not have an entry in any of these TMap.", "Docs/Classes/AUpgradeManager/Variables/HasUpgradePrerequisite_Buildings.html", ["has", "upgrade", "prerequisite_", "buildings"], "AUpgradeManager");
addToContainers_variable("HasUpgradePrerequisite_Units", "", "Docs/Classes/AUpgradeManager/Variables/HasUpgradePrerequisite_Units.html", ["has", "upgrade", "prerequisite_", "units"], "AUpgradeManager");
addToContainers_variable("HasUpgradePrerequisite_Upgrades", "", "Docs/Classes/AUpgradeManager/Variables/HasUpgradePrerequisite_Upgrades.html", ["has", "upgrade", "prerequisite_", "upgrades"], "AUpgradeManager");
addToContainers_variable("bHasInited", "", "Docs/Classes/AUpgradeManager/Variables/bHasInited.html", ["has", "inited"], "AUpgradeManager");
addToContainers_struct("FBuildingAnimState", "Stores the animation state of the building", "Docs/Structs/FBuildingAnimState/FBuildingAnimState.html", ["building", "anim", "state"], "");
addToContainers_function("FBuildingAnimState", "Constructor", "Docs/Structs/FBuildingAnimState/Functions/FBuildingAnimState.html", ["building", "anim", "state"], "FBuildingAnimState");
addToContainers_variable("", "World time when animation started", "Docs/Structs/FBuildingAnimState/Variables/.html", [], "FBuildingAnimState");
addToContainers_variable("", "Type of animation", "Docs/Structs/FBuildingAnimState/Variables/_1.html", [], "FBuildingAnimState");
addToContainers_struct("FBuildingAnimPauseInfo", "Information about what/when animation was paused", "Docs/Structs/FBuildingAnimPauseInfo/FBuildingAnimPauseInfo.html", ["building", "anim", "pause", "info"], "");
addToContainers_function("FBuildingAnimPauseInfo", "Constructor", "Docs/Structs/FBuildingAnimPauseInfo/Functions/FBuildingAnimPauseInfo.html", ["building", "anim", "pause", "info"], "FBuildingAnimPauseInfo");
addToContainers_variable("StartTime", "World time when animation started playing", "Docs/Structs/FBuildingAnimPauseInfo/Variables/StartTime.html", ["start", "time"], "FBuildingAnimPauseInfo");
addToContainers_variable("AnimationType", "Type of animation that was paused", "Docs/Structs/FBuildingAnimPauseInfo/Variables/AnimationType.html", ["animation", "type"], "FBuildingAnimPauseInfo");
addToContainers_struct("FConstructionProgressInfo", "A struct that stores the info about this building while it is being constructed. Using the info in this struct it is possible to derive how far along the construction of this building is. If structs do not rep all at once (i.e. if both variables in this struct change but UE is allowed to send only one of the two variables in this struct) then we have problems. This article says they do, it is about 3 years old: https://answers.unrealengine.com/questions/234803/problems-with-the-order-replicated-variables-repli.html If they don\'t both update at once then it *may* be possible, haven\'t thought about it thouroughly", "Docs/Structs/FConstructionProgressInfo/FConstructionProgressInfo.html", ["construction", "progress", "info"], "");
addToContainers_function("FConstructionProgressInfo", "", "Docs/Structs/FConstructionProgressInfo/Functions/FConstructionProgressInfo.html", ["construction", "progress", "info"], "FConstructionProgressInfo");
addToContainers_variable("", "How far along construction was when it was halted. Range: [0, 1]", "Docs/Structs/FConstructionProgressInfo/Variables/.html", [], "FConstructionProgressInfo");
addToContainers_variable("", "The world time when construction resumed. A value less than 0 means that the building is currently not being worked on", "Docs/Structs/FConstructionProgressInfo/Variables/_1.html", [], "FConstructionProgressInfo");
addToContainers_class("ABuilding", "My notes: - some OnRep funcs may need to check if HasBeenFullyDestroyed()", "Docs/Classes/ABuilding/ABuilding.html", [], "");
addToContainers_function("ABuilding", "", "Docs/Classes/ABuilding/Functions/ABuilding.html", [], "ABuilding");
addToContainers_variable("TimeToSpendSinking", "How long to spend sinking into the ground when the Destroyed animation finishes or if no destroyed anim is set then from the time it reaches zero health", "Docs/Classes/ABuilding/Variables/TimeToSpendSinking.html", ["time", "to", "spend", "sinking"], "ABuilding");
addToContainers_variable("", "Type of building this is. Each building in a faction info\'s building roster must have a unique type", "Docs/Classes/ABuilding/Variables/.html", [], "ABuilding");
addToContainers_variable("", "Bounds for selecting with mouse.", "Docs/Classes/ABuilding/Variables/_1.html", [], "ABuilding");
addToContainers_variable("", "TODO ghost building needs regular Mesh comp too", "Docs/Classes/ABuilding/Variables/_2.html", [], "ABuilding");
addToContainers_variable("", "Widget to display only when selected and visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/ABuilding/Variables/_3.html", [], "ABuilding");
addToContainers_variable("", "Widget to display all the time when unit is visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/ABuilding/Variables/_4.html", [], "ABuilding");
addToContainers_variable("", "Decal that appears under this when selected", "Docs/Classes/ABuilding/Variables/_5.html", [], "ABuilding");
addToContainers_variable("", "Particles to show when selected or right-clicked", "Docs/Classes/ABuilding/Variables/_6.html", [], "ABuilding");
addToContainers_variable("", "Location where unit spawns", "Docs/Classes/ABuilding/Variables/_7.html", [], "ABuilding");
addToContainers_variable("", "Location unit first moves to after spawning", "Docs/Classes/ABuilding/Variables/_8.html", [], "ABuilding");
addToContainers_variable("", "Location unit moves to after moving to UnitFirstMoveLoc. This can be changed by the player during a match", "Docs/Classes/ABuilding/Variables/_9.html", [], "ABuilding");
addToContainers_variable("", "Arrow component to go on UnitSpawnLoc to help better know transform. Rotation from this will also be used when spawning unit", "Docs/Classes/ABuilding/Variables/_10.html", [], "ABuilding");
addToContainers_variable("", "Sprite to better locate UnitFirstMoveLoc in editor", "Docs/Classes/ABuilding/Variables/_11.html", [], "ABuilding");
addToContainers_variable("", "Sprite to better locate UnitDefaultRallyPoint in editor", "Docs/Classes/ABuilding/Variables/_12.html", [], "ABuilding");
addToContainers_variable("BeingWorkedOnAudioComp", "", "Docs/Classes/ABuilding/Variables/BeingWorkedOnAudioComp.html", ["being", "worked", "on", "audio", "comp"], "ABuilding");
addToContainers_variable("", "BP for the ghost building that appears when choosing where to place this. It should have the exact same mesh properties but its material should be overridden with a translucent one", "Docs/Classes/ABuilding/Variables/_13.html", [], "ABuilding");
addToContainers_variable("", "Core attributes", "Docs/Classes/ABuilding/Variables/_14.html", [], "ABuilding");
addToContainers_variable("1", "This was added for clients cause OnRep_ funcs can come in before BeginPlay is called", "Docs/Classes/ABuilding/Variables/1.html", [], "ABuilding");
addToContainers_variable("1", "If true then actor will not setup and will instead have an outside source set it up. Will only be true if using PIE and unit was placed in world via editor", "Docs/Classes/ABuilding/Variables/1_1.html", [], "ABuilding");
addToContainers_variable(":", "Whether to use human player or CPU player index for PIE", "Docs/Classes/ABuilding/Variables/:.html", [], "ABuilding");
addToContainers_variable("", "For development only. When skipping main menu, this is the index of the player that will own this unit. ARTSDevelopmentSettings defines teams for each player, and is assigned in UMyGameInstance 0 = server, 1 = remote client 1, 2 = remote client 2 and so on. If the index is set higher than the number of players testing with in PIE then building will either be assigned to server player or removed from PIE completely", "Docs/Classes/ABuilding/Variables/_15.html", [], "ABuilding");
addToContainers_variable("", "Same as above but for CPU player", "Docs/Classes/ABuilding/Variables/_16.html", [], "ABuilding");
addToContainers_variable("", "Unique ID for issuing commands efficiently over the wire. If raw pointers are more bandwidth friendly then this variable should be removed", "Docs/Classes/ABuilding/Variables/_17.html", [], "ABuilding");
addToContainers_variable("", "Whether this building was spawned as a starting selectable or not. Important because if it was then clients need to know to construct it instantly. Also an extra copy of this variable is defined in FSelectableAttributes", "Docs/Classes/ABuilding/Variables/_18.html", [], "ABuilding");
addToContainers_variable("", "Struct that hols enough information to derive how far along construction is", "Docs/Classes/ABuilding/Variables/_19.html", [], "ABuilding");
addToContainers_variable("", "The custom RTS game tick count on the server when this unit was created.", "Docs/Classes/ABuilding/Variables/_20.html", [], "ABuilding");
addToContainers_variable("bHasRunOnConstructionCompleteLogic", "[Client] If true then Client_OnConstructionComplete has run. Basically this exists because 2+ OnRep variables can rep through on same frame", "Docs/Classes/ABuilding/Variables/bHasRunOnConstructionCompleteLogic.html", ["has", "run", "on", "construction", "complete", "logic"], "ABuilding");
addToContainers_variable("", "Animation state of building", "Docs/Classes/ABuilding/Variables/_21.html", [], "ABuilding");
addToContainers_variable("PausedAnimInfo", "Holds info about what/when animation was paused", "Docs/Classes/ABuilding/Variables/PausedAnimInfo.html", ["paused", "anim", "info"], "ABuilding");
addToContainers_variable("", "Location of rally point", "Docs/Classes/ABuilding/Variables/_22.html", [], "ABuilding");
addToContainers_variable("", "", "Docs/Classes/ABuilding/Variables/_23.html", [], "ABuilding");
addToContainers_variable("TimeIntoZeroHealthAnimThatAnimNotifyIs", "", "Docs/Classes/ABuilding/Variables/TimeIntoZeroHealthAnimThatAnimNotifyIs.html", ["time", "into", "zero", "health", "anim", "that", "anim", "notify", "is"], "ABuilding");
addToContainers_variable("HealthWhileUnderConstruction", "Because while being built health will change rapidly we do not want a ton of updates being sent to clients. Therefore this health value will be used as the buildings health while being built. Whenever damage is taken while being built the var Health will be updated. From there clients can work out how much health the building has and continue updating health on its own while it is being built", "Docs/Classes/ABuilding/Variables/HealthWhileUnderConstruction.html", ["health", "while", "under", "construction"], "ABuilding");
addToContainers_variable("DamageTakenWhileUnderConstruction", "Because of the nature of tick, need this so buildings health is not slightly off when it has finished construction", "Docs/Classes/ABuilding/Variables/DamageTakenWhileUnderConstruction.html", ["damage", "taken", "while", "under", "construction"], "ABuilding");
addToContainers_variable("", "Reference to the player state of the player that controls this", "Docs/Classes/ABuilding/Variables/_24.html", [], "ABuilding");
addToContainers_variable("", "Reference to faction info of player state", "Docs/Classes/ABuilding/Variables/_25.html", [], "ABuilding");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ABuilding/Variables/_26.html", [], "ABuilding");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ABuilding/Variables/_27.html", [], "ABuilding");
addToContainers_variable("", "Reference to local player controller. This is here for the defense structures", "Docs/Classes/ABuilding/Variables/_28.html", [], "ABuilding");
addToContainers_variable("", "Maps button to its timer handle that handles its cooldown", "Docs/Classes/ABuilding/Variables/_29.html", [], "ABuilding");
addToContainers_variable("", "Set of workers working on this building, constructing it. Unsure if multiple builders will work", "Docs/Classes/ABuilding/Variables/_30.html", [], "ABuilding");
addToContainers_variable("HealthGainRate", "Only relevant while being built. Equal to MaxHealth * (1 - PC->GetBuildingStartHealthPercentage()). Used each tick while being built to determine how much health to gain", "Docs/Classes/ABuilding/Variables/HealthGainRate.html", ["health", "gain", "rate"], "ABuilding");
addToContainers_variable("SpawnLocation", "Location when construction was started. Only relevant if not a starting selectable. Needed to know ending location when construction is complete", "Docs/Classes/ABuilding/Variables/SpawnLocation.html", ["spawn", "location"], "ABuilding");
addToContainers_variable("", "The component that plays the \'progressing construction\' particles. Spawned by Statics::SpawnFogParticles", "Docs/Classes/ABuilding/Variables/_31.html", [], "ABuilding");
addToContainers_variable("bIsBeingBuiltParticlesRunning", "This bool is to know whether BeingBuiltParticleComponent is playing or not. I can\'t seem to find one in UParticleSystemComponent so I\'ll use this", "Docs/Classes/ABuilding/Variables/bIsBeingBuiltParticlesRunning.html", ["is", "being", "built", "particles", "running"], "ABuilding");
addToContainers_variable("bRiseFromGround", "If true, while construction is progressing the building will rise from the ground. This will be set true if no construction animation is set", "Docs/Classes/ABuilding/Variables/bRiseFromGround.html", ["rise", "from", "ground"], "ABuilding");
addToContainers_variable("TimeSpentBuilding", "How long this has been building for", "Docs/Classes/ABuilding/Variables/TimeSpentBuilding.html", ["time", "spent", "building"], "ABuilding");
addToContainers_variable("Building2)", "For sorting buildings in arrays", "Docs/Classes/ABuilding/Variables/Building2).html", [], "ABuilding");
addToContainers_variable("1", "Whether the Destroyed anim has finished. If there is no Destroyed anim then this will be false. Could possibly do away with this variable and figure it out some other way", "Docs/Classes/ABuilding/Variables/1_2.html", [], "ABuilding");
addToContainers_variable("1", "Whether CleanUp() has run or not", "Docs/Classes/ABuilding/Variables/1_3.html", [], "ABuilding");
addToContainers_variable("1", "True if the building is sinking into the ground. Can happen when the building reaches zero health", "Docs/Classes/ABuilding/Variables/1_4.html", [], "ABuilding");
addToContainers_variable("1", "True if the building is sinking into ground and the local player can see it happening", "Docs/Classes/ABuilding/Variables/1_5.html", [], "ABuilding");
addToContainers_variable("1", "Whether the local player has seen the building at least once", "Docs/Classes/ABuilding/Variables/1_6.html", [], "ABuilding");
addToContainers_variable("1", "Whether the local player has seen the building in a state that implies it has reached zero health", "Docs/Classes/ABuilding/Variables/1_7.html", [], "ABuilding");
addToContainers_variable("TimeSpentSinking", "How long we have spent sinking into the ground", "Docs/Classes/ABuilding/Variables/TimeSpentSinking.html", ["time", "spent", "sinking"], "ABuilding");
addToContainers_variable("TimerHandle_Destroy", "", "Docs/Classes/ABuilding/Variables/TimerHandle_Destroy.html", ["timer", "handle_", "destroy"], "ABuilding");
addToContainers_variable("BoundsHeight", "Height of bounds. Used when raising building during construction", "Docs/Classes/ABuilding/Variables/BoundsHeight.html", ["bounds", "height"], "ABuilding");
addToContainers_variable("", "The locations that fog manager will check when deciding if this building is visible or not. This array is populated on post edit and needs to have world location and rotation taken into account when spawned during a match", "Docs/Classes/ABuilding/Variables/_32.html", [], "ABuilding");
addToContainers_variable("", "", "Docs/Classes/ABuilding/Variables/_33.html", [], "ABuilding");
addToContainers_variable("", "", "Docs/Classes/ABuilding/Variables/_34.html", [], "ABuilding");
addToContainers_class("AGhostBuilding", "Ghost buildings are the buildings spawned when trying to select a location to build a building. They are only visible to the owning player.", "Docs/Classes/AGhostBuilding/AGhostBuilding.html", ["ghost", "building"], "");
addToContainers_function("AGhostBuilding", "Sets default values for this actor\'s properties", "Docs/Classes/AGhostBuilding/Functions/AGhostBuilding.html", ["ghost", "building"], "AGhostBuilding");
addToContainers_variable("", "Used only to get correct positioning of mesh component", "Docs/Classes/AGhostBuilding/Variables/.html", [], "AGhostBuilding");
addToContainers_variable("", "Mesh", "Docs/Classes/AGhostBuilding/Variables/_1.html", [], "AGhostBuilding");
addToContainers_variable("", "A static mesh that will be assigned a default engine shape to make default ghost as good as possible for \'works out of the box\' functionality. If user sets a skeletal mesh then this will be made invisible", "Docs/Classes/AGhostBuilding/Variables/_2.html", [], "AGhostBuilding");
addToContainers_variable("Type", "Type of building this is for. For a long time this was an editor exposed variable but is now set automatically", "Docs/Classes/AGhostBuilding/Variables/Type.html", [], "AGhostBuilding");
addToContainers_variable("bIsAtBuildableLocation", "Whether current location is a buildable location or not", "Docs/Classes/AGhostBuilding/Variables/bIsAtBuildableLocation.html", ["is", "at", "buildable", "location"], "AGhostBuilding");
addToContainers_variable("", "Whether to override the param name specified in game instance", "Docs/Classes/AGhostBuilding/Variables/_3.html", [], "AGhostBuilding");
addToContainers_variable("", "Optional override of name in game instance. The name of the vector param on each of the mesh\'s materials to modify when the ghost is in a suitable/non-suitable build location e.g. in C&C generals the building will change to a red color when not in a suitable build location", "Docs/Classes/AGhostBuilding/Variables/_4.html", [], "AGhostBuilding");
addToContainers_variable("", "Whether to override the value set in game instance to set bad location param to when in a non-suitable build location", "Docs/Classes/AGhostBuilding/Variables/_5.html", [], "AGhostBuilding");
addToContainers_variable("", "Optional override of value set in game instance Value to set param to", "Docs/Classes/AGhostBuilding/Variables/_6.html", [], "AGhostBuilding");
addToContainers_variable("", "Will hold all the mesh\'s materials as dynamic material instances. We will modify these based on whether the ghost is at a suitable build location or not", "Docs/Classes/AGhostBuilding/Variables/_7.html", [], "AGhostBuilding");
addToContainers_variable("", "Original values of the bad location param saved so it can be restored to it\'s original value during gameplay", "Docs/Classes/AGhostBuilding/Variables/_8.html", [], "AGhostBuilding");
addToContainers_variable("PlayersDefaultYawRot", "The default camera yaw rotation of the player so ghost knows what is considered the default rotation", "Docs/Classes/AGhostBuilding/Variables/PlayersDefaultYawRot.html", ["players", "default", "yaw", "rot"], "AGhostBuilding");
addToContainers_struct("FInfantryGarrisonStatus", "Contains all the informantion required to know whether the infantry is garrisoned inside something and if so then what it is garrisoned inside of.", "Docs/Structs/FInfantryGarrisonStatus/FInfantryGarrisonStatus.html", ["infantry", "garrison", "status"], "");
addToContainers_function("FInfantryGarrisonStatus", "Ctor that should se the values such that the infantry is not inside any garrison", "Docs/Structs/FInfantryGarrisonStatus/Functions/FInfantryGarrisonStatus.html", ["infantry", "garrison", "status"], "FInfantryGarrisonStatus");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Structs/FInfantryGarrisonStatus/Variables/.html", [], "FInfantryGarrisonStatus");
addToContainers_variable("", "Selectable ID of what this unit is garrisoned inside of", "Docs/Structs/FInfantryGarrisonStatus/Variables/_1.html", [], "FInfantryGarrisonStatus");
addToContainers_class("AInfantry", "Infantry class. Infantry use the UE4 character class as a base. Editing the capsule\'s bGeneratedOverlapEvents in editor will not work - it is always overriden in post edit.", "Docs/Classes/AInfantry/AInfantry.html", [], "");
addToContainers_function("AInfantry", "", "Docs/Classes/AInfantry/Functions/AInfantry.html", [], "AInfantry");
addToContainers_variable("", "Mesh to show as a piece of gathered resources. Only relevant if this is a resource gathering unit", "Docs/Classes/AInfantry/Variables/.html", [], "AInfantry");
addToContainers_variable("", "Widget to display only when selected and visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/AInfantry/Variables/_1.html", [], "AInfantry");
addToContainers_variable("", "Widget to display all the time when unit is visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/AInfantry/Variables/_2.html", [], "AInfantry");
addToContainers_variable("", "Selection decal to appear under unit when selected. Decal material does not need to be set through editor", "Docs/Classes/AInfantry/Variables/_3.html", [], "AInfantry");
addToContainers_variable("", "The particle system to show when the unit is selected. Usually these play around their feet but can be anywhere really", "Docs/Classes/AInfantry/Variables/_4.html", [], "AInfantry");
addToContainers_variable("", "Audio component that plays the \'attack preparation\' sound. Possibly could use this to play all sorts of sounds for this unit", "Docs/Classes/AInfantry/Variables/_5.html", [], "AInfantry");
addToContainers_variable("", "Type this unit is", "Docs/Classes/AInfantry/Variables/_6.html", [], "AInfantry");
addToContainers_variable("bStartedInMap", "If true then actor will not setup and will instead have an outside source set it up. Will only be true if using PIE and unit was placed in world via editor", "Docs/Classes/AInfantry/Variables/bStartedInMap.html", ["started", "in", "map"], "AInfantry");
addToContainers_variable("", "Many core attributes", "Docs/Classes/AInfantry/Variables/_7.html", [], "AInfantry");
addToContainers_variable("", "Whether this unit can attack. Harvester type units are a good example of units that may want this to be false", "Docs/Classes/AInfantry/Variables/_8.html", [], "AInfantry");
addToContainers_variable("", "How much yaw rotation unit can be off by for it to attack. Negative value means unit does not have to face target at all. For yaw only", "Docs/Classes/AInfantry/Variables/_9.html", [], "AInfantry");
addToContainers_variable("", "This is kind of an AIController property. If false then when unit does an attack they will keep the same yaw rotation until the anim notify OnAttackAnimationFinished is called. Issuing them anther order will cause their rotation to change My notes: could use a seperate anim notify", "Docs/Classes/AInfantry/Variables/_10.html", [], "AInfantry");
addToContainers_variable("", "Attack attributes", "Docs/Classes/AInfantry/Variables/_11.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_12.html", [], "AInfantry");
addToContainers_variable("", "For development only. When skipping main menu, this is the index of the player that will own this unit. ARTSDevelopmentSettings defines teams for each player, and is assigned in UMyGameInstance 0 = server, 1 = remote client 1, 2 = remote client 2 and so on", "Docs/Classes/AInfantry/Variables/_13.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_14.html", [], "AInfantry");
addToContainers_variable("", "Unique ID for issuing commands efficiently over the wire", "Docs/Classes/AInfantry/Variables/_15.html", [], "AInfantry");
addToContainers_variable("", "Whether this is a starting selectable or not", "Docs/Classes/AInfantry/Variables/_16.html", [], "AInfantry");
addToContainers_variable("", "The custom RTS game tick count on the server when this unit was created.", "Docs/Classes/AInfantry/Variables/_17.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_18.html", [], "AInfantry");
addToContainers_variable("", "If this is a resource gathering unit, the type of resource this unit is holding", "Docs/Classes/AInfantry/Variables/_19.html", [], "AInfantry");
addToContainers_variable("PreviousHeldResourceType", "The resource the unit was holding before HeldResourceType", "Docs/Classes/AInfantry/Variables/PreviousHeldResourceType.html", ["previous", "held", "resource", "type"], "AInfantry");
addToContainers_variable("HeldResourceAmount", "Amount of HeldResourceType held", "Docs/Classes/AInfantry/Variables/HeldResourceAmount.html", ["held", "resource", "amount"], "AInfantry");
addToContainers_variable("Rank", "Rank or level. Starts at value defined in LevelUpOptions", "Docs/Classes/AInfantry/Variables/Rank.html", [], "AInfantry");
addToContainers_variable("PreviousRank", "Rank before leveling up to know how many levels gained", "Docs/Classes/AInfantry/Variables/PreviousRank.html", ["previous", "rank"], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_20.html", [], "AInfantry");
addToContainers_variable(":", "True if stealthed, but may still be visible due to stealth detectors", "Docs/Classes/AInfantry/Variables/:.html", [], "AInfantry");
addToContainers_variable("TimerHandle_ReenterStealth", "Timer handle to controle when to reenter stealth mode after leaving stealth mode", "Docs/Classes/AInfantry/Variables/TimerHandle_ReenterStealth.html", ["timer", "handle_", "reenter", "stealth"], "AInfantry");
addToContainers_variable("", "What selectable this unit is garrisoned inside of", "Docs/Classes/AInfantry/Variables/_21.html", [], "AInfantry");
addToContainers_variable("ClientPreviousGarrisonStatus", "[Client] What the unit was garrisoned in last time we received the replicated variable. Could also keep this up to date on the server but there\'s no point", "Docs/Classes/AInfantry/Variables/ClientPreviousGarrisonStatus.html", ["client", "previous", "garrison", "status"], "AInfantry");
addToContainers_variable("", "Experience gained towards next rank. Not total experience gained", "Docs/Classes/AInfantry/Variables/_22.html", [], "AInfantry");
addToContainers_variable("RangeSquared", "Range squared * RangeLenience. Used to speed up some calculations", "Docs/Classes/AInfantry/Variables/RangeSquared.html", ["range", "squared"], "AInfantry");
addToContainers_variable("", "Animation montages", "Docs/Classes/AInfantry/Variables/_23.html", [], "AInfantry");
addToContainers_variable("MoveAnimPlayRate", "The rate the move and moving with resources animations play", "Docs/Classes/AInfantry/Variables/MoveAnimPlayRate.html", ["move", "anim", "play", "rate"], "AInfantry");
addToContainers_variable("", "Maps each context button to a timer handle that keeps track of the cooldown for the ability", "Docs/Classes/AInfantry/Variables/_24.html", [], "AInfantry");
addToContainers_variable("", "Reference to AI controller", "Docs/Classes/AInfantry/Variables/_25.html", [], "AInfantry");
addToContainers_variable("", "A reference to local player controller. Not necessarilty the player controller that is controlling this", "Docs/Classes/AInfantry/Variables/_26.html", [], "AInfantry");
addToContainers_variable("", "A reference to the player state of the player that controls this", "Docs/Classes/AInfantry/Variables/_27.html", [], "AInfantry");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AInfantry/Variables/_28.html", [], "AInfantry");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/AInfantry/Variables/_29.html", [], "AInfantry");
addToContainers_variable("", "Faction info of PS", "Docs/Classes/AInfantry/Variables/_30.html", [], "AInfantry");
addToContainers_variable("", "Reference to dynamic material instances created for both main mesh and weapon mesh. Ordering is defined in InitStealthingVariables()", "Docs/Classes/AInfantry/Variables/_31.html", [], "AInfantry");
addToContainers_variable("", "Value to change params to when out of stealth mode", "Docs/Classes/AInfantry/Variables/_32.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_33.html", [], "AInfantry");
addToContainers_variable("BuildingSpawnedFrom", "The building that produced this unit. Will be null if the player started the match with this unit", "Docs/Classes/AInfantry/Variables/BuildingSpawnedFrom.html", ["building", "spawned", "from"], "AInfantry");
addToContainers_variable("BarracksRallyLoc", "The location of the rally point of the building that this unit was produced from", "Docs/Classes/AInfantry/Variables/BarracksRallyLoc.html", ["barracks", "rally", "loc"], "AInfantry");
addToContainers_class("AInventoryItem", "Inventory items are items that can go in the inventory of a selectable. This class is an inventory item that has been placed/dropped/whatever into the world. You can place these into maps to have them start there when the match begins, but they only show as a sprite while during design time. Make sure to set their type in their blueprint. There\'s no shape component used for selection - it\'s up to the mesh. Can\'t you make a custom physics asset that can be like a cube and use that for the mesh\'s collision? There is an expectation that this actor is visible so if you make blueprints of this class do not adjust their visibilities. ----------------------------------------------------------------------------------------------- My notes: can\'t quite get the functionality that I want in regards to meshes. What I want is: - you define the mesh you want to use for an item type in GI blueprint - you can place these actors into the world. They will have that mesh that was set in GI BP. In post edit world and GI are null. Would be able to accomplish this by: - learning how to modify another BP in post edit e.g. we edit this but also modify GI BP - writing the mesh reference to disk meaning in post edit we can access it. Maybe a data table could accomplish this I don\'t know though, I know nothing about data tables. So in the mean time its always the default cube in editor map during design time. -----------------------------------------------------------------------------------------------", "Docs/Classes/AInventoryItem/AInventoryItem.html", ["inventory", "item"], "");
addToContainers_function("AInventoryItem", "", "Docs/Classes/AInventoryItem/Functions/AInventoryItem.html", ["inventory", "item"], "AInventoryItem");
addToContainers_variable("", "Decal that appears under this when hovered/selected", "Docs/Classes/AInventoryItem/Variables/.html", [], "AInventoryItem");
addToContainers_variable("", "Particle system to show when this is selected. Also shows the particles for when this item is right-clicked. Donit use infinite looping templates for this", "Docs/Classes/AInventoryItem/Variables/_1.html", [], "AInventoryItem");
addToContainers_variable("SelectionParticlesTemplate", "Templates for particle systems. Not strictly components but here for cache locality", "Docs/Classes/AInventoryItem/Variables/SelectionParticlesTemplate.html", ["selection", "particles", "template"], "AInventoryItem");
addToContainers_variable("RightClickParticlesTemplate", "", "Docs/Classes/AInventoryItem/Variables/RightClickParticlesTemplate.html", ["right", "click", "particles", "template"], "AInventoryItem");
addToContainers_variable("", "ID. There should never be a situation where two items on the map share the same ID. If there is then we have problems", "Docs/Classes/AInventoryItem/Variables/_2.html", [], "AInventoryItem");
addToContainers_variable("", "The type of item this is for. My notes: this currently will not change the appearance of the item during design time.", "Docs/Classes/AInventoryItem/Variables/_3.html", [], "AInventoryItem");
addToContainers_variable("", "How many of this item there are in this stack OR how many charges the item has. But if you\'re looking at this in editor blueprint then treat it as num in stack.", "Docs/Classes/AInventoryItem/Variables/_4.html", [], "AInventoryItem");
addToContainers_variable("NumItemCharges", "How many charges the item has. Might be irrelevant if the item does not have charges", "Docs/Classes/AInventoryItem/Variables/NumItemCharges.html", ["num", "item", "charges"], "AInventoryItem");
addToContainers_variable("", "Acceptance radius amount for orders to pick this up", "Docs/Classes/AInventoryItem/Variables/_5.html", [], "AInventoryItem");
addToContainers_variable("ItemInfo", "The info struct that this item is for", "Docs/Classes/AInventoryItem/Variables/ItemInfo.html", ["item", "info"], "AInventoryItem");
addToContainers_variable("Attributes", "", "Docs/Classes/AInventoryItem/Variables/Attributes.html", [], "AInventoryItem");
addToContainers_variable("SelectionDecalInfo", "Info about the selection decal we\'re using", "Docs/Classes/AInventoryItem/Variables/SelectionDecalInfo.html", ["selection", "decal", "info"], "AInventoryItem");
addToContainers_class("AInventoryItem_SM", "Inventory item actor class that uses a static mesh", "Docs/Classes/AInventoryItem_SM/AInventoryItem_SM.html", ["inventory", "item_", "s", "m"], "");
addToContainers_function("AInventoryItem_SM", "", "Docs/Classes/AInventoryItem_SM/Functions/AInventoryItem_SM.html", ["inventory", "item_", "s", "m"], "AInventoryItem_SM");
addToContainers_variable("", "Mesh for this item.", "Docs/Classes/AInventoryItem_SM/Variables/.html", [], "AInventoryItem_SM");
addToContainers_class("AInventoryItem_SK", "Inventory item actor class that uses a skeletal mesh. ------------------------------------------------------------------------------------------------- My notes about ticking: Mesh will tick while on map if and only if an OnDropped animation was played -------------------------------------------------------------------------------------------------", "Docs/Classes/AInventoryItem_SK/AInventoryItem_SK.html", ["inventory", "item_", "s", "k"], "");
addToContainers_function("AInventoryItem_SK", "", "Docs/Classes/AInventoryItem_SK/Functions/AInventoryItem_SK.html", ["inventory", "item_", "s", "k"], "AInventoryItem_SK");
addToContainers_variable("", "", "Docs/Classes/AInventoryItem_SK/Variables/.html", [], "AInventoryItem_SK");
addToContainers_class("AResourceSpot", "A resource location. Only one unit can gather from it at a time (similar to minerals in SCII) Some notes: - Selection decal size scales with mesh scale. To change its size change the decal components scale", "Docs/Classes/AResourceSpot/AResourceSpot.html", ["resource", "spot"], "");
addToContainers_function("AResourceSpot", "", "Docs/Classes/AResourceSpot/Functions/AResourceSpot.html", ["resource", "spot"], "AResourceSpot");
addToContainers_variable("", "If adding a shape component as the root then consider changing AICon_GetBaseBuildRadius to use it instead of the mesh", "Docs/Classes/AResourceSpot/Variables/.html", [], "AResourceSpot");
addToContainers_variable("", "Widget to display only when selected and visible.", "Docs/Classes/AResourceSpot/Variables/_1.html", [], "AResourceSpot");
addToContainers_variable("", "Widget to display all the time", "Docs/Classes/AResourceSpot/Variables/_2.html", [], "AResourceSpot");
addToContainers_variable("", "Selection decal to appear under unit when selected. Decal material does not need to be set through editor", "Docs/Classes/AResourceSpot/Variables/_3.html", [], "AResourceSpot");
addToContainers_variable("", "Partciles to appear when resource spot is selected", "Docs/Classes/AResourceSpot/Variables/_4.html", [], "AResourceSpot");
addToContainers_variable("", "Resource type this is for. Cannot be \"None\"", "Docs/Classes/AResourceSpot/Variables/_5.html", [], "AResourceSpot");
addToContainers_variable("", "How many resources this spot starts with", "Docs/Classes/AResourceSpot/Variables/_6.html", [], "AResourceSpot");
addToContainers_variable("", "How close to spot a collector has to get for them to be able to gather resources, measured from this actors GetActorLocation() to something else", "Docs/Classes/AResourceSpot/Variables/_7.html", [], "AResourceSpot");
addToContainers_variable("", "Name of unit to optionally appear in HUDs", "Docs/Classes/AResourceSpot/Variables/_8.html", [], "AResourceSpot");
addToContainers_variable("", "Image to appear on HUDs when selecting this. Can be left null", "Docs/Classes/AResourceSpot/Variables/_9.html", [], "AResourceSpot");
addToContainers_variable("", "An map holding the closest resource depot to this for each player", "Docs/Classes/AResourceSpot/Variables/_10.html", [], "AResourceSpot");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AResourceSpot/Variables/_11.html", [], "AResourceSpot");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/AResourceSpot/Variables/_12.html", [], "AResourceSpot");
addToContainers_variable("", "Reference to local players faction info", "Docs/Classes/AResourceSpot/Variables/_13.html", [], "AResourceSpot");
addToContainers_variable("bIsLocalPlayerObserver", "If true then local player is an observer, not a player", "Docs/Classes/AResourceSpot/Variables/bIsLocalPlayerObserver.html", ["is", "local", "player", "observer"], "AResourceSpot");
addToContainers_variable("bIsMouseHovering", "True if mouse is hovering over this", "Docs/Classes/AResourceSpot/Variables/bIsMouseHovering.html", ["is", "mouse", "hovering"], "AResourceSpot");
addToContainers_variable("CurrentAmount", "How many resources still collectable from spot", "Docs/Classes/AResourceSpot/Variables/CurrentAmount.html", ["current", "amount"], "AResourceSpot");
addToContainers_variable("", "Queue of collectors waiting to collect from this. Last = front of queue = collector collecting from here right now", "Docs/Classes/AResourceSpot/Variables/_14.html", [], "AResourceSpot");
addToContainers_variable("SelectionDecalInfo", "Reference to selection decal info ", "Docs/Classes/AResourceSpot/Variables/SelectionDecalInfo.html", ["selection", "decal", "info"], "AResourceSpot");
addToContainers_variable("", "Dummy attributes to pass to HUD. This struct may have many unneeded variables - could try going one less in the heirarchy", "Docs/Classes/AResourceSpot/Variables/_15.html", [], "AResourceSpot");
addToContainers_class("ARTSPlayerStart", "RTS player start implementation Haven\'t thought about this fully but could probably use the default player start class since it provides a ID tag in the form of an FName", "Docs/Classes/ARTSPlayerStart/ARTSPlayerStart.html", ["r", "t", "s", "player", "start"], "");
addToContainers_function("ARTSPlayerStart", "", "Docs/Classes/ARTSPlayerStart/Functions/ARTSPlayerStart.html", ["r", "t", "s", "player", "start"], "ARTSPlayerStart");
addToContainers_variable("UniqueID", "Unique ID to easily identify", "Docs/Classes/ARTSPlayerStart/Variables/UniqueID.html", ["unique", "i", "d"], "ARTSPlayerStart");
addToContainers_class("AAbilityBase", "This class should be overridden. It is used to create effects of when context buttons are clicked, such as calling down an artillery strike or healing an ally. It is very basic. All functionaility is left to the user to implement. Some notes though: This is a manager/info type class - only one effect actor is spawned for every type of effect. This means using things like GetActorLocation() within a class deriving from this is not useful. Instead a struct for each active effect is used. This stores state for each instance of the effect active. If you need more state info then create a custom struct for your custom effect. See ArtilleryStrike.h for an example. Because of this, no actors are spawned during gameplay. \"Spawn\" behavior should be implemented inside Server_Start/Client_Start. Effects do not replicate. If the effect has random behavior then a random number seed can be passed to clients by saving the return value of Sever_Start. Otherwise you can ignore it =============================================================================================== ----------------------------------------------------------------------------------------------- A non-comprehensive list of things you cannot do with abilities: - put another ability on cooldown (similar to counterspell in WoW) - teleportation effects ----------------------------------------------------------------------------------------------- =============================================================================================== List of things already checked by PC and do not need to be in the IsUsable_ functions: - whether ability is on cooldown - whether target is not null, valid, the right affiliation and whether they are ourself - whether target is the right targeting type - maybe some other stuff TODO inherit from UObject instead of AInfo since not replicated?", "Docs/Classes/AAbilityBase/AAbilityBase.html", ["ability", "base"], "");
addToContainers_function("AAbilityBase", "", "Docs/Classes/AAbilityBase/Functions/AAbilityBase.html", ["ability", "base"], "AAbilityBase");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AAbilityBase/Variables/.html", [], "AAbilityBase");
addToContainers_variable("bHasMultipleOutcomes", "Whether the ability has multiple outcomes that we should tell the client about. This excludes hits on AoE abilities False = save 1 byte", "Docs/Classes/AAbilityBase/Variables/bHasMultipleOutcomes.html", ["has", "multiple", "outcomes"], "AAbilityBase");
addToContainers_variable("bCallAoEStartFunction", "Whether this ability has some kind of AoE effect and the result of what is hits would like to be sent across the wire Example of true: ghost EMP Example of false: ghost cloaking, ghost snipe Currently I have not implemented any kind of persistent AoE behavior e.g. an ability that every second deals 500 damage to stuff within 500 range for 6 seconds. For this there will need to be an RPC or something to handle this", "Docs/Classes/AAbilityBase/Variables/bCallAoEStartFunction.html", ["call", "ao", "e", "start", "function"], "AAbilityBase");
addToContainers_variable("bAoEHitsHaveMultipleOutcomes", "This is only relevant if bCallAoEStartFunction is true. Whether there is more than one outcome to each hit selectable", "Docs/Classes/AAbilityBase/Variables/bAoEHitsHaveMultipleOutcomes.html", ["ao", "e", "hits", "have", "multiple", "outcomes"], "AAbilityBase");
addToContainers_variable("bRequiresTargetOtherThanSelf", "If true the server will send a target for the ability. If the user is always the target e.g. it\'s a self heal, self buff, etc type ability then you can turn this off Example of true: ghost snipe Example of false: ghost cloaking, ghost EMP", "Docs/Classes/AAbilityBase/Variables/bRequiresTargetOtherThanSelf.html", ["requires", "target", "other", "than", "self"], "AAbilityBase");
addToContainers_variable("bRequiresLocation", "Whether we need to send the location of the ability. We always send the user, so if the user\'s location is enough then you can turn this off. Example of true: ghost EMP Example of false: ghost cloaking, ghost snipe", "Docs/Classes/AAbilityBase/Variables/bRequiresLocation.html", ["requires", "location"], "AAbilityBase");
addToContainers_variable("bHasRandomBehavior", "Whether this ability has random behavior, excluding random damage amounts. If only damage amounts are random then you can safely turn this off to save some bandwidth.", "Docs/Classes/AAbilityBase/Variables/bHasRandomBehavior.html", ["has", "random", "behavior"], "AAbilityBase");
addToContainers_variable("bRequiresTickCount", "This is currently only needed by abilities that modify selectable resources (mana)", "Docs/Classes/AAbilityBase/Variables/bRequiresTickCount.html", ["requires", "tick", "count"], "AAbilityBase");
addToContainers_class("AAbility_AoEBuffOrDebuff", "Applies a buff or debuff to selectables in an area of effect", "Docs/Classes/AAbility_AoEBuffOrDebuff/AAbility_AoEBuffOrDebuff.html", ["ability_", "ao", "e", "buff", "or", "debuff"], "");
addToContainers_function("AAbility_AoEBuffOrDebuff", "", "Docs/Classes/AAbility_AoEBuffOrDebuff/Functions/AAbility_AoEBuffOrDebuff.html", ["ability_", "ao", "e", "buff", "or", "debuff"], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether to apply a static type buff/debuff or a tickable type buff/debuff", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_1.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_2.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Area of effect", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_3.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether it affects enemies", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_4.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether it affects friendlies. Note if this and bCanHitEnemies are both false then this ability cannot hit anything!", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_5.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether it affects flying units", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_6.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_class("AAbility_AoEDamage", "Deals damage in an area of effect.", "Docs/Classes/AAbility_AoEDamage/AAbility_AoEDamage.html", ["ability_", "ao", "e", "damage"], "");
addToContainers_function("AAbility_AoEDamage", "", "Docs/Classes/AAbility_AoEDamage/Functions/AAbility_AoEDamage.html", ["ability_", "ao", "e", "damage"], "AAbility_AoEDamage");
addToContainers_variable("", "Radius", "Docs/Classes/AAbility_AoEDamage/Variables/.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Base amount of damage to deal before taking into account falloff", "Docs/Classes/AAbility_AoEDamage/Variables/_1.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Type of damage to deal", "Docs/Classes/AAbility_AoEDamage/Variables/_2.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_AoEDamage/Variables/_3.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "The curve to use for damage falloff. If no curve is specified then there will be no damage falloff - every selectable hit will take full damage. X axis = range from center. Larger implies further from ability center. Axis range: [0, 1] Y axis = normalized percentage of BaseDamage to deal. Probably want range [0, 1]", "Docs/Classes/AAbility_AoEDamage/Variables/_4.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "The delay from when the ability is used to when the damage happens. 0 = instant", "Docs/Classes/AAbility_AoEDamage/Variables/_5.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Whether it can hit enemies", "Docs/Classes/AAbility_AoEDamage/Variables/_6.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Whether it can hit friendlies. Note if this and bCanHitEnemies are both false then this ability cannot hit anything!", "Docs/Classes/AAbility_AoEDamage/Variables/_7.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Whether it affects flying units", "Docs/Classes/AAbility_AoEDamage/Variables/_8.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Optional particle system to show at target location", "Docs/Classes/AAbility_AoEDamage/Variables/_9.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Optional sound to play at the target location", "Docs/Classes/AAbility_AoEDamage/Variables/_10.html", [], "AAbility_AoEDamage");
addToContainers_class("AAbility_ApplyBuffDebuffToTarget", "Applys a buff/debuff to a target", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/AAbility_ApplyBuffDebuffToTarget.html", ["ability_", "apply", "buff", "debuff", "to", "target"], "");
addToContainers_function("AAbility_ApplyBuffDebuffToTarget", "", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Functions/AAbility_ApplyBuffDebuffToTarget.html", ["ability_", "apply", "buff", "debuff", "to", "target"], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_variable("", "Whether to apply a static type buff/debuff or a tickable type buff/debuff", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Variables/.html", [], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Variables/_1.html", [], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Variables/_2.html", [], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_struct("FArtilleryStrikeInfo", "Info for a single artillery strike instance", "Docs/Structs/FArtilleryStrikeInfo/FArtilleryStrikeInfo.html", ["artillery", "strike", "info"], "");
addToContainers_function("FArtilleryStrikeInfo", "Never call this. Always call param version", "Docs/Structs/FArtilleryStrikeInfo/Functions/FArtilleryStrikeInfo.html", ["artillery", "strike", "info"], "FArtilleryStrikeInfo");
addToContainers_function("FArtilleryStrikeInfo", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/FArtilleryStrikeInfo_1.html", ["artillery", "strike", "info"], "FArtilleryStrikeInfo");
addToContainers_variable("", "", "Docs/Structs/FArtilleryStrikeInfo/Variables/.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "Number of projectiles remaining to fire", "Docs/Structs/FArtilleryStrikeInfo/Variables/_1.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("Instigator", "The actor that instigated this artillery strike", "Docs/Structs/FArtilleryStrikeInfo/Variables/Instigator.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "The team of the ability\'s user. Here so we know what collision channel to set on the projectiles", "Docs/Structs/FArtilleryStrikeInfo/Variables/_2.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "", "Docs/Structs/FArtilleryStrikeInfo/Variables/_3.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "The yaw rotation of the last projectile spawned", "Docs/Structs/FArtilleryStrikeInfo/Variables/_4.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "Timer handle to control actions", "Docs/Structs/FArtilleryStrikeInfo/Variables/_5.html", [], "FArtilleryStrikeInfo");
addToContainers_class("AAbility_ArtilleryStrike", "Optionally fires a projectile at a location. This can be a beacon or something. Then spawns several projectiles in a random fashion. It is very light on bandwidth and is intended to not be something that goes on for ages (more than 30 seconds) as clients will no doubt drift from the state it is on the server.", "Docs/Classes/AAbility_ArtilleryStrike/AAbility_ArtilleryStrike.html", ["ability_", "artillery", "strike"], "");
addToContainers_function("AAbility_ArtilleryStrike", "", "Docs/Classes/AAbility_ArtilleryStrike/Functions/AAbility_ArtilleryStrike.html", ["ability_", "artillery", "strike"], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Map from unique ID to state info about each active strike", "Docs/Classes/AAbility_ArtilleryStrike/Variables/.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_1.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Optional projectile to fire at the target location. This was added so something like a smoke beacon could be thrown at the location signalling a strike is coming. Then when this beacon projectile hits the first artillery projectile will be spawned after InitialDelay. If this is kept null then the strike will just happen after InitialDelay.", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_2.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("BeaconProjectileDamageInfo", "Damage attributes to pass in for the beacon. They have been set to do 0 damage", "Docs/Classes/AAbility_ArtilleryStrike/Variables/BeaconProjectileDamageInfo.html", ["beacon", "projectile", "damage", "info"], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Area projectiles can spawn in", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_3.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Projectiles to spawn. Things such as initial speed and friendly fire should be defined in this BP", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_4.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Whether to override the projectiles damage attributes", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_5.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Damage of each projectile", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_6.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "How many projectiles to spawn", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_7.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Delay from when action is executed to when first projectile spawns or if beacon projecitle is set the time from when it arrives at the target location", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_8.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Minimum amount of time between projectile spawn. To eliminate randomness set this equal to MaxInterval. If both are equal then all projectiles spawn at the same time", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_9.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Maximum amount of time between projectile spawn. To eliminate randomness set this equal to MinInterval. If both equal to 0 then all projectiles spawn at the same time", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_10.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "The height above spawn location to spawn projectiles from", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_11.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Optional. A curve to define how yaw rotation is applied to the spawn location of each projectile relative to the last projectile spawned. Without a curve the rotation will be a random float in the range 0 to 360. This means there is a chance projectiles can spawn close to each other which may not be desired behaviour. With a curve you can define the chances of this happening. X axis = arbitrary. A random point will be picked along the X axis and its Y value (normalized to the range 0...180, and given random sign) will be the rotation to apply to the next projectile Y axis = rotation to apply to next projectile. For clarity you may want to set the range for the Y axis to be from 0 to 180", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_12.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Just like the rotation curve but for the distance to spawn the projectile from the center. This one is not relative to the last projectile spawned though. Automatically normalized at runtime. If no curve is specified a linear curve will be used (random value from 0 to Radius, with each value equal probability). X axis = arbitrary. A random point will be picked along the X axis and its Y value (normalized to the range 0...Radius) will be the distance from center next projectile will spawn at Y axis = distance from center (mapped from [YAxisMin, YAxisMax] to [0, Radius])", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_13.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("RotationCurveMaxY", "Axis values from curves", "Docs/Classes/AAbility_ArtilleryStrike/Variables/RotationCurveMaxY.html", ["rotation", "curve", "max", "y"], "AAbility_ArtilleryStrike");
addToContainers_variable("DistanceCurveMaxY", "", "Docs/Classes/AAbility_ArtilleryStrike/Variables/DistanceCurveMaxY.html", ["distance", "curve", "max", "y"], "AAbility_ArtilleryStrike");
addToContainers_class("AAbility_BasicApplyBuffOrDebuff", "Just applies a buff or debuff to a someone. No particles or anything like that. This only works for applying buffs/debuffs to self, not to anyone else", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/AAbility_BasicApplyBuffOrDebuff.html", ["ability_", "basic", "apply", "buff", "or", "debuff"], "");
addToContainers_function("AAbility_BasicApplyBuffOrDebuff", "", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Functions/AAbility_BasicApplyBuffOrDebuff.html", ["ability_", "basic", "apply", "buff", "or", "debuff"], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_variable("", "Whether to apply a static type buff/debuff or a tickable type buff/debuff", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Variables/.html", [], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Variables/_1.html", [], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Variables/_2.html", [], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_class("AAbility_BasicSingleTargetDamage", "Deals damage to a target I basically ignored what I had done with UE4.19 and implemented this from scratch. Could look back at that version and see if there\'s anything useful there", "Docs/Classes/AAbility_BasicSingleTargetDamage/AAbility_BasicSingleTargetDamage.html", ["ability_", "basic", "single", "target", "damage"], "");
addToContainers_function("AAbility_BasicSingleTargetDamage", "", "Docs/Classes/AAbility_BasicSingleTargetDamage/Functions/AAbility_BasicSingleTargetDamage.html", ["ability_", "basic", "single", "target", "damage"], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "How much damage to deal", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "The type of damage to deal", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_1.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_2.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_3.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_4.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_5.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_class("AAbility_BuffAndDebuffRemoval", "Removes a buff/debuff", "Docs/Classes/AAbility_BuffAndDebuffRemoval/AAbility_BuffAndDebuffRemoval.html", ["ability_", "buff", "and", "debuff", "removal"], "");
addToContainers_function("AAbility_BuffAndDebuffRemoval", "", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Functions/AAbility_BuffAndDebuffRemoval.html", ["ability_", "buff", "and", "debuff", "removal"], "AAbility_BuffAndDebuffRemoval");
addToContainers_variable("", "The buff/debuff this ability removes", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Variables/.html", [], "AAbility_BuffAndDebuffRemoval");
addToContainers_variable("", "Whether BuffOrDebuffToRemove is a buff or debuff. Important to get this right", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Variables/_1.html", [], "AAbility_BuffAndDebuffRemoval");
addToContainers_variable("", "What we consider the reason the buff/debuff was removed", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Variables/_2.html", [], "AAbility_BuffAndDebuffRemoval");
addToContainers_class("AAbility_CullingBladeClone", "Deals damage to target. Amount varies based on how much health the target has.", "Docs/Classes/AAbility_CullingBladeClone/AAbility_CullingBladeClone.html", ["ability_", "culling", "blade", "clone"], "");
addToContainers_function("AAbility_CullingBladeClone", "", "Docs/Classes/AAbility_CullingBladeClone/Functions/AAbility_CullingBladeClone.html", ["ability_", "culling", "blade", "clone"], "AAbility_CullingBladeClone");
addToContainers_variable("", "Absolute value of health where behavior varies", "Docs/Classes/AAbility_CullingBladeClone/Variables/.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Damage when target is below threshold", "Docs/Classes/AAbility_CullingBladeClone/Variables/_1.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_CullingBladeClone/Variables/_2.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_CullingBladeClone/Variables/_3.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_CullingBladeClone/Variables/_4.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Damage when target is above threshold", "Docs/Classes/AAbility_CullingBladeClone/Variables/_5.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_CullingBladeClone/Variables/_6.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_CullingBladeClone/Variables/_7.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_CullingBladeClone/Variables/_8.html", [], "AAbility_CullingBladeClone");
addToContainers_class("AAbility_DamageAndRestoreMana", "- Deal damage damage to a single target. - Instigator restores some mana if they kill the target with this ability. Amount restored is based on the resource cost of the target.", "Docs/Classes/AAbility_DamageAndRestoreMana/AAbility_DamageAndRestoreMana.html", ["ability_", "damage", "and", "restore", "mana"], "");
addToContainers_function("AAbility_DamageAndRestoreMana", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/AAbility_DamageAndRestoreMana.html", ["ability_", "damage", "and", "restore", "mana"], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "The selectable resource that is restored if the target is killed", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "How much to multiply the resource by e.g. if the mineral cost of the destroyed unit is 200 and the mineral entry in here equals 0.5f then 100 mana is restored", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_1.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Populated on post edit. Here because it\'s faster iteration an array instead of a hashmap", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_2.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "How much damage to deal", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_3.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "The type of damage to deal", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_4.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_5.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional particles to spawn on the instigator", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_6.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on the instigator InstigatorParticles_Template should spawn", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_7.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional particle system template to attach to target if they are not killed", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_8.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on the target selectable the particles should try attach to.", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_9.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Particles to show on the instigator only if they successfully kill the target", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_10.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on instigator to spawn the success particles", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_11.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional particle system template to attach to target if they are killed by ability", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_12.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on the target selectable the particles should spawn at.", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_13.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional sound to play at target location when the ability does not kill the target", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_14.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional sound to play at target location when the ability kills the target", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_15.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "============================================================================================", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_16.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_17.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_18.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_19.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_class("AAbility_FinishingBlow", "Only usable on targets with health below a certain percentage Deals damage to a target.", "Docs/Classes/AAbility_FinishingBlow/AAbility_FinishingBlow.html", ["ability_", "finishing", "blow"], "");
addToContainers_function("AAbility_FinishingBlow", "", "Docs/Classes/AAbility_FinishingBlow/Functions/AAbility_FinishingBlow.html", ["ability_", "finishing", "blow"], "AAbility_FinishingBlow");
addToContainers_variable("", "Percentage of health target must be below to be able to use ability (normalized to range [0, 1] of course)", "Docs/Classes/AAbility_FinishingBlow/Variables/.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "How much damage to deal to target", "Docs/Classes/AAbility_FinishingBlow/Variables/_1.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Type of damage to deal", "Docs/Classes/AAbility_FinishingBlow/Variables/_2.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_FinishingBlow/Variables/_3.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_FinishingBlow/Variables/_4.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_FinishingBlow/Variables/_5.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_FinishingBlow/Variables/_6.html", [], "AAbility_FinishingBlow");
addToContainers_class("AAbility_ManaBurn", "Single target. Modifies target\'s selectable resource (mana) and optionally deals damage. Amount of damage dealt can be based on the amount of mana burned.", "Docs/Classes/AAbility_ManaBurn/AAbility_ManaBurn.html", ["ability_", "mana", "burn"], "");
addToContainers_function("AAbility_ManaBurn", "", "Docs/Classes/AAbility_ManaBurn/Functions/AAbility_ManaBurn.html", ["ability_", "mana", "burn"], "AAbility_ManaBurn");
addToContainers_variable("", "The selectable resource to burn", "Docs/Classes/AAbility_ManaBurn/Variables/.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "The type of message to show if the target does not have the selectable resource type we are trying to modify. My notes: maybe this could be defined somewhere where we map ESelectableResourceType to EAbilityRequirement. For now users have to do it manually", "Docs/Classes/AAbility_ManaBurn/Variables/_1.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Amount of selectable resource to burn. Negative values = target gains selectable resource", "Docs/Classes/AAbility_ManaBurn/Variables/_2.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "How damage is calculated", "Docs/Classes/AAbility_ManaBurn/Variables/_3.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Percentage of selectable resource amount drained to deal in damage", "Docs/Classes/AAbility_ManaBurn/Variables/_4.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "If using absolute damage the amount to deal", "Docs/Classes/AAbility_ManaBurn/Variables/_5.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Type of damage to deal", "Docs/Classes/AAbility_ManaBurn/Variables/_6.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_ManaBurn/Variables/_7.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_ManaBurn/Variables/_8.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_ManaBurn/Variables/_9.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_ManaBurn/Variables/_10.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "============================================================================================", "Docs/Classes/AAbility_ManaBurn/Variables/_11.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "", "Docs/Classes/AAbility_ManaBurn/Variables/_12.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "", "Docs/Classes/AAbility_ManaBurn/Variables/_13.html", [], "AAbility_ManaBurn");
addToContainers_class("AAbility_Nuke", "- Launches a ALeaveThenComeBackProjectile. - Shows particles at launch site. - Plays sound at launch site. - Notifies players of launch. - Reveals fog at target location. - Spawns decal at target location.", "Docs/Classes/AAbility_Nuke/AAbility_Nuke.html", ["ability_", "nuke"], "");
addToContainers_function("AAbility_Nuke", "", "Docs/Classes/AAbility_Nuke/Functions/AAbility_Nuke.html", ["ability_", "nuke"], "AAbility_Nuke");
addToContainers_variable("PoolingManager", "Reference to object pooling manager", "Docs/Classes/AAbility_Nuke/Variables/PoolingManager.html", ["pooling", "manager"], "AAbility_Nuke");
addToContainers_variable("", "Socket that missle is launched from", "Docs/Classes/AAbility_Nuke/Variables/.html", [], "AAbility_Nuke");
addToContainers_variable("", "Projectile to use as nuke for when it is launched.", "Docs/Classes/AAbility_Nuke/Variables/_1.html", [], "AAbility_Nuke");
addToContainers_variable("", "Particles to play at launch location e.g. perhaps lots of smoke or something", "Docs/Classes/AAbility_Nuke/Variables/_2.html", [], "AAbility_Nuke");
addToContainers_variable("", "The sound to play in the world at the launch site", "Docs/Classes/AAbility_Nuke/Variables/_3.html", [], "AAbility_Nuke");
addToContainers_variable("", "If true then missle launches from the ability\'s target. If false then the missle launches from the ability instigator. If the button for this ability resides on the silo\'s action bar then this can be false. If the button for this ability resides on a unit similar to terran\'s ghosts then this could be true and you would pass in the silo as the target for the ability to make the projectile launch from that silo.", "Docs/Classes/AAbility_Nuke/Variables/_4.html", [], "AAbility_Nuke");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/AAbility_Nuke/Variables/_5.html", [], "AAbility_Nuke");
addToContainers_variable("", "Whether to override the damage values defined on the projectile", "Docs/Classes/AAbility_Nuke/Variables/_6.html", [], "AAbility_Nuke");
addToContainers_variable("", "AoE damage properties of the projectile if choosing to override them", "Docs/Classes/AAbility_Nuke/Variables/_7.html", [], "AAbility_Nuke");
addToContainers_variable("", "Decal to spawn at the target location", "Docs/Classes/AAbility_Nuke/Variables/_8.html", [], "AAbility_Nuke");
addToContainers_variable("", "The delay from when ability is used to when the target location decal should spawn", "Docs/Classes/AAbility_Nuke/Variables/_9.html", [], "AAbility_Nuke");
addToContainers_struct("FOngoingAoEDamageInstance", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FOngoingAoEDamageInstance/FOngoingAoEDamageInstance.html", ["ongoing", "ao", "e", "damage", "instance"], "");
addToContainers_function("FOngoingAoEDamageInstance", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/FOngoingAoEDamageInstance.html", ["ongoing", "ao", "e", "damage", "instance"], "FOngoingAoEDamageInstance");
addToContainers_function("FOngoingAoEDamageInstance", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/FOngoingAoEDamageInstance_1.html", ["ongoing", "ao", "e", "damage", "instance"], "FOngoingAoEDamageInstance");
addToContainers_variable("AbilityEpicenter", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/AbilityEpicenter.html", ["ability", "epicenter"], "FOngoingAoEDamageInstance");
addToContainers_variable("AbilityInstigator", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/AbilityInstigator.html", ["ability", "instigator"], "FOngoingAoEDamageInstance");
addToContainers_variable("TimerHandle_DoDamageTick", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/TimerHandle_DoDamageTick.html", ["timer", "handle_", "do", "damage", "tick"], "FOngoingAoEDamageInstance");
addToContainers_variable("NumTicksRemaining", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/NumTicksRemaining.html", ["num", "ticks", "remaining"], "FOngoingAoEDamageInstance");
addToContainers_variable("InstigatorsTeam", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/InstigatorsTeam.html", ["instigators", "team"], "FOngoingAoEDamageInstance");
addToContainers_class("AAbility_OngoingAoEDamage", "Deals damage over time in an area of effect. By default does not use use a world location so not ideal for an ability that targets a world location.", "Docs/Classes/AAbility_OngoingAoEDamage/AAbility_OngoingAoEDamage.html", ["ability_", "ongoing", "ao", "e", "damage"], "");
addToContainers_function("AAbility_OngoingAoEDamage", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/AAbility_OngoingAoEDamage.html", ["ability_", "ongoing", "ao", "e", "damage"], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Maps unique ID to info about the state of the ability", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether the effect attaches to the instigator. If true the ability \"follows\" its user. If false it will stay in the same spot which is the place it was used at, and if the user moves it will not move with them", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_1.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "The time between when this ability is used and the first damage tick happens. 0 = no delay", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_2.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "How many damage ticks for this ability", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_3.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Time between damage ticks", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_4.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Radius", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_5.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "How much base damage is dealt each tick", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_6.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_7.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_8.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "The curve to use for damage falloff. If no curve is specified then there will be no damage falloff - every selectable hit will take full damage. X axis = range from center. Larger implies further from ability center. Axis range: [0, 1] Y axis = normalized percentage of BaseDamage to deal. Probably want range [0, 1]", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_9.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether it can hit enemies", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_10.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether it can hit friendlies. Note if this and bCanHitEnemies are both false then this ability cannot hit anything!", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_11.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether this ability can damage the instigator", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_12.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether it can hit flying units", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_13.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Optional particle system to show at target location", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_14.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "The part of the instigator that the effect\'s particles attaches/spawns at. EditCondition = (TargetLocationParticles != nullptr)", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_15.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Optional sound to play at the target location", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_16.html", [], "AAbility_OngoingAoEDamage");
addToContainers_class("AAbility_Scan", "Reveals some fog of war similar to Terran\'s scan or C&C generals USA scan. Can optionally reveal stealthed units too. Also: - plays a sound - spawns a decal at target location - spawns a particle emitter at target location", "Docs/Classes/AAbility_Scan/AAbility_Scan.html", ["ability_", "scan"], "");
addToContainers_function("AAbility_Scan", "", "Docs/Classes/AAbility_Scan/Functions/AAbility_Scan.html", ["ability_", "scan"], "AAbility_Scan");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/AAbility_Scan/Variables/.html", [], "AAbility_Scan");
addToContainers_variable("", "Sound to play at target location", "Docs/Classes/AAbility_Scan/Variables/_1.html", [], "AAbility_Scan");
addToContainers_variable("", "Decal to draw at the location", "Docs/Classes/AAbility_Scan/Variables/_2.html", [], "AAbility_Scan");
addToContainers_variable("", "Particle system to show at the location. Probably don\'t obey fog of war", "Docs/Classes/AAbility_Scan/Variables/_3.html", [], "AAbility_Scan");
addToContainers_variable("", "Worst affiliation that can hear the sound produced by the scan. e.g. Owned = only instigator can hear it Allied = instigator and teammates can hear it Hostile = everyone can hear it", "Docs/Classes/AAbility_Scan/Variables/_4.html", [], "AAbility_Scan");
addToContainers_variable("", "Worst affiliation that can see the decal/particles produced by the scan.", "Docs/Classes/AAbility_Scan/Variables/_5.html", [], "AAbility_Scan");
addToContainers_class("AInfantryController", "Class that controls behavior of infantry. Has many editable properties that will need to change as your pawn changes. Some how tos: Change movement speed: UCharacterMovementComponent::MaxWalkSpeed Enable/disable acceleration: UCharacterMovementComponent::bRequestedMoveUseAcceleration Change movement acceleration: UCharacterMovementComponent::MaxAcceleration Change rate pawn turns: UCharacterMovementComponent::RotationRate.Z for yaw, .Y or .X for pitch can\'t remember which one", "Docs/Classes/AInfantryController/AInfantryController.html", ["infantry", "controller"], "");
addToContainers_function("AInfantryController", "", "Docs/Classes/AInfantryController/Functions/AInfantryController.html", ["infantry", "controller"], "AInfantryController");
addToContainers_variable("LastCompletedMoveResult", "Path following result of the last move completed", "Docs/Classes/AInfantryController/Variables/LastCompletedMoveResult.html", ["last", "completed", "move", "result"], "AInfantryController");
addToContainers_variable("TickFunctions", "Functions for what to do on AI ticks based on state", "Docs/Classes/AInfantryController/Variables/TickFunctions.html", ["tick", "functions"], "AInfantryController");
addToContainers_variable("", "Once aquired and attacked target at least once, Range * RangeLenience = range this unit can keep attacking enemy from. e.g. RangeLenience = 1.1 means the enemy can walk outside Range by 10% and still be attacked if they were being attacked previously. Prevents very small movements from causing attacks to stop. If changing targets then this lenience doesn\'t apply until the unit has attacked that new target at least once", "Docs/Classes/AInfantryController/Variables/.html", [], "AInfantryController");
addToContainers_variable("", "What to add to acceptance radius when making a move. Want this negative to make unit try and move closer. Problem is if it makes the acceptance radius too small and the move is to another actor and not the ground then the move will not happen at all because pathfinding will not allow it", "Docs/Classes/AInfantryController/Variables/_1.html", [], "AInfantryController");
addToContainers_variable("", "For abilities that require world location", "Docs/Classes/AInfantryController/Variables/_2.html", [], "AInfantryController");
addToContainers_variable("", "For building targeting abilities (e.g. engineers, spies in C&C)", "Docs/Classes/AInfantryController/Variables/_3.html", [], "AInfantryController");
addToContainers_variable("", "For moves to enter building garrisons", "Docs/Classes/AInfantryController/Variables/_4.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to resource spots", "Docs/Classes/AInfantryController/Variables/_5.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to resource depots", "Docs/Classes/AInfantryController/Variables/_6.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to locations where building foundations will be placed", "Docs/Classes/AInfantryController/Variables/_7.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to construction sites", "Docs/Classes/AInfantryController/Variables/_8.html", [], "AInfantryController");
addToContainers_variable("", "--------------------------------------------------------------------------------------", "Docs/Classes/AInfantryController/Variables/_9.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_10.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_11.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_12.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_13.html", [], "AInfantryController");
addToContainers_variable("", "How close enemies have to be to get \'picked up\' by this unit when in a state that tries to find enemies. This can be larger than units sight radius but unit will still not pick up any units hidden in fog - they would need a friendly to reveal that fog for them. Also this is the radius of a capsule sweep so you should not make it an uneccessarily large number", "Docs/Classes/AInfantryController/Variables/_14.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for attack moves", "Docs/Classes/AInfantryController/Variables/_15.html", [], "AInfantryController");
addToContainers_variable("", "How far away from encounter point unit will go before giving up persuing enemy and returning to complete previous command. 0 means will never move", "Docs/Classes/AInfantryController/Variables/_16.html", [], "AInfantryController");
addToContainers_variable("", "How far away from encounter point unit will go before giving up persuing enemy and returning to complete previous command. 0 means will never move", "Docs/Classes/AInfantryController/Variables/_17.html", [], "AInfantryController");
addToContainers_variable("", "If unit is idle, the distance from encounter point unit will go before considering looking for another target. If no closer targets than current target then unit will continue chasing and persuing it. Setting this to 0 basically means that if unit\'s current target is out of range then they will TRY to switch to another target, but if this is positive then they will chase for a bit before trying to find other targets", "Docs/Classes/AInfantryController/Variables/_18.html", [], "AInfantryController");
addToContainers_variable("", "Same as above except for attack moves.", "Docs/Classes/AInfantryController/Variables/_19.html", [], "AInfantryController");
addToContainers_variable("", "When was previously idle and are now returning to leash location, how long to wait before choosing to aquire targets again. 0 means do not wait at all. Less than 0 implies do not aquire any targets until have returned to leash location", "Docs/Classes/AInfantryController/Variables/_20.html", [], "AInfantryController");
addToContainers_variable("", "Same as above except for attack moves", "Docs/Classes/AInfantryController/Variables/_21.html", [], "AInfantryController");
addToContainers_variable("AccumulatedTickBehaviorTime", "Time towards calling TickAI", "Docs/Classes/AInfantryController/Variables/AccumulatedTickBehaviorTime.html", ["accumulated", "tick", "behavior", "time"], "AInfantryController");
addToContainers_variable("TimeTillAttackResets", "Time towards resetting attack. If less than or equal to 0 then unit can attack", "Docs/Classes/AInfantryController/Variables/TimeTillAttackResets.html", ["time", "till", "attack", "resets"], "AInfantryController");
addToContainers_variable("", "The rate at which potentially heavy behavior operations happen", "Docs/Classes/AInfantryController/Variables/_22.html", [], "AInfantryController");
addToContainers_variable("", "Reference to player state that owns unit", "Docs/Classes/AInfantryController/Variables/_23.html", [], "AInfantryController");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AInfantryController/Variables/_24.html", [], "AInfantryController");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/AInfantryController/Variables/_25.html", [], "AInfantryController");
addToContainers_variable("", "Faction info of PS", "Docs/Classes/AInfantryController/Variables/_26.html", [], "AInfantryController");
addToContainers_variable("", "Reference to unit this is controlling", "Docs/Classes/AInfantryController/Variables/_27.html", [], "AInfantryController");
addToContainers_variable("CharacterMovement", "Reference to unit\'s movement component", "Docs/Classes/AInfantryController/Variables/CharacterMovement.html", ["character", "movement"], "AInfantryController");
addToContainers_variable("UnitState", "Unit state", "Docs/Classes/AInfantryController/Variables/UnitState.html", ["unit", "state"], "AInfantryController");
addToContainers_variable("AnimStateForBehavior", "Animation unit is playing for behavior purposes only - may not always be strictly accurate", "Docs/Classes/AInfantryController/Variables/AnimStateForBehavior.html", ["anim", "state", "for", "behavior"], "AInfantryController");
addToContainers_variable("ClickLocation", "Where the player clicked when giving a command if that click was not on a selectable", "Docs/Classes/AInfantryController/Variables/ClickLocation.html", ["click", "location"], "AInfantryController");
addToContainers_variable("LeashLocation", "Location of unit when it encounters an enemy during an attack move command or while standing idle. It is the location the unit will return to at some point when it decides to stop chasing target or there are no more targets nearby", "Docs/Classes/AInfantryController/Variables/LeashLocation.html", ["leash", "location"], "AInfantryController");
addToContainers_variable("EncounterPoint", "Location of unit when another unit was aquired", "Docs/Classes/AInfantryController/Variables/EncounterPoint.html", ["encounter", "point"], "AInfantryController");
addToContainers_variable("TeamVisInfo", "Visibility info for the team this AI controller is on", "Docs/Classes/AInfantryController/Variables/TeamVisInfo.html", ["team", "vis", "info"], "AInfantryController");
addToContainers_variable("", "The selectable this is currently trying to attack", "Docs/Classes/AInfantryController/Variables/_28.html", [], "AInfantryController");
addToContainers_variable("AttackTargetBoundsLength", "The length of the bounds of AttackTarget. Used in distance calculations because we measure from the edge of our bounds to the edge of their bounds to see if we are in range", "Docs/Classes/AInfantryController/Variables/AttackTargetBoundsLength.html", ["attack", "target", "bounds", "length"], "AInfantryController");
addToContainers_variable("", "Selectable who was fired at last. Used to know if range lenience should be used", "Docs/Classes/AInfantryController/Variables/_29.html", [], "AInfantryController");
addToContainers_variable("", "Target of a targeting context action. Also will be used for special building targeting abilities", "Docs/Classes/AInfantryController/Variables/_30.html", [], "AInfantryController");
addToContainers_variable("ContextActionTargetBoundsLength", "Like AttackTargetBoundsLength but for ContextActionTarget", "Docs/Classes/AInfantryController/Variables/ContextActionTargetBoundsLength.html", ["context", "action", "target", "bounds", "length"], "AInfantryController");
addToContainers_variable("bIgnoreLookingAtFocus", "If true then will not rotate to face focus during UpdateControlRotation", "Docs/Classes/AInfantryController/Variables/bIgnoreLookingAtFocus.html", ["ignore", "looking", "at", "focus"], "AInfantryController");
addToContainers_variable("bUnitHasAttack", "Whether the controlled unit has an attack or not. High Templars in SCII are an example of a unit that does not have an attack", "Docs/Classes/AInfantryController/Variables/bUnitHasAttack.html", ["unit", "has", "attack"], "AInfantryController");
addToContainers_variable("bCanUnitBuildBuildings", "Whether the controlled unit has the ability to construct buildings. Does not mean unit can repair them though", "Docs/Classes/AInfantryController/Variables/bCanUnitBuildBuildings.html", ["can", "unit", "build", "buildings"], "AInfantryController");
addToContainers_variable("TimerHandle_TargetAquiring", "Timer handle that if active means we cannot aquire targets", "Docs/Classes/AInfantryController/Variables/TimerHandle_TargetAquiring.html", ["timer", "handle_", "target", "aquiring"], "AInfantryController");
addToContainers_variable("bIsTargetStillInRange", "True if current target was attacked and has not moved out of Range * Leneince", "Docs/Classes/AInfantryController/Variables/bIsTargetStillInRange.html", ["is", "target", "still", "in", "range"], "AInfantryController");
addToContainers_variable("DoOnMoveComplete", "Pointer to function. Called in OnMoveCompleted", "Docs/Classes/AInfantryController/Variables/DoOnMoveComplete.html", ["do", "on", "move", "complete"], "AInfantryController");
addToContainers_variable("PendingContextAction", "Pointer to function. Sets the action to be carried out when context action animation reaches anim notify", "Docs/Classes/AInfantryController/Variables/PendingContextAction.html", ["pending", "context", "action"], "AInfantryController");
addToContainers_variable("PendingContextActionType", "The type of action to carry out when anim notify triggers casted to a uint8. This will either be a EContextButton or EBuildingTargetingAbility", "Docs/Classes/AInfantryController/Variables/PendingContextActionType.html", ["pending", "context", "action", "type"], "AInfantryController");
addToContainers_variable("PendingAbilityUsageCase", "How the pending context action type is being carried out", "Docs/Classes/AInfantryController/Variables/PendingAbilityUsageCase.html", ["pending", "ability", "usage", "case"], "AInfantryController");
addToContainers_variable("PendingAbilityAuxilleryData", "When pending ability usage case is selectable\'s inventory then we store the inventory slot index here", "Docs/Classes/AInfantryController/Variables/PendingAbilityAuxilleryData.html", ["pending", "ability", "auxillery", "data"], "AInfantryController");
addToContainers_variable("PendingAbilityMoreAuxilleryData", "One use for this is to store the inventory item type when a use item type action is pending", "Docs/Classes/AInfantryController/Variables/PendingAbilityMoreAuxilleryData.html", ["pending", "ability", "more", "auxillery", "data"], "AInfantryController");
addToContainers_variable("", "Resource spot this unit is assigned to or null if none", "Docs/Classes/AInfantryController/Variables/_31.html", [], "AInfantryController");
addToContainers_variable("", "Depot that unit is returning to to drop off resources. Will get assigned every time resource collecting from spot completes", "Docs/Classes/AInfantryController/Variables/_32.html", [], "AInfantryController");
addToContainers_variable("TimerHandle_ResourceGathering", "Timer handle to monitor when resource gathering is complete", "Docs/Classes/AInfantryController/Variables/TimerHandle_ResourceGathering.html", ["timer", "handle_", "resource", "gathering"], "AInfantryController");
addToContainers_variable("", "Building to work on", "Docs/Classes/AInfantryController/Variables/_33.html", [], "AInfantryController");
addToContainers_variable("FoundationType", "The type of building unit is going to put foundations down for when it reaches correct location", "Docs/Classes/AInfantryController/Variables/FoundationType.html", ["foundation", "type"], "AInfantryController");
addToContainers_variable("FoundationRotation", "Rotation to place foundation when at site", "Docs/Classes/AInfantryController/Variables/FoundationRotation.html", ["foundation", "rotation"], "AInfantryController");
addToContainers_variable("Range", "", "Docs/Classes/AInfantryController/Variables/Range.html", [], "AInfantryController");
addToContainers_variable("LenienceRange", "", "Docs/Classes/AInfantryController/Variables/LenienceRange.html", ["lenience", "range"], "AInfantryController");
addToContainers_variable("AttackFacingRotationRequirement", "", "Docs/Classes/AInfantryController/Variables/AttackFacingRotationRequirement.html", ["attack", "facing", "rotation", "requirement"], "AInfantryController");
addToContainers_class("UBuildingAnimInstance", "Anim instance to use for buildings", "Docs/Classes/UBuildingAnimInstance/UBuildingAnimInstance.html", ["building", "anim", "instance"], "");
addToContainers_variable("", "Owner", "Docs/Classes/UBuildingAnimInstance/Variables/.html", [], "UBuildingAnimInstance");
addToContainers_class("UInfantryAnimInstance", "Anim instance infantry should use. Using this class allows use of custom anim notifies. Inside the BP\'s anim graph you will need to make a blueprint of this and add a \"Slot \'Default Slot\'\" node and connect its output to the final animation pose node", "Docs/Classes/UInfantryAnimInstance/UInfantryAnimInstance.html", ["infantry", "anim", "instance"], "");
addToContainers_function("UInfantryAnimInstance", "", "Docs/Classes/UInfantryAnimInstance/Functions/UInfantryAnimInstance.html", ["infantry", "anim", "instance"], "UInfantryAnimInstance");
addToContainers_variable("", "Reference to owning pawn", "Docs/Classes/UInfantryAnimInstance/Variables/.html", [], "UInfantryAnimInstance");
addToContainers_class("UBuildingAttackComponent_SK", "The same as UBuildingAttackComponent_SM except this is for a skeletal mesh instead of a static mesh. Also optionally you can use idle and attack animations. This class is very similar to the SM version except it can have animations.", "Docs/Classes/UBuildingAttackComponent_SK/UBuildingAttackComponent_SK.html", ["building", "attack", "component_", "s", "k"], "");
addToContainers_function("UBuildingAttackComponent_SK", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/UBuildingAttackComponent_SK.html", ["building", "attack", "component_", "s", "k"], "UBuildingAttackComponent_SK");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Particle system component that shows the attack warmup particles", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_1.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Audio component that plays the attack warmup sound", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_2.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_3.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Multiplies attack range. The result is used to check if an actor that has already been aquired as a target is in range i.e. once a target has been aquired they can go out of range a bit and still be shot at", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_4.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_5.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("TeamVisibilityInfo", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TeamVisibilityInfo.html", ["team", "visibility", "info"], "UBuildingAttackComponent_SK");
addToContainers_variable("Target", "The actor this building has aquired as a target to attack", "Docs/Classes/UBuildingAttackComponent_SK/Variables/Target.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("OwningBuilding", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackComponent_SK");
addToContainers_variable("GS", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/GS.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("PoolingManager", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/PoolingManager.html", ["pooling", "manager"], "UBuildingAttackComponent_SK");
addToContainers_variable("TargetingTraceDelegate", "Delegate that fires when an async sweep for targets within range finishes", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TargetingTraceDelegate.html", ["targeting", "trace", "delegate"], "UBuildingAttackComponent_SK");
addToContainers_variable("TaskManagerBucket", "Where in UHeavyTaskManager::BuildingAttackComps this object is stored at", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TaskManagerBucket.html", ["task", "manager", "bucket"], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Optional idle animation. Should be looping", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_6.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Optional animation for attack. Should have a section at the end of it that loops idle anim but only if you\'re actually want an idle anim. You will probably want to look at the anim notifies on the anim instance class for this structure and may want to put some on this anim", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_7.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "If true then it is assumed AttackAnim includes your attack warmup period if there is one.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_8.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Time it takes to prepare attack. Use 0 to attack as soon as possible. Probably also belongs on FAttackAttributes. e.g. obelisk of light takes like 5 seconds This + FAttackAttributes::AttackRate add up to give the total time between attacks e.g. If FAttackAttributes::AttackRate is 2 and this is 3 then it\'s a total of 5 seconds between attacks. My notes: checks to see if warmup should stop happen every time a sweep result comes in", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_9.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "World time when attack warmup started or when AttackAnim started playing -1.f means not warming up or anim not playing", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_10.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("TimeSpentWarmingUpAttack", "This might only be relevant if the attack warmup does not use an animation", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TimeSpentWarmingUpAttack.html", ["time", "spent", "warming", "up", "attack"], "UBuildingAttackComponent_SK");
addToContainers_variable("Team", "The team this structure is on", "Docs/Classes/UBuildingAttackComponent_SK/Variables/Team.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "How the structure selects it\'s target", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_11.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Whether the structure likes selecting targets closer or further away. Will only be relevant if TargetAquireMethod considers distance.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_12.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "If true then the building will not change targets until it\'s current target becomes untargetable. If false then everytime a sweep result comes in it will reevaluate it\'s target. Better performance if this is true.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_13.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Attack preperation particles. Should not be looping. Probably belong on FAttackAttributes", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_14.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("QueryParams", "Query params this structure will use when sweeping for targets", "Docs/Classes/UBuildingAttackComponent_SK/Variables/QueryParams.html", ["query", "params"], "UBuildingAttackComponent_SK");
addToContainers_variable("", "How much yaw can be off by for structure to fire at target. 180 = can attack at targets at any angle. If this is <180 then the the building will need a rotating base to attack from every angle. If it does not have a rotating base then it will have a blind spot behind it so the rotation of the building when it is placed matters quite a bit.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_15.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("AttackCompUniqueID", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/AttackCompUniqueID.html", ["attack", "comp", "unique", "i", "d"], "UBuildingAttackComponent_SK");
addToContainers_variable("RotatingBase", "The yaw rotating turret base this is a child of. Can be null if not attached to one", "Docs/Classes/UBuildingAttackComponent_SK/Variables/RotatingBase.html", ["rotating", "base"], "UBuildingAttackComponent_SK");
addToContainers_class("UBuildingAttackComponent_SM", "A component that goes on a building. It can attack. This version is for a static mesh and is for components that do not need to rotate their pitch. It can optionally be added as a child of a IBuildingAttackComp_TurretsBase in which case the base will rotate the yaw and this too. Couple examples of what structures could be made with this: - nod obelisk of light - nod turret if you attach this to a rotatable base (UBuildingAttackCompStructBase_SM/SK) If you need animations then use UBuildingAttackComponent_SK If you want a structure that can also change it\'s pitch then use a UPitchChangeBuildingAttackComp_SM/SK", "Docs/Classes/UBuildingAttackComponent_SM/UBuildingAttackComponent_SM.html", ["building", "attack", "component_", "s", "m"], "");
addToContainers_function("UBuildingAttackComponent_SM", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/UBuildingAttackComponent_SM.html", ["building", "attack", "component_", "s", "m"], "UBuildingAttackComponent_SM");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Particle system component that shows the attack warmup particles", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_1.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Audio component that plays the attack warmup sound", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_2.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_3.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Multiplies attack range. The result is used to check if an actor that has already been aquired as a target is in range i.e. once a target has been aquired they can go out of range a bit and still be shot at", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_4.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_5.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("TeamVisibilityInfo", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TeamVisibilityInfo.html", ["team", "visibility", "info"], "UBuildingAttackComponent_SM");
addToContainers_variable("Target", "The actor this building has aquired as a target to attack", "Docs/Classes/UBuildingAttackComponent_SM/Variables/Target.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("OwningBuilding", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackComponent_SM");
addToContainers_variable("GS", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/GS.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("PoolingManager", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/PoolingManager.html", ["pooling", "manager"], "UBuildingAttackComponent_SM");
addToContainers_variable("TargetingTraceDelegate", "Delegate that fires when an async sweep for targets within range finishes", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TargetingTraceDelegate.html", ["targeting", "trace", "delegate"], "UBuildingAttackComponent_SM");
addToContainers_variable("TaskManagerBucket", "Where in UHeavyTaskManager::BuildingAttackComps this object is stored at", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TaskManagerBucket.html", ["task", "manager", "bucket"], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Time it takes to prepare attack. Use 0 to attack as soon as possible. Probably also belongs on FAttackAttributes. e.g. obelisk of light takes like 5 seconds This + FAttackAttributes::AttackRate add up to give the total time between attacks e.g. If FAttackAttributes::AttackRate is 2 and this is 3 then it\'s a total of 5 seconds between attacks. My notes: checks to see if warmup should stop happen every time a sweep result comes in", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_6.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "World time when attack warmup started. -1.f means not warming up", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_7.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("TimeSpentWarmingUpAttack", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TimeSpentWarmingUpAttack.html", ["time", "spent", "warming", "up", "attack"], "UBuildingAttackComponent_SM");
addToContainers_variable("Team", "The team this structure is on", "Docs/Classes/UBuildingAttackComponent_SM/Variables/Team.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "How the structure selects it\'s target", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_8.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Whether the structure likes selecting targets closer or further away. Will only be relevant if TargetAquireMethod considers distance.", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_9.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "If true then the building will not change targets until it\'s current target becomes untargetable. If false then everytime a sweep result comes in it will reevaluate it\'s target. Better performance if this is true.", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_10.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Attack preperation particles. Should not be looping. Probably belong on FAttackAttributes", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_11.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("QueryParams", "Query params this structure will use when sweeping for targets", "Docs/Classes/UBuildingAttackComponent_SM/Variables/QueryParams.html", ["query", "params"], "UBuildingAttackComponent_SM");
addToContainers_variable("", "How much yaw can be off by for structure to fire at target. 180 = can attack at targets at any angle. If this is <180 then the the building will need a rotating base to attack from every angle. If it does not have a rotating base then it will have a blind spot behind it so the rotation of the building when it is placed matters quite a bit.", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_12.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("AttackCompUniqueID", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/AttackCompUniqueID.html", ["attack", "comp", "unique", "i", "d"], "UBuildingAttackComponent_SM");
addToContainers_variable("RotatingBase", "The yaw rotating turret base this is a child of. Can be null if not attached to one", "Docs/Classes/UBuildingAttackComponent_SM/Variables/RotatingBase.html", ["rotating", "base"], "UBuildingAttackComponent_SM");
addToContainers_class("UBuildingAttackCompStructBase_SK", "The base of a building attack comp turret. Rotates yaw. Skeletal mesh version", "Docs/Classes/UBuildingAttackCompStructBase_SK/UBuildingAttackCompStructBase_SK.html", ["building", "attack", "comp", "struct", "base_", "s", "k"], "");
addToContainers_function("UBuildingAttackCompStructBase_SK", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/UBuildingAttackCompStructBase_SK.html", ["building", "attack", "comp", "struct", "base_", "s", "k"], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("OwningBuilding", "Building this comp is attached to", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("TurretComp", "Turret comp that is an attach child of this", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/TurretComp.html", ["turret", "comp"], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("", "Relative yaw rotation", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/.html", [], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("1", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/1.html", [], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("", "The rate at which this base can rotate yaw", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/_1.html", [], "UBuildingAttackCompStructBase_SK");
addToContainers_class("UBuildingAttackCompStructBase_SM", "This is the part of a building attack component that rotates yaw e.g. in C&C this is like the top half of a turret. This component is for a static mesh. It is very likely a IBuildingAttackComp_Turret will be a child of this component.", "Docs/Classes/UBuildingAttackCompStructBase_SM/UBuildingAttackCompStructBase_SM.html", ["building", "attack", "comp", "struct", "base_", "s", "m"], "");
addToContainers_function("UBuildingAttackCompStructBase_SM", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/UBuildingAttackCompStructBase_SM.html", ["building", "attack", "comp", "struct", "base_", "s", "m"], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("OwningBuilding", "Building this comp is attached to", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("TurretComp", "Turret comp that is an attach child of this", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/TurretComp.html", ["turret", "comp"], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("", "Relative yaw rotation", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/.html", [], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("1", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/1.html", [], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("", "The rate at which this base can rotate yaw", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/_1.html", [], "UBuildingAttackCompStructBase_SM");
addToContainers_class("IBuildingAttackComp_Turret", "USceneComponents implementing this interface can be used to attack. This interface was added for building attack components. It only really exists because I want to allow both static and skeletal meshes to be used for attack components. Turrets can optionally add pitch rotation and can fire projectiles. If they are a child of a IBuildingAttackComp_TurretBase then the base will rotate yaw.", "Docs/Classes/IBuildingAttackComp_Turret/IBuildingAttackComp_Turret.html", ["building", "attack", "comp_", "turret"], "");
addToContainers_class("IBuildingAttackComp_TurretsBase", "The part of a turret that rotates yaw. It will have a UBuildingAttackComp_Turret as it\'s child. Base is all I could think of but perhaps think of a different name cause base is commonly used in C++", "Docs/Classes/IBuildingAttackComp_TurretsBase/IBuildingAttackComp_TurretsBase.html", ["building", "attack", "comp_", "turrets", "base"], "");
addToContainers_class("UMySphereComponent", "Just a USphereComponent expect UPrimitiveComponent::OverlappingComponents has a getter.", "Docs/Classes/UMySphereComponent/UMySphereComponent.html", ["my", "sphere", "component"], "");
addToContainers_class("UPitchChangeBuildingAttackComp_SK", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/UPitchChangeBuildingAttackComp_SK.html", ["pitch", "change", "building", "attack", "comp_", "s", "k"], "");
addToContainers_function("UPitchChangeBuildingAttackComp_SK", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/UPitchChangeBuildingAttackComp_SK.html", ["pitch", "change", "building", "attack", "comp_", "s", "k"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "Relative pitch rotation", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "The rate at which the turret can change it\'s pitch", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_1.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "How much pitch can be off by for structure to fire at target.", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_2.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("MIN_TURRET_PITCH", "Make sure to update the ClampMin below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/MIN_TURRET_PITCH.html", ["i", "n_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "Minimum amount of pitch the turret can have. The closer to 0 this is the less the turret can look down and therefore the less chance it can attack actors below it", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_3.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("MAX_TURRET_PITCH", "Make sure to update the ClampMax below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/MAX_TURRET_PITCH.html", ["a", "x_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "Maximum amount of pitch the turret can have. The closer to 0 this is the less the turret can look up and therefore the less chance it can attack actors above it.", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_4.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable(":", "If true then the turret needs to check whether the pitch required to face an actor before aquiring them is achievable. If MinAllowedPitch, MaxAllowedPitch and PitchFacingRequirement are too restrictive then it\'s possible the target cannot be faced", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/:.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("1", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/1.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_class("UPitchChangeBuildingAttackComp_SM", "A building attack component that can change it\'s pitch rotation. Examples of these: - in C&C generals: top part of a partiot missle system. To get it rotataing yaw make sure to add a IBuildingAttackComp_TurretsBase as it\'s attach parent. If you need animation make sure to choose UPitchChangeBuildingAttackComp_SK instead.", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/UPitchChangeBuildingAttackComp_SM.html", ["pitch", "change", "building", "attack", "comp_", "s", "m"], "");
addToContainers_function("UPitchChangeBuildingAttackComp_SM", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/UPitchChangeBuildingAttackComp_SM.html", ["pitch", "change", "building", "attack", "comp_", "s", "m"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "Relative pitch rotation", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "The rate at which the turret can change it\'s pitch", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_1.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "How much pitch can be off by for structure to fire at target.", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_2.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("MIN_TURRET_PITCH", "Make sure to update the ClampMin below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/MIN_TURRET_PITCH.html", ["i", "n_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "Minimum amount of pitch the turret can have. The closer to 0 this is the less the turret can look down and therefore the less chance it can attack actors below it", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_3.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("MAX_TURRET_PITCH", "Make sure to update the ClampMax below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/MAX_TURRET_PITCH.html", ["a", "x_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "Maximum amount of pitch the turret can have. The closer to 0 this is the less the turret can look up and therefore the less chance it can attack actors above it.", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_4.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable(":", "If true then the turret needs to check whether the pitch required to face an actor before aquiring them is achievable. If MinAllowedPitch, MaxAllowedPitch and PitchFacingRequirement are too restrictive then it\'s possible the target cannot be faced", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/:.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("1", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/1.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_class("UBuildingTurretCompAnimInstance", "Anim instance for UBuildingAttackComponent_SK and probably the pitch altering one too", "Docs/Classes/UBuildingTurretCompAnimInstance/UBuildingTurretCompAnimInstance.html", ["building", "turret", "comp", "anim", "instance"], "");
addToContainers_variable("bIsOnServer", "True if GetWorld()->IsServer() would return true", "Docs/Classes/UBuildingTurretCompAnimInstance/Variables/bIsOnServer.html", ["is", "on", "server"], "UBuildingTurretCompAnimInstance");
addToContainers_class("UBAbility_DealDamage", "Deals damage to the building. Damage is percentage based.", "Docs/Classes/UBAbility_DealDamage/UBAbility_DealDamage.html", ["b", "ability_", "deal", "damage"], "");
addToContainers_function("UBAbility_DealDamage", "", "Docs/Classes/UBAbility_DealDamage/Functions/UBAbility_DealDamage.html", ["b", "ability_", "deal", "damage"], "UBAbility_DealDamage");
addToContainers_variable("", "Normalized percentage of damage to deal", "Docs/Classes/UBAbility_DealDamage/Variables/.html", [], "UBAbility_DealDamage");
addToContainers_class("UBAbility_StealResources", "Takes some resources from the owner of the building, just like Black Lotus\' cash grab ability in C&C generals", "Docs/Classes/UBAbility_StealResources/UBAbility_StealResources.html", ["b", "ability_", "steal", "resources"], "");
addToContainers_function("UBAbility_StealResources", "", "Docs/Classes/UBAbility_StealResources/Functions/UBAbility_StealResources.html", ["b", "ability_", "steal", "resources"], "UBAbility_StealResources");
addToContainers_variable("", "How much resources to steal from player", "Docs/Classes/UBAbility_StealResources/Variables/.html", [], "UBAbility_StealResources");
addToContainers_variable("", "Contents of AmountToDeductFromTarget but it they need to be multiplied by -1", "Docs/Classes/UBAbility_StealResources/Variables/_1.html", [], "UBAbility_StealResources");
addToContainers_variable("", "UI sound to play for the instigator when they use this", "Docs/Classes/UBAbility_StealResources/Variables/_2.html", [], "UBAbility_StealResources");
addToContainers_variable("", "UI sound to play for the target when this is used on them", "Docs/Classes/UBAbility_StealResources/Variables/_3.html", [], "UBAbility_StealResources");
addToContainers_class("UBuildingTargetingAbilityBase", "Contains data about a building targeting ability. Some examples of building targeting abilities: - C&C engineers can capture enemy buildings or repair friendly ones - C&C spies can reveal what enemy buildings are producing", "Docs/Classes/UBuildingTargetingAbilityBase/UBuildingTargetingAbilityBase.html", ["building", "targeting", "ability", "base"], "");
addToContainers_class("UAbility_SingleTargetBuffOrDebuff", "Applies a buff or debuff to a selectable", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/UAbility_SingleTargetBuffOrDebuff.html", ["ability_", "single", "target", "buff", "or", "debuff"], "");
addToContainers_function("UAbility_SingleTargetBuffOrDebuff", "", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Functions/UAbility_SingleTargetBuffOrDebuff.html", ["ability_", "single", "target", "buff", "or", "debuff"], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_variable("", "------------------------------------------------------", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Variables/.html", [], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_variable("", "Buff/debuff to apply", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Variables/_1.html", [], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_variable("", "Buff/debuff to apply", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Variables/_2.html", [], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_class("UAbility_StealResources", "Steals some resources from a player.", "Docs/Classes/UAbility_StealResources/UAbility_StealResources.html", ["ability_", "steal", "resources"], "");
addToContainers_function("UAbility_StealResources", "", "Docs/Classes/UAbility_StealResources/Functions/UAbility_StealResources.html", ["ability_", "steal", "resources"], "UAbility_StealResources");
addToContainers_variable("", "How much resources to steal from player", "Docs/Classes/UAbility_StealResources/Variables/.html", [], "UAbility_StealResources");
addToContainers_variable("", "Contents of AmountToDeductFromTarget but it they need to be multiplied by -1", "Docs/Classes/UAbility_StealResources/Variables/_1.html", [], "UAbility_StealResources");
addToContainers_variable("", "UI sound to play for the instigator when they use this", "Docs/Classes/UAbility_StealResources/Variables/_2.html", [], "UAbility_StealResources");
addToContainers_variable("", "UI sound to play for the target when this is used on them", "Docs/Classes/UAbility_StealResources/Variables/_3.html", [], "UAbility_StealResources");
addToContainers_class("UCAbility_Airstrike", "", "Docs/Classes/UCAbility_Airstrike/UCAbility_Airstrike.html", ["c", "ability_", "airstrike"], "");
addToContainers_function("UCAbility_Airstrike", "", "Docs/Classes/UCAbility_Airstrike/Functions/UCAbility_Airstrike.html", ["c", "ability_", "airstrike"], "UCAbility_Airstrike");
addToContainers_variable("", "Warthog to spawn", "Docs/Classes/UCAbility_Airstrike/Variables/.html", [], "UCAbility_Airstrike");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/UCAbility_Airstrike/Variables/_1.html", [], "UCAbility_Airstrike");
addToContainers_variable("", "This overrides TargetLocationTemporaryFogReveal.Duration. This is the time after the warthog has fired it\'s final shot to when the fog should stop being revealed.", "Docs/Classes/UCAbility_Airstrike/Variables/_2.html", [], "UCAbility_Airstrike");
addToContainers_class("UCAbility_AoEDamage", "- Deals damage in an AoE - Shows particles", "Docs/Classes/UCAbility_AoEDamage/UCAbility_AoEDamage.html", ["c", "ability_", "ao", "e", "damage"], "");
addToContainers_function("UCAbility_AoEDamage", "", "Docs/Classes/UCAbility_AoEDamage/Functions/UCAbility_AoEDamage.html", ["c", "ability_", "ao", "e", "damage"], "UCAbility_AoEDamage");
addToContainers_variable("", "AoE radius", "Docs/Classes/UCAbility_AoEDamage/Variables/.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Delay from when ability is used to when damage should be dealt", "Docs/Classes/UCAbility_AoEDamage/Variables/_1.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Damage of AoE", "Docs/Classes/UCAbility_AoEDamage/Variables/_2.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "The curve to use for damage falloff. If no curve is specified then there will be no damage falloff - every selectable hit will take full damage. X axis = range from center. Larger implies further from ability center. Axis range: [0, 1] Y axis = normalized percentage of BaseDamage to deal. Probably want range [0, 1]", "Docs/Classes/UCAbility_AoEDamage/Variables/_3.html", [], "UCAbility_AoEDamage");
addToContainers_variable(":", "", "Docs/Classes/UCAbility_AoEDamage/Variables/:.html", [], "UCAbility_AoEDamage");
addToContainers_variable(":", "", "Docs/Classes/UCAbility_AoEDamage/Variables/:_1.html", [], "UCAbility_AoEDamage");
addToContainers_variable(":", "", "Docs/Classes/UCAbility_AoEDamage/Variables/:_2.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Particle system to spawn at use location", "Docs/Classes/UCAbility_AoEDamage/Variables/_4.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Scale of particles. Don\'t usually expose this cause sometimes particles can scale incorrectly. In this case you need to create another particle system asset.", "Docs/Classes/UCAbility_AoEDamage/Variables/_5.html", [], "UCAbility_AoEDamage");
addToContainers_class("UActiveArtilleryStrikeState", "A single instance of an artillery strike", "Docs/Classes/UActiveArtilleryStrikeState/UActiveArtilleryStrikeState.html", ["active", "artillery", "strike", "state"], "");
addToContainers_function("UActiveArtilleryStrikeState", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/UActiveArtilleryStrikeState.html", ["active", "artillery", "strike", "state"], "UActiveArtilleryStrikeState");
addToContainers_variable("EffectObject", "----------------------------------------------------------", "Docs/Classes/UActiveArtilleryStrikeState/Variables/EffectObject.html", ["effect", "object"], "UActiveArtilleryStrikeState");
addToContainers_variable("PoolingManager", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/PoolingManager.html", ["pooling", "manager"], "UActiveArtilleryStrikeState");
addToContainers_variable("TimeTillStop", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/TimeTillStop.html", ["time", "till", "stop"], "UActiveArtilleryStrikeState");
addToContainers_variable("TimeTillSpawnNextProjectile", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/TimeTillSpawnNextProjectile.html", ["time", "till", "spawn", "next", "projectile"], "UActiveArtilleryStrikeState");
addToContainers_variable("AbilityLocation", "Where the ability was used", "Docs/Classes/UActiveArtilleryStrikeState/Variables/AbilityLocation.html", ["ability", "location"], "UActiveArtilleryStrikeState");
addToContainers_variable("LastYawRot", "How much yaw rotation around the AbilityLocation that was applied to the last projectile that was fired", "Docs/Classes/UActiveArtilleryStrikeState/Variables/LastYawRot.html", ["last", "yaw", "rot"], "UActiveArtilleryStrikeState");
addToContainers_variable("RandomStream", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/RandomStream.html", ["random", "stream"], "UActiveArtilleryStrikeState");
addToContainers_variable("bIsServer", "Whether GetWorld()->IsServer() would return true", "Docs/Classes/UActiveArtilleryStrikeState/Variables/bIsServer.html", ["is", "server"], "UActiveArtilleryStrikeState");
addToContainers_variable("InstigatorsTeam", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/InstigatorsTeam.html", ["instigators", "team"], "UActiveArtilleryStrikeState");
addToContainers_variable("NumProjectilesRemainingInSalvo", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/NumProjectilesRemainingInSalvo.html", ["num", "projectiles", "remaining", "in", "salvo"], "UActiveArtilleryStrikeState");
addToContainers_class("UCAbility_ArtilleryStrike", "Fires multiple projectiles down towards the ground", "Docs/Classes/UCAbility_ArtilleryStrike/UCAbility_ArtilleryStrike.html", ["c", "ability_", "artillery", "strike"], "");
addToContainers_function("UCAbility_ArtilleryStrike", "", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/UCAbility_ArtilleryStrike.html", ["c", "ability_", "artillery", "strike"], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Write this because cbf writting lots of getters", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Area where projectiles are fired at", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_1.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "The height projectiles spawn at above the use location\'s Z axis value", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_2.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Projectile to use.", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_3.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Whether to override the damage values on the projectile", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_4.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Damage values of the projectile", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_5.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_6.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired. Set this equal to MinInitialDelay to avoid randomness", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_7.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "How long to spawn projectiles for. Measured after InitialDelay is up. After this amount of time is up no more projectiles will spawn.", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_8.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "For randomness", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_9.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_10.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_11.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_12.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_13.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_14.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_15.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "The distance from the center that the projectiles should be shot at X axis = a random number. Should start at 0 and end at 1 Y axis = normalized distance from center. Values can be anywhere from 0 to 1 If this is not set then linear will be used", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_16.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "How much different the rotation the next projectile to spawn from the last one in degrees. Set this greater to 0 if you want your projectiles to try not to clump up in one spot.", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_17.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_18.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Decal to spawn at the target location", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_19.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "The delay from when ability is used to when the target location decal should spawn", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_20.html", [], "UCAbility_ArtilleryStrike");
addToContainers_struct("FBarrageProjectileInfo", "All the info about how a projectile is fired during the barrage. A salvo is just projectiles fired in a concentrated area kinda like an airship tends to fire many shots near the same general location before choosing another general location.", "Docs/Structs/FBarrageProjectileInfo/FBarrageProjectileInfo.html", ["barrage", "projectile", "info"], "");
addToContainers_function("FBarrageProjectileInfo", "", "Docs/Structs/FBarrageProjectileInfo/Functions/FBarrageProjectileInfo.html", ["barrage", "projectile", "info"], "FBarrageProjectileInfo");
addToContainers_variable("", "Projectile to use.", "Docs/Structs/FBarrageProjectileInfo/Variables/.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Whether to override the damage values on the projectile", "Docs/Structs/FBarrageProjectileInfo/Variables/_1.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Damage values of the projectile", "Docs/Structs/FBarrageProjectileInfo/Variables/_2.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired", "Docs/Structs/FBarrageProjectileInfo/Variables/_3.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired. Set this equal to MinInitialDelay to avoid randomness", "Docs/Structs/FBarrageProjectileInfo/Variables/_4.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "How long to spawn projectiles for. Measured after InitialDelay is up. After this amount of time is up no more projectiles will spawn.", "Docs/Structs/FBarrageProjectileInfo/Variables/_5.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "For randomness", "Docs/Structs/FBarrageProjectileInfo/Variables/_6.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_7.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_8.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_9.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_10.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_11.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_12.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_13.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "This is how far in front or behind the aircraft the projectile should be fired from e.g. on an AC130 the weapons are at different locations along the side of it Positive values mean further up the front of the ship Negative values mean further near the back of the ship My notes: no matter the sign of RotationRate the 2 statements above stay true", "Docs/Structs/FBarrageProjectileInfo/Variables/_14.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Curve for choosing the salvo location, not individual projectile locations. Both axis should be normalized to the range [0, 1]. The X axis must start at 0 and end at 1. X axis = a random number Y axis = the horizontal distance the projectile should spawn from the use location If no curve is used here then linear will be used", "Docs/Structs/FBarrageProjectileInfo/Variables/_15.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "The distance from the salvo location each projectile should be. Just like DistanceFromCenterCurve_Salvo except for locations around the salvo location", "Docs/Structs/FBarrageProjectileInfo/Variables/_16.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Whether to raycast so locations chosen are on the ground", "Docs/Structs/FBarrageProjectileInfo/Variables/_17.html", [], "FBarrageProjectileInfo");
addToContainers_class("UActiveBarrageSingleSalvoTypeState", "State for a single projectile type of the barrage. Decided to make this a UCLASS instead of a USTRUCT because I want to call timer handles with it", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/UActiveBarrageSingleSalvoTypeState.html", ["active", "barrage", "single", "salvo", "type", "state"], "");
addToContainers_function("UActiveBarrageSingleSalvoTypeState", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Functions/UActiveBarrageSingleSalvoTypeState.html", ["active", "barrage", "single", "salvo", "type", "state"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("BarrageState", "~ End overrides for FTickableGameObject", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/BarrageState.html", ["barrage", "state"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("Info", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/Info.html", [], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("TimeSpentAlive", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/TimeSpentAlive.html", ["time", "spent", "alive"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("TimeTillStop", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/TimeTillStop.html", ["time", "till", "stop"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("TimeTillNextProjectileSpawn", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/TimeTillNextProjectileSpawn.html", ["time", "till", "next", "projectile", "spawn"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("CurrentSalvoLocation", "The location that is the center for the current salvo", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/CurrentSalvoLocation.html", ["current", "salvo", "location"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("NumProjectilesRemainingInSalvo", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/NumProjectilesRemainingInSalvo.html", ["num", "projectiles", "remaining", "in", "salvo"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("bNextProjectileIsFirstOfSalvo", "If true then the next projectile we fire is the first in a salvo", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/bNextProjectileIsFirstOfSalvo.html", ["next", "projectile", "is", "first", "of", "salvo"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("ArrayIndex", "The array index in BarrageState->States that this is", "Docs/Classes/UActiveBarrageSingleSalvoTypeState/Variables/ArrayIndex.html", ["array", "index"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_struct("FActiveBarrageState", "State for a barrage", "Docs/Structs/FActiveBarrageState/FActiveBarrageState.html", ["active", "barrage", "state"], "");
addToContainers_function("FActiveBarrageState", "", "Docs/Structs/FActiveBarrageState/Functions/FActiveBarrageState.html", ["active", "barrage", "state"], "FActiveBarrageState");
addToContainers_function("FActiveBarrageState", "Use this ctor", "Docs/Structs/FActiveBarrageState/Functions/FActiveBarrageState_1.html", ["active", "barrage", "state"], "FActiveBarrageState");
addToContainers_variable("RandomStream", "", "Docs/Structs/FActiveBarrageState/Variables/RandomStream.html", ["random", "stream"], "FActiveBarrageState");
addToContainers_variable("TargetLocation", "World location where the ability was used", "Docs/Structs/FActiveBarrageState/Variables/TargetLocation.html", ["target", "location"], "FActiveBarrageState");
addToContainers_variable("FirersOriginalLocation", "Whatever is firing the projectiles: this is its location when the ability was used", "Docs/Structs/FActiveBarrageState/Variables/FirersOriginalLocation.html", ["firers", "original", "location"], "FActiveBarrageState");
addToContainers_variable("Radius", "", "Docs/Structs/FActiveBarrageState/Variables/Radius.html", [], "FActiveBarrageState");
addToContainers_variable("RotationRate", "", "Docs/Structs/FActiveBarrageState/Variables/RotationRate.html", ["rotation", "rate"], "FActiveBarrageState");
addToContainers_variable("UniqueID", "", "Docs/Structs/FActiveBarrageState/Variables/UniqueID.html", ["unique", "i", "d"], "FActiveBarrageState");
addToContainers_variable("InstigatorsTeam", "Team of the player that instigated the ability", "Docs/Structs/FActiveBarrageState/Variables/InstigatorsTeam.html", ["instigators", "team"], "FActiveBarrageState");
addToContainers_variable("", "All the states for each projectile type", "Docs/Structs/FActiveBarrageState/Variables/.html", [], "FActiveBarrageState");
addToContainers_class("UCAbility_Barrage", "Barrage launches projectiles at a location. Many different types of projectiles can be used. It is perfect to simulate an aircraft such as an AC130 firing on a location. There is no mesh for the aircraft though.", "Docs/Classes/UCAbility_Barrage/UCAbility_Barrage.html", ["c", "ability_", "barrage"], "");
addToContainers_function("UCAbility_Barrage", "", "Docs/Classes/UCAbility_Barrage/Functions/UCAbility_Barrage.html", ["c", "ability_", "barrage"], "UCAbility_Barrage");
addToContainers_variable("", "Holds all the active barrage\'s state info", "Docs/Classes/UCAbility_Barrage/Variables/.html", [], "UCAbility_Barrage");
addToContainers_variable("", "The area the ability affects", "Docs/Classes/UCAbility_Barrage/Variables/_1.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Horizontal distance firer is away from target location", "Docs/Classes/UCAbility_Barrage/Variables/_2.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Vertical distance firer is away from target location", "Docs/Classes/UCAbility_Barrage/Variables/_3.html", [], "UCAbility_Barrage");
addToContainers_variable("", "How fast the location the projectiles are being fired from rotates around the target location. I think this is how many degrees per second. Use negative values to move in the opposite direction", "Docs/Classes/UCAbility_Barrage/Variables/_4.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Info about all the projectiles that are fired", "Docs/Classes/UCAbility_Barrage/Variables/_5.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/UCAbility_Barrage/Variables/_6.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Optional sound to play for the ability instigator", "Docs/Classes/UCAbility_Barrage/Variables/_7.html", [], "UCAbility_Barrage");
addToContainers_class("UCAbility_ResearchUpgrade", "Instantly fully researches an upgrade for the instigator. The upgrade you research you probably don\'t want it to be already researched when you use this ability", "Docs/Classes/UCAbility_ResearchUpgrade/UCAbility_ResearchUpgrade.html", ["c", "ability_", "research", "upgrade"], "");
addToContainers_function("UCAbility_ResearchUpgrade", "", "Docs/Classes/UCAbility_ResearchUpgrade/Functions/UCAbility_ResearchUpgrade.html", ["c", "ability_", "research", "upgrade"], "UCAbility_ResearchUpgrade");
addToContainers_variable("", "The upgrade to research.", "Docs/Classes/UCAbility_ResearchUpgrade/Variables/.html", [], "UCAbility_ResearchUpgrade");
addToContainers_class("UCAbility_SingleTargetDamage", "Deals damage to a single target. Very basic ability. Mainly just added this for testing", "Docs/Classes/UCAbility_SingleTargetDamage/UCAbility_SingleTargetDamage.html", ["c", "ability_", "single", "target", "damage"], "");
addToContainers_function("UCAbility_SingleTargetDamage", "", "Docs/Classes/UCAbility_SingleTargetDamage/Functions/UCAbility_SingleTargetDamage.html", ["c", "ability_", "single", "target", "damage"], "UCAbility_SingleTargetDamage");
addToContainers_variable("", "How much damage to deal", "Docs/Classes/UCAbility_SingleTargetDamage/Variables/.html", [], "UCAbility_SingleTargetDamage");
addToContainers_class("UCommanderAbilityBase", "Base class for all abilities that are instigated by the commander. Examples of these from other games: In C&C Generals: fuel air bomb, artillery strike, any general ability. In Startcraft II: nothing that I know of.", "Docs/Classes/UCommanderAbilityBase/UCommanderAbilityBase.html", ["commander", "ability", "base"], "");
addToContainers_function("UCommanderAbilityBase", "", "Docs/Classes/UCommanderAbilityBase/Functions/UCommanderAbilityBase.html", ["commander", "ability", "base"], "UCommanderAbilityBase");
addToContainers_variable("GI", "-----------------------------------------------------", "Docs/Classes/UCommanderAbilityBase/Variables/GI.html", [], "UCommanderAbilityBase");
addToContainers_variable("GS", "", "Docs/Classes/UCommanderAbilityBase/Variables/GS.html", [], "UCommanderAbilityBase");
addToContainers_variable("PS", "Player state of the local player", "Docs/Classes/UCommanderAbilityBase/Variables/PS.html", [], "UCommanderAbilityBase");
addToContainers_variable("bHasMultipleOutcomes", "", "Docs/Classes/UCommanderAbilityBase/Variables/bHasMultipleOutcomes.html", ["has", "multiple", "outcomes"], "UCommanderAbilityBase");
addToContainers_variable("bCallAoEStartFunction", "", "Docs/Classes/UCommanderAbilityBase/Variables/bCallAoEStartFunction.html", ["call", "ao", "e", "start", "function"], "UCommanderAbilityBase");
addToContainers_variable("bAoEHitsHaveMultipleOutcomes", "", "Docs/Classes/UCommanderAbilityBase/Variables/bAoEHitsHaveMultipleOutcomes.html", ["ao", "e", "hits", "have", "multiple", "outcomes"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresSelectableTarget", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresSelectableTarget.html", ["requires", "selectable", "target"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresPlayerTarget", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresPlayerTarget.html", ["requires", "player", "target"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresLocation", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresLocation.html", ["requires", "location"], "UCommanderAbilityBase");
addToContainers_variable("bHasRandomBehavior", "", "Docs/Classes/UCommanderAbilityBase/Variables/bHasRandomBehavior.html", ["has", "random", "behavior"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresTickCount", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresTickCount.html", ["requires", "tick", "count"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresDirection", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresDirection.html", ["requires", "direction"], "UCommanderAbilityBase");
addToContainers_struct("FWarthogAttackAttributes", "", "Docs/Structs/FWarthogAttackAttributes/FWarthogAttackAttributes.html", ["warthog", "attack", "attributes"], "");
addToContainers_function("FWarthogAttackAttributes", "", "Docs/Structs/FWarthogAttackAttributes/Functions/FWarthogAttackAttributes.html", ["warthog", "attack", "attributes"], "FWarthogAttackAttributes");
addToContainers_variable("", "1st type of projectile to fire", "Docs/Structs/FWarthogAttackAttributes/Variables/.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FWarthogAttackAttributes/Variables/_1.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Damage values for projectile type 1", "Docs/Structs/FWarthogAttackAttributes/Variables/_2.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "2nd type of projectile to fire. Fired as often or less often than projectile 1", "Docs/Structs/FWarthogAttackAttributes/Variables/_3.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FWarthogAttackAttributes/Variables/_4.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FWarthogAttackAttributes/Variables/_5.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Time between firing projectiles. Never use a Y value of <= 0 at any point on this curve. X axis = how far into phase 3 the warthog is Y axis = time between shot", "Docs/Structs/FWarthogAttackAttributes/Variables/_6.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "For every Projectile2Ratio of projectile type 1 that is fired, a projectile type 2 will be fired. So the higher this value is the more of projectile type 1 that is fired and the less of projectile type 2 that is fired.", "Docs/Structs/FWarthogAttackAttributes/Variables/_7.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Total number of projectiles to fire", "Docs/Structs/FWarthogAttackAttributes/Variables/_8.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Particles for every time a shot is fired", "Docs/Structs/FWarthogAttackAttributes/Variables/_9.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Socket on mesh that projectiles spawn from", "Docs/Structs/FWarthogAttackAttributes/Variables/_10.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Curve for the pitch. X axis = range [0, 1] Y axis = amount of pitch to apply to shot. Higher values = less accurate shots. Only needs to be positive - a random sign will be given to each value", "Docs/Structs/FWarthogAttackAttributes/Variables/_11.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Curve for the yaw X axis = range [0, 1] Y axis = amount of yaw to apply to shot. Higher values = less accurate shots. Only needs to be positive - a random sign will be given to each value", "Docs/Structs/FWarthogAttackAttributes/Variables/_12.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "The sound to play while the warthog is firing", "Docs/Structs/FWarthogAttackAttributes/Variables/_13.html", [], "FWarthogAttackAttributes");
addToContainers_class("AWarthog", "Plane that will fly to a location and fire at it - the default values for this class are set up decently for the marketplace warthog model with the muzzle socket added to Skeleton_Gun_End, rotating its yaw by -90 and giving it -5 pitch. - set the sound for the engine as EngineAudioComp::Sound - check the movement component - it may have some variables for you to adjust TODO only the engine anim plays. Implement the firing anim and possibly a pull up anim too.", "Docs/Classes/AWarthog/AWarthog.html", [], "");
addToContainers_function("AWarthog", "", "Docs/Classes/AWarthog/Functions/AWarthog.html", [], "AWarthog");
addToContainers_variable("", "Adding this cause the warthog skeletal mesh is rotated by 90 degrees and I can\'t find any other way of getting it the right rotation. I think rotation can actually be changed when you import the SK into UE but whatever", "Docs/Classes/AWarthog/Variables/.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_1.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_2.html", [], "AWarthog");
addToContainers_variable("", "Audio component to play the sound of the engine", "Docs/Classes/AWarthog/Variables/_3.html", [], "AWarthog");
addToContainers_variable("AbilityUseLocation", "World location where the ability was used", "Docs/Classes/AWarthog/Variables/AbilityUseLocation.html", ["ability", "use", "location"], "AWarthog");
addToContainers_variable("Phase", "", "Docs/Classes/AWarthog/Variables/Phase.html", [], "AWarthog");
addToContainers_variable("InstigatorsTeam", "", "Docs/Classes/AWarthog/Variables/InstigatorsTeam.html", ["instigators", "team"], "AWarthog");
addToContainers_variable("", "Should be looping", "Docs/Classes/AWarthog/Variables/_4.html", [], "AWarthog");
addToContainers_variable("", "Height it which warthog spawns. This is above the use location\'s Z value", "Docs/Classes/AWarthog/Variables/_5.html", [], "AWarthog");
addToContainers_variable("", "How fast the warthog moves during phase1 and phase4", "Docs/Classes/AWarthog/Variables/_6.html", [], "AWarthog");
addToContainers_variable("", "How close to the target location in 2D coordinates that the warthog should transition into phase 2", "Docs/Classes/AWarthog/Variables/_7.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_8.html", [], "AWarthog");
addToContainers_variable("", "How much pitch to apply when about to fire and firing. Usually this is negative so the plane looks downward towards ground", "Docs/Classes/AWarthog/Variables/_9.html", [], "AWarthog");
addToContainers_variable("", "How far the warthog should travel in 2D coordinates during phase2 before it should switch to phase3.", "Docs/Classes/AWarthog/Variables/_10.html", [], "AWarthog");
addToContainers_variable("", "How long after firing the last shot before the warthog should transition to phase4", "Docs/Classes/AWarthog/Variables/_11.html", [], "AWarthog");
addToContainers_variable("", "How much pitch for the plane to go towards for phase4", "Docs/Classes/AWarthog/Variables/_12.html", [], "AWarthog");
addToContainers_variable("GI", "Attack properties", "Docs/Classes/AWarthog/Variables/GI.html", [], "AWarthog");
addToContainers_variable("PoolingManager", "", "Docs/Classes/AWarthog/Variables/PoolingManager.html", ["pooling", "manager"], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_13.html", [], "AWarthog");
addToContainers_variable("RandomStream", "", "Docs/Classes/AWarthog/Variables/RandomStream.html", ["random", "stream"], "AWarthog");
addToContainers_variable("TimeSpentInPhase2AndPhase3", "", "Docs/Classes/AWarthog/Variables/TimeSpentInPhase2AndPhase3.html", ["time", "spent", "in", "phase2", "and", "phase3"], "AWarthog");
addToContainers_variable("TimeBetweenShotsCurveYValue", "", "Docs/Classes/AWarthog/Variables/TimeBetweenShotsCurveYValue.html", ["time", "between", "shots", "curve", "y", "value"], "AWarthog");
addToContainers_variable("TimeTillFireNextProjectile", "", "Docs/Classes/AWarthog/Variables/TimeTillFireNextProjectile.html", ["time", "till", "fire", "next", "projectile"], "AWarthog");
addToContainers_variable("NumProjectilesRemaining", "Number of projectiles this plane still has to fire", "Docs/Classes/AWarthog/Variables/NumProjectilesRemaining.html", ["num", "projectiles", "remaining"], "AWarthog");
addToContainers_variable("TimeSpentInPhase4", "", "Docs/Classes/AWarthog/Variables/TimeSpentInPhase4.html", ["time", "spent", "in", "phase4"], "AWarthog");
addToContainers_variable("", "Other properties", "Docs/Classes/AWarthog/Variables/_14.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_15.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_16.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_17.html", [], "AWarthog");
addToContainers_class("UWarthogMovementComponent", "", "Docs/Classes/UWarthogMovementComponent/UWarthogMovementComponent.html", ["warthog", "movement", "component"], "");
addToContainers_function("UWarthogMovementComponent", "", "Docs/Classes/UWarthogMovementComponent/Functions/UWarthogMovementComponent.html", ["warthog", "movement", "component"], "UWarthogMovementComponent");
addToContainers_variable("OriginalVelocity", "----------------------------------------------------------------", "Docs/Classes/UWarthogMovementComponent/Variables/OriginalVelocity.html", ["original", "velocity"], "UWarthogMovementComponent");
addToContainers_variable("", "How long it takes to go from flying straight to flying at the decent angle specified on AWarthog.", "Docs/Classes/UWarthogMovementComponent/Variables/.html", [], "UWarthogMovementComponent");
addToContainers_variable("", "", "Docs/Classes/UWarthogMovementComponent/Variables/_1.html", [], "UWarthogMovementComponent");
addToContainers_class("ARTSLevelVolume", "A volume to be placed on the map. It defines: - the area of fog of war that is revealable - the area of the map that should be shown on the minimap - It also stores the locations of RTS player starts placed on map - the area the player\'s camera is allowed to visit", "Docs/Classes/ARTSLevelVolume/ARTSLevelVolume.html", ["r", "t", "s", "level", "volume"], "");
addToContainers_function("ARTSLevelVolume", "", "Docs/Classes/ARTSLevelVolume/Functions/ARTSLevelVolume.html", ["r", "t", "s", "level", "volume"], "ARTSLevelVolume");
addToContainers_variable("", "Box that defines the area of the map where fog of war can be toggled and the area of the map that should be used as the minimap image", "Docs/Classes/ARTSLevelVolume/Variables/.html", [], "ARTSLevelVolume");
addToContainers_variable("", "The scene capture component that captures an image to use as a texture for minimap", "Docs/Classes/ARTSLevelVolume/Variables/_1.html", [], "ARTSLevelVolume");
addToContainers_variable("MapName", "Name of map this volume was placed on", "Docs/Classes/ARTSLevelVolume/Variables/MapName.html", ["map", "name"], "ARTSLevelVolume");
addToContainers_variable("WALL_THICKNESS", "How thick the walls are ", "Docs/Classes/ARTSLevelVolume/Variables/WALL_THICKNESS.html", ["a", "l", "l_", "t", "h", "i", "c", "k", "n", "e", "s", "s"], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_2.html", [], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_3.html", [], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_4.html", [], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_5.html", [], "ARTSLevelVolume");
addToContainers_variable("", "The minimap texture created while in editor. You can look but cannot touch. Actually for the meanwhile this has been changed from VisibleAnywhere to EditDefaultsOnly (this and PlayerStarts and MapBounds - for \'no edit GI BP\' workaround)", "Docs/Classes/ARTSLevelVolume/Variables/_6.html", [], "ARTSLevelVolume");
addToContainers_variable("", "This is a path reference to the minimap texture. Basically without this the UTexture2D created while in editor will be null although I can\'t get it working with this", "Docs/Classes/ARTSLevelVolume/Variables/_7.html", [], "ARTSLevelVolume");
addToContainers_variable("", "Array of all RTSPlayerStarts on map.", "Docs/Classes/ARTSLevelVolume/Variables/_8.html", [], "ARTSLevelVolume");
addToContainers_variable("", "Bounds of the map this volume was placed in", "Docs/Classes/ARTSLevelVolume/Variables/_9.html", [], "ARTSLevelVolume");
addToContainers_class("UPlayerCameraMovement", "The movement component that decides how the players pawn (which has a camera attached to it) moves. It is pretty much a copy of UFloatingPawnMovement but does a raycast each tick to make sure updated component stays glued to the ground", "Docs/Classes/UPlayerCameraMovement/UPlayerCameraMovement.html", ["player", "camera", "movement"], "");
addToContainers_function("UPlayerCameraMovement", "", "Docs/Classes/UPlayerCameraMovement/Functions/UPlayerCameraMovement.html", ["player", "camera", "movement"], "UPlayerCameraMovement");
addToContainers_variable("MaxSpeed", "Maximum velocity magnitude allowed for the controlled Pawn.", "Docs/Classes/UPlayerCameraMovement/Variables/MaxSpeed.html", ["max", "speed"], "UPlayerCameraMovement");
addToContainers_variable("Acceleration", "Acceleration applied by input (rate of change of velocity)", "Docs/Classes/UPlayerCameraMovement/Variables/Acceleration.html", [], "UPlayerCameraMovement");
addToContainers_variable("Deceleration", "Deceleration applied when there is no input (rate of change of velocity)", "Docs/Classes/UPlayerCameraMovement/Variables/Deceleration.html", [], "UPlayerCameraMovement");
addToContainers_variable("TurningBoost", "Setting affecting extra force applied when changing direction, making turns have less drift and become more responsive. Velocity magnitude is not allowed to increase, that only happens due to normal acceleration. It may decrease with large direction changes. Larger values apply extra force to reach the target direction more quickly, while a zero value disables any extra turn force.", "Docs/Classes/UPlayerCameraMovement/Variables/TurningBoost.html", ["turning", "boost"], "UPlayerCameraMovement");
addToContainers_variable(":", "Set to true when a position correction is applied. Used to avoid recalculating velocity when this occurs.", "Docs/Classes/UPlayerCameraMovement/Variables/:.html", [], "UPlayerCameraMovement");
addToContainers_class("ACollidingProjectile", "A standard non-replicating projectile suitable for straight firing or arcing projectiles such as artillery rounds or arrows", "Docs/Classes/ACollidingProjectile/ACollidingProjectile.html", ["colliding", "projectile"], "");
addToContainers_function("ACollidingProjectile", "", "Docs/Classes/ACollidingProjectile/Functions/ACollidingProjectile.html", ["colliding", "projectile"], "ACollidingProjectile");
addToContainers_variable("", "", "Docs/Classes/ACollidingProjectile/Variables/.html", [], "ACollidingProjectile");
addToContainers_variable("", "Only relevant if movement components ProjectileGravityScale != 0. This decides whether high arc or low arc will be used when launching projectile. High arc is suitable for say a long range artillery shell while low arc would be more suited for tank rounds", "Docs/Classes/ACollidingProjectile/Variables/_1.html", [], "ACollidingProjectile");
addToContainers_class("ACollidingProjectileBase", "Base class for projectiles that collide with selectables and/or the environment", "Docs/Classes/ACollidingProjectileBase/ACollidingProjectileBase.html", ["colliding", "projectile", "base"], "");
addToContainers_function("ACollidingProjectileBase", "", "Docs/Classes/ACollidingProjectileBase/Functions/ACollidingProjectileBase.html", ["colliding", "projectile", "base"], "ACollidingProjectileBase");
addToContainers_variable("", "Collision comp. Also can be used for projectile mesh positioning", "Docs/Classes/ACollidingProjectileBase/Variables/.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Arrow to no know what way it faces in editor", "Docs/Classes/ACollidingProjectileBase/Variables/_1.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "", "Docs/Classes/ACollidingProjectileBase/Variables/_2.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Can this projectile collide with the world? i.e. non-selectables such as the landscape", "Docs/Classes/ACollidingProjectileBase/Variables/_3.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Will colliding with a enemy trigger a hit?", "Docs/Classes/ACollidingProjectileBase/Variables/_4.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Will colliding with a friendly trigger a hit? Self included. This is important. Make sure the socket if far enough away from the mesh so that it does not collide instantly with the firer", "Docs/Classes/ACollidingProjectileBase/Variables/_5.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Lifetime of projectile before it pseudo destroys itself and goes back to object pool. This can be low to give projectile a lifetime similar to disruptor shots in starcraft II. It\'s other purpose is a failsafe for stray projectiles that somehow never collide with anything, possibly they were shot up in the air or cannot collide with world, enemy or friendlies. Invisible bounds need to be put in place to stop them and return them to the pool", "Docs/Classes/ACollidingProjectileBase/Variables/_6.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "If time expires does this projectile cause a hit where it is or just go silently? E.g. Starcraft II disruptors would be an example of a true. Area of Effect Radius must be greater than 0 for any damage to be dealt in this case.", "Docs/Classes/ACollidingProjectileBase/Variables/_7.html", [], "ACollidingProjectileBase");
addToContainers_variable("HitResult", "A hit result to pass into some functions to avoid creating temporaries", "Docs/Classes/ACollidingProjectileBase/Variables/HitResult.html", ["hit", "result"], "ACollidingProjectileBase");
addToContainers_variable("", "", "Docs/Classes/ACollidingProjectileBase/Variables/_8.html", [], "ACollidingProjectileBase");
addToContainers_class("AHomingProjectile", "A non-replicating projectile that always finds its target. An example would be a stalker shot in starctaft II. Can also be used for missles that seek their targets.", "Docs/Classes/AHomingProjectile/AHomingProjectile.html", ["homing", "projectile"], "");
addToContainers_function("AHomingProjectile", "", "Docs/Classes/AHomingProjectile/Functions/AHomingProjectile.html", ["homing", "projectile"], "AHomingProjectile");
addToContainers_variable("", "Movement comp. Some values on this are overridden by properties in this class", "Docs/Classes/AHomingProjectile/Variables/.html", [], "AHomingProjectile");
addToContainers_variable("", "If target falls to zero health should this projectile keep going or just disappear. If true AoE radius needs to be greater than 0 for any damage to happen in this case. If false projectile will just disppear the moment target reaches zero health. Targets that become null will have their last known location hit if this is true", "Docs/Classes/AHomingProjectile/Variables/_1.html", [], "AHomingProjectile");
addToContainers_variable("", "In regards to selectables, will this projectile ignore every other selectable and only collide with target? This overrides bCanHitEnemies and bCanHitFriendlies. bCanHitWorld still has an effect", "Docs/Classes/AHomingProjectile/Variables/_2.html", [], "AHomingProjectile");
addToContainers_variable("", "Initial speed", "Docs/Classes/AHomingProjectile/Variables/_3.html", [], "AHomingProjectile");
addToContainers_variable("", "Max speed if using an acceleration curve. 0 = no limit. Max speed can also kind of be derived from the acceleration curve", "Docs/Classes/AHomingProjectile/Variables/_4.html", [], "AHomingProjectile");
addToContainers_variable("", "Curve for acceleration to apply each frame. If no curve is specified no acceleration will be applied and projectile will be at a constant speed. X axis = time Y axis = (Value + 1) * CurrentSpeed Probably wanna use really small Y axis values in the range of like 0 to 0.01", "Docs/Classes/AHomingProjectile/Variables/_5.html", [], "AHomingProjectile");
addToContainers_class("AInstantHitProjectile", "A projectile without a mesh that will cause damage the moment it is fired. Currently best projectile to use for melee type attacks.", "Docs/Classes/AInstantHitProjectile/AInstantHitProjectile.html", ["instant", "hit", "projectile"], "");
addToContainers_function("AInstantHitProjectile", "", "Docs/Classes/AInstantHitProjectile/Functions/AInstantHitProjectile.html", ["instant", "hit", "projectile"], "AInstantHitProjectile");
addToContainers_variable("HitResult", "Hit result for passing into AProjectileBase::OnHit(). Declared here to avoid recreating every time fired", "Docs/Classes/AInstantHitProjectile/Variables/HitResult.html", ["hit", "result"], "AInstantHitProjectile");
addToContainers_variable("StartLocation", "Location projectile was fired from. Cached for fog calculations", "Docs/Classes/AInstantHitProjectile/Variables/StartLocation.html", ["start", "location"], "AInstantHitProjectile");
addToContainers_variable("EndLocation", "Location of target when projectile was fired. Cached for fog calculations", "Docs/Classes/AInstantHitProjectile/Variables/EndLocation.html", ["end", "location"], "AInstantHitProjectile");
addToContainers_class("ALeaveThenComeBackProjectile", "A projectile that travels for a while, disappears, then reappears at another location. e.g. - SCII zerg ravager\'s ability - terran nukes Uses a projectile movement component that allows defining the exact position of the projectile. The movement component has two modes: - straight firing mode, which would be something you could use for the zerg ravager ability. - precise mode, where you define the exact location/rotation of the projectile at all times in its flight using curves (if using this mode make sure to specify the curves you want to use on the movement component). FIXME: Think of a different name maybe My notes: quite a bit of unused data on this if choosing MovementMode == CurveAssets.", "Docs/Classes/ALeaveThenComeBackProjectile/ALeaveThenComeBackProjectile.html", ["leave", "then", "come", "back", "projectile"], "");
addToContainers_function("ALeaveThenComeBackProjectile", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/ALeaveThenComeBackProjectile.html", ["leave", "then", "come", "back", "projectile"], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Movement component", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("DescentStartingRotation", "These will go unused if MovementMode == CurveAssets", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/DescentStartingRotation.html", ["descent", "starting", "rotation"], "ALeaveThenComeBackProjectile");
addToContainers_variable("DescentStartingLocation", "", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/DescentStartingLocation.html", ["descent", "starting", "location"], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "How long the projectile\'s ascent lasts", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_1.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "The time between when the projectile finishes its ascent and when it reappear to do its descent.", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_2.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "If choosing CurveAssets make sure to set the curves on the movement component", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_3.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "How fast projectile moves when ascending", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_4.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Angle to use for ascent. Yaw/Roll are relative to looking towards the target location and pitch is always whatever you set here (unnecessary piece of info). 90 pitch = fires straight into the air. Note to self: large angles may cause projectile to be outside of fog area", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_5.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Height to spawn projectile at for descent. No matter DescentRelativeAngle\'s values the descent always starts this high above the target location.", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_6.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "How fast to move for descent", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_7.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Angle of projectile to use for decent. This is relative to looking towards the target location (unnecessary piece of info). -90 on pitch = straight down Whatever angle you choose the projectile will always be aimed at (and hit if nothing else gets in the way) the target location. Note to self: large angles may cause projectile to be outside of fog area", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_8.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "-----------------------------------------------------------------------------------------", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_9.html", [], "ALeaveThenComeBackProjectile");
addToContainers_class("ANoCollisionTimedProjectile", "A projectile with no collision that is not replicated. This kind of projectile is similar to quad cannons in C&C generals, but can optionally be set to deal damage after a delay instead of instantly. Hits always register at target location. These projectiles can be arcing. They can also pseudo collide by just checking if they are close enough to their target. The movement component has a few extra variables on it that you might want to look at if this is an arcing projectile.", "Docs/Classes/ANoCollisionTimedProjectile/ANoCollisionTimedProjectile.html", ["no", "collision", "timed", "projectile"], "");
addToContainers_function("ANoCollisionTimedProjectile", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/ANoCollisionTimedProjectile.html", ["no", "collision", "timed", "projectile"], "ANoCollisionTimedProjectile");
addToContainers_variable("", "Mesh", "Docs/Classes/ANoCollisionTimedProjectile/Variables/.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "Movement component", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_1.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "A workaround if projectile appears to be disappearing before/after reaching target. If projectiles appear to be disappearing too far before/after target then adjust this. Lower values imply hit happens sooner", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_2.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "Decides how fast a hit is triggered. Only modify this if you want projectiles to deal hits before/after the actual mesh reaches its target, for example like quad cannons in C&C generals. 0 = hit is dealt the moment projectile is fired 0.5 = hit is dealt after projectile travels half the distance between it and the target 1 = hit is dealt when projectile considers itself as reached target 1+ = hit is dealt sometime after projectile considers itself as reached target", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_3.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "If this is greater than 0 then when the projectile reaches its target or target location it will not disappear but will stay there. Then after this delay is will register a hit. This will be ignored if HitSpeedModifier != 1.f I added this so artillery beacons can stay at where they are thrown for a little until disappearing.", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_4.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "If projectile is fired and target falls to zero health before hit is registered should this still register a hit i.e. for visuals and AoE damage purposes. If false then projectile still travels full distance but then just disappears", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_5.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("TimerHandle_Hit", "Timer handle for when to register hit on target", "Docs/Classes/ANoCollisionTimedProjectile/Variables/TimerHandle_Hit.html", ["timer", "handle_", "hit"], "ANoCollisionTimedProjectile");
addToContainers_variable("HitResult", "Hit result for passing into AProjectileBase::OnHit(). Declared here to avoid recreating every time fired", "Docs/Classes/ANoCollisionTimedProjectile/Variables/HitResult.html", ["hit", "result"], "ANoCollisionTimedProjectile");
addToContainers_variable("", "", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_6.html", [], "ANoCollisionTimedProjectile");
addToContainers_struct("FParticleAudioPair", "A particle system and a sound", "Docs/Structs/FParticleAudioPair/FParticleAudioPair.html", ["particle", "audio", "pair"], "");
addToContainers_function("FParticleAudioPair", "", "Docs/Structs/FParticleAudioPair/Functions/FParticleAudioPair.html", ["particle", "audio", "pair"], "FParticleAudioPair");
addToContainers_variable("", "-----------------------------------------------------------", "Docs/Structs/FParticleAudioPair/Variables/.html", [], "FParticleAudioPair");
addToContainers_variable("", "", "Docs/Structs/FParticleAudioPair/Variables/_1.html", [], "FParticleAudioPair");
addToContainers_class("AProjectileBase", "Base class for all projectiles. FIXME Some things to do: - For performance: AddToPool is sometimes called more than once before adding projectile to pool - first call is with some of the params false, then called again later with some params true. Therefore it repeats the mesh hiding, tick disabling etc logic which is ineffecient. I have created a new function SetupForEnteringObjectPool() to try and help with this but it isn\'t called anywhere yet, so just baby steps towards fixing it.", "Docs/Classes/AProjectileBase/AProjectileBase.html", ["projectile", "base"], "");
addToContainers_function("AProjectileBase", "", "Docs/Classes/AProjectileBase/Functions/AProjectileBase.html", ["projectile", "base"], "AProjectileBase");
addToContainers_variable("NUM_FOG_LOCATIONS", "Number of inline array elements for fog locations arrays. Saves on performance. Increase this to adjust performance", "Docs/Classes/AProjectileBase/Variables/NUM_FOG_LOCATIONS.html", ["u", "m_", "f", "o", "g_", "l", "o", "c", "a", "t", "i", "o", "n", "s"], "AProjectileBase");
addToContainers_variable("", "Trail particles", "Docs/Classes/AProjectileBase/Variables/.html", [], "AProjectileBase");
addToContainers_variable("", "Hit results from capsule sweep against viable collision channels", "Docs/Classes/AProjectileBase/Variables/_1.html", [], "AProjectileBase");
addToContainers_variable("", "Base damage to deal to what the projectile impacts. Overridable by firer", "Docs/Classes/AProjectileBase/Variables/_2.html", [], "AProjectileBase");
addToContainers_variable("", "Type of damage this projectile deals ot what it impacts. Overridable by firer", "Docs/Classes/AProjectileBase/Variables/_3.html", [], "AProjectileBase");
addToContainers_variable("", "Amount of randomness to impact damage. Overridable by firer. OutgoingDamage = Damage * RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AProjectileBase/Variables/_4.html", [], "AProjectileBase");
addToContainers_variable("", "Base amount of AoE damage this projectile deals", "Docs/Classes/AProjectileBase/Variables/_5.html", [], "AProjectileBase");
addToContainers_variable("", "Damage type for AoE damage", "Docs/Classes/AProjectileBase/Variables/_6.html", [], "AProjectileBase");
addToContainers_variable("", "Amount of randomness to apply to AoE damage", "Docs/Classes/AProjectileBase/Variables/_7.html", [], "AProjectileBase");
addToContainers_variable("", "Particles and audio to play when projectile hits a surface. The entry for the key \'Default\' will be used if the projectile hits a surface without a physical material", "Docs/Classes/AProjectileBase/Variables/_8.html", [], "AProjectileBase");
addToContainers_variable("", "The contents of ImpactEffectsTMap that gets populated in post edit. Here for performance", "Docs/Classes/AProjectileBase/Variables/_9.html", [], "AProjectileBase");
addToContainers_variable("", "Delay between when a hit happens and when damage is dealt. Usually you want this as 0 but things like nukes may want small delays.", "Docs/Classes/AProjectileBase/Variables/_10.html", [], "AProjectileBase");
addToContainers_variable("", "TRAIL particles: duration to allow trail particles to appear after hit. If 0 then trail particles will disappear the moment hit is registered", "Docs/Classes/AProjectileBase/Variables/_11.html", [], "AProjectileBase");
addToContainers_variable("", "Camera shake to play at projectile impact point. Optional", "Docs/Classes/AProjectileBase/Variables/_12.html", [], "AProjectileBase");
addToContainers_variable("", "Radius of ImpactCameraShake", "Docs/Classes/AProjectileBase/Variables/_13.html", [], "AProjectileBase");
addToContainers_variable("", "Falloff of ImpactCameraShake", "Docs/Classes/AProjectileBase/Variables/_14.html", [], "AProjectileBase");
addToContainers_variable("ListeningForOnHit", "An ability that wants to know when the projectile hits something", "Docs/Classes/AProjectileBase/Variables/ListeningForOnHit.html", ["listening", "for", "on", "hit"], "AProjectileBase");
addToContainers_variable("ListeningForOnHitData", "The unique ID for ListeningForOnHit", "Docs/Classes/AProjectileBase/Variables/ListeningForOnHitData.html", ["listening", "for", "on", "hit", "data"], "AProjectileBase");
addToContainers_variable("", "Reference to selectable that fired this projectile", "Docs/Classes/AProjectileBase/Variables/_15.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to target this projectile is aimed at", "Docs/Classes/AProjectileBase/Variables/_16.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to player controller to play camera shakes", "Docs/Classes/AProjectileBase/Variables/_17.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AProjectileBase/Variables/_18.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/AProjectileBase/Variables/_19.html", [], "AProjectileBase");
addToContainers_variable("", "BP to to use as TMap key to know what pool to add self back to when complete", "Docs/Classes/AProjectileBase/Variables/_20.html", [], "AProjectileBase");
addToContainers_variable("TimerManager", "World timer manager", "Docs/Classes/AProjectileBase/Variables/TimerManager.html", ["timer", "manager"], "AProjectileBase");
addToContainers_variable("TimerHandle_Lifetime", "Timer handle for checking how long before we decide projectile will never register a hit so just psuedo destroy it and add it back to pool", "Docs/Classes/AProjectileBase/Variables/TimerHandle_Lifetime.html", ["timer", "handle_", "lifetime"], "AProjectileBase");
addToContainers_variable("TimerHandle_DealDamage", "Timer handle for calling DealDamage", "Docs/Classes/AProjectileBase/Variables/TimerHandle_DealDamage.html", ["timer", "handle_", "deal", "damage"], "AProjectileBase");
addToContainers_variable("TimerHandle_TrailParticles", "Timer handle for duration of trail particles after a hit. Here so trail particles don\'t disappear the moment proejectile hits", "Docs/Classes/AProjectileBase/Variables/TimerHandle_TrailParticles.html", ["timer", "handle_", "trail", "particles"], "AProjectileBase");
addToContainers_variable("", "All actors that have a component overlapping inside this radius will be damaged. 0 = only damage impact target", "Docs/Classes/AProjectileBase/Variables/_21.html", [], "AProjectileBase");
addToContainers_variable("", "Curve to use for the damage falloff of the AoE. If no curve is set then no falloff will happen. X axis = distance from impact point to target Y axis = percentage of damage that will be dealt. Therefore a decreasing curve makes sense (implies as range increases damage decreases) Some notes: This is automatically normalized to whatever range you use. i.e. the values of the axis do not matter, what matters is the overall shape of the curve. For clarity though you may want to have the Y axis in the range [0, 1] and the X axis in the range [0, AoERadius]. A single straight line is currently not supported. If you want to do full damage no matter the range you would need to do a horizontal line and after that have a line that drops very sharply", "Docs/Classes/AProjectileBase/Variables/_22.html", [], "AProjectileBase");
addToContainers_variable("OwningTeam", "Team projectile belongs to. Can change because object pooling", "Docs/Classes/AProjectileBase/Variables/OwningTeam.html", ["owning", "team"], "AProjectileBase");
addToContainers_variable("", "Can the AoE hit/damage enemies?", "Docs/Classes/AProjectileBase/Variables/_23.html", [], "AProjectileBase");
addToContainers_variable("", "Can the AoE hit/damage selectables on our team?", "Docs/Classes/AProjectileBase/Variables/_24.html", [], "AProjectileBase");
addToContainers_variable("", "Whether FCollisionQueryParams::bReturnPhysicalMateral should be set to true for hit results. Could just set it to true always but I feel that perhaps it\'s a little performance intensive to get the physical material for a hit result so hence this variable exists", "Docs/Classes/AProjectileBase/Variables/_25.html", [], "AProjectileBase");
addToContainers_variable("AoEObjectQueryParams", "Holds what object types to check for when checking what is hit by AoE", "Docs/Classes/AProjectileBase/Variables/AoEObjectQueryParams.html", ["ao", "e", "object", "query", "params"], "AProjectileBase");
addToContainers_variable("DamageCurveMaxY", "DamageFalloffCurve values", "Docs/Classes/AProjectileBase/Variables/DamageCurveMaxY.html", ["damage", "curve", "max", "y"], "AProjectileBase");
addToContainers_variable("", "", "Docs/Classes/AProjectileBase/Variables/_26.html", [], "AProjectileBase");
addToContainers_variable("", "", "Docs/Classes/AProjectileBase/Variables/_27.html", [], "AProjectileBase");
addToContainers_class("UHomingProjectileMovement", "Movement component for homing projectiles that never miss their target. Very basic. Just always make updated component face target", "Docs/Classes/UHomingProjectileMovement/UHomingProjectileMovement.html", ["homing", "projectile", "movement"], "");
addToContainers_function("UHomingProjectileMovement", "", "Docs/Classes/UHomingProjectileMovement/Functions/UHomingProjectileMovement.html", ["homing", "projectile", "movement"], "UHomingProjectileMovement");
addToContainers_variable("TimeSpentInFlight", "Time projectile has been in flight", "Docs/Classes/UHomingProjectileMovement/Variables/TimeSpentInFlight.html", ["time", "spent", "in", "flight"], "UHomingProjectileMovement");
addToContainers_variable("LastTargetLocation", "Location target was at last tick", "Docs/Classes/UHomingProjectileMovement/Variables/LastTargetLocation.html", ["last", "target", "location"], "UHomingProjectileMovement");
addToContainers_variable("TargetBoundsRadius", "Radius of targets bounds", "Docs/Classes/UHomingProjectileMovement/Variables/TargetBoundsRadius.html", ["target", "bounds", "radius"], "UHomingProjectileMovement");
addToContainers_variable("InitialSpeed", "~ Variables set by owning projectile ", "Docs/Classes/UHomingProjectileMovement/Variables/InitialSpeed.html", ["initial", "speed"], "UHomingProjectileMovement");
addToContainers_variable("MaxSpeed", "", "Docs/Classes/UHomingProjectileMovement/Variables/MaxSpeed.html", ["max", "speed"], "UHomingProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UHomingProjectileMovement/Variables/.html", [], "UHomingProjectileMovement");
addToContainers_variable("", "Reference to owning projectile", "Docs/Classes/UHomingProjectileMovement/Variables/_1.html", [], "UHomingProjectileMovement");
addToContainers_class("UNoCollisionProjectileMovement", "Projectile movement component for ANoCollisionTimedProjectile.", "Docs/Classes/UNoCollisionProjectileMovement/UNoCollisionProjectileMovement.html", ["no", "collision", "projectile", "movement"], "");
addToContainers_function("UNoCollisionProjectileMovement", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/UNoCollisionProjectileMovement.html", ["no", "collision", "projectile", "movement"], "UNoCollisionProjectileMovement");
addToContainers_variable("Projectile", "Projectile this move comp belongs to", "Docs/Classes/UNoCollisionProjectileMovement/Variables/Projectile.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("TargetLocation", "The world location the projectile is being fired at but only if this projectile also arcs. If it\'s being fired at an actor then this will likely be set to some invalid value", "Docs/Classes/UNoCollisionProjectileMovement/Variables/TargetLocation.html", ["target", "location"], "UNoCollisionProjectileMovement");
addToContainers_variable("TargetType", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/TargetType.html", ["target", "type"], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "Value that gets passed into UGameplayStatics::SuggestProjectileVelocity", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_1.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "The value that gets passed into UGameplayStatics::SuggestProjectileVelocity_CustomArc. Play around with this to get the arc you want.", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_2.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "Only relevant if the projectile is being fired at a location and has non-zero gravity. How close the projectile has to get to the target location for it to be considered hit it", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_3.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "Only relevant if the projectile is being fired at a location and has non-zero gravity. How long the projectile can exist for before it will magically be added to pool. No hit will be registered. Counted from the time it is fired. If the projectile is constantly missing its target then increase HitDistance", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_4.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_5.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_6.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_7.html", [], "UNoCollisionProjectileMovement");
addToContainers_class("UPreciseProjectileMovement", "Has two modes: - \'Regular straight shooting\' mode - \'Control exact location and rotation of projectile by using curve assets\' mode, hence the name of this projectile Probably won\'t support sliding (for performance). Probably won\'t support bouncing (for performance). Perhaps deriving from UActorComponent could be possible.", "Docs/Classes/UPreciseProjectileMovement/UPreciseProjectileMovement.html", ["precise", "projectile", "movement"], "");
addToContainers_variable("", "Curve that has the position offsets relative to where the projectile was launched. X axis of curve = time Y axis of curve = offset Positions are relative to the launch location. Then at some point they switch to being relative to the target location. The switch happens at ALeaveThenComeBackProjectile::AscentDuration + AscentDelay into the curve. Tip for creating these curves: Make sure the mesh\'s location relative to the sphere comp is how you want it because when you start changing it then these curves will start to look different. Note to self: think of a way to correct for this. A simple \'offset\' FVector might be enough.", "Docs/Classes/UPreciseProjectileMovement/Variables/.html", [], "UPreciseProjectileMovement");
addToContainers_variable("", "Rotation around axis. X curve = roll Y curve = pitch Z curve = yaw X axis = time Y axis = amount of rotation in degrees, range: [0, 360)", "Docs/Classes/UPreciseProjectileMovement/Variables/_1.html", [], "UPreciseProjectileMovement");
addToContainers_variable("ReferenceLocation", "Location/rotation curves are relative to", "Docs/Classes/UPreciseProjectileMovement/Variables/ReferenceLocation.html", ["reference", "location"], "UPreciseProjectileMovement");
addToContainers_variable("ReferenceRotation", "", "Docs/Classes/UPreciseProjectileMovement/Variables/ReferenceRotation.html", ["reference", "rotation"], "UPreciseProjectileMovement");
addToContainers_variable("TimeSpentAlive", "", "Docs/Classes/UPreciseProjectileMovement/Variables/TimeSpentAlive.html", ["time", "spent", "alive"], "UPreciseProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UPreciseProjectileMovement/Variables/_2.html", [], "UPreciseProjectileMovement");
addToContainers_variable("bTickMostlyPaused", "", "Docs/Classes/UPreciseProjectileMovement/Variables/bTickMostlyPaused.html", ["tick", "mostly", "paused"], "UPreciseProjectileMovement");
addToContainers_class("URTSProjectileMovement", "An exact replica of ProjectileMovementComponent except StopSimulating has been overridden to not call SetUpdatedComponent which is desired behavior with pooled projectiles. This could have easily been done without needing to create another class but performance may be slightly better this way. Slightly is pushing it though.", "Docs/Classes/URTSProjectileMovement/URTSProjectileMovement.html", ["r", "t", "s", "projectile", "movement"], "");
addToContainers_struct("FUint8Set", "", "Docs/Structs/FUint8Set/FUint8Set.html", ["uint8", "set"], "");
addToContainers_variable("Container", "", "Docs/Structs/FUint8Set/Variables/Container.html", [], "FUint8Set");
addToContainers_struct("FMacroCommandReason", "Basic struct that holds the reason a macro command is being issued. Contains two parts: info about the command and info about the original command that triggered this command. e.g. if we want to build a battlecruiser to strengthen our army but we don\'t have a starport and we don\'t have and SCV then we will need to train an SCV. The reason that goes along with training that SCV will be: PrimaryReason = EMacroCommandSecondaryType::TrainUnit AuxilleryInfo = SCV OriginalCommand_PrimaryReason = EMacroCommandType::TrainArmyUnit OriginalCommand_AuxilleryInfo = EUnitType::Battlecruiser", "Docs/Structs/FMacroCommandReason/FMacroCommandReason.html", ["macro", "command", "reason"], "");
addToContainers_function("FMacroCommandReason", "Never call this", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Ctor for command that is not a chained command", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_1.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_2.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_3.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_4.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Ctors for calling RecursiveTryBuild inside a decide function", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_5.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_6.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Ctors for auxillery info too", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_7.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_8.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_9.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Added this ctor after implementing upgrades as prerequisites. Hope it\'s right", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_10.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_11.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_variable("ActualCommand", "What the command will actually do", "Docs/Structs/FMacroCommandReason/Variables/ActualCommand.html", ["actual", "command"], "FMacroCommandReason");
addToContainers_variable("AuxilleryInfo", "Additional info about the reason for the command. Always just use a straight static_cast to assign this value", "Docs/Structs/FMacroCommandReason/Variables/AuxilleryInfo.html", ["auxillery", "info"], "FMacroCommandReason");
addToContainers_variable("OriginalCommand_PrimaryReason", "Original command: primary reason", "Docs/Structs/FMacroCommandReason/Variables/OriginalCommand_PrimaryReason.html", ["original", "command_", "primary", "reason"], "FMacroCommandReason");
addToContainers_variable("OriginalCommand_AuxilleryInfo", "Original command: auxillery info", "Docs/Structs/FMacroCommandReason/Variables/OriginalCommand_AuxilleryInfo.html", ["original", "command_", "auxillery", "info"], "FMacroCommandReason");
addToContainers_struct("FSavingUpForInfo", "Info about whether the player is saving up resources for something and if they are what they are saving for and who will produce it", "Docs/Structs/FSavingUpForInfo/FSavingUpForInfo.html", ["saving", "up", "for", "info"], "");
addToContainers_function("FSavingUpForInfo", "", "Docs/Structs/FSavingUpForInfo/Functions/FSavingUpForInfo.html", ["saving", "up", "for", "info"], "FSavingUpForInfo");
addToContainers_variable("1", "If false then we\'re not saving up for anything", "Docs/Structs/FSavingUpForInfo/Variables/1.html", [], "FSavingUpForInfo");
addToContainers_variable("1", "True if the building is being built to serve as a resource depot. Only up to date if saving up for a building", "Docs/Structs/FSavingUpForInfo/Variables/1_1.html", [], "FSavingUpForInfo");
addToContainers_variable("", "If saving for a resource depot the resource spot to build depot near", "Docs/Structs/FSavingUpForInfo/Variables/.html", [], "FSavingUpForInfo");
addToContainers_variable("Building", "", "Docs/Structs/FSavingUpForInfo/Variables/Building.html", [], "FSavingUpForInfo");
addToContainers_variable("Unit", "", "Docs/Structs/FSavingUpForInfo/Variables/Unit.html", [], "FSavingUpForInfo");
addToContainers_variable("Upgrade", "", "Docs/Structs/FSavingUpForInfo/Variables/Upgrade.html", [], "FSavingUpForInfo");
addToContainers_variable("", "The thing that will produce what we\'re saving up for. Can be left null at which point we may have to try and find one when the time comes when player has enough resources and wants to build it", "Docs/Structs/FSavingUpForInfo/Variables/_1.html", [], "FSavingUpForInfo");
addToContainers_variable("", "", "Docs/Structs/FSavingUpForInfo/Variables/_2.html", [], "FSavingUpForInfo");
addToContainers_variable("CommandReason", "The reason we want to build what we are saving up for", "Docs/Structs/FSavingUpForInfo/Variables/CommandReason.html", ["command", "reason"], "FSavingUpForInfo");
addToContainers_struct("FQueueWaitingInfo", "Info that says what production queue the player is waiting to become un-full so they can add an item to it. This is kind of similar to FSavingUpForInfo.", "Docs/Structs/FQueueWaitingInfo/FQueueWaitingInfo.html", ["queue", "waiting", "info"], "");
addToContainers_function("FQueueWaitingInfo", "", "Docs/Structs/FQueueWaitingInfo/Functions/FQueueWaitingInfo.html", ["queue", "waiting", "info"], "FQueueWaitingInfo");
addToContainers_variable("bWaiting", "", "Docs/Structs/FQueueWaitingInfo/Variables/bWaiting.html", [], "FQueueWaitingInfo");
addToContainers_variable("", "Building that owns the queue", "Docs/Structs/FQueueWaitingInfo/Variables/.html", [], "FQueueWaitingInfo");
addToContainers_variable("Queue", "Building\'s queue we\'re waiting on", "Docs/Structs/FQueueWaitingInfo/Variables/Queue.html", [], "FQueueWaitingInfo");
addToContainers_variable("Building", "What we will put in the queue. Will be one of these 3", "Docs/Structs/FQueueWaitingInfo/Variables/Building.html", [], "FQueueWaitingInfo");
addToContainers_variable("Unit", "", "Docs/Structs/FQueueWaitingInfo/Variables/Unit.html", [], "FQueueWaitingInfo");
addToContainers_variable("Upgrade", "", "Docs/Structs/FQueueWaitingInfo/Variables/Upgrade.html", [], "FQueueWaitingInfo");
addToContainers_variable("CommandReason", "Reason why we want to produce what we want to produce", "Docs/Structs/FQueueWaitingInfo/Variables/CommandReason.html", ["command", "reason"], "FQueueWaitingInfo");
addToContainers_struct("FTryingToPlaceBuildingInfo", "Info about status of trying to place a building (depots and non-depots). We limit the number of sweeps the player can do each tick, meaning sometimes it can take multiple ticks to find a suitable location to place a building", "Docs/Structs/FTryingToPlaceBuildingInfo/FTryingToPlaceBuildingInfo.html", ["trying", "to", "place", "building", "info"], "");
addToContainers_function("FTryingToPlaceBuildingInfo", "-------------------------------------------------", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/FTryingToPlaceBuildingInfo.html", ["trying", "to", "place", "building", "info"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("PendingBuilding", "The type of building we\'re trying to build. This will be flagged as EBuildingType::NotBuilding if not trying to place a building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/PendingBuilding.html", ["pending", "building"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("bIsForDepot", "True if we want to place PendingBuilding as a resource depot", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/bIsForDepot.html", ["is", "for", "depot"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("", "If placing a resource depot, the resource spot to place depot near", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/.html", [], "FTryingToPlaceBuildingInfo");
addToContainers_variable("bUsingConstructionYard", "Whether to use ProducerBuilding or ProducerInfantry. True means use building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/bUsingConstructionYard.html", ["using", "construction", "yard"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("", "The construction yard that will build this building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/_1.html", [], "FTryingToPlaceBuildingInfo");
addToContainers_variable("", "The worker unit that will build this building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/_2.html", [], "FTryingToPlaceBuildingInfo");
addToContainers_variable("CommandReason", "The reason why we want to build the building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/CommandReason.html", ["command", "reason"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumBuildLocationsTriedThisTick", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumBuildLocationsTriedThisTick.html", ["num", "build", "locations", "tried", "this", "tick"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumResourceDepotSpotsTried", "=======================================================================================", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumResourceDepotSpotsTried.html", ["num", "resource", "depot", "spots", "tried"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("ResourceDepotBuildLocsIndex", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/ResourceDepotBuildLocsIndex.html", ["resource", "depot", "build", "locs", "index"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumGeneralAreasExhausted", "=======================================================================================", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumGeneralAreasExhausted.html", ["num", "general", "areas", "exhausted"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("BuildLocMultipliersIndex", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/BuildLocMultipliersIndex.html", ["build", "loc", "multipliers", "index"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumLocationsTriedForCurrentGeneralArea", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumLocationsTriedForCurrentGeneralArea.html", ["num", "locations", "tried", "for", "current", "general", "area"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("GeneralArea", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/GeneralArea.html", ["general", "area"], "FTryingToPlaceBuildingInfo");
addToContainers_struct("FSingleBuildsInTabInfo", "@See FBuildsInTabBuildingInfo A single entry. There\'s one for each queue producing a building with the BuildsInTab method", "Docs/Structs/FSingleBuildsInTabInfo/FSingleBuildsInTabInfo.html", ["single", "builds", "in", "tab", "info"], "");
addToContainers_function("FSingleBuildsInTabInfo", "Never call this", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FSingleBuildsInTabInfo.html", ["single", "builds", "in", "tab", "info"], "FSingleBuildsInTabInfo");
addToContainers_function("FSingleBuildsInTabInfo", "Resource depot ctor", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FSingleBuildsInTabInfo_1.html", ["single", "builds", "in", "tab", "info"], "FSingleBuildsInTabInfo");
addToContainers_function("FSingleBuildsInTabInfo", "Regular building ctor", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FSingleBuildsInTabInfo_2.html", ["single", "builds", "in", "tab", "info"], "FSingleBuildsInTabInfo");
addToContainers_variable("Building", "Building we\'re building. NotBuilding if not building anything", "Docs/Structs/FSingleBuildsInTabInfo/Variables/Building.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("bForResourceDepot", "Whether Building is being built to serve as a resource depot or not", "Docs/Structs/FSingleBuildsInTabInfo/Variables/bForResourceDepot.html", ["for", "resource", "depot"], "FSingleBuildsInTabInfo");
addToContainers_variable("", "The building that builds", "Docs/Structs/FSingleBuildsInTabInfo/Variables/.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("", "The resource spot to build depot near if building a depot", "Docs/Structs/FSingleBuildsInTabInfo/Variables/_1.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("Queue", "Queue that is producing building", "Docs/Structs/FSingleBuildsInTabInfo/Variables/Queue.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("bProductionComplete", "If true then the production has completed and building will be placed on next tick", "Docs/Structs/FSingleBuildsInTabInfo/Variables/bProductionComplete.html", ["production", "complete"], "FSingleBuildsInTabInfo");
addToContainers_variable("CommandReason", "Reason why we want to build this building", "Docs/Structs/FSingleBuildsInTabInfo/Variables/CommandReason.html", ["command", "reason"], "FSingleBuildsInTabInfo");
addToContainers_struct("FBuildsInTabBuildingInfo", "Info about buildings we are building that uses the BuildsInTab build method.", "Docs/Structs/FBuildsInTabBuildingInfo/FBuildsInTabBuildingInfo.html", ["builds", "in", "tab", "building", "info"], "");
addToContainers_variable("", "Array of all BuildsInTab production by this player. Both in progress and ready to place info will be in here", "Docs/Structs/FBuildsInTabBuildingInfo/Variables/.html", [], "FBuildsInTabBuildingInfo");
addToContainers_class("ACPUPlayerAIController", "AI controller for a CPU player. This class\'s performance will be more affected by the size of faction info and the number of selectables this player controls than other code Would like to make these more event driven instead of querying state each tick but it is much more work than I thought Perhaps make this a base class and have two different AI controllers: - A general AI controller that isn\'t specific to any type of faction. It is the most general and will be the hardest to program - An AI controller that has a fixed build order defined for each faction", "Docs/Classes/ACPUPlayerAIController/ACPUPlayerAIController.html", ["c", "p", "u", "player", "a", "i", "controller"], "");
addToContainers_function("ACPUPlayerAIController", "", "Docs/Classes/ACPUPlayerAIController/Functions/ACPUPlayerAIController.html", ["c", "p", "u", "player", "a", "i", "controller"], "ACPUPlayerAIController");
addToContainers_variable("Difficulty", "Difficulty of this player", "Docs/Classes/ACPUPlayerAIController/Variables/Difficulty.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to player state", "Docs/Classes/ACPUPlayerAIController/Variables/.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to player states faction info", "Docs/Classes/ACPUPlayerAIController/Variables/_1.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ACPUPlayerAIController/Variables/_2.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ACPUPlayerAIController/Variables/_3.html", [], "ACPUPlayerAIController");
addToContainers_variable("StartingSpotLocation", "The world coords of where we started for match. If this information ever needs to be moved to PS then make sure to remove this variable from here", "Docs/Classes/ACPUPlayerAIController/Variables/StartingSpotLocation.html", ["starting", "spot", "location"], "ACPUPlayerAIController");
addToContainers_variable("StartingViewYaw", "The yaw rotation the player should start the match at. It will use this when trying to place buildings", "Docs/Classes/ACPUPlayerAIController/Variables/StartingViewYaw.html", ["starting", "view", "yaw"], "ACPUPlayerAIController");
addToContainers_variable("BuildsInTabBuildingInfo", "Info about a building we\'re building that uses the BuildsInTab build method", "Docs/Classes/ACPUPlayerAIController/Variables/BuildsInTabBuildingInfo.html", ["builds", "in", "tab", "building", "info"], "ACPUPlayerAIController");
addToContainers_variable("TryingToPlaceBuildingInfo", "Info about the building we\'re trying to place. Only needed because of self-imposed limit on number of sweeps allowed per tick", "Docs/Classes/ACPUPlayerAIController/Variables/TryingToPlaceBuildingInfo.html", ["trying", "to", "place", "building", "info"], "ACPUPlayerAIController");
addToContainers_variable("ThingSavingUpFor", "Info about what we\'re saving up for", "Docs/Classes/ACPUPlayerAIController/Variables/ThingSavingUpFor.html", ["thing", "saving", "up", "for"], "ACPUPlayerAIController");
addToContainers_variable("QueueWereWaitingToFinish", "Holds something we want to build + references a queue we want to build it from. This is for when player wants to build something but the queue is full", "Docs/Classes/ACPUPlayerAIController/Variables/QueueWereWaitingToFinish.html", ["queue", "were", "waiting", "to", "finish"], "ACPUPlayerAIController");
addToContainers_variable("", "", "Docs/Classes/ACPUPlayerAIController/Variables/_4.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "", "Docs/Classes/ACPUPlayerAIController/Variables/_5.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Set of resource spots that are counted as \'aquired\'. Even if the depot is not fully constructed it will add an entry to this", "Docs/Classes/ACPUPlayerAIController/Variables/_6.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps resource type to the number of resource spots that have been aquired for that resource type", "Docs/Classes/ACPUPlayerAIController/Variables/_7.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps each resource spot to the selectable IDs of the collectors that are collecing from it", "Docs/Classes/ACPUPlayerAIController/Variables/_8.html", [], "ACPUPlayerAIController");
addToContainers_variable("TriedRecursiveBuildBuildings", "Sets of what has been tried by the current RecursiveTryBuild functions. These are here to avoid an infinite recursion situation", "Docs/Classes/ACPUPlayerAIController/Variables/TriedRecursiveBuildBuildings.html", ["tried", "recursive", "build", "buildings"], "ACPUPlayerAIController");
addToContainers_variable("TriedRecursiveBuildUnits", "", "Docs/Classes/ACPUPlayerAIController/Variables/TriedRecursiveBuildUnits.html", ["tried", "recursive", "build", "units"], "ACPUPlayerAIController");
addToContainers_variable("NumWorkers", "A worker is a unit that can build at least one building", "Docs/Classes/ACPUPlayerAIController/Variables/NumWorkers.html", ["num", "workers"], "ACPUPlayerAIController");
addToContainers_variable("NumBarracks", "Barracks is a building that can train an attacking type unit. Don\'t know what this counts exactly: either number of barracks or number of buildings built for the purpose of training attacking type units", "Docs/Classes/ACPUPlayerAIController/Variables/NumBarracks.html", ["num", "barracks"], "ACPUPlayerAIController");
addToContainers_variable("NumBaseDefenses", "Number of base defense buildings the player owns", "Docs/Classes/ACPUPlayerAIController/Variables/NumBaseDefenses.html", ["num", "base", "defenses"], "ACPUPlayerAIController");
addToContainers_variable("ArmyStrength", "Strength of army. Units only, not base defenses", "Docs/Classes/ACPUPlayerAIController/Variables/ArmyStrength.html", ["army", "strength"], "ACPUPlayerAIController");
addToContainers_variable("", "I am using this to quickly identify which units are idle during the pretick phase", "Docs/Classes/ACPUPlayerAIController/Variables/_9.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps building type to how many of them are being produced ", "Docs/Classes/ACPUPlayerAIController/Variables/_10.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps unit type to how many of them are being produced", "Docs/Classes/ACPUPlayerAIController/Variables/_11.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "If upgrade is in set then it is being researched", "Docs/Classes/ACPUPlayerAIController/Variables/_12.html", [], "ACPUPlayerAIController");
addToContainers_variable("PendingCommands_ArmyStrength", "How much army strength is expected from the pending commands", "Docs/Classes/ACPUPlayerAIController/Variables/PendingCommands_ArmyStrength.html", ["pending", "commands_", "army", "strength"], "ACPUPlayerAIController");
addToContainers_variable("", "Every command will have an entry in pending commands and in command reasons", "Docs/Classes/ACPUPlayerAIController/Variables/_13.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "", "Docs/Classes/ACPUPlayerAIController/Variables/_14.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Commands that are not build resource depot or train collector", "Docs/Classes/ACPUPlayerAIController/Variables/_15.html", [], "ACPUPlayerAIController");
addToContainers_variable("BUILD_LOC_MULTIPLERS_NUM", "Number of entries in BuildLocMultipliers", "Docs/Classes/ACPUPlayerAIController/Variables/BUILD_LOC_MULTIPLERS_NUM.html", ["u", "i", "l", "d_", "l", "o", "c_", "m", "u", "l", "t", "i", "p", "l", "e", "r", "s_", "n", "u", "m"], "ACPUPlayerAIController");
addToContainers_variable("BuildLocMultipliers[BUILD_LOC_MULTIPLERS_NUM]", "An array of different multipliers to apply to build locations when trying to find a viable build location for a building", "Docs/Classes/ACPUPlayerAIController/Variables/BuildLocMultipliers[BUILD_LOC_MULTIPLERS_NUM].html", ["build", "loc", "multipliers[", "b", "u", "i", "l", "d_", "l", "o", "c_", "m", "u", "l", "t", "i", "p", "l", "e", "r", "s_", "n", "u", "m]"], "ACPUPlayerAIController");
addToContainers_variable("NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY", "Number of spots to try for resource depots. Basically these will be locations in a circle around the resource spot", "Docs/Classes/ACPUPlayerAIController/Variables/NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY.html", ["u", "m_", "p", "o", "t", "e", "n", "t", "i", "a", "l_", "d", "e", "p", "o", "t_", "s", "p", "o", "t", "s_", "t", "o_", "t", "r", "y"], "ACPUPlayerAIController");
addToContainers_variable("CIRCLE_PORTIONS_IN_RADIANS", "", "Docs/Classes/ACPUPlayerAIController/Variables/CIRCLE_PORTIONS_IN_RADIANS.html", ["i", "r", "c", "l", "e_", "p", "o", "r", "t", "i", "o", "n", "s_", "i", "n_", "r", "a", "d", "i", "a", "n", "s"], "ACPUPlayerAIController");
addToContainers_variable("ResourceDepotBuildLocs[NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY]", "Contains unit vectors for different rotations in a circle. Precomputed to perhaps save some time at runtime, but we\'re only really doing a cos and sin calc and approximate would even be acceptable too", "Docs/Classes/ACPUPlayerAIController/Variables/ResourceDepotBuildLocs[NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY].html", ["resource", "depot", "build", "locs[", "n", "u", "m_", "p", "o", "t", "e", "n", "t", "i", "a", "l_", "d", "e", "p", "o", "t_", "s", "p", "o", "t", "s_", "t", "o_", "t", "r", "y]"], "ACPUPlayerAIController");
addToContainers_variable("NUM_GENERAL_AREAS_TO_TRY", "This variable is only relevent when placing non-resource depot buildings. NUM_GENERAL_AREAS_TO_TRY * BUILD_LOC_MULTIPLERS_NUM = total areas tried per building. This is how many general areas to try before \'giving up\'. A general area will try BUILD_LOC_MULTIPLERS_NUM many different locations.", "Docs/Classes/ACPUPlayerAIController/Variables/NUM_GENERAL_AREAS_TO_TRY.html", ["u", "m_", "g", "e", "n", "e", "r", "a", "l_", "a", "r", "e", "a", "s_", "t", "o_", "t", "r", "y"], "ACPUPlayerAIController");
addToContainers_variable("MAX_NUM_BUILD_LOC_TRIES_PER_TICK", "The maximum number of build locations that will be tried to be found each tick. This is here to limit the amount of sweeps/raycasts done each tick.", "Docs/Classes/ACPUPlayerAIController/Variables/MAX_NUM_BUILD_LOC_TRIES_PER_TICK.html", ["a", "x_", "n", "u", "m_", "b", "u", "i", "l", "d_", "l", "o", "c_", "t", "r", "i", "e", "s_", "p", "e", "r_", "t", "i", "c", "k"], "ACPUPlayerAIController");
addToContainers_struct("ParsedUINTERFACE", "-----------------------------------------------------------------------------", "Docs/Structs/ParsedUINTERFACE/ParsedUINTERFACE.html", ["parsed", "u", "i", "n", "t", "e", "r", "f", "a", "c", "e"], "");
addToContainers_variable("DefaultStruct", "Default struct to use for resetting", "Docs/Structs/ParsedUINTERFACE/Variables/DefaultStruct.html", ["default", "struct"], "ParsedUINTERFACE");
addToContainers_variable("Name", "---------------------------------------------------", "Docs/Structs/ParsedUINTERFACE/Variables/Name.html", [], "ParsedUINTERFACE");
addToContainers_struct("ParsedEnumValue", "", "Docs/Structs/ParsedEnumValue/ParsedEnumValue.html", ["parsed", "enum", "value"], "");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedEnumValue/Variables/DefaultStruct.html", ["default", "struct"], "ParsedEnumValue");
addToContainers_variable("Comment", "Comment that goes along with the value", "Docs/Structs/ParsedEnumValue/Variables/Comment.html", [], "ParsedEnumValue");
addToContainers_variable("Name", "", "Docs/Structs/ParsedEnumValue/Variables/Name.html", [], "ParsedEnumValue");
addToContainers_struct("ParsedEnum", "int32 Value ", "Docs/Structs/ParsedEnum/ParsedEnum.html", ["parsed", "enum"], "");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedEnum/Variables/DefaultStruct.html", ["default", "struct"], "ParsedEnum");
addToContainers_variable("Comment", "Comment that goes along with the enum", "Docs/Structs/ParsedEnum/Variables/Comment.html", [], "ParsedEnum");
addToContainers_variable("1", "Whether this is a UENUM", "Docs/Structs/ParsedEnum/Variables/1.html", [], "ParsedEnum");
addToContainers_variable("Name", "Name of the enum", "Docs/Structs/ParsedEnum/Variables/Name.html", [], "ParsedEnum");
addToContainers_variable("BackingInteger", "Name of the integer that backs the enum", "Docs/Structs/ParsedEnum/Variables/BackingInteger.html", ["backing", "integer"], "ParsedEnum");
addToContainers_variable("Values", "All the values in the enum", "Docs/Structs/ParsedEnum/Variables/Values.html", [], "ParsedEnum");
addToContainers_struct("ParsedFunctionParamDefaultValue", "", "Docs/Structs/ParsedFunctionParamDefaultValue/ParsedFunctionParamDefaultValue.html", ["parsed", "function", "param", "default", "value"], "");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedFunctionParamDefaultValue/Variables/DefaultStruct.html", ["default", "struct"], "ParsedFunctionParamDefaultValue");
addToContainers_variable("Value", "Just a single string but there are no spaces anywhere in it. Examples of what it might look like: - \"5\" - \"FSomeStruct::Value\" - FSomeStruct::SomeOtherStruct::SomeValue", "Docs/Structs/ParsedFunctionParamDefaultValue/Variables/Value.html", [], "ParsedFunctionParamDefaultValue");
addToContainers_struct("ParsedVariableTemplateValue", "Might be able to use this for params, return values and variables. ", "Docs/Structs/ParsedVariableTemplateValue/ParsedVariableTemplateValue.html", ["parsed", "variable", "template", "value"], "");
addToContainers_function("ParsedVariableTemplateValue", "", "Docs/Structs/ParsedVariableTemplateValue/Functions/ParsedVariableTemplateValue.html", ["parsed", "variable", "template", "value"], "ParsedVariableTemplateValue");
addToContainers_variable("Type", "e.g. TArray<UObject *> <---- here Type = UObject", "Docs/Structs/ParsedVariableTemplateValue/Variables/Type.html", [], "ParsedVariableTemplateValue");
addToContainers_variable("Pointers", "e.g. TArray<UObject *> <--- has a pointer asterisk", "Docs/Structs/ParsedVariableTemplateValue/Variables/Pointers.html", [], "ParsedVariableTemplateValue");
addToContainers_variable("NestedTemplateValues", "E.g. TSet<TSubclassOf<UObject>> <---- the nested value is TSubclassOf<UObject>", "Docs/Structs/ParsedVariableTemplateValue/Variables/NestedTemplateValues.html", ["nested", "template", "values"], "ParsedVariableTemplateValue");
addToContainers_struct("ParsedFunctionParameter", "", "Docs/Structs/ParsedFunctionParameter/ParsedFunctionParameter.html", ["parsed", "function", "parameter"], "");
addToContainers_function("ParsedFunctionParameter", "", "Docs/Structs/ParsedFunctionParameter/Functions/ParsedFunctionParameter.html", ["parsed", "function", "parameter"], "ParsedFunctionParameter");
addToContainers_variable("1", "e.g. const int32 MyParam1 <---- In this case const isn\'t really important", "Docs/Structs/ParsedFunctionParameter/Variables/1.html", [], "ParsedFunctionParameter");
addToContainers_variable("VariableTypeName", "The name of the type of variable e.g. \"int32\", \"MyStruct\", etc. Does not take into account pointers or references", "Docs/Structs/ParsedFunctionParameter/Variables/VariableTypeName.html", ["variable", "type", "name"], "ParsedFunctionParameter");
addToContainers_variable("TemplateValues", "e.g. VariableTypeName = \"TSubclassOf\", and TemplateValues = { \"UObject\" } ", "Docs/Structs/ParsedFunctionParameter/Variables/TemplateValues.html", ["template", "values"], "ParsedFunctionParameter");
addToContainers_variable("VariableTypePointers", "Pointers for the variable. ", "Docs/Structs/ParsedFunctionParameter/Variables/VariableTypePointers.html", ["variable", "type", "pointers"], "ParsedFunctionParameter");
addToContainers_variable("Name", "Name of the parameter", "Docs/Structs/ParsedFunctionParameter/Variables/Name.html", [], "ParsedFunctionParameter");
addToContainers_variable("DefaultValue", "Default value if any", "Docs/Structs/ParsedFunctionParameter/Variables/DefaultValue.html", ["default", "value"], "ParsedFunctionParameter");
addToContainers_struct("UFUNCTIONSpecifier", "", "Docs/Structs/UFUNCTIONSpecifier/UFUNCTIONSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifier"], "");
addToContainers_function("UFUNCTIONSpecifier", "", "Docs/Structs/UFUNCTIONSpecifier/Functions/UFUNCTIONSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifier"], "UFUNCTIONSpecifier");
addToContainers_function("UFUNCTIONSpecifier", "", "Docs/Structs/UFUNCTIONSpecifier/Functions/UFUNCTIONSpecifier_1.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifier"], "UFUNCTIONSpecifier");
addToContainers_variable("Type", "e.g. \"BlueprintCallable\", \"NetMulticast\"", "Docs/Structs/UFUNCTIONSpecifier/Variables/Type.html", [], "UFUNCTIONSpecifier");
addToContainers_variable("SecondValue", "e.g. if Type == \"Category\", then this will equal the category", "Docs/Structs/UFUNCTIONSpecifier/Variables/SecondValue.html", ["second", "value"], "UFUNCTIONSpecifier");
addToContainers_struct("UFUNCTIONMetaSpecifier", "", "Docs/Structs/UFUNCTIONMetaSpecifier/UFUNCTIONMetaSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifier"], "");
addToContainers_function("UFUNCTIONMetaSpecifier", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Functions/UFUNCTIONMetaSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifier"], "UFUNCTIONMetaSpecifier");
addToContainers_function("UFUNCTIONMetaSpecifier", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Functions/UFUNCTIONMetaSpecifier_1.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifier"], "UFUNCTIONMetaSpecifier");
addToContainers_variable("Type", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Variables/Type.html", [], "UFUNCTIONMetaSpecifier");
addToContainers_variable("SecondValue", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Variables/SecondValue.html", ["second", "value"], "UFUNCTIONMetaSpecifier");
addToContainers_struct("ParsedFunction", "", "Docs/Structs/ParsedFunction/ParsedFunction.html", ["parsed", "function"], "");
addToContainers_function("ParsedFunction", "", "Docs/Structs/ParsedFunction/Functions/ParsedFunction.html", ["parsed", "function"], "ParsedFunction");
addToContainers_function("ParsedFunction", "Constructor for a constructor ", "Docs/Structs/ParsedFunction/Functions/ParsedFunction_1.html", ["parsed", "function"], "ParsedFunction");
addToContainers_function("ParsedFunction", "Constructor for a non-constructor function", "Docs/Structs/ParsedFunction/Functions/ParsedFunction_2.html", ["parsed", "function"], "ParsedFunction");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedFunction/Variables/DefaultStruct.html", ["default", "struct"], "ParsedFunction");
addToContainers_variable("AccessSpecifier", "private, protected, public", "Docs/Structs/ParsedFunction/Variables/AccessSpecifier.html", ["access", "specifier"], "ParsedFunction");
addToContainers_variable("Comment", "Comment that goes along with the function", "Docs/Structs/ParsedFunction/Variables/Comment.html", [], "ParsedFunction");
addToContainers_variable("Name", "", "Docs/Structs/ParsedFunction/Variables/Name.html", [], "ParsedFunction");
addToContainers_variable("1", "Whether this function is a UFUNCTION", "Docs/Structs/ParsedFunction/Variables/1.html", [], "ParsedFunction");
addToContainers_variable("UFUNCTIONSpecifiers", "e.g. BlueprintCallable, Category = \"Blah|Blah\"", "Docs/Structs/ParsedFunction/Variables/UFUNCTIONSpecifiers.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifiers"], "ParsedFunction");
addToContainers_variable("UFUNCTIONMetaSpecifiers", "If this is a UFUNCTION what meta specifiers it has ", "Docs/Structs/ParsedFunction/Variables/UFUNCTIONMetaSpecifiers.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifiers"], "ParsedFunction");
addToContainers_variable("1", "Whether this function is a struct/class\'s constructor", "Docs/Structs/ParsedFunction/Variables/1_1.html", [], "ParsedFunction");
addToContainers_variable("1", "", "Docs/Structs/ParsedFunction/Variables/1_2.html", [], "ParsedFunction");
addToContainers_variable("1", "", "Docs/Structs/ParsedFunction/Variables/1_3.html", [], "ParsedFunction");
addToContainers_variable("1", "If true the function is a virtual function", "Docs/Structs/ParsedFunction/Variables/1_4.html", [], "ParsedFunction");
addToContainers_variable("1", "If true the function is const. Note: has nothing to do with return values or parameters", "Docs/Structs/ParsedFunction/Variables/1_5.html", [], "ParsedFunction");
addToContainers_variable("1", "True if the return value is const", "Docs/Structs/ParsedFunction/Variables/1_6.html", [], "ParsedFunction");
addToContainers_variable("ReturnValue", "What this function returns e.g. \"float\", \"void\", \"MyStruct\", etc. Does not take into account const, pointers or references", "Docs/Structs/ParsedFunction/Variables/ReturnValue.html", ["return", "value"], "ParsedFunction");
addToContainers_variable("ReturnValuePointers", "Whether the return value is a pointer/reference/const.pointer/pointer.to.pointer etc", "Docs/Structs/ParsedFunction/Variables/ReturnValuePointers.html", ["return", "value", "pointers"], "ParsedFunction");
addToContainers_variable("ReturnValueTemplateValues", "", "Docs/Structs/ParsedFunction/Variables/ReturnValueTemplateValues.html", ["return", "value", "template", "values"], "ParsedFunction");
addToContainers_variable("Parameters", "Parameters for the function. If empty then the function has none", "Docs/Structs/ParsedFunction/Variables/Parameters.html", [], "ParsedFunction");
addToContainers_variable("TemplateParameters", "e.g. template <typename T, class Blah>", "Docs/Structs/ParsedFunction/Variables/TemplateParameters.html", ["template", "parameters"], "ParsedFunction");
addToContainers_struct("ParsedUPROPERTYSpecifier", "", "Docs/Structs/ParsedUPROPERTYSpecifier/ParsedUPROPERTYSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "specifier"], "");
addToContainers_function("ParsedUPROPERTYSpecifier", "", "Docs/Structs/ParsedUPROPERTYSpecifier/Functions/ParsedUPROPERTYSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "specifier"], "ParsedUPROPERTYSpecifier");
addToContainers_variable("Value", "First value e.g. BlueprintAssignable, BlueprintGetter", "Docs/Structs/ParsedUPROPERTYSpecifier/Variables/Value.html", [], "ParsedUPROPERTYSpecifier");
addToContainers_variable("SecondValue", "Second value which some specifiers need e.g. Category needs a second value, ReplicatedUsing needs a second value", "Docs/Structs/ParsedUPROPERTYSpecifier/Variables/SecondValue.html", ["second", "value"], "ParsedUPROPERTYSpecifier");
addToContainers_struct("ParsedUPROPERTYMetaSpecifier", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/ParsedUPROPERTYMetaSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifier"], "");
addToContainers_function("ParsedUPROPERTYMetaSpecifier", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/Functions/ParsedUPROPERTYMetaSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifier"], "ParsedUPROPERTYMetaSpecifier");
addToContainers_variable("Value", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/Variables/Value.html", [], "ParsedUPROPERTYMetaSpecifier");
addToContainers_variable("SecondValues", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/Variables/SecondValues.html", ["second", "values"], "ParsedUPROPERTYMetaSpecifier");
addToContainers_struct("ParsedVariable", "", "Docs/Structs/ParsedVariable/ParsedVariable.html", ["parsed", "variable"], "");
addToContainers_function("ParsedVariable", "", "Docs/Structs/ParsedVariable/Functions/ParsedVariable.html", ["parsed", "variable"], "ParsedVariable");
addToContainers_function("ParsedVariable", "", "Docs/Structs/ParsedVariable/Functions/ParsedVariable_1.html", ["parsed", "variable"], "ParsedVariable");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedVariable/Variables/DefaultStruct.html", ["default", "struct"], "ParsedVariable");
addToContainers_variable("AccessSpecifier", "private, protected, public", "Docs/Structs/ParsedVariable/Variables/AccessSpecifier.html", ["access", "specifier"], "ParsedVariable");
addToContainers_variable("Comment", "Comment that goes along with the variable", "Docs/Structs/ParsedVariable/Variables/Comment.html", [], "ParsedVariable");
addToContainers_variable("1", "", "Docs/Structs/ParsedVariable/Variables/1.html", [], "ParsedVariable");
addToContainers_variable("1", "", "Docs/Structs/ParsedVariable/Variables/1_1.html", [], "ParsedVariable");
addToContainers_variable("UPROPERTYSpecifiers", "", "Docs/Structs/ParsedVariable/Variables/UPROPERTYSpecifiers.html", ["p", "r", "o", "p", "e", "r", "t", "y", "specifiers"], "ParsedVariable");
addToContainers_variable("UPROPERTYMetaSpecifiers", "", "Docs/Structs/ParsedVariable/Variables/UPROPERTYMetaSpecifiers.html", ["p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifiers"], "ParsedVariable");
addToContainers_variable("1", "Note: this has nothing to do with pointer constness", "Docs/Structs/ParsedVariable/Variables/1_2.html", [], "ParsedVariable");
addToContainers_variable("TypeName", "e.g. \"int32\", \"MyStruct\"", "Docs/Structs/ParsedVariable/Variables/TypeName.html", ["type", "name"], "ParsedVariable");
addToContainers_variable("TemplateValues", "e.g. if this is a TSubclassOf then this might contain { \"AActor\" }", "Docs/Structs/ParsedVariable/Variables/TemplateValues.html", ["template", "values"], "ParsedVariable");
addToContainers_variable("Pointers", "Whether the variable is a pointer, reference, const pointer, pointer to pointer, etc", "Docs/Structs/ParsedVariable/Variables/Pointers.html", [], "ParsedVariable");
addToContainers_variable("Name", "Name of the variable", "Docs/Structs/ParsedVariable/Variables/Name.html", [], "ParsedVariable");
addToContainers_struct("ParsedUSTRUCTOrUCLASSSpecifier", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSSpecifier/ParsedUSTRUCTOrUCLASSSpecifier.html", ["parsed", "u", "s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "specifier"], "");
addToContainers_variable("Value", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSSpecifier/Variables/Value.html", [], "ParsedUSTRUCTOrUCLASSSpecifier");
addToContainers_variable("SecondValues", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSSpecifier/Variables/SecondValues.html", ["second", "values"], "ParsedUSTRUCTOrUCLASSSpecifier");
addToContainers_struct("ParsedUSTRUCTOrUCLASSMetaSpecifier", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSMetaSpecifier/ParsedUSTRUCTOrUCLASSMetaSpecifier.html", ["parsed", "u", "s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "meta", "specifier"], "");
addToContainers_variable("Value", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSMetaSpecifier/Variables/Value.html", [], "ParsedUSTRUCTOrUCLASSMetaSpecifier");
addToContainers_variable("SecondValues", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSMetaSpecifier/Variables/SecondValues.html", ["second", "values"], "ParsedUSTRUCTOrUCLASSMetaSpecifier");
addToContainers_struct("ParsedStructOrClass", "", "Docs/Structs/ParsedStructOrClass/ParsedStructOrClass.html", ["parsed", "struct", "or", "class"], "");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedStructOrClass/Variables/DefaultStruct.html", ["default", "struct"], "ParsedStructOrClass");
addToContainers_variable("Comment", "Comment that goes along with the struct/class", "Docs/Structs/ParsedStructOrClass/Variables/Comment.html", [], "ParsedStructOrClass");
addToContainers_variable("1", "True = class, false = struct", "Docs/Structs/ParsedStructOrClass/Variables/1.html", [], "ParsedStructOrClass");
addToContainers_variable("1", "", "Docs/Structs/ParsedStructOrClass/Variables/1_1.html", [], "ParsedStructOrClass");
addToContainers_variable("USTRUCTOrUCLASSSpecifiers", "", "Docs/Structs/ParsedStructOrClass/Variables/USTRUCTOrUCLASSSpecifiers.html", ["s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "specifiers"], "ParsedStructOrClass");
addToContainers_variable("USTRUCTOrUCLASSMetaSpecifiers", "", "Docs/Structs/ParsedStructOrClass/Variables/USTRUCTOrUCLASSMetaSpecifiers.html", ["s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "meta", "specifiers"], "ParsedStructOrClass");
addToContainers_variable("1", "Whether this class is the class that contains all the functions for a UINTERFACE", "Docs/Structs/ParsedStructOrClass/Variables/1_2.html", [], "ParsedStructOrClass");
addToContainers_variable("1", "If true the class has been declared final i.e. no class can derive from it", "Docs/Structs/ParsedStructOrClass/Variables/1_3.html", [], "ParsedStructOrClass");
addToContainers_variable("Name", "", "Docs/Structs/ParsedStructOrClass/Variables/Name.html", [], "ParsedStructOrClass");
addToContainers_variable("ParentsNames", "The name of the structs/classes that this struct/class inherits from ", "Docs/Structs/ParsedStructOrClass/Variables/ParentsNames.html", ["parents", "names"], "ParsedStructOrClass");
addToContainers_variable("Functions", "Info about all the functions this struct/class has", "Docs/Structs/ParsedStructOrClass/Variables/Functions.html", [], "ParsedStructOrClass");
addToContainers_variable("Variables", "Info about all the variables this class has", "Docs/Structs/ParsedStructOrClass/Variables/Variables.html", [], "ParsedStructOrClass");
addToContainers_class("DocumentationTool", "-----------------------------------------------------------------------------", "Docs/Classes/DocumentationTool/DocumentationTool.html", ["documentation", "tool"], "");
addToContainers_function("DocumentationTool", "", "Docs/Classes/DocumentationTool/Functions/DocumentationTool.html", ["documentation", "tool"], "DocumentationTool");
addToContainers_variable("bParseCppFiles", "Whether to parse .cpp files", "Docs/Classes/DocumentationTool/Variables/bParseCppFiles.html", ["parse", "cpp", "files"], "DocumentationTool");
addToContainers_variable("ExcludeList", "Holds names of files to exclude from being parsed", "Docs/Classes/DocumentationTool/Variables/ExcludeList.html", ["exclude", "list"], "DocumentationTool");
addToContainers_variable("bTesting", "If true then only parse the files on TestList and ignore all else. This is just a debugging variable", "Docs/Classes/DocumentationTool/Variables/bTesting.html", [], "DocumentationTool");
addToContainers_variable("TestList", "List of names of files to parse. Will only be used if bTesting is true. This is just a debugging variable", "Docs/Classes/DocumentationTool/Variables/TestList.html", ["test", "list"], "DocumentationTool");
addToContainers_variable("CurrentParsingFileName", "Name of the file currently being parsed", "Docs/Classes/DocumentationTool/Variables/CurrentParsingFileName.html", ["current", "parsing", "file", "name"], "DocumentationTool");
addToContainers_variable("Chars", "Pointer to array of characters currently being parsed", "Docs/Classes/DocumentationTool/Variables/Chars.html", [], "DocumentationTool");
addToContainers_variable("Index", "Index into Chars parsing is currently at", "Docs/Classes/DocumentationTool/Variables/Index.html", [], "DocumentationTool");
addToContainers_variable("CurrentComment", "A comment", "Docs/Classes/DocumentationTool/Variables/CurrentComment.html", ["current", "comment"], "DocumentationTool");
addToContainers_variable("CurrentAccessSpecifier", "The current access specifier of the CurrentClassOrStruct", "Docs/Classes/DocumentationTool/Variables/CurrentAccessSpecifier.html", ["current", "access", "specifier"], "DocumentationTool");
addToContainers_variable("CurrentClassOrStruct", "", "Docs/Classes/DocumentationTool/Variables/CurrentClassOrStruct.html", ["current", "class", "or", "struct"], "DocumentationTool");
addToContainers_variable("CurrentEnumValue", "", "Docs/Classes/DocumentationTool/Variables/CurrentEnumValue.html", ["current", "enum", "value"], "DocumentationTool");
addToContainers_variable("CurrentEnum", "", "Docs/Classes/DocumentationTool/Variables/CurrentEnum.html", ["current", "enum"], "DocumentationTool");
addToContainers_variable("CurrentUINTERFACE", "", "Docs/Classes/DocumentationTool/Variables/CurrentUINTERFACE.html", ["current", "u", "i", "n", "t", "e", "r", "f", "a", "c", "e"], "DocumentationTool");
addToContainers_variable("CurrentUFUNCTIONUFUNCTIONSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUFUNCTIONUFUNCTIONSpecifiers.html", ["current", "u", "f", "u", "n", "c", "t", "i", "o", "n", "u", "f", "u", "n", "c", "t", "i", "o", "n", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentUFUNCTIONUFUNCTIONMetaSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUFUNCTIONUFUNCTIONMetaSpecifiers.html", ["current", "u", "f", "u", "n", "c", "t", "i", "o", "n", "u", "f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentFunctionTemplateParameters", "", "Docs/Classes/DocumentationTool/Variables/CurrentFunctionTemplateParameters.html", ["current", "function", "template", "parameters"], "DocumentationTool");
addToContainers_variable("CurrentFunctionParameters", "", "Docs/Classes/DocumentationTool/Variables/CurrentFunctionParameters.html", ["current", "function", "parameters"], "DocumentationTool");
addToContainers_variable("CurrentClassOrStructFunctions", "", "Docs/Classes/DocumentationTool/Variables/CurrentClassOrStructFunctions.html", ["current", "class", "or", "struct", "functions"], "DocumentationTool");
addToContainers_variable("CurrentUPROPERTYSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUPROPERTYSpecifiers.html", ["current", "u", "p", "r", "o", "p", "e", "r", "t", "y", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentUPROPERTYMetaSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUPROPERTYMetaSpecifiers.html", ["current", "u", "p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentVariable", "", "Docs/Classes/DocumentationTool/Variables/CurrentVariable.html", ["current", "variable"], "DocumentationTool");
addToContainers_variable("ParsedStructsAndClasses", "Contains all information about all structs and classes that have been parsed so far (includes USTRUCTs and UCLASSes)", "Docs/Classes/DocumentationTool/Variables/ParsedStructsAndClasses.html", ["parsed", "structs", "and", "classes"], "DocumentationTool");
addToContainers_variable("ParsedEnums", "Contains all information about all enum that have been parsed so far (includes UENUMs)", "Docs/Classes/DocumentationTool/Variables/ParsedEnums.html", ["parsed", "enums"], "DocumentationTool");
addToContainers_variable("ParsedUINTERFACEs", "Contains information about all parsed UINTERFACEs", "Docs/Classes/DocumentationTool/Variables/ParsedUINTERFACEs.html", ["parsed", "u", "i", "n", "t", "e", "r", "f", "a", "c", "es"], "DocumentationTool");
addToContainers_variable("", "", "Docs/Classes/DocumentationTool/Variables/.html", [], "DocumentationTool");
addToContainers_variable("ParsedFiles", "Holds the names of files that have been parsed", "Docs/Classes/DocumentationTool/Variables/ParsedFiles.html", ["parsed", "files"], "DocumentationTool");
addToContainers_variable("", "", "Docs/Classes/DocumentationTool/Variables/_1.html", [], "DocumentationTool");
addToContainers_variable("NumFunctionCalls", "Maps function name to how many times it was called", "Docs/Classes/DocumentationTool/Variables/NumFunctionCalls.html", ["num", "function", "calls"], "DocumentationTool");
addToContainers_struct("FunctionReturnType", "These structs are for DocumentationTool_Engine", "Docs/Structs/FunctionReturnType/FunctionReturnType.html", ["function", "return", "type"], "");
addToContainers_function("FunctionReturnType", "", "Docs/Structs/FunctionReturnType/Functions/FunctionReturnType.html", ["function", "return", "type"], "FunctionReturnType");
addToContainers_function("FunctionReturnType", "", "Docs/Structs/FunctionReturnType/Functions/FunctionReturnType_1.html", ["function", "return", "type"], "FunctionReturnType");
addToContainers_variable("bIsConst", "", "Docs/Structs/FunctionReturnType/Variables/bIsConst.html", ["is", "const"], "FunctionReturnType");
addToContainers_variable("Type", "", "Docs/Structs/FunctionReturnType/Variables/Type.html", [], "FunctionReturnType");
addToContainers_variable("Pointers", "", "Docs/Structs/FunctionReturnType/Variables/Pointers.html", [], "FunctionReturnType");
addToContainers_struct("FunctionParameter", "", "Docs/Structs/FunctionParameter/FunctionParameter.html", ["function", "parameter"], "");
addToContainers_function("FunctionParameter", "", "Docs/Structs/FunctionParameter/Functions/FunctionParameter.html", ["function", "parameter"], "FunctionParameter");
addToContainers_variable("bIsConst", "", "Docs/Structs/FunctionParameter/Variables/bIsConst.html", ["is", "const"], "FunctionParameter");
addToContainers_variable("Type", "", "Docs/Structs/FunctionParameter/Variables/Type.html", [], "FunctionParameter");
addToContainers_variable("VariableTemplateValues", "", "Docs/Structs/FunctionParameter/Variables/VariableTemplateValues.html", ["variable", "template", "values"], "FunctionParameter");
addToContainers_variable("Pointers", "", "Docs/Structs/FunctionParameter/Variables/Pointers.html", [], "FunctionParameter");
addToContainers_variable("Name", "", "Docs/Structs/FunctionParameter/Variables/Name.html", [], "FunctionParameter");
addToContainers_struct("VirtualFunctionSignature", "", "Docs/Structs/VirtualFunctionSignature/VirtualFunctionSignature.html", ["virtual", "function", "signature"], "");
addToContainers_function("VirtualFunctionSignature", "", "Docs/Structs/VirtualFunctionSignature/Functions/VirtualFunctionSignature.html", ["virtual", "function", "signature"], "VirtualFunctionSignature");
addToContainers_function("VirtualFunctionSignature", "", "Docs/Structs/VirtualFunctionSignature/Functions/VirtualFunctionSignature_1.html", ["virtual", "function", "signature"], "VirtualFunctionSignature");
addToContainers_variable("ReturnType", "", "Docs/Structs/VirtualFunctionSignature/Variables/ReturnType.html", ["return", "type"], "VirtualFunctionSignature");
addToContainers_variable("Name", "", "Docs/Structs/VirtualFunctionSignature/Variables/Name.html", [], "VirtualFunctionSignature");
addToContainers_variable("Parameters", "", "Docs/Structs/VirtualFunctionSignature/Variables/Parameters.html", [], "VirtualFunctionSignature");
addToContainers_variable("bIsConst", "", "Docs/Structs/VirtualFunctionSignature/Variables/bIsConst.html", ["is", "const"], "VirtualFunctionSignature");
addToContainers_struct("EngineClassInfo", "Actually also struct info", "Docs/Structs/EngineClassInfo/EngineClassInfo.html", ["engine", "class", "info"], "");
addToContainers_function("EngineClassInfo", "", "Docs/Structs/EngineClassInfo/Functions/EngineClassInfo.html", ["engine", "class", "info"], "EngineClassInfo");
addToContainers_variable("Parents", "Name of parents, including interfaces", "Docs/Structs/EngineClassInfo/Variables/Parents.html", [], "EngineClassInfo");
addToContainers_variable("bHaveVirtualsBeenConfirmed", "If true then VirtualFunctions contains only virtual functions introduced by this class/truct", "Docs/Structs/EngineClassInfo/Variables/bHaveVirtualsBeenConfirmed.html", ["have", "virtuals", "been", "confirmed"], "EngineClassInfo");
addToContainers_variable("VirtualFunctions", "Virtual functions that this class introduced NOT any overridden virtuals", "Docs/Structs/EngineClassInfo/Variables/VirtualFunctions.html", ["virtual", "functions"], "EngineClassInfo");
addToContainers_variable("RelativeDocumentationURL", "Unreal Engine documentation website. Relative to https://docs.unrealengine.com/en-US/API/", "Docs/Structs/EngineClassInfo/Variables/RelativeDocumentationURL.html", ["relative", "documentation", "u", "r", "l"], "EngineClassInfo");
addToContainers_variable("FileDeclaredIn", "Path to file this class was declared in. Will probably not count any forward declarations", "Docs/Structs/EngineClassInfo/Variables/FileDeclaredIn.html", ["file", "declared", "in"], "EngineClassInfo");
addToContainers_class("DocumentationTool_Engine", "The goal of this class is to gather information about the classes/structs native to the engine Info we gather: - inheritance hierarchy - virtual functions and their signatures - website URL to the class\'/struct\'s documentation page How this is done: - inheritance hierarachy and virtual functions: parse the whole engine source code of your project - website URL: download the \'all classes\' doc website source and extract the links from that", "Docs/Classes/DocumentationTool_Engine/DocumentationTool_Engine.html", ["documentation", "tool_", "engine"], "");
addToContainers_function("DocumentationTool_Engine", "@param InWorld - a UWorld. It needs this to run some timer handles and query the time. Any world is probably OK. If in editor and you\'re running this via an editor utility widget you probably want to use the editor world GEditor->GetEditorWorldContext().World()", "Docs/Classes/DocumentationTool_Engine/Functions/DocumentationTool_Engine.html", ["documentation", "tool_", "engine"], "DocumentationTool_Engine");
addToContainers_variable("World", "A world so timers can be set", "Docs/Classes/DocumentationTool_Engine/Variables/World.html", [], "DocumentationTool_Engine");
addToContainers_variable("HeaderFileBeingParsed", "The name of the header file that is being parsed", "Docs/Classes/DocumentationTool_Engine/Variables/HeaderFileBeingParsed.html", ["header", "file", "being", "parsed"], "DocumentationTool_Engine");
addToContainers_variable("TimeBusyWaitForDocsFileDownloadToCompleteStarted", "World->GetRealTimeSeconds() when starting trying to download engine doc file", "Docs/Classes/DocumentationTool_Engine/Variables/TimeBusyWaitForDocsFileDownloadToCompleteStarted.html", ["time", "busy", "wait", "for", "docs", "file", "download", "to", "complete", "started"], "DocumentationTool_Engine");
addToContainers_variable("CachedEngineClassesFilePath", "This is where to store the file that will contain all the info about engine classes. Having this on file will hopefully speed up the process", "Docs/Classes/DocumentationTool_Engine/Variables/CachedEngineClassesFilePath.html", ["cached", "engine", "classes", "file", "path"], "DocumentationTool_Engine");
addToContainers_variable("WebsiteSourceBatchFilePath", "Folder path for batch file that downloads UE doc source", "Docs/Classes/DocumentationTool_Engine/Variables/WebsiteSourceBatchFilePath.html", ["website", "source", "batch", "file", "path"], "DocumentationTool_Engine");
addToContainers_variable("WebsiteSourceFileLocation", "Where on disk to save the UE doc file source", "Docs/Classes/DocumentationTool_Engine/Variables/WebsiteSourceFileLocation.html", ["website", "source", "file", "location"], "DocumentationTool_Engine");
addToContainers_variable("ClassNameToInfo", "Maps the name of the class to info about it", "Docs/Classes/DocumentationTool_Engine/Variables/ClassNameToInfo.html", ["class", "name", "to", "info"], "DocumentationTool_Engine");
addToContainers_variable("bTesting", "Debug variable. If true then you specify which files to parse", "Docs/Classes/DocumentationTool_Engine/Variables/bTesting.html", [], "DocumentationTool_Engine");
addToContainers_class("DocumentationTool_HTML", "This class generates the HTML/CSS/Javascript for the website", "Docs/Classes/DocumentationTool_HTML/DocumentationTool_HTML.html", ["documentation", "tool_", "h", "t", "m", "l"], "");
addToContainers_function("DocumentationTool_HTML", "", "Docs/Classes/DocumentationTool_HTML/Functions/DocumentationTool_HTML.html", ["documentation", "tool_", "h", "t", "m", "l"], "DocumentationTool_HTML");
addToContainers_variable("SearchTokenToPathsContainer", "Names of some variables in javascript", "Docs/Classes/DocumentationTool_HTML/Variables/SearchTokenToPathsContainer.html", ["search", "token", "to", "paths", "container"], "DocumentationTool_HTML");
addToContainers_variable("PathToBasicInfoContainer", "", "Docs/Classes/DocumentationTool_HTML/Variables/PathToBasicInfoContainer.html", ["path", "to", "basic", "info", "container"], "DocumentationTool_HTML");
addToContainers_variable("JS", "Code to be appended to a javascript file most likely SearchData.js", "Docs/Classes/DocumentationTool_HTML/Variables/JS.html", [], "DocumentationTool_HTML");
addToContainers_variable("MoreJS", "More javascript code. This contains the code that adds stuff to the trie for the search box", "Docs/Classes/DocumentationTool_HTML/Variables/MoreJS.html", ["more", "j", "s"], "DocumentationTool_HTML");
addToContainers_variable("PathsInUse", "Folder paths that are already taken", "Docs/Classes/DocumentationTool_HTML/Variables/PathsInUse.html", ["paths", "in", "use"], "DocumentationTool_HTML");
addToContainers_class("UDocToolTestUObject", "A test comment blah blah blah", "Docs/Classes/UDocToolTestUObject/UDocToolTestUObject.html", ["doc", "tool", "test", "u", "object"], "");
addToContainers_variable("SomeInt", "An int", "Docs/Classes/UDocToolTestUObject/Variables/SomeInt.html", ["some", "int"], "UDocToolTestUObject");
addToContainers_variable("", "Blah", "Docs/Classes/UDocToolTestUObject/Variables/.html", [], "UDocToolTestUObject");
addToContainers_struct("FSomeTestStruct", "A test struct for documentation", "Docs/Structs/FSomeTestStruct/FSomeTestStruct.html", ["some", "test", "struct"], "");
addToContainers_variable("A64BitInt", "", "Docs/Structs/FSomeTestStruct/Variables/A64BitInt.html", ["a64", "bit", "int"], "FSomeTestStruct");
addToContainers_class("AMyTestClass", "", "Docs/Classes/AMyTestClass/AMyTestClass.html", ["my", "test", "class"], "");
addToContainers_class("APlayerCamera", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Classes/APlayerCamera/APlayerCamera.html", ["player", "camera"], "");
addToContainers_function("APlayerCamera", "Sets default values for this pawn\'s properties", "Docs/Classes/APlayerCamera/Functions/APlayerCamera.html", ["player", "camera"], "APlayerCamera");
addToContainers_variable("", "Needed to use collision with camera", "Docs/Classes/APlayerCamera/Variables/.html", [], "APlayerCamera");
addToContainers_variable("", "", "Docs/Classes/APlayerCamera/Variables/_1.html", [], "APlayerCamera");
addToContainers_variable("", "", "Docs/Classes/APlayerCamera/Variables/_2.html", [], "APlayerCamera");
addToContainers_variable("", "This was a USpectatorPawnMovement component for a long time", "Docs/Classes/APlayerCamera/Variables/_3.html", [], "APlayerCamera");
addToContainers_class("UUpgradeEffect", "An abstract class that decides what effect upgrades have. Derive from this class and override its ApplyEffect_* functions to customize what upgrades do.", "Docs/Classes/UUpgradeEffect/UUpgradeEffect.html", ["upgrade", "effect"], "");
addToContainers_class("UUpgrade_DamageAndDefense", "A basic upgrade that can change how much damage a selectable deals and receives", "Docs/Classes/UUpgrade_DamageAndDefense/UUpgrade_DamageAndDefense.html", ["upgrade_", "damage", "and", "defense"], "");
addToContainers_function("UUpgrade_DamageAndDefense", "", "Docs/Classes/UUpgrade_DamageAndDefense/Functions/UUpgrade_DamageAndDefense.html", ["upgrade_", "damage", "and", "defense"], "UUpgrade_DamageAndDefense");
addToContainers_variable("", "Outgoing damage multiplier multiplier e.g. 1.1 = 10% more damage", "Docs/Classes/UUpgrade_DamageAndDefense/Variables/.html", [], "UUpgrade_DamageAndDefense");
addToContainers_variable("", "Incoming damage multiplier multiplier e.g. 0.9 = 10% less incoming damage", "Docs/Classes/UUpgrade_DamageAndDefense/Variables/_1.html", [], "UUpgrade_DamageAndDefense");
addToContainers_class("UUpgrade_IncreaseResourceCapacity", "An upgrade that increases how much resources a collector can carry", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/UUpgrade_IncreaseResourceCapacity.html", ["upgrade_", "increase", "resource", "capacity"], "");
addToContainers_function("UUpgrade_IncreaseResourceCapacity", "", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Functions/UUpgrade_IncreaseResourceCapacity.html", ["upgrade_", "increase", "resource", "capacity"], "UUpgrade_IncreaseResourceCapacity");
addToContainers_variable("", "Multipliers for resource capacity", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Variables/.html", [], "UUpgrade_IncreaseResourceCapacity");
addToContainers_variable("", "", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Variables/_1.html", [], "UUpgrade_IncreaseResourceCapacity");
addToContainers_class("UUpgrade_AttackSpeed", "An upgrade that modifies attack speed", "Docs/Classes/UUpgrade_AttackSpeed/UUpgrade_AttackSpeed.html", ["upgrade_", "attack", "speed"], "");
addToContainers_function("UUpgrade_AttackSpeed", "", "Docs/Classes/UUpgrade_AttackSpeed/Functions/UUpgrade_AttackSpeed.html", ["upgrade_", "attack", "speed"], "UUpgrade_AttackSpeed");
addToContainers_variable("", "Normalized value for how much to increase attack speed by. Use negative values to decrease attack speed. e.g. 0.25 = increase attack speed by 25% -1 = reduce attack speed by 100%", "Docs/Classes/UUpgrade_AttackSpeed/Variables/.html", [], "UUpgrade_AttackSpeed");
addToContainers_variable("", "Actual mutliplier to pass into SetAttackRateViaMultiplier", "Docs/Classes/UUpgrade_AttackSpeed/Variables/_1.html", [], "UUpgrade_AttackSpeed");
addToContainers_class("AStartingGrid", "An actor that only gets spawned at the very start of the match. It defines what buildings/units a faction starts with and how they are layed out. To add buildings/units to what is spawned at the start of match for this faction add StartingGridComponents via editor. Then change their child actor class to whatever you want spawned. Move the StartingGridComponent around the grid to adjust the its spawn location (Z axis will be ignored and objects should be spawned with correct Z axis value, provided the Z values aren\'t insanely large). (0, 0, 0) is where the players camera will start at match start. Assumptions about the terrain below are made such as that it is flat. Also right now no faction checking is done for what is spawned meaning you can have one faction start with buildings/units from another faction. This may cause crashes during gameplay so should not be done.", "Docs/Classes/AStartingGrid/AStartingGrid.html", ["starting", "grid"], "");
addToContainers_function("AStartingGrid", "", "Docs/Classes/AStartingGrid/Functions/AStartingGrid.html", ["starting", "grid"], "AStartingGrid");
addToContainers_variable("bStartedInMap", "Whether already placed in map", "Docs/Classes/AStartingGrid/Variables/bStartedInMap.html", ["started", "in", "map"], "AStartingGrid");
addToContainers_variable("", "Dummy root component for mesh positioning", "Docs/Classes/AStartingGrid/Variables/.html", [], "AStartingGrid");
addToContainers_variable("", "", "Docs/Classes/AStartingGrid/Variables/_1.html", [], "AStartingGrid");
addToContainers_variable("", "The floor to make visualizing easier", "Docs/Classes/AStartingGrid/Variables/_2.html", [], "AStartingGrid");
addToContainers_variable("", "Reference to player state that wants this stuff spawned", "Docs/Classes/AStartingGrid/Variables/_3.html", [], "AStartingGrid");
addToContainers_variable("", "Maps each custom child actor component to what to spawn there", "Docs/Classes/AStartingGrid/Variables/_4.html", [], "AStartingGrid");
addToContainers_variable("", "Array of all the building types of buildings this grid spawned", "Docs/Classes/AStartingGrid/Variables/_5.html", [], "AStartingGrid");
addToContainers_variable("", "Array of all the unit types of units this grid spawned", "Docs/Classes/AStartingGrid/Variables/_6.html", [], "AStartingGrid");
addToContainers_variable("", "Whether to use human player index or CPU player index", "Docs/Classes/AStartingGrid/Variables/_7.html", [], "AStartingGrid");
addToContainers_variable("", "PIE player to use for each selectable that is a part of this grid. Overrides whatever is set on the actor itself. 0 = server player , 1 = 1st client, 2 = 2nd client, and so on", "Docs/Classes/AStartingGrid/Variables/_8.html", [], "AStartingGrid");
addToContainers_variable("", "Same as above but for CPU players", "Docs/Classes/AStartingGrid/Variables/_9.html", [], "AStartingGrid");
addToContainers_variable("", "", "Docs/Classes/AStartingGrid/Variables/_10.html", [], "AStartingGrid");
addToContainers_class("UStartingGridComponent", "A component to be added to a starting grid that allows an actor to be specified as a \"starting\" selectable", "Docs/Classes/UStartingGridComponent/UStartingGridComponent.html", ["starting", "grid", "component"], "");
addToContainers_class("SessionOptions", "", "Docs/Classes/SessionOptions/SessionOptions.html", ["session", "options"], "");
addToContainers_variable("MAX_NUM_LAN_SEARCH_RESULTS", "Max number of lobbies shown when browsing using online subsystem null", "Docs/Classes/SessionOptions/Variables/MAX_NUM_LAN_SEARCH_RESULTS.html", ["a", "x_", "n", "u", "m_", "l", "a", "n_", "s", "e", "a", "r", "c", "h_", "r", "e", "s", "u", "l", "t", "s"], "SessionOptions");
addToContainers_variable("MAX_NUM_STEAM_SEARCH_RESULTS", "Max number of search results to look for when browsing using steam online subsystem", "Docs/Classes/SessionOptions/Variables/MAX_NUM_STEAM_SEARCH_RESULTS.html", ["a", "x_", "n", "u", "m_", "s", "t", "e", "a", "m_", "s", "e", "a", "r", "c", "h_", "r", "e", "s", "u", "l", "t", "s"], "SessionOptions");
addToContainers_variable("PING_BUCKET_SIZE", "", "Docs/Classes/SessionOptions/Variables/PING_BUCKET_SIZE.html", ["i", "n", "g_", "b", "u", "c", "k", "e", "t_", "s", "i", "z", "e"], "SessionOptions");
addToContainers_variable("LOBBY_NAME_KEY", "The key for FSessionSettings that looks up lobby name", "Docs/Classes/SessionOptions/Variables/LOBBY_NAME_KEY.html", ["o", "b", "b", "y_", "n", "a", "m", "e_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("IS_PASSWORD_PROTECTED_KEY", "Key for FSessionSettings that looks up whether the lobby is password protected or not", "Docs/Classes/SessionOptions/Variables/IS_PASSWORD_PROTECTED_KEY.html", ["s_", "p", "a", "s", "s", "w", "o", "r", "d_", "p", "r", "o", "t", "e", "c", "t", "e", "d_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("MAP_NAME_KEY", "Key for FSessionSettings", "Docs/Classes/SessionOptions/Variables/MAP_NAME_KEY.html", ["a", "p_", "n", "a", "m", "e_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("STARTING_RESOURCES_KEY", "Key for retrieving starting resources amount from session", "Docs/Classes/SessionOptions/Variables/STARTING_RESOURCES_KEY.html", ["t", "a", "r", "t", "i", "n", "g_", "r", "e", "s", "o", "u", "r", "c", "e", "s_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("DEFEAT_CONDITION_KEY", "Key for retrieving defeat condition for session", "Docs/Classes/SessionOptions/Variables/DEFEAT_CONDITION_KEY.html", ["e", "f", "e", "a", "t_", "c", "o", "n", "d", "i", "t", "i", "o", "n_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("UNIQUE_RTS_KEY", "Key for unique setting for RTS games to filter out Space Wars search results when using steam", "Docs/Classes/SessionOptions/Variables/UNIQUE_RTS_KEY.html", ["n", "i", "q", "u", "e_", "r", "t", "s_", "k", "e", "y"], "SessionOptions");
addToContainers_class("ARTSGameSession", "Most of the stuff in this class does not need to be in here; it could go in say game instance instead.", "Docs/Classes/ARTSGameSession/ARTSGameSession.html", ["r", "t", "s", "game", "session"], "");
addToContainers_function("ARTSGameSession", "", "Docs/Classes/ARTSGameSession/Functions/ARTSGameSession.html", ["r", "t", "s", "game", "session"], "ARTSGameSession");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSGameSession/Variables/.html", [], "ARTSGameSession");
addToContainers_variable("", "Reference to game state ", "Docs/Classes/ARTSGameSession/Variables/_1.html", [], "ARTSGameSession");
addToContainers_variable("DoOnDestroySessionComplete", "What to do in OnDestroySessionComplete", "Docs/Classes/ARTSGameSession/Variables/DoOnDestroySessionComplete.html", ["do", "on", "destroy", "session", "complete"], "ARTSGameSession");
addToContainers_variable("SessionSearch", "Search results when looking for sessions", "Docs/Classes/ARTSGameSession/Variables/SessionSearch.html", ["session", "search"], "ARTSGameSession");
addToContainers_variable("OnCreateSessionCompleteDelegate", "Delegate called when session created", "Docs/Classes/ARTSGameSession/Variables/OnCreateSessionCompleteDelegate.html", ["on", "create", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnStartSessionCompleteDelegate", "Delegate called when session started", "Docs/Classes/ARTSGameSession/Variables/OnStartSessionCompleteDelegate.html", ["on", "start", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnDestroySessionCompleteDelegate", "Delegate for destroying a session", "Docs/Classes/ARTSGameSession/Variables/OnDestroySessionCompleteDelegate.html", ["on", "destroy", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnFindSessionsCompleteDelegate", "Delegate for searching for sessions", "Docs/Classes/ARTSGameSession/Variables/OnFindSessionsCompleteDelegate.html", ["on", "find", "sessions", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnJoinSessionCompleteDelegate", "Delegate after joining a session", "Docs/Classes/ARTSGameSession/Variables/OnJoinSessionCompleteDelegate.html", ["on", "join", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnCreateSessionComplete", "Handles to registered delegates for session", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnCreateSessionComplete.html", ["delegate", "handle_", "on", "create", "session", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnStartSessionComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnStartSessionComplete.html", ["delegate", "handle_", "on", "start", "session", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnDestroySessionComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnDestroySessionComplete.html", ["delegate", "handle_", "on", "destroy", "session", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnFindSessionsComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnFindSessionsComplete.html", ["delegate", "handle_", "on", "find", "sessions", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnJoinSessionComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnJoinSessionComplete.html", ["delegate", "handle_", "on", "join", "session", "complete"], "ARTSGameSession");
addToContainers_struct("FRTSConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FRTSConnectionAlwaysRelevantNodePair/FRTSConnectionAlwaysRelevantNodePair.html", ["r", "t", "s", "connection", "always", "relevant", "node", "pair"], "");
addToContainers_function("FRTSConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FRTSConnectionAlwaysRelevantNodePair/Functions/FRTSConnectionAlwaysRelevantNodePair.html", ["r", "t", "s", "connection", "always", "relevant", "node", "pair"], "FRTSConnectionAlwaysRelevantNodePair");
addToContainers_function("FRTSConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FRTSConnectionAlwaysRelevantNodePair/Functions/FRTSConnectionAlwaysRelevantNodePair_1.html", ["r", "t", "s", "connection", "always", "relevant", "node", "pair"], "FRTSConnectionAlwaysRelevantNodePair");
addToContainers_class("URTSReplicationGraph", "Have used UBasicReplicationGraph as a guide for how to implement this To enable this via ini: [/Script/OnlineSubsystemUtils.IpNetDriver] ReplicationDriverClassName=\"/Script/ReplicationGraph.RTSReplicationGraph\" The function AActor::IsReplicationPausedForConnection can be removed from selectables --------------------------------------------------------------------------------------------- TODO: - the infantry and building nodes: when they suddenly become revealed by fog what is actually happening is a new actor is being spawned. That\'s crazy! But if you add breakpoints in BeginPlay you can see it firing. This is unexpected. I did not know unreal creates a completely new actor when one transitions from being not relevant to relevant. What I actually want is just to stop the updates coming through. So try and make this happen. --------------------------------------------------------------------------------------------- Few things with buildings: - in the time between TearOff and Destroy being called TornOff gets spammed. Have tried UBasicReplicationGraph and it does not happen with that. Oddly if I create an exact replica of UBasicReplicationGraph and use that it still happens. Possibly OnRep functions can spam too - I get a GUID error sometimes when a building is destroyed. Get a massive like 5sec hitch when it happens. Perhaps see if it happens with basic replication graph. Update: UBasicReplicationGraph does not actually load if set in config file. This explains why my replica of basic rep graph was acting differently! So even with basic replication graph I get TornOff spam. So the problem is possibly with the default implementation of replication graph. I was under the impression that tear off is supported by it. Summary: TornOff spam happens even with basic rep graph but the GUID error does not. TornOff spam is probably a problem with engine\'s rep graph implementation while the GUID error could be something to do with my RTS rep graph implementation. ---------------------------------------------------------------------------------------------", "Docs/Classes/URTSReplicationGraph/URTSReplicationGraph.html", ["r", "t", "s", "replication", "graph"], "");
addToContainers_function("URTSReplicationGraph", "", "Docs/Classes/URTSReplicationGraph/Functions/URTSReplicationGraph.html", ["r", "t", "s", "replication", "graph"], "URTSReplicationGraph");
addToContainers_variable("", "-------------------------------------------------------------", "Docs/Classes/URTSReplicationGraph/Variables/.html", [], "URTSReplicationGraph");
addToContainers_variable("", "Nodes for a team Key = Statics::TeamToArrayIndex(Team)", "Docs/Classes/URTSReplicationGraph/Variables/_1.html", [], "URTSReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraph/Variables/_2.html", [], "URTSReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraph/Variables/_3.html", [], "URTSReplicationGraph");
addToContainers_variable("TeamVisibilityInfos", "", "Docs/Classes/URTSReplicationGraph/Variables/TeamVisibilityInfos.html", ["team", "visibility", "infos"], "URTSReplicationGraph");
addToContainers_variable("", "Actors that are only supposed to replicate to their owning connection, but that did not have a connection on spawn", "Docs/Classes/URTSReplicationGraph/Variables/_4.html", [], "URTSReplicationGraph");
addToContainers_variable("", "Selectables that did not have a connection on spawn", "Docs/Classes/URTSReplicationGraph/Variables/_5.html", [], "URTSReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraph/Variables/_6.html", [], "URTSReplicationGraph");
addToContainers_variable("ClassRepNodePolicies", "Maps UClass to its mapping policy", "Docs/Classes/URTSReplicationGraph/Variables/ClassRepNodePolicies.html", ["class", "rep", "node", "policies"], "URTSReplicationGraph");
addToContainers_variable("RTSReplicationGraphFrame", "[Workaround] This exists because UReplicationGraph::ReplicationGraphFrame is private. Note I have not modified GetReplicationGraphFrame() to use this but it appears it\'s *only* used for debugging so I won\'t bother with it", "Docs/Classes/URTSReplicationGraph/Variables/RTSReplicationGraphFrame.html", ["t", "s", "replication", "graph", "frame"], "URTSReplicationGraph");
addToContainers_class("URTSReplicationGraphConnection", "This class so far is just an exact copy of UNetReplicationGraphConnection but some of the access specificers have been made usable by URTSReplicationGraph", "Docs/Classes/URTSReplicationGraphConnection/URTSReplicationGraphConnection.html", ["r", "t", "s", "replication", "graph", "connection"], "");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraphConnection/Variables/.html", [], "URTSReplicationGraphConnection");
addToContainers_variable("RTSPendingDestructInfoList", "[Workaround] Here because PendingDestructInfoList is private", "Docs/Classes/URTSReplicationGraphConnection/Variables/RTSPendingDestructInfoList.html", ["t", "s", "pending", "destruct", "info", "list"], "URTSReplicationGraphConnection");
addToContainers_class("URTSReplicationGraphNode_ActorList", "------------------------------------------------------------------------------------------------", "Docs/Classes/URTSReplicationGraphNode_ActorList/URTSReplicationGraphNode_ActorList.html", ["r", "t", "s", "replication", "graph", "node_", "actor", "list"], "");
addToContainers_function("URTSReplicationGraphNode_ActorList", "", "Docs/Classes/URTSReplicationGraphNode_ActorList/Functions/URTSReplicationGraphNode_ActorList.html", ["r", "t", "s", "replication", "graph", "node_", "actor", "list"], "URTSReplicationGraphNode_ActorList");
addToContainers_variable("ReplicationActorList", "The list of actors", "Docs/Classes/URTSReplicationGraphNode_ActorList/Variables/ReplicationActorList.html", ["replication", "actor", "list"], "URTSReplicationGraphNode_ActorList");
addToContainers_class("URTSReplicationGraphNode_AlwaysRelevant", "Actors that are always relevant to everyone", "Docs/Classes/URTSReplicationGraphNode_AlwaysRelevant/URTSReplicationGraphNode_AlwaysRelevant.html", ["r", "t", "s", "replication", "graph", "node_", "always", "relevant"], "");
addToContainers_class("URTSReplicationGraphNode_AlwaysRelevantForConnection", "Actors that are only relevant to a certain connection", "Docs/Classes/URTSReplicationGraphNode_AlwaysRelevantForConnection/URTSReplicationGraphNode_AlwaysRelevantForConnection.html", ["r", "t", "s", "replication", "graph", "node_", "always", "relevant", "for", "connection"], "");
addToContainers_class("URTSReplicationGraphNode_TeamBuildings", "One of these exist for each team. Contains the buildings on that team", "Docs/Classes/URTSReplicationGraphNode_TeamBuildings/URTSReplicationGraphNode_TeamBuildings.html", ["r", "t", "s", "replication", "graph", "node_", "team", "buildings"], "");
addToContainers_variable("Buildings", "Kind of odd but during GatherActorListsForConnection only an array of elements can be added, not a single element, so this is the array to add", "Docs/Classes/URTSReplicationGraphNode_TeamBuildings/Variables/Buildings.html", [], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_variable("Team", "Team this node is for", "Docs/Classes/URTSReplicationGraphNode_TeamBuildings/Variables/Team.html", [], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_class("URTSReplicationGraphNode_TeamInfantry", "One of these exist for each team. Contains the infantry on that team", "Docs/Classes/URTSReplicationGraphNode_TeamInfantry/URTSReplicationGraphNode_TeamInfantry.html", ["r", "t", "s", "replication", "graph", "node_", "team", "infantry"], "");
addToContainers_variable("Infantry", "-------------------------------------------------------------------", "Docs/Classes/URTSReplicationGraphNode_TeamInfantry/Variables/Infantry.html", [], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_variable("Team", "Team this node is for", "Docs/Classes/URTSReplicationGraphNode_TeamInfantry/Variables/Team.html", [], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_struct("FTestConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FTestConnectionAlwaysRelevantNodePair/FTestConnectionAlwaysRelevantNodePair.html", ["test", "connection", "always", "relevant", "node", "pair"], "");
addToContainers_function("FTestConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FTestConnectionAlwaysRelevantNodePair/Functions/FTestConnectionAlwaysRelevantNodePair.html", ["test", "connection", "always", "relevant", "node", "pair"], "FTestConnectionAlwaysRelevantNodePair");
addToContainers_function("FTestConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FTestConnectionAlwaysRelevantNodePair/Functions/FTestConnectionAlwaysRelevantNodePair_1.html", ["test", "connection", "always", "relevant", "node", "pair"], "FTestConnectionAlwaysRelevantNodePair");
addToContainers_class("UTestReplicationGraph", "This replication graph is for testing only. Mainly using this to try and track down problems that are happening with URTSReplicationGraph To enable this via ini: [/Script/OnlineSubsystemUtils.IpNetDriver] ReplicationDriverClassName=\"/Script/ReplicationGraph.TestReplicationGraph\"", "Docs/Classes/UTestReplicationGraph/UTestReplicationGraph.html", ["test", "replication", "graph"], "");
addToContainers_function("UTestReplicationGraph", "", "Docs/Classes/UTestReplicationGraph/Functions/UTestReplicationGraph.html", ["test", "replication", "graph"], "UTestReplicationGraph");
addToContainers_variable("", "------------------------------------------------", "Docs/Classes/UTestReplicationGraph/Variables/.html", [], "UTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UTestReplicationGraph/Variables/_1.html", [], "UTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UTestReplicationGraph/Variables/_2.html", [], "UTestReplicationGraph");
addToContainers_variable("ClassRepNodePolicies", "Maps UClass to its mapping policy", "Docs/Classes/UTestReplicationGraph/Variables/ClassRepNodePolicies.html", ["class", "rep", "node", "policies"], "UTestReplicationGraph");
addToContainers_class("UTestReplicationGraphNode_ActorList", "---------- Note: ----------- This inherits from UReplicationGraphNode_ActorList which differs from how I did it in URTSReplicationGraph", "Docs/Classes/UTestReplicationGraphNode_ActorList/UTestReplicationGraphNode_ActorList.html", ["test", "replication", "graph", "node_", "actor", "list"], "");
addToContainers_function("UTestReplicationGraphNode_ActorList", "", "Docs/Classes/UTestReplicationGraphNode_ActorList/Functions/UTestReplicationGraphNode_ActorList.html", ["test", "replication", "graph", "node_", "actor", "list"], "UTestReplicationGraphNode_ActorList");
addToContainers_class("UTestReplicationGraphNode_AlwaysRelevant", "", "Docs/Classes/UTestReplicationGraphNode_AlwaysRelevant/UTestReplicationGraphNode_AlwaysRelevant.html", ["test", "replication", "graph", "node_", "always", "relevant"], "");
addToContainers_class("UTestReplicationGraphNode_AlwaysRelevantForConnection", "", "Docs/Classes/UTestReplicationGraphNode_AlwaysRelevantForConnection/UTestReplicationGraphNode_AlwaysRelevantForConnection.html", ["test", "replication", "graph", "node_", "always", "relevant", "for", "connection"], "");
addToContainers_class("UAnotherTestReplicationGraph", "Another replication graph for testing only. This is an exact replica of UBasicReplicationGraph yet it behaves differently. I think I\'m done with this.", "Docs/Classes/UAnotherTestReplicationGraph/UAnotherTestReplicationGraph.html", ["another", "test", "replication", "graph"], "");
addToContainers_function("UAnotherTestReplicationGraph", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/UAnotherTestReplicationGraph.html", ["another", "test", "replication", "graph"], "UAnotherTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UAnotherTestReplicationGraph/Variables/.html", [], "UAnotherTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UAnotherTestReplicationGraph/Variables/_1.html", [], "UAnotherTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UAnotherTestReplicationGraph/Variables/_2.html", [], "UAnotherTestReplicationGraph");
addToContainers_variable("", "Actors that are only supposed to replicate to their owning connection, but that did not have a connection on spawn", "Docs/Classes/UAnotherTestReplicationGraph/Variables/_3.html", [], "UAnotherTestReplicationGraph");
addToContainers_class("ADevelopmentSettings", "All these settings are for development only and have no effect on shipping build. An alternative to using this class is to use UEditorPlaySettingsWidget", "Docs/Classes/ADevelopmentSettings/ADevelopmentSettings.html", ["development", "settings"], "");
addToContainers_function("ADevelopmentSettings", "", "Docs/Classes/ADevelopmentSettings/Functions/ADevelopmentSettings.html", ["development", "settings"], "ADevelopmentSettings");
addToContainers_variable("", "NOTE: after changing the name of this variable make sure to change name in PostEditChangeChainProperty", "Docs/Classes/ADevelopmentSettings/Variables/.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Skip just the opening intro movie/whatever and go straight to main menu", "Docs/Classes/ADevelopmentSettings/Variables/_1.html", [], "ADevelopmentSettings");
addToContainers_variable("", "If bSkipMainMenu is true, array of what team each player should be on. Can set observer here too Index 0 = server Index 1 = client 1 Index 2 = client 2 and so on", "Docs/Classes/ADevelopmentSettings/Variables/_2.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Number of CPU players to use in PIE", "Docs/Classes/ADevelopmentSettings/Variables/_3.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Info for CPU players when playing in PIE/standalone", "Docs/Classes/ADevelopmentSettings/Variables/_4.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Resources all players start with", "Docs/Classes/ADevelopmentSettings/Variables/_5.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Starting resources as a struct. Edited on post edit. Wow, this needed to be a UPROPERTY in order for the post edits to actually save. I did not know that", "Docs/Classes/ADevelopmentSettings/Variables/_6.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Defeat condition to use if skipping main menu to simulate a match. Use NoCondition to make it impossible for match to end without leaving", "Docs/Classes/ADevelopmentSettings/Variables/_7.html", [], "ADevelopmentSettings");
addToContainers_variable("", "What to do with selectables already placed on map that do not have a valid owner index. Couple of points though: - selectables will never be spawned if their final owner is on the wrong faction - selectables will never be spawned if their final owner is a match observer", "Docs/Classes/ADevelopmentSettings/Variables/_8.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Same as above but for selectables placed on map that are trying to be assigned to a CPU player as opposed to a human player", "Docs/Classes/ADevelopmentSettings/Variables/_9.html", [], "ADevelopmentSettings");
addToContainers_variable("", "The widget to use for the cheat widget", "Docs/Classes/ADevelopmentSettings/Variables/_10.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Whether to show the cheat widget by default at the start of the match or not. To toggle the cheat widget in match use the \"=\" button", "Docs/Classes/ADevelopmentSettings/Variables/_11.html", [], "ADevelopmentSettings");
addToContainers_variable("", "", "Docs/Classes/ADevelopmentSettings/Variables/_12.html", [], "ADevelopmentSettings");
addToContainers_variable("", "", "Docs/Classes/ADevelopmentSettings/Variables/_13.html", [], "ADevelopmentSettings");
addToContainers_class("UEnumStringRepresentations", "This class contains mapping from enum to the string form for it so it can be shown on UI. Static variables aren\'t good enough because I want to default fill the containers but I don\'t think UENUM exist yet so it doesn\'t work (thinking about it I thought UHT runs first, generates code, so UENUM info should be available). Anyway I never create this class at anytime - just using the default object you can get the info you want. In the future perhaps I could spawn this class sometime when the editor starts and that way users can edit strings without having to recompile C++. Then you would wanna make sure to not get the default object but get that other one. This class was added because sometimes I need enum string representations but the game instance isn\'t alive e.g. for editor utility widgets Also most of this class is wrapped in EDITOR_ONLY preproc. There\'s nothing stop", "Docs/Classes/UEnumStringRepresentations/UEnumStringRepresentations.html", ["enum", "string", "representations"], "");
addToContainers_function("UEnumStringRepresentations", "", "Docs/Classes/UEnumStringRepresentations/Functions/UEnumStringRepresentations.html", ["enum", "string", "representations"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_EditorPlaySkippingOption", "I use CDO of this class and that\'s it. In future if that changes then make these non-const, and only populate them if we\'re NOT the CDO cause the CDO will be ignored. This will save on memory", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_EditorPlaySkippingOption.html", ["enum", "to", "string_", "editor", "play", "skipping", "option"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_DefeatConditions", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_DefeatConditions.html", ["enum", "to", "string_", "defeat", "conditions"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_InvalidOwnerIndexAction", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_InvalidOwnerIndexAction.html", ["enum", "to", "string_", "invalid", "owner", "index", "action"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_Faction", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_Faction.html", ["enum", "to", "string_", "faction"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_Team", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_Team.html", ["enum", "to", "string_", "team"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_CPUDifficulty", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_CPUDifficulty.html", ["enum", "to", "string_", "c", "p", "u", "difficulty"], "UEnumStringRepresentations");
addToContainers_struct("FInputInfoBase", "", "Docs/Structs/FInputInfoBase/FInputInfoBase.html", ["input", "info", "base"], "");
addToContainers_function("FInputInfoBase", "", "Docs/Structs/FInputInfoBase/Functions/FInputInfoBase.html", ["input", "info", "base"], "FInputInfoBase");
addToContainers_function("FInputInfoBase", "", "Docs/Structs/FInputInfoBase/Functions/FInputInfoBase_1.html", ["input", "info", "base"], "FInputInfoBase");
addToContainers_variable("DisplayName", "The name to appear in game\'s UI", "Docs/Structs/FInputInfoBase/Variables/DisplayName.html", ["display", "name"], "FInputInfoBase");
addToContainers_variable("ActionName", "The name to appear in the project settings. By default the ctor will use the display name.", "Docs/Structs/FInputInfoBase/Variables/ActionName.html", ["action", "name"], "FInputInfoBase");
addToContainers_variable("KeyWithModifiers", "The default key for this action. This is the key it will be assigned to the first time the player starts the game. Can use EKeys::Invalid to signal it doesn\'t have a key bound to it by default.", "Docs/Structs/FInputInfoBase/Variables/KeyWithModifiers.html", ["key", "with", "modifiers"], "FInputInfoBase");
addToContainers_variable("ActionAsEnum", "What this action is in enum form. Will be \"None\" if this is for an axis mapping", "Docs/Structs/FInputInfoBase/Variables/ActionAsEnum.html", ["action", "as", "enum"], "FInputInfoBase");
addToContainers_variable("AxisAsEnum", "Will be \"None\" if this is for an action mapping", "Docs/Structs/FInputInfoBase/Variables/AxisAsEnum.html", ["axis", "as", "enum"], "FInputInfoBase");
addToContainers_variable("1", "Whether the action needs to be executed when the game is paused", "Docs/Structs/FInputInfoBase/Variables/1.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether the action is even allowed to be remapped from the default value by the player", "Docs/Structs/FInputInfoBase/Variables/1_1.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether the action is for when WITH_EDITOR is true only", "Docs/Structs/FInputInfoBase/Variables/1_2.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether this action is for a player participating in the match", "Docs/Structs/FInputInfoBase/Variables/1_3.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether this mapping is for a person observing a match", "Docs/Structs/FInputInfoBase/Variables/1_4.html", [], "FInputInfoBase");
addToContainers_struct("FInputActionInfo", "", "Docs/Structs/FInputActionInfo/FInputActionInfo.html", ["input", "action", "info"], "");
addToContainers_function("FInputActionInfo", "", "Docs/Structs/FInputActionInfo/Functions/FInputActionInfo.html", ["input", "action", "info"], "FInputActionInfo");
addToContainers_function("FInputActionInfo", "@param InDisplayName - name that will appear in game UI. Also the name that will appear in project settings in Key Mappings. @param InDefaultKey - the key that will be bound to this action by default. Use EKeys::Invalid to let it have no default key. @param KeyModifierFlags - whether a modifier key has to be held down while key is pressed @param PressedAction - function to call when the key is pressed @param ReleasedAction - the function to call when the button is released. Can be left null @param bShouldExecuteWhenPaused - whether the key event should register while the game is paused @param bIsAllowedToBeRemapped - whether the key is allowed to be remapped by the player", "Docs/Structs/FInputActionInfo/Functions/FInputActionInfo_1.html", ["input", "action", "info"], "FInputActionInfo");
addToContainers_variable("OnPressedAction", "Name of function to call for input event", "Docs/Structs/FInputActionInfo/Variables/OnPressedAction.html", ["on", "pressed", "action"], "FInputActionInfo");
addToContainers_variable("OnReleasedAction", "", "Docs/Structs/FInputActionInfo/Variables/OnReleasedAction.html", ["on", "released", "action"], "FInputActionInfo");
addToContainers_class("KeyMappings", "", "Docs/Classes/KeyMappings/KeyMappings.html", ["key", "mappings"], "");
addToContainers_variable("NUM_ACTIONS", "", "Docs/Classes/KeyMappings/Variables/NUM_ACTIONS.html", ["u", "m_", "a", "c", "t", "i", "o", "n", "s"], "KeyMappings");
addToContainers_variable("ActionInfos", "This can actually be made const and TFixedAllocator<NUM_ACTIONS>. Same with AxisInfos. In fact in order to stop users accidentially modifiying it it should", "Docs/Classes/KeyMappings/Variables/ActionInfos.html", ["action", "infos"], "KeyMappings");
addToContainers_variable("NumArrayEntries", "static FInputActionInfo ActionInfos[NUM_ACTIONS];", "Docs/Classes/KeyMappings/Variables/NumArrayEntries.html", ["num", "array", "entries"], "KeyMappings");
addToContainers_struct("FInputAxisInfo", "", "Docs/Structs/FInputAxisInfo/FInputAxisInfo.html", ["input", "axis", "info"], "");
addToContainers_function("FInputAxisInfo", "", "Docs/Structs/FInputAxisInfo/Functions/FInputAxisInfo.html", ["input", "axis", "info"], "FInputAxisInfo");
addToContainers_function("FInputAxisInfo", "", "Docs/Structs/FInputAxisInfo/Functions/FInputAxisInfo_1.html", ["input", "axis", "info"], "FInputAxisInfo");
addToContainers_variable("FunctionPtr", "Name of function to call for input event", "Docs/Structs/FInputAxisInfo/Variables/FunctionPtr.html", ["function", "ptr"], "FInputAxisInfo");
addToContainers_variable("Scale", "", "Docs/Structs/FInputAxisInfo/Variables/Scale.html", [], "FInputAxisInfo");
addToContainers_class("AxisMappings", "", "Docs/Classes/AxisMappings/AxisMappings.html", ["axis", "mappings"], "");
addToContainers_variable("NUM_AXIS", "", "Docs/Classes/AxisMappings/Variables/NUM_AXIS.html", ["u", "m_", "a", "x", "i", "s"], "AxisMappings");
addToContainers_variable("AxisInfos", "--------------------------------------------------------", "Docs/Classes/AxisMappings/Variables/AxisInfos.html", ["axis", "infos"], "AxisMappings");
addToContainers_variable("NumArrayEntries", "static FInputAxisInfo AxisInfos[NUM_AXIS];", "Docs/Classes/AxisMappings/Variables/NumArrayEntries.html", ["num", "array", "entries"], "AxisMappings");
addToContainers_class("InputMappings", "Class for input in general (both action mappings and axis mappings)", "Docs/Classes/InputMappings/InputMappings.html", ["input", "mappings"], "");
addToContainers_struct("FControlSettingDependencyInfo", "Struct to hold information about a dependency a setting has on another setting", "Docs/Structs/FControlSettingDependencyInfo/FControlSettingDependencyInfo.html", ["control", "setting", "dependency", "info"], "");
addToContainers_function("FControlSettingDependencyInfo", "Never call this ctor", "Docs/Structs/FControlSettingDependencyInfo/Functions/FControlSettingDependencyInfo.html", ["control", "setting", "dependency", "info"], "FControlSettingDependencyInfo");
addToContainers_function("FControlSettingDependencyInfo", "Ctor for when dependency is a bool @param InDependency - the other setting @param bInRequiredValue - value InDependency must be in order to be editable in UI", "Docs/Structs/FControlSettingDependencyInfo/Functions/FControlSettingDependencyInfo_1.html", ["control", "setting", "dependency", "info"], "FControlSettingDependencyInfo");
addToContainers_function("FControlSettingDependencyInfo", "Ctor for when dependency is a float", "Docs/Structs/FControlSettingDependencyInfo/Functions/FControlSettingDependencyInfo_2.html", ["control", "setting", "dependency", "info"], "FControlSettingDependencyInfo");
addToContainers_variable("Dependency", "", "Docs/Structs/FControlSettingDependencyInfo/Variables/Dependency.html", [], "FControlSettingDependencyInfo");
addToContainers_variable("DependencyFullfilledOperator", "What the dependency must be in relation to required value for it to be fullfilled", "Docs/Structs/FControlSettingDependencyInfo/Variables/DependencyFullfilledOperator.html", ["dependency", "fullfilled", "operator"], "FControlSettingDependencyInfo");
addToContainers_variable("bRequiredValue", "Required value if dependency is a bool", "Docs/Structs/FControlSettingDependencyInfo/Variables/bRequiredValue.html", ["required", "value"], "FControlSettingDependencyInfo");
addToContainers_variable("RequiredValue", "Required value if dependency is a float", "Docs/Structs/FControlSettingDependencyInfo/Variables/RequiredValue.html", ["required", "value"], "FControlSettingDependencyInfo");
addToContainers_struct("FControlSettingInfo", "A struct that stores the default value for a control setting + its min and max and how much to adjust it by by default", "Docs/Structs/FControlSettingInfo/FControlSettingInfo.html", ["control", "setting", "info"], "");
addToContainers_function("FControlSettingInfo", "Never use this ctor ", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "Only use this constructor @param VariablePtr - reference to the variable that this is for @param InDefaultValue - the default value to write to .ini file when starting game for the first time @param InUIDependencies - this array contains what other variables values must be in order for this setting to be editable in the UI. This applies to UI only. Ensure your func that sets the value also takes its dependencies into account if it needs to", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_1.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "Float constructor that takes only one dependency for readability", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_2.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "Ctors for bools", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_3.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_4.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_variable("DisplayName", "The name it display on the UI", "Docs/Structs/FControlSettingInfo/Variables/DisplayName.html", ["display", "name"], "FControlSettingInfo");
addToContainers_variable("VariablePtr", "Pointer to the variable this struct is for. If *VariablePtr == -1 then it is the default value. However if *VariablePtr == DefaultValueStep then that also means it equals the defaul value. Either is fine", "Docs/Structs/FControlSettingInfo/Variables/VariablePtr.html", ["variable", "ptr"], "FControlSettingInfo");
addToContainers_variable("VariableType", "", "Docs/Structs/FControlSettingInfo/Variables/VariableType.html", ["variable", "type"], "FControlSettingInfo");
addToContainers_variable("", "Default value to use first time starting up game", "Docs/Structs/FControlSettingInfo/Variables/.html", [], "FControlSettingInfo");
addToContainers_variable("DefaultValueStep", "Index in Steps that is where the default value is. If Steps does not contain DefaultValue then DefaultValueStep will be an index in Steps that is close to DefaultValue", "Docs/Structs/FControlSettingInfo/Variables/DefaultValueStep.html", ["default", "value", "step"], "FControlSettingInfo");
addToContainers_variable("Steps", "Values that this variable can take on", "Docs/Structs/FControlSettingInfo/Variables/Steps.html", [], "FControlSettingInfo");
addToContainers_variable("", "Array of other settings that must be certain values for this setting to be editable in UI", "Docs/Structs/FControlSettingInfo/Variables/_1.html", [], "FControlSettingInfo");
addToContainers_class("URTSGameUserSettings", "Custom game user settings for RTS. All settings in this class have the possibility to be modified at run time. Class updates the GameUserSettings.ini file Note: while testing with standalone stuff might not behave exactly how you would expect. I think this is because perhaps in standalone the .ini file never gets written to. Best test with PIE. ------------------------------------------------------------------------------------------- Some terminology: - apply settings means to use the values stored in the config variable on this class (not the ones in the .ini file) and make them take effect e.g. the volume actually changes, or the mouse sensitivity actually changes. Then they will be written to the .ini file. - to restore settings to default means to put default values into the config variables on this class (again NOT the .ini file). Settings still need to be applied for them to take effect. - to revert changes would mean to load from the .ini file into the config variables in this class. This will probably happen when I implement a settings menu and it asks if you would like to keep the changes. ------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- Some notes about UGameUserSettings: - When launching standalone it seems to ignore the ini file - when launching PIE the .ini file is not loaded. Therefore changes to the .ini file must be done before launching the editor for them to take effect. I could probably call LoadSettings some time after PIE starts to load them. It\'s just a matter of whether it causes PIE to take significantly longer to load. ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- Some notes about how this class has been implemented: - If you modify your .ini file and start the editor then the changes will not be applied. You must change the defaults defined in C++ instead. However when the game is packaged then values in the .ini file will be used. You can actually use your .ini file values if you set bUseIniValues to true (must be done before starting the editor). That variable will stay set to true until you set it back to false via your .ini file. While the editor is open you can make changes to the .ini file, save it, and those changes will take effect for the next PIE session. Note the game has to load the ini file right before each PIE session so it\'s advisable to set it back to false once you\'re done fidling with ini file values. And once you do your next play session will use defaults. - In a packaged game you can set GameStartType to HasNotStartedGameBefore to cause all settings to be reset to default. - If you want to modify your key mappings then do it in GameUserSettings.ini in ActionToKey and AxisToKey. Do not modify Input.ini. Changes made there will have no effect. The same goes for modifying the action mappings and axis mappings in project settings in editor. ---------------------------------------------------------------------------------------------- To add a new control setting via C++: 1. Add a config variable declaration below like the other variables 2. In CommonEnums.h under EControlSettingType add a new entry for your variable. Name is arbitrary 3. In ctor add a ControlSettings.Emplace entry with the values you would like 4. In ApplyControlSettings(AMyPlayerController *) add an entry that will update what you want. You will need to implement this function yourself. 5. Compile If you just want to change the default value of a variable defined in this class you need to do it in the ctor Emplace corrisponding to it.", "Docs/Classes/URTSGameUserSettings/URTSGameUserSettings.html", ["r", "t", "s", "game", "user", "settings"], "");
addToContainers_function("URTSGameUserSettings", "==========================================================================================", "Docs/Classes/URTSGameUserSettings/Functions/URTSGameUserSettings.html", ["r", "t", "s", "game", "user", "settings"], "URTSGameUserSettings");
addToContainers_variable("MIN_CAMERA_ZOOM_AMOUNT", "The min and max amounts the camera can be zoomed", "Docs/Classes/URTSGameUserSettings/Variables/MIN_CAMERA_ZOOM_AMOUNT.html", ["i", "n_", "c", "a", "m", "e", "r", "a_", "z", "o", "o", "m_", "a", "m", "o", "u", "n", "t"], "URTSGameUserSettings");
addToContainers_variable("MAX_CAMERA_ZOOM_AMOUNT", "", "Docs/Classes/URTSGameUserSettings/Variables/MAX_CAMERA_ZOOM_AMOUNT.html", ["a", "x_", "c", "a", "m", "e", "r", "a_", "z", "o", "o", "m_", "a", "m", "o", "u", "n", "t"], "URTSGameUserSettings");
addToContainers_variable("MIN_CAMERA_PITCH", "Min/max amount of pitch that can be applied to camera rotation", "Docs/Classes/URTSGameUserSettings/Variables/MIN_CAMERA_PITCH.html", ["i", "n_", "c", "a", "m", "e", "r", "a_", "p", "i", "t", "c", "h"], "URTSGameUserSettings");
addToContainers_variable("MAX_CAMERA_PITCH", "", "Docs/Classes/URTSGameUserSettings/Variables/MAX_CAMERA_PITCH.html", ["a", "x_", "c", "a", "m", "e", "r", "a_", "p", "i", "t", "c", "h"], "URTSGameUserSettings");
addToContainers_variable("MOUSE_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER", "This will only come into effect when player wants to move the camera in a diagonal direction because mouse is in a corner of the screen. By default total movement will be same for diagonal (not sqrt(2) or 41% faster) but it just feels a little slow so use this multiplier to speed it up.", "Docs/Classes/URTSGameUserSettings/Variables/MOUSE_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER.html", ["o", "u", "s", "e_", "d", "i", "a", "g", "o", "n", "a", "l_", "m", "o", "v", "e", "m", "e", "n", "t_", "s", "p", "e", "e", "d_", "m", "u", "l", "t", "i", "p", "l", "i", "e", "r"], "URTSGameUserSettings");
addToContainers_variable("KEYBOARD_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER", "Same as above except for keyboard WASD movement", "Docs/Classes/URTSGameUserSettings/Variables/KEYBOARD_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER.html", ["e", "y", "b", "o", "a", "r", "d_", "d", "i", "a", "g", "o", "n", "a", "l_", "m", "o", "v", "e", "m", "e", "n", "t_", "s", "p", "e", "e", "d_", "m", "u", "l", "t", "i", "p", "l", "i", "e", "r"], "URTSGameUserSettings");
addToContainers_variable("", "Whether the game has been started before. Can set this no to force default values to be applied next time starting game", "Docs/Classes/URTSGameUserSettings/Variables/.html", [], "URTSGameUserSettings");
addToContainers_variable("", "While testing with editor the C++ defaults are always used. Set this to true to use what is in your .ini file instead. It will stay true until you change it back to false. While true you the game will reload your ini file every PIE session so make sure to set it back to false when you are done testing values.", "Docs/Classes/URTSGameUserSettings/Variables/_1.html", [], "URTSGameUserSettings");
addToContainers_variable("", "True if has opened profile page. If false then it will be shown before they try to create/join a networked game", "Docs/Classes/URTSGameUserSettings/Variables/_2.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Nickname to use in singleplayer matches", "Docs/Classes/URTSGameUserSettings/Variables/_3.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The default faction to be set to when entering a lobby", "Docs/Classes/URTSGameUserSettings/Variables/_4.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Speed camera pans in match from keyboard input", "Docs/Classes/URTSGameUserSettings/Variables/_5.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Speed camera pans when moving mouse to the edge of the screen", "Docs/Classes/URTSGameUserSettings/Variables/_6.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Max speed of camera. How this is different from CameraPanSpeeds... they are more acceleration properties kinda of. They\'re actually both kind of redundant, just use this instead", "Docs/Classes/URTSGameUserSettings/Variables/_7.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much acceleration to apply to movement input for both keyboard and mouse edge. Must be greater than 0 otherwise camera will not move", "Docs/Classes/URTSGameUserSettings/Variables/_8.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Whether to enable camera movement lag or not via setting var on USpringArmComponent", "Docs/Classes/URTSGameUserSettings/Variables/_9.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much camera should lag behind when you\'re moving it. Just setting USpringArmComponent::CameraLagSpeed. 0 = no lag (instant), low values = more lag (slower). Will only be relevant if bEnableCameraMovementLag is true", "Docs/Classes/URTSGameUserSettings/Variables/_10.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Turning boost... just setting variables on the floating pawn movement component. This makes turns happen quicker", "Docs/Classes/URTSGameUserSettings/Variables/_11.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How fast camera stops. Larger = camera stops faster which is what you will want I think", "Docs/Classes/URTSGameUserSettings/Variables/_12.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How close mouse must be to the edge of the screen for camera panning to happen. 0 = no panning, 0.05 = 5% in from screen edge", "Docs/Classes/URTSGameUserSettings/Variables/_13.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much a scroll of the mouse wheel will change the zoom amount. Change CameraZoomSpeed to set how fast the change occurs", "Docs/Classes/URTSGameUserSettings/Variables/_14.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Speed camera changes to target zoom when scrolling middle mouse button. 0 = instant, increasing = faster", "Docs/Classes/URTSGameUserSettings/Variables/_15.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The sensitivity on X axis when looking around while the MMB is held down", "Docs/Classes/URTSGameUserSettings/Variables/_16.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The sensitivity on Y axis when looking around while the MMB is held down", "Docs/Classes/URTSGameUserSettings/Variables/_17.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Whether to invert the MMB yaw look-around.", "Docs/Classes/URTSGameUserSettings/Variables/_18.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Whether to invert the MMB pitch look-around. 1.f = true, 0.f = false", "Docs/Classes/URTSGameUserSettings/Variables/_19.html", [], "URTSGameUserSettings");
addToContainers_variable("", "When looking around with MMB pressed, whether the camera should lag behind input or update instantly. True = lag behind and less responsive, false = updates instantly", "Docs/Classes/URTSGameUserSettings/Variables/_20.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The amount the camera will lag behind when looking around with MMB pressed. Larger implies more responsive", "Docs/Classes/URTSGameUserSettings/Variables/_21.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The camera pitch to start a match with and to return to when using the \'return to default pitch\' button", "Docs/Classes/URTSGameUserSettings/Variables/_22.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The default camera zoom amount that player will start match with and will be returned to when the \'return to default camera zoom\' button is pressed. Note this has nothing to do with how much you are allowed to zoom in/out during a match - this is just for the default amount to start match at", "Docs/Classes/URTSGameUserSettings/Variables/_23.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The speed at which the camera resets to default rotation/zoom when requested. Larger = faster. 0 will not work", "Docs/Classes/URTSGameUserSettings/Variables/_24.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Relevant to key presses. Amount of time allowed for an input to be considered a double click. Time is measured from when key is released to when key is pressed again. 0 can be used to disable double clicks altogether", "Docs/Classes/URTSGameUserSettings/Variables/_25.html", [], "URTSGameUserSettings");
addToContainers_variable("", "A threshold for how far the mouse can move from the click location before it is no longer considered a click", "Docs/Classes/URTSGameUserSettings/Variables/_26.html", [], "URTSGameUserSettings");
addToContainers_variable("", "When a ghost building is spawned and LMB is pressed: the amount of mouse movement required for the ghost to start being considered for rotation. Setting this as 0 means ghost can sometimes undesirably rotate when you click your LMB when you\'re trying to place it.", "Docs/Classes/URTSGameUserSettings/Variables/_27.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much ghost building rotates when LMB is pressed. Does not apply to the ghost rotation method \"Snap\"", "Docs/Classes/URTSGameUserSettings/Variables/_28.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Not a config property. Maps control settings to their info which includes a ref to the actual variable + many default values + max and min", "Docs/Classes/URTSGameUserSettings/Variables/_29.html", [], "URTSGameUserSettings");
addToContainers_variable("VOLUME_MIN", "Min/max value volume can be set to. These are kind of irrelevant now that the VOLUME_STEPS array is a thing", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_MIN.html", ["o", "l", "u", "m", "e_", "m", "i", "n"], "URTSGameUserSettings");
addToContainers_variable("VOLUME_MAX", "", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_MAX.html", ["o", "l", "u", "m", "e_", "m", "a", "x"], "URTSGameUserSettings");
addToContainers_variable("VOLUME_DEFAULT_STEP", "The index in VOLUME_STEPS that is considered the default volume", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_DEFAULT_STEP.html", ["o", "l", "u", "m", "e_", "d", "e", "f", "a", "u", "l", "t_", "s", "t", "e", "p"], "URTSGameUserSettings");
addToContainers_variable("NUM_VOLUME_STEPS", "", "Docs/Classes/URTSGameUserSettings/Variables/NUM_VOLUME_STEPS.html", ["u", "m_", "v", "o", "l", "u", "m", "e_", "s", "t", "e", "p", "s"], "URTSGameUserSettings");
addToContainers_variable("VOLUME_STEPS[NUM_VOLUME_STEPS]", "Different volume levels. When the UI wants to adjust volume it goes up or down a certain number of steps", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_STEPS[NUM_VOLUME_STEPS].html", ["o", "l", "u", "m", "e_", "s", "t", "e", "p", "s[", "n", "u", "m_", "v", "o", "l", "u", "m", "e_", "s", "t", "e", "p", "s]"], "URTSGameUserSettings");
addToContainers_variable("", "Maps sound class GetName() to volume step level. This TMap exists so volumes can be stored on persistent storage. Using FString as key because I assume a pointer will mean nothing when stored in .ini files", "Docs/Classes/URTSGameUserSettings/Variables/_30.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Maps key action to the key assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/_31.html", [], "URTSGameUserSettings");
addToContainers_variable("KeyToAction", "Maps a key to the action assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/KeyToAction.html", ["key", "to", "action"], "URTSGameUserSettings");
addToContainers_variable("", "Maps axis action to the key assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/_32.html", [], "URTSGameUserSettings");
addToContainers_variable("KeyToAxis", "Maps key to the axis action assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/KeyToAxis.html", ["key", "to", "axis"], "URTSGameUserSettings");
addToContainers_variable("", "Type of anti-aliasing e.g. FXAA, TAA", "Docs/Classes/URTSGameUserSettings/Variables/_33.html", [], "URTSGameUserSettings");
addToContainers_class("URTSDamageType", "Base class for all user created damage types Implementation notes: if new damage types aren\'t being automatically added to GI BP then this class may need to lose the abstract UCLASS specifier", "Docs/Classes/URTSDamageType/URTSDamageType.html", ["r", "t", "s", "damage", "type"], "");
addToContainers_function("URTSDamageType", "", "Docs/Classes/URTSDamageType/Functions/URTSDamageType.html", ["r", "t", "s", "damage", "type"], "URTSDamageType");
addToContainers_class("UDamageType_Default", "-----------------------------------------------------------------------------------------------", "Docs/Classes/UDamageType_Default/UDamageType_Default.html", ["damage", "type_", "default"], "");
addToContainers_class("UDamageType_Bullet", "", "Docs/Classes/UDamageType_Bullet/UDamageType_Bullet.html", ["damage", "type_", "bullet"], "");
addToContainers_class("UDamageType_SniperRound", "", "Docs/Classes/UDamageType_SniperRound/UDamageType_SniperRound.html", ["damage", "type_", "sniper", "round"], "");
addToContainers_class("UDamageType_Explosive", "", "Docs/Classes/UDamageType_Explosive/UDamageType_Explosive.html", ["damage", "type_", "explosive"], "");
addToContainers_class("UDamageType_BiologicalHeal", "", "Docs/Classes/UDamageType_BiologicalHeal/UDamageType_BiologicalHeal.html", ["damage", "type_", "biological", "heal"], "");
addToContainers_class("UDamageType_Shadow", "", "Docs/Classes/UDamageType_Shadow/UDamageType_Shadow.html", ["damage", "type_", "shadow"], "");
addToContainers_class("UDamageType_Lightning", "", "Docs/Classes/UDamageType_Lightning/UDamageType_Lightning.html", ["damage", "type_", "lightning"], "");
addToContainers_class("UDamageType_Frost", "", "Docs/Classes/UDamageType_Frost/UDamageType_Frost.html", ["damage", "type_", "frost"], "");
addToContainers_class("UDamageType_Nuke", "", "Docs/Classes/UDamageType_Nuke/UDamageType_Nuke.html", ["damage", "type_", "nuke"], "");
addToContainers_class("UDamageType_GAU8ArmourPiercing", "The ammo fired from the warthog", "Docs/Classes/UDamageType_GAU8ArmourPiercing/UDamageType_GAU8ArmourPiercing.html", ["damage", "type_", "g", "a", "u8", "armour", "piercing"], "");
addToContainers_class("UDamageType_GAU8HighExplosive", "The ammo fired from the warthog", "Docs/Classes/UDamageType_GAU8HighExplosive/UDamageType_GAU8HighExplosive.html", ["damage", "type_", "g", "a", "u8", "high", "explosive"], "");
addToContainers_class("DevelopmentStatics", "Functions and variables that are to aid in development and have no effect on a final shipping build", "Docs/Classes/DevelopmentStatics/DevelopmentStatics.html", ["development", "statics"], "");
addToContainers_class("InventoryItemBehavior", "This class is only here as a place to put functions that define the behavior for inventory items.", "Docs/Classes/InventoryItemBehavior/InventoryItemBehavior.html", ["inventory", "item", "behavior"], "");
addToContainers_class("Statics", "Selectables channel and ground channel combined into one because line traces can only be against one channel. So basically if something blocks either/both selectables or ground then it should block for this channel too", "Docs/Classes/Statics/Statics.html", [], "");
addToContainers_variable("PROJECT_API_MACRO_TEXT", "The text that the project\'s API macro that appears often in between classes and their names e.g. something like \"RTS_API\"", "Docs/Classes/Statics/Variables/PROJECT_API_MACRO_TEXT.html", ["r", "o", "j", "e", "c", "t_", "a", "p", "i_", "m", "a", "c", "r", "o_", "t", "e", "x", "t"], "Statics");
addToContainers_variable("HARDWARE_CURSOR_PATH", "Path where hardware cursors are located", "Docs/Classes/Statics/Variables/HARDWARE_CURSOR_PATH.html", ["a", "r", "d", "w", "a", "r", "e_", "c", "u", "r", "s", "o", "r_", "p", "a", "t", "h"], "Statics");
addToContainers_variable("POOLED_ACTOR_SPAWN_LOCATION", "A location to spawn lots of things that are pooled. It shouldn\'t have an effect on the game/performance even if it is in the middle of the map but to be safe it should be somewhere away from the play area", "Docs/Classes/Statics/Variables/POOLED_ACTOR_SPAWN_LOCATION.html", ["o", "o", "l", "e", "d_", "a", "c", "t", "o", "r_", "s", "p", "a", "w", "n_", "l", "o", "c", "a", "t", "i", "o", "n"], "Statics");
addToContainers_variable("INFO_ACTOR_SPAWN_LOCATION", "The location in the world where AInfo actors are spawned TODO should be specific to map", "Docs/Classes/Statics/Variables/INFO_ACTOR_SPAWN_LOCATION.html", ["n", "f", "o_", "a", "c", "t", "o", "r_", "s", "p", "a", "w", "n_", "l", "o", "c", "a", "t", "i", "o", "n"], "Statics");
addToContainers_variable("NUM_CUSTOM_MESH_SOCKETS", "Names of sockets that can be added to meshes that represent locations for abilities to attach to or spawn stuff at", "Docs/Classes/Statics/Variables/NUM_CUSTOM_MESH_SOCKETS.html", ["u", "m_", "c", "u", "s", "t", "o", "m_", "m", "e", "s", "h_", "s", "o", "c", "k", "e", "t", "s"], "Statics");
addToContainers_variable("MeshFloorSocket", "", "Docs/Classes/Statics/Variables/MeshFloorSocket.html", ["mesh", "floor", "socket"], "Statics");
addToContainers_variable("MeshMiddleSocket", "", "Docs/Classes/Statics/Variables/MeshMiddleSocket.html", ["mesh", "middle", "socket"], "Statics");
addToContainers_variable("MeshHeadSocket", "", "Docs/Classes/Statics/Variables/MeshHeadSocket.html", ["mesh", "head", "socket"], "Statics");
addToContainers_variable("LOBBY_OBSERVER_COMBO_BOX_OPTION", "Text to appear in lobby team combo box for being an observer", "Docs/Classes/Statics/Variables/LOBBY_OBSERVER_COMBO_BOX_OPTION.html", ["o", "b", "b", "y_", "o", "b", "s", "e", "r", "v", "e", "r_", "c", "o", "m", "b", "o_", "b", "o", "x_", "o", "p", "t", "i", "o", "n"], "Statics");
addToContainers_variable("NUM_FACTIONS", "For knowing how many elements in enums", "Docs/Classes/Statics/Variables/NUM_FACTIONS.html", ["u", "m_", "f", "a", "c", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_MENU_WIDGET_TYPES", "", "Docs/Classes/Statics/Variables/NUM_MENU_WIDGET_TYPES.html", ["u", "m_", "m", "e", "n", "u_", "w", "i", "d", "g", "e", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUILDING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_BUILDING_TYPES.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_UNIT_TYPES", "", "Docs/Classes/Statics/Variables/NUM_UNIT_TYPES.html", ["u", "m_", "u", "n", "i", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CONTEXT_ACTIONS", "", "Docs/Classes/Statics/Variables/NUM_CONTEXT_ACTIONS.html", ["u", "m_", "c", "o", "n", "t", "e", "x", "t_", "a", "c", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_CUSTOM_CONTEXT_ACTIONS", "", "Docs/Classes/Statics/Variables/NUM_CUSTOM_CONTEXT_ACTIONS.html", ["u", "m_", "c", "u", "s", "t", "o", "m_", "c", "o", "n", "t", "e", "x", "t_", "a", "c", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_ANIMATIONS", "", "Docs/Classes/Statics/Variables/NUM_ANIMATIONS.html", ["u", "m_", "a", "n", "i", "m", "a", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_GAME_NOTIFICATION_TYPES", "", "Docs/Classes/Statics/Variables/NUM_GAME_NOTIFICATION_TYPES.html", ["u", "m_", "g", "a", "m", "e_", "n", "o", "t", "i", "f", "i", "c", "a", "t", "i", "o", "n_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_GENERIC_GAME_WARNING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_GENERIC_GAME_WARNING_TYPES.html", ["u", "m_", "g", "e", "n", "e", "r", "i", "c_", "g", "a", "m", "e_", "w", "a", "r", "n", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_ARMOUR_TYPES", "", "Docs/Classes/Statics/Variables/NUM_ARMOUR_TYPES.html", ["u", "m_", "a", "r", "m", "o", "u", "r_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_UPGRADE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_UPGRADE_TYPES.html", ["u", "m_", "u", "p", "g", "r", "a", "d", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CPU_DIFFICULTIES", "", "Docs/Classes/Statics/Variables/NUM_CPU_DIFFICULTIES.html", ["u", "m_", "c", "p", "u_", "d", "i", "f", "f", "i", "c", "u", "l", "t", "i", "e", "s"], "Statics");
addToContainers_variable("NUM_DEFEAT_CONDITIONS", "Excludes DoesNothing", "Docs/Classes/Statics/Variables/NUM_DEFEAT_CONDITIONS.html", ["u", "m_", "d", "e", "f", "e", "a", "t_", "c", "o", "n", "d", "i", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_RESOURCE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_RESOURCE_TYPES.html", ["u", "m_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_HOUSING_RESOURCE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_HOUSING_RESOURCE_TYPES.html", ["u", "m_", "h", "o", "u", "s", "i", "n", "g_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_PERSISTENT_HUD_TAB_TYPES", "", "Docs/Classes/Statics/Variables/NUM_PERSISTENT_HUD_TAB_TYPES.html", ["u", "m_", "p", "e", "r", "s", "i", "s", "t", "e", "n", "t_", "h", "u", "d_", "t", "a", "b_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_MATCH_WIDGET_TYPES", "Includes None", "Docs/Classes/Statics/Variables/NUM_MATCH_WIDGET_TYPES.html", ["u", "m_", "m", "a", "t", "c", "h_", "w", "i", "d", "g", "e", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUILDING_ANIMATIONS", "", "Docs/Classes/Statics/Variables/NUM_BUILDING_ANIMATIONS.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "a", "n", "i", "m", "a", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_TARGETING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_TARGETING_TYPES.html", ["u", "m_", "t", "a", "r", "g", "e", "t", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_COMMAND_TARGET_TYPES", "", "Docs/Classes/Statics/Variables/NUM_COMMAND_TARGET_TYPES.html", ["u", "m_", "c", "o", "m", "m", "a", "n", "d_", "t", "a", "r", "g", "e", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_AFFILIATIONS", "Exclude observer", "Docs/Classes/Statics/Variables/NUM_AFFILIATIONS.html", ["u", "m_", "a", "f", "f", "i", "l", "i", "a", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_MATCH_LOADING_STATUSES", "Exclude observer", "Docs/Classes/Statics/Variables/NUM_MATCH_LOADING_STATUSES.html", ["u", "m_", "m", "a", "t", "c", "h_", "l", "o", "a", "d", "i", "n", "g_", "s", "t", "a", "t", "u", "s", "e", "s"], "Statics");
addToContainers_variable("NUM_STARTING_RESOURCE_AMOUNT_TYPES", "", "Docs/Classes/Statics/Variables/NUM_STARTING_RESOURCE_AMOUNT_TYPES.html", ["u", "m_", "s", "t", "a", "r", "t", "i", "n", "g_", "r", "e", "s", "o", "u", "r", "c", "e_", "a", "m", "o", "u", "n", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_MESSAGE_RECIPIENT_TYPES", "Excludes DevSettings", "Docs/Classes/Statics/Variables/NUM_MESSAGE_RECIPIENT_TYPES.html", ["u", "m_", "m", "e", "s", "s", "a", "g", "e_", "r", "e", "c", "i", "p", "i", "e", "n", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_STATIC_BUFF_AND_DEBUFF_TYPES", "", "Docs/Classes/Statics/Variables/NUM_STATIC_BUFF_AND_DEBUFF_TYPES.html", ["u", "m_", "s", "t", "a", "t", "i", "c_", "b", "u", "f", "f_", "a", "n", "d_", "d", "e", "b", "u", "f", "f_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_TICKABLE_BUFF_AND_DEBUFF_TYPES", "", "Docs/Classes/Statics/Variables/NUM_TICKABLE_BUFF_AND_DEBUFF_TYPES.html", ["u", "m_", "t", "i", "c", "k", "a", "b", "l", "e_", "b", "u", "f", "f_", "a", "n", "d_", "d", "e", "b", "u", "f", "f_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUFF_AND_DEBUFF_SUBTYPES", "", "Docs/Classes/Statics/Variables/NUM_BUFF_AND_DEBUFF_SUBTYPES.html", ["u", "m_", "b", "u", "f", "f_", "a", "n", "d_", "d", "e", "b", "u", "f", "f_", "s", "u", "b", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CUSTOM_ABILITY_CHECK_TYPES", "Exclude Default", "Docs/Classes/Statics/Variables/NUM_CUSTOM_ABILITY_CHECK_TYPES.html", ["u", "m_", "c", "u", "s", "t", "o", "m_", "a", "b", "i", "l", "i", "t", "y_", "c", "h", "e", "c", "k_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_SELECTABLE_RESOURCE_TYPES", "Exclude uninitialized and \"success\"", "Docs/Classes/Statics/Variables/NUM_SELECTABLE_RESOURCE_TYPES.html", ["u", "m_", "s", "e", "l", "e", "c", "t", "a", "b", "l", "e_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_INVENTORY_ITEM_TYPES", "", "Docs/Classes/Statics/Variables/NUM_INVENTORY_ITEM_TYPES.html", ["u", "m_", "i", "n", "v", "e", "n", "t", "o", "r", "y_", "i", "t", "e", "m_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_COMMANDER_ABILITY_TYPES", "", "Docs/Classes/Statics/Variables/NUM_COMMANDER_ABILITY_TYPES.html", ["u", "m_", "c", "o", "m", "m", "a", "n", "d", "e", "r_", "a", "b", "i", "l", "i", "t", "y_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_COMMANDER_SKILL_TREE_NODE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_COMMANDER_SKILL_TREE_NODE_TYPES.html", ["u", "m_", "c", "o", "m", "m", "a", "n", "d", "e", "r_", "s", "k", "i", "l", "l_", "t", "r", "e", "e_", "n", "o", "d", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CONTROL_SETTING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_CONTROL_SETTING_TYPES.html", ["u", "m_", "c", "o", "n", "t", "r", "o", "l_", "s", "e", "t", "t", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUILDING_GARRISON_NETWORK_TYPES", "", "Docs/Classes/Statics/Variables/NUM_BUILDING_GARRISON_NETWORK_TYPES.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "g", "a", "r", "r", "i", "s", "o", "n_", "n", "e", "t", "w", "o", "r", "k_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_EDITOR_PLAY_SKIP_OPTIONS", "", "Docs/Classes/Statics/Variables/NUM_EDITOR_PLAY_SKIP_OPTIONS.html", ["u", "m_", "e", "d", "i", "t", "o", "r_", "p", "l", "a", "y_", "s", "k", "i", "p_", "o", "p", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_PIE_SESSION_INVALID_OWNER_RULES", "", "Docs/Classes/Statics/Variables/NUM_PIE_SESSION_INVALID_OWNER_RULES.html", ["u", "m_", "p", "i", "e_", "s", "e", "s", "s", "i", "o", "n_", "i", "n", "v", "a", "l", "i", "d_", "o", "w", "n", "e", "r_", "r", "u", "l", "e", "s"], "Statics");
addToContainers_variable("SWEEP_HEIGHT", "How high to check when making capsule sweeps for targets. Depending on how bumpy the map is or how high flying units fly this may need to be adjusted. Maybe used by other things too like line traces", "Docs/Classes/Statics/Variables/SWEEP_HEIGHT.html", ["w", "e", "e", "p_", "h", "e", "i", "g", "h", "t"], "Statics");
addToContainers_variable("", "", "Docs/Classes/Statics/Variables/.html", [], "Statics");
addToContainers_variable("NUM_ACTOR_TAGS", "Number of actor tags I add to selectables when they setup", "Docs/Classes/Statics/Variables/NUM_ACTOR_TAGS.html", ["u", "m_", "a", "c", "t", "o", "r_", "t", "a", "g", "s"], "Statics");
addToContainers_variable("NeutralID", "The player ID for a neutral selectable. This goes in AActor::Tags[0]", "Docs/Classes/Statics/Variables/NeutralID.html", ["neutral", "i", "d"], "Statics");
addToContainers_variable("NEUTRAL_TEAM_TAG", "Team tags for neutral and observer. The neutral tag will probably go on selectables while the observer tag will probably only ever go on the PC and PS", "Docs/Classes/Statics/Variables/NEUTRAL_TEAM_TAG.html", ["e", "u", "t", "r", "a", "l_", "t", "e", "a", "m_", "t", "a", "g"], "Statics");
addToContainers_variable("OBSERVER_TEAM_TAG", "", "Docs/Classes/Statics/Variables/OBSERVER_TEAM_TAG.html", ["b", "s", "e", "r", "v", "e", "r_", "t", "e", "a", "m_", "t", "a", "g"], "Statics");
addToContainers_variable("UNTARGETABLE_TAG", "Tag to say a selectable cannot be targeted by attacks or abilities", "Docs/Classes/Statics/Variables/UNTARGETABLE_TAG.html", ["n", "t", "a", "r", "g", "e", "t", "a", "b", "l", "e_", "t", "a", "g"], "Statics");
addToContainers_variable("BuildingTag", "Tag for is selectable is a building", "Docs/Classes/Statics/Variables/BuildingTag.html", ["building", "tag"], "Statics");
addToContainers_variable("UnitTag", "Tag for if selectable is a unit", "Docs/Classes/Statics/Variables/UnitTag.html", ["unit", "tag"], "Statics");
addToContainers_variable("InventoryItemTag", "Tag for if selectable is an inventory item", "Docs/Classes/Statics/Variables/InventoryItemTag.html", ["inventory", "item", "tag"], "Statics");
addToContainers_variable("AirTag", "Tag to look for on actors to know if they are an air unit or not", "Docs/Classes/Statics/Variables/AirTag.html", ["air", "tag"], "Statics");
addToContainers_variable("NotAirTag", "Tag for selectables that cannot fly. Oppisite of AirTag", "Docs/Classes/Statics/Variables/NotAirTag.html", ["not", "air", "tag"], "Statics");
addToContainers_variable("HasAttackTag", "Tag for whether the selectable has an attack or not", "Docs/Classes/Statics/Variables/HasAttackTag.html", ["has", "attack", "tag"], "Statics");
addToContainers_variable("NotHasAttackTag", "", "Docs/Classes/Statics/Variables/NotHasAttackTag.html", ["not", "has", "attack", "tag"], "Statics");
addToContainers_variable("HasZeroHealthTag", "Tags for whether selectable is above zero health or not", "Docs/Classes/Statics/Variables/HasZeroHealthTag.html", ["has", "zero", "health", "tag"], "Statics");
addToContainers_variable("AboveZeroHealthTag", "", "Docs/Classes/Statics/Variables/AboveZeroHealthTag.html", ["above", "zero", "health", "tag"], "Statics");
addToContainers_variable("NotHasInventoryTag", "Tags about inventory", "Docs/Classes/Statics/Variables/NotHasInventoryTag.html", ["not", "has", "inventory", "tag"], "Statics");
addToContainers_variable("HasZeroCapacityInventoryTag", "", "Docs/Classes/Statics/Variables/HasZeroCapacityInventoryTag.html", ["has", "zero", "capacity", "inventory", "tag"], "Statics");
addToContainers_variable("HasInventoryWithCapacityGreaterThanZeroTag", "", "Docs/Classes/Statics/Variables/HasInventoryWithCapacityGreaterThanZeroTag.html", ["has", "inventory", "with", "capacity", "greater", "than", "zero", "tag"], "Statics");
addToContainers_variable("IsShopThatAcceptsRefundsTag", "", "Docs/Classes/Statics/Variables/IsShopThatAcceptsRefundsTag.html", ["is", "shop", "that", "accepts", "refunds", "tag"], "Statics");
addToContainers_variable("DamageTypes", "Holds each user defined damage type", "Docs/Classes/Statics/Variables/DamageTypes.html", ["damage", "types"], "Statics");
addToContainers_variable("SocketNames", "", "Docs/Classes/Statics/Variables/SocketNames.html", ["socket", "names"], "Statics");
addToContainers_variable("TargetTypeFNames", "Maps ETargetingType to an arbitrary FName using key as TargetingTypeToArrayIndex()", "Docs/Classes/Statics/Variables/TargetTypeFNames.html", ["target", "type", "f", "names"], "Statics");
addToContainers_variable("ImportantAnims", "Holds which animation types should throw at least a warning when the player tries to play one but no animation is set", "Docs/Classes/Statics/Variables/ImportantAnims.html", ["important", "anims"], "Statics");
addToContainers_struct("FAtLeastOneInt16", "Int16 that must be at least 1. Mainly here because at times I want to impose a min limit for container entries", "Docs/Structs/FAtLeastOneInt16/FAtLeastOneInt16.html", ["at", "least", "one", "int16"], "");
addToContainers_function("FAtLeastOneInt16", "", "Docs/Structs/FAtLeastOneInt16/Functions/FAtLeastOneInt16.html", ["at", "least", "one", "int16"], "FAtLeastOneInt16");
addToContainers_function("FAtLeastOneInt16", "", "Docs/Structs/FAtLeastOneInt16/Functions/FAtLeastOneInt16_1.html", ["at", "least", "one", "int16"], "FAtLeastOneInt16");
addToContainers_function("FAtLeastOneInt16", "", "Docs/Structs/FAtLeastOneInt16/Functions/FAtLeastOneInt16_2.html", ["at", "least", "one", "int16"], "FAtLeastOneInt16");
addToContainers_variable("", "", "Docs/Structs/FAtLeastOneInt16/Variables/.html", [], "FAtLeastOneInt16");
addToContainers_struct("FFactionBuildingTypePair", "EFaction and EBuildingType", "Docs/Structs/FFactionBuildingTypePair/FFactionBuildingTypePair.html", ["faction", "building", "type", "pair"], "");
addToContainers_function("FFactionBuildingTypePair", "", "Docs/Structs/FFactionBuildingTypePair/Functions/FFactionBuildingTypePair.html", ["faction", "building", "type", "pair"], "FFactionBuildingTypePair");
addToContainers_function("FFactionBuildingTypePair", "", "Docs/Structs/FFactionBuildingTypePair/Functions/FFactionBuildingTypePair_1.html", ["faction", "building", "type", "pair"], "FFactionBuildingTypePair");
addToContainers_variable("", "", "Docs/Structs/FFactionBuildingTypePair/Variables/.html", [], "FFactionBuildingTypePair");
addToContainers_variable("", "", "Docs/Structs/FFactionBuildingTypePair/Variables/_1.html", [], "FFactionBuildingTypePair");
addToContainers_struct("FUnifiedImageAndSoundFlags", "Holds what brush/sound assets the player uses", "Docs/Structs/FUnifiedImageAndSoundFlags/FUnifiedImageAndSoundFlags.html", ["unified", "image", "and", "sound", "flags"], "");
addToContainers_variable(":", "Bools for whether or not we\'re using a single image/sound or not", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_1.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_2.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_3.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_4.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_struct("FStaticMeshInfo", "Static mesh and a transform", "Docs/Structs/FStaticMeshInfo/FStaticMeshInfo.html", ["static", "mesh", "info"], "");
addToContainers_function("FStaticMeshInfo", "", "Docs/Structs/FStaticMeshInfo/Functions/FStaticMeshInfo.html", ["static", "mesh", "info"], "FStaticMeshInfo");
addToContainers_variable("", "", "Docs/Structs/FStaticMeshInfo/Variables/.html", [], "FStaticMeshInfo");
addToContainers_variable("", "", "Docs/Structs/FStaticMeshInfo/Variables/_1.html", [], "FStaticMeshInfo");
addToContainers_struct("FMeshInfoBasic", "This struct allows the user to set either a static mesh or skeletal mesh", "Docs/Structs/FMeshInfoBasic/FMeshInfoBasic.html", ["mesh", "info", "basic"], "");
addToContainers_function("FMeshInfoBasic", "", "Docs/Structs/FMeshInfoBasic/Functions/FMeshInfoBasic.html", ["mesh", "info", "basic"], "FMeshInfoBasic");
addToContainers_variable("", "Can either be a static mesh or skeletal mesh. My notes: Odd. I cannot set SKs in this project, but in another project I can do fine. I get this message on loading up editor: \"Property MeshInfo of MeshInfo has a struct type mismatch (tag HOTRELOADED_MeshInfo_0 != prop MeshInfo) in package: ../../../../Projects/RTS_Ver2/Content/Framework/RTSGameInstance_BP.uasset. If that struct got renamed, add an entry to ActiveStructRedirects\" - might have something to do with it. Update: I no longer get this warning message and it still doesn\'t work. Named it MeshPtr to try and get around this warning. Tried moving around in struct to get it fixed. This sucks. Can\'t get this working TODO. Once fixed can remove WORKAROUND_MeshPath variable", "Docs/Structs/FMeshInfoBasic/Variables/.html", [], "FMeshInfoBasic");
addToContainers_variable("", "", "Docs/Structs/FMeshInfoBasic/Variables/_1.html", [], "FMeshInfoBasic");
addToContainers_variable("", "", "Docs/Structs/FMeshInfoBasic/Variables/_2.html", [], "FMeshInfoBasic");
addToContainers_variable("", "", "Docs/Structs/FMeshInfoBasic/Variables/_3.html", [], "FMeshInfoBasic");
addToContainers_variable("", "This is a workaround for Mesh not being able to set skeletal meshes (or anything other than static meshes actually). Copy and paste an object path into here to set Mesh to it. (get path by right-clicking on asset and choosing \'Copy Reference\'). The issue probably lies in the fact I used to have a struct called FMeshInfo that only allowed static meshes then I changed it to allow both.", "Docs/Structs/FMeshInfoBasic/Variables/_4.html", [], "FMeshInfoBasic");
addToContainers_struct("FCursorInfo", "Struct for storing data about hardware cursors. Similar to the engine\'s FHardwareCursor, follows similar naming conventions", "Docs/Structs/FCursorInfo/FCursorInfo.html", ["cursor", "info"], "");
addToContainers_function("FCursorInfo", "", "Docs/Structs/FCursorInfo/Functions/FCursorInfo.html", ["cursor", "info"], "FCursorInfo");
addToContainers_function("FCursorInfo", "This constructor was added so development widget actions could set custom cursors.", "Docs/Structs/FCursorInfo/Functions/FCursorInfo_1.html", ["cursor", "info"], "FCursorInfo");
addToContainers_variable("", "File path relative to UStatics::HARDWARE_CURSOR_PATH which I think is Slate/HardwareCursors/ but you might want to double check that in Statics.cpp. Leave this varaible blank to indicate you do not want to use a custom mouse cursor in this case (\"None\" may show)", "Docs/Structs/FCursorInfo/Variables/.html", [], "FCursorInfo");
addToContainers_variable("", "Hot spot refers to the part of the cursor image that determines where the click happens. This should be normalized to between 0 and 1, so I assume that (0, 0) would be the top left of the cursor image while (1, 1) is the bottom right", "Docs/Structs/FCursorInfo/Variables/_1.html", [], "FCursorInfo");
addToContainers_variable("", "Full path = UStatics::HARDWARE_CURSOR_PATH + Path. Set during game startup to avoid creating FNames while setting hardware cursor in match", "Docs/Structs/FCursorInfo/Variables/_2.html", [], "FCursorInfo");
addToContainers_variable("", "Whether SetFullPath() has been called", "Docs/Structs/FCursorInfo/Variables/_3.html", [], "FCursorInfo");
addToContainers_struct("FContextCommand", "Struct to be sent from client to server when a command is issued that doesn\'t require a location in world space e.g. a train unit command from a barracks", "Docs/Structs/FContextCommand/FContextCommand.html", ["context", "command"], "");
addToContainers_function("FContextCommand", "", "Docs/Structs/FContextCommand/Functions/FContextCommand.html", ["context", "command"], "FContextCommand");
addToContainers_function("FContextCommand", "", "Docs/Structs/FContextCommand/Functions/FContextCommand_1.html", ["context", "command"], "FContextCommand");
addToContainers_function("FContextCommand", "", "Docs/Structs/FContextCommand/Functions/FContextCommand_2.html", ["context", "command"], "FContextCommand");
addToContainers_variable(":", "If true then the same group as the last order should be used", "Docs/Structs/FContextCommand/Variables/:.html", [], "FContextCommand");
addToContainers_variable("", "Just static_cast<uint8>(EContextAction). Don\'t really need to convert to uint8", "Docs/Structs/FContextCommand/Variables/.html", [], "FContextCommand");
addToContainers_variable("", "", "Docs/Structs/FContextCommand/Variables/_1.html", [], "FContextCommand");
addToContainers_variable("", "", "Docs/Structs/FContextCommand/Variables/_2.html", [], "FContextCommand");
addToContainers_struct("FContextCommandWithLocation", "A context command that requires a location.", "Docs/Structs/FContextCommandWithLocation/FContextCommandWithLocation.html", ["context", "command", "with", "location"], "");
addToContainers_function("FContextCommandWithLocation", "", "Docs/Structs/FContextCommandWithLocation/Functions/FContextCommandWithLocation.html", ["context", "command", "with", "location"], "FContextCommandWithLocation");
addToContainers_function("FContextCommandWithLocation", "", "Docs/Structs/FContextCommandWithLocation/Functions/FContextCommandWithLocation_1.html", ["context", "command", "with", "location"], "FContextCommandWithLocation");
addToContainers_variable("", "", "Docs/Structs/FContextCommandWithLocation/Variables/.html", [], "FContextCommandWithLocation");
addToContainers_struct("FContextCommandWithTarget", "A context command that requires a target to be sent over the wire", "Docs/Structs/FContextCommandWithTarget/FContextCommandWithTarget.html", ["context", "command", "with", "target"], "");
addToContainers_function("FContextCommandWithTarget", "", "Docs/Structs/FContextCommandWithTarget/Functions/FContextCommandWithTarget.html", ["context", "command", "with", "target"], "FContextCommandWithTarget");
addToContainers_function("FContextCommandWithTarget", "Don\'t think this is ever called", "Docs/Structs/FContextCommandWithTarget/Functions/FContextCommandWithTarget_1.html", ["context", "command", "with", "target"], "FContextCommandWithTarget");
addToContainers_variable("", "Keeping this as regular FVector. Does this lose precision by default? I want this to be precise since if the player is placing a building and their machine says it is ok to place there then a I don\'t want the server saying \'actually you can\'t place that there\' because of precision loss", "Docs/Structs/FContextCommandWithTarget/Variables/.html", [], "FContextCommandWithTarget");
addToContainers_variable("", "", "Docs/Structs/FContextCommandWithTarget/Variables/_1.html", [], "FContextCommandWithTarget");
addToContainers_struct("FRightClickCommandBase", "Base struct for all right click commands", "Docs/Structs/FRightClickCommandBase/FRightClickCommandBase.html", ["right", "click", "command", "base"], "");
addToContainers_function("FRightClickCommandBase", "", "Docs/Structs/FRightClickCommandBase/Functions/FRightClickCommandBase.html", ["right", "click", "command", "base"], "FRightClickCommandBase");
addToContainers_function("FRightClickCommandBase", "", "Docs/Structs/FRightClickCommandBase/Functions/FRightClickCommandBase_1.html", ["right", "click", "command", "base"], "FRightClickCommandBase");
addToContainers_variable(":", "If true then the same group as the last order should be used", "Docs/Structs/FRightClickCommandBase/Variables/:.html", [], "FRightClickCommandBase");
addToContainers_variable("", "Selectable IDs for all selectables given the command", "Docs/Structs/FRightClickCommandBase/Variables/.html", [], "FRightClickCommandBase");
addToContainers_variable("", "World space coords of the click location", "Docs/Structs/FRightClickCommandBase/Variables/_1.html", [], "FRightClickCommandBase");
addToContainers_struct("FRightClickCommandWithTarget", "Struct to send over wire when issuing a right-click command", "Docs/Structs/FRightClickCommandWithTarget/FRightClickCommandWithTarget.html", ["right", "click", "command", "with", "target"], "");
addToContainers_function("FRightClickCommandWithTarget", "", "Docs/Structs/FRightClickCommandWithTarget/Functions/FRightClickCommandWithTarget.html", ["right", "click", "command", "with", "target"], "FRightClickCommandWithTarget");
addToContainers_function("FRightClickCommandWithTarget", "", "Docs/Structs/FRightClickCommandWithTarget/Functions/FRightClickCommandWithTarget_1.html", ["right", "click", "command", "with", "target"], "FRightClickCommandWithTarget");
addToContainers_variable("", "Target if there was one clicked on. This gets rid of some of the efficiency of using this struct. TODO: make seperate structs: one for no targets and one for targets", "Docs/Structs/FRightClickCommandWithTarget/Variables/.html", [], "FRightClickCommandWithTarget");
addToContainers_struct("FRightClickCommandOnInventoryItem", "Right click command on an inventory item", "Docs/Structs/FRightClickCommandOnInventoryItem/FRightClickCommandOnInventoryItem.html", ["right", "click", "command", "on", "inventory", "item"], "");
addToContainers_function("FRightClickCommandOnInventoryItem", "", "Docs/Structs/FRightClickCommandOnInventoryItem/Functions/FRightClickCommandOnInventoryItem.html", ["right", "click", "command", "on", "inventory", "item"], "FRightClickCommandOnInventoryItem");
addToContainers_function("FRightClickCommandOnInventoryItem", "", "Docs/Structs/FRightClickCommandOnInventoryItem/Functions/FRightClickCommandOnInventoryItem_1.html", ["right", "click", "command", "on", "inventory", "item"], "FRightClickCommandOnInventoryItem");
addToContainers_variable("", "Unique ID of the item that was clicked on", "Docs/Structs/FRightClickCommandOnInventoryItem/Variables/.html", [], "FRightClickCommandOnInventoryItem");
addToContainers_struct("FContextButton", "Context buttons for each unit", "Docs/Structs/FContextButton/FContextButton.html", ["context", "button"], "");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_1.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_2.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_3.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_4.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_5.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_6.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_7.html", ["context", "button"], "FContextButton");
addToContainers_variable("", "What the button does", "Docs/Structs/FContextButton/Variables/.html", [], "FContextButton");
addToContainers_variable("", "If this button is to build a building, the building it will build", "Docs/Structs/FContextButton/Variables/_1.html", [], "FContextButton");
addToContainers_variable("", "If the button trains a unit what unit it trains. Must be set to NotUnit if ButtonType != Train", "Docs/Structs/FContextButton/Variables/_2.html", [], "FContextButton");
addToContainers_variable("", "Upgrade type if this is for upgrades", "Docs/Structs/FContextButton/Variables/_3.html", [], "FContextButton");
addToContainers_variable("", "Relevant only when using a persistent panel in HUD like in C&C. The order to appear on tab. Lower = appear sooner", "Docs/Structs/FContextButton/Variables/_4.html", [], "FContextButton");
addToContainers_variable("BuildInfo", "Build info this button is related to. Probably never use this. Should delete it", "Docs/Structs/FContextButton/Variables/BuildInfo.html", ["build", "info"], "FContextButton");
addToContainers_variable("", "Booleans and function to toggle visibility of variables in editor", "Docs/Structs/FContextButton/Variables/_5.html", [], "FContextButton");
addToContainers_variable("", "", "Docs/Structs/FContextButton/Variables/_6.html", [], "FContextButton");
addToContainers_variable("", "", "Docs/Structs/FContextButton/Variables/_7.html", [], "FContextButton");
addToContainers_struct("FTrainingInfo", "Used in production queues", "Docs/Structs/FTrainingInfo/FTrainingInfo.html", ["training", "info"], "");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_1.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_2.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_3.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_4.html", ["training", "info"], "FTrainingInfo");
addToContainers_variable("", "The building this is for or NotBuilding if not for building", "Docs/Structs/FTrainingInfo/Variables/.html", [], "FTrainingInfo");
addToContainers_variable("", "The unit training or NotUnit if this is for an upgrade", "Docs/Structs/FTrainingInfo/Variables/_1.html", [], "FTrainingInfo");
addToContainers_variable("", "Upgrade type, or None if this is for training a unit", "Docs/Structs/FTrainingInfo/Variables/_2.html", [], "FTrainingInfo");
addToContainers_variable("Info2)", "For TMap", "Docs/Structs/FTrainingInfo/Variables/Info2).html", [], "FTrainingInfo");
addToContainers_variable("Info)", "", "Docs/Structs/FTrainingInfo/Variables/Info).html", [], "FTrainingInfo");
addToContainers_struct("FCPUPlayerTrainingInfo", "Training info that also holds the reason the item is being produced", "Docs/Structs/FCPUPlayerTrainingInfo/FCPUPlayerTrainingInfo.html", ["c", "p", "u", "player", "training", "info"], "");
addToContainers_function("FCPUPlayerTrainingInfo", "Default ctor, never call this ", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("FCPUPlayerTrainingInfo", "Ctors that are all basically the same", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo_1.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("FCPUPlayerTrainingInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo_2.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("FCPUPlayerTrainingInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo_3.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_variable("ActualCommandType", "Reason for producing this", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/ActualCommandType.html", ["actual", "command", "type"], "FCPUPlayerTrainingInfo");
addToContainers_variable("AuxilleryInfo", "More info about the reason for production e.g. if it is for building a resource depot then the resource type it is for. Sometimes this can be ignored.", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/AuxilleryInfo.html", ["auxillery", "info"], "FCPUPlayerTrainingInfo");
addToContainers_variable("OriginalCommand_ReasonForProduction", "", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/OriginalCommand_ReasonForProduction.html", ["original", "command_", "reason", "for", "production"], "FCPUPlayerTrainingInfo");
addToContainers_variable("OriginalCommand_AuxilleryInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/OriginalCommand_AuxilleryInfo.html", ["original", "command_", "auxillery", "info"], "FCPUPlayerTrainingInfo");
addToContainers_struct("FBasicDecalInfo", "", "Docs/Structs/FBasicDecalInfo/FBasicDecalInfo.html", ["basic", "decal", "info"], "");
addToContainers_function("FBasicDecalInfo", "", "Docs/Structs/FBasicDecalInfo/Functions/FBasicDecalInfo.html", ["basic", "decal", "info"], "FBasicDecalInfo");
addToContainers_function("FBasicDecalInfo", "", "Docs/Structs/FBasicDecalInfo/Functions/FBasicDecalInfo_1.html", ["basic", "decal", "info"], "FBasicDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDecalInfo/Variables/.html", [], "FBasicDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDecalInfo/Variables/_1.html", [], "FBasicDecalInfo");
addToContainers_struct("FContextButtonInfo", "Defines basic command params for a context action. Some of the things defined in this struct can be ignored by individual units e.g. MaxRange, cooldown and Effect_BP can be ignored by units", "Docs/Structs/FContextButtonInfo/FContextButtonInfo.html", ["context", "button", "info"], "");
addToContainers_function("FContextButtonInfo", "", "Docs/Structs/FContextButtonInfo/Functions/FContextButtonInfo.html", ["context", "button", "info"], "FContextButtonInfo");
addToContainers_function("FContextButtonInfo", "", "Docs/Structs/FContextButtonInfo/Functions/FContextButtonInfo_1.html", ["context", "button", "info"], "FContextButtonInfo");
addToContainers_function("FContextButtonInfo", "", "Docs/Structs/FContextButtonInfo/Functions/FContextButtonInfo_2.html", ["context", "button", "info"], "FContextButtonInfo");
addToContainers_variable("", "Name of action to appear on HUD. Only applicable if a non BuildBuilding/Train/Upgrade action", "Docs/Structs/FContextButtonInfo/Variables/.html", [], "FContextButtonInfo");
addToContainers_variable("", "Image to appear in HUD. Only applicable if a non BuildBuilding/Train/Upgrade action", "Docs/Structs/FContextButtonInfo/Variables/_1.html", [], "FContextButtonInfo");
addToContainers_variable("", "The image for when the mouse is over a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FContextButtonInfo/Variables/_2.html", [], "FContextButtonInfo");
addToContainers_variable("", "The image for when the mouse is pressed on a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FContextButtonInfo/Variables/_3.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_4.html", [], "FContextButtonInfo");
addToContainers_variable("", "The sound to play when the mouse is hovered over a button on a action bar for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FContextButtonInfo/Variables/_5.html", [], "FContextButtonInfo");
addToContainers_variable("", "The sound to play the moment the left mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FContextButtonInfo/Variables/_6.html", [], "FContextButtonInfo");
addToContainers_variable("", "The sound to play at the moment the right mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FContextButtonInfo/Variables/_7.html", [], "FContextButtonInfo");
addToContainers_variable("", "A description of the ability. Will likely be ignored if this button is for BuildBuilding/Train/Upgrade", "Docs/Structs/FContextButtonInfo/Variables/_8.html", [], "FContextButtonInfo");
addToContainers_variable("", "Type of button this is", "Docs/Structs/FContextButtonInfo/Variables/_9.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Does this action happen instantly or is another mouse click required? e.g. true = Zerg burrow command in Starcraft II false = High Templar Psionic Storm in SCII. This requires another click to select the location before the command is issued. False basically means the action requires targeting someone/somewhere", "Docs/Structs/FContextButtonInfo/Variables/:.html", [], "FContextButtonInfo");
addToContainers_variable(":", "If true this command will be issued to every unit selected (if they support the action). If false then only a single unit will be issued with the command and it will be the unit whose context menu is showing. e.g. True = Zerg burrow - all selected units will do it False = High Templar Psionic Storms - no matter how many High Templar are selected only one will do it", "Docs/Structs/FContextButtonInfo/Variables/:_1.html", [], "FContextButtonInfo");
addToContainers_variable(":", "If true then a command for this ability can only be issued if the unit is in range of the target selectable/location. If false then the unit can always be issued the command and if they are not in range at the time of receiving the command then they will move in range and then use it. Strict is a bad name. Something better might be bMustUnitBeInRangeAtTimeOfIssue", "Docs/Structs/FContextButtonInfo/Variables/:_2.html", [], "FContextButtonInfo");
addToContainers_variable(":", "If this is true then a unit receiving this command will stop movement when they receive the command and after it has executed they will go idle where they are. If false unit will not stop moving while they execute the command (if bUseAnimation is true then they will play anim as they keep moving) and will continue carrying out previous command. If you want your unit to use this ability while they move then set this to false. Not 100% this has been implemented fully. For now it is not possible to have this as false and use an animation", "Docs/Structs/FContextButtonInfo/Variables/:_3.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether to use an animation for this ability. If false then no animation will be played and ability will take effect instantly. Currently if true then bCommandStopsMovement will be automatically flagged as true", "Docs/Structs/FContextButtonInfo/Variables/:_4.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether to use a preparation animation. Currently this is only used by buildings. Make sure to adjust the variable PreparationAnimPlayPoint to suit when this anim should play", "Docs/Structs/FContextButtonInfo/Variables/:_5.html", [], "FContextButtonInfo");
addToContainers_variable("", "The animation type to use for this ability. You should not use animation types that are common such as attack or move animations since these will have anim notifies that will cause crashes if used here. It is best to stick to animation types you have defined yourself or the ContextAction_1/2/3 types", "Docs/Structs/FContextButtonInfo/Variables/_10.html", [], "FContextButtonInfo");
addToContainers_variable("", "This animation plays at a certain point in the ability cooling down. e.g. in C&C generals: at approx 10 secs before your nuke becomes ready an animation plays that opens the silo and points the nuke upwards.", "Docs/Structs/FContextButtonInfo/Variables/_11.html", [], "FContextButtonInfo");
addToContainers_variable("", "Animation to use if a building is using the ability", "Docs/Structs/FContextButtonInfo/Variables/_12.html", [], "FContextButtonInfo");
addToContainers_variable("", "If true then once the animation for this ability starts you will not be able to stop the animation with new commands until anim notify OnContextAnimationFinished is executed.", "Docs/Structs/FContextButtonInfo/Variables/_13.html", [], "FContextButtonInfo");
addToContainers_variable("", "Whether to use a custom mouse cursor or a decal when choosing where to use ability. If using CustomMouseCursor it is assumed at least DefaultMouseCursor has a valid path to a cursor. If using HideAndShowDecal it is assumed Decal is set", "Docs/Structs/FContextButtonInfo/Variables/_14.html", [], "FContextButtonInfo");
addToContainers_variable(":", "True = ability requires another selectable as a target False = any location in the world is good enough. E.g. True = Starcraft II Ghosts snipe ability False = Starcraft II Ghosts EMP ability", "Docs/Structs/FContextButtonInfo/Variables/:_6.html", [], "FContextButtonInfo");
addToContainers_variable(":", "This is only relevant if the ability does not require a selectable as a target but requires a location in the world as a target. Whether we are allowed to use this ability on locations that are inside fog of war", "Docs/Structs/FContextButtonInfo/Variables/:_7.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether ability can use an enemy as a target", "Docs/Structs/FContextButtonInfo/Variables/:_8.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether ability can use a selectable on your team as a target. Note if this and bCanTargetEnemies is false then your ability will not be able to target anything", "Docs/Structs/FContextButtonInfo/Variables/:_9.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether can target self. bCanTargetFriendlies must be true for this to be relevant. If your ability wants to only target self then you can set bIsIssuedInstantly to false", "Docs/Structs/FContextButtonInfo/Variables/:_10.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether to check if in range at time anim notify to use ability happens. Only relevant for abilities that target another selectable. True = right before ability is done a range check happens False = once anim starts ability will be considered always in range no matter how far away the target moves", "Docs/Structs/FContextButtonInfo/Variables/:_11.html", [], "FContextButtonInfo");
addToContainers_variable("", "The types of selectables this ability can target. E.g. a High Templars feedback can only target energy users. This is only for targeting purposes. Once the ability has been used it is possible its effect causes an AoE effect which hits types that are not this type. That is all up to how the ability has been implemented. You must add at least one type for your ability to be usable", "Docs/Structs/FContextButtonInfo/Variables/_15.html", [], "FContextButtonInfo");
addToContainers_variable("", "AcceptableTargets as FNames", "Docs/Structs/FContextButtonInfo/Variables/_16.html", [], "FContextButtonInfo");
addToContainers_variable("", "Default mouse cursor for ability to show when not hovering over a selectable", "Docs/Structs/FContextButtonInfo/Variables/_17.html", [], "FContextButtonInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is an acceptable target for this ability", "Docs/Structs/FContextButtonInfo/Variables/_18.html", [], "FContextButtonInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is not an acceptable target for this ability", "Docs/Structs/FContextButtonInfo/Variables/_19.html", [], "FContextButtonInfo");
addToContainers_variable("DefaultMouseCursor_Info", "", "Docs/Structs/FContextButtonInfo/Variables/DefaultMouseCursor_Info.html", ["default", "mouse", "cursor_", "info"], "FContextButtonInfo");
addToContainers_variable("AcceptableTargetMouseCursor_Info", "", "Docs/Structs/FContextButtonInfo/Variables/AcceptableTargetMouseCursor_Info.html", ["acceptable", "target", "mouse", "cursor_", "info"], "FContextButtonInfo");
addToContainers_variable("UnacceptableTargetMouseCursor_Info", "", "Docs/Structs/FContextButtonInfo/Variables/UnacceptableTargetMouseCursor_Info.html", ["unacceptable", "target", "mouse", "cursor_", "info"], "FContextButtonInfo");
addToContainers_variable("", "If bIsIssuedInstantly is false, the decal to draw under the mouse for when the location under the mouse is at a location where a command can be issued. Note about Radius: this is for visuals only. To change the actual area of effect of a action would need to be done in each implementation of the action ability (can also be done on a per-unit basis although this is not exposed to editor).", "Docs/Structs/FContextButtonInfo/Variables/_20.html", [], "FContextButtonInfo");
addToContainers_variable("", "If bIsIssuedInstantly is false, the decal to draw under the mouse when it is at a position where a command cannot be issued because perhaps it is inside fog, out of range etc. This decal is optional. If not set then the AcceptableLocationDecal will always be shown. UE4 tip: If all you want to do is change the color of this material then it is a good idea to add a parameter to your AcceptableLocationDecal asset, make a material instance from it in editor and adjust that param value.", "Docs/Structs/FContextButtonInfo/Variables/_21.html", [], "FContextButtonInfo");
addToContainers_variable("", "Cooldown 0 = no cooldown. Could remove this and have each unit set its own cooldown", "Docs/Structs/FContextButtonInfo/Variables/_22.html", [], "FContextButtonInfo");
addToContainers_variable("", "The cooldown this ability starts with. e.g. in C&C generals when you build a nuke silo you have to wait 6 minutes before you can use it. 0 = starts off cooldown", "Docs/Structs/FContextButtonInfo/Variables/_23.html", [], "FContextButtonInfo");
addToContainers_variable("", "How much time remaining for ability coming off cooldown when we should play the preparation animation. Makes sense for this to be no larger than Cooldown. e.g. if this is 10 then when the ability has 10 secs left before coming off cooldown then the preparation anim will play.", "Docs/Structs/FContextButtonInfo/Variables/_24.html", [], "FContextButtonInfo");
addToContainers_variable("", "The selectable resource cost of this ability. Selectable resources are things like mana or energy. Currently each selectable is only allowed a maximum of 1 selectable resource so you cannot have costs like \"50 mana and 25 energy\".", "Docs/Structs/FContextButtonInfo/Variables/_25.html", [], "FContextButtonInfo");
addToContainers_variable("", "Max range of action. 0 = unlimited range", "Docs/Structs/FContextButtonInfo/Variables/_26.html", [], "FContextButtonInfo");
addToContainers_variable("", "Blueprint for the effect of this button. This is pretty important", "Docs/Structs/FContextButtonInfo/Variables/_27.html", [], "FContextButtonInfo");
addToContainers_variable("Info2)", "For sorting", "Docs/Structs/FContextButtonInfo/Variables/Info2).html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_28.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_29.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_30.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_31.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_32.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_33.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_34.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_35.html", [], "FContextButtonInfo");
addToContainers_struct("FCommanderAbilityInfo", "Similar to FContextButtonInfo but for abilities instigated by the commander (commander = player)", "Docs/Structs/FCommanderAbilityInfo/FCommanderAbilityInfo.html", ["commander", "ability", "info"], "");
addToContainers_function("FCommanderAbilityInfo", "Make sure at some point Type is set to the key of the TMap this info resides in", "Docs/Structs/FCommanderAbilityInfo/Functions/FCommanderAbilityInfo.html", ["commander", "ability", "info"], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_1.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_2.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_3.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_4.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Name of action to appear on HUD", "Docs/Structs/FCommanderAbilityInfo/Variables/_5.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Image to appear in HUD", "Docs/Structs/FCommanderAbilityInfo/Variables/_6.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The image for when the mouse is over a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FCommanderAbilityInfo/Variables/_7.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The image for when the mouse is pressed on a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FCommanderAbilityInfo/Variables/_8.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The image for when button should be highlighted", "Docs/Structs/FCommanderAbilityInfo/Variables/_9.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The sound to play when the mouse is hovered over a button on a action bar for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FCommanderAbilityInfo/Variables/_10.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The sound to play the moment the left mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FCommanderAbilityInfo/Variables/_11.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The sound to play at the moment the right mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FCommanderAbilityInfo/Variables/_12.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "A description of the ability", "Docs/Structs/FCommanderAbilityInfo/Variables/_13.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Type of button this is", "Docs/Structs/FCommanderAbilityInfo/Variables/_14.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "What this ability targets", "Docs/Structs/FCommanderAbilityInfo/Variables/_15.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "This is only relevant if the ability can target a location in the world. Whether we are allowed to use this ability on locations that are inside fog of war.", "Docs/Structs/FCommanderAbilityInfo/Variables/:.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "Whether ability can use an enemy as a target", "Docs/Structs/FCommanderAbilityInfo/Variables/:_1.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "Whether ability can use a selectable on your team as a target. Note if this and bCanTargetEnemies is false then your ability will not be able to target anything", "Docs/Structs/FCommanderAbilityInfo/Variables/:_2.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "Whether can target self. bCanTargetFriendlies must be true for this to be relevant.", "Docs/Structs/FCommanderAbilityInfo/Variables/:_3.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The types of selectables this ability can target. You must add at least one type for your ability to be usable", "Docs/Structs/FCommanderAbilityInfo/Variables/_16.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_17.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Cooldown 0 = no cooldown.", "Docs/Structs/FCommanderAbilityInfo/Variables/_18.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The cooldown when this ability is aquired. e.g. in C&C generals imagine when you aquire fuel air bomb you have to wait 1 min before you can use it. That is what this is. 0 = starts off cooldown This may be ignored if this ability is the 2nd/3rd/etc rank of an ability on a single commander skill tree node i.e. only the 1st rank ability matters when it comes to this variable.", "Docs/Structs/FCommanderAbilityInfo/Variables/_19.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Number of times this ability can be used. -1 = infinite", "Docs/Structs/FCommanderAbilityInfo/Variables/_20.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Blueprint for the effect of this button. This is pretty important", "Docs/Structs/FCommanderAbilityInfo/Variables/_21.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Whether to use a custom mouse cursor or a decal when choosing where to use ability. If using CustomMouseCursor it is assumed at least DefaultMouseCursor has a valid path to a cursor. If using HideAndShowDecal it is assumed Decal is set. My notes: perhaps if the ability targets a selectable then do not allow decal here?", "Docs/Structs/FCommanderAbilityInfo/Variables/_22.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Default mouse cursor for ability to show when not hovering over a selectable", "Docs/Structs/FCommanderAbilityInfo/Variables/_23.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is an acceptable target for this ability", "Docs/Structs/FCommanderAbilityInfo/Variables/_24.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is not an acceptable target for this ability", "Docs/Structs/FCommanderAbilityInfo/Variables/_25.html", [], "FCommanderAbilityInfo");
addToContainers_variable("DefaultMouseCursor_Info", "", "Docs/Structs/FCommanderAbilityInfo/Variables/DefaultMouseCursor_Info.html", ["default", "mouse", "cursor_", "info"], "FCommanderAbilityInfo");
addToContainers_variable("AcceptableTargetMouseCursor_Info", "", "Docs/Structs/FCommanderAbilityInfo/Variables/AcceptableTargetMouseCursor_Info.html", ["acceptable", "target", "mouse", "cursor_", "info"], "FCommanderAbilityInfo");
addToContainers_variable("UnacceptableTargetMouseCursor_Info", "", "Docs/Structs/FCommanderAbilityInfo/Variables/UnacceptableTargetMouseCursor_Info.html", ["unacceptable", "target", "mouse", "cursor_", "info"], "FCommanderAbilityInfo");
addToContainers_variable("", "The decal to draw at the mouse location when the location is one where it is acceptable to use the ability.", "Docs/Structs/FCommanderAbilityInfo/Variables/_26.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The decal to draw at the mouse location when the location is one where it is not acceptable to use the ability.", "Docs/Structs/FCommanderAbilityInfo/Variables/_27.html", [], "FCommanderAbilityInfo");
addToContainers_struct("FCommanderSkillTreePrerequisiteArrayEntry", "A prerequisite for a commander skill", "Docs/Structs/FCommanderSkillTreePrerequisiteArrayEntry/FCommanderSkillTreePrerequisiteArrayEntry.html", ["commander", "skill", "tree", "prerequisite", "array", "entry"], "");
addToContainers_function("FCommanderSkillTreePrerequisiteArrayEntry", "", "Docs/Structs/FCommanderSkillTreePrerequisiteArrayEntry/Functions/FCommanderSkillTreePrerequisiteArrayEntry.html", ["commander", "skill", "tree", "prerequisite", "array", "entry"], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_function("FCommanderSkillTreePrerequisiteArrayEntry", "This ctor is here for checking if array contains entry, but it\'s probably better to use that FindBYPRedicate func or whatever and do away with this", "Docs/Structs/FCommanderSkillTreePrerequisiteArrayEntry/Functions/FCommanderSkillTreePrerequisiteArrayEntry_1.html", ["commander", "skill", "tree", "prerequisite", "array", "entry"], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_variable("", "The skill that needs to be aquired", "Docs/Structs/FCommanderSkillTreePrerequisiteArrayEntry/Variables/.html", [], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_variable("", "The rank of PrerequisiteType that needs to be aquired. This is not 0 indexed so 1 means the first rank of the ability. Just thought I would say that because under the hood I treat a 0 as rank 1.", "Docs/Structs/FCommanderSkillTreePrerequisiteArrayEntry/Variables/_1.html", [], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_struct("FCommanderAbilityTreeNodeSingleRankInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRankInfo/FCommanderAbilityTreeNodeSingleRankInfo.html", ["commander", "ability", "tree", "node", "single", "rank", "info"], "");
addToContainers_function("FCommanderAbilityTreeNodeSingleRankInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRankInfo/Functions/FCommanderAbilityTreeNodeSingleRankInfo.html", ["commander", "ability", "tree", "node", "single", "rank", "info"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRankInfo/Variables/.html", [], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("", "Get the rank this ability unlocks at", "Docs/Structs/FCommanderAbilityTreeNodeSingleRankInfo/Variables/_1.html", [], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("", "How many skill points it takes to unlock this", "Docs/Structs/FCommanderAbilityTreeNodeSingleRankInfo/Variables/_2.html", [], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("AbilityInfo", "Pointer to info struct for ability", "Docs/Structs/FCommanderAbilityTreeNodeSingleRankInfo/Variables/AbilityInfo.html", ["ability", "info"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_struct("FCommanderAbilityTreeNodeInfo", "A single node on the commander\'s (commander == player) skill tree", "Docs/Structs/FCommanderAbilityTreeNodeInfo/FCommanderAbilityTreeNodeInfo.html", ["commander", "ability", "tree", "node", "info"], "");
addToContainers_function("FCommanderAbilityTreeNodeInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/FCommanderAbilityTreeNodeInfo.html", ["commander", "ability", "tree", "node", "info"], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "------------------------------------------------------------", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "If true then all abilities on this node are executed when they are aquired. Also they aren\'t added to the global skills panel and it is implied that they only have 1 use and no cooldown. A good example of a true here would be an ability that unlocks being able to build something e.g. in C&C generals: pathfinders, nuke cannons", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/_1.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "Prerequisite abilities: abilities that must be aquired before this one can be", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/_2.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "The abilities. Add multiple entries for multiple ranks. Index 0 = 1st rank Index 1 = 2nd rank etc. If you want the ability to have multiple ranks then add multiple entries e.g. C&C generals china artillery strike. If you want each rank of an ability to be on seperate nodes then just add one entry to this array.", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/_3.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_struct("FCommanderLevelUpInfo", "Info about what happens when the player reaches a rank", "Docs/Structs/FCommanderLevelUpInfo/FCommanderLevelUpInfo.html", ["commander", "level", "up", "info"], "");
addToContainers_function("FCommanderLevelUpInfo", "For a GET_MEMBER_NAME_CHECKED", "Docs/Structs/FCommanderLevelUpInfo/Functions/FCommanderLevelUpInfo.html", ["commander", "level", "up", "info"], "FCommanderLevelUpInfo");
addToContainers_variable("", "UI sound to play", "Docs/Structs/FCommanderLevelUpInfo/Variables/.html", [], "FCommanderLevelUpInfo");
addToContainers_variable("", "How many skill points the player gains for reaching this level", "Docs/Structs/FCommanderLevelUpInfo/Variables/_1.html", [], "FCommanderLevelUpInfo");
addToContainers_variable("", "How much experience is required to get to this level from the one below. Not cumulative", "Docs/Structs/FCommanderLevelUpInfo/Variables/_2.html", [], "FCommanderLevelUpInfo");
addToContainers_variable("", "How much experience is required to reach this level taking into account the amounts required to reach all the previous levels. This can be assigned its value in post edit", "Docs/Structs/FCommanderLevelUpInfo/Variables/_3.html", [], "FCommanderLevelUpInfo");
addToContainers_struct("FUnaquiredCommanderAbilityState", "", "Docs/Structs/FUnaquiredCommanderAbilityState/FUnaquiredCommanderAbilityState.html", ["unaquired", "commander", "ability", "state"], "");
addToContainers_function("FUnaquiredCommanderAbilityState", "Here so compile. Never use this", "Docs/Structs/FUnaquiredCommanderAbilityState/Functions/FUnaquiredCommanderAbilityState.html", ["unaquired", "commander", "ability", "state"], "FUnaquiredCommanderAbilityState");
addToContainers_function("FUnaquiredCommanderAbilityState", "Constructor to use", "Docs/Structs/FUnaquiredCommanderAbilityState/Functions/FUnaquiredCommanderAbilityState_1.html", ["unaquired", "commander", "ability", "state"], "FUnaquiredCommanderAbilityState");
addToContainers_variable("NodeInfo", "Pointer to the node info struct", "Docs/Structs/FUnaquiredCommanderAbilityState/Variables/NodeInfo.html", ["node", "info"], "FUnaquiredCommanderAbilityState");
addToContainers_variable("MissingPrerequisites", "Missing prerequisites", "Docs/Structs/FUnaquiredCommanderAbilityState/Variables/MissingPrerequisites.html", ["missing", "prerequisites"], "FUnaquiredCommanderAbilityState");
addToContainers_struct("FAquiredCommanderAbilityState", "", "Docs/Structs/FAquiredCommanderAbilityState/FAquiredCommanderAbilityState.html", ["aquired", "commander", "ability", "state"], "");
addToContainers_function("FAquiredCommanderAbilityState", "Do not use this ctor", "Docs/Structs/FAquiredCommanderAbilityState/Functions/FAquiredCommanderAbilityState.html", ["aquired", "commander", "ability", "state"], "FAquiredCommanderAbilityState");
addToContainers_function("FAquiredCommanderAbilityState", "This is the ctor you should use", "Docs/Structs/FAquiredCommanderAbilityState/Functions/FAquiredCommanderAbilityState_1.html", ["aquired", "commander", "ability", "state"], "FAquiredCommanderAbilityState");
addToContainers_variable("AbilityInfo", "Pointer to info struct this struct is for", "Docs/Structs/FAquiredCommanderAbilityState/Variables/AbilityInfo.html", ["ability", "info"], "FAquiredCommanderAbilityState");
addToContainers_variable("TimerHandle_CooldownRemaining", "", "Docs/Structs/FAquiredCommanderAbilityState/Variables/TimerHandle_CooldownRemaining.html", ["timer", "handle_", "cooldown", "remaining"], "FAquiredCommanderAbilityState");
addToContainers_variable("RankAquired", "To what rank the ability has been aquired. 0 indexed so a value of 0 means rank 1.", "Docs/Structs/FAquiredCommanderAbilityState/Variables/RankAquired.html", ["rank", "aquired"], "FAquiredCommanderAbilityState");
addToContainers_variable("NumTimesUsed", "Number of times the ability has been used for the current aquired rank of the ability only", "Docs/Structs/FAquiredCommanderAbilityState/Variables/NumTimesUsed.html", ["num", "times", "used"], "FAquiredCommanderAbilityState");
addToContainers_variable("GlobalSkillsPanelButtonIndex", "Where on the global skills panel widget this ability is", "Docs/Structs/FAquiredCommanderAbilityState/Variables/GlobalSkillsPanelButtonIndex.html", ["global", "skills", "panel", "button", "index"], "FAquiredCommanderAbilityState");
addToContainers_struct("FBuildingTargetingAbilityStaticInfo", "", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/FBuildingTargetingAbilityStaticInfo.html", ["building", "targeting", "ability", "static", "info"], "");
addToContainers_function("FBuildingTargetingAbilityStaticInfo", "", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Functions/FBuildingTargetingAbilityStaticInfo.html", ["building", "targeting", "ability", "static", "info"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/_1.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Mouse cursor to use when the player hovers the mouse over a building which is an acceptable target for the ability.", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/_2.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("AcceptableTargetMouseCursor_Info", "", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/AcceptableTargetMouseCursor_Info.html", ["acceptable", "target", "mouse", "cursor_", "info"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Range of the ability. 0 = unlimited", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/_3.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("AbilityType", "Type of ability this struct holds info for", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/AbilityType.html", ["ability", "type"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Whether to use an animation", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/_4.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Animation to play", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/_5.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "If true then the instigator is \'consumed\' the moment the ability is used Examples of true: - C&C engineers - C&C spies Examples of false: - C&C commando putting bombs on buildings", "Docs/Structs/FBuildingTargetingAbilityStaticInfo/Variables/_6.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_struct("FBuildingTargetingAbilityPerSelectableInfo", "Info struct for an ability that is used against buildings only", "Docs/Structs/FBuildingTargetingAbilityPerSelectableInfo/FBuildingTargetingAbilityPerSelectableInfo.html", ["building", "targeting", "ability", "per", "selectable", "info"], "");
addToContainers_function("FBuildingTargetingAbilityPerSelectableInfo", "", "Docs/Structs/FBuildingTargetingAbilityPerSelectableInfo/Functions/FBuildingTargetingAbilityPerSelectableInfo.html", ["building", "targeting", "ability", "per", "selectable", "info"], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Structs/FBuildingTargetingAbilityPerSelectableInfo/Variables/.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable(":", "If true the ability is usable against buildings that are owned by the player. Note the building\'s type must also be acceptable too for the ability to be usable", "Docs/Structs/FBuildingTargetingAbilityPerSelectableInfo/Variables/:.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable(":", "If true the ability is usable against buildings that are owned by allies Note the building\'s type must also be acceptable too for the ability to be usable", "Docs/Structs/FBuildingTargetingAbilityPerSelectableInfo/Variables/:_1.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable(":", "If true the ability is usable against buildings that are owned by enemies. Note the building\'s type must also be acceptable too for the ability to be usable", "Docs/Structs/FBuildingTargetingAbilityPerSelectableInfo/Variables/:_2.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_struct("FBuildingTargetingAbilitiesAttributes", "Attributes for abilities that target buildings", "Docs/Structs/FBuildingTargetingAbilitiesAttributes/FBuildingTargetingAbilitiesAttributes.html", ["building", "targeting", "abilities", "attributes"], "");
addToContainers_variable("", "Abilities to be used against buildings if the player right-clicked on it e.g. in C&C engineers capture buildings, spies let you see what is being produced, etc. If you want the ability to be usable against ALL buildings then set building type for the key to NotBuilding, although I think I haven\'t exposed that enum value to editor so I should probably do that simple as pie TODO", "Docs/Structs/FBuildingTargetingAbilitiesAttributes/Variables/.html", [], "FBuildingTargetingAbilitiesAttributes");
addToContainers_struct("FProductionQueue", "A queue that produces buildings/units/upgrades. Found on buildings mostly but there is also one the player state. A single queue cannot produce in parallel. My implementation of queues: Production orders come in 3 types: build building, train unit and research upgrade. Queues come in 2 types: - A \"persistent\" queue which is used only for building buildings when clicking on a button in the HUD persistent panel (like in C&C). However if clicking a unit/upgrade in the HUD persistent panel then the production will be put into a \"context\" queue (described below). - A \"context\" queue which handles every other case. This includes producing units/upgrades from the HUD persistent panel, or producing anything by clicking on the building and pressing a button on its context menu. Buildings have one of each queue type. This means you can have a construction yard type building that will construct buildings in its \"persistent\" queue while at the same time it is possible to click on that construction yard building and build units/upgrades/buildings (buildings is kind of unexpected behavior here but can be done) in its \"context\" queue. Or you can produce units/upgrades from it by clicking a unit/upgrade button in the HUD persistent panel. So you can have a construction yard that constructs a building while at the same time trains a unit or researches an upgrade.", "Docs/Structs/FProductionQueue/FProductionQueue.html", ["production", "queue"], "");
addToContainers_function("FProductionQueue", "", "Docs/Structs/FProductionQueue/Functions/FProductionQueue.html", ["production", "queue"], "FProductionQueue");
addToContainers_variable("", "Reversed queue of units being built. Last element is the front of queue. Could use std::deque. Some performance figures: - Add unit to queue: O(n) - Remove from front of queue when production complete: O(1) - Remove from middle when cancel training: O(n)", "Docs/Structs/FProductionQueue/Variables/.html", [], "FProductionQueue");
addToContainers_variable("", "This is the queue used by CPU player AI controllers", "Docs/Structs/FProductionQueue/Variables/_1.html", [], "FProductionQueue");
addToContainers_variable("", "Whether this is a HUD persistent queue or a context menu queue. Persistent queues will only be used for building buildings from the HUD persistent panel, similar to a construction yard in C&C. Persistent panel commands to produce units or upgrades will go to the context queue", "Docs/Structs/FProductionQueue/Variables/_2.html", [], "FProductionQueue");
addToContainers_variable("", "The max number of items in the queue at once", "Docs/Structs/FProductionQueue/Variables/_3.html", [], "FProductionQueue");
addToContainers_variable("", "Timer handle to track progress of front of queue", "Docs/Structs/FProductionQueue/Variables/_4.html", [], "FProductionQueue");
addToContainers_variable("", "For remote clients only. If their timer handle completes before the server\'s completes then record this so UI will show 100% while we wait for the server confirmation", "Docs/Structs/FProductionQueue/Variables/_5.html", [], "FProductionQueue");
addToContainers_variable("", "True if the item at the front of the queue is for a building, its build method is BuildsInTab and it has completed production and is therefore ready to be placed in world", "Docs/Structs/FProductionQueue/Variables/_6.html", [], "FProductionQueue");
addToContainers_variable("", "If this queue is producing a building using the BuildsItself build method the build it is producing. Currently I only use this for CPU players but it will probably need to be used for human players too. Also this is a persistent queue only variable and is one more reason to make seperate context and persistent queue structs. This is possibly only maintained server-side", "Docs/Structs/FProductionQueue/Variables/_7.html", [], "FProductionQueue");
addToContainers_struct("FContextMenuButtons", "Holds what buttons a context menu has", "Docs/Structs/FContextMenuButtons/FContextMenuButtons.html", ["context", "menu", "buttons"], "");
addToContainers_variable("", "Put context buttons in here", "Docs/Structs/FContextMenuButtons/Variables/.html", [], "FContextMenuButtons");
addToContainers_variable("", "Array of buttons for HUD ordering purposes", "Docs/Structs/FContextMenuButtons/Variables/_1.html", [], "FContextMenuButtons");
addToContainers_struct("FDisplayInfoBase", "Struct that is used for info on buildings, units and upgrades. Contains base data needed to display info on the HUD. FBuildInfo and FUpgradeInfo derive from it", "Docs/Structs/FDisplayInfoBase/FDisplayInfoBase.html", ["display", "info", "base"], "");
addToContainers_function("FDisplayInfoBase", "", "Docs/Structs/FDisplayInfoBase/Functions/FDisplayInfoBase.html", ["display", "info", "base"], "FDisplayInfoBase");
addToContainers_variable("", "Name to appear on HUDs", "Docs/Structs/FDisplayInfoBase/Variables/.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Image to appear on HUD", "Docs/Structs/FDisplayInfoBase/Variables/_1.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Image when a button for this is hovered. This will be ignored if you use a unified image as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_2.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Image when a button for this is pressed. This will be ignored if you use a unified image as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_3.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound for when a UI button for this is hovered. This will be ignored if you choose to use a unified sound as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_4.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound for when a UI button for this is pressed with left mouse button. This will be ignored if you choose to use a unified sound as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_5.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound for when a UI button for this is pressed with right mouse button. This will be ignored if you choose to use a unified sound as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_6.html", [], "FDisplayInfoBase");
addToContainers_variable("", "A description of this", "Docs/Structs/FDisplayInfoBase/Variables/_7.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound to try and play when just built", "Docs/Structs/FDisplayInfoBase/Variables/_8.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Cost to build/train. Use function ResourceTypeToArrayIndex to get correct index for a resource type", "Docs/Structs/FDisplayInfoBase/Variables/_9.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Time to build/train/research", "Docs/Structs/FDisplayInfoBase/Variables/_10.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Prerequisite buildings that must be built before this can be researched. Adding duplicates of the same building will have no additional effect. You do not need to add the building that builds/trains/researches this.", "Docs/Structs/FDisplayInfoBase/Variables/_11.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Upgrades that must be researched before this can be built/trained/researched. No point adding duplicates. My notes: TODO add duplicate protection for this array in post edit by removing them. Actually I think I need to add protection for the buildings prereqs array too.", "Docs/Structs/FDisplayInfoBase/Variables/_12.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Text of prerequisites so it can be shown on the HUD", "Docs/Structs/FDisplayInfoBase/Variables/_13.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Tab type if using a persistent HUD panel like C&C", "Docs/Structs/FDisplayInfoBase/Variables/_14.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Ordering number for tab is using a persistent HUD panel like C&C", "Docs/Structs/FDisplayInfoBase/Variables/_15.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Context menu if this is for a selectable", "Docs/Structs/FDisplayInfoBase/Variables/_16.html", [], "FDisplayInfoBase");
addToContainers_struct("FUpgradeInfo", "Info for upgrades. They only affect selectables you control. You can affect types of units/buildings and/or damage and armour types", "Docs/Structs/FUpgradeInfo/FUpgradeInfo.html", ["upgrade", "info"], "");
addToContainers_function("FUpgradeInfo", "", "Docs/Structs/FUpgradeInfo/Functions/FUpgradeInfo.html", ["upgrade", "info"], "FUpgradeInfo");
addToContainers_variable("", "How much this upgrade costs. Any resource types without entries implies 0", "Docs/Structs/FUpgradeInfo/Variables/.html", [], "FUpgradeInfo");
addToContainers_variable("", "If true this upgrade is applied to all units under your control. If false you can specify which types are affected", "Docs/Structs/FUpgradeInfo/Variables/_1.html", [], "FUpgradeInfo");
addToContainers_variable("", "If true this upgrade is applied to all buildings under your control. If false you can specify which types are affected", "Docs/Structs/FUpgradeInfo/Variables/_2.html", [], "FUpgradeInfo");
addToContainers_variable("", "If bAffectsAllUnitTypes is false, the unit types affected by this upgrade", "Docs/Structs/FUpgradeInfo/Variables/_3.html", [], "FUpgradeInfo");
addToContainers_variable("", "If bAffectsAllBuildingTypes is false, the building types affected by this upgrade", "Docs/Structs/FUpgradeInfo/Variables/_4.html", [], "FUpgradeInfo");
addToContainers_variable("", "Effect of upgrade. This decides what the upgrade does to those affected by it. You can leave this null to let the upgrade have no effect (but perhaps you just had the upgrade as a prerequisite for something so there was still a point in obtaining it). See UpgradeEffect.h for info on how to implement these", "Docs/Structs/FUpgradeInfo/Variables/_5.html", [], "FUpgradeInfo");
addToContainers_variable("", "Array of which buildings can research this upgrade", "Docs/Structs/FUpgradeInfo/Variables/_6.html", [], "FUpgradeInfo");
addToContainers_variable("", "Field for toggling visibility of other fields in editor", "Docs/Structs/FUpgradeInfo/Variables/_7.html", [], "FUpgradeInfo");
addToContainers_variable("", "", "Docs/Structs/FUpgradeInfo/Variables/_8.html", [], "FUpgradeInfo");
addToContainers_struct("FBuildInfo", "Base for selectables info", "Docs/Structs/FBuildInfo/FBuildInfo.html", ["build", "info"], "");
addToContainers_variable("", "Reference to blueprint to spawn selectable this is for", "Docs/Structs/FBuildInfo/Variables/.html", [], "FBuildInfo");
addToContainers_variable("", "Type of selectable this struct holds data for", "Docs/Structs/FBuildInfo/Variables/_1.html", [], "FBuildInfo");
addToContainers_variable("", "The type of building this struct is for. Should be set to NotBuilding if not for a building", "Docs/Structs/FBuildInfo/Variables/_2.html", [], "FBuildInfo");
addToContainers_variable("", "The type of unit this struct is for. Should be set to NotUnit if not for a unit", "Docs/Structs/FBuildInfo/Variables/_3.html", [], "FBuildInfo");
addToContainers_variable("", "Whether to announce to all players when built", "Docs/Structs/FBuildInfo/Variables/_4.html", [], "FBuildInfo");
addToContainers_variable("Info2)", "For sorting. Just sorts on EBuildingType or EUnitType but does some checks to make sure the selectable type is the same", "Docs/Structs/FBuildInfo/Variables/Info2).html", [], "FBuildInfo");
addToContainers_struct("FBuildingInfo", "Struct to store info necessary to spawn buildings.", "Docs/Structs/FBuildingInfo/FBuildingInfo.html", ["building", "info"], "");
addToContainers_function("FBuildingInfo", "", "Docs/Structs/FBuildingInfo/Functions/FBuildingInfo.html", ["building", "info"], "FBuildingInfo");
addToContainers_variable("", "Out of buildings/units/upgrades currently only buildings might need the highlighted image so here it is", "Docs/Structs/FBuildingInfo/Variables/.html", [], "FBuildingInfo");
addToContainers_variable("", "Reference to ghost building BP. Can leave null for units", "Docs/Structs/FBuildingInfo/Variables/_1.html", [], "FBuildingInfo");
addToContainers_variable("", "Half height of bounds.", "Docs/Structs/FBuildingInfo/Variables/_2.html", [], "FBuildingInfo");
addToContainers_variable("", "The scaled box extent of the root component that is a box component. This isn\'t affected by rotation and because it is scaled it will be the actual size", "Docs/Structs/FBuildingInfo/Variables/_3.html", [], "FBuildingInfo");
addToContainers_variable("", "Building build method", "Docs/Structs/FBuildingInfo/Variables/_4.html", [], "FBuildingInfo");
addToContainers_variable("", "Whether building should rise from the ground when it is being built", "Docs/Structs/FBuildingInfo/Variables/_5.html", [], "FBuildingInfo");
addToContainers_variable("", "The how close to other buildings this building must be to be built @See AFactionInfo::BuildingProximityRange", "Docs/Structs/FBuildingInfo/Variables/_6.html", [], "FBuildingInfo");
addToContainers_variable("", "@See FBuildingAttributes::FoundationRadius", "Docs/Structs/FBuildingInfo/Variables/_7.html", [], "FBuildingInfo");
addToContainers_variable("", "How far into the Destroyed animation the anim notify OnZeroHealthAnimationFinished is. This can be 0 if the anim notify is not present", "Docs/Structs/FBuildingInfo/Variables/_8.html", [], "FBuildingInfo");
addToContainers_variable("", "How many persistent queues this building has (currently limited to 1.) If greater than 0 then this building is a construction yard type building", "Docs/Structs/FBuildingInfo/Variables/_9.html", [], "FBuildingInfo");
addToContainers_variable("", "Buildings that can build this building. Does not take into account prereqs", "Docs/Structs/FBuildingInfo/Variables/_10.html", [], "FBuildingInfo");
addToContainers_variable("", "Units that can build this building. Does not take into account prereqs", "Docs/Structs/FBuildingInfo/Variables/_11.html", [], "FBuildingInfo");
addToContainers_variable("1", "If true then this building can train at least one unit that is an army/attacking type unit. If this building only trains collectors/workers then it is not considered a barracks", "Docs/Structs/FBuildingInfo/Variables/1.html", [], "FBuildingInfo");
addToContainers_variable("1", "", "Docs/Structs/FBuildingInfo/Variables/1_1.html", [], "FBuildingInfo");
addToContainers_struct("FUnitInfo", "Info about a unit", "Docs/Structs/FUnitInfo/FUnitInfo.html", ["unit", "info"], "");
addToContainers_variable("", "Should definently be moved closer to the regular costs array for better CPU cache locality", "Docs/Structs/FUnitInfo/Variables/.html", [], "FUnitInfo");
addToContainers_variable("ImpactDamage", "Damage dealt to what the projectile impacts", "Docs/Structs/FUnitInfo/Variables/ImpactDamage.html", ["impact", "damage"], "FUnitInfo");
addToContainers_variable("ImpactDamageType", "", "Docs/Structs/FUnitInfo/Variables/ImpactDamageType.html", ["impact", "damage", "type"], "FUnitInfo");
addToContainers_variable("ImpactRandomDamageFactor", "", "Docs/Structs/FUnitInfo/Variables/ImpactRandomDamageFactor.html", ["impact", "random", "damage", "factor"], "FUnitInfo");
addToContainers_variable("AoEDamage", "AoE damage the projectile deals", "Docs/Structs/FUnitInfo/Variables/AoEDamage.html", ["ao", "e", "damage"], "FUnitInfo");
addToContainers_variable("AoEDamageType", "", "Docs/Structs/FUnitInfo/Variables/AoEDamageType.html", ["ao", "e", "damage", "type"], "FUnitInfo");
addToContainers_variable("AoERandomDamageFactor", "", "Docs/Structs/FUnitInfo/Variables/AoERandomDamageFactor.html", ["ao", "e", "random", "damage", "factor"], "FUnitInfo");
addToContainers_variable("", "Buildings that can train this unit. Does not consider prereqs", "Docs/Structs/FUnitInfo/Variables/_1.html", [], "FUnitInfo");
addToContainers_variable("1", "", "Docs/Structs/FUnitInfo/Variables/1.html", [], "FUnitInfo");
addToContainers_variable("1", "", "Docs/Structs/FUnitInfo/Variables/1_1.html", [], "FUnitInfo");
addToContainers_variable("1", "", "Docs/Structs/FUnitInfo/Variables/1_2.html", [], "FUnitInfo");
addToContainers_struct("FStaticBuffOrDebuffInstanceInfo", "Struct that holds the state of a buff/debuff that does not tick, so just the instigator", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/FStaticBuffOrDebuffInstanceInfo.html", ["static", "buff", "or", "debuff", "instance", "info"], "");
addToContainers_function("FStaticBuffOrDebuffInstanceInfo", "Only here for compile. Never call this", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/FStaticBuffOrDebuffInstanceInfo.html", ["static", "buff", "or", "debuff", "instance", "info"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("FStaticBuffOrDebuffInstanceInfo", "", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/FStaticBuffOrDebuffInstanceInfo_1.html", ["static", "buff", "or", "debuff", "instance", "info"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("Info", "Pointer to the info struct this buff/debuff is for", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/Info.html", [], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("SpecificType", "Type of buff/debuff this is for. Should always be a copy of Info->GetSpecificType(). Could move this variable off of here and just query the info struct instead", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/SpecificType.html", ["specific", "type"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("Instigator", "The actor that applied the buff/debuff to us. Depending on how buff/deuff logic goes this could be anything but is usually a selectable. Can also be null", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/Instigator.html", [], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("InstigatorAsSelectable", "Instigator as an ISelectable. Can be null", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/InstigatorAsSelectable.html", ["instigator", "as", "selectable"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_struct("FTickableBuffOrDebuffInstanceInfo", "Struct that holds the state of a buff/debuff that ticks", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/FTickableBuffOrDebuffInstanceInfo.html", ["tickable", "buff", "or", "debuff", "instance", "info"], "");
addToContainers_function("FTickableBuffOrDebuffInstanceInfo", "Only here for compile. Never call this", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/FTickableBuffOrDebuffInstanceInfo.html", ["tickable", "buff", "or", "debuff", "instance", "info"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("FTickableBuffOrDebuffInstanceInfo", "Ctor will act as if buff/debuff is being freshly applied. Should set NumTicks to 0 and set TimeRemainingTillNextTick to proper value", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/FTickableBuffOrDebuffInstanceInfo_1.html", ["tickable", "buff", "or", "debuff", "instance", "info"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("Info", "Pointer to the info struct this buff/debuff is for", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/Info.html", [], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("SpecificType", "Type of buff/debuff this is for. Should always be a copy of Info->GetSpecificType(). Could move this variable off of here and just query the info struct instead", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/SpecificType.html", ["specific", "type"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("TickCount", "How many ticks have happened. If this is a buff/debuff that never expires then this isn\'t reliable due to overflow (255 max)", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/TickCount.html", ["tick", "count"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("TimeRemainingTillNextTick", "", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/TimeRemainingTillNextTick.html", ["time", "remaining", "till", "next", "tick"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("Instigator", "The actor that applied the buff/debuff to us. Depending on how buff/deuff logic goes this could be anything but is usually a selectable. Can also be null", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/Instigator.html", [], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("InstigatorAsSelectable", "Instigator as an ISelectable. Can be null", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/InstigatorAsSelectable.html", ["instigator", "as", "selectable"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_struct("FPlayerStateArray", "Work around for TArrays not being able to be 2 dimensional", "Docs/Structs/FPlayerStateArray/FPlayerStateArray.html", ["player", "state", "array"], "");
addToContainers_variable("", "", "Docs/Structs/FPlayerStateArray/Variables/.html", [], "FPlayerStateArray");
addToContainers_struct("FVaryingSizeParticleArray", "Array of different information about particle systems to spawn on selectables", "Docs/Structs/FVaryingSizeParticleArray/FVaryingSizeParticleArray.html", ["varying", "size", "particle", "array"], "");
addToContainers_function("FVaryingSizeParticleArray", "", "Docs/Structs/FVaryingSizeParticleArray/Functions/FVaryingSizeParticleArray.html", ["varying", "size", "particle", "array"], "FVaryingSizeParticleArray");
addToContainers_variable("", "Array of different templates to use for different size selectables. @See FSelectableAttributes::ParticleSize to set which template a selectable will use", "Docs/Structs/FVaryingSizeParticleArray/Variables/.html", [], "FVaryingSizeParticleArray");
addToContainers_struct("FParticleInfo", "Info required to spawn a particle system", "Docs/Structs/FParticleInfo/FParticleInfo.html", ["particle", "info"], "");
addToContainers_function("FParticleInfo", "", "Docs/Structs/FParticleInfo/Functions/FParticleInfo.html", ["particle", "info"], "FParticleInfo");
addToContainers_variable("", "Template", "Docs/Structs/FParticleInfo/Variables/.html", [], "FParticleInfo");
addToContainers_variable("", "Optional transform adjustment TODO make it a FVector, FRotator and a float to reduce byte requirement. The float is the scale", "Docs/Structs/FParticleInfo/Variables/_1.html", [], "FParticleInfo");
addToContainers_struct("FParticleInfo_Attach", "Info for a particle system that attaches to a bone", "Docs/Structs/FParticleInfo_Attach/FParticleInfo_Attach.html", ["particle", "info_", "attach"], "");
addToContainers_function("FParticleInfo_Attach", "", "Docs/Structs/FParticleInfo_Attach/Functions/FParticleInfo_Attach.html", ["particle", "info_", "attach"], "FParticleInfo_Attach");
addToContainers_variable("", "Template", "Docs/Structs/FParticleInfo_Attach/Variables/.html", [], "FParticleInfo_Attach");
addToContainers_variable("", "Where on the selectable the particles should try attach to", "Docs/Structs/FParticleInfo_Attach/Variables/_1.html", [], "FParticleInfo_Attach");
addToContainers_struct("FAttachedParticleInfo", "Entry in array of particles that are attached to an actor", "Docs/Structs/FAttachedParticleInfo/FAttachedParticleInfo.html", ["attached", "particle", "info"], "");
addToContainers_function("FAttachedParticleInfo", "Default constructor. Never call this", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_1.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_2.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_3.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "These constructors are here for when we need to find the entry in the array. This is bad though. I should use perhaps TArray::FindByPredicate(uint32) or something instead of needlessly creating a pointer that will never be used (compiler might optimize it out anyway)", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_4.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_5.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_6.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_variable("PSC", "", "Docs/Structs/FAttachedParticleInfo/Variables/PSC.html", ["s", "c"], "FAttachedParticleInfo");
addToContainers_variable("UniqueID", "", "Docs/Structs/FAttachedParticleInfo/Variables/UniqueID.html", ["unique", "i", "d"], "FAttachedParticleInfo");
addToContainers_struct("FDecalInfo", "Info required to spawn a decal that fades out over time", "Docs/Structs/FDecalInfo/FDecalInfo.html", ["decal", "info"], "");
addToContainers_function("FDecalInfo", "", "Docs/Structs/FDecalInfo/Functions/FDecalInfo.html", ["decal", "info"], "FDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FDecalInfo/Variables/.html", [], "FDecalInfo");
addToContainers_variable("", "How long decal should appear for. This should probably not be specific to each decal", "Docs/Structs/FDecalInfo/Variables/_1.html", [], "FDecalInfo");
addToContainers_variable("", "How long fade lasts for", "Docs/Structs/FDecalInfo/Variables/_2.html", [], "FDecalInfo");
addToContainers_struct("FAttachInfo", "Information about scene components to attach to when using abilities. The references to the components are set in post edit", "Docs/Structs/FAttachInfo/FAttachInfo.html", ["attach", "info"], "");
addToContainers_function("FAttachInfo", "", "Docs/Structs/FAttachInfo/Functions/FAttachInfo.html", ["attach", "info"], "FAttachInfo");
addToContainers_variable("", "Contains a field to type in the FName of the component to use. From my experience testing this the FName is usually the name you see in the editor in the components tab minus the (inherited) part. If the name does not match then the root component will be used. If effects should not rotate when the target rotates then the component should have bAbsoluteRotation = true. Since rotation is more specific to the ability being used you may need to define extra ESelectableBodySocket like \"FloorNoRotate\" and set different components. The selection decals components are good to use for an absolute rotation component", "Docs/Structs/FAttachInfo/Variables/.html", [], "FAttachInfo");
addToContainers_variable("", "Component as a UPROPERTY pointer and not a TWeakObjectPtr because the latter will be null in PIE", "Docs/Structs/FAttachInfo/Variables/_1.html", [], "FAttachInfo");
addToContainers_variable("", "Optional socket/bone name on component to attach to", "Docs/Structs/FAttachInfo/Variables/_2.html", [], "FAttachInfo");
addToContainers_variable("", "Attach transform if required", "Docs/Structs/FAttachInfo/Variables/_3.html", [], "FAttachInfo");
addToContainers_struct("FAnimationRepVariable", "Struct sent over wire for updating animation state", "Docs/Structs/FAnimationRepVariable/FAnimationRepVariable.html", ["animation", "rep", "variable"], "");
addToContainers_variable("", "Type of animation", "Docs/Structs/FAnimationRepVariable/Variables/.html", [], "FAnimationRepVariable");
addToContainers_variable("", "World time when the animation started", "Docs/Structs/FAnimationRepVariable/Variables/_1.html", [], "FAnimationRepVariable");
addToContainers_struct("FInventoryItemInfo", "Information about an item that goes in an inventory. My notes: we cannot allow usable items to stack. I *think* I have taken care of that in post edit. Ok I\'m going to relax that a bit and see how it goes. We\'ll allow stackable items to be usable as long as they only have 1 use AND they are destroyed when they are used, just like clarity potions. I\'m not too sure if how I have setup EditConditions gets what I want, but the goal is - if an item is usable and it can stack then it should only have 1 charge I\'m doing a lot of uint8, int16 and int32 conversions in this struct. Try and change this", "Docs/Structs/FInventoryItemInfo/FInventoryItemInfo.html", ["inventory", "item", "info"], "");
addToContainers_function("FInventoryItemInfo", "=========================================================================================", "Docs/Structs/FInventoryItemInfo/Functions/FInventoryItemInfo.html", ["inventory", "item", "info"], "FInventoryItemInfo");
addToContainers_function("FInventoryItemInfo", "This ctor sets the display name. It is intended to be called only during the setup process. Because of how the EditConditions are set up it is no advisable to change values in this ctor.", "Docs/Structs/FInventoryItemInfo/Functions/FInventoryItemInfo_1.html", ["inventory", "item", "info"], "FInventoryItemInfo");
addToContainers_variable("", "The name to display for this item", "Docs/Structs/FInventoryItemInfo/Variables/.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The image to display for this item", "Docs/Structs/FInventoryItemInfo/Variables/_1.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Image to display when a button for this item is hovered", "Docs/Structs/FInventoryItemInfo/Variables/_2.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Image to display when a button for this when item is pressed", "Docs/Structs/FInventoryItemInfo/Variables/_3.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Image to display when a button for this when item is highlighted. An example of when this might happen is if the item has a use ability that requires selecting a target. While selecting the target the button will be highlighted", "Docs/Structs/FInventoryItemInfo/Variables/_4.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Sound to play when a button for this item is hovered", "Docs/Structs/FInventoryItemInfo/Variables/_5.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Sound to play when a button for this item is pressed by LMB", "Docs/Structs/FInventoryItemInfo/Variables/_6.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Sound to play when a button for this item is pressed by RMB", "Docs/Structs/FInventoryItemInfo/Variables/_7.html", [], "FInventoryItemInfo");
addToContainers_variable("", "A description of this item", "Docs/Structs/FInventoryItemInfo/Variables/_8.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Some more text that can be used to say what the stat effects of the item are.", "Docs/Structs/FInventoryItemInfo/Variables/_9.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Flavour text. Kept seperate from the description because some people like this text to be in italics, different color, etc.", "Docs/Structs/FInventoryItemInfo/Variables/_10.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The sound to play when this item enters an inventory", "Docs/Structs/FInventoryItemInfo/Variables/_11.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Particles to play when item is aquired. They will most likely be attached to the unit that aquires the item.", "Docs/Structs/FInventoryItemInfo/Variables/_12.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Optional animation to play when the item is dropped. Montage should have a section at the end that loops idle, and blend in time should be set to 0. Quick note: the gun in the first person shooter example doesn\'t have any animations and it doesn\'t have a T-pose from the looks of it. Perhaps looping idle at the end isn\'t required. This is only relevant if MeshInfo\'s mesh is a skeletal mesh.", "Docs/Structs/FInventoryItemInfo/Variables/_13.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The mesh to use to display this item when it has a presence in the world. I *think* setting location to != ZeroVector will actually change the item actor\'s GetActorLocation(), which is not really what I want. Solution would be to use a shape comp as AInventoryItem\'s root comp just like I have done with infantry/buildings. This is all assuming though that moving the root component implies moving the actor. If there\'s a way to not do that then I do not need the shape comp as root. But I do not think there is. So bottom line if users use an offset here then the actor location will not be on the ground. For small offsets this doesn\'t matter too much I guess, just IsInRangeOfItem calcs will be slightly off", "Docs/Structs/FInventoryItemInfo/Variables/_14.html", [], "FInventoryItemInfo");
addToContainers_variable("", "How much this item costs. This can be overridden on a per shop basis... if I actually implement it", "Docs/Structs/FInventoryItemInfo/Variables/_15.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Elements of TMap transfered to an array for performance", "Docs/Structs/FInventoryItemInfo/Variables/_16.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The maximum number of stacks of this item we can have in our inventory. 0 = unlimited. If you would like a unique type of item then you would set this to 1.", "Docs/Structs/FInventoryItemInfo/Variables/_17.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The maximum amount of this item there can be in a stack e.g. in dota clarity potions can stack like I don\'t know perhaps 99 times, but a claymore you can only have 1 of in a stack. So if you pickup another claymore it will be in its own inventory slot. 0 = unlimited.", "Docs/Structs/FInventoryItemInfo/Variables/_18.html", [], "FInventoryItemInfo");
addToContainers_variable("OnAquiredFunctionPtr", "Function pointer for behavior when item is aquired. This can be left null in which case it is assumed \"do nothing\" is the desired behavior. A good place to assign this pointer is in URTSGameInstance::InitInventoryItemInfo()", "Docs/Structs/FInventoryItemInfo/Variables/OnAquiredFunctionPtr.html", ["on", "aquired", "function", "ptr"], "FInventoryItemInfo");
addToContainers_variable("OnRemovedFunctionPtr", "Function pointer for behavior when item is removed. Just like OnAquired this can be left null and it will be assumed \"do nothing\" is the desired behavior A good place to assign this pointer is in URTSGameInstance::InitInventoryItemInfo()", "Docs/Structs/FInventoryItemInfo/Variables/OnRemovedFunctionPtr.html", ["on", "removed", "function", "ptr"], "FInventoryItemInfo");
addToContainers_variable("ItemType", "The item type this info struct is for. For a long time I kept this off this struct, so there may be parts of code getting the type in a less efficient way than just querying this struct. Lots of functions have params that are both the item type + this struct so they can get rid of the item type param", "Docs/Structs/FInventoryItemInfo/Variables/ItemType.html", ["item", "type"], "FInventoryItemInfo");
addToContainers_variable(":", "If true then this item drops onto the world when the unit carrying it reaches zero health. True = divine rapier, gem of true sight False = most other items in dota", "Docs/Structs/FInventoryItemInfo/Variables/:.html", [], "FInventoryItemInfo");
addToContainers_variable(":", "Whether the item can be explicity dropped. True = most items in dota False = divine rapier I think", "Docs/Structs/FInventoryItemInfo/Variables/:_1.html", [], "FInventoryItemInfo");
addToContainers_variable(":", "Whether the item can be sold back to a shop or something. True = most items in dota False = divine rapier I think", "Docs/Structs/FInventoryItemInfo/Variables/:_2.html", [], "FInventoryItemInfo");
addToContainers_variable(":", "If true then only a certain list of unit types are allowed to: - pick up this item off the ground - purchase this item It may still be possible for the item to enter their inventory in other ways. Also this will not be checked when creating combination items.", "Docs/Structs/FInventoryItemInfo/Variables/:_3.html", [], "FInventoryItemInfo");
addToContainers_variable("", "What unit types are allowed to pick up this item. Ignored if bRestrictedToCertainTypes is false.", "Docs/Structs/FInventoryItemInfo/Variables/_19.html", [], "FInventoryItemInfo");
addToContainers_variable("", "If all these items in this array are present in an inventory then this item will be created. Key = ingredient, value = quantity of it required. Note that it takes at least two items in this TMap for it to be valid. You could either have two of the same item or 2 different items but if there is only one key/value pair and its value is 1 then this TMap will be cleared during setup. @See URTSGameInstance::InitInventoryItemInfo e.g. if this struct is for divine rapier then claymore, demon edge and sacred relic would go in this map, and their values would each be 1.", "Docs/Structs/FInventoryItemInfo/Variables/_20.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The oppisite of Ingredients. This array holds what this item can be used to make.", "Docs/Structs/FInventoryItemInfo/Variables/_21.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Whether this item is usable. True = Diffusal blade, clarity potion False = claymore", "Docs/Structs/FInventoryItemInfo/Variables/_22.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The ability to use", "Docs/Structs/FInventoryItemInfo/Variables/_23.html", [], "FInventoryItemInfo");
addToContainers_variable("UseAbilityInfo", "Pointer to the use ability info struct. If this item has no use ability then it will be null", "Docs/Structs/FInventoryItemInfo/Variables/UseAbilityInfo.html", ["use", "ability", "info"], "FInventoryItemInfo");
addToContainers_variable("", "How many times this item can be used. -1 = unlimited.", "Docs/Structs/FInventoryItemInfo/Variables/_24.html", [], "FInventoryItemInfo");
addToContainers_variable("", "What happens when this item changes its number of charges. If you choose CustomBehavior then make sure to set the function pointer, which is done in GI::InitInventoryItemInfo. Otherwise behavior will default to Remove.", "Docs/Structs/FInventoryItemInfo/Variables/_25.html", [], "FInventoryItemInfo");
addToContainers_variable("OnNumChargesChangedFunctionPtr", "Optional behavior when number of charges in a slot with this item changes. Will only be called if ZeroChargeBehavior == CustomBehavior", "Docs/Structs/FInventoryItemInfo/Variables/OnNumChargesChangedFunctionPtr.html", ["on", "num", "charges", "changed", "function", "ptr"], "FInventoryItemInfo");
addToContainers_variable("", "===========================================================================================", "Docs/Structs/FInventoryItemInfo/Variables/_26.html", [], "FInventoryItemInfo");
addToContainers_variable("", "", "Docs/Structs/FInventoryItemInfo/Variables/_27.html", [], "FInventoryItemInfo");
addToContainers_variable("", "", "Docs/Structs/FInventoryItemInfo/Variables/_28.html", [], "FInventoryItemInfo");
addToContainers_struct("FItemOnDisplayInShopSlot", "Struct of a slot in a shop", "Docs/Structs/FItemOnDisplayInShopSlot/FItemOnDisplayInShopSlot.html", ["item", "on", "display", "in", "shop", "slot"], "");
addToContainers_function("FItemOnDisplayInShopSlot", "", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/FItemOnDisplayInShopSlot.html", ["item", "on", "display", "in", "shop", "slot"], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "The item this slot is selling", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/.html", [], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "Whether the item is for sale. If not for sale then users cannot buy it but they can look", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/_1.html", [], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "How many purchases of this item are remaining in the store. -1 means unlimited quantity. Set this to != -1 to only allow a finite number of purchases of this item.", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/_2.html", [], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "How many of this item are bought everytime you purchase this. e.g. if you want this shop to sell clarity potions in lots of 3 then this would be 3. My notes: currently limited to being only 1, but can probably change this in future. I have actually written the TryPutItemInInventory code to be ok if quantity is greater than 1, so it should be all good to remove that ClampMax of 1", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/_3.html", [], "FItemOnDisplayInShopSlot");
addToContainers_struct("FShopInfo", "Info about what inventory items a selectable can display and sell", "Docs/Structs/FShopInfo/FShopInfo.html", ["shop", "info"], "");
addToContainers_function("FShopInfo", "", "Docs/Structs/FShopInfo/Functions/FShopInfo.html", ["shop", "info"], "FShopInfo");
addToContainers_variable("", "The items this selectable displays and optionally sells. Limit 256", "Docs/Structs/FShopInfo/Variables/.html", [], "FShopInfo");
addToContainers_variable("", "The worst affiliation of who can see the items and shop here e.g. Owned = only we can shop here Allied = ourselves and people on our team can shop here Hostile = ourselves and people on our team and enemies can shop here Things like Observer or Neutral may cause undesirable behavior. Who knows.", "Docs/Structs/FShopInfo/Variables/_1.html", [], "FShopInfo");
addToContainers_variable("", "Whether items can be sold to this shop. Does not matter whether they were bought from here or not. This is irrelevant if the shop does not sell anything in the first place, but can be easily changed. @See FShopInfo::AcceptsRefunds()", "Docs/Structs/FShopInfo/Variables/_2.html", [], "FShopInfo");
addToContainers_variable("", "Whether this shop actually sells at least one of the items it has on display. Here as an optimization but can be derived from iterating ItemsOnDisplay and checking if at least one item is for sale. I think there were some \"shops\" in dota that only had items for show but you could not buy from them.", "Docs/Structs/FShopInfo/Variables/_3.html", [], "FShopInfo");
addToContainers_variable("", "How close a selectable has to be to this shop to be able to shop from it. Measured by doing a capsule sweep from GetActorLocation of shop.", "Docs/Structs/FShopInfo/Variables/_4.html", [], "FShopInfo");
addToContainers_variable("", "", "Docs/Structs/FShopInfo/Variables/_5.html", [], "FShopInfo");
addToContainers_struct("FInventorySlotState", "Information about a single slot in a selectable\'s inventory", "Docs/Structs/FInventorySlotState/FInventorySlotState.html", ["inventory", "slot", "state"], "");
addToContainers_function("FInventorySlotState", "Never call this ctor", "Docs/Structs/FInventorySlotState/Functions/FInventorySlotState.html", ["inventory", "slot", "state"], "FInventorySlotState");
addToContainers_function("FInventorySlotState", "DEPRECIATED. Param is useless right now. Can use paramless version", "Docs/Structs/FInventorySlotState/Functions/FInventorySlotState_1.html", ["inventory", "slot", "state"], "FInventorySlotState");
addToContainers_variable("ItemType", "The item in this slot. If \"None\" then there is no item in this slot", "Docs/Structs/FInventorySlotState/Variables/ItemType.html", ["item", "type"], "FInventorySlotState");
addToContainers_variable("1", "Flags about the item. Horay we crammed this whole struct into 4 bytes... well until I needed to add a timer handle In future I may want to add more bools here", "Docs/Structs/FInventorySlotState/Variables/1.html", [], "FInventorySlotState");
addToContainers_variable("1", "", "Docs/Structs/FInventorySlotState/Variables/1_1.html", [], "FInventorySlotState");
addToContainers_variable("1", "", "Docs/Structs/FInventorySlotState/Variables/1_2.html", [], "FInventorySlotState");
addToContainers_variable("1", "", "Docs/Structs/FInventorySlotState/Variables/1_3.html", [], "FInventorySlotState");
addToContainers_variable("NumInStackOrNumCharges", "This is the number of this item in this stack. Or the number of charges of this item. Because we do not allow an item that has more than 1 charge to stack we can do this. Probably should make sure that if effects reduce the number of charges on the item in this slot then we make sure to never let this go lower than 0 if it was previously equal to or greater than 0, since we use -1 to mean \'unlimited number of charges\'", "Docs/Structs/FInventorySlotState/Variables/NumInStackOrNumCharges.html", ["num", "in", "stack", "or", "num", "charges"], "FInventorySlotState");
addToContainers_variable("TimerHandle_ItemUseCooldown", "Timer that keeps track of the cooldown of the item\'s use ability", "Docs/Structs/FInventorySlotState/Variables/TimerHandle_ItemUseCooldown.html", ["timer", "handle_", "item", "use", "cooldown"], "FInventorySlotState");
addToContainers_struct("FInventoryItemQuantity", "Simple struct that records how much of an item type is in inventory", "Docs/Structs/FInventoryItemQuantity/FInventoryItemQuantity.html", ["inventory", "item", "quantity"], "");
addToContainers_function("FInventoryItemQuantity", "Here for code generation", "Docs/Structs/FInventoryItemQuantity/Functions/FInventoryItemQuantity.html", ["inventory", "item", "quantity"], "FInventoryItemQuantity");
addToContainers_function("FInventoryItemQuantity", "", "Docs/Structs/FInventoryItemQuantity/Functions/FInventoryItemQuantity_1.html", ["inventory", "item", "quantity"], "FInventoryItemQuantity");
addToContainers_variable("NumStacks", "How many stacks, both partial and full, of this item are in inventory", "Docs/Structs/FInventoryItemQuantity/Variables/NumStacks.html", ["num", "stacks"], "FInventoryItemQuantity");
addToContainers_variable("Num", "How many of this item are in inventory", "Docs/Structs/FInventoryItemQuantity/Variables/Num.html", [], "FInventoryItemQuantity");
addToContainers_struct("FInventoryItemQuantityPair", "Simple struct that contains item type and how many of it", "Docs/Structs/FInventoryItemQuantityPair/FInventoryItemQuantityPair.html", ["inventory", "item", "quantity", "pair"], "");
addToContainers_function("FInventoryItemQuantityPair", "Never call this ctor", "Docs/Structs/FInventoryItemQuantityPair/Functions/FInventoryItemQuantityPair.html", ["inventory", "item", "quantity", "pair"], "FInventoryItemQuantityPair");
addToContainers_function("FInventoryItemQuantityPair", "", "Docs/Structs/FInventoryItemQuantityPair/Functions/FInventoryItemQuantityPair_1.html", ["inventory", "item", "quantity", "pair"], "FInventoryItemQuantityPair");
addToContainers_variable("ItemType", "", "Docs/Structs/FInventoryItemQuantityPair/Variables/ItemType.html", ["item", "type"], "FInventoryItemQuantityPair");
addToContainers_variable("Quantity", "", "Docs/Structs/FInventoryItemQuantityPair/Variables/Quantity.html", [], "FInventoryItemQuantityPair");
addToContainers_struct("FInventory", "Holds information about a selectable\'s inventory. ServerIndex == SlotsArrayIndex LocalIndex == DisplayIndex ------------------------------------------------------------------------------------------------ Some info about how inventories behave: Short explanation: Very similar to dota I think Longer explanation: - when a stackable item is added to inventory it will try and be placed on an already existing stack of the same type if one exists. Otherwise it will go into an empty slot. - in regards to items combining to create other items: The initial item must be added to a slot first before combination item creation can happen. So if your inventory is full and you know that aquiring an item will cause items to combine and your inventory to stay at/below capacity then you cannot aqurie that item, unless it can go in an empty slot or on top of another. - Usable items with more than 1 charge are not allowed to stack. e.g. you could not let diffusal blades stack. If you want to do similar behavour to tengu\'s you could just allow the shop that sells them to sell them in lots of 3. ------------------------------------------------------------------------------------------------", "Docs/Structs/FInventory/FInventory.html", [], "");
addToContainers_function("FInventory", "", "Docs/Structs/FInventory/Functions/FInventory.html", [], "FInventory");
addToContainers_variable("", "The max number of slots in the inventory e.g. in dota this is 6", "Docs/Structs/FInventory/Variables/.html", [], "FInventory");
addToContainers_variable("", "How many items this inventory is holding", "Docs/Structs/FInventory/Variables/_1.html", [], "FInventory");
addToContainers_variable("", "Array of all the items in the inventory. The server keeps a copy of this and so do clients. The server and client versions are always exactly the same (after RPCs arrive of course). Reordering your inventory is achieved using the two arrays ServerIndexToLocalIndex and LocalIndexToServerIndex. My notes: It may be possible to expose this to editor to allow users to have units start with items. We would need to make sure that the bonuses are applied on spawn but there\'s lots of other stuff that needs checking: - checking that we didn\'t already start with a recipe item e.g. if the user puts a claymore, demon edge and scared relic in our inventory then we\'ve basically started with a divine rapier and we would need to make sure the 3 items are turned into it. - checking uniquess is obeyed - checking stack size limit is obeyed", "Docs/Structs/FInventory/Variables/_2.html", [], "FInventory");
addToContainers_variable("", "Key = index in SlotsArray, value = server index. I think this is the array to query when showing stuff in HUD ", "Docs/Structs/FInventory/Variables/_3.html", [], "FInventory");
addToContainers_variable("", "", "Docs/Structs/FInventory/Variables/_4.html", [], "FInventory");
addToContainers_variable("", "Maps item type to how many stacks of it there are in the inventory. Possibly no key/value pair means there are 0 stacks of that item.", "Docs/Structs/FInventory/Variables/_5.html", [], "FInventory");
addToContainers_variable("", "", "Docs/Structs/FInventory/Variables/_6.html", [], "FInventory");
addToContainers_struct("FSelectableResourceInfo", "A struct that holds information about a selectable resource. A selectable resource is something like mana or energy. My notes: we could ditch using NumTicksAhead and instead just use CurrentNumTicks which would be the game tick that it is up to date with currently. Using NumTicksAhead is actually more cumbersome. But the only reason I use it is because I want to avoid a mass branch prediction miss in a single frame when the game tick count is incremented to 255 which then means it has to be changed to 0.", "Docs/Structs/FSelectableResourceInfo/FSelectableResourceInfo.html", ["selectable", "resource", "info"], "");
addToContainers_function("FSelectableResourceInfo", "Set some sensible defaults", "Docs/Structs/FSelectableResourceInfo/Functions/FSelectableResourceInfo.html", ["selectable", "resource", "info"], "FSelectableResourceInfo");
addToContainers_variable("MULTIPLIER", "A multiplier that determines how accurate Amount is. Larger means more accurate. But means we should be careful about not allowing MaxAmount to be too high i.e. INT32_MAX / MULTIPLIER is actually roughly the max amount. Because we divide and multiply by this often you will get best performance if this is a power of two. In fact I static_assert it.", "Docs/Structs/FSelectableResourceInfo/Variables/MULTIPLIER.html", ["u", "l", "t", "i", "p", "l", "i", "e", "r"], "FSelectableResourceInfo");
addToContainers_variable("", "The type of resource this is. Use None if you do not want a resource This doesn\'t affect much. One thing it will affect is the color of the progress bar on the UI. Really minor.", "Docs/Structs/FSelectableResourceInfo/Variables/.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "[Client] How many ticks ahead of GS::TickCounter this resource is in regards to its regen. Negative means this resource is behind", "Docs/Structs/FSelectableResourceInfo/Variables/_1.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "Amount * MULTIPLIER. Range: [0, MaxAmount * MULTIPLIER]", "Docs/Structs/FSelectableResourceInfo/Variables/_2.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "Range: [0, MaxAmount]. This is the value you want to show in the UI. This is the value to query whenever we want to know whether we have enough of this resource", "Docs/Structs/FSelectableResourceInfo/Variables/_3.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "How much of this resource is regenerated every minute. Can be negative.", "Docs/Structs/FSelectableResourceInfo/Variables/_4.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "", "Docs/Structs/FSelectableResourceInfo/Variables/_5.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "How much of this resource we should regenerate each custom RTS game tick except it\'s MULTIPLIER times too big.", "Docs/Structs/FSelectableResourceInfo/Variables/_6.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "The maximum amount of this resource we are allowed e.g. for high templars it is 200. The max value of this is dependent on FSelectableResourceInfo::NUM_DECIMAL_PLACES. By default this is 4. INT32_MAX / 10^4 = INT32_MAX / 10000 = ~214 000. By default this number should stay below 214 000. If you decide to use 5 decimal places then you will need to then stay below 21 400, and so on. It\'s probably good to stay a little more below that even. Good way to remove this restriction: just make AmountUndivided an int64", "Docs/Structs/FSelectableResourceInfo/Variables/_7.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "How much we start with. My notes: couldn\'t this possibly be an editor only variable?", "Docs/Structs/FSelectableResourceInfo/Variables/_8.html", [], "FSelectableResourceInfo");
addToContainers_struct("FGatheredResourceMeshInfo", "Information about the mesh to show when a unit gathers a resource", "Docs/Structs/FGatheredResourceMeshInfo/FGatheredResourceMeshInfo.html", ["gathered", "resource", "mesh", "info"], "");
addToContainers_function("FGatheredResourceMeshInfo", "", "Docs/Structs/FGatheredResourceMeshInfo/Functions/FGatheredResourceMeshInfo.html", ["gathered", "resource", "mesh", "info"], "FGatheredResourceMeshInfo");
addToContainers_variable("", "The mesh to show", "Docs/Structs/FGatheredResourceMeshInfo/Variables/.html", [], "FGatheredResourceMeshInfo");
addToContainers_variable("", "Name of bone on main body mesh to attach to", "Docs/Structs/FGatheredResourceMeshInfo/Variables/_1.html", [], "FGatheredResourceMeshInfo");
addToContainers_variable("", "Attachment rule", "Docs/Structs/FGatheredResourceMeshInfo/Variables/_2.html", [], "FGatheredResourceMeshInfo");
addToContainers_variable("", "Location/rotation offset + scale of mesh", "Docs/Structs/FGatheredResourceMeshInfo/Variables/_3.html", [], "FGatheredResourceMeshInfo");
addToContainers_struct("FResourceCollectionAttribute", "Info about about gathering resources", "Docs/Structs/FResourceCollectionAttribute/FResourceCollectionAttribute.html", ["resource", "collection", "attribute"], "");
addToContainers_function("FResourceCollectionAttribute", "", "Docs/Structs/FResourceCollectionAttribute/Functions/FResourceCollectionAttribute.html", ["resource", "collection", "attribute"], "FResourceCollectionAttribute");
addToContainers_variable("", "Time it takes to gather resource. Lower = gather faster. 0 = instant", "Docs/Structs/FResourceCollectionAttribute/Variables/.html", [], "FResourceCollectionAttribute");
addToContainers_variable("", "Amount of resources this unit can hold", "Docs/Structs/FResourceCollectionAttribute/Variables/_1.html", [], "FResourceCollectionAttribute");
addToContainers_variable("", "The info about the mesh to show when this resource is gathered", "Docs/Structs/FResourceCollectionAttribute/Variables/_2.html", [], "FResourceCollectionAttribute");
addToContainers_struct("FResourceGatheringProperties", "Struct for holding all the resource collecting properties of a selectable", "Docs/Structs/FResourceGatheringProperties/FResourceGatheringProperties.html", ["resource", "gathering", "properties"], "");
addToContainers_function("FResourceGatheringProperties", "", "Docs/Structs/FResourceGatheringProperties/Functions/FResourceGatheringProperties.html", ["resource", "gathering", "properties"], "FResourceGatheringProperties");
addToContainers_variable("", "How much movement speed is multiplied by for carrying resources. Range of between 0 and 1 seems sensible. This could probably be made resource type specific", "Docs/Structs/FResourceGatheringProperties/Variables/.html", [], "FResourceGatheringProperties");
addToContainers_variable("", "An entry in here inplies this unit can gather this type of resource", "Docs/Structs/FResourceGatheringProperties/Variables/_1.html", [], "FResourceGatheringProperties");
addToContainers_struct("FSelectableAttributesBase", "Attributes common to ALL selectables", "Docs/Structs/FSelectableAttributesBase/FSelectableAttributesBase.html", ["selectable", "attributes", "base"], "");
addToContainers_function("FSelectableAttributesBase", "===============================================================================", "Docs/Structs/FSelectableAttributesBase/Functions/FSelectableAttributesBase.html", ["selectable", "attributes", "base"], "FSelectableAttributesBase");
addToContainers_variable("", "The display name of the selectable to optionally appear in UI", "Docs/Structs/FSelectableAttributesBase/Variables/.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Description of this", "Docs/Structs/FSelectableAttributesBase/Variables/_1.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Sound to try play when owning player selects this", "Docs/Structs/FSelectableAttributesBase/Variables/_2.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "The context menu buttons for this selectable", "Docs/Structs/FSelectableAttributesBase/Variables/_3.html", [], "FSelectableAttributesBase");
addToContainers_variable(":", "Whether selectable is selected by the local player", "Docs/Structs/FSelectableAttributesBase/Variables/:.html", [], "FSelectableAttributesBase");
addToContainers_variable(":", "Primary selected means this is the selectable whose context menu is showing in the HUD. If this is true it implies that the selectable is selected i.e. bIsSelected will be true aswell. For a long time I called this \"CurrentSelected\" instead", "Docs/Structs/FSelectableAttributesBase/Variables/:_1.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_4.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_5.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "ID of player who is controlling this", "Docs/Structs/FSelectableAttributesBase/Variables/_6.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_7.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Can be something like NotBuilding if the selectable is not a building. I think we double up on this variable because I have it in ABuilding. Solution is to make the ABuilding::Type variable editor only and on post edit set this variable to it. Do same with UnitType and AInfatry", "Docs/Structs/FSelectableAttributesBase/Variables/_8.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Can be something like NotUnit if the selectable is not a unit", "Docs/Structs/FSelectableAttributesBase/Variables/_9.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_10.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "How the selection decal has been setup", "Docs/Structs/FSelectableAttributesBase/Variables/_11.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Material instance dynamic for selection decal. Can be null. Can tell from SelectionDecalSetup", "Docs/Structs/FSelectableAttributesBase/Variables/_12.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Image to appear on HUDs when selecting or producing this", "Docs/Structs/FSelectableAttributesBase/Variables/_13.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Image to appear on HUDs when mouse is hovered over a button for this", "Docs/Structs/FSelectableAttributesBase/Variables/_14.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Image to appear on HUDs when mouse is pressed on a button for this", "Docs/Structs/FSelectableAttributesBase/Variables/_15.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "The index from owning faction info this selectable gets its selection and right-click particles from. This is here so different particle system templates can be used for different size selectables instead of scaling particle system which can sometimes not turn out right", "Docs/Structs/FSelectableAttributesBase/Variables/_16.html", [], "FSelectableAttributesBase");
addToContainers_struct("FSelectableAttributesBasic", "Not 100% sure what this struct represents, but I derive building attributes and infantry attributes from it, so it\'s stuff common to both of them", "Docs/Structs/FSelectableAttributesBasic/FSelectableAttributesBasic.html", ["selectable", "attributes", "basic"], "");
addToContainers_function("FSelectableAttributesBasic", "", "Docs/Structs/FSelectableAttributesBasic/Functions/FSelectableAttributesBasic.html", ["selectable", "attributes", "basic"], "FSelectableAttributesBasic");
addToContainers_variable("", "Sound to try play when built. For buildings this is when construction has completed", "Docs/Structs/FSelectableAttributesBasic/Variables/.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Sound to try play when this selectable reaches zero health", "Docs/Structs/FSelectableAttributesBasic/Variables/_1.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Cost to build/train. Maps resource type to cost", "Docs/Structs/FSelectableAttributesBasic/Variables/_2.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "For a building this is the time it takes to be constructed. For a unit this is the time from when production starts to when the \'open door\' animation of the barracks is triggered if using open door anim", "Docs/Structs/FSelectableAttributesBasic/Variables/_3.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBasic/Variables/_4.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "For targeting purposes. The type of selectable this is", "Docs/Structs/FSelectableAttributesBasic/Variables/_5.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "The selectables armour. Armour affects how much damage is taken from different kinds of damage sources", "Docs/Structs/FSelectableAttributesBasic/Variables/_6.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "How much incoming damage is multiplied by", "Docs/Structs/FSelectableAttributesBasic/Variables/_7.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Fog of war reveal radius", "Docs/Structs/FSelectableAttributesBasic/Variables/_8.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Radius stealth enemies will be revealed (given you can also see that far). 0 = cannot reveal stealth. Can be larger than SightRange but still requires vision from another friendly in order to see the stealth unit.", "Docs/Structs/FSelectableAttributesBasic/Variables/_9.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "How much experience is awarded to an enemy when it destroys this unit. Can be modified as the match progresses. One time it can increase is when this selectable levels up", "Docs/Structs/FSelectableAttributesBasic/Variables/_10.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "A resource like mana, energy, etc. Set this to \"None\" to not have one", "Docs/Structs/FSelectableAttributesBasic/Variables/_11.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Buildings that must be built before building this. Adding the building that trains this unit is not required. Duplicates will have no additional effect and will be removed in post edit", "Docs/Structs/FSelectableAttributesBasic/Variables/_12.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Upgrades that must be researched before this selectable can be built. Do not add duplicates. My notes: TODO remove duplicates in post edit", "Docs/Structs/FSelectableAttributesBasic/Variables/_13.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Maps body location to the component + bone/socket name on the main mesh. Any blank entries will default to NAME_None and the root component", "Docs/Structs/FSelectableAttributesBasic/Variables/_14.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Default attach info when no info about a particular location is specified", "Docs/Structs/FSelectableAttributesBasic/Variables/_15.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "If using a persistent panel like in C&C in HUD, the tab to appear in. Use \"None\" to exclude this from appearing on the HUD persistent panel", "Docs/Structs/FSelectableAttributesBasic/Variables/_16.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "If using a persistent panel like in C&C in HUD, the ordering of button. Lower = appears as one of the first buttons in tab (In C&C weaker buildings are usually first like power plants)", "Docs/Structs/FSelectableAttributesBasic/Variables/_17.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "If true then every player (ally and enemy) will be aware that this selectable is built. Currently only used for deciding whether to play \'just built\' sound. e.g. true = Kirovs in RA2", "Docs/Structs/FSelectableAttributesBasic/Variables/_18.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Sounds to play when given a context command. If any entries are left blank or null then the move command sound will be used if infantry", "Docs/Structs/FSelectableAttributesBasic/Variables/_19.html", [], "FSelectableAttributesBasic");
addToContainers_variable("NumTempMaxHealthModifiers", "------------------------------------------------------------------------------------------", "Docs/Structs/FSelectableAttributesBasic/Variables/NumTempMaxHealthModifiers.html", ["num", "temp", "max", "health", "modifiers"], "FSelectableAttributesBasic");
addToContainers_variable("", "What our max health is without any temporary buffs/debuffs", "Docs/Structs/FSelectableAttributesBasic/Variables/_20.html", [], "FSelectableAttributesBasic");
addToContainers_variable("NumTempDefenseMultiplierModifiers", "Number of temporary defense multipliers applied (one reason would be because of a buff or debuff)", "Docs/Structs/FSelectableAttributesBasic/Variables/NumTempDefenseMultiplierModifiers.html", ["num", "temp", "defense", "multiplier", "modifiers"], "FSelectableAttributesBasic");
addToContainers_variable("", "What our defense multiplier is without any temporary buffs/debuffs", "Docs/Structs/FSelectableAttributesBasic/Variables/_21.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Number of variables that need to be repped in order for client to call Setup(). Default is 3: a unique ID for commands, bIsStartingSelectable and AActor::Owner", "Docs/Structs/FSelectableAttributesBasic/Variables/_22.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Current tally towards NumRequiredReppedVariablesForSetup", "Docs/Structs/FSelectableAttributesBasic/Variables/_23.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "How the selectable was spawned", "Docs/Structs/FSelectableAttributesBasic/Variables/_24.html", [], "FSelectableAttributesBasic");
addToContainers_struct("FGarrisonEvacHistory_UnloadAllAtOnce_Grid", "Contains a record of where units have been successfully evacced to and locations where their overlap tests failed. This is for unloading all units at once using the grid method.", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/FGarrisonEvacHistory_UnloadAllAtOnce_Grid.html", ["garrison", "evac", "history_", "unload", "all", "at", "once_", "grid"], "");
addToContainers_function("FGarrisonEvacHistory_UnloadAllAtOnce_Grid", "@param GarrisonedUnits - array of garrisoned units in building", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Functions/FGarrisonEvacHistory_UnloadAllAtOnce_Grid.html", ["garrison", "evac", "history_", "unload", "all", "at", "once_", "grid"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("LOCATION_INVALID", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/LOCATION_INVALID.html", ["o", "c", "a", "t", "i", "o", "n_", "i", "n", "v", "a", "l", "i", "d"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/_1.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/_2.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/_3.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/_4.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("FoursSidesInfo[4]", "Holds information about the 4 sides of a building", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/FoursSidesInfo[4].html", ["fours", "sides", "info[4]"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("CurrentFoursSidesInfoIndex", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/CurrentFoursSidesInfoIndex.html", ["current", "fours", "sides", "info", "index"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("NumUnitsEvacced", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/NumUnitsEvacced.html", ["num", "units", "evacced"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("bHasGivenOutFirstLocation", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtOnce_Grid/Variables/bHasGivenOutFirstLocation.html", ["has", "given", "out", "first", "location"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_struct("FBuildingNetworkAttributes", "Static attributes for building garrison networks", "Docs/Structs/FBuildingNetworkAttributes/FBuildingNetworkAttributes.html", ["building", "network", "attributes"], "");
addToContainers_function("FBuildingNetworkAttributes", "", "Docs/Structs/FBuildingNetworkAttributes/Functions/FBuildingNetworkAttributes.html", ["building", "network", "attributes"], "FBuildingNetworkAttributes");
addToContainers_variable("", "How many \'slots\' the network has for units to be garrisoned in it.", "Docs/Structs/FBuildingNetworkAttributes/Variables/.html", [], "FBuildingNetworkAttributes");
addToContainers_struct("FBuildingNetworkState", "State for a single building garrison network for a single player", "Docs/Structs/FBuildingNetworkState/FBuildingNetworkState.html", ["building", "network", "state"], "");
addToContainers_function("FBuildingNetworkState", "", "Docs/Structs/FBuildingNetworkState/Functions/FBuildingNetworkState.html", ["building", "network", "state"], "FBuildingNetworkState");
addToContainers_variable("GarrisonedUnits", "TArray of all the units inside this garrison. Not auto memory managed i.e. not UPROPERTY or TWeakObjectPtr - unit\'s are responsible to update the container when they reach zero health so invalids should not be an issue.", "Docs/Structs/FBuildingNetworkState/Variables/GarrisonedUnits.html", ["garrisoned", "units"], "FBuildingNetworkState");
addToContainers_variable("SlotCapacity", "Number of slots this garrison has", "Docs/Structs/FBuildingNetworkState/Variables/SlotCapacity.html", ["slot", "capacity"], "FBuildingNetworkState");
addToContainers_variable("SlotUsage", "Number of slots that are being used. Will change as selectables enter and exit", "Docs/Structs/FBuildingNetworkState/Variables/SlotUsage.html", ["slot", "usage"], "FBuildingNetworkState");
addToContainers_struct("FPlayersBuildingNetworksState", "For a single player this struct contains all the information about all building garrison networks for that player", "Docs/Structs/FPlayersBuildingNetworksState/FPlayersBuildingNetworksState.html", ["players", "building", "networks", "state"], "");
addToContainers_function("FPlayersBuildingNetworksState", "", "Docs/Structs/FPlayersBuildingNetworksState/Functions/FPlayersBuildingNetworksState.html", ["players", "building", "networks", "state"], "FPlayersBuildingNetworksState");
addToContainers_struct("FBuildingGarrisonAttributes", "Attributes that say how many units can be garrisoned inside a building", "Docs/Structs/FBuildingGarrisonAttributes/FBuildingGarrisonAttributes.html", ["building", "garrison", "attributes"], "");
addToContainers_function("FBuildingGarrisonAttributes", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/FBuildingGarrisonAttributes.html", ["building", "garrison", "attributes"], "FBuildingGarrisonAttributes");
addToContainers_variable("GarrisonNetworkInfo", "Pointer to the garrison network info struct on the player state that owns the building. If this garrison is not part of a garrison network then this will be null", "Docs/Structs/FBuildingGarrisonAttributes/Variables/GarrisonNetworkInfo.html", ["garrison", "network", "info"], "FBuildingGarrisonAttributes");
addToContainers_variable("GarrisonedUnits", "TArray of all the units inside this garrison. Not auto memory managed i.e. not UPROPERTY or TWeakObjectPtr - unit\'s are responsible to update the container when they reach zero health so invalids should not be an issue.", "Docs/Structs/FBuildingGarrisonAttributes/Variables/GarrisonedUnits.html", ["garrisoned", "units"], "FBuildingGarrisonAttributes");
addToContainers_variable("", "How many \'slots\' the building has for units to be garrisoned in it. If this building is part of a garrison network then this is not used. If you\'re wondering where to edit the capacity of network it\'s URTSGameInstance::BuildingNetworkInfo", "Docs/Structs/FBuildingGarrisonAttributes/Variables/.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("SlotUsage", "Number of slots that are being used. Will change as selectables enter and exit. Not kept up to date if this building is part of a garrison network.", "Docs/Structs/FBuildingGarrisonAttributes/Variables/SlotUsage.html", ["slot", "usage"], "FBuildingGarrisonAttributes");
addToContainers_variable("HightestSightRadiusContainerContributor", "The unit that is contributing to the sight radius i.e. the unit with a sight radius larger than any other unit garrisoned in the building AND larger than the building\'s sight radius too If null then the building is the contributor", "Docs/Structs/FBuildingGarrisonAttributes/Variables/HightestSightRadiusContainerContributor.html", ["hightest", "sight", "radius", "container", "contributor"], "FBuildingGarrisonAttributes");
addToContainers_variable("HighestStealthRevealRadiusContainerContributor", "", "Docs/Structs/FBuildingGarrisonAttributes/Variables/HighestStealthRevealRadiusContainerContributor.html", ["highest", "stealth", "reveal", "radius", "container", "contributor"], "FBuildingGarrisonAttributes");
addToContainers_variable("", "The mouse cursor to show for this garrison to say a unit can enter it", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_1.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "Range when units can enter garrison", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_2.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "A sound that can be played when a unit enters the garrison", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_3.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "A sound that can be played when a unit leaves the garrison", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_4.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "How all the units leave when given a command to all exit", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_5.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable(":", "If true then units that enter this garrison can see out of it i.e. their vision radius and stealth reveal radius still matter.", "Docs/Structs/FBuildingGarrisonAttributes/Variables/:.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "The building garrison network this is part of. Building garrison networks mean that units are shared across buildings e.g. - in C&C generals tunnel networks - in SCII nydus worms Use None if you do not want the building to be part of any network", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_6.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "bool bCanUnitsAttackFromInside;", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_7.html", [], "FBuildingGarrisonAttributes");
addToContainers_struct("FBuildingAttributes", "", "Docs/Structs/FBuildingAttributes/FBuildingAttributes.html", ["building", "attributes"], "");
addToContainers_function("FBuildingAttributes", "", "Docs/Structs/FBuildingAttributes/Functions/FBuildingAttributes.html", ["building", "attributes"], "FBuildingAttributes");
addToContainers_variable("", "", "Docs/Structs/FBuildingAttributes/Variables/.html", [], "FBuildingAttributes");
addToContainers_variable("", "Effective sight radius is the final sight radius to use for this building after taking into account all the units garrisoned inside of it", "Docs/Structs/FBuildingAttributes/Variables/_1.html", [], "FBuildingAttributes");
addToContainers_variable("", "Same except for stealth reveal radius instead", "Docs/Structs/FBuildingAttributes/Variables/_2.html", [], "FBuildingAttributes");
addToContainers_variable("", "The maximum amount of units/upgrades that can be queued in the training queue at once. Only one unit is trained at a time no matter the queue size. If this building is not a unit-producing building then setting this as 0 is a good way to save on memory. Cancelling an item in production or adding an item to production is O(n)", "Docs/Structs/FBuildingAttributes/Variables/_3.html", [], "FBuildingAttributes");
addToContainers_variable("", "What a unit that is produced from this building does after it has spawned", "Docs/Structs/FBuildingAttributes/Variables/_4.html", [], "FBuildingAttributes");
addToContainers_variable("", "Queue that handles production. This queue handles producing units and upgrades", "Docs/Structs/FBuildingAttributes/Variables/_5.html", [], "FBuildingAttributes");
addToContainers_variable("", "Another queue that handles production of buildings and upgrades when producing them from the HUD persistent panel. This is kept seperate from the other queue to allow players to build from the HUD persistent panel and use the context menu to produce stuff at the same time. Not something that a lot of people would probably use though", "Docs/Structs/FBuildingAttributes/Variables/_6.html", [], "FBuildingAttributes");
addToContainers_variable("", "True if the building has a production queue limit of at least 1 and has a \"Train\" or \"Upgrade\" command as one of its context commands. Edited by PostEditProperty", "Docs/Structs/FBuildingAttributes/Variables/_7.html", [], "FBuildingAttributes");
addToContainers_variable("", "Whether this building is a construction yard type building or not. This slot will be used to build buildings only and will use the persistent production queue Currently limited to 1", "Docs/Structs/FBuildingAttributes/Variables/_8.html", [], "FBuildingAttributes");
addToContainers_variable("", "Whether to override how the building is built defined in faction info", "Docs/Structs/FBuildingAttributes/Variables/_9.html", [], "FBuildingAttributes");
addToContainers_variable("", "The build method to use for this if choosing to override the faction default build method", "Docs/Structs/FBuildingAttributes/Variables/_10.html", [], "FBuildingAttributes");
addToContainers_variable("", "Whether to override AFactionInfo::BuildingProximityRange", "Docs/Structs/FBuildingAttributes/Variables/_11.html", [], "FBuildingAttributes");
addToContainers_variable("", "@See AFactionInfo::BuildingProximityRange", "Docs/Structs/FBuildingAttributes/Variables/_12.html", [], "FBuildingAttributes");
addToContainers_variable("", "Only applicable if: - this building uses the BuildsInTab build method. - this building does not have a \"construction\" animation The time it takes building to go from being placed to being fully constructed e.g. in Red Alert 3 and Allies power plant takes about 10secs to build, then you place it somewhere and it takes about another 2 seconds to construct. This variable refers to that 2nd time I mentioned Side note: If using a construct anim then make sure an anim notfy has been placed at the end of the animation to signal construction finished", "Docs/Structs/FBuildingAttributes/Variables/_13.html", [], "FBuildingAttributes");
addToContainers_variable("", "Animations to play", "Docs/Structs/FBuildingAttributes/Variables/_14.html", [], "FBuildingAttributes");
addToContainers_variable("", "Sound to play in the world when the building is placed into the world", "Docs/Structs/FBuildingAttributes/Variables/_15.html", [], "FBuildingAttributes");
addToContainers_variable("", "Sound to play while the building is being worked on. It should be looping. I think this will play even if your build method is one the 3 that builds itself", "Docs/Structs/FBuildingAttributes/Variables/_16.html", [], "FBuildingAttributes");
addToContainers_variable("", "Array of resources that can be dropped off at this building by resource gatherers e.g. in Starcraft II a nexus is a drop point for minerals and vespene gas", "Docs/Structs/FBuildingAttributes/Variables/_17.html", [], "FBuildingAttributes");
addToContainers_variable("", "How close collector has to get to depot for it to be able to drop off resources. Measured from building\'s GetActorLocation() to dunno", "Docs/Structs/FBuildingAttributes/Variables/_18.html", [], "FBuildingAttributes");
addToContainers_variable("", "Radius for how close unit has to get to building before it can lay down its foundations, measured from building\'s GetActorLocation() to dunno", "Docs/Structs/FBuildingAttributes/Variables/_19.html", [], "FBuildingAttributes");
addToContainers_variable("", "How much of the housing resources this building provides", "Docs/Structs/FBuildingAttributes/Variables/_20.html", [], "FBuildingAttributes");
addToContainers_variable("", "This array contains the values in HousingResourcesProvided and is updated on post edit. It exists for performance only", "Docs/Structs/FBuildingAttributes/Variables/_21.html", [], "FBuildingAttributes");
addToContainers_variable("", "The items this shop has on display and optionally sells", "Docs/Structs/FBuildingAttributes/Variables/_22.html", [], "FBuildingAttributes");
addToContainers_variable("", "", "Docs/Structs/FBuildingAttributes/Variables/_23.html", [], "FBuildingAttributes");
addToContainers_variable("", "The particles to play when the building is placed into the world. Will not show if building is a starting selectable. They do not move as the building rises This particle system will not be stopped so it should not be looping", "Docs/Structs/FBuildingAttributes/Variables/_24.html", [], "FBuildingAttributes");
addToContainers_variable("", "The particles to play while the building\'s construction progress is being advanced. They do not move as the building rises These particles should be looping.", "Docs/Structs/FBuildingAttributes/Variables/_25.html", [], "FBuildingAttributes");
addToContainers_variable("StaticBuffs", "Array for static buffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/StaticBuffs.html", ["static", "buffs"], "FBuildingAttributes");
addToContainers_variable("StaticDebuffs", "Array of static debuffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/StaticDebuffs.html", ["static", "debuffs"], "FBuildingAttributes");
addToContainers_variable("TickableBuffs", "Array of tickable buffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/TickableBuffs.html", ["tickable", "buffs"], "FBuildingAttributes");
addToContainers_variable("TickableDebuffs", "Array of tickable debuffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/TickableDebuffs.html", ["tickable", "debuffs"], "FBuildingAttributes");
addToContainers_variable("", "Whether this building is a base defense type building", "Docs/Structs/FBuildingAttributes/Variables/_26.html", [], "FBuildingAttributes");
addToContainers_variable("", "Array of all attack components on this building", "Docs/Structs/FBuildingAttributes/Variables/_27.html", [], "FBuildingAttributes");
addToContainers_variable("", "Rotatable bases of the turrets", "Docs/Structs/FBuildingAttributes/Variables/_28.html", [], "FBuildingAttributes");
addToContainers_variable("", "How far above the building\'s mesh its persistent world widget should appear. The axis are probably slightly misleading. The X is left and right and the Y is up and down", "Docs/Structs/FBuildingAttributes/Variables/_29.html", [], "FBuildingAttributes");
addToContainers_variable("", "How far above the building\'s mesh its selection world widget should appear The axis are probably slightly misleading. The X is left and right and the Y is up and down", "Docs/Structs/FBuildingAttributes/Variables/_30.html", [], "FBuildingAttributes");
addToContainers_variable("", "", "Docs/Structs/FBuildingAttributes/Variables/_31.html", [], "FBuildingAttributes");
addToContainers_struct("FEnteringGarrisonAttributes", "", "Docs/Structs/FEnteringGarrisonAttributes/FEnteringGarrisonAttributes.html", ["entering", "garrison", "attributes"], "");
addToContainers_function("FEnteringGarrisonAttributes", "", "Docs/Structs/FEnteringGarrisonAttributes/Functions/FEnteringGarrisonAttributes.html", ["entering", "garrison", "attributes"], "FEnteringGarrisonAttributes");
addToContainers_variable("", "How many garrison slots this unit uses inside building garrisons", "Docs/Structs/FEnteringGarrisonAttributes/Variables/.html", [], "FEnteringGarrisonAttributes");
addToContainers_struct("FInfantryAttributes", "Attributes common to all infantry", "Docs/Structs/FInfantryAttributes/FInfantryAttributes.html", ["infantry", "attributes"], "");
addToContainers_function("FInfantryAttributes", "", "Docs/Structs/FInfantryAttributes/Functions/FInfantryAttributes.html", ["infantry", "attributes"], "FInfantryAttributes");
addToContainers_variable("", "How much of the housing resource this unit costs", "Docs/Structs/FInfantryAttributes/Variables/.html", [], "FInfantryAttributes");
addToContainers_variable("", "This is a contract variable. Setting this to true means it is possible for this unit to enter stealth at some point. Setting this to false can be an optimization", "Docs/Structs/FInfantryAttributes/Variables/_1.html", [], "FInfantryAttributes");
addToContainers_variable("", "If true unit will spawn stealthed. Optionally you can have this unit reveal itself when it does something by adding the anim notify \'OnExitStealthMode\' to the Attack/GatherResources/whatever animations. My notes: I think this variable basically means the unit is a stealth unit e.g. jarmen kell, dark templars. If an upgrade now wants to make a unit stealth then this is the variable to set.", "Docs/Structs/FInfantryAttributes/Variables/_2.html", [], "FInfantryAttributes");
addToContainers_variable("", "If true then the unit is in a state where if it decides to break its stealth then it will re-enter it after a StealthRevealTime delay. False basically means we won\'t try re-enter stealth This will rarely change during gameplay. I don\'t even know but this variable might be redundant. Anytime this is used bSpawnStealthed could possibly replace it", "Docs/Structs/FInfantryAttributes/Variables/_3.html", [], "FInfantryAttributes");
addToContainers_variable("", "Time from when the unit breaks stealth to when it should re-enter stealth. \"Breaks stealth\" means you executed an action that should remove your stealth, and has nothing to do with being detected by an enemy. Some special values for this: - Setting this to 0 and/or not setting the \'OnExitStealthMode\' anim notifies means unit will not reveal self ever (similar to ghosts or dark templars in SCII) unless given an explicit command to do so (e.g. using unclock for ghosts). - Setting this to less than 0 means unit will never re-enter stealth after notify and will require an explicit command to re-enter stealth", "Docs/Structs/FInfantryAttributes/Variables/_4.html", [], "FInfantryAttributes");
addToContainers_variable("", "Name of param in dynamic material instance that controls the stealth effect", "Docs/Structs/FInfantryAttributes/Variables/_5.html", [], "FInfantryAttributes");
addToContainers_variable("", "Value to set on stealth material instance when in stealth mode. If the param is controlling alpha then this will likely want to be something less than 1", "Docs/Structs/FInfantryAttributes/Variables/_6.html", [], "FInfantryAttributes");
addToContainers_variable("", "Whether the unit can ever gain experience", "Docs/Structs/FInfantryAttributes/Variables/_7.html", [], "FInfantryAttributes");
addToContainers_variable("", "How much experience is required to reach the level. Non-cumulative so these values are how much to go from the current level to the next. If this is greyed out check LevelingUpOptions::EXPERIENCE_ENABLED_GAME in ProjectSettings.h", "Docs/Structs/FInfantryAttributes/Variables/_8.html", [], "FInfantryAttributes");
addToContainers_variable("", "Values from TMap. Gets populated in post edit. Index 0 = first gainable level, index 1 = second gainable level, and so on e.g. If you start on level 1 and can level up to 3: index 0 = EXP requirement for level 2 index 1 = EXP requirement for level 3", "Docs/Structs/FInfantryAttributes/Variables/_9.html", [], "FInfantryAttributes");
addToContainers_variable("", "Multiplies experience earned. Higher = level up faster", "Docs/Structs/FInfantryAttributes/Variables/_10.html", [], "FInfantryAttributes");
addToContainers_variable("", "Whether the unit can build buildings. This is set automatically during post edit, usually if the context menu has at least one button for building a building", "Docs/Structs/FInfantryAttributes/Variables/_11.html", [], "FInfantryAttributes");
addToContainers_variable("", "Whether unit can repair buildings. Repairs only, not construction", "Docs/Structs/FInfantryAttributes/Variables/_12.html", [], "FInfantryAttributes");
addToContainers_variable("", "Resource collection properties. The game wide rules for resource collection are as follows: ----- It\'s basically the same as SCII. To be more specific: ------ - Each resource spot (similar to a mineral patch in SCII) can provide only one type of resource. - Each resource drop point (similar to a nexus in SCII) is allowed to take in multiple resource types. - A collector (like probes in SCII) must stay its full duration at a resource spot uninterrupted for it to gain its capacity in resources. If interrupted it must restart the timer for gathering resource (same behavior as SCII I believe). - If a collector holding resources chooses to gather from another resource spot of a different resource type it will lose the resources it has already gathered upon successfully gathering the new resource type (same behavior as SCII I believe)", "Docs/Structs/FInfantryAttributes/Variables/_13.html", [], "FInfantryAttributes");
addToContainers_variable("", "The items this unit has", "Docs/Structs/FInfantryAttributes/Variables/_14.html", [], "FInfantryAttributes");
addToContainers_variable("", "", "Docs/Structs/FInfantryAttributes/Variables/_15.html", [], "FInfantryAttributes");
addToContainers_variable("", "The mouse cursor to show when player hovers their mouse over a hostile selectable that this unit can attack", "Docs/Structs/FInfantryAttributes/Variables/_16.html", [], "FInfantryAttributes");
addToContainers_variable("", "The mouse cursor to show when player hovers their mouse over a friendly selectable that this unit can attack", "Docs/Structs/FInfantryAttributes/Variables/_17.html", [], "FInfantryAttributes");
addToContainers_variable("", "", "Docs/Structs/FInfantryAttributes/Variables/_18.html", [], "FInfantryAttributes");
addToContainers_variable("StaticBuffs", "Buffs applied to this infantry that do not expire on their own and have no tick logic. Using an array because it helps with displaying them on UI", "Docs/Structs/FInfantryAttributes/Variables/StaticBuffs.html", ["static", "buffs"], "FInfantryAttributes");
addToContainers_variable("StaticDebuffs", "Debuffs applied to this infantry that do not expire on their own and have no tick logic. Using an array because it helps with displaying them on UI", "Docs/Structs/FInfantryAttributes/Variables/StaticDebuffs.html", ["static", "debuffs"], "FInfantryAttributes");
addToContainers_variable("TickableBuffs", "Buffs applied to this infantry that can expire on their own and/or have tick logic. Advantages of using array: - faster iteration during tick Advantages of set: - faster containment checks for knowing if buff/debuff is applied which could be commonly used for abilities and/or applying buffs/debuffs", "Docs/Structs/FInfantryAttributes/Variables/TickableBuffs.html", ["tickable", "buffs"], "FInfantryAttributes");
addToContainers_variable("TickableDebuffs", "Just like TickableBuffs but for debuffs", "Docs/Structs/FInfantryAttributes/Variables/TickableDebuffs.html", ["tickable", "debuffs"], "FInfantryAttributes");
addToContainers_variable("AttachedParticles", "Particles that are attached to the unit", "Docs/Structs/FInfantryAttributes/Variables/AttachedParticles.html", ["attached", "particles"], "FInfantryAttributes");
addToContainers_variable("NumTempMoveSpeedModifiers", "How many move speed multipliers have been applied to this unit. Counts both speed ups and slow downs. This is here to correct for gradual floating point number drift", "Docs/Structs/FInfantryAttributes/Variables/NumTempMoveSpeedModifiers.html", ["num", "temp", "move", "speed", "modifiers"], "FInfantryAttributes");
addToContainers_variable("NumTempExperienceGainModifiers", "", "Docs/Structs/FInfantryAttributes/Variables/NumTempExperienceGainModifiers.html", ["num", "temp", "experience", "gain", "modifiers"], "FInfantryAttributes");
addToContainers_variable("DefaultExperienceGainMultiplier", "", "Docs/Structs/FInfantryAttributes/Variables/DefaultExperienceGainMultiplier.html", ["default", "experience", "gain", "multiplier"], "FInfantryAttributes");
addToContainers_variable("NumTempStealthModeEffects", "How many temporary effects (such as those from buffs/debuffs) are on us that give us stealth mode", "Docs/Structs/FInfantryAttributes/Variables/NumTempStealthModeEffects.html", ["num", "temp", "stealth", "mode", "effects"], "FInfantryAttributes");
addToContainers_variable("", "The sound to try play when given a move command", "Docs/Structs/FInfantryAttributes/Variables/_19.html", [], "FInfantryAttributes");
addToContainers_variable("", "", "Docs/Structs/FInfantryAttributes/Variables/_20.html", [], "FInfantryAttributes");
addToContainers_struct("FStartingSelectables", "The selectables a player starts the match with. Kind of a game mode struct", "Docs/Structs/FStartingSelectables/FStartingSelectables.html", ["starting", "selectables"], "");
addToContainers_variable("Buildings", "", "Docs/Structs/FStartingSelectables/Variables/Buildings.html", [], "FStartingSelectables");
addToContainers_variable("Units", "", "Docs/Structs/FStartingSelectables/Variables/Units.html", [], "FStartingSelectables");
addToContainers_struct("FGameNotificationInfo", "Image + sound cue for a game notification", "Docs/Structs/FGameNotificationInfo/FGameNotificationInfo.html", ["game", "notification", "info"], "");
addToContainers_function("FGameNotificationInfo", "", "Docs/Structs/FGameNotificationInfo/Functions/FGameNotificationInfo.html", ["game", "notification", "info"], "FGameNotificationInfo");
addToContainers_function("FGameNotificationInfo", "", "Docs/Structs/FGameNotificationInfo/Functions/FGameNotificationInfo_1.html", ["game", "notification", "info"], "FGameNotificationInfo");
addToContainers_variable("", "Message to show on the HUD", "Docs/Structs/FGameNotificationInfo/Variables/.html", [], "FGameNotificationInfo");
addToContainers_variable("", "UI sound to play", "Docs/Structs/FGameNotificationInfo/Variables/_1.html", [], "FGameNotificationInfo");
addToContainers_struct("FGameWarningInfo", "Image + sound cue for a game warning", "Docs/Structs/FGameWarningInfo/FGameWarningInfo.html", ["game", "warning", "info"], "");
addToContainers_function("FGameWarningInfo", "", "Docs/Structs/FGameWarningInfo/Functions/FGameWarningInfo.html", ["game", "warning", "info"], "FGameWarningInfo");
addToContainers_function("FGameWarningInfo", "", "Docs/Structs/FGameWarningInfo/Functions/FGameWarningInfo_1.html", ["game", "warning", "info"], "FGameWarningInfo");
addToContainers_variable("", "Message to show on the HUD", "Docs/Structs/FGameWarningInfo/Variables/.html", [], "FGameWarningInfo");
addToContainers_variable("", "UI sound to play", "Docs/Structs/FGameWarningInfo/Variables/_1.html", [], "FGameWarningInfo");
addToContainers_struct("FUnifiedMouseFocusImage", "Holds info about how the image to draw overtop of a button when it is being hovered/pressed", "Docs/Structs/FUnifiedMouseFocusImage/FUnifiedMouseFocusImage.html", ["unified", "mouse", "focus", "image"], "");
addToContainers_function("FUnifiedMouseFocusImage", "", "Docs/Structs/FUnifiedMouseFocusImage/Functions/FUnifiedMouseFocusImage.html", ["unified", "mouse", "focus", "image"], "FUnifiedMouseFocusImage");
addToContainers_variable("", "", "Docs/Structs/FUnifiedMouseFocusImage/Variables/.html", [], "FUnifiedMouseFocusImage");
addToContainers_variable("", "My notes on FSlateBrush: could probably create my own struct for images. It could do away with some of the extras on FSlateBrush that I don\'t need", "Docs/Structs/FUnifiedMouseFocusImage/Variables/_1.html", [], "FUnifiedMouseFocusImage");
addToContainers_struct("FUnifiedUIButtonSound", "Info about a sound", "Docs/Structs/FUnifiedUIButtonSound/FUnifiedUIButtonSound.html", ["unified", "u", "i", "button", "sound"], "");
addToContainers_function("FUnifiedUIButtonSound", "", "Docs/Structs/FUnifiedUIButtonSound/Functions/FUnifiedUIButtonSound.html", ["unified", "u", "i", "button", "sound"], "FUnifiedUIButtonSound");
addToContainers_variable("", "Whether to use the sound for every button type this struct is for.", "Docs/Structs/FUnifiedUIButtonSound/Variables/.html", [], "FUnifiedUIButtonSound");
addToContainers_variable("", "", "Docs/Structs/FUnifiedUIButtonSound/Variables/_1.html", [], "FUnifiedUIButtonSound");
addToContainers_struct("FUnifiedImageAndSoundAssets", "Contains images and sounds", "Docs/Structs/FUnifiedImageAndSoundAssets/FUnifiedImageAndSoundAssets.html", ["unified", "image", "and", "sound", "assets"], "");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_1.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_2.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_3.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_4.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_struct("FVisibilityInfo", "Holds a TMap that maps each unit to whether it is currently visible or hidden.", "Docs/Structs/FVisibilityInfo/FVisibilityInfo.html", ["visibility", "info"], "");
addToContainers_variable("", "", "Docs/Structs/FVisibilityInfo/Variables/.html", [], "FVisibilityInfo");
addToContainers_struct("FUint64Array", "Holds array of uint64. Workaround for non multidimension TArrays", "Docs/Structs/FUint64Array/FUint64Array.html", ["uint64", "array"], "");
addToContainers_variable("", "", "Docs/Structs/FUint64Array/Variables/.html", [], "FUint64Array");
addToContainers_struct("FAttackAttributes", "Attributes common to anything that attacks", "Docs/Structs/FAttackAttributes/FAttackAttributes.html", ["attack", "attributes"], "");
addToContainers_function("FAttackAttributes", "", "Docs/Structs/FAttackAttributes/Functions/FAttackAttributes.html", ["attack", "attributes"], "FAttackAttributes");
addToContainers_variable("", "Projectile blueprint", "Docs/Structs/FAttackAttributes/Variables/.html", [], "FAttackAttributes");
addToContainers_variable("", "Whether to override the damage attributes of the projectile class. Useful if you want to reuse the same projectile for visual purposes but just want different damage values, or if you like having your damage values defined on your units instead of on your projectiles. Of course you can always create a seperate projectile and give it seperate damage values and never have to use this", "Docs/Structs/FAttackAttributes/Variables/_1.html", [], "FAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FAttackAttributes/Variables/_2.html", [], "FAttackAttributes");
addToContainers_variable("", "Amount of time between point when attack animation fires projectile to the time when the attack animation can start again. Lower = attack faster", "Docs/Structs/FAttackAttributes/Variables/_3.html", [], "FAttackAttributes");
addToContainers_variable("", "Attack range. Ignores Z axis - all range calculations are 2D", "Docs/Structs/FAttackAttributes/Variables/_4.html", [], "FAttackAttributes");
addToContainers_variable("", "Whether we can attack air units", "Docs/Structs/FAttackAttributes/Variables/_5.html", [], "FAttackAttributes");
addToContainers_variable("", "The types of selectables we are allowed to attack", "Docs/Structs/FAttackAttributes/Variables/_6.html", [], "FAttackAttributes");
addToContainers_variable("", "Acceptable target types as FNames", "Docs/Structs/FAttackAttributes/Variables/_7.html", [], "FAttackAttributes");
addToContainers_variable("", "Name of muzzle socket on mesh. The location projectile spawns at", "Docs/Structs/FAttackAttributes/Variables/_8.html", [], "FAttackAttributes");
addToContainers_variable("", "Particle effect to play at muzzle on attack. Optional", "Docs/Structs/FAttackAttributes/Variables/_9.html", [], "FAttackAttributes");
addToContainers_variable("", "Camera shake to play at muzzle location when firing. Optional", "Docs/Structs/FAttackAttributes/Variables/_10.html", [], "FAttackAttributes");
addToContainers_variable("", "Radius of MuzzleCameraShake if MuzzleCameraShake_BP is set", "Docs/Structs/FAttackAttributes/Variables/_11.html", [], "FAttackAttributes");
addToContainers_variable("", "Falloff of MuzzleCameraShake if MuzzleCameraShake_BP is set", "Docs/Structs/FAttackAttributes/Variables/_12.html", [], "FAttackAttributes");
addToContainers_variable("", "Sound to play when the unit is \'preparing\' its attack e.g. oblisk of light. To play this sound add the anim notify \'PlayAttackPreparationSound\' to anim montage. This sound is stopped if the attack animation stops.", "Docs/Structs/FAttackAttributes/Variables/_13.html", [], "FAttackAttributes");
addToContainers_variable("", "Sound to play when attack is made", "Docs/Structs/FAttackAttributes/Variables/_14.html", [], "FAttackAttributes");
addToContainers_variable("NumTempImpactDamageModifiers", "----------------------------------------------------------------------------------------", "Docs/Structs/FAttackAttributes/Variables/NumTempImpactDamageModifiers.html", ["num", "temp", "impact", "damage", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultImpactDamage", "What our damage is without any buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultImpactDamage.html", ["default", "impact", "damage"], "FAttackAttributes");
addToContainers_variable("NumTempAoEDamageModifiers", "", "Docs/Structs/FAttackAttributes/Variables/NumTempAoEDamageModifiers.html", ["num", "temp", "ao", "e", "damage", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultAoEDamage", "What AoE damage is without any buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultAoEDamage.html", ["default", "ao", "e", "damage"], "FAttackAttributes");
addToContainers_variable("NumTempAttackRateModifiers", "", "Docs/Structs/FAttackAttributes/Variables/NumTempAttackRateModifiers.html", ["num", "temp", "attack", "rate", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultAttackRate", "What our attack rate is without any temporary buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultAttackRate.html", ["default", "attack", "rate"], "FAttackAttributes");
addToContainers_variable("NumTempAttackRangeModifiers", "", "Docs/Structs/FAttackAttributes/Variables/NumTempAttackRangeModifiers.html", ["num", "temp", "attack", "range", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultAttackRange", "What our attack range is without any temporary buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultAttackRange.html", ["default", "attack", "range"], "FAttackAttributes");
addToContainers_variable("Default", "Static to prevent creating temporaries", "Docs/Structs/FAttackAttributes/Variables/Default.html", [], "FAttackAttributes");
addToContainers_variable("", "Bool to control editability of camera shake options", "Docs/Structs/FAttackAttributes/Variables/_15.html", [], "FAttackAttributes");
addToContainers_struct("FDamageMultipliers", "TMap that maps armour type to its damage multiplier", "Docs/Structs/FDamageMultipliers/FDamageMultipliers.html", ["damage", "multipliers"], "");
addToContainers_function("FDamageMultipliers", "", "Docs/Structs/FDamageMultipliers/Functions/FDamageMultipliers.html", ["damage", "multipliers"], "FDamageMultipliers");
addToContainers_variable("", "Multiplier for how much damage this damage type will do against this armour type before any upgrades are considered.", "Docs/Structs/FDamageMultipliers/Variables/.html", [], "FDamageMultipliers");
addToContainers_struct("FSelectionDecalInfo", "Get info about a decal that appears under a selectable when it is selected or hovered over or inside marquee box", "Docs/Structs/FSelectionDecalInfo/FSelectionDecalInfo.html", ["selection", "decal", "info"], "");
addToContainers_function("FSelectionDecalInfo", "Could be a good idea to check if (MouseoverParamValue == OriginalParamValue). If so then we don\'t actually need to create a material instance dynamic which could save some performance", "Docs/Structs/FSelectionDecalInfo/Functions/FSelectionDecalInfo.html", ["selection", "decal", "info"], "FSelectionDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FSelectionDecalInfo/Variables/.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "Optional scalar parameter in the material to adjust when either selected or hovered over", "Docs/Structs/FSelectionDecalInfo/Variables/_1.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "Whether the param name is valid or not to know whether to try changing value or not. Actually not needed, thought game crashed is param name was not valid and try to set it", "Docs/Structs/FSelectionDecalInfo/Variables/_2.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "The value to change this param value to when the selectable is hovered over with mouse or inside marquee selection box", "Docs/Structs/FSelectionDecalInfo/Variables/_3.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "The orginal value of the param so it can be restored when selectable is selected", "Docs/Structs/FSelectionDecalInfo/Variables/_4.html", [], "FSelectionDecalInfo");
addToContainers_struct("FDefeatConditionInfo", "Info about defeat conditions", "Docs/Structs/FDefeatConditionInfo/FDefeatConditionInfo.html", ["defeat", "condition", "info"], "");
addToContainers_variable("", "Name to display in UI", "Docs/Structs/FDefeatConditionInfo/Variables/.html", [], "FDefeatConditionInfo");
addToContainers_struct("FCPUDifficultyInfo", "CPU difficulty is mapped to one of these. Static information about a CPU player", "Docs/Structs/FCPUDifficultyInfo/FCPUDifficultyInfo.html", ["c", "p", "u", "difficulty", "info"], "");
addToContainers_function("FCPUDifficultyInfo", "", "Docs/Structs/FCPUDifficultyInfo/Functions/FCPUDifficultyInfo.html", ["c", "p", "u", "difficulty", "info"], "FCPUDifficultyInfo");
addToContainers_function("FCPUDifficultyInfo", "", "Docs/Structs/FCPUDifficultyInfo/Functions/FCPUDifficultyInfo_1.html", ["c", "p", "u", "difficulty", "info"], "FCPUDifficultyInfo");
addToContainers_variable("", "The name to display for this difficulty", "Docs/Structs/FCPUDifficultyInfo/Variables/.html", [], "FCPUDifficultyInfo");
addToContainers_variable("", "The icon to display in lobby", "Docs/Structs/FCPUDifficultyInfo/Variables/_1.html", [], "FCPUDifficultyInfo");
addToContainers_variable("", "AI controller to spawn for this difficulty", "Docs/Structs/FCPUDifficultyInfo/Variables/_2.html", [], "FCPUDifficultyInfo");
addToContainers_struct("FPlayerStartDistanceInfo", "Holds a uint8 and a float", "Docs/Structs/FPlayerStartDistanceInfo/FPlayerStartDistanceInfo.html", ["player", "start", "distance", "info"], "");
addToContainers_function("FPlayerStartDistanceInfo", "", "Docs/Structs/FPlayerStartDistanceInfo/Functions/FPlayerStartDistanceInfo.html", ["player", "start", "distance", "info"], "FPlayerStartDistanceInfo");
addToContainers_function("FPlayerStartDistanceInfo", "", "Docs/Structs/FPlayerStartDistanceInfo/Functions/FPlayerStartDistanceInfo_1.html", ["player", "start", "distance", "info"], "FPlayerStartDistanceInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerStartDistanceInfo/Variables/.html", [], "FPlayerStartDistanceInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerStartDistanceInfo/Variables/_1.html", [], "FPlayerStartDistanceInfo");
addToContainers_variable("Info2)", "Operator for sorting in array", "Docs/Structs/FPlayerStartDistanceInfo/Variables/Info2).html", [], "FPlayerStartDistanceInfo");
addToContainers_struct("FPlayerStartInfo", "Info about a player start", "Docs/Structs/FPlayerStartInfo/FPlayerStartInfo.html", ["player", "start", "info"], "");
addToContainers_function("FPlayerStartInfo", "", "Docs/Structs/FPlayerStartInfo/Functions/FPlayerStartInfo.html", ["player", "start", "info"], "FPlayerStartInfo");
addToContainers_function("FPlayerStartInfo", "", "Docs/Structs/FPlayerStartInfo/Functions/FPlayerStartInfo_1.html", ["player", "start", "info"], "FPlayerStartInfo");
addToContainers_function("FPlayerStartInfo", "A ctor for RTS level volume workaround TODO remove eventually", "Docs/Structs/FPlayerStartInfo/Functions/FPlayerStartInfo_2.html", ["player", "start", "info"], "FPlayerStartInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerStartInfo/Variables/.html", [], "FPlayerStartInfo");
addToContainers_variable("", "World location on map", "Docs/Structs/FPlayerStartInfo/Variables/_1.html", [], "FPlayerStartInfo");
addToContainers_variable("", "World rotation on map", "Docs/Structs/FPlayerStartInfo/Variables/_2.html", [], "FPlayerStartInfo");
addToContainers_variable("", "Sorted array of all other player starts in map. Sorted by distance with shortest distance at lower indices. Not correct until I remove my hardcoding method for doing player starts", "Docs/Structs/FPlayerStartInfo/Variables/_3.html", [], "FPlayerStartInfo");
addToContainers_struct("FMapInfo", "Info about a map", "Docs/Structs/FMapInfo/FMapInfo.html", ["map", "info"], "");
addToContainers_function("FMapInfo", "", "Docs/Structs/FMapInfo/Functions/FMapInfo.html", ["map", "info"], "FMapInfo");
addToContainers_variable("", "Name of map to appear in UI", "Docs/Structs/FMapInfo/Variables/.html", [], "FMapInfo");
addToContainers_variable("", "The name that should be passed into UGameplayStatics::OpenLevel", "Docs/Structs/FMapInfo/Variables/_1.html", [], "FMapInfo");
addToContainers_variable("", "To reduce bandwidth", "Docs/Structs/FMapInfo/Variables/_2.html", [], "FMapInfo");
addToContainers_variable("", "Image to appear in UI. Can be left blank in which case an image generated by the level volume will be used", "Docs/Structs/FMapInfo/Variables/_3.html", [], "FMapInfo");
addToContainers_variable("", "Description of map", "Docs/Structs/FMapInfo/Variables/_4.html", [], "FMapInfo");
addToContainers_variable("", "Maximum amount of players allowed for map. Not actually enforced anywhere", "Docs/Structs/FMapInfo/Variables/_5.html", [], "FMapInfo");
addToContainers_variable("", "The bounds of the level volume. This is used later to get the correct screen location of player starts placed overtop of map image. Note I don\'t think this is actually axis aligned. I\'m not even 100% sure what axis aligned means but FBoxSphereBounds\'s description says it\'s axis aligned even though I have not done that", "Docs/Structs/FMapInfo/Variables/_6.html", [], "FMapInfo");
addToContainers_variable("", "", "Docs/Structs/FMapInfo/Variables/_7.html", [], "FMapInfo");
addToContainers_variable("", "The texture to use as the minimap for this map. This will be null until map is actually loaded meaning it will not be able to be referenced in lobby", "Docs/Structs/FMapInfo/Variables/_8.html", [], "FMapInfo");
addToContainers_variable("", "Array of each player starts transform", "Docs/Structs/FMapInfo/Variables/_9.html", [], "FMapInfo");
addToContainers_variable("", "This must be set by user. This is a workaround for not being able to modify the game instance blueprint while editing the level volume. Eventually I would like to get rid of this variable. Contains all the data about the level such as its bounds, player start locations and minimap texture.", "Docs/Structs/FMapInfo/Variables/_10.html", [], "FMapInfo");
addToContainers_struct("FResourceInfo", "Info about a resource like minerals or vespene gas in SCII", "Docs/Structs/FResourceInfo/FResourceInfo.html", ["resource", "info"], "");
addToContainers_function("FResourceInfo", "", "Docs/Structs/FResourceInfo/Functions/FResourceInfo.html", ["resource", "info"], "FResourceInfo");
addToContainers_variable("", "Image to appear on HUD. Can be overridden on a per-faction basis", "Docs/Structs/FResourceInfo/Variables/.html", [], "FResourceInfo");
addToContainers_struct("FStartingResourceConfig", "Holds amounts of resources to start match with", "Docs/Structs/FStartingResourceConfig/FStartingResourceConfig.html", ["starting", "resource", "config"], "");
addToContainers_function("FStartingResourceConfig", "", "Docs/Structs/FStartingResourceConfig/Functions/FStartingResourceConfig.html", ["starting", "resource", "config"], "FStartingResourceConfig");
addToContainers_function("FStartingResourceConfig", "Ctor for creating one from the development settings", "Docs/Structs/FStartingResourceConfig/Functions/FStartingResourceConfig_1.html", ["starting", "resource", "config"], "FStartingResourceConfig");
addToContainers_variable("", "The name to appear in UI", "Docs/Structs/FStartingResourceConfig/Variables/.html", [], "FStartingResourceConfig");
addToContainers_variable("", "Maps resource type to amount to start match with", "Docs/Structs/FStartingResourceConfig/Variables/_1.html", [], "FStartingResourceConfig");
addToContainers_struct("FPlayerInfo", "Information about a player for starting a match such as team, faction etc", "Docs/Structs/FPlayerInfo/FPlayerInfo.html", ["player", "info"], "");
addToContainers_function("FPlayerInfo", "Human player constructor", "Docs/Structs/FPlayerInfo/Functions/FPlayerInfo.html", ["player", "info"], "FPlayerInfo");
addToContainers_function("FPlayerInfo", "CPU player constructor", "Docs/Structs/FPlayerInfo/Functions/FPlayerInfo_1.html", ["player", "info"], "FPlayerInfo");
addToContainers_function("FPlayerInfo", "", "Docs/Structs/FPlayerInfo/Functions/FPlayerInfo_2.html", ["player", "info"], "FPlayerInfo");
addToContainers_variable("", "Either human player or CPU", "Docs/Structs/FPlayerInfo/Variables/.html", [], "FPlayerInfo");
addToContainers_variable("", "Only valid for human players. Will be null for CPU players", "Docs/Structs/FPlayerInfo/Variables/_1.html", [], "FPlayerInfo");
addToContainers_variable("", "CPU difficulty if a CPU player. Irrelevant if CPU player in this slot", "Docs/Structs/FPlayerInfo/Variables/_2.html", [], "FPlayerInfo");
addToContainers_variable("", "If CPU player, their player state once it has been spawned", "Docs/Structs/FPlayerInfo/Variables/_3.html", [], "FPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerInfo/Variables/_4.html", [], "FPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerInfo/Variables/_5.html", [], "FPlayerInfo");
addToContainers_variable("", "-1 or -2 means unassigned", "Docs/Structs/FPlayerInfo/Variables/_6.html", [], "FPlayerInfo");
addToContainers_struct("FMatchInfo", "All the info required by game mode to start a match", "Docs/Structs/FMatchInfo/FMatchInfo.html", ["match", "info"], "");
addToContainers_variable("", "Number of teams in match", "Docs/Structs/FMatchInfo/Variables/.html", [], "FMatchInfo");
addToContainers_variable("", "Online, LAN, offline etc", "Docs/Structs/FMatchInfo/Variables/_1.html", [], "FMatchInfo");
addToContainers_variable("", "Display name of map, not file name", "Docs/Structs/FMatchInfo/Variables/_2.html", [], "FMatchInfo");
addToContainers_variable("", "Unique ID for the map", "Docs/Structs/FMatchInfo/Variables/_3.html", [], "FMatchInfo");
addToContainers_variable("", "The name of the map that can be passed into UGameplayStatics::OpenLevel e.g. Entry, Minimal_Default, etc", "Docs/Structs/FMatchInfo/Variables/_4.html", [], "FMatchInfo");
addToContainers_variable("", "The defeat condition", "Docs/Structs/FMatchInfo/Variables/_5.html", [], "FMatchInfo");
addToContainers_variable("", "Resources players start match with. How much this actually is is defined in game instance", "Docs/Structs/FMatchInfo/Variables/_6.html", [], "FMatchInfo");
addToContainers_variable("", "All players and their info", "Docs/Structs/FMatchInfo/Variables/_7.html", [], "FMatchInfo");
addToContainers_struct("FStaticBuffOrDebuffInfo", "Info struct for a buff/debuff that never expires on its own and does not do anything over time. @See CommonEnums.h EImmortalBuffAndDebuffType Only some of this struct is exposed to blueprints. 2 functions will need to be implemented in C++ Does not hold any state", "Docs/Structs/FStaticBuffOrDebuffInfo/FStaticBuffOrDebuffInfo.html", ["static", "buff", "or", "debuff", "info"], "");
addToContainers_function("FStaticBuffOrDebuffInfo", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/FStaticBuffOrDebuffInfo.html", ["static", "buff", "or", "debuff", "info"], "FStaticBuffOrDebuffInfo");
addToContainers_function("FStaticBuffOrDebuffInfo", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/FStaticBuffOrDebuffInfo_1.html", ["static", "buff", "or", "debuff", "info"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("SpecificType", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/SpecificType.html", ["specific", "type"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("TryApplyToPtr", "Function pointers that define the behavior for certain events", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/TryApplyToPtr.html", ["try", "apply", "to", "ptr"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("OnRemovedPtr", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/OnRemovedPtr.html", ["on", "removed", "ptr"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "Whether buff or debuff. May add logic that distinguishes between the two so adding this variable", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "The subtype of this buff/debuff", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_1.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "The name of this buff/debuff", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_2.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "The image that represents this buff/debuff", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_3.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "Some particles. This isn\'t referenced anywhere in code. These are just here in case you want to attach particles to target and want to avoid writing hardcoded asset paths", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_4.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "Where on the selectable the particles should try attach to", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_5.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_struct("FTickableBuffOrDebuffInfo", "Info that defines the behavior of a buff/debuff that requires one or both of the following: - times out by itself e.g. a 10 sec speed increase - logic that executes at intervals e.g. a DoT that does 20 damage every 2 sec Only some of this struct is exposed to blueprints. 3 functions will need to be implemented in C++ Does not hold any state", "Docs/Structs/FTickableBuffOrDebuffInfo/FTickableBuffOrDebuffInfo.html", ["tickable", "buff", "or", "debuff", "info"], "");
addToContainers_function("FTickableBuffOrDebuffInfo", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/FTickableBuffOrDebuffInfo.html", ["tickable", "buff", "or", "debuff", "info"], "FTickableBuffOrDebuffInfo");
addToContainers_function("FTickableBuffOrDebuffInfo", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/FTickableBuffOrDebuffInfo_1.html", ["tickable", "buff", "or", "debuff", "info"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The amount of time between ticks. NumberOfTicks * TickInterval = total duration of buff/debuff.", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "How ticks this buff/debuff will execute before it will fall off. Use 0 for buff/debuff that never expires. If you want a buff/debuff that never expires and doesn\'t have any tick logic then you can use the other buff/debuff struct instead If you want a buff that say increases move speed for 10sec then set NumberOfTicks to 1 and TickInterval to 10. Keeping this as 1 byte since might have to send this over the wire", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_1.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("SpecificType", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/SpecificType.html", ["specific", "type"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("TryApplyToPtr", "Function pointers that define the behavior for certain events", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/TryApplyToPtr.html", ["try", "apply", "to", "ptr"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("DoTickPtr", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/DoTickPtr.html", ["do", "tick", "ptr"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("OnRemovedPtr", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/OnRemovedPtr.html", ["on", "removed", "ptr"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "Whether buff or debuff. May add logic that distinguishes between the two so adding this variable", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_2.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The subtype of this buff/debuff", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_3.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The name of this buff/debuff", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_4.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The image that represents this buff/debuff", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_5.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "Some particles. This isn\'t referenced anywhere in code. These are just here in case you want to attach particles to target and want to avoid writing hardcoded asset paths in C++ such as inside the TryApplyTo function.", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_6.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "Where on the selectable the particles should try attach to", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_7.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_struct("FBuffOrDebuffSubTypeInfo", "", "Docs/Structs/FBuffOrDebuffSubTypeInfo/FBuffOrDebuffSubTypeInfo.html", ["buff", "or", "debuff", "sub", "type", "info"], "");
addToContainers_function("FBuffOrDebuffSubTypeInfo", "", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Functions/FBuffOrDebuffSubTypeInfo.html", ["buff", "or", "debuff", "sub", "type", "info"], "FBuffOrDebuffSubTypeInfo");
addToContainers_variable("", "The texture to set on the border widget for buffs/debuffs of this subtype", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Variables/.html", [], "FBuffOrDebuffSubTypeInfo");
addToContainers_variable("", "The color to set on the border widget for buffs/debuffs of this subtype", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Variables/_1.html", [], "FBuffOrDebuffSubTypeInfo");
addToContainers_struct("FSelectableResourceColorInfo", "FSelectableResourceInfo is already taken so chose a too sepcific name", "Docs/Structs/FSelectableResourceColorInfo/FSelectableResourceColorInfo.html", ["selectable", "resource", "color", "info"], "");
addToContainers_function("FSelectableResourceColorInfo", "", "Docs/Structs/FSelectableResourceColorInfo/Functions/FSelectableResourceColorInfo.html", ["selectable", "resource", "color", "info"], "FSelectableResourceColorInfo");
addToContainers_variable("", "The param we use for UProgressBar::SetFillColorAndOpacity", "Docs/Structs/FSelectableResourceColorInfo/Variables/.html", [], "FSelectableResourceColorInfo");
addToContainers_struct("FSelectableIdentifier", "This struct contains enough info to derive which selectable we are talking about. It is used to be sent over the wire", "Docs/Structs/FSelectableIdentifier/FSelectableIdentifier.html", ["selectable", "identifier"], "");
addToContainers_function("FSelectableIdentifier", "Default ctor never to be called", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_1.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_2.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "This ctor is for removing the outcome data when we don\'t need to send it over the wire", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_3.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "I also use this struct at times to store a player state ID even though it would be more efficient just to send a single uint8. This is the ctor for player states", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_4.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_variable("", "The selectable ID of the selectable that was hit", "Docs/Structs/FSelectableIdentifier/Variables/.html", [], "FSelectableIdentifier");
addToContainers_variable("", "The owner ID of the hit selectable", "Docs/Structs/FSelectableIdentifier/Variables/_1.html", [], "FSelectableIdentifier");
addToContainers_struct("FAbilityHitWithOutcome", "This struct is info about a hit actor for an ability + the result of the it", "Docs/Structs/FAbilityHitWithOutcome/FAbilityHitWithOutcome.html", ["ability", "hit", "with", "outcome"], "");
addToContainers_function("FAbilityHitWithOutcome", "Default ctor never to be called", "Docs/Structs/FAbilityHitWithOutcome/Functions/FAbilityHitWithOutcome.html", ["ability", "hit", "with", "outcome"], "FAbilityHitWithOutcome");
addToContainers_function("FAbilityHitWithOutcome", "Constructor @param InHitSelectablesID - selectable ID for selectable that was hit @param InHitSelectablesOwnerID - ID of the selectables owner @param InOutcome - the result of the ability", "Docs/Structs/FAbilityHitWithOutcome/Functions/FAbilityHitWithOutcome_1.html", ["ability", "hit", "with", "outcome"], "FAbilityHitWithOutcome");
addToContainers_variable("", "This is the custom result of the ability casted to a uint8. e.g. Success, Faliure, TargetAbove30PercentCase, etc. If the ability only ever has one outcome then this variable is irrelevant", "Docs/Structs/FAbilityHitWithOutcome/Variables/.html", [], "FAbilityHitWithOutcome");
addToContainers_struct("FHitActorAndOutcome", "This is just an FAbilityHitWithOutcome but we actually have an actual AActor pointer to \' the actor as opposed to just 2 uint8", "Docs/Structs/FHitActorAndOutcome/FHitActorAndOutcome.html", ["hit", "actor", "and", "outcome"], "");
addToContainers_function("FHitActorAndOutcome", "Never call this ctor", "Docs/Structs/FHitActorAndOutcome/Functions/FHitActorAndOutcome.html", ["hit", "actor", "and", "outcome"], "FHitActorAndOutcome");
addToContainers_function("FHitActorAndOutcome", "", "Docs/Structs/FHitActorAndOutcome/Functions/FHitActorAndOutcome_1.html", ["hit", "actor", "and", "outcome"], "FHitActorAndOutcome");
addToContainers_variable("HitActor", "", "Docs/Structs/FHitActorAndOutcome/Variables/HitActor.html", ["hit", "actor"], "FHitActorAndOutcome");
addToContainers_variable("Outcome", "", "Docs/Structs/FHitActorAndOutcome/Variables/Outcome.html", [], "FHitActorAndOutcome");
addToContainers_struct("FHousingResourceState", "Holds how much of a housing resource we are consuming and how much we are providing", "Docs/Structs/FHousingResourceState/FHousingResourceState.html", ["housing", "resource", "state"], "");
addToContainers_function("FHousingResourceState", "", "Docs/Structs/FHousingResourceState/Functions/FHousingResourceState.html", ["housing", "resource", "state"], "FHousingResourceState");
addToContainers_function("FHousingResourceState", "@param ResourceTypeAsInt - EHousingResourceType converted using Statics::HousingResourceTypeToArrayIndex", "Docs/Structs/FHousingResourceState/Functions/FHousingResourceState_1.html", ["housing", "resource", "state"], "FHousingResourceState");
addToContainers_variable("AmountConsumed", "Amount we are consuming", "Docs/Structs/FHousingResourceState/Variables/AmountConsumed.html", ["amount", "consumed"], "FHousingResourceState");
addToContainers_variable("AmountProvidedClamped", "Amount we are providing. Clamped to limits", "Docs/Structs/FHousingResourceState/Variables/AmountProvidedClamped.html", ["amount", "provided", "clamped"], "FHousingResourceState");
addToContainers_variable("AmountProvided", "Amount we are providing disregarding any limits", "Docs/Structs/FHousingResourceState/Variables/AmountProvided.html", ["amount", "provided"], "FHousingResourceState");
addToContainers_struct("FInventoryItemID", "Wrapper for the integer we use to identify inventory items. Every item that appears in the world needs one of these assigned to it. This includes items that start in the world at the start of the match. ----------------------------------------------------------------------------------------------- Good criteria for adjusting this value: If you anticipate that more than MAX number of items will ever be spawned (not just exist in the world at the same time but actually spawned throughout the lifetime of your match) then you may want to increase this. Tbh I should probably make this a uint32 by default. -----------------------------------------------------------------------------------------------", "Docs/Structs/FInventoryItemID/FInventoryItemID.html", ["inventory", "item", "i", "d"], "");
addToContainers_function("FInventoryItemID", "", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_function("FInventoryItemID", "", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID_1.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_function("FInventoryItemID", "Pre increment", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID_2.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_function("FInventoryItemID", "Post increment", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID_3.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_variable("", "", "Docs/Structs/FInventoryItemID/Variables/.html", [], "FInventoryItemID");
addToContainers_struct("FMapID", "Wrapper for a unique ID for maps. ---------------------------------------------------------------------------------------------- If your map pool is at the limit and you need more maps then increase this ----------------------------------------------------------------------------------------------", "Docs/Structs/FMapID/FMapID.html", ["map", "i", "d"], "");
addToContainers_function("FMapID", "", "Docs/Structs/FMapID/Functions/FMapID.html", ["map", "i", "d"], "FMapID");
addToContainers_function("FMapID", "", "Docs/Structs/FMapID/Functions/FMapID_1.html", ["map", "i", "d"], "FMapID");
addToContainers_variable("", "", "Docs/Structs/FMapID/Variables/.html", [], "FMapID");
addToContainers_struct("FSelectableRankInt", "Wrapper for the level or rank of a selectable. ---------------------------------------------------------------------------------------------- If selectables can reach levels higher than MAX then increase this. ----------------------------------------------------------------------------------------------", "Docs/Structs/FSelectableRankInt/FSelectableRankInt.html", ["selectable", "rank", "int"], "");
addToContainers_function("FSelectableRankInt", "", "Docs/Structs/FSelectableRankInt/Functions/FSelectableRankInt.html", ["selectable", "rank", "int"], "FSelectableRankInt");
addToContainers_function("FSelectableRankInt", "", "Docs/Structs/FSelectableRankInt/Functions/FSelectableRankInt_1.html", ["selectable", "rank", "int"], "FSelectableRankInt");
addToContainers_variable("", "", "Docs/Structs/FSelectableRankInt/Variables/.html", [], "FSelectableRankInt");
addToContainers_struct("FBasicDamageInfo", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FBasicDamageInfo/FBasicDamageInfo.html", ["basic", "damage", "info"], "");
addToContainers_function("FBasicDamageInfo", "", "Docs/Structs/FBasicDamageInfo/Functions/FBasicDamageInfo.html", ["basic", "damage", "info"], "FBasicDamageInfo");
addToContainers_function("FBasicDamageInfo", "", "Docs/Structs/FBasicDamageInfo/Functions/FBasicDamageInfo_1.html", ["basic", "damage", "info"], "FBasicDamageInfo");
addToContainers_function("FBasicDamageInfo", "", "Docs/Structs/FBasicDamageInfo/Functions/FBasicDamageInfo_2.html", ["basic", "damage", "info"], "FBasicDamageInfo");
addToContainers_variable("", "How much damage to deal to target", "Docs/Structs/FBasicDamageInfo/Variables/.html", [], "FBasicDamageInfo");
addToContainers_variable("", "Type of damage to deal", "Docs/Structs/FBasicDamageInfo/Variables/_1.html", [], "FBasicDamageInfo");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Structs/FBasicDamageInfo/Variables/_2.html", [], "FBasicDamageInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDamageInfo/Variables/_3.html", [], "FBasicDamageInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDamageInfo/Variables/_4.html", [], "FBasicDamageInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDamageInfo/Variables/_5.html", [], "FBasicDamageInfo");
addToContainers_class("Workarounds", "A file that contains copies of already created functions", "Docs/Classes/Workarounds/Workarounds.html", [], "");
addToContainers_struct("FFloatAttributeBase", "============================================================================================== A single floating point attribute. Can be modified and will always return to its exact float value eventually i.e. it is not suspectable to floating point errors in the long run. Can be modified by either adding a flat value e.g. add 20 to attack range, or using a multiplier e.g. increase attack range by 10%. Multipliers can be applied in either additive or multiplicative ways e.g. attack range is 500 We get a buff that increases it by 10%. We now have 550 attack range We get another buff that increases attack range by 50%. We can choose to either apply it additively so we now have a 60% boost and have 800 attack range or it can be done multiplicatively and the boost is now 66% and attack range is 830. Addition bonuses are always applied first then the multiplier is applied. Allowing it the other way around I think will require adding more variables. ==============================================================================================", "Docs/Structs/FFloatAttributeBase/FFloatAttributeBase.html", ["float", "attribute", "base"], "");
addToContainers_function("FFloatAttributeBase", "", "Docs/Structs/FFloatAttributeBase/Functions/FFloatAttributeBase.html", ["float", "attribute", "base"], "FFloatAttributeBase");
addToContainers_function("FFloatAttributeBase", "", "Docs/Structs/FFloatAttributeBase/Functions/FFloatAttributeBase_1.html", ["float", "attribute", "base"], "FFloatAttributeBase");
addToContainers_variable("", "The value of Value that is considered the base value", "Docs/Structs/FFloatAttributeBase/Variables/.html", [], "FFloatAttributeBase");
addToContainers_variable("", "Don\'t think this is needed if we disallow additive multiplier adjustments.", "Docs/Structs/FFloatAttributeBase/Variables/_1.html", [], "FFloatAttributeBase");
addToContainers_variable("", "If (NumTempValueModifiers == 0) then this will equal DefaultValue", "Docs/Structs/FFloatAttributeBase/Variables/_2.html", [], "FFloatAttributeBase");
addToContainers_variable("", "If (NumTempMultiplierModifiers == 0) then this will equal DefaultMultiplier", "Docs/Structs/FFloatAttributeBase/Variables/_3.html", [], "FFloatAttributeBase");
addToContainers_variable("NumTempValueModifiers", "How many \"temporary\" modifiers are applied to the attribute", "Docs/Structs/FFloatAttributeBase/Variables/NumTempValueModifiers.html", ["num", "temp", "value", "modifiers"], "FFloatAttributeBase");
addToContainers_variable("NumTempMultiplierModifiers", "", "Docs/Structs/FFloatAttributeBase/Variables/NumTempMultiplierModifiers.html", ["num", "temp", "multiplier", "modifiers"], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_4.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_5.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_6.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_7.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_8.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_9.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_10.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_11.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_12.html", [], "FFloatAttributeBase");
addToContainers_struct("FAttribute_AttackSpeed", "", "Docs/Structs/FAttribute_AttackSpeed/FAttribute_AttackSpeed.html", ["attribute_", "attack", "speed"], "");
addToContainers_function("FAttribute_AttackSpeed", "", "Docs/Structs/FAttribute_AttackSpeed/Functions/FAttribute_AttackSpeed.html", ["attribute_", "attack", "speed"], "FAttribute_AttackSpeed");
addToContainers_variable("", "Amount of time between point when attack animation fires projectile to the time when the attack animation can start again. Lower = attack faster.", "Docs/Structs/FAttribute_AttackSpeed/Variables/.html", [], "FAttribute_AttackSpeed");
addToContainers_struct("FAttribute_AttackRange", "", "Docs/Structs/FAttribute_AttackRange/FAttribute_AttackRange.html", ["attribute_", "attack", "range"], "");
addToContainers_function("FAttribute_AttackRange", "", "Docs/Structs/FAttribute_AttackRange/Functions/FAttribute_AttackRange.html", ["attribute_", "attack", "range"], "FAttribute_AttackRange");
addToContainers_variable("", "The variable exposed to editor that users can edit", "Docs/Structs/FAttribute_AttackRange/Variables/.html", [], "FAttribute_AttackRange");
addToContainers_struct("FAttribute_Building_SightRange", "Sight range for a building", "Docs/Structs/FAttribute_Building_SightRange/FAttribute_Building_SightRange.html", ["attribute_", "building_", "sight", "range"], "");
addToContainers_function("FAttribute_Building_SightRange", "Might want a contributor variable here", "Docs/Structs/FAttribute_Building_SightRange/Functions/FAttribute_Building_SightRange.html", ["attribute_", "building_", "sight", "range"], "FAttribute_Building_SightRange");
addToContainers_variable("", "Fog of war reveal radius", "Docs/Structs/FAttribute_Building_SightRange/Variables/.html", [], "FAttribute_Building_SightRange");
addToContainers_variable("", "", "Docs/Structs/FAttribute_Building_SightRange/Variables/_1.html", [], "FAttribute_Building_SightRange");
addToContainers_struct("FAttribute_Building_StealthRevealRange", "", "Docs/Structs/FAttribute_Building_StealthRevealRange/FAttribute_Building_StealthRevealRange.html", ["attribute_", "building_", "stealth", "reveal", "range"], "");
addToContainers_function("FAttribute_Building_StealthRevealRange", "Might want a contributor variable here", "Docs/Structs/FAttribute_Building_StealthRevealRange/Functions/FAttribute_Building_StealthRevealRange.html", ["attribute_", "building_", "stealth", "reveal", "range"], "FAttribute_Building_StealthRevealRange");
addToContainers_variable("", "Range that selectable can reveal other selectables in stealth mode", "Docs/Structs/FAttribute_Building_StealthRevealRange/Variables/.html", [], "FAttribute_Building_StealthRevealRange");
addToContainers_variable("", "", "Docs/Structs/FAttribute_Building_StealthRevealRange/Variables/_1.html", [], "FAttribute_Building_StealthRevealRange");
addToContainers_struct("FAttribute_Unit_SightRange", "Sight range for a unit", "Docs/Structs/FAttribute_Unit_SightRange/FAttribute_Unit_SightRange.html", ["attribute_", "unit_", "sight", "range"], "");
addToContainers_function("FAttribute_Unit_SightRange", "", "Docs/Structs/FAttribute_Unit_SightRange/Functions/FAttribute_Unit_SightRange.html", ["attribute_", "unit_", "sight", "range"], "FAttribute_Unit_SightRange");
addToContainers_variable("", "Fog of war reveal radius", "Docs/Structs/FAttribute_Unit_SightRange/Variables/.html", [], "FAttribute_Unit_SightRange");
addToContainers_struct("FAttribute_Unit_StealthRevealRange", "Stealth reveal range for a unit", "Docs/Structs/FAttribute_Unit_StealthRevealRange/FAttribute_Unit_StealthRevealRange.html", ["attribute_", "unit_", "stealth", "reveal", "range"], "");
addToContainers_function("FAttribute_Unit_StealthRevealRange", "", "Docs/Structs/FAttribute_Unit_StealthRevealRange/Functions/FAttribute_Unit_StealthRevealRange.html", ["attribute_", "unit_", "stealth", "reveal", "range"], "FAttribute_Unit_StealthRevealRange");
addToContainers_variable("", "Range that selectable can reveal other selectables in stealth mode", "Docs/Structs/FAttribute_Unit_StealthRevealRange/Variables/.html", [], "FAttribute_Unit_StealthRevealRange");
addToContainers_struct("FAttribute_Defense", "Value = how much to subtract from each instance of incoming damage Multiplier = how much to multiply incoming damage Which happens first can be decided by enum value.", "Docs/Structs/FAttribute_Defense/FAttribute_Defense.html", ["attribute_", "defense"], "");
addToContainers_function("FAttribute_Defense", "", "Docs/Structs/FAttribute_Defense/Functions/FAttribute_Defense.html", ["attribute_", "defense"], "FAttribute_Defense");
addToContainers_variable("ReductionRule", "", "Docs/Structs/FAttribute_Defense/Variables/ReductionRule.html", ["reduction", "rule"], "FAttribute_Defense");
addToContainers_struct("FAttribute_ExperienceBounty", "", "Docs/Structs/FAttribute_ExperienceBounty/FAttribute_ExperienceBounty.html", ["attribute_", "experience", "bounty"], "");
addToContainers_function("FAttribute_ExperienceBounty", "", "Docs/Structs/FAttribute_ExperienceBounty/Functions/FAttribute_ExperienceBounty.html", ["attribute_", "experience", "bounty"], "FAttribute_ExperienceBounty");
addToContainers_variable("", "How much base experience is awarded to an enemy when they destroy this", "Docs/Structs/FAttribute_ExperienceBounty/Variables/.html", [], "FAttribute_ExperienceBounty");
addToContainers_struct("FPIEPlayerInfo", "Info about a player for PIE/standalone", "Docs/Structs/FPIEPlayerInfo/FPIEPlayerInfo.html", ["p", "i", "e", "player", "info"], "");
addToContainers_function("FPIEPlayerInfo", "", "Docs/Structs/FPIEPlayerInfo/Functions/FPIEPlayerInfo.html", ["p", "i", "e", "player", "info"], "FPIEPlayerInfo");
addToContainers_function("FPIEPlayerInfo", "", "Docs/Structs/FPIEPlayerInfo/Functions/FPIEPlayerInfo_1.html", ["p", "i", "e", "player", "info"], "FPIEPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPIEPlayerInfo/Variables/.html", [], "FPIEPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPIEPlayerInfo/Variables/_1.html", [], "FPIEPlayerInfo");
addToContainers_variable("", "Use -1 to assign to no starting spot", "Docs/Structs/FPIEPlayerInfo/Variables/_2.html", [], "FPIEPlayerInfo");
addToContainers_struct("FPIECPUPlayerInfo", "Info about CPU player for PIE", "Docs/Structs/FPIECPUPlayerInfo/FPIECPUPlayerInfo.html", ["p", "i", "e", "c", "p", "u", "player", "info"], "");
addToContainers_function("FPIECPUPlayerInfo", "", "Docs/Structs/FPIECPUPlayerInfo/Functions/FPIECPUPlayerInfo.html", ["p", "i", "e", "c", "p", "u", "player", "info"], "FPIECPUPlayerInfo");
addToContainers_function("FPIECPUPlayerInfo", "", "Docs/Structs/FPIECPUPlayerInfo/Functions/FPIECPUPlayerInfo_1.html", ["p", "i", "e", "c", "p", "u", "player", "info"], "FPIECPUPlayerInfo");
addToContainers_variable("", "Difficulty of CPU player", "Docs/Structs/FPIECPUPlayerInfo/Variables/.html", [], "FPIECPUPlayerInfo");
addToContainers_class("GarrisonStructs", "", "Docs/Classes/GarrisonStructs/GarrisonStructs.html", ["garrison", "structs"], "");
addToContainers_function("GarrisonStructs", "", "Docs/Classes/GarrisonStructs/Functions/GarrisonStructs.html", ["garrison", "structs"], "GarrisonStructs");
addToContainers_struct("FTemporaryFogRevealEffectInfo", "A temporary fog reveal effect reveals the fog of war around a location for a certain amount of time. They can optionally reveal stealthed selectables too. Examples of these effects: - in C&C Generals: USA command center scan - in SCII: Terran\'s command center scan They may not happen instantly but after a small delay. The reason for this is that suddenly revealing a location might look bad because replication would usually be turned off for actors in fog. Instead we \'prepare\' the area we\'re about to reveal by turning on replication for the actors in the area first and then revealing the location. Note: I have not actually implemented any of this logic yet. It will probably come later when I choose to implement it for units/buildings etc. FIXME: implement this \'pre revealing\' effect on this effect if I end up implementing it for units/buildings etc", "Docs/Structs/FTemporaryFogRevealEffectInfo/FTemporaryFogRevealEffectInfo.html", ["temporary", "fog", "reveal", "effect", "info"], "");
addToContainers_function("FTemporaryFogRevealEffectInfo", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/FTemporaryFogRevealEffectInfo.html", ["temporary", "fog", "reveal", "effect", "info"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("FTemporaryFogRevealEffectInfo", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/FTemporaryFogRevealEffectInfo_1.html", ["temporary", "fog", "reveal", "effect", "info"], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "How long this effect lasts for", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "The curve that defines how fast fog is revealed. This should be normalized on each axis. X axis = time (normalized to range [0, 1]) Y axis = % of fog revealed (normalized to range [0, 1]). So 1 implies the full amount of fog is being revealed.", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_1.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "How fast fog is revealed measured in unreal units per second. Only relevant if not using a curve. 0 is code for \'all fog is revealed instantly\'", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_2.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "Radius of circle of fog that is revealed", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_3.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "The radius that stealth mode units are revealed 0 = will not reveal stealth mode units", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_4.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("TimeExisted", "[State variable] How long this effect has been running for", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/TimeExisted.html", ["time", "existed"], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("Location", "[State variable] Location where the effect was spawned. 2D because fog manager does not care about height", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/Location.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_5.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_struct("FTemporaryFogRevealEffectsArray", "Array of FTemporaryFogRevealEffectInfo", "Docs/Structs/FTemporaryFogRevealEffectsArray/FTemporaryFogRevealEffectsArray.html", ["temporary", "fog", "reveal", "effects", "array"], "");
addToContainers_function("FTemporaryFogRevealEffectsArray", "", "Docs/Structs/FTemporaryFogRevealEffectsArray/Functions/FTemporaryFogRevealEffectsArray.html", ["temporary", "fog", "reveal", "effects", "array"], "FTemporaryFogRevealEffectsArray");
addToContainers_function("FTemporaryFogRevealEffectsArray", "", "Docs/Structs/FTemporaryFogRevealEffectsArray/Functions/FTemporaryFogRevealEffectsArray_1.html", ["temporary", "fog", "reveal", "effects", "array"], "FTemporaryFogRevealEffectsArray");
addToContainers_variable("Array", "", "Docs/Structs/FTemporaryFogRevealEffectsArray/Variables/Array.html", [], "FTemporaryFogRevealEffectsArray");
addToContainers_struct("FSpawnDecalInfo", "Info to spawn a decal at a location for a period of time. Examples of use: launching a nuke and want the area where it is landing to have a decal there", "Docs/Structs/FSpawnDecalInfo/FSpawnDecalInfo.html", ["spawn", "decal", "info"], "");
addToContainers_function("FSpawnDecalInfo", "", "Docs/Structs/FSpawnDecalInfo/Functions/FSpawnDecalInfo.html", ["spawn", "decal", "info"], "FSpawnDecalInfo");
addToContainers_variable("", "--------------------------------------------------------", "Docs/Structs/FSpawnDecalInfo/Variables/.html", [], "FSpawnDecalInfo");
addToContainers_variable("", "Remember: Z axis value (which is actually X here after rotation happens) might significantly affect performance. High values means the decal draws up/down hills but will cost more in performance. If your landscape is completely flat then this can be something like 1", "Docs/Structs/FSpawnDecalInfo/Variables/_1.html", [], "FSpawnDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FSpawnDecalInfo/Variables/_2.html", [], "FSpawnDecalInfo");
addToContainers_variable("", "How long the decal lasts before disappearing", "Docs/Structs/FSpawnDecalInfo/Variables/_3.html", [], "FSpawnDecalInfo");
addToContainers_struct("FKeyInfo", "Information about a single input key for example on the keymoard or mouse", "Docs/Structs/FKeyInfo/FKeyInfo.html", ["key", "info"], "");
addToContainers_function("FKeyInfo", "", "Docs/Structs/FKeyInfo/Functions/FKeyInfo.html", ["key", "info"], "FKeyInfo");
addToContainers_function("FKeyInfo", "", "Docs/Structs/FKeyInfo/Functions/FKeyInfo_1.html", ["key", "info"], "FKeyInfo");
addToContainers_function("FKeyInfo", "", "Docs/Structs/FKeyInfo/Functions/FKeyInfo_2.html", ["key", "info"], "FKeyInfo");
addToContainers_variable("", "The text to display on UI to represent this key", "Docs/Structs/FKeyInfo/Variables/.html", [], "FKeyInfo");
addToContainers_variable("", "Whether to draw text overtop of the image. @See URTSGameInstance::KeyMappings_bForceUsePartialBrushes because it can override this", "Docs/Structs/FKeyInfo/Variables/_1.html", [], "FKeyInfo");
addToContainers_variable("", "The image to display on the UI to represent this button", "Docs/Structs/FKeyInfo/Variables/_2.html", [], "FKeyInfo");
addToContainers_variable("", "The image to display on the UI to represent this key. This brush will have text drawn overtop of it", "Docs/Structs/FKeyInfo/Variables/_3.html", [], "FKeyInfo");
addToContainers_variable("", "The text to draw overtop of PartialBrush", "Docs/Structs/FKeyInfo/Variables/_4.html", [], "FKeyInfo");
addToContainers_variable("", "This is here mainly so you can change the size of the font because like showing \"Q\" or \"Backspace\" there\'sa big difference in length between the two", "Docs/Structs/FKeyInfo/Variables/_5.html", [], "FKeyInfo");
addToContainers_struct("FKeyWithModifiers", "", "Docs/Structs/FKeyWithModifiers/FKeyWithModifiers.html", ["key", "with", "modifiers"], "");
addToContainers_function("FKeyWithModifiers", "This ctor was added for code generation", "Docs/Structs/FKeyWithModifiers/Functions/FKeyWithModifiers.html", ["key", "with", "modifiers"], "FKeyWithModifiers");
addToContainers_function("FKeyWithModifiers", "", "Docs/Structs/FKeyWithModifiers/Functions/FKeyWithModifiers_1.html", ["key", "with", "modifiers"], "FKeyWithModifiers");
addToContainers_function("FKeyWithModifiers", "", "Docs/Structs/FKeyWithModifiers/Functions/FKeyWithModifiers_2.html", ["key", "with", "modifiers"], "FKeyWithModifiers");
addToContainers_variable("", "", "Docs/Structs/FKeyWithModifiers/Variables/.html", [], "FKeyWithModifiers");
addToContainers_variable("", "", "Docs/Structs/FKeyWithModifiers/Variables/_1.html", [], "FKeyWithModifiers");
addToContainers_class("USingleBuffOrDebuffWidget", "A widget to display a single buff or debuff that does not need to show any duration. TODO disable tick and make add a array to display the bindwidgetoptionals in editor", "Docs/Classes/USingleBuffOrDebuffWidget/USingleBuffOrDebuffWidget.html", ["single", "buff", "or", "debuff", "widget"], "");
addToContainers_function("USingleBuffOrDebuffWidget", "", "Docs/Classes/USingleBuffOrDebuffWidget/Functions/USingleBuffOrDebuffWidget.html", ["single", "buff", "or", "debuff", "widget"], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "Text to display the name of the buff/debuff", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/.html", [], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "Image to display the icon for the buff/debuff", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/_1.html", [], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "A border that will display a certain color depending on the subtype of the buff/debuff. e.g. in a certain MMO magic buffs/debuffs have blue borders, curses have purple borders. Users can just incorperate the border color into the image set on Image_Icon effectively making this irrelevant, but I\'ll keep it here anyway just in case. I really have no idea what the difference between the border\'s Brush Tint and Brush Color is.", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/_2.html", [], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "List of widgets that can be bound with BindWidgetOptional. Auto populated inside ctor. Maps widget name to widget class + it\'s description", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/_3.html", [], "USingleBuffOrDebuffWidget");
addToContainers_class("USingleTickableBuffOrDebuffWidget", "A widget to display a single buff or debuff that would like to show its duration", "Docs/Classes/USingleTickableBuffOrDebuffWidget/USingleTickableBuffOrDebuffWidget.html", ["single", "tickable", "buff", "or", "debuff", "widget"], "");
addToContainers_variable("", "Text to show the remaining duration as a number", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Variables/.html", [], "USingleTickableBuffOrDebuffWidget");
addToContainers_variable("", "Progress bar to show the duration remaining in progress bar form", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Variables/_1.html", [], "USingleTickableBuffOrDebuffWidget");
addToContainers_variable("TotalDuration", "How long buff/debuff takes to complete from start to finish, or 0 if infinite in duration", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Variables/TotalDuration.html", ["total", "duration"], "USingleTickableBuffOrDebuffWidget");
addToContainers_class("UEndOfMatchWidget", "The widget to appear when the match has ended", "Docs/Classes/UEndOfMatchWidget/UEndOfMatchWidget.html", ["end", "of", "match", "widget"], "");
addToContainers_variable("", "Button to keep spectating even though match has ended", "Docs/Classes/UEndOfMatchWidget/Variables/.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Button to return to main menu", "Docs/Classes/UEndOfMatchWidget/Variables/_1.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Widget to show for victory result", "Docs/Classes/UEndOfMatchWidget/Variables/_2.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Widget to show for draw result", "Docs/Classes/UEndOfMatchWidget/Variables/_3.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Widget to show for defeat result", "Docs/Classes/UEndOfMatchWidget/Variables/_4.html", [], "UEndOfMatchWidget");
addToContainers_class("UInGameWidgetBase", "A widget that appears during a match", "Docs/Classes/UInGameWidgetBase/UInGameWidgetBase.html", ["in", "game", "widget", "base"], "");
addToContainers_function("UInGameWidgetBase", "", "Docs/Classes/UInGameWidgetBase/Functions/UInGameWidgetBase.html", ["in", "game", "widget", "base"], "UInGameWidgetBase");
addToContainers_variable("", "Reference to game state", "Docs/Classes/UInGameWidgetBase/Variables/.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/UInGameWidgetBase/Variables/_1.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to local player controller", "Docs/Classes/UInGameWidgetBase/Variables/_2.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to PCs player state", "Docs/Classes/UInGameWidgetBase/Variables/_3.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to faction info of player state", "Docs/Classes/UInGameWidgetBase/Variables/_4.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to the local players current selected", "Docs/Classes/UInGameWidgetBase/Variables/_5.html", [], "UInGameWidgetBase");
addToContainers_variable("bHasSetup", "True if SetupWidget has been called at least once", "Docs/Classes/UInGameWidgetBase/Variables/bHasSetup.html", ["has", "setup"], "UInGameWidgetBase");
addToContainers_variable("", "List of widgets that can be bound with BindWidgetOptional. Auto populated inside ctor. Maps widget name to widget class + it\'s description", "Docs/Classes/UInGameWidgetBase/Variables/_6.html", [], "UInGameWidgetBase");
addToContainers_class("UInMatchDeveloperWidget", "A widget that contains cheat actions to be used during a match that can help with speeding up development. This class is not abstract and has a \'works out of the box\' implementation. This widget is only used with editor so like I care about performance in it. Also oddly it does not show in PIE but does in standalone. Not sure if/when it changed to be like that.", "Docs/Classes/UInMatchDeveloperWidget/UInMatchDeveloperWidget.html", ["in", "match", "developer", "widget"], "");
addToContainers_function("UInMatchDeveloperWidget", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UInMatchDeveloperWidget.html", ["in", "match", "developer", "widget"], "UInMatchDeveloperWidget");
addToContainers_variable("STARTING_Y_POSITION", "The Y position to set for the top most button", "Docs/Classes/UInMatchDeveloperWidget/Variables/STARTING_Y_POSITION.html", ["t", "a", "r", "t", "i", "n", "g_", "y_", "p", "o", "s", "i", "t", "i", "o", "n"], "UInMatchDeveloperWidget");
addToContainers_variable("Y_SPACING_BETWEEN_BUTTONS", "Amount of Y axis space between buttons ", "Docs/Classes/UInMatchDeveloperWidget/Variables/Y_SPACING_BETWEEN_BUTTONS.html", ["y_", "s", "p", "a", "c", "i", "n", "g_", "b", "e", "t", "w", "e", "e", "n_", "b", "u", "t", "t", "o", "n", "s"], "UInMatchDeveloperWidget");
addToContainers_variable("BUTTON_SIZE", "Size of each button", "Docs/Classes/UInMatchDeveloperWidget/Variables/BUTTON_SIZE.html", ["u", "t", "t", "o", "n_", "s", "i", "z", "e"], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button to destroy a selectable with a mouse click. More specifically deals 9999999 default damage", "Docs/Classes/UInMatchDeveloperWidget/Variables/.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that deals some damage to a selectable. Deals 20 default damage", "Docs/Classes/UInMatchDeveloperWidget/Variables/_1.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tries to award some experience to a selectable. Awards 55% to 65% of the amount needed to reach the next level.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_2.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tries to award enough experience to a selectable such that it will level up at least two ranks.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_3.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that awards experience to the local player", "Docs/Classes/UInMatchDeveloperWidget/Variables/_4.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tries to put a random item in a selectable\'s inventory This button will likely only be visible for the server player and if items have been defined in EInventoryItem enum.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_5.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tried to put a specific item in a selectable\'s inventory. This button will likely only be visible for the server player and if items have been defined in EInventoryItem enum.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_6.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Shows debug info for a unit", "Docs/Classes/UInMatchDeveloperWidget/Variables/_7.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Widget to use when a popup menu is required", "Docs/Classes/UInMatchDeveloperWidget/Variables/_8.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "", "Docs/Classes/UInMatchDeveloperWidget/Variables/_9.html", [], "UInMatchDeveloperWidget");
addToContainers_class("UDevelopmentPopupWidget", "This is a popup widget used when the action requires being more specific e.g. the action is to give an item to a selectable but we would like to specify exactly which one. Just like the main widget this class is also has a \'works out of the box\' implementation.", "Docs/Classes/UDevelopmentPopupWidget/UDevelopmentPopupWidget.html", ["development", "popup", "widget"], "");
addToContainers_function("UDevelopmentPopupWidget", "", "Docs/Classes/UDevelopmentPopupWidget/Functions/UDevelopmentPopupWidget.html", ["development", "popup", "widget"], "UDevelopmentPopupWidget");
addToContainers_variable("NUM_GRID_PANEL_CHILDREN_PER_ROW", "How many children per row", "Docs/Classes/UDevelopmentPopupWidget/Variables/NUM_GRID_PANEL_CHILDREN_PER_ROW.html", ["u", "m_", "g", "r", "i", "d_", "p", "a", "n", "e", "l_", "c", "h", "i", "l", "d", "r", "e", "n_", "p", "e", "r_", "r", "o", "w"], "UDevelopmentPopupWidget");
addToContainers_variable("", "Panel that holds all the options", "Docs/Classes/UDevelopmentPopupWidget/Variables/.html", [], "UDevelopmentPopupWidget");
addToContainers_variable("", "Widget to use for each individual entry", "Docs/Classes/UDevelopmentPopupWidget/Variables/_1.html", [], "UDevelopmentPopupWidget");
addToContainers_class("UDevelopmentPopupWidgetButton", "A single button in the popup widget. Has default \'works out of the box\' implementation.", "Docs/Classes/UDevelopmentPopupWidgetButton/UDevelopmentPopupWidgetButton.html", ["development", "popup", "widget", "button"], "");
addToContainers_function("UDevelopmentPopupWidgetButton", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/UDevelopmentPopupWidgetButton.html", ["development", "popup", "widget", "button"], "UDevelopmentPopupWidgetButton");
addToContainers_variable("", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/.html", [], "UDevelopmentPopupWidgetButton");
addToContainers_variable("", "Button for click functionality", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/_1.html", [], "UDevelopmentPopupWidgetButton");
addToContainers_variable("", "Image to show something", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/_2.html", [], "UDevelopmentPopupWidgetButton");
addToContainers_variable("ClickFunctionality", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/ClickFunctionality.html", ["click", "functionality"], "UDevelopmentPopupWidgetButton");
addToContainers_variable("ClickAuxilleryInfo", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/ClickAuxilleryInfo.html", ["click", "auxillery", "info"], "UDevelopmentPopupWidgetButton");
addToContainers_class("AMarqueeHUD", "This class is responsible for drawing the marquee selection rectangle on screen and selecting units in the marquee box", "Docs/Classes/AMarqueeHUD/AMarqueeHUD.html", ["marquee", "h", "u", "d"], "");
addToContainers_function("AMarqueeHUD", "", "Docs/Classes/AMarqueeHUD/Functions/AMarqueeHUD.html", ["marquee", "h", "u", "d"], "AMarqueeHUD");
addToContainers_variable("ClickLoc", "2D coordinates for where LMB was pressed", "Docs/Classes/AMarqueeHUD/Variables/ClickLoc.html", ["click", "loc"], "AMarqueeHUD");
addToContainers_variable("MouseLoc", "2D coords of current mouse location", "Docs/Classes/AMarqueeHUD/Variables/MouseLoc.html", ["mouse", "loc"], "AMarqueeHUD");
addToContainers_variable("MarqueeBoxDrawMethod", "Copies of these 4 variables are in GI", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBoxDrawMethod.html", ["marquee", "box", "draw", "method"], "AMarqueeHUD");
addToContainers_variable("MarqueeBoxRectangleColor", "", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBoxRectangleColor.html", ["marquee", "box", "rectangle", "color"], "AMarqueeHUD");
addToContainers_variable("MarqueeBoxBorderColor", "", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBoxBorderColor.html", ["marquee", "box", "border", "color"], "AMarqueeHUD");
addToContainers_variable("MarqueeBorderLineThickness", "", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBorderLineThickness.html", ["marquee", "border", "line", "thickness"], "AMarqueeHUD");
addToContainers_variable("bPerformMarqueeASAP", "True if a marquee selection should be performed when DrawHUD is called", "Docs/Classes/AMarqueeHUD/Variables/bPerformMarqueeASAP.html", ["perform", "marquee", "a", "s", "a", "p"], "AMarqueeHUD");
addToContainers_variable("", "Array of all units that are inside a pending marquee box. If the player lets go of the LMB they will be selected", "Docs/Classes/AMarqueeHUD/Variables/.html", [], "AMarqueeHUD");
addToContainers_variable("", "Reference to player controller", "Docs/Classes/AMarqueeHUD/Variables/_1.html", [], "AMarqueeHUD");
addToContainers_class("URTSHUD", "In-game HUD. Each faction can use its own HUD. Some things: - if you want a UI element to not allow mouse pressed to go through it then make sure to create bindings for OnMouseButtonDown and OnMouseButtonUp and return FReplay::Handled. Currently you have to do this in the editor which means it will be a blueprint binding. /Begin verbose comment For performance I would like to move this to C++ in the future. If all UI elements should block by default (which I think is what all RTSs do anyway) then I could make sure during setup to iterate every widget of the HUD and add a NOOP binding to both OnMouseButtonDown and OnMouseButtonUp. If users want to pick and choose which should and shouldn\'t block then the only way I think I can do that is by creating my own SWidgets/UWidgets for each widget type... which would be a lot of effort.", "Docs/Classes/URTSHUD/URTSHUD.html", ["r", "t", "s", "h", "u", "d"], "");
addToContainers_function("URTSHUD", "=====================================================================================", "Docs/Classes/URTSHUD/Functions/URTSHUD.html", ["r", "t", "s", "h", "u", "d"], "URTSHUD");
addToContainers_variable("PALETTE_CATEGORY", "Category to appear in the palette in user widget blueprints", "Docs/Classes/URTSHUD/Variables/PALETTE_CATEGORY.html", ["a", "l", "e", "t", "t", "e_", "c", "a", "t", "e", "g", "o", "r", "y"], "URTSHUD");
addToContainers_variable("BLANK_TEXT", "Text that has nothing in it", "Docs/Classes/URTSHUD/Variables/BLANK_TEXT.html", ["l", "a", "n", "k_", "t", "e", "x", "t"], "URTSHUD");
addToContainers_variable("", "Widget that displays resources", "Docs/Classes/URTSHUD/Variables/.html", [], "URTSHUD");
addToContainers_variable("", "Widget for the minimap", "Docs/Classes/URTSHUD/Variables/_1.html", [], "URTSHUD");
addToContainers_variable("", "Widget that appears when entering chat message", "Docs/Classes/URTSHUD/Variables/_2.html", [], "URTSHUD");
addToContainers_variable("", "Text box that holds chat messages received", "Docs/Classes/URTSHUD/Variables/_3.html", [], "URTSHUD");
addToContainers_variable("", "Widget that will show game messages like \"not enough resources\"", "Docs/Classes/URTSHUD/Variables/_4.html", [], "URTSHUD");
addToContainers_variable("", "Button to bring up the pause menu", "Docs/Classes/URTSHUD/Variables/_5.html", [], "URTSHUD");
addToContainers_variable("", "Button to toggle the commander\'s skill tree", "Docs/Classes/URTSHUD/Variables/_6.html", [], "URTSHUD");
addToContainers_variable("", "Displays the commander\'s rank", "Docs/Classes/URTSHUD/Variables/_7.html", [], "URTSHUD");
addToContainers_variable("", "Displays the commander\'s unspent skill points", "Docs/Classes/URTSHUD/Variables/_8.html", [], "URTSHUD");
addToContainers_variable("", "Displays the commander\'s progress towards their next rank. This is not total experience gained but how much as been gained that goes towards the next rank.", "Docs/Classes/URTSHUD/Variables/_9.html", [], "URTSHUD");
addToContainers_variable("", "Displays how much experience is required to reach the next rank. This is not cumulative and does not change as experience is gained", "Docs/Classes/URTSHUD/Variables/_10.html", [], "URTSHUD");
addToContainers_variable("", "Displays commander\'s progress towards next rank", "Docs/Classes/URTSHUD/Variables/_11.html", [], "URTSHUD");
addToContainers_variable("CommanderSkillTreeWidget", "Can be null if the local player\'s faction does not use a skill tree", "Docs/Classes/URTSHUD/Variables/CommanderSkillTreeWidget.html", ["commander", "skill", "tree", "widget"], "URTSHUD");
addToContainers_variable("", "Widget that appears when an ability requires a player as a target", "Docs/Classes/URTSHUD/Variables/_12.html", [], "URTSHUD");
addToContainers_variable("PlayerTargetingPanel", "", "Docs/Classes/URTSHUD/Variables/PlayerTargetingPanel.html", ["player", "targeting", "panel"], "URTSHUD");
addToContainers_variable("", "Current selected context menu", "Docs/Classes/URTSHUD/Variables/_13.html", [], "URTSHUD");
addToContainers_variable("", "Displays info about units that are inside a garrison for primary selected", "Docs/Classes/URTSHUD/Variables/_14.html", [], "URTSHUD");
addToContainers_variable("", "Persistent panel like in C&C where you can build stuff from", "Docs/Classes/URTSHUD/Variables/_15.html", [], "URTSHUD");
addToContainers_variable("", "Panel that usually has commander abilities on it such as fuel air bomb", "Docs/Classes/URTSHUD/Variables/_16.html", [], "URTSHUD");
addToContainers_variable("", "Widget we use to create mouse hover/pressed highlights", "Docs/Classes/URTSHUD/Variables/_17.html", [], "URTSHUD");
addToContainers_variable("", "The slot that MouseFocusImage belongs to", "Docs/Classes/URTSHUD/Variables/_18.html", [], "URTSHUD");
addToContainers_variable("EscapeRequestResponableWidgets", "Widgets that will close when the player presses the ESC key. The last one to be opened is at .Last() in the array", "Docs/Classes/URTSHUD/Variables/EscapeRequestResponableWidgets.html", ["escape", "request", "responable", "widgets"], "URTSHUD");
addToContainers_variable("PauseMenu", "", "Docs/Classes/URTSHUD/Variables/PauseMenu.html", ["pause", "menu"], "URTSHUD");
addToContainers_variable("MenuOutputWidget", "", "Docs/Classes/URTSHUD/Variables/MenuOutputWidget.html", ["menu", "output", "widget"], "URTSHUD");
addToContainers_variable("", "Widget that displays messages from the menu e.g. \"cannot remap that", "Docs/Classes/URTSHUD/Variables/_19.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for inventory items. Leave null to not use an inventory tooltip widget", "Docs/Classes/URTSHUD/Variables/_20.html", [], "URTSHUD");
addToContainers_variable("", "", "Docs/Classes/URTSHUD/Variables/_21.html", [], "URTSHUD");
addToContainers_variable("", "Tool tip widget for buildings", "Docs/Classes/URTSHUD/Variables/_22.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for units", "Docs/Classes/URTSHUD/Variables/_23.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for upgrades", "Docs/Classes/URTSHUD/Variables/_24.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for buttons that appear on the global skills panel", "Docs/Classes/URTSHUD/Variables/_25.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for commander skill tree nodes", "Docs/Classes/URTSHUD/Variables/_26.html", [], "URTSHUD");
addToContainers_variable("", "Widget to use as a tooltip for inventory items", "Docs/Classes/URTSHUD/Variables/_27.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for abilities", "Docs/Classes/URTSHUD/Variables/_28.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for buildings. This will be used when hovering over a button that builds a building, either in a selectable\'s context menu or the HUD persistent panel", "Docs/Classes/URTSHUD/Variables/_29.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for units", "Docs/Classes/URTSHUD/Variables/_30.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for upgrades", "Docs/Classes/URTSHUD/Variables/_31.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip for the abilities that appear on the global skills panel", "Docs/Classes/URTSHUD/Variables/_32.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for commander skill tree nodes", "Docs/Classes/URTSHUD/Variables/_33.html", [], "URTSHUD");
addToContainers_variable("", "Inventory item tooltip widget anchor.", "Docs/Classes/URTSHUD/Variables/_34.html", [], "URTSHUD");
addToContainers_variable("", "Anchor for tooltips for selectable\'s action bar and the persistent panel", "Docs/Classes/URTSHUD/Variables/_35.html", [], "URTSHUD");
addToContainers_variable("", "Anchor for tooltips for abilities that appear on the global skills panel", "Docs/Classes/URTSHUD/Variables/_36.html", [], "URTSHUD");
addToContainers_variable("", "Anchor for tooltips for commander\'s skill tree nodes", "Docs/Classes/URTSHUD/Variables/_37.html", [], "URTSHUD");
addToContainers_variable("TimeWhenPauseMenuWasShown", "UWorld::GetRealTimeSeconds() when the pause menu was shown", "Docs/Classes/URTSHUD/Variables/TimeWhenPauseMenuWasShown.html", ["time", "when", "pause", "menu", "was", "shown"], "URTSHUD");
addToContainers_variable("", "The \"you have commander skill points to spend\" animation. If you name a widget anim this then it will play in accordance with the CommanderSkillTreeAnimPlayRule. I added this because in C&C generals when you rank up the button to open the skill tree flashes stars The animation will loop. You can change this easiy by changing the two PlayAnimation(SkillTreeWantsOpeningAnim) calls", "Docs/Classes/URTSHUD/Variables/_38.html", [], "URTSHUD");
addToContainers_variable("SkillTreeWantsOpeningAnimName", "", "Docs/Classes/URTSHUD/Variables/SkillTreeWantsOpeningAnimName.html", ["skill", "tree", "wants", "opening", "anim", "name"], "URTSHUD");
addToContainers_variable("SkillTreeWantsOpeningAnim", "", "Docs/Classes/URTSHUD/Variables/SkillTreeWantsOpeningAnim.html", ["skill", "tree", "wants", "opening", "anim"], "URTSHUD");
addToContainers_variable("", "When to play the \"open me\" anim for the commander skill tree", "Docs/Classes/URTSHUD/Variables/_39.html", [], "URTSHUD");
addToContainers_class("USelectableContextMenu", "Widget that appears when clicking on a selectable. Can really show anything you want about selectable here", "Docs/Classes/USelectableContextMenu/USelectableContextMenu.html", ["selectable", "context", "menu"], "");
addToContainers_variable("", "Holds whatever info you want to be displayed about the selectable such as experience, health etc", "Docs/Classes/USelectableContextMenu/Variables/.html", [], "USelectableContextMenu");
addToContainers_variable("", "Actions the selectable can carry out like \'attack move\'", "Docs/Classes/USelectableContextMenu/Variables/_1.html", [], "USelectableContextMenu");
addToContainers_class("USelectableInfo", "Holds info about a selectable. Can virtually hold anything such as experience, icon, health etc", "Docs/Classes/USelectableInfo/USelectableInfo.html", ["selectable", "info"], "");
addToContainers_function("USelectableInfo", "", "Docs/Classes/USelectableInfo/Functions/USelectableInfo.html", ["selectable", "info"], "USelectableInfo");
addToContainers_variable("", "Text to show selectables name", "Docs/Classes/USelectableInfo/Variables/.html", [], "USelectableInfo");
addToContainers_variable("", "Text to show a description of the selectable", "Docs/Classes/USelectableInfo/Variables/_1.html", [], "USelectableInfo");
addToContainers_variable("", "Icon of selectable", "Docs/Classes/USelectableInfo/Variables/_2.html", [], "USelectableInfo");
addToContainers_variable("", "Current rank/level", "Docs/Classes/USelectableInfo/Variables/_3.html", [], "USelectableInfo");
addToContainers_variable("", "Icon for current rank/level", "Docs/Classes/USelectableInfo/Variables/_4.html", [], "USelectableInfo");
addToContainers_variable("", "Optional panel that contains experience related widgets", "Docs/Classes/USelectableInfo/Variables/_5.html", [], "USelectableInfo");
addToContainers_variable("", "Shows how much experience is required to reach the next rank/level. Does not take into account how much current EXP we have so this can only change when we rank up.", "Docs/Classes/USelectableInfo/Variables/_6.html", [], "USelectableInfo");
addToContainers_variable("", "Shows how much experience we have towards our next rank/level", "Docs/Classes/USelectableInfo/Variables/_7.html", [], "USelectableInfo");
addToContainers_variable("", "Progress bar for experience towards next level", "Docs/Classes/USelectableInfo/Variables/_8.html", [], "USelectableInfo");
addToContainers_variable("", "Text that shows health", "Docs/Classes/USelectableInfo/Variables/_9.html", [], "USelectableInfo");
addToContainers_variable("", "Text that shows max health", "Docs/Classes/USelectableInfo/Variables/_10.html", [], "USelectableInfo");
addToContainers_variable("", "Progress bar for health", "Docs/Classes/USelectableInfo/Variables/_11.html", [], "USelectableInfo");
addToContainers_variable("", "An optional panel to put selectable resource related widgets on. It will be made visible if the primary selected uses a selectable resource", "Docs/Classes/USelectableInfo/Variables/_12.html", [], "USelectableInfo");
addToContainers_variable("", "Shows how much of their selectable resource the selectable has. Selectable resources are things like mana, energy", "Docs/Classes/USelectableInfo/Variables/_13.html", [], "USelectableInfo");
addToContainers_variable("", "Shows max amount of selectable resource", "Docs/Classes/USelectableInfo/Variables/_14.html", [], "USelectableInfo");
addToContainers_variable("", "Progress bar to show selectable resource", "Docs/Classes/USelectableInfo/Variables/_15.html", [], "USelectableInfo");
addToContainers_variable("", "Text that shows the regeneration rate of the selectable resource. By default the rate is amount regenerated per second", "Docs/Classes/USelectableInfo/Variables/_16.html", [], "USelectableInfo");
addToContainers_variable("", "How much damage selectable deals. Will be made hidden if selectable does not have an attack. This shows impact damage. I haven\'t added a widget to show AoE damage. I should do that", "Docs/Classes/USelectableInfo/Variables/_17.html", [], "USelectableInfo");
addToContainers_variable("", "Shows the unit\'s attack rate. Will be made hidden if selectable does not have an attack", "Docs/Classes/USelectableInfo/Variables/_18.html", [], "USelectableInfo");
addToContainers_variable("", "Shows the unit\'s attack range. Will be made hidden if selectable does not have an attack", "Docs/Classes/USelectableInfo/Variables/_19.html", [], "USelectableInfo");
addToContainers_variable("", "Shows the defense multiplier.", "Docs/Classes/USelectableInfo/Variables/_20.html", [], "USelectableInfo");
addToContainers_variable("", "The panel widget that contains everything about the production queue. This will be hidden based on the func ShouldShowProductionQueueInfo. It is assumed ProgressBar_ProductionQueue and any production queue buttons added to the user widget will be children of this panel widget for easy hidden/visible toggling.", "Docs/Classes/USelectableInfo/Variables/_21.html", [], "USelectableInfo");
addToContainers_variable("", "To show percentage complete of production", "Docs/Classes/USelectableInfo/Variables/_22.html", [], "USelectableInfo");
addToContainers_variable("", "Array populated in SetupWidget. Holds references to images that will show what is in the production queue.", "Docs/Classes/USelectableInfo/Variables/_23.html", [], "USelectableInfo");
addToContainers_variable("QueueNum", "A tally to keep track of how many buttons are activeated in ProductionQueueSlots so we can avoid calling SetVisibility needlessly", "Docs/Classes/USelectableInfo/Variables/QueueNum.html", ["queue", "num"], "USelectableInfo");
addToContainers_variable("ProductionQueue", "Queue of current selected, or null if it has none. As long as check if CurrentSelected is valid then should be ok dereferncing this I think", "Docs/Classes/USelectableInfo/Variables/ProductionQueue.html", ["production", "queue"], "USelectableInfo");
addToContainers_variable("LastSelectableResourceType", "The selectable resource type of the last selected selectable. This is used for optimization. It is used to know whether we need to change the PBar color for selectable resource", "Docs/Classes/USelectableInfo/Variables/LastSelectableResourceType.html", ["last", "selectable", "resource", "type"], "USelectableInfo");
addToContainers_variable("", "Panel for displaying buffs applied", "Docs/Classes/USelectableInfo/Variables/_24.html", [], "USelectableInfo");
addToContainers_variable("", "The widget to use to display info about each static buff on selectable", "Docs/Classes/USelectableInfo/Variables/_25.html", [], "USelectableInfo");
addToContainers_variable("", "Array that mimics Panel_Buffs\'s children", "Docs/Classes/USelectableInfo/Variables/_26.html", [], "USelectableInfo");
addToContainers_variable("", "The widget to use to display info about each tickable buff on selectable", "Docs/Classes/USelectableInfo/Variables/_27.html", [], "USelectableInfo");
addToContainers_variable("", "", "Docs/Classes/USelectableInfo/Variables/_28.html", [], "USelectableInfo");
addToContainers_variable("", "Panel for displaying debuffs applied", "Docs/Classes/USelectableInfo/Variables/_29.html", [], "USelectableInfo");
addToContainers_variable("", "Widget to display static type debuffs", "Docs/Classes/USelectableInfo/Variables/_30.html", [], "USelectableInfo");
addToContainers_variable("", "This array is the first entries of Panel_Debuffs", "Docs/Classes/USelectableInfo/Variables/_31.html", [], "USelectableInfo");
addToContainers_variable("", "Widget to display tickable debuffs", "Docs/Classes/USelectableInfo/Variables/_32.html", [], "USelectableInfo");
addToContainers_variable("", "This array is the entries after statics in Panel_Debuffs", "Docs/Classes/USelectableInfo/Variables/_33.html", [], "USelectableInfo");
addToContainers_variable("", "A panel that shows what items are on display for a shop. Usually they are on sale", "Docs/Classes/USelectableInfo/Variables/_34.html", [], "USelectableInfo");
addToContainers_variable("", "@See bAutoCreateInventoryItemWidgets", "Docs/Classes/USelectableInfo/Variables/_35.html", [], "USelectableInfo");
addToContainers_variable("", "Widget to use if bAutoCreateItemForSaleWidgets is true", "Docs/Classes/USelectableInfo/Variables/_36.html", [], "USelectableInfo");
addToContainers_variable("ItemOnDisplayInShopButtons", "Array of widgets that represent an item on display in a shop. If I find these are getting GCed then this array may need to be changed to a UPROPERTY with raw pointers", "Docs/Classes/USelectableInfo/Variables/ItemOnDisplayInShopButtons.html", ["item", "on", "display", "in", "shop", "buttons"], "USelectableInfo");
addToContainers_variable("", "A panel that shows the inventory of a selectable", "Docs/Classes/USelectableInfo/Variables/_37.html", [], "USelectableInfo");
addToContainers_variable("CoolingDownInventorySlots", "Array of inventory slots with items that are coolding down", "Docs/Classes/USelectableInfo/Variables/CoolingDownInventorySlots.html", ["cooling", "down", "inventory", "slots"], "USelectableInfo");
addToContainers_variable("", "If true then the buttons that represent an item in the inventory will be automatically created during HUD initialization at runtime. You will just need to specify a widget blueprint to use for each button. After each button has been added to the panel the function OnInventoryItemButtonAddedToPanel will be called giving you a chance to tweek exactly how the widget is positioned if needed. Also you should remove any UInventoryItemButton widgets that you have added via editor since they will be ignored. If false then you can just add the button widgets in the editor. Make sure you add an amount of buttons equal to the max size inventory of all selectables e.g. if the most number of items a selectable can carry is 6 then make sure you add 6 buttons. Generally the first button you add will be considered the first inventory slot, the 2nd you add will be the 2nd inventory slot, etc.", "Docs/Classes/USelectableInfo/Variables/_38.html", [], "USelectableInfo");
addToContainers_variable("", "If choosing to auto populate the inventory panel then this is the button widget to use for it.", "Docs/Classes/USelectableInfo/Variables/_39.html", [], "USelectableInfo");
addToContainers_variable("InventoryButtons", "Array of the widgets that represent an item in a selectable\'s inventory. If I find these are getting GCed then this array may need to be changed to a UPROPERTY with raw pointers", "Docs/Classes/USelectableInfo/Variables/InventoryButtons.html", ["inventory", "buttons"], "USelectableInfo");
addToContainers_class("UProductionQueueButton", "A button for showing what is in the production queue. It contains a button to enable cancelling items in queue but this functionality has not been implemented yet", "Docs/Classes/UProductionQueueButton/UProductionQueueButton.html", ["production", "queue", "button"], "");
addToContainers_function("UProductionQueueButton", "", "Docs/Classes/UProductionQueueButton/Functions/UProductionQueueButton.html", ["production", "queue", "button"], "UProductionQueueButton");
addToContainers_variable("", "Reference to local player controller", "Docs/Classes/UProductionQueueButton/Variables/.html", [], "UProductionQueueButton");
addToContainers_variable("", "Reference to faction info of local player", "Docs/Classes/UProductionQueueButton/Variables/_1.html", [], "UProductionQueueButton");
addToContainers_variable("ButtonType", "The info this button is for", "Docs/Classes/UProductionQueueButton/Variables/ButtonType.html", ["button", "type"], "UProductionQueueButton");
addToContainers_class("UItemOnDisplayInShopButton", "A widget that represents an item that is on display in a shop. Usually these items can be purchased. Better name perhaps = UShopWindowSlotButton", "Docs/Classes/UItemOnDisplayInShopButton/UItemOnDisplayInShopButton.html", ["item", "on", "display", "in", "shop", "button"], "");
addToContainers_function("UItemOnDisplayInShopButton", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/UItemOnDisplayInShopButton.html", ["item", "on", "display", "in", "shop", "button"], "UItemOnDisplayInShopButton");
addToContainers_variable("", "", "Docs/Classes/UItemOnDisplayInShopButton/Variables/.html", [], "UItemOnDisplayInShopButton");
addToContainers_variable("OwningWidget", "Widget this is a child of", "Docs/Classes/UItemOnDisplayInShopButton/Variables/OwningWidget.html", ["owning", "widget"], "UItemOnDisplayInShopButton");
addToContainers_variable("ShopSlotIndex", "The slot in the shop this button should show info for. If this info is ever contained in FItemOnDisplayInShopSlot then this can be removed", "Docs/Classes/UItemOnDisplayInShopButton/Variables/ShopSlotIndex.html", ["shop", "slot", "index"], "UItemOnDisplayInShopButton");
addToContainers_variable("SlotStateInfo", "State info for what this button is selling", "Docs/Classes/UItemOnDisplayInShopButton/Variables/SlotStateInfo.html", ["slot", "state", "info"], "UItemOnDisplayInShopButton");
addToContainers_variable("ItemInfo", "Info struct for ItemTypeThisIsFor", "Docs/Classes/UItemOnDisplayInShopButton/Variables/ItemInfo.html", ["item", "info"], "UItemOnDisplayInShopButton");
addToContainers_variable("OriginalOpacity", "", "Docs/Classes/UItemOnDisplayInShopButton/Variables/OriginalOpacity.html", ["original", "opacity"], "UItemOnDisplayInShopButton");
addToContainers_variable("", "Button to handle clicks", "Docs/Classes/UItemOnDisplayInShopButton/Variables/_1.html", [], "UItemOnDisplayInShopButton");
addToContainers_variable("", "Text to show the name of the item", "Docs/Classes/UItemOnDisplayInShopButton/Variables/_2.html", [], "UItemOnDisplayInShopButton");
addToContainers_variable("", "Text to show the number of purchases remaining", "Docs/Classes/UItemOnDisplayInShopButton/Variables/_3.html", [], "UItemOnDisplayInShopButton");
addToContainers_class("UInventoryItemButton", "A button that represents an item in a selectable\'s inventory. Tip: to achieve displaying an image an text overtop the button put an overlay on it, then add the image and text widgets as childs to the overlay. Actually UButton can display an image on it anyway so I can completely do away with the image widget and set the image on the button instead. Better name = UInventorySlotButton", "Docs/Classes/UInventoryItemButton/UInventoryItemButton.html", ["inventory", "item", "button"], "");
addToContainers_function("UInventoryItemButton", "", "Docs/Classes/UInventoryItemButton/Functions/UInventoryItemButton.html", ["inventory", "item", "button"], "UInventoryItemButton");
addToContainers_variable("InventorySlot", "Inventory slot this widget is displaying info for", "Docs/Classes/UInventoryItemButton/Variables/InventorySlot.html", ["inventory", "slot"], "UInventoryItemButton");
addToContainers_variable("SlotsItemInfo", "Pointer to info struct for what is in this slot. If this widget is representing an empty inventory slot then this will be null. This may not actually be needed", "Docs/Classes/UInventoryItemButton/Variables/SlotsItemInfo.html", ["slots", "item", "info"], "UInventoryItemButton");
addToContainers_variable("", "The button that will handle things like using the item if it is a usable item", "Docs/Classes/UInventoryItemButton/Variables/.html", [], "UInventoryItemButton");
addToContainers_variable("ServerSlotIndex", "The index in FInventory::SlotsArray this widget represents. Should probably be moved closer to InventorySlot", "Docs/Classes/UInventoryItemButton/Variables/ServerSlotIndex.html", ["server", "slot", "index"], "UInventoryItemButton");
addToContainers_variable("DisplayedItemType", "[Optimization] The item type that the widget is displaying. Here to try avoid dirtying widgets when they don\'t actually change what they display", "Docs/Classes/UInventoryItemButton/Variables/DisplayedItemType.html", ["displayed", "item", "type"], "UInventoryItemButton");
addToContainers_variable("StackQuantityOrNumChargesShown", "[Optimization] Because UTextBlock::SetText does not check if text has changed", "Docs/Classes/UInventoryItemButton/Variables/StackQuantityOrNumChargesShown.html", ["stack", "quantity", "or", "num", "charges", "shown"], "UInventoryItemButton");
addToContainers_variable("UnifiedBrushAndSoundFlags", "Duplicate of what\'s already stored in GI; don\'t really need it", "Docs/Classes/UInventoryItemButton/Variables/UnifiedBrushAndSoundFlags.html", ["unified", "brush", "and", "sound", "flags"], "UInventoryItemButton");
addToContainers_variable("", "Text that shows either: - how many of the item are in the stack - how many charges the item has", "Docs/Classes/UInventoryItemButton/Variables/_1.html", [], "UInventoryItemButton");
addToContainers_variable("", "Text to show the name of the item", "Docs/Classes/UInventoryItemButton/Variables/_2.html", [], "UInventoryItemButton");
addToContainers_variable("", "Text that shows the cooldown remaining on the item\'s \'use\' ability if any", "Docs/Classes/UInventoryItemButton/Variables/_3.html", [], "UInventoryItemButton");
addToContainers_variable("", "Progress bar that shows the cooldown remaining on the item\'s \'use\' ability if any", "Docs/Classes/UInventoryItemButton/Variables/_4.html", [], "UInventoryItemButton");
addToContainers_variable("ItemUseTotalCooldown", "The cooldown of the use ability of the item this widget represents. Irrelevant if the item does not have a use ability. If it has no cooldown then this will be 0. This data is also stored on the FContextButtonInfo struct so a pointer to that in place of this variable is an option", "Docs/Classes/UInventoryItemButton/Variables/ItemUseTotalCooldown.html", ["item", "use", "total", "cooldown"], "UInventoryItemButton");
addToContainers_class("USelectableActionBar", "Holds the actions a selectable can do like \'attack move\'", "Docs/Classes/USelectableActionBar/USelectableActionBar.html", ["selectable", "action", "bar"], "");
addToContainers_function("USelectableActionBar", "", "Docs/Classes/USelectableActionBar/Functions/USelectableActionBar.html", ["selectable", "action", "bar"], "USelectableActionBar");
addToContainers_variable("", "Alpha for buttons when they are not clickable because prerequisites are not met", "Docs/Classes/USelectableActionBar/Variables/.html", [], "USelectableActionBar");
addToContainers_variable("", "Array of buttons for each action slot", "Docs/Classes/USelectableActionBar/Variables/_1.html", [], "USelectableActionBar");
addToContainers_variable("", "Maps a button to the widget assigned to that button", "Docs/Classes/USelectableActionBar/Variables/_2.html", [], "USelectableActionBar");
addToContainers_variable("NumButtonsInMenu", "Number of buttons active in ActionButtons i.e. the number of context buttons on the current selected\'s context menu (including whether they have prereqs met or not)", "Docs/Classes/USelectableActionBar/Variables/NumButtonsInMenu.html", ["num", "buttons", "in", "menu"], "USelectableActionBar");
addToContainers_class("UContextActionButton", "A single button for a context action. It will construct extra widgets when placed in editor. A few assumptions are made when using these: - That the overlay widget is a direct child of this - That the image and progress bar widgets are direct children of the overlay widget", "Docs/Classes/UContextActionButton/UContextActionButton.html", ["context", "action", "button"], "");
addToContainers_function("UContextActionButton", "", "Docs/Classes/UContextActionButton/Functions/UContextActionButton.html", ["context", "action", "button"], "UContextActionButton");
addToContainers_variable("", "Reference to the progress bar that shows the cooldown remaining", "Docs/Classes/UContextActionButton/Variables/.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to the text block that shows the ability\'s cooldown remaining. Could also show the time left on construction progress too I guess", "Docs/Classes/UContextActionButton/Variables/_1.html", [], "UContextActionButton");
addToContainers_variable("bIsCooldownTextEmpty", "Whether CooldownRemainingText has its text set as empty or not. This is here because we\'re not fully event driven on abilities coming off cooldown and this should give a performance boost by not setting the text block\'s text to empty every frame.", "Docs/Classes/UContextActionButton/Variables/bIsCooldownTextEmpty.html", ["is", "cooldown", "text", "empty"], "UContextActionButton");
addToContainers_variable("", "The text that shows on the button describing what the button is for. Really just 1 or 2 words - it\'s not the actual description of what the button does", "Docs/Classes/UContextActionButton/Variables/_2.html", [], "UContextActionButton");
addToContainers_variable("", "More text intended to show whatever, perhaps the remaining cooldown of button", "Docs/Classes/UContextActionButton/Variables/_3.html", [], "UContextActionButton");
addToContainers_variable("bIsForProductionAction", "Whether this button is for a Train/Upgrade type button or a BuildBuilding button that is either BuildsInTab or BuildsItself", "Docs/Classes/UContextActionButton/Variables/bIsForProductionAction.html", ["is", "for", "production", "action"], "UContextActionButton");
addToContainers_variable("ProductionQueue", "Production queue if using this button for a production action", "Docs/Classes/UContextActionButton/Variables/ProductionQueue.html", ["production", "queue"], "UContextActionButton");
addToContainers_variable("TimerHandle_ProgressBar", "Timer handle for updating progress bar. Ignored if using for production action", "Docs/Classes/UContextActionButton/Variables/TimerHandle_ProgressBar.html", ["timer", "handle_", "progress", "bar"], "UContextActionButton");
addToContainers_variable("ButtonType", "Type of action this button is for. Will change as players current selected changes", "Docs/Classes/UContextActionButton/Variables/ButtonType.html", ["button", "type"], "UContextActionButton");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/UContextActionButton/Variables/_4.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to player controller", "Docs/Classes/UContextActionButton/Variables/_5.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to player state that uses this", "Docs/Classes/UContextActionButton/Variables/_6.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to faction info of local player", "Docs/Classes/UContextActionButton/Variables/_7.html", [], "UContextActionButton");
addToContainers_variable("bPrerequisitesMet", "", "Docs/Classes/UContextActionButton/Variables/bPrerequisitesMet.html", ["prerequisites", "met"], "UContextActionButton");
addToContainers_variable("OriginalAlpha", "Original alpha of button cached so it can be restored when prerequisites are met", "Docs/Classes/UContextActionButton/Variables/OriginalAlpha.html", ["original", "alpha"], "UContextActionButton");
addToContainers_class("UGarrisonedUnitInfo", "Info about a single garrisoned unit", "Docs/Classes/UGarrisonedUnitInfo/UGarrisonedUnitInfo.html", ["garrisoned", "unit", "info"], "");
addToContainers_variable("", "Button to display image of unit and when clicked to unload the unit", "Docs/Classes/UGarrisonedUnitInfo/Variables/.html", [], "UGarrisonedUnitInfo");
addToContainers_variable("GarrisonedSelectable", "The selectable garrisoned inside the building. This may be stale if the widget hides this button but should not be an issue because the button is hidden and therefore not clickable!", "Docs/Classes/UGarrisonedUnitInfo/Variables/GarrisonedSelectable.html", ["garrisoned", "selectable"], "UGarrisonedUnitInfo");
addToContainers_class("UGarrisonInfo", "This widget was added to show what units are inside garrisons", "Docs/Classes/UGarrisonInfo/UGarrisonInfo.html", ["garrison", "info"], "");
addToContainers_variable("PrimarySelectedsGarrisonNetworkType", "The building garrison network type for the primary selected. If primary selected is not a building then this will likely be \"None\"", "Docs/Classes/UGarrisonInfo/Variables/PrimarySelectedsGarrisonNetworkType.html", ["primary", "selecteds", "garrison", "network", "type"], "UGarrisonInfo");
addToContainers_variable("", "Widget that will display info about garrisoned unit", "Docs/Classes/UGarrisonInfo/Variables/.html", [], "UGarrisonInfo");
addToContainers_variable("", "Panel that will show all the units", "Docs/Classes/UGarrisonInfo/Variables/_1.html", [], "UGarrisonInfo");
addToContainers_variable("", "A button that when clicked will unload all units inside the garrison", "Docs/Classes/UGarrisonInfo/Variables/_2.html", [], "UGarrisonInfo");
addToContainers_class("UHUDResourcesWidget", "Widget that holds single resource widgets.", "Docs/Classes/UHUDResourcesWidget/UHUDResourcesWidget.html", ["h", "u", "d", "resources", "widget"], "");
addToContainers_variable("", "Maps resource type to its panel widget", "Docs/Classes/UHUDResourcesWidget/Variables/.html", [], "UHUDResourcesWidget");
addToContainers_variable("", "Array that holds all the single housing resource widgets. Key = Statics::HousingResourceTypeToArrayIndex", "Docs/Classes/UHUDResourcesWidget/Variables/_1.html", [], "UHUDResourcesWidget");
addToContainers_class("UHUDSingleResourcesWidget", "A widget that shows how much of a single resource type the player has. Not used for housing resource types", "Docs/Classes/UHUDSingleResourcesWidget/UHUDSingleResourcesWidget.html", ["h", "u", "d", "single", "resources", "widget"], "");
addToContainers_variable("", "Resource type this is for", "Docs/Classes/UHUDSingleResourcesWidget/Variables/.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("", "Curve for playing the decreasing money over time tick down/up effect like in SCII. If no curve is set then resources are updated instantly. Also resources are always subtracted instantly in player state - this is just for visuals only and doesn\'t mean if the curve is slow you can spend those resources again. Curve should be increasing. X axis = duration to go from current value to new value Y axis = percentage towards new value (should have a range from 0 to 1). My notes: If resources changes and the value displayed is already part way towards the new value then the update time will not be the full length of curve. If the displayed value hasn\'t caught up to the actual value and a change causes the new value to go even further away from the displayed value then it will take the full curve duration but not any longer", "Docs/Classes/UHUDSingleResourcesWidget/Variables/_1.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("StartAmount", "~ For update curve only", "Docs/Classes/UHUDSingleResourcesWidget/Variables/StartAmount.html", ["start", "amount"], "UHUDSingleResourcesWidget");
addToContainers_variable("CurrentAmount", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/CurrentAmount.html", ["current", "amount"], "UHUDSingleResourcesWidget");
addToContainers_variable("TargetAmount", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/TargetAmount.html", ["target", "amount"], "UHUDSingleResourcesWidget");
addToContainers_variable("UpdateCurveDuration", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/UpdateCurveDuration.html", ["update", "curve", "duration"], "UHUDSingleResourcesWidget");
addToContainers_variable("CurrentCurveTime", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/CurrentCurveTime.html", ["current", "curve", "time"], "UHUDSingleResourcesWidget");
addToContainers_variable("Range", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/Range.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("", "Resource icon", "Docs/Classes/UHUDSingleResourcesWidget/Variables/_2.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("", "Amount of resource", "Docs/Classes/UHUDSingleResourcesWidget/Variables/_3.html", [], "UHUDSingleResourcesWidget");
addToContainers_class("UHUDSingleHousingResourceWidget", "A widget that shows how much of a single housing resource the player is consuming and providing. The values do not update using curves", "Docs/Classes/UHUDSingleHousingResourceWidget/UHUDSingleHousingResourceWidget.html", ["h", "u", "d", "single", "housing", "resource", "widget"], "");
addToContainers_function("UHUDSingleHousingResourceWidget", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/UHUDSingleHousingResourceWidget.html", ["h", "u", "d", "single", "housing", "resource", "widget"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "The housing resource this widget is for", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("Consumed_OriginalColor", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/Consumed_OriginalColor.html", ["consumed_", "original", "color"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("Provided_OriginalColor", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/Provided_OriginalColor.html", ["provided_", "original", "color"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "The color to make the consumed text when the amount consumed goes over the amount provided", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_1.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "The color to make the provided text when the amount consumed goes over the amount provided", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_2.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("bIsOverCap", "If true then this widget is displaying as if the player is consuming more than they are producing", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/bIsOverCap.html", ["is", "over", "cap"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "Text to show the amount of the resource being consumed", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_3.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "Text to show the amount of the resource being provided", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_4.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_class("UHUDChatInputWidget", "Widget that shows when wanting to enter chat message", "Docs/Classes/UHUDChatInputWidget/UHUDChatInputWidget.html", ["h", "u", "d", "chat", "input", "widget"], "");
addToContainers_function("UHUDChatInputWidget", "", "Docs/Classes/UHUDChatInputWidget/Functions/UHUDChatInputWidget.html", ["h", "u", "d", "chat", "input", "widget"], "UHUDChatInputWidget");
addToContainers_variable("", "What to put onto the start of the text when typing out a for these groups. This will not be sent with the message", "Docs/Classes/UHUDChatInputWidget/Variables/.html", [], "UHUDChatInputWidget");
addToContainers_variable("", "Max length of message excluding any MessageStarts", "Docs/Classes/UHUDChatInputWidget/Variables/_1.html", [], "UHUDChatInputWidget");
addToContainers_variable("", "Text box to type message into. Interesting... in PIE ESC will lose focus on a UEditableTextBox but not a UEditableText", "Docs/Classes/UHUDChatInputWidget/Variables/_2.html", [], "UHUDChatInputWidget");
addToContainers_variable("MessageRecipients", "Who will receive the message if sent", "Docs/Classes/UHUDChatInputWidget/Variables/MessageRecipients.html", ["message", "recipients"], "UHUDChatInputWidget");
addToContainers_variable("NumUndeletableCharacters", "How many characters inside the input box cannot be deleted. This prevents the things like [TEAM ONLY]: part of the text never being deleted", "Docs/Classes/UHUDChatInputWidget/Variables/NumUndeletableCharacters.html", ["num", "undeletable", "characters"], "UHUDChatInputWidget");
addToContainers_class("UHUDChatOutputWidget", "####################################################", "Docs/Classes/UHUDChatOutputWidget/UHUDChatOutputWidget.html", ["h", "u", "d", "chat", "output", "widget"], "");
addToContainers_function("UHUDChatOutputWidget", "", "Docs/Classes/UHUDChatOutputWidget/Functions/UHUDChatOutputWidget.html", ["h", "u", "d", "chat", "output", "widget"], "UHUDChatOutputWidget");
addToContainers_variable("MessageReceivedAnimName", "Name of widget to play message received anim", "Docs/Classes/UHUDChatOutputWidget/Variables/MessageReceivedAnimName.html", ["message", "received", "anim", "name"], "UHUDChatOutputWidget");
addToContainers_variable("", "Messages received", "Docs/Classes/UHUDChatOutputWidget/Variables/.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "List of how long each message is. Used kind of like a linked list", "Docs/Classes/UHUDChatOutputWidget/Variables/_1.html", [], "UHUDChatOutputWidget");
addToContainers_variable("FrontOfMessageIndices", "Index in MessageIndices that is considered the front of it cause using it like a linked list", "Docs/Classes/UHUDChatOutputWidget/Variables/FrontOfMessageIndices.html", ["front", "of", "message", "indices"], "UHUDChatOutputWidget");
addToContainers_variable("NumMessages", "Number of messages currently in chat log", "Docs/Classes/UHUDChatOutputWidget/Variables/NumMessages.html", ["num", "messages"], "UHUDChatOutputWidget");
addToContainers_variable("", "Animation that plays when a message is received. Will probably want to make widget hit test invis at start and hidden/collapsed at end", "Docs/Classes/UHUDChatOutputWidget/Variables/_2.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "If not using a widget anim, the amount of time after receiving a message before hiding widget", "Docs/Classes/UHUDChatOutputWidget/Variables/_3.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "Relevant if: - using a widget anim for when message is received - the animation has some kind of start effect to it as opposed to just showing widget straight away e.g. it takes 1 second to fade in. The amount of time to reset anim to when a message is received while the anim is still playing, but never moves anim forward, will only move anim start time backwards", "Docs/Classes/UHUDChatOutputWidget/Variables/_4.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "Max number of messages allowed in log before it will start deleting the oldest ones", "Docs/Classes/UHUDChatOutputWidget/Variables/_5.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "What to put very first in the message", "Docs/Classes/UHUDChatOutputWidget/Variables/_6.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "What to put after the senders name but before what they typed. There\'s probably better names for these. So to clarify the whole message will be: MessageStarts + senders name + MessageMiddle + what they typed, with new lines added automatically", "Docs/Classes/UHUDChatOutputWidget/Variables/_7.html", [], "UHUDChatOutputWidget");
addToContainers_variable("TimerHandle_Hide", "Timer handle for hiding widget", "Docs/Classes/UHUDChatOutputWidget/Variables/TimerHandle_Hide.html", ["timer", "handle_", "hide"], "UHUDChatOutputWidget");
addToContainers_struct("FGameMessageAttributes", "Attributes for a game message category", "Docs/Structs/FGameMessageAttributes/FGameMessageAttributes.html", ["game", "message", "attributes"], "");
addToContainers_function("FGameMessageAttributes", "", "Docs/Structs/FGameMessageAttributes/Functions/FGameMessageAttributes.html", ["game", "message", "attributes"], "FGameMessageAttributes");
addToContainers_variable("", "If not using a widget anim, the amount of time after receiving a message before hiding widget", "Docs/Structs/FGameMessageAttributes/Variables/.html", [], "FGameMessageAttributes");
addToContainers_variable("", "Max number of messages that can be shown before old messages start getting deleted as new ones arrive", "Docs/Structs/FGameMessageAttributes/Variables/_1.html", [], "FGameMessageAttributes");
addToContainers_variable("", "Whether new messages should appear above or below older messages", "Docs/Structs/FGameMessageAttributes/Variables/_2.html", [], "FGameMessageAttributes");
addToContainers_variable("", "List of how long each message is. Used kind of like a linked list", "Docs/Structs/FGameMessageAttributes/Variables/_3.html", [], "FGameMessageAttributes");
addToContainers_variable("TimerHandle_HidePanel", "", "Docs/Structs/FGameMessageAttributes/Variables/TimerHandle_HidePanel.html", ["timer", "handle_", "hide", "panel"], "FGameMessageAttributes");
addToContainers_variable("FrontOfMessageIndices", "Index in MessageIndices that is considered the front of it cause using it like a linked list", "Docs/Structs/FGameMessageAttributes/Variables/FrontOfMessageIndices.html", ["front", "of", "message", "indices"], "FGameMessageAttributes");
addToContainers_variable("NumMessages", "Number of messages currently in chat log", "Docs/Structs/FGameMessageAttributes/Variables/NumMessages.html", ["num", "messages"], "FGameMessageAttributes");
addToContainers_variable("", "If you name a widget animation this then it will be played every time a message is received", "Docs/Structs/FGameMessageAttributes/Variables/_4.html", [], "FGameMessageAttributes");
addToContainers_variable("", "@See UHUDChatOutputWidget::AdditionalMessageAnimStartTime", "Docs/Structs/FGameMessageAttributes/Variables/_5.html", [], "FGameMessageAttributes");
addToContainers_variable("", "Anim to play when message received. Whole panel animations may not suit this widget very well", "Docs/Structs/FGameMessageAttributes/Variables/_6.html", [], "FGameMessageAttributes");
addToContainers_variable("OwningWidget", "Widget these attributes are a part of", "Docs/Structs/FGameMessageAttributes/Variables/OwningWidget.html", ["owning", "widget"], "FGameMessageAttributes");
addToContainers_variable("HidePanelFunctionPtr", "Pointer to function to call that hides a panel widget... more code I will look at later and go \"what the heck does that do?\"", "Docs/Structs/FGameMessageAttributes/Variables/HidePanelFunctionPtr.html", ["hide", "panel", "function", "ptr"], "FGameMessageAttributes");
addToContainers_class("UHUDGameOutputWidget", "Widget that displays messages about the game such as \"not enough resources\" or \"player defeated\"", "Docs/Classes/UHUDGameOutputWidget/UHUDGameOutputWidget.html", ["h", "u", "d", "game", "output", "widget"], "");
addToContainers_function("UHUDGameOutputWidget", "", "Docs/Classes/UHUDGameOutputWidget/Functions/UHUDGameOutputWidget.html", ["h", "u", "d", "game", "output", "widget"], "UHUDGameOutputWidget");
addToContainers_variable("", "Attributes for warning type messages", "Docs/Classes/UHUDGameOutputWidget/Variables/.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Attributes for notification type messages", "Docs/Classes/UHUDGameOutputWidget/Variables/_1.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Panel that should have a text widget as a child to display game warnings", "Docs/Classes/UHUDGameOutputWidget/Variables/_2.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Panel that should have a text widget as a child to display game notifications", "Docs/Classes/UHUDGameOutputWidget/Variables/_3.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Text widget to display warnings in. Should be child of Panel_Warnings", "Docs/Classes/UHUDGameOutputWidget/Variables/_4.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Text widget to display notifications in. Should be child of Panel_Notifications", "Docs/Classes/UHUDGameOutputWidget/Variables/_5.html", [], "UHUDGameOutputWidget");
addToContainers_class("UHUDPersistentPanel", "Widget that is the panel that appears on the right in C&C The panel may contain two types of widgets: - tabs - buttons to switch between the tabs Example of the different tabs in RA2: - buildings, defense buildings, infantry, vehicles Of course you do not have to use multiple tabs. You can put everything in one tab if you choose. Each building/unit should have a variable that lets you choose the tab they appear in, or you can assign the value \"None\" to exclude them from appearing in any tab at all. There is also a variable something like HUDPersistentTabOrdering that defines the order they appear in the tab (e.g. in C&C generally power plants appear first, while something like a super weapon type building will usually appear last)", "Docs/Classes/UHUDPersistentPanel/UHUDPersistentPanel.html", ["h", "u", "d", "persistent", "panel"], "");
addToContainers_function("UHUDPersistentPanel", "", "Docs/Classes/UHUDPersistentPanel/Functions/UHUDPersistentPanel.html", ["h", "u", "d", "persistent", "panel"], "UHUDPersistentPanel");
addToContainers_variable("", "Tab to start on at beginning of match. Do not use \"None\"", "Docs/Classes/UHUDPersistentPanel/Variables/.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Render opacity for buttons that are not active, usually because prereqs are not met or no building can produce it. This is only relevant if HUDOptions::PersistentTabButtonDisplayRule in ProjectSettings.h is set to NoShuffling_FadeUnavailables", "Docs/Classes/UHUDPersistentPanel/Variables/_1.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "In regards to the buttons on each tab, whether to display the names of buttons or not (like in C&C they will say \"Power Plant\" or \"Sniper\" for example).", "Docs/Classes/UHUDPersistentPanel/Variables/_2.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Widget switcher to switch between different tabs like buildings and infantry", "Docs/Classes/UHUDPersistentPanel/Variables/_3.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Holds different panel types. Indices do not corrispond to Switcher_Tabs children", "Docs/Classes/UHUDPersistentPanel/Variables/_4.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Maps tab type to the tab widget for that type. Using an array AND Tmap for fast iteration and quick lookups", "Docs/Classes/UHUDPersistentPanel/Variables/_5.html", [], "UHUDPersistentPanel");
addToContainers_variable("ActiveTab", "The tab that is active in Switcher_Tabs", "Docs/Classes/UHUDPersistentPanel/Variables/ActiveTab.html", ["active", "tab"], "UHUDPersistentPanel");
addToContainers_class("UHUDPersistentTabSwitchingButton", "Button to switch between persistent tabs", "Docs/Classes/UHUDPersistentTabSwitchingButton/UHUDPersistentTabSwitchingButton.html", ["h", "u", "d", "persistent", "tab", "switching", "button"], "");
addToContainers_function("UHUDPersistentTabSwitchingButton", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/UHUDPersistentTabSwitchingButton.html", ["h", "u", "d", "persistent", "tab", "switching", "button"], "UHUDPersistentTabSwitchingButton");
addToContainers_variable("", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Variables/.html", [], "UHUDPersistentTabSwitchingButton");
addToContainers_variable("", "Reference to persistent tab this is a part of", "Docs/Classes/UHUDPersistentTabSwitchingButton/Variables/_1.html", [], "UHUDPersistentTabSwitchingButton");
addToContainers_variable("", "Tab this button opens", "Docs/Classes/UHUDPersistentTabSwitchingButton/Variables/_2.html", [], "UHUDPersistentTabSwitchingButton");
addToContainers_struct("FButtonClickabilityInfo", "Struct that represents a button and stores whether it can be made activated or not", "Docs/Structs/FButtonClickabilityInfo/FButtonClickabilityInfo.html", ["button", "clickability", "info"], "");
addToContainers_function("FButtonClickabilityInfo", "Constructors", "Docs/Structs/FButtonClickabilityInfo/Functions/FButtonClickabilityInfo.html", ["button", "clickability", "info"], "FButtonClickabilityInfo");
addToContainers_function("FButtonClickabilityInfo", "", "Docs/Structs/FButtonClickabilityInfo/Functions/FButtonClickabilityInfo_1.html", ["button", "clickability", "info"], "FButtonClickabilityInfo");
addToContainers_function("FButtonClickabilityInfo", "", "Docs/Structs/FButtonClickabilityInfo/Functions/FButtonClickabilityInfo_2.html", ["button", "clickability", "info"], "FButtonClickabilityInfo");
addToContainers_variable("ButtonPtr", "", "Docs/Structs/FButtonClickabilityInfo/Variables/ButtonPtr.html", ["button", "ptr"], "FButtonClickabilityInfo");
addToContainers_variable("bArePrerequisitesMet", "", "Docs/Structs/FButtonClickabilityInfo/Variables/bArePrerequisitesMet.html", ["are", "prerequisites", "met"], "FButtonClickabilityInfo");
addToContainers_variable("bHasQueueSupport", "", "Docs/Structs/FButtonClickabilityInfo/Variables/bHasQueueSupport.html", ["has", "queue", "support"], "FButtonClickabilityInfo");
addToContainers_struct("FActiveButtonStateData", "Contains state data that an active button needs", "Docs/Structs/FActiveButtonStateData/FActiveButtonStateData.html", ["active", "button", "state", "data"], "");
addToContainers_function("FActiveButtonStateData", "", "Docs/Structs/FActiveButtonStateData/Functions/FActiveButtonStateData.html", ["active", "button", "state", "data"], "FActiveButtonStateData");
addToContainers_variable("Queue", "Queue that this button should monitor for progress bar purposes", "Docs/Structs/FActiveButtonStateData/Variables/Queue.html", [], "FActiveButtonStateData");
addToContainers_variable("", "Actor that owns the queue this button is linked to", "Docs/Structs/FActiveButtonStateData/Variables/.html", [], "FActiveButtonStateData");
addToContainers_variable("NumItemsInQueue", "The number of items in the queue this button is linked to. Here to avoid string to int conversion by reading value from what is in text block", "Docs/Structs/FActiveButtonStateData/Variables/NumItemsInQueue.html", ["num", "items", "in", "queue"], "FActiveButtonStateData");
addToContainers_variable("bIsAnotherButtonsPersistentQueueProducing", "Whether a persistent queue is producing something. Only relevant if button is for BuildBuilding", "Docs/Structs/FActiveButtonStateData/Variables/bIsAnotherButtonsPersistentQueueProducing.html", ["is", "another", "buttons", "persistent", "queue", "producing"], "FActiveButtonStateData");
addToContainers_variable("CannotFunctionReason", "The reason the button cannot carry out what is requested. Button is never made hit test invis. Instead we allow user to click it and will show a message if the action cannot be carried out. Only some reasons will ever be assigned to this - those that are event driven. Currently the only valid reason this variable can get is that another building is producing", "Docs/Structs/FActiveButtonStateData/Variables/CannotFunctionReason.html", ["cannot", "function", "reason"], "FActiveButtonStateData");
addToContainers_class("UHUDPersistentTab", "A single tab for a single category. Add as many UHUDPersistentTabButton to it as you need", "Docs/Classes/UHUDPersistentTab/UHUDPersistentTab.html", ["h", "u", "d", "persistent", "tab"], "");
addToContainers_variable("", "Type this is for. Do not use \"None\"", "Docs/Classes/UHUDPersistentTab/Variables/.html", [], "UHUDPersistentTab");
addToContainers_variable("", "Array of buttons. These buttons are never added/removed from any panel. To emulate shifting a button we basically just update all the buttons that would be affected", "Docs/Classes/UHUDPersistentTab/Variables/_1.html", [], "UHUDPersistentTab");
addToContainers_variable("ButtonIndices", "This array closly mirrors ButtonWidgets. It update is updated right before updating the button widgets. It exists for performance only", "Docs/Classes/UHUDPersistentTab/Variables/ButtonIndices.html", ["button", "indices"], "UHUDPersistentTab");
addToContainers_variable("ButtonStates", "Maps button type to its state. This container contains all the state info for a button", "Docs/Classes/UHUDPersistentTab/Variables/ButtonStates.html", ["button", "states"], "UHUDPersistentTab");
addToContainers_variable("UnactiveButtons", "Array of buttons that are inactive. Depending on the method used these buttons will either be completely hidden (and therefore unclickable) or they will have reduced opacity and will still be clickable but will show a warning when the player tries to click them", "Docs/Classes/UHUDPersistentTab/Variables/UnactiveButtons.html", ["unactive", "buttons"], "UHUDPersistentTab");
addToContainers_variable("", "Maps button type to the persistent tab button", "Docs/Classes/UHUDPersistentTab/Variables/_2.html", [], "UHUDPersistentTab");
addToContainers_variable("UnclickableButtonOpacity", "", "Docs/Classes/UHUDPersistentTab/Variables/UnclickableButtonOpacity.html", ["unclickable", "button", "opacity"], "UHUDPersistentTab");
addToContainers_variable("bShowTextLabelsOnButtons", "", "Docs/Classes/UHUDPersistentTab/Variables/bShowTextLabelsOnButtons.html", ["show", "text", "labels", "on", "buttons"], "UHUDPersistentTab");
addToContainers_variable("Widget2)", "For sorting UHUDPersistentPanel::Tabs", "Docs/Classes/UHUDPersistentTab/Variables/Widget2).html", [], "UHUDPersistentTab");
addToContainers_class("UHUDPersistentTabButton", "Button on a persistent tab. Very similar to UContextActionButton and may eventually become a child/parent of it or share the same parent.", "Docs/Classes/UHUDPersistentTabButton/UHUDPersistentTabButton.html", ["h", "u", "d", "persistent", "tab", "button"], "");
addToContainers_function("UHUDPersistentTabButton", "", "Docs/Classes/UHUDPersistentTabButton/Functions/UHUDPersistentTabButton.html", ["h", "u", "d", "persistent", "tab", "button"], "UHUDPersistentTabButton");
addToContainers_variable("", "", "Docs/Classes/UHUDPersistentTabButton/Variables/.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "The text that shows on the button describing what the button is for", "Docs/Classes/UHUDPersistentTabButton/Variables/_1.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "More text. This text will show something like \"Ready\" when a building finishes production using the BuildsInTab build method letting the user know it is ready to place, or could show the number of units queued for other Train button types", "Docs/Classes/UHUDPersistentTabButton/Variables/_2.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to tab that owns this button", "Docs/Classes/UHUDPersistentTabButton/Variables/_3.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/UHUDPersistentTabButton/Variables/_4.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to player controller. Doubling up on PC because SMyButton has one too", "Docs/Classes/UHUDPersistentTabButton/Variables/_5.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to player state", "Docs/Classes/UHUDPersistentTabButton/Variables/_6.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Faction info of player state", "Docs/Classes/UHUDPersistentTabButton/Variables/_7.html", [], "UHUDPersistentTabButton");
addToContainers_variable("Button", "Button type this button represents", "Docs/Classes/UHUDPersistentTabButton/Variables/Button.html", [], "UHUDPersistentTabButton");
addToContainers_variable("StateInfo", "Pointer to info struct that holds all the state for this button", "Docs/Classes/UHUDPersistentTabButton/Variables/StateInfo.html", ["state", "info"], "UHUDPersistentTabButton");
addToContainers_variable("OriginalAlpha", "", "Docs/Classes/UHUDPersistentTabButton/Variables/OriginalAlpha.html", ["original", "alpha"], "UHUDPersistentTabButton");
addToContainers_variable("UnclickableAlpha", "", "Docs/Classes/UHUDPersistentTabButton/Variables/UnclickableAlpha.html", ["unclickable", "alpha"], "UHUDPersistentTabButton");
addToContainers_class("UMinimap", "Widget for the minimap", "Docs/Classes/UMinimap/UMinimap.html", [], "");
addToContainers_function("UMinimap", "", "Docs/Classes/UMinimap/Functions/UMinimap.html", [], "UMinimap");
addToContainers_variable("", "Color to draw selectables", "Docs/Classes/UMinimap/Variables/.html", [], "UMinimap");
addToContainers_variable("", "Image of minimap. Set image is landscape and extra parts like selectables and fog of war are drawn overtop", "Docs/Classes/UMinimap/Variables/_1.html", [], "UMinimap");
addToContainers_variable("MapCenter", "2D coords for center of map, but flipped so X is Y and Y is X", "Docs/Classes/UMinimap/Variables/MapCenter.html", ["map", "center"], "UMinimap");
addToContainers_variable("MapDimensionsInverse", "1.f / MapDimensions. MapDimesnions = length and width of map in unreal units", "Docs/Classes/UMinimap/Variables/MapDimensionsInverse.html", ["map", "dimensions", "inverse"], "UMinimap");
addToContainers_variable("ImageSizeInPixels", "Dimensions of the minimap image in pixels", "Docs/Classes/UMinimap/Variables/ImageSizeInPixels.html", ["image", "size", "in", "pixels"], "UMinimap");
addToContainers_variable("ViewportSizeInPixels", "This needs to be updated whenever resolution changes", "Docs/Classes/UMinimap/Variables/ViewportSizeInPixels.html", ["viewport", "size", "in", "pixels"], "UMinimap");
addToContainers_class("UTooltipWidget_InventoryItem", "Tooltip widget for an inventory item. Some notes: - Mess around with each individual widget\'s anchors if you can\'t see them - You will likely want to enable text wrapping for the text blocks", "Docs/Classes/UTooltipWidget_InventoryItem/UTooltipWidget_InventoryItem.html", ["tooltip", "widget_", "inventory", "item"], "");
addToContainers_function("UTooltipWidget_InventoryItem", "", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/UTooltipWidget_InventoryItem.html", ["tooltip", "widget_", "inventory", "item"], "UTooltipWidget_InventoryItem");
addToContainers_variable("DisplayedInventoryItem", "The inventory item actor this widget is displaying info for. If this widget is not displaying info for an inventory item actor but instead something else like say an inventory slot then this will be null", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/DisplayedInventoryItem.html", ["displayed", "inventory", "item"], "UTooltipWidget_InventoryItem");
addToContainers_variable("DisplayedItemInfo", "Pointer to the inventory iteminfo this widget is displaying", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/DisplayedItemInfo.html", ["displayed", "item", "info"], "UTooltipWidget_InventoryItem");
addToContainers_variable("DisplayedNumInStackOrNumCharges", "Number in stack or num charges this widget is displaying. -1 means blank text", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/DisplayedNumInStackOrNumCharges.html", ["displayed", "num", "in", "stack", "or", "num", "charges"], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text that shows the name of the item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text to show the description of the item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_1.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text to show the stat changes from the item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_2.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Flavor text", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_3.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Icon of item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_4.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text to show either the number in the stack or number of charges", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_5.html", [], "UTooltipWidget_InventoryItem");
addToContainers_class("UTooltipWidget_Ability", "Tooltip widget for a selectable\'s action bar", "Docs/Classes/UTooltipWidget_Ability/UTooltipWidget_Ability.html", ["tooltip", "widget_", "ability"], "");
addToContainers_variable("DisplayedButtonType", "The button that this widget is displaying info for", "Docs/Classes/UTooltipWidget_Ability/Variables/DisplayedButtonType.html", ["displayed", "button", "type"], "UTooltipWidget_Ability");
addToContainers_variable("", "Text to show the name of the ability", "Docs/Classes/UTooltipWidget_Ability/Variables/.html", [], "UTooltipWidget_Ability");
addToContainers_variable("", "Text to show the description of the ability", "Docs/Classes/UTooltipWidget_Ability/Variables/_1.html", [], "UTooltipWidget_Ability");
addToContainers_class("UTooltipWidget_Production", "Tooltip widget for a buildings/units/upgrades. Has 5 different text fields for: - Name - Description - Cost (TODO) - Build time - Prerequisites", "Docs/Classes/UTooltipWidget_Production/UTooltipWidget_Production.html", ["tooltip", "widget_", "production"], "");
addToContainers_variable("DisplayedInfo", "Info struct for what this widget is displaying info for", "Docs/Classes/UTooltipWidget_Production/Variables/DisplayedInfo.html", ["displayed", "info"], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the name of the thing", "Docs/Classes/UTooltipWidget_Production/Variables/.html", [], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the description of the thing", "Docs/Classes/UTooltipWidget_Production/Variables/_1.html", [], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the build time for the thing", "Docs/Classes/UTooltipWidget_Production/Variables/_2.html", [], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the prerequisites for the thing. Just shows all prerequisites and does not differentiate between those already obtained or not", "Docs/Classes/UTooltipWidget_Production/Variables/_3.html", [], "UTooltipWidget_Production");
addToContainers_class("UTooltipWidget_GlobalSkillsPanelButton", "Tooltip for a button on the global skills panel", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelButton/UTooltipWidget_GlobalSkillsPanelButton.html", ["tooltip", "widget_", "global", "skills", "panel", "button"], "");
addToContainers_variable("DisplayedAbilityState", "--------------------------------------------------", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelButton/Variables/DisplayedAbilityState.html", ["displayed", "ability", "state"], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_variable("DisplayedAbilityInfoStruct", "", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelButton/Variables/DisplayedAbilityInfoStruct.html", ["displayed", "ability", "info", "struct"], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_variable("", "Text to show the name of the ability", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelButton/Variables/.html", [], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_variable("", "Text to show the description of the ability", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelButton/Variables/_1.html", [], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_class("UTooltipWidget_CommanderSkillTreeNode", "Tooltip widget for a node in the commander\'s skill tree", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/UTooltipWidget_CommanderSkillTreeNode.html", ["tooltip", "widget_", "commander", "skill", "tree", "node"], "");
addToContainers_function("UTooltipWidget_CommanderSkillTreeNode", "", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Functions/UTooltipWidget_CommanderSkillTreeNode.html", ["tooltip", "widget_", "commander", "skill", "tree", "node"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("DisplayedNodeInfo", "--------------------------------------------------", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/DisplayedNodeInfo.html", ["displayed", "node", "info"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Panel widget to put all the text and image widget\'s for the current aquried rank on. If you use any of the Aquired widgets then they will have to be children of this", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Name of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_1.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Image for ability", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_2.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Text to show the description", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_3.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Panel widget to put all the text and image widget\'s for the next rank on. If you use any of the Next widgets then they will have to be children of this", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_4.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Cost of next rank of ability", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_5.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "This is the color to color the next rank skill point cost text when the player does not have enough skill points to purchase the skill.", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_6.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("CostTextOriginalColor", "", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/CostTextOriginalColor.html", ["cost", "text", "original", "color"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Text that shows missing requirements of next rank of ability", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_7.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Name of the next rank of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_8.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Image for next rank of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_9.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Text to show the description for the next rank of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTreeNode/Variables/_10.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_class("UIUtilities", "Utility functions for user interface", "Docs/Classes/UIUtilities/UIUtilities.html", ["i", "utilities"], "");
addToContainers_class("UEditorPlayStartingResourcesWidget", "Widget for adjusting a single starting resource", "Docs/Classes/UEditorPlayStartingResourcesWidget/UEditorPlayStartingResourcesWidget.html", ["editor", "play", "starting", "resources", "widget"], "");
addToContainers_variable("", "Text that shows what starting resources will be used", "Docs/Classes/UEditorPlayStartingResourcesWidget/Variables/.html", [], "UEditorPlayStartingResourcesWidget");
addToContainers_class("UPIEHumanPlayerInfoProxy", "This is a UObject that just contains FPIEPlayerInfo. It exists so AddDynamic can point to it.", "Docs/Classes/UPIEHumanPlayerInfoProxy/UPIEHumanPlayerInfoProxy.html", ["p", "i", "e", "human", "player", "info", "proxy"], "");
addToContainers_variable("EnumStringObject", "--------------------------------------------------------------", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/EnumStringObject.html", ["enum", "string", "object"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("PlaySettingsWidget", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/PlaySettingsWidget.html", ["play", "settings", "widget"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("PlayerIndex", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/PlayerIndex.html", ["player", "index"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("PlayerInfo", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/PlayerInfo.html", ["player", "info"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("Text_PlayerIndex", "Widgets", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/Text_PlayerIndex.html", ["text_", "player", "index"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("ComboBox_Team", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/ComboBox_Team.html", ["combo", "box_", "team"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("ComboBox_Faction", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/ComboBox_Faction.html", ["combo", "box_", "faction"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("Text_StartingSpot", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/Text_StartingSpot.html", ["text_", "starting", "spot"], "UPIEHumanPlayerInfoProxy");
addToContainers_class("UPIECPUPlayerInfoProxy", "Same as human version except for CPU players", "Docs/Classes/UPIECPUPlayerInfoProxy/UPIECPUPlayerInfoProxy.html", ["p", "i", "e", "c", "p", "u", "player", "info", "proxy"], "");
addToContainers_variable("EnumStringObject", "--------------------------------------------------------------", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/EnumStringObject.html", ["enum", "string", "object"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("PlaySettingsWidget", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/PlaySettingsWidget.html", ["play", "settings", "widget"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("PlayerIndex", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/PlayerIndex.html", ["player", "index"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("PlayerInfo", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/PlayerInfo.html", ["player", "info"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("Text_PlayerIndex", "Widgets", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/Text_PlayerIndex.html", ["text_", "player", "index"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("ComboBox_Team", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/ComboBox_Team.html", ["combo", "box_", "team"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("ComboBox_Faction", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/ComboBox_Faction.html", ["combo", "box_", "faction"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("Text_StartingSpot", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/Text_StartingSpot.html", ["text_", "starting", "spot"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("ComboBox_CPUDifficulty", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/ComboBox_CPUDifficulty.html", ["combo", "box_", "c", "p", "u", "difficulty"], "UPIECPUPlayerInfoProxy");
addToContainers_class("UEditorPlaySettingsWidget", "Editor utility widget that lets you adjust the PIE/standalone settings. Not abstract - has a default \'works out of the box\' implementation", "Docs/Classes/UEditorPlaySettingsWidget/UEditorPlaySettingsWidget.html", ["editor", "play", "settings", "widget"], "");
addToContainers_function("UEditorPlaySettingsWidget", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UEditorPlaySettingsWidget.html", ["editor", "play", "settings", "widget"], "UEditorPlaySettingsWidget");
addToContainers_variable("EnumStringObject", "This object mappings from enum values to string representations", "Docs/Classes/UEditorPlaySettingsWidget/Variables/EnumStringObject.html", ["enum", "string", "object"], "UEditorPlaySettingsWidget");
addToContainers_variable("SkippingOption", "What is currently set as the skipping option", "Docs/Classes/UEditorPlaySettingsWidget/Variables/SkippingOption.html", ["skipping", "option"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Combo box to change what is skipped", "Docs/Classes/UEditorPlaySettingsWidget/Variables/.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Text that shows what will be skipped", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_1.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button that lets you decide what to skip", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_2.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button that lets you decide what to skip", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_3.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Teams, faction etc for human PIE players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_4.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Teams, faction etc for CPU PIE players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_5.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("HumanPlayerInfoCopy", "Copy of what\'s in HumanPlayerInfo and CPUPlayerInfo", "Docs/Classes/UEditorPlaySettingsWidget/Variables/HumanPlayerInfoCopy.html", ["human", "player", "info", "copy"], "UEditorPlaySettingsWidget");
addToContainers_variable("CPUPlayerInfoCopy", "", "Docs/Classes/UEditorPlaySettingsWidget/Variables/CPUPlayerInfoCopy.html", ["p", "u", "player", "info", "copy"], "UEditorPlaySettingsWidget");
addToContainers_variable("NumCPUPlayers", "How many CPU players to have in a PIE/standalone match", "Docs/Classes/UEditorPlaySettingsWidget/Variables/NumCPUPlayers.html", ["num", "c", "p", "u", "players"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Grid to show human players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_6.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Grid to show CPU players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_7.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Combo box to choose how many CPU players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_8.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Text that shows how many CPU players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_9.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to decrease how many players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_10.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to increase how many players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_11.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("StartingResourceAmounts", "Starting resources array", "Docs/Classes/UEditorPlaySettingsWidget/Variables/StartingResourceAmounts.html", ["starting", "resource", "amounts"], "UEditorPlaySettingsWidget");
addToContainers_variable("StartingResourceConfig", "Make sure to update this as resource amounts change", "Docs/Classes/UEditorPlaySettingsWidget/Variables/StartingResourceConfig.html", ["starting", "resource", "config"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Panel that shows all the single starting resources widgets", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_12.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "The widget for a single resource", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_13.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("DefeatCondition", "The currently set defeat condition", "Docs/Classes/UEditorPlaySettingsWidget/Variables/DefeatCondition.html", ["defeat", "condition"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Drop down box to adjust defeat condition", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_14.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Text that shows what the defeat condition is", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_15.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to adjust left what the defeat condition is", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_16.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to adjust right what the defeat condition is", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_17.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("bInitiallyShowCheatWidget", "The currently set cheat widget option", "Docs/Classes/UEditorPlaySettingsWidget/Variables/bInitiallyShowCheatWidget.html", ["initially", "show", "cheat", "widget"], "UEditorPlaySettingsWidget");
addToContainers_variable("CheatWidget_BP", "", "Docs/Classes/UEditorPlaySettingsWidget/Variables/CheatWidget_BP.html", ["cheat", "widget_", "b", "p"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Toggles whether the in match cheat widget is shown by default when PIE/standalone starts", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_18.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "A drop down box to select the class for the cheat widget", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_19.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("InvalidHumanOwnerRule", "Widget to choose the rule for when PIE/standalone starts and ther is a selectable placed on the map that cannot be assigned to it\'s owner e.g. owner is another faction", "Docs/Classes/UEditorPlaySettingsWidget/Variables/InvalidHumanOwnerRule.html", ["invalid", "human", "owner", "rule"], "UEditorPlaySettingsWidget");
addToContainers_variable("InvalidCPUOwnerRule", "", "Docs/Classes/UEditorPlaySettingsWidget/Variables/InvalidCPUOwnerRule.html", ["invalid", "c", "p", "u", "owner", "rule"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Drop down box to change the invalid human owner rule", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_20.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Drop down box for invalid CPU owner", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_21.html", [], "UEditorPlaySettingsWidget");
addToContainers_class("UCreateDocumentationConfirmationWidget", "Widget that asks \'are you sure you want to create documentation?\'", "Docs/Classes/UCreateDocumentationConfirmationWidget/UCreateDocumentationConfirmationWidget.html", ["create", "documentation", "confirmation", "widget"], "");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Classes/UCreateDocumentationConfirmationWidget/Variables/.html", [], "UCreateDocumentationConfirmationWidget");
addToContainers_variable("", "Button to say \'do not create documentation\'", "Docs/Classes/UCreateDocumentationConfirmationWidget/Variables/_1.html", [], "UCreateDocumentationConfirmationWidget");
addToContainers_class("UPluginMaintainerEditorWidget", "This widget is intended to only be used by the person who maintains the plugin (Philippe Bouchet)", "Docs/Classes/UPluginMaintainerEditorWidget/UPluginMaintainerEditorWidget.html", ["plugin", "maintainer", "editor", "widget"], "");
addToContainers_variable("", "Parses project and creates documentation files and possibly uploads them to github.com too.", "Docs/Classes/UPluginMaintainerEditorWidget/Variables/.html", [], "UPluginMaintainerEditorWidget");
addToContainers_variable("", "Prints to log the contents of a file for debugging. Enter a filename and it will log it\'s contents. Doesn\'t really have anything to do with being plugin maintainer. You can optionally enter a number after the filename and then only the file up to that char number will be logged. e.g. UIUtilities.h 200", "Docs/Classes/UPluginMaintainerEditorWidget/Variables/_1.html", [], "UPluginMaintainerEditorWidget");
addToContainers_class("UCommanderSkillTreeNodeWidget", "Single node on commander\'s skill tree", "Docs/Classes/UCommanderSkillTreeNodeWidget/UCommanderSkillTreeNodeWidget.html", ["commander", "skill", "tree", "node", "widget"], "");
addToContainers_function("UCommanderSkillTreeNodeWidget", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/UCommanderSkillTreeNodeWidget.html", ["commander", "skill", "tree", "node", "widget"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("UNAQUIRABLE_COLOR_MULTIPLIER", "Tint to multiply button color by when it cannot be aquired either because: - the player\'s rank is not high enough - the player does not have enough skill points", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/UNAQUIRABLE_COLOR_MULTIPLIER.html", ["n", "a", "q", "u", "i", "r", "a", "b", "l", "e_", "c", "o", "l", "o", "r_", "m", "u", "l", "t", "i", "p", "l", "i", "e", "r"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("GI", "------------------------------------------------------", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/GI.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("PC", "Pointer to player controller... even though there\'s one on the slate button", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/PC.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("OriginalColor", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/OriginalColor.html", ["original", "color"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("", "Color of node when it has been aquired. My notes: Probably can put this on the tree widget instead since all nodes will likely be the same color when aquired", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("NodeInfo", "Pointer to the info struct this node is for", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/NodeInfo.html", ["node", "info"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("", "The same type of node in a tree is probably not allowed", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/_1.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("AllNodesArrayIndex", "The index in UCommanderSkillTreeWidget::AllNodes that this widget is at. Note: I need to make sure this is the same across server/clients since we send this as an RPC param to signal which node we\'re refering to", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/AllNodesArrayIndex.html", ["all", "nodes", "array", "index"], "UCommanderSkillTreeNodeWidget");
addToContainers_struct("FNodeArray", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FNodeArray/FNodeArray.html", ["node", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/FNodeArray/Variables/Array.html", [], "FNodeArray");
addToContainers_class("UCommanderSkillTreeWidget", "The widget that is the skill tree for the commander. Place skill tree node widgets onto it. Cannot have duplicate of the same node type.", "Docs/Classes/UCommanderSkillTreeWidget/UCommanderSkillTreeWidget.html", ["commander", "skill", "tree", "widget"], "");
addToContainers_function("UCommanderSkillTreeWidget", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/UCommanderSkillTreeWidget.html", ["commander", "skill", "tree", "widget"], "UCommanderSkillTreeWidget");
addToContainers_variable("bShownOrPlayingShowAnim", "If false then this is either hidden or playing the hide animation", "Docs/Classes/UCommanderSkillTreeWidget/Variables/bShownOrPlayingShowAnim.html", ["shown", "or", "playing", "show", "anim"], "UCommanderSkillTreeWidget");
addToContainers_variable("NodesUnlockedByRank", "Maps rank to the nodes that are unlocked when that rank is aquired. Might not include and entry for rank 0. The same node can appear in different value arrays e.g. rank 1 of ability unlocks at commander rank 1 but ability rank 2 unlocks at commander rank 2", "Docs/Classes/UCommanderSkillTreeWidget/Variables/NodesUnlockedByRank.html", ["nodes", "unlocked", "by", "rank"], "UCommanderSkillTreeWidget");
addToContainers_variable("RankHighEnoughButNotFullyAquiredNodes", "Nodes that the player does not have enough skill points to aquire or prereqs not met but they are a high enough rank. This will include nodes that the player may have aquired the lower ranks of the ability but they have not aquired every rank of the ability yet", "Docs/Classes/UCommanderSkillTreeWidget/Variables/RankHighEnoughButNotFullyAquiredNodes.html", ["rank", "high", "enough", "but", "not", "fully", "aquired", "nodes"], "UCommanderSkillTreeWidget");
addToContainers_variable("", "If you name a widget animation this then it will be played when this widget is requested to be shown. You are in charge of making it SelfHitTestInvisible/Visible at a certain point in the animation.", "Docs/Classes/UCommanderSkillTreeWidget/Variables/.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "If you name a widget animation this then it will be played when this widget is requested to be hidden. You are in charge of making it HitTestInvisible and/or Hidden at a certain point in the animation.", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_1.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("ShowAnimationFName", "", "Docs/Classes/UCommanderSkillTreeWidget/Variables/ShowAnimationFName.html", ["show", "animation", "f", "name"], "UCommanderSkillTreeWidget");
addToContainers_variable("HideAnimationFName", "", "Docs/Classes/UCommanderSkillTreeWidget/Variables/HideAnimationFName.html", ["hide", "animation", "f", "name"], "UCommanderSkillTreeWidget");
addToContainers_variable("ShowAnim", "Animations to play when the widget is requested to be shown hidden. Can be null implying you do not want an animation", "Docs/Classes/UCommanderSkillTreeWidget/Variables/ShowAnim.html", ["show", "anim"], "UCommanderSkillTreeWidget");
addToContainers_variable("HideAnim", "", "Docs/Classes/UCommanderSkillTreeWidget/Variables/HideAnim.html", ["hide", "anim"], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays the player\'s rank", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_2.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays how many skill points the player has not spent", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_3.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays how much experience the player has towards the next level. Not cumulative", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_4.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays how much experience the player requires to reach the next level", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_5.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Progress bar to display how much experience the player has", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_6.html", [], "UCommanderSkillTreeWidget");
addToContainers_class("UGlobalSkillsPanel", "This panel holds buttons to abilities. It is like the panel you see on the side of the screen in C&C Generals that has your commander abilities on it such as fuel air bomb or artillery strike, but it may also be possible to have selectable abilities also appear on it such as a nuke. You will need to add enough UGlobalSkillsPanelButtons to it to accomodate the maximum number of abilities that can appear on the panel. About animations: There will be an animation that plays when you aquire the first button. This will be an animation on this widget. Then there will be another animation that will play for each button when it becomes active.", "Docs/Classes/UGlobalSkillsPanel/UGlobalSkillsPanel.html", ["global", "skills", "panel"], "");
addToContainers_function("UGlobalSkillsPanel", "", "Docs/Classes/UGlobalSkillsPanel/Functions/UGlobalSkillsPanel.html", ["global", "skills", "panel"], "UGlobalSkillsPanel");
addToContainers_variable("CoolingDownAbilities", "Buttons whose ability is cooling down", "Docs/Classes/UGlobalSkillsPanel/Variables/CoolingDownAbilities.html", ["cooling", "down", "abilities"], "UGlobalSkillsPanel");
addToContainers_variable("AllButtons", "All the buttons on the panel. The lower index ones will be made active first", "Docs/Classes/UGlobalSkillsPanel/Variables/AllButtons.html", ["all", "buttons"], "UGlobalSkillsPanel");
addToContainers_variable("", "If you name a widget animation this then it will be played when the first button becomes active", "Docs/Classes/UGlobalSkillsPanel/Variables/.html", [], "UGlobalSkillsPanel");
addToContainers_variable("EnterAnimFName", "", "Docs/Classes/UGlobalSkillsPanel/Variables/EnterAnimFName.html", ["enter", "anim", "f", "name"], "UGlobalSkillsPanel");
addToContainers_variable("EnterAnim", "", "Docs/Classes/UGlobalSkillsPanel/Variables/EnterAnim.html", ["enter", "anim"], "UGlobalSkillsPanel");
addToContainers_variable("NumActiveButtons", "", "Docs/Classes/UGlobalSkillsPanel/Variables/NumActiveButtons.html", ["num", "active", "buttons"], "UGlobalSkillsPanel");
addToContainers_class("UGlobalSkillsPanelButton", "A single button on the global skills panel. Made this a UUserWidget so I could get animations to play on it because I want a animation for when the button becomes active.", "Docs/Classes/UGlobalSkillsPanelButton/UGlobalSkillsPanelButton.html", ["global", "skills", "panel", "button"], "");
addToContainers_function("UGlobalSkillsPanelButton", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/UGlobalSkillsPanelButton.html", ["global", "skills", "panel", "button"], "UGlobalSkillsPanelButton");
addToContainers_variable("", "If you name a widget animation this then it will play when the button becomes active", "Docs/Classes/UGlobalSkillsPanelButton/Variables/.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("EnterAnimFName", "", "Docs/Classes/UGlobalSkillsPanelButton/Variables/EnterAnimFName.html", ["enter", "anim", "f", "name"], "UGlobalSkillsPanelButton");
addToContainers_variable("EnterAnim", "Animation to play when the button becomes active", "Docs/Classes/UGlobalSkillsPanelButton/Variables/EnterAnim.html", ["enter", "anim"], "UGlobalSkillsPanelButton");
addToContainers_variable("", "Kind of pivital to this whole widget; shouldn\'t really be optional", "Docs/Classes/UGlobalSkillsPanelButton/Variables/_1.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("", "Progress bar to show the cooldown remaining of the ability", "Docs/Classes/UGlobalSkillsPanelButton/Variables/_2.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("OriginalOpacity", "", "Docs/Classes/UGlobalSkillsPanelButton/Variables/OriginalOpacity.html", ["original", "opacity"], "UGlobalSkillsPanelButton");
addToContainers_variable("", "What to multiply render opacity by when the button\'s ability is out of charges", "Docs/Classes/UGlobalSkillsPanelButton/Variables/_3.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("AssignedCommanderAbilityInfo", "The assigned commander ability info", "Docs/Classes/UGlobalSkillsPanelButton/Variables/AssignedCommanderAbilityInfo.html", ["assigned", "commander", "ability", "info"], "UGlobalSkillsPanelButton");
addToContainers_class("UInfantryControllerDebugWidget", "Widget to help debug AInfantryController. Has default implementation. Ahhh never used this", "Docs/Classes/UInfantryControllerDebugWidget/UInfantryControllerDebugWidget.html", ["infantry", "controller", "debug", "widget"], "");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Classes/UInfantryControllerDebugWidget/Variables/.html", [], "UInfantryControllerDebugWidget");
addToContainers_variable("", "", "Docs/Classes/UInfantryControllerDebugWidget/Variables/_1.html", [], "UInfantryControllerDebugWidget");
addToContainers_class("UInMatchConfirmationWidget", "Widgets that appear that say \'are you sure?\' TODO add a container and populate in ctor all the BindWidget widgest just like UInGameWidgetBase", "Docs/Classes/UInMatchConfirmationWidget/UInMatchConfirmationWidget.html", ["in", "match", "confirmation", "widget"], "");
addToContainers_variable("Purpose", "-------------------------------------------------------", "Docs/Classes/UInMatchConfirmationWidget/Variables/Purpose.html", [], "UInMatchConfirmationWidget");
addToContainers_variable("", "The yes button", "Docs/Classes/UInMatchConfirmationWidget/Variables/.html", [], "UInMatchConfirmationWidget");
addToContainers_variable("", "The no button", "Docs/Classes/UInMatchConfirmationWidget/Variables/_1.html", [], "UInMatchConfirmationWidget");
addToContainers_class("UPauseMenu", "In match pause menu Have not implemented animations for this or the confirmation widgets. If I do make sure to modify IsShowingOrPlayingShowAnimation() to take into account animations. Side note and this goes for I think all UUserWidget that get added to the HUD: The anchors in the top left corner seem to be the way to go. If you anchor them full screen then they do not show correctly. But just like the tooltip widgets I think I can get them full screen.", "Docs/Classes/UPauseMenu/UPauseMenu.html", ["pause", "menu"], "");
addToContainers_variable("SETTINGS_WIDGET_Z_ORDER", "", "Docs/Classes/UPauseMenu/Variables/SETTINGS_WIDGET_Z_ORDER.html", ["e", "t", "t", "i", "n", "g", "s_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UPauseMenu");
addToContainers_variable("CONFIRMATION_WIDGET_Z_ORDER", "", "Docs/Classes/UPauseMenu/Variables/CONFIRMATION_WIDGET_Z_ORDER.html", ["o", "n", "f", "i", "r", "m", "a", "t", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UPauseMenu");
addToContainers_variable("", "Button to close the pause menu and resume playing", "Docs/Classes/UPauseMenu/Variables/.html", [], "UPauseMenu");
addToContainers_variable("", "Button to show the settings menu", "Docs/Classes/UPauseMenu/Variables/_1.html", [], "UPauseMenu");
addToContainers_variable("SettingsWidget", "", "Docs/Classes/UPauseMenu/Variables/SettingsWidget.html", ["settings", "widget"], "UPauseMenu");
addToContainers_variable("", "The widget to use for the settings menu", "Docs/Classes/UPauseMenu/Variables/_2.html", [], "UPauseMenu");
addToContainers_variable("", "Button to exit the match and return to the main menu", "Docs/Classes/UPauseMenu/Variables/_3.html", [], "UPauseMenu");
addToContainers_variable("ConfirmExitToMainMenuWidget", "", "Docs/Classes/UPauseMenu/Variables/ConfirmExitToMainMenuWidget.html", ["confirm", "exit", "to", "main", "menu", "widget"], "UPauseMenu");
addToContainers_variable("", "Optional widget to appear when the player clicks the \'return to main menu\' button", "Docs/Classes/UPauseMenu/Variables/_4.html", [], "UPauseMenu");
addToContainers_variable("", "Button to exit the match and return to the operating system", "Docs/Classes/UPauseMenu/Variables/_5.html", [], "UPauseMenu");
addToContainers_variable("ConfirmExitToOperatingSystemWidget", "", "Docs/Classes/UPauseMenu/Variables/ConfirmExitToOperatingSystemWidget.html", ["confirm", "exit", "to", "operating", "system", "widget"], "UPauseMenu");
addToContainers_variable("", "Optional widget to appear when the player clicks the \'return to operating system\' button", "Docs/Classes/UPauseMenu/Variables/_6.html", [], "UPauseMenu");
addToContainers_struct("FButtonArrayEntry", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FButtonArrayEntry/FButtonArrayEntry.html", ["button", "array", "entry"], "");
addToContainers_function("FButtonArrayEntry", "Never call this ctor", "Docs/Structs/FButtonArrayEntry/Functions/FButtonArrayEntry.html", ["button", "array", "entry"], "FButtonArrayEntry");
addToContainers_function("FButtonArrayEntry", "", "Docs/Structs/FButtonArrayEntry/Functions/FButtonArrayEntry_1.html", ["button", "array", "entry"], "FButtonArrayEntry");
addToContainers_variable("Button", "", "Docs/Structs/FButtonArrayEntry/Variables/Button.html", [], "FButtonArrayEntry");
addToContainers_variable("AssignedPlayer", "", "Docs/Structs/FButtonArrayEntry/Variables/AssignedPlayer.html", ["assigned", "player"], "FButtonArrayEntry");
addToContainers_variable("ButtonOriginalOpacity", "", "Docs/Structs/FButtonArrayEntry/Variables/ButtonOriginalOpacity.html", ["button", "original", "opacity"], "FButtonArrayEntry");
addToContainers_variable("bHasAssignedPlayerBeenDefeated", "", "Docs/Structs/FButtonArrayEntry/Variables/bHasAssignedPlayerBeenDefeated.html", ["has", "assigned", "player", "been", "defeated"], "FButtonArrayEntry");
addToContainers_variable("AssignedPlayersAffiliation", "", "Docs/Structs/FButtonArrayEntry/Variables/AssignedPlayersAffiliation.html", ["assigned", "players", "affiliation"], "FButtonArrayEntry");
addToContainers_class("UPlayerTargetingPanel", "A panel that shows players and makes them clickable. This widget is what would appear if you have an ability that targets a player and not a selectable. In editor add UMyButton widgets to it. These will be the buttons that will show the players as targets. Note: when you move a button around in the editor it gets rebuilt or something. Anyway point is is that it will now be last for the all widgets iteration. Maybe I should allow the user to tag which over the buttons should be.", "Docs/Classes/UPlayerTargetingPanel/UPlayerTargetingPanel.html", ["player", "targeting", "panel"], "");
addToContainers_variable("AssignedAbilityInfo", "Pointer to info struct for the ability this widget is being displayed for", "Docs/Classes/UPlayerTargetingPanel/Variables/AssignedAbilityInfo.html", ["assigned", "ability", "info"], "UPlayerTargetingPanel");
addToContainers_variable("Buttons", "All the buttons on the panel that are used for player targeting", "Docs/Classes/UPlayerTargetingPanel/Variables/Buttons.html", [], "UPlayerTargetingPanel");
addToContainers_variable("", "If you name a widget animation this then it will play whenever a request is made to show this panel. You are in charge of making the panel SelfHitTestInvisible/Visible at some point in the anim.", "Docs/Classes/UPlayerTargetingPanel/Variables/.html", [], "UPlayerTargetingPanel");
addToContainers_variable("", "If you name a widget animation this then it will play whenever a request is made to hide this panel. You are in charge of setting the visibility of the panel with the anim", "Docs/Classes/UPlayerTargetingPanel/Variables/_1.html", [], "UPlayerTargetingPanel");
addToContainers_variable("ShowAnimFName", "", "Docs/Classes/UPlayerTargetingPanel/Variables/ShowAnimFName.html", ["show", "anim", "f", "name"], "UPlayerTargetingPanel");
addToContainers_variable("HideAnimFName", "", "Docs/Classes/UPlayerTargetingPanel/Variables/HideAnimFName.html", ["hide", "anim", "f", "name"], "UPlayerTargetingPanel");
addToContainers_variable("ShowAnim", "", "Docs/Classes/UPlayerTargetingPanel/Variables/ShowAnim.html", ["show", "anim"], "UPlayerTargetingPanel");
addToContainers_variable("HideAnim", "", "Docs/Classes/UPlayerTargetingPanel/Variables/HideAnim.html", ["hide", "anim"], "UPlayerTargetingPanel");
addToContainers_variable("bShownOrPlayingShowAnim", "If false then the widget is hidden or playing the hide anim", "Docs/Classes/UPlayerTargetingPanel/Variables/bShownOrPlayingShowAnim.html", ["shown", "or", "playing", "show", "anim"], "UPlayerTargetingPanel");
addToContainers_variable("", "Button that will close the targeting panel", "Docs/Classes/UPlayerTargetingPanel/Variables/_2.html", [], "UPlayerTargetingPanel");
addToContainers_class("UMyButton", "My button class. Uses my slate button class as its slate widget. This button does not handle (or consume) mouse press/release events. So do not stack buttons on top of each other in widget designer. Generally this isn\'t something you do anyway.", "Docs/Classes/UMyButton/UMyButton.html", ["my", "button"], "");
addToContainers_function("UMyButton", "Sets default values", "Docs/Classes/UMyButton/Functions/UMyButton.html", ["my", "button"], "UMyButton");
addToContainers_variable("Purpose", "What this button is used for", "Docs/Classes/UMyButton/Variables/Purpose.html", [], "UMyButton");
addToContainers_variable("", "The alignment of the content horizontally.", "Docs/Classes/UMyButton/Variables/.html", [], "UMyButton");
addToContainers_variable("", "The alignment of the content vertically.", "Docs/Classes/UMyButton/Variables/_1.html", [], "UMyButton");
addToContainers_variable("", "Color and opacity multiplier of content in the border", "Docs/Classes/UMyButton/Variables/_2.html", [], "UMyButton");
addToContainers_variable("", "The padding area between the slot and the content it contains.", "Docs/Classes/UMyButton/Variables/_3.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw as the background", "Docs/Classes/UMyButton/Variables/_4.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw when button is hovered by the mouse", "Docs/Classes/UMyButton/Variables/_5.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw when button is pressed by LMB/RMB/possibly.more", "Docs/Classes/UMyButton/Variables/_6.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw when button is highlighted. I recently added this variable. I might forget to set it at a lot of times. Over time I will correct those", "Docs/Classes/UMyButton/Variables/_7.html", [], "UMyButton");
addToContainers_variable("", "Color and opacity of the actual border image", "Docs/Classes/UMyButton/Variables/_8.html", [], "UMyButton");
addToContainers_variable("", "Scales the computed desired size of this border and its contents. Useful for making things that slide open without having to hard-code their size. Note: if the parent widget is set up to ignore this widget\'s desired size, then changing this value will have no effect.", "Docs/Classes/UMyButton/Variables/_9.html", [], "UMyButton");
addToContainers_variable("MyButton", "Slate button", "Docs/Classes/UMyButton/Variables/MyButton.html", ["my", "button"], "UMyButton");
addToContainers_class("UMyButtonSlot", "Slot for UMyButton class.", "Docs/Classes/UMyButtonSlot/UMyButtonSlot.html", ["my", "button", "slot"], "");
addToContainers_function("UMyButtonSlot", "Pretty much all of this is just copied from UBorderSlot.h", "Docs/Classes/UMyButtonSlot/Functions/UMyButtonSlot.html", ["my", "button", "slot"], "UMyButtonSlot");
addToContainers_variable("", "The padding area between the slot and the content it contains.", "Docs/Classes/UMyButtonSlot/Variables/.html", [], "UMyButtonSlot");
addToContainers_variable("", "The alignment of the object horizontally.", "Docs/Classes/UMyButtonSlot/Variables/_1.html", [], "UMyButtonSlot");
addToContainers_variable("", "The alignment of the object vertically.", "Docs/Classes/UMyButtonSlot/Variables/_2.html", [], "UMyButtonSlot");
addToContainers_variable("Button", "A pointer to the button to allow us to adjust the size, padding...etc at runtime.", "Docs/Classes/UMyButtonSlot/Variables/Button.html", [], "UMyButtonSlot");
addToContainers_class("SMyButton", "This is my own implementation of a slate button. I created this class to allow for the following: - make it able to respond to mouse right clicks, not just left clicks - store a pointer to the local player controller to allow better handling of presses/release. Some other things I\'ve done with this class: - removed any touch support for performance - There is no option to configure the click type. It is DownAndUp. For performance.", "Docs/Classes/SMyButton/SMyButton.html", ["my", "button"], "");
addToContainers_variable("NormalImage", "Brush resource that represents a button", "Docs/Classes/SMyButton/Variables/NormalImage.html", ["normal", "image"], "SMyButton");
addToContainers_variable("HoverImage", "Brush resource that represents a button when it is hovered", "Docs/Classes/SMyButton/Variables/HoverImage.html", ["hover", "image"], "SMyButton");
addToContainers_variable("PressedImage", "Brush resource that represents a button when it is pressed", "Docs/Classes/SMyButton/Variables/PressedImage.html", ["pressed", "image"], "SMyButton");
addToContainers_variable("HighlightedImage", "Brush resource that represents a button when it is highlighted", "Docs/Classes/SMyButton/Variables/HighlightedImage.html", ["highlighted", "image"], "SMyButton");
addToContainers_variable("OnLeftMouseButtonPressed", "I don\'t actually need the mouse position data with these events since I get it in the player controller code, but if I ever do then change these to FOnPointerEvent", "Docs/Classes/SMyButton/Variables/OnLeftMouseButtonPressed.html", ["on", "left", "mouse", "button", "pressed"], "SMyButton");
addToContainers_variable("OnRightMouseButtonPressed", "", "Docs/Classes/SMyButton/Variables/OnRightMouseButtonPressed.html", ["on", "right", "mouse", "button", "pressed"], "SMyButton");
addToContainers_variable("OnLeftMouseButtonReleased", "", "Docs/Classes/SMyButton/Variables/OnLeftMouseButtonReleased.html", ["on", "left", "mouse", "button", "released"], "SMyButton");
addToContainers_variable("OnRightMouseButtonReleased", "", "Docs/Classes/SMyButton/Variables/OnRightMouseButtonReleased.html", ["on", "right", "mouse", "button", "released"], "SMyButton");
addToContainers_variable("HoveredSound", "The sound to play when the button is hovered", "Docs/Classes/SMyButton/Variables/HoveredSound.html", ["hovered", "sound"], "SMyButton");
addToContainers_variable("PressedByLMBSound", "The sound to play when the button is pressed by the LMB", "Docs/Classes/SMyButton/Variables/PressedByLMBSound.html", ["pressed", "by", "l", "m", "b", "sound"], "SMyButton");
addToContainers_variable("PressedByRMBSound", "The sound to play when the button is pressed by the RMB", "Docs/Classes/SMyButton/Variables/PressedByRMBSound.html", ["pressed", "by", "r", "m", "b", "sound"], "SMyButton");
addToContainers_variable("1", "A time when a button is \'highlighted\' is say when you press the button/hotkey for an ability but then you still have to choose a target. During that time the button is called \'highlighted\'", "Docs/Classes/SMyButton/Variables/1.html", [], "SMyButton");
addToContainers_variable("1", "True if this button is currently in a pressed state", "Docs/Classes/SMyButton/Variables/1_1.html", [], "SMyButton");
addToContainers_variable("1", "", "Docs/Classes/SMyButton/Variables/1_2.html", [], "SMyButton");
addToContainers_variable("1", "If true then never use the image even if it is valid", "Docs/Classes/SMyButton/Variables/1_3.html", [], "SMyButton");
addToContainers_variable("1", "", "Docs/Classes/SMyButton/Variables/1_4.html", [], "SMyButton");
addToContainers_variable("PC", "Local player controller", "Docs/Classes/SMyButton/Variables/PC.html", [], "SMyButton");
addToContainers_variable("UMGWidget", "The UMG widget that this widget belongs to", "Docs/Classes/SMyButton/Variables/UMGWidget.html", ["m", "g", "widget"], "SMyButton");
addToContainers_variable("UserWidgetButtonOwner", "", "Docs/Classes/SMyButton/Variables/UserWidgetButtonOwner.html", ["user", "widget", "button", "owner"], "SMyButton");
addToContainers_variable("BorderImage", "", "Docs/Classes/SMyButton/Variables/BorderImage.html", ["border", "image"], "SMyButton");
addToContainers_variable("DesiredSizeScale", "", "Docs/Classes/SMyButton/Variables/DesiredSizeScale.html", ["desired", "size", "scale"], "SMyButton");
addToContainers_variable("BorderBackgroundColor", "", "Docs/Classes/SMyButton/Variables/BorderBackgroundColor.html", ["border", "background", "color"], "SMyButton");
addToContainers_class("UGameMessageWidget", "A widget that displays a message like \"lobby is full\"", "Docs/Classes/UGameMessageWidget/UGameMessageWidget.html", ["game", "message", "widget"], "");
addToContainers_variable("", "Text widget that displays the message", "Docs/Classes/UGameMessageWidget/Variables/.html", [], "UGameMessageWidget");
addToContainers_variable("", "Button that returns player to previous widget", "Docs/Classes/UGameMessageWidget/Variables/_1.html", [], "UGameMessageWidget");
addToContainers_variable("OriginalTextColor", "The color of Text_Message set in editor", "Docs/Classes/UGameMessageWidget/Variables/OriginalTextColor.html", ["original", "text", "color"], "UGameMessageWidget");
addToContainers_class("UChatOutputSingleMessageWidget", "Widget for a single message received that should be placed in chat log. Tips on how to create this: Remove the canvas panel then just add a text block to the widget. Rename it Text_Message and make it a variable. Under the category \"Wrapping\" enable \"Auto Wrap Text\". In advanced options change the wrapping policy to \"Allow Per Character Wrapping\"", "Docs/Classes/UChatOutputSingleMessageWidget/UChatOutputSingleMessageWidget.html", ["chat", "output", "single", "message", "widget"], "");
addToContainers_function("UChatOutputSingleMessageWidget", "", "Docs/Classes/UChatOutputSingleMessageWidget/Functions/UChatOutputSingleMessageWidget.html", ["chat", "output", "single", "message", "widget"], "UChatOutputSingleMessageWidget");
addToContainers_variable("", "Animation to play when the message is received.", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/.html", [], "UChatOutputSingleMessageWidget");
addToContainers_variable("", "Anim to play when message is received", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/_1.html", [], "UChatOutputSingleMessageWidget");
addToContainers_variable("", "The text that shows the message. Is pretty core to this widget so shouldn\'t be optional", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/_2.html", [], "UChatOutputSingleMessageWidget");
addToContainers_variable("OriginalTextColor", "", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/OriginalTextColor.html", ["original", "text", "color"], "UChatOutputSingleMessageWidget");
addToContainers_class("ULobbyChat", "Widget for the chat in a lobby. Made its own seperate widget so singleplayer lobbies can hide all chat related widgets easily", "Docs/Classes/ULobbyChat/ULobbyChat.html", ["lobby", "chat"], "");
addToContainers_function("ULobbyChat", "", "Docs/Classes/ULobbyChat/Functions/ULobbyChat.html", ["lobby", "chat"], "ULobbyChat");
addToContainers_variable("NumChatLogMessages", "Number of chat messages in log", "Docs/Classes/ULobbyChat/Variables/NumChatLogMessages.html", ["num", "chat", "log", "messages"], "ULobbyChat");
addToContainers_variable("", "Max length a chat message can be ignoring any extra things tagged onto the message like the sender\'s name", "Docs/Classes/ULobbyChat/Variables/.html", [], "ULobbyChat");
addToContainers_variable("", "What to put at the start of the text block for message input. This does not get sent", "Docs/Classes/ULobbyChat/Variables/_1.html", [], "ULobbyChat");
addToContainers_variable("", "For received messages, what to put before chat message sender\'s name", "Docs/Classes/ULobbyChat/Variables/_2.html", [], "ULobbyChat");
addToContainers_variable("", "For received messages, what to put in between the message sender\'s name and what they typed", "Docs/Classes/ULobbyChat/Variables/_3.html", [], "ULobbyChat");
addToContainers_variable("", "Box to type chat into", "Docs/Classes/ULobbyChat/Variables/_4.html", [], "ULobbyChat");
addToContainers_variable("", "The panel widget that holds all the chat messages received from others. Must either be a vertical box or a scroll box. Actually only vertical box is an option at the moment Single message widgets are added using UPanelWidget::AddChild and ULobbyChat::OnChildAddedToOutputPanel will be called after. There is an assumption no children will be added to this panel in editor, and only the single message widgets should be added to it at runtime", "Docs/Classes/ULobbyChat/Variables/_5.html", [], "ULobbyChat");
addToContainers_variable("", "The widget to use for each seperate message that should be in the chat output", "Docs/Classes/ULobbyChat/Variables/_6.html", [], "ULobbyChat");
addToContainers_variable("", "This is for widget recycling only. The last widget that was removed from chat log", "Docs/Classes/ULobbyChat/Variables/_7.html", [], "ULobbyChat");
addToContainers_variable("", "Sound to play when a message is received", "Docs/Classes/ULobbyChat/Variables/_8.html", [], "ULobbyChat");
addToContainers_variable("TimeAtLastMessageReceived", "GetWorld()->GetRealTimeSeconds() last time a message was received. For ShouldPlayMessageReceivedSound", "Docs/Classes/ULobbyChat/Variables/TimeAtLastMessageReceived.html", ["time", "at", "last", "message", "received"], "ULobbyChat");
addToContainers_class("ULobbySlot", "Widget for a slot in a lobby", "Docs/Classes/ULobbySlot/ULobbySlot.html", ["lobby", "slot"], "");
addToContainers_function("ULobbySlot", "", "Docs/Classes/ULobbySlot/Functions/ULobbySlot.html", ["lobby", "slot"], "ULobbySlot");
addToContainers_variable("Status", "The status of the slot e.g. whether it is closed, has CPU player etc", "Docs/Classes/ULobbySlot/Variables/Status.html", [], "ULobbySlot");
addToContainers_variable("", "Reference to player state for player in this slot. Null if CPU player", "Docs/Classes/ULobbySlot/Variables/.html", [], "ULobbySlot");
addToContainers_variable("SlotIndex", "Index in owning lobby slots box\'s Slots array", "Docs/Classes/ULobbySlot/Variables/SlotIndex.html", ["slot", "index"], "ULobbySlot");
addToContainers_variable("", "This text shows a human players profile name as well as text indicating if the slot is open/closed/CPU", "Docs/Classes/ULobbySlot/Variables/_1.html", [], "ULobbySlot");
addToContainers_variable("", "", "Docs/Classes/ULobbySlot/Variables/_2.html", [], "ULobbySlot");
addToContainers_variable("", "Combo box to select faction", "Docs/Classes/ULobbySlot/Variables/_3.html", [], "ULobbySlot");
addToContainers_variable("", "Shows the faction\'s display image", "Docs/Classes/ULobbySlot/Variables/_4.html", [], "ULobbySlot");
addToContainers_variable("", "Combo box to select team", "Docs/Classes/ULobbySlot/Variables/_5.html", [], "ULobbySlot");
addToContainers_variable("", "Host only. Button to add a CPU player", "Docs/Classes/ULobbySlot/Variables/_6.html", [], "ULobbySlot");
addToContainers_variable("", "Text to show CPU player difficulty. Should be blank for human players", "Docs/Classes/ULobbySlot/Variables/_7.html", [], "ULobbySlot");
addToContainers_variable("", "Host only. Button to remove what is in slot. In multiplayer this would kick the player", "Docs/Classes/ULobbySlot/Variables/_8.html", [], "ULobbySlot");
addToContainers_variable("", "Host only. Close slot so no one can join but only if unoccupied. Re-open slot from lobby widget\'s add slot button", "Docs/Classes/ULobbySlot/Variables/_9.html", [], "ULobbySlot");
addToContainers_variable("", "Reference to lobby widget this is a part of", "Docs/Classes/ULobbySlot/Variables/_10.html", [], "ULobbySlot");
addToContainers_struct("FTextAndSound", "Simple struct that holds a FText and a USoundBase", "Docs/Structs/FTextAndSound/FTextAndSound.html", ["text", "and", "sound"], "");
addToContainers_function("FTextAndSound", "", "Docs/Structs/FTextAndSound/Functions/FTextAndSound.html", ["text", "and", "sound"], "FTextAndSound");
addToContainers_function("FTextAndSound", "", "Docs/Structs/FTextAndSound/Functions/FTextAndSound_1.html", ["text", "and", "sound"], "FTextAndSound");
addToContainers_variable("", "", "Docs/Structs/FTextAndSound/Variables/.html", [], "FTextAndSound");
addToContainers_variable("", "", "Docs/Structs/FTextAndSound/Variables/_1.html", [], "FTextAndSound");
addToContainers_class("ULobbyWidget", "Main widget for the match lobby Some notes: If buttons aren\'t clickable then may have to increase their Z order. The other user widgets like Widget_Chat if anchored to the whole screen can get in the way", "Docs/Classes/ULobbyWidget/ULobbyWidget.html", ["lobby", "widget"], "");
addToContainers_function("ULobbyWidget", "", "Docs/Classes/ULobbyWidget/Functions/ULobbyWidget.html", ["lobby", "widget"], "ULobbyWidget");
addToContainers_variable("SINGLEPLAYER_DEFAULT_LOBBY_NAME", "When creating a sigleplayer lobby for the first time what to call it", "Docs/Classes/ULobbyWidget/Variables/SINGLEPLAYER_DEFAULT_LOBBY_NAME.html", ["i", "n", "g", "l", "e", "p", "l", "a", "y", "e", "r_", "d", "e", "f", "a", "u", "l", "t_", "l", "o", "b", "b", "y_", "n", "a", "m", "e"], "ULobbyWidget");
addToContainers_variable("DEFAULT_NUM_CPU_OPPONENTS", "When creating a singleplayer lobby for the first time the default number of CPU opponents to have", "Docs/Classes/ULobbyWidget/Variables/DEFAULT_NUM_CPU_OPPONENTS.html", ["e", "f", "a", "u", "l", "t_", "n", "u", "m_", "c", "p", "u_", "o", "p", "p", "o", "n", "e", "n", "t", "s"], "ULobbyWidget");
addToContainers_variable("DEFAULT_CPU_DIFFICULTY", "When adding CPU players their default difficulty", "Docs/Classes/ULobbyWidget/Variables/DEFAULT_CPU_DIFFICULTY.html", ["e", "f", "a", "u", "l", "t_", "c", "p", "u_", "d", "i", "f", "f", "i", "c", "u", "l", "t", "y"], "ULobbyWidget");
addToContainers_variable("DEFAULT_TEAM", "When a new human/CPU joins lobby the team they are placed on", "Docs/Classes/ULobbyWidget/Variables/DEFAULT_TEAM.html", ["e", "f", "a", "u", "l", "t_", "t", "e", "a", "m"], "ULobbyWidget");
addToContainers_variable("LobbyType", "Type of match this is for e.g. LAN, offline etc", "Docs/Classes/ULobbyWidget/Variables/LobbyType.html", ["lobby", "type"], "ULobbyWidget");
addToContainers_variable("", "Whether the image displaying the map should have player start locations also shown on it so players can click on them to choose where they will start in match.", "Docs/Classes/ULobbyWidget/Variables/.html", [], "ULobbyWidget");
addToContainers_variable("", "If true the widget bound to Panel_LobbySlots will be auto populated with the lobby slot widget specified below at runtime. If false then you will need to place ULobbySlot widgets onto the widget yourself in editor. They do not have to on a panel widget. The naming scheme for them should be Widget_Slot1, Widget_Slot2. Order is important - slot 1 will be considered the \'first\' slot and is usually populated by the host. Make sure to add as many slot widgets as UStatics::MAX_NUM_PLAYERS", "Docs/Classes/ULobbyWidget/Variables/_1.html", [], "ULobbyWidget");
addToContainers_variable("", "Widget to use for a lobby slot. They will be added to Panel_LobbySlots when required.", "Docs/Classes/ULobbyWidget/Variables/_2.html", [], "ULobbyWidget");
addToContainers_variable("", "The messages and sounds to display when trying to start the game but cannot", "Docs/Classes/ULobbyWidget/Variables/_3.html", [], "ULobbyWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyWidget/Variables/_4.html", [], "ULobbyWidget");
addToContainers_variable("Map", "The map that is set for lobby", "Docs/Classes/ULobbyWidget/Variables/Map.html", [], "ULobbyWidget");
addToContainers_variable("", "Text that has lobby name - the name the player chose for the lobby", "Docs/Classes/ULobbyWidget/Variables/_5.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to start match. Only visible to host", "Docs/Classes/ULobbyWidget/Variables/_6.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to return to main menu", "Docs/Classes/ULobbyWidget/Variables/_7.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to add a slot. Only visible to host", "Docs/Classes/ULobbyWidget/Variables/_8.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to lock slots. Only visible if lobby is a multiplayer lobby and you are the host", "Docs/Classes/ULobbyWidget/Variables/_9.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to change map. Only visible to host", "Docs/Classes/ULobbyWidget/Variables/_10.html", [], "ULobbyWidget");
addToContainers_variable("", "Panel widget for displaying each slot. Only relevant if bAutoPopulateSlotsPanel is true", "Docs/Classes/ULobbyWidget/Variables/_11.html", [], "ULobbyWidget");
addToContainers_variable("", "Widget displaying the match rules", "Docs/Classes/ULobbyWidget/Variables/_12.html", [], "ULobbyWidget");
addToContainers_variable("", "Displays info about the map match will be played on", "Docs/Classes/ULobbyWidget/Variables/_13.html", [], "ULobbyWidget");
addToContainers_variable("", "Image to show whether slots are locked or not", "Docs/Classes/ULobbyWidget/Variables/_14.html", [], "ULobbyWidget");
addToContainers_variable("", "Widget for chat input and output", "Docs/Classes/ULobbyWidget/Variables/_15.html", [], "ULobbyWidget");
addToContainers_variable("TimerHandle_CannotStartMatchWidget", "Timer handle for controlling how often popup widget can show for not being able to start match", "Docs/Classes/ULobbyWidget/Variables/TimerHandle_CannotStartMatchWidget.html", ["timer", "handle_", "cannot", "start", "match", "widget"], "ULobbyWidget");
addToContainers_variable("TimerHandle_CannotStartMatchSound", "Same as above but for sound", "Docs/Classes/ULobbyWidget/Variables/TimerHandle_CannotStartMatchSound.html", ["timer", "handle_", "cannot", "start", "match", "sound"], "ULobbyWidget");
addToContainers_variable("bAreSlotsLocked", "If true then players cannot change anything such as their team, faction etc. Also currently slots need to be locked in order for host to start match. A player leaving the lobby will automatically unlock slots", "Docs/Classes/ULobbyWidget/Variables/bAreSlotsLocked.html", ["are", "slots", "locked"], "ULobbyWidget");
addToContainers_variable("NumPlayersWhenStartMatchButtonPressed", "Used to know whether to start match after async start session completes", "Docs/Classes/ULobbyWidget/Variables/NumPlayersWhenStartMatchButtonPressed.html", ["num", "players", "when", "start", "match", "button", "pressed"], "ULobbyWidget");
addToContainers_class("ULoadingScreen", "Loading screen when going from lobby to match", "Docs/Classes/ULoadingScreen/ULoadingScreen.html", ["loading", "screen"], "");
addToContainers_variable("", "Text that shows the status of loading", "Docs/Classes/ULoadingScreen/Variables/.html", [], "ULoadingScreen");
addToContainers_class("ULobbyInfo", "A widget that can show information about a lobby when browsing for lobbies", "Docs/Classes/ULobbyInfo/ULobbyInfo.html", ["lobby", "info"], "");
addToContainers_variable("", "Whether to show the player start locations on the map image. Which specific player is assigned to which spot will not be shown either way", "Docs/Classes/ULobbyInfo/Variables/.html", [], "ULobbyInfo");
addToContainers_variable("", "Reference to the lobby browser that owns this", "Docs/Classes/ULobbyInfo/Variables/_1.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display name of lobby host", "Docs/Classes/ULobbyInfo/Variables/_2.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display lobby name", "Docs/Classes/ULobbyInfo/Variables/_3.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display the network type e.g. LAN, online", "Docs/Classes/ULobbyInfo/Variables/_4.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to diplay the current number of players in the lobby", "Docs/Classes/ULobbyInfo/Variables/_5.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display the maximum number of players the lobby can have", "Docs/Classes/ULobbyInfo/Variables/_6.html", [], "ULobbyInfo");
addToContainers_variable("", "Image to display signalling whether lobby is password protected or not", "Docs/Classes/ULobbyInfo/Variables/_7.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display the ping in ms", "Docs/Classes/ULobbyInfo/Variables/_8.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display match rules. This one doesn\'t need any combo boxes to change options because it should only be displaying options", "Docs/Classes/ULobbyInfo/Variables/_9.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display map info", "Docs/Classes/ULobbyInfo/Variables/_10.html", [], "ULobbyInfo");
addToContainers_variable("", "The button to click to select this lobby. Can be the root of all other widgets", "Docs/Classes/ULobbyInfo/Variables/_11.html", [], "ULobbyInfo");
addToContainers_class("ULobbyBrowserWidget", "", "Docs/Classes/ULobbyBrowserWidget/ULobbyBrowserWidget.html", ["lobby", "browser", "widget"], "");
addToContainers_variable("", "Array of widgets previously created for showing a search results. When new search results come in the widgets in this array are modified first before any new widgets are created to avoid creating unnecessary widgets and losing references to them", "Docs/Classes/ULobbyBrowserWidget/Variables/.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Button to join current selected lobby", "Docs/Classes/ULobbyBrowserWidget/Variables/_1.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/ULobbyBrowserWidget/Variables/_2.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Refresh search results", "Docs/Classes/ULobbyBrowserWidget/Variables/_3.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "The currently selected lobby. Pressing join button will join this lobby", "Docs/Classes/ULobbyBrowserWidget/Variables/_4.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "The widget to use for displaying each individual search result", "Docs/Classes/ULobbyBrowserWidget/Variables/_5.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "The widget browsing results get added to e.g. scroll box. Results get added with UWidget::AddChild. In editor to preview what the results would look like add multiple of whatever widget is set as Search Result Widget to this widget. What it looks like is how search results will be displayed", "Docs/Classes/ULobbyBrowserWidget/Variables/_6.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Throbber to display when searching is complete", "Docs/Classes/ULobbyBrowserWidget/Variables/_7.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Circular throbber if you wish to use that instead", "Docs/Classes/ULobbyBrowserWidget/Variables/_8.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Displays how many search results were found", "Docs/Classes/ULobbyBrowserWidget/Variables/_9.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "This is mainly here for testing. Type in an IP address to connect to it", "Docs/Classes/ULobbyBrowserWidget/Variables/_10.html", [], "ULobbyBrowserWidget");
addToContainers_variable("bIsFindingSessions", "True if refreshing server list ", "Docs/Classes/ULobbyBrowserWidget/Variables/bIsFindingSessions.html", ["is", "finding", "sessions"], "ULobbyBrowserWidget");
addToContainers_class("UPasswordEntryWidget", "", "Docs/Classes/UPasswordEntryWidget/UPasswordEntryWidget.html", ["password", "entry", "widget"], "");
addToContainers_variable("", "Reference to browser widget", "Docs/Classes/UPasswordEntryWidget/Variables/.html", [], "UPasswordEntryWidget");
addToContainers_variable("", "Text box to enter password into", "Docs/Classes/UPasswordEntryWidget/Variables/_1.html", [], "UPasswordEntryWidget");
addToContainers_variable("", "Accept button to try password", "Docs/Classes/UPasswordEntryWidget/Variables/_2.html", [], "UPasswordEntryWidget");
addToContainers_variable("", "Return button to not try password", "Docs/Classes/UPasswordEntryWidget/Variables/_3.html", [], "UPasswordEntryWidget");
addToContainers_class("ULobbyCreationWidget", "Widget for setting up lobby for a networked match. Things like whether it\'s LAN, max number of players etc can be configured", "Docs/Classes/ULobbyCreationWidget/ULobbyCreationWidget.html", ["lobby", "creation", "widget"], "");
addToContainers_variable("", "When opening the map selection widget, whether to try show the player start location widgets on each map info image. Also affects the map image of the currently selected map", "Docs/Classes/ULobbyCreationWidget/Variables/.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Button to create lobby", "Docs/Classes/ULobbyCreationWidget/Variables/_1.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/ULobbyCreationWidget/Variables/_2.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Text for what to call lobby", "Docs/Classes/ULobbyCreationWidget/Variables/_3.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "LAN, online", "Docs/Classes/ULobbyCreationWidget/Variables/_4.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Change network type button", "Docs/Classes/ULobbyCreationWidget/Variables/_5.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Another change network type button", "Docs/Classes/ULobbyCreationWidget/Variables/_6.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Enter password here for lobby. If left blank then lobby will have no password", "Docs/Classes/ULobbyCreationWidget/Variables/_7.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyCreationWidget/Variables/_8.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyCreationWidget/Variables/_9.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyCreationWidget/Variables/_10.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Widget for the rules of the match", "Docs/Classes/ULobbyCreationWidget/Variables/_11.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Widget that shows info about current map", "Docs/Classes/ULobbyCreationWidget/Variables/_12.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Button to open widget to select map", "Docs/Classes/ULobbyCreationWidget/Variables/_13.html", [], "ULobbyCreationWidget");
addToContainers_class("UMainMenuWidget", "The main menu widget. This is the first widget that will appear after the game starts", "Docs/Classes/UMainMenuWidget/UMainMenuWidget.html", ["main", "menu", "widget"], "");
addToContainers_variable("", "Button to open the play menu. The play menu is just another main menu", "Docs/Classes/UMainMenuWidget/Variables/.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to create a singleplayer lobby", "Docs/Classes/UMainMenuWidget/Variables/_1.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to create a multiplayer lobby", "Docs/Classes/UMainMenuWidget/Variables/_2.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to search for a multiplayer game to join", "Docs/Classes/UMainMenuWidget/Variables/_3.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to bring up settings menu for video/audio/game/control settings", "Docs/Classes/UMainMenuWidget/Variables/_4.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to exit to the operating system", "Docs/Classes/UMainMenuWidget/Variables/_5.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to return to previous menu. Intended to be used if this widget is a play menu and not the main menu", "Docs/Classes/UMainMenuWidget/Variables/_6.html", [], "UMainMenuWidget");
addToContainers_class("UPlayerStartWidget", "A widget that is placed on the map image. It represents a player start location. It can be clicked on by players to secure where they will start in match Notes: - Might help if anchored to center of screen (legit don\'t know though) FIXME: - Player starts do not draw in the correct location on minimap @See SetMap SetMinimapLocationValues", "Docs/Classes/UPlayerStartWidget/UPlayerStartWidget.html", ["player", "start", "widget"], "");
addToContainers_function("UPlayerStartWidget", "", "Docs/Classes/UPlayerStartWidget/Functions/UPlayerStartWidget.html", ["player", "start", "widget"], "UPlayerStartWidget");
addToContainers_variable("PlayerStartUniqueID", "Unique ID of the player start assigned to this widget", "Docs/Classes/UPlayerStartWidget/Variables/PlayerStartUniqueID.html", ["player", "start", "unique", "i", "d"], "UPlayerStartWidget");
addToContainers_variable("AssignedLobbySlot", "Slot in lobby that is assigned to this spot. -1 = no one assigned", "Docs/Classes/UPlayerStartWidget/Variables/AssignedLobbySlot.html", ["assigned", "lobby", "slot"], "UPlayerStartWidget");
addToContainers_variable("", "Text that shows the index of the player assigned to this spot. 1 = player in first lobby slot, 2 = player in second lobby slot, etc", "Docs/Classes/UPlayerStartWidget/Variables/.html", [], "UPlayerStartWidget");
addToContainers_variable("", "Button player can click to try and assign themselves to this player start", "Docs/Classes/UPlayerStartWidget/Variables/_1.html", [], "UPlayerStartWidget");
addToContainers_class("UMapInfoWidget", "A widget that shows information about a single map.", "Docs/Classes/UMapInfoWidget/UMapInfoWidget.html", ["map", "info", "widget"], "");
addToContainers_function("UMapInfoWidget", "", "Docs/Classes/UMapInfoWidget/Functions/UMapInfoWidget.html", ["map", "info", "widget"], "UMapInfoWidget");
addToContainers_variable("", "Reference to map selection widget this widget belongs to if any. Will be set by owning map selection widget", "Docs/Classes/UMapInfoWidget/Variables/.html", [], "UMapInfoWidget");
addToContainers_variable("MapInfo", "The map this slot is for", "Docs/Classes/UMapInfoWidget/Variables/MapInfo.html", ["map", "info"], "UMapInfoWidget");
addToContainers_variable("", "Widget to display at a player start location on the map", "Docs/Classes/UMapInfoWidget/Variables/_1.html", [], "UMapInfoWidget");
addToContainers_variable("bIsDisplayingPlayerStarts", "If true then this widget is displaying player start widgets overtop the map image", "Docs/Classes/UMapInfoWidget/Variables/bIsDisplayingPlayerStarts.html", ["is", "displaying", "player", "starts"], "UMapInfoWidget");
addToContainers_variable("", "Array of widgets used to represent a player start point. Key = player start unique ID", "Docs/Classes/UMapInfoWidget/Variables/_2.html", [], "UMapInfoWidget");
addToContainers_variable("MinimapImageScreenLoc", "The screen location of Image_Minimap updated on post edit", "Docs/Classes/UMapInfoWidget/Variables/MinimapImageScreenLoc.html", ["minimap", "image", "screen", "loc"], "UMapInfoWidget");
addToContainers_variable("MinimapImageScreenDim", "The size of Image_Minimap updated on post edit", "Docs/Classes/UMapInfoWidget/Variables/MinimapImageScreenDim.html", ["minimap", "image", "screen", "dim"], "UMapInfoWidget");
addToContainers_variable("", "The button that selects this map. If this widget is placed on the lobby widget then this button does not need to be there", "Docs/Classes/UMapInfoWidget/Variables/_3.html", [], "UMapInfoWidget");
addToContainers_variable("", "Text to show map name", "Docs/Classes/UMapInfoWidget/Variables/_4.html", [], "UMapInfoWidget");
addToContainers_variable("", "Image to show an image set by user", "Docs/Classes/UMapInfoWidget/Variables/_5.html", [], "UMapInfoWidget");
addToContainers_variable("", "Image to show minimap.", "Docs/Classes/UMapInfoWidget/Variables/_6.html", [], "UMapInfoWidget");
addToContainers_variable("", "Text to show map description", "Docs/Classes/UMapInfoWidget/Variables/_7.html", [], "UMapInfoWidget");
addToContainers_variable("", "Text to show max number of players allowed on map", "Docs/Classes/UMapInfoWidget/Variables/_8.html", [], "UMapInfoWidget");
addToContainers_class("UMapSelectionWidget", "The widget that appears when choosing which map to play on, either from lobby creation screen or lobby. It will generally contain a list of all the available maps. When you add a new map to your map pool in game instance you should add an extra slot widget to this in editor. The slot can be named whatever you want", "Docs/Classes/UMapSelectionWidget/UMapSelectionWidget.html", ["map", "selection", "widget"], "");
addToContainers_function("UMapSelectionWidget", "", "Docs/Classes/UMapSelectionWidget/Functions/UMapSelectionWidget.html", ["map", "selection", "widget"], "UMapSelectionWidget");
addToContainers_variable("CurrentMapInfo", "Map info for selected map", "Docs/Classes/UMapSelectionWidget/Variables/CurrentMapInfo.html", ["current", "map", "info"], "UMapSelectionWidget");
addToContainers_variable("bHasSetupMapInfoList", "True if child map info widgets have been created and/or setup. Similar to UMainMenuWidgetBase::bHasBeenSetup", "Docs/Classes/UMapSelectionWidget/Variables/bHasSetupMapInfoList.html", ["has", "setup", "map", "info", "list"], "UMapSelectionWidget");
addToContainers_variable("", "If true this widget widget will automatically create map info widgets at runtime and add them to the widget Panel_MapList. Settings this to true basically means whenever you create a new map you do not need to modify this widget. Widgets are added using UPanelWidget::AddChild and UMapSelectionWidget::OnMapInfoAddedToPanel will be called when each widget is added", "Docs/Classes/UMapSelectionWidget/Variables/.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Only relevant if bAutoPopulateMapList is true. The widget to use to show a map\'s info", "Docs/Classes/UMapSelectionWidget/Variables/_1.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Reference to widget this widget should update with map info", "Docs/Classes/UMapSelectionWidget/Variables/_2.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Whether to show player starts or not - both on the current selected map and the maps in the list. Depending what widget this widget is a part of they may or may not be clickable.", "Docs/Classes/UMapSelectionWidget/Variables/_3.html", [], "UMapSelectionWidget");
addToContainers_variable("", "This is only relevant if bAutoPopulateMapList is true. The panel widget to add map info widgets to automatically at runtime", "Docs/Classes/UMapSelectionWidget/Variables/_4.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Widget for displaying info about the current selected map. When new map is selected from list this will be updated. This should be a different widget BP than the ones used in the list and should have no need for Button_Select being assigned", "Docs/Classes/UMapSelectionWidget/Variables/_5.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/UMapSelectionWidget/Variables/_6.html", [], "UMapSelectionWidget");
addToContainers_class("UMatchRulesWidget", "Widget for the rules of the match like for example the defeat condition, maybe if crates spawn, etc. Only for in-match rules but can optionally be displayed when browsing lobbies and will be displayed while in a lobby. The combo box is optional. If you do not want your game to allow the host to change match settings after a lobby has been created then a simple way to do this is to not add a combo box to this widget that belongs to the lobby widget", "Docs/Classes/UMatchRulesWidget/UMatchRulesWidget.html", ["match", "rules", "widget"], "");
addToContainers_variable("bIsForLobby", "", "Docs/Classes/UMatchRulesWidget/Variables/bIsForLobby.html", ["is", "for", "lobby"], "UMatchRulesWidget");
addToContainers_variable("", "Combo box to choose starting resources", "Docs/Classes/UMatchRulesWidget/Variables/.html", [], "UMatchRulesWidget");
addToContainers_variable("", "Text to show starting resources", "Docs/Classes/UMatchRulesWidget/Variables/_1.html", [], "UMatchRulesWidget");
addToContainers_variable("", "Combo box to choose the defeat condition", "Docs/Classes/UMatchRulesWidget/Variables/_2.html", [], "UMatchRulesWidget");
addToContainers_variable("", "Text to show the defeat condition", "Docs/Classes/UMatchRulesWidget/Variables/_3.html", [], "UMatchRulesWidget");
addToContainers_class("Menus", "The header of this class contains some variables for the main menu and some custom basic widget implementations. The source file contains many functions of URTSGameInstance", "Docs/Classes/Menus/Menus.html", [], "");
addToContainers_variable("PALETTE_CATEGORY", "Category to appear in palette panel in editor", "Docs/Classes/Menus/Variables/PALETTE_CATEGORY.html", ["a", "l", "e", "t", "t", "e_", "c", "a", "t", "e", "g", "o", "r", "y"], "Menus");
addToContainers_variable("BLANK_TEXT", "Text with nothing in it", "Docs/Classes/Menus/Variables/BLANK_TEXT.html", ["l", "a", "n", "k_", "t", "e", "x", "t"], "Menus");
addToContainers_class("UMenuButton", "Base class for custom buttons", "Docs/Classes/UMenuButton/UMenuButton.html", ["menu", "button"], "");
addToContainers_function("UMenuButton", "", "Docs/Classes/UMenuButton/Functions/UMenuButton.html", ["menu", "button"], "UMenuButton");
addToContainers_class("UMenuTextBox", "", "Docs/Classes/UMenuTextBox/UMenuTextBox.html", ["menu", "text", "box"], "");
addToContainers_class("UMenuEditableText", "", "Docs/Classes/UMenuEditableText/UMenuEditableText.html", ["menu", "editable", "text"], "");
addToContainers_class("UConfirmExitToOS_YesButton", "-----------------------------------------------------", "Docs/Classes/UConfirmExitToOS_YesButton/UConfirmExitToOS_YesButton.html", ["confirm", "exit", "to", "o", "s_", "yes", "button"], "");
addToContainers_class("UConfirmExitToOS_NoButton", "", "Docs/Classes/UConfirmExitToOS_NoButton/UConfirmExitToOS_NoButton.html", ["confirm", "exit", "to", "o", "s_", "no", "button"], "");
addToContainers_class("UNicknameEntryWidget", "A widget for the player to enter a nickname into", "Docs/Classes/UNicknameEntryWidget/UNicknameEntryWidget.html", ["nickname", "entry", "widget"], "");
addToContainers_variable("", "Reference to player state", "Docs/Classes/UNicknameEntryWidget/Variables/.html", [], "UNicknameEntryWidget");
addToContainers_variable("NextWidget", "The widget the continue button will navigate to", "Docs/Classes/UNicknameEntryWidget/Variables/NextWidget.html", ["next", "widget"], "UNicknameEntryWidget");
addToContainers_variable("", "Text for player to enter the alias they want into", "Docs/Classes/UNicknameEntryWidget/Variables/_1.html", [], "UNicknameEntryWidget");
addToContainers_variable("", "Button to continue to menu user wanted before this screen popped up", "Docs/Classes/UNicknameEntryWidget/Variables/_2.html", [], "UNicknameEntryWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/UNicknameEntryWidget/Variables/_3.html", [], "UNicknameEntryWidget");
addToContainers_class("UPopupWidget", "Popup widgets are widgets that get shown briefly on screen to convey a message. e.g. \"Not enough players in lobby\". They are not menus and have no interactibility. They will become hidden anytime the menu widget is changed. Widget anim breakdown: All widget anims are optional. - If no anims are set then widget will be shown/hidden instantly. It will be shown for the duration param of func Show(). - If ShowAnim and/or HideAnim are set then they will play when the widget is requested to be shown/hidden. Duration param in func Show() times from the point where ShowAnim finishes. - If SingleAnim is set then ShowAnim and HideAnim are both ignored. Duration param in func Show() is also ignored. This SingleAnim will play when the widget is requested to be shown and is repsonsible for making the widget go away eventaully", "Docs/Classes/UPopupWidget/UPopupWidget.html", ["popup", "widget"], "");
addToContainers_function("UPopupWidget", "", "Docs/Classes/UPopupWidget/Functions/UPopupWidget.html", ["popup", "widget"], "UPopupWidget");
addToContainers_variable("ShowAnimFullName", "", "Docs/Classes/UPopupWidget/Variables/ShowAnimFullName.html", ["show", "anim", "full", "name"], "UPopupWidget");
addToContainers_variable("HideAnimFullName", "", "Docs/Classes/UPopupWidget/Variables/HideAnimFullName.html", ["hide", "anim", "full", "name"], "UPopupWidget");
addToContainers_variable("SingleAnimFullName", "", "Docs/Classes/UPopupWidget/Variables/SingleAnimFullName.html", ["single", "anim", "full", "name"], "UPopupWidget");
addToContainers_variable("", "The text box that shows the message", "Docs/Classes/UPopupWidget/Variables/.html", [], "UPopupWidget");
addToContainers_variable("OriginalTextColor", "The color of Text_Message that was set in editor", "Docs/Classes/UPopupWidget/Variables/OriginalTextColor.html", ["original", "text", "color"], "UPopupWidget");
addToContainers_variable("", "Names you can call widget anims to have them play at certain times", "Docs/Classes/UPopupWidget/Variables/_1.html", [], "UPopupWidget");
addToContainers_variable("", "Only relevant if using either ShowAnim or SingleAnim. Time in anim to never go below when requested to play anim while anim is already playing", "Docs/Classes/UPopupWidget/Variables/_2.html", [], "UPopupWidget");
addToContainers_variable("", "Widget animation to play when showing widget", "Docs/Classes/UPopupWidget/Variables/_3.html", [], "UPopupWidget");
addToContainers_variable("", "Widget anim to play when hiding widget", "Docs/Classes/UPopupWidget/Variables/_4.html", [], "UPopupWidget");
addToContainers_variable("", "One anim to play for both showing and hiding widget. It is responsible for making sure widget hides eventually. With this duration in func Show is irrelevant", "Docs/Classes/UPopupWidget/Variables/_5.html", [], "UPopupWidget");
addToContainers_variable("AnimStatus", "How many animations this widget has. Calculated during AssignWidgetAnims()", "Docs/Classes/UPopupWidget/Variables/AnimStatus.html", ["anim", "status"], "UPopupWidget");
addToContainers_variable("ShowDuration", "Duration to set for TimerHandle_Hide when an animation finishes", "Docs/Classes/UPopupWidget/Variables/ShowDuration.html", ["show", "duration"], "UPopupWidget");
addToContainers_variable("TimerHandle_Hide", "Timer handle to say when to hide widget", "Docs/Classes/UPopupWidget/Variables/TimerHandle_Hide.html", ["timer", "handle_", "hide"], "UPopupWidget");
addToContainers_class("USingleAudioClassWidget", "A widget do display info about and allow adjusting of a single sound class", "Docs/Classes/USingleAudioClassWidget/USingleAudioClassWidget.html", ["single", "audio", "class", "widget"], "");
addToContainers_variable("GI", "-------------------------------------------------------", "Docs/Classes/USingleAudioClassWidget/Variables/GI.html", [], "USingleAudioClassWidget");
addToContainers_variable("PC", "", "Docs/Classes/USingleAudioClassWidget/Variables/PC.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "The name of the sound class this widget is for. If you start a PIE you can check the output log in editor for the sound classes found during setup. Should probably change this to an FName for performance", "Docs/Classes/USingleAudioClassWidget/Variables/.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "Text to show the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_1.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A progress bar to show the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_2.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A button to decrease the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_3.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A button to increase the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_4.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A slider to adjust the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_5.html", [], "USingleAudioClassWidget");
addToContainers_class("UAudioSettingsWidget", "Widget that allows player to change their audio settings. Note if you want to adjust audio quality levels then you need to add entries to project settings under Audio ---> Quality Levels. The widget assumes that better audio quality levels are at higher indices in the Quality Levels array.", "Docs/Classes/UAudioSettingsWidget/UAudioSettingsWidget.html", ["audio", "settings", "widget"], "");
addToContainers_variable("PC", "-------------------------------------------------------", "Docs/Classes/UAudioSettingsWidget/Variables/PC.html", [], "UAudioSettingsWidget");
addToContainers_variable("SingleAudioClassWidgets", "", "Docs/Classes/UAudioSettingsWidget/Variables/SingleAudioClassWidgets.html", ["single", "audio", "class", "widgets"], "UAudioSettingsWidget");
addToContainers_variable("", "Text to display the audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/.html", [], "UAudioSettingsWidget");
addToContainers_variable("", "Progress bar to display the audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/_1.html", [], "UAudioSettingsWidget");
addToContainers_variable("", "Button to decrease audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/_2.html", [], "UAudioSettingsWidget");
addToContainers_variable("", "Button to increase audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/_3.html", [], "UAudioSettingsWidget");
addToContainers_class("USingleControlSettingWidgetBase", "Base widget to display a single control setting", "Docs/Classes/USingleControlSettingWidgetBase/USingleControlSettingWidgetBase.html", ["single", "control", "setting", "widget", "base"], "");
addToContainers_function("USingleControlSettingWidgetBase", "", "Docs/Classes/USingleControlSettingWidgetBase/Functions/USingleControlSettingWidgetBase.html", ["single", "control", "setting", "widget", "base"], "USingleControlSettingWidgetBase");
addToContainers_variable("PC", "------------------------------------------------------", "Docs/Classes/USingleControlSettingWidgetBase/Variables/PC.html", [], "USingleControlSettingWidgetBase");
addToContainers_variable("ControlSettingsWidget", "The main control settings widget", "Docs/Classes/USingleControlSettingWidgetBase/Variables/ControlSettingsWidget.html", ["control", "settings", "widget"], "USingleControlSettingWidgetBase");
addToContainers_variable("", "The setting this widget is for", "Docs/Classes/USingleControlSettingWidgetBase/Variables/.html", [], "USingleControlSettingWidgetBase");
addToContainers_variable("SettingInfo", "Info struct for SettingType", "Docs/Classes/USingleControlSettingWidgetBase/Variables/SettingInfo.html", ["setting", "info"], "USingleControlSettingWidgetBase");
addToContainers_variable("", "Text to display the name of the setting", "Docs/Classes/USingleControlSettingWidgetBase/Variables/_1.html", [], "USingleControlSettingWidgetBase");
addToContainers_class("USingleBoolControlSettingWidget", "Widget to display a control setting that is just a bool e.g. whether to invert Y axis", "Docs/Classes/USingleBoolControlSettingWidget/USingleBoolControlSettingWidget.html", ["single", "bool", "control", "setting", "widget"], "");
addToContainers_variable("", "Text to show whether the setting is enabled or not", "Docs/Classes/USingleBoolControlSettingWidget/Variables/.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("", "Button to toggle the value of the variable", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_1.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("AdjustLeftButtonOriginalOpacity", "", "Docs/Classes/USingleBoolControlSettingWidget/Variables/AdjustLeftButtonOriginalOpacity.html", ["adjust", "left", "button", "original", "opacity"], "USingleBoolControlSettingWidget");
addToContainers_variable("AdjustRightButtonOriginalOpacity", "", "Docs/Classes/USingleBoolControlSettingWidget/Variables/AdjustRightButtonOriginalOpacity.html", ["adjust", "right", "button", "original", "opacity"], "USingleBoolControlSettingWidget");
addToContainers_variable("", "Another button to toggle the value of the variable", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_2.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("", "Check box to toggle the state of the variable", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_3.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("", "If setting is true and you press the adjust right button it will be changed to false. If setting is false and you press the adjust left button it will be changed to true. That is what wrapping is", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_4.html", [], "USingleBoolControlSettingWidget");
addToContainers_class("USingleFloatControlSettingWidget", "Widget to display a single control setting that uses a float e.g. camera move speed", "Docs/Classes/USingleFloatControlSettingWidget/USingleFloatControlSettingWidget.html", ["single", "float", "control", "setting", "widget"], "");
addToContainers_variable("", "Text to show the current value of the setting", "Docs/Classes/USingleFloatControlSettingWidget/Variables/.html", [], "USingleFloatControlSettingWidget");
addToContainers_variable("", "Progress bar to show the value of the setting", "Docs/Classes/USingleFloatControlSettingWidget/Variables/_1.html", [], "USingleFloatControlSettingWidget");
addToContainers_variable("", "Button to lower the value", "Docs/Classes/USingleFloatControlSettingWidget/Variables/_2.html", [], "USingleFloatControlSettingWidget");
addToContainers_variable("DecreaseButtonOriginalOpacity", "", "Docs/Classes/USingleFloatControlSettingWidget/Variables/DecreaseButtonOriginalOpacity.html", ["decrease", "button", "original", "opacity"], "USingleFloatControlSettingWidget");
addToContainers_variable("IncreaseButtonOriginalOpacity", "", "Docs/Classes/USingleFloatControlSettingWidget/Variables/IncreaseButtonOriginalOpacity.html", ["increase", "button", "original", "opacity"], "USingleFloatControlSettingWidget");
addToContainers_variable("", "Button to increase the value", "Docs/Classes/USingleFloatControlSettingWidget/Variables/_3.html", [], "USingleFloatControlSettingWidget");
addToContainers_class("UControlSettingsWidget", "Shows control settings like camera move speed, camera zoom rate, etc", "Docs/Classes/UControlSettingsWidget/UControlSettingsWidget.html", ["control", "settings", "widget"], "");
addToContainers_function("UControlSettingsWidget", "", "Docs/Classes/UControlSettingsWidget/Functions/UControlSettingsWidget.html", ["control", "settings", "widget"], "UControlSettingsWidget");
addToContainers_variable("SingleSettingWidgets", "Every single setting widget", "Docs/Classes/UControlSettingsWidget/Variables/SingleSettingWidgets.html", ["single", "setting", "widgets"], "UControlSettingsWidget");
addToContainers_variable("", "If bAutoPopulate is true then this will be populated with every control setting", "Docs/Classes/UControlSettingsWidget/Variables/.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Widget to use for bool settings if bAutoPopulate is true", "Docs/Classes/UControlSettingsWidget/Variables/_1.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Widget to use for float settings if bAutoPopulate is true", "Docs/Classes/UControlSettingsWidget/Variables/_2.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Render opacity multiplier for adjust buttons when the value is at it\'s minimum/maximum", "Docs/Classes/UControlSettingsWidget/Variables/_3.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Visibility to set adjustment buttons when the control setting is at its limit e.g. player has their camera move speed set to 5000 which is the max value. Since it cannot go any higher apply this visibility to the increase button", "Docs/Classes/UControlSettingsWidget/Variables/_4.html", [], "UControlSettingsWidget");
addToContainers_variable("", "If true then Panel_Settings will be populated with every control setting", "Docs/Classes/UControlSettingsWidget/Variables/_5.html", [], "UControlSettingsWidget");
addToContainers_variable("", "", "Docs/Classes/UControlSettingsWidget/Variables/_6.html", [], "UControlSettingsWidget");
addToContainers_class("UGameSettingsWidget", "Game settings are things like whether to show healthbars. I have also put profily type settings on here such as the player\'s alias.", "Docs/Classes/UGameSettingsWidget/UGameSettingsWidget.html", ["game", "settings", "widget"], "");
addToContainers_variable("GI", "-------------------------------------------------------------", "Docs/Classes/UGameSettingsWidget/Variables/GI.html", [], "UGameSettingsWidget");
addToContainers_variable("", "Text box for player to enter their alias into", "Docs/Classes/UGameSettingsWidget/Variables/.html", [], "UGameSettingsWidget");
addToContainers_variable("TextBoxPlayerAliasOriginalOpacity", "", "Docs/Classes/UGameSettingsWidget/Variables/TextBoxPlayerAliasOriginalOpacity.html", ["text", "box", "player", "alias", "original", "opacity"], "UGameSettingsWidget");
addToContainers_class("USingleKeyBindingWidget", "A widget that displays the key binding for a single game action. There is the option to display the assinged key with a text block Additionally you can show an image to represent the binding. This can be done in two ways: - you supply an image of the key - you supply an image of the key and we\'ll put the text on it for you If you have images for keys + their modifiers then congratulations: I actually didn\'t implement anything for that. But just chuck a struct into game instance like TMap<FKeyWithModifiers, FKeyWithModifiersInfo> and you can easily get your image that way.", "Docs/Classes/USingleKeyBindingWidget/USingleKeyBindingWidget.html", ["single", "key", "binding", "widget"], "");
addToContainers_function("USingleKeyBindingWidget", "", "Docs/Classes/USingleKeyBindingWidget/Functions/USingleKeyBindingWidget.html", ["single", "key", "binding", "widget"], "USingleKeyBindingWidget");
addToContainers_variable("", "----------------------------------------------------", "Docs/Classes/USingleKeyBindingWidget/Variables/.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_1.html", [], "USingleKeyBindingWidget");
addToContainers_variable("PC", "Local player controller ", "Docs/Classes/USingleKeyBindingWidget/Variables/PC.html", [], "USingleKeyBindingWidget");
addToContainers_variable("OwningWidget", "The widget this widget belongs to", "Docs/Classes/USingleKeyBindingWidget/Variables/OwningWidget.html", ["owning", "widget"], "USingleKeyBindingWidget");
addToContainers_variable("BindingInfo", "Pointer to static info struct", "Docs/Classes/USingleKeyBindingWidget/Variables/BindingInfo.html", ["binding", "info"], "USingleKeyBindingWidget");
addToContainers_variable("", "The game action this widget is for. Leave as None to use the axis mapping instead", "Docs/Classes/USingleKeyBindingWidget/Variables/_2.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "Leave as None to use te action mapping instead", "Docs/Classes/USingleKeyBindingWidget/Variables/_3.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "The text that displays the action name e.g. toggle skill tree", "Docs/Classes/USingleKeyBindingWidget/Variables/_4.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "The button to click to bind the key to something else", "Docs/Classes/USingleKeyBindingWidget/Variables/_5.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "The text that that displays the key name e.g. left mouse button, shift + Q", "Docs/Classes/USingleKeyBindingWidget/Variables/_6.html", [], "USingleKeyBindingWidget");
addToContainers_variable("NumKeyElementWidgetsBound", "Number of Image_KeyElementX widgets that are bound", "Docs/Classes/USingleKeyBindingWidget/Variables/NumKeyElementWidgetsBound.html", ["num", "key", "element", "widgets", "bound"], "USingleKeyBindingWidget");
addToContainers_variable("", "7 images for CTRL + SHIFT + ALT + Key. Did not take into account CMD. One for the CTRL, one for the plus symbol, etc. You should bind the lower numbered ones first", "Docs/Classes/USingleKeyBindingWidget/Variables/_7.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_8.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_9.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_10.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_11.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_12.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_13.html", [], "USingleKeyBindingWidget");
addToContainers_variable("BorderKeyElements[7]", "Index 0 = Border_KeyElement1, index 1 = Border_KeyElement2, etc. ", "Docs/Classes/USingleKeyBindingWidget/Variables/BorderKeyElements[7].html", ["border", "key", "elements[7]"], "USingleKeyBindingWidget");
addToContainers_variable("", "The 7 texts to go in the borders. Bind widgets to these if you want to display the key using a font instead of an image with the text already on it. The option for this will be in GI. It is assumed that these are children of the corrisponing Border_KeyElementX widget", "Docs/Classes/USingleKeyBindingWidget/Variables/_14.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_15.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_16.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_17.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_18.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_19.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_20.html", [], "USingleKeyBindingWidget");
addToContainers_class("UPressAnyKeyWidget", "The widget the shows up to say \"Press any key to rebind it\".", "Docs/Classes/UPressAnyKeyWidget/UPressAnyKeyWidget.html", ["press", "any", "key", "widget"], "");
addToContainers_variable("", "The message that is like \"Press any key to rebind it. Hold <cancel key\'s name> to cancel\"", "Docs/Classes/UPressAnyKeyWidget/Variables/.html", [], "UPressAnyKeyWidget");
addToContainers_class("URebindingCollisionWidget", "The widget that shows up when the player tries to bind an action to a key that\'s already bound to another action.", "Docs/Classes/URebindingCollisionWidget/URebindingCollisionWidget.html", ["rebinding", "collision", "widget"], "");
addToContainers_variable("PC", "-------------------------------------------------------", "Docs/Classes/URebindingCollisionWidget/Variables/PC.html", [], "URebindingCollisionWidget");
addToContainers_variable("KeyBindingsWidget", "", "Docs/Classes/URebindingCollisionWidget/Variables/KeyBindingsWidget.html", ["key", "bindings", "widget"], "URebindingCollisionWidget");
addToContainers_variable("", "The text that shows what action is already bound to the key", "Docs/Classes/URebindingCollisionWidget/Variables/.html", [], "URebindingCollisionWidget");
addToContainers_variable("", "Button to confirm you want to do the remapping", "Docs/Classes/URebindingCollisionWidget/Variables/_1.html", [], "URebindingCollisionWidget");
addToContainers_variable("", "Button to cancel doing the remapping", "Docs/Classes/URebindingCollisionWidget/Variables/_2.html", [], "URebindingCollisionWidget");
addToContainers_class("UKeyBindingsWidget", "The menu that lets the player change their key bindings. If I already have a widget for this in SettingsWidgets.h then ignore that one - this one\'s probably better.", "Docs/Classes/UKeyBindingsWidget/UKeyBindingsWidget.html", ["key", "bindings", "widget"], "");
addToContainers_variable("PRESS_ANY_KEY_WIDGET_Z_ORDER", "", "Docs/Classes/UKeyBindingsWidget/Variables/PRESS_ANY_KEY_WIDGET_Z_ORDER.html", ["r", "e", "s", "s_", "a", "n", "y_", "k", "e", "y_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UKeyBindingsWidget");
addToContainers_variable("REBINDING_COLLISION_WIDGET_Z_ORDER", "", "Docs/Classes/UKeyBindingsWidget/Variables/REBINDING_COLLISION_WIDGET_Z_ORDER.html", ["e", "b", "i", "n", "d", "i", "n", "g_", "c", "o", "l", "l", "i", "s", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UKeyBindingsWidget");
addToContainers_variable("GI", "------------------------------------------------------", "Docs/Classes/UKeyBindingsWidget/Variables/GI.html", [], "UKeyBindingsWidget");
addToContainers_variable("PC", "Local player controller", "Docs/Classes/UKeyBindingsWidget/Variables/PC.html", [], "UKeyBindingsWidget");
addToContainers_variable("BindingWidgets", "Array of all the single key binding widgets on this widget. Index depends on the action/axis of the widget. @See GetBindingWidgetsArrayIndex", "Docs/Classes/UKeyBindingsWidget/Variables/BindingWidgets.html", ["binding", "widgets"], "UKeyBindingsWidget");
addToContainers_variable("PressAnyKeyWidget", "", "Docs/Classes/UKeyBindingsWidget/Variables/PressAnyKeyWidget.html", ["press", "any", "key", "widget"], "UKeyBindingsWidget");
addToContainers_variable("RebindingCollisionWidget", "", "Docs/Classes/UKeyBindingsWidget/Variables/RebindingCollisionWidget.html", ["rebinding", "collision", "widget"], "UKeyBindingsWidget");
addToContainers_variable("PendingRebindInstigator", "The widget that is waiting for the player to press a key so its action can be rebound. Will be null if the player isn\'t trying to rebind a key", "Docs/Classes/UKeyBindingsWidget/Variables/PendingRebindInstigator.html", ["pending", "rebind", "instigator"], "UKeyBindingsWidget");
addToContainers_variable("PendingKey", "The key that we\'re trying to setup a binding for but need a confirmation from the player to continue doing it", "Docs/Classes/UKeyBindingsWidget/Variables/PendingKey.html", ["pending", "key"], "UKeyBindingsWidget");
addToContainers_variable("", "Resets all the bindings back to defaults", "Docs/Classes/UKeyBindingsWidget/Variables/.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "The widget that is shown when the player clicks a button to rebind an action. Cannot think of a better name", "Docs/Classes/UKeyBindingsWidget/Variables/_1.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "The widget that shows up when rebinding will cause a collision with another action", "Docs/Classes/UKeyBindingsWidget/Variables/_2.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "If you bind a widget to this and set bAutoPopulatePanel to true then it will be automatically populated with each single setting widget. This was added to speed up development", "Docs/Classes/UKeyBindingsWidget/Variables/_3.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "If true and you have a widget bound to Panel_BindingWidgets then it will be automatically populated with each action. Any USingleKeyBindingWidget you have already added to the widget will be destroyed. This was added to speed up development", "Docs/Classes/UKeyBindingsWidget/Variables/_4.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "The widget to use if bAutoPopulatePanel is true", "Docs/Classes/UKeyBindingsWidget/Variables/_5.html", [], "UKeyBindingsWidget");
addToContainers_class("USingleMenuOutputMessageWidget", "A widget that shows a single message to be displayed on the menu output widget. You must create a widget anim for this. The anim decides how long the message is shown for.", "Docs/Classes/USingleMenuOutputMessageWidget/USingleMenuOutputMessageWidget.html", ["single", "menu", "output", "message", "widget"], "");
addToContainers_function("USingleMenuOutputMessageWidget", "", "Docs/Classes/USingleMenuOutputMessageWidget/Functions/USingleMenuOutputMessageWidget.html", ["single", "menu", "output", "message", "widget"], "USingleMenuOutputMessageWidget");
addToContainers_variable("OwningWidget", "---------------------------------------------------", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/OwningWidget.html", ["owning", "widget"], "USingleMenuOutputMessageWidget");
addToContainers_variable("", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/.html", [], "USingleMenuOutputMessageWidget");
addToContainers_variable("ShowAnimName", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/ShowAnimName.html", ["show", "anim", "name"], "USingleMenuOutputMessageWidget");
addToContainers_variable("ShowAnim", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/ShowAnim.html", ["show", "anim"], "USingleMenuOutputMessageWidget");
addToContainers_variable("", "This is the point in ShowAnimation where the animation will play from if the time it has spent playing the anim is past this point. e.g. suppose your anim has a 1 sec fade in at the start, then shows the message for 5 sec, then disappears. If another message comes in and the anim is already 0.5 sec through then we play the anim from 0.5 sec instead of restarting it back at 0. That way if a lot of messages come in fast then the fade in won\'t play from the start for each one and you\'ll actually get to see your message instead of sometimes seeing nothing", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/_1.html", [], "USingleMenuOutputMessageWidget");
addToContainers_variable("", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/_2.html", [], "USingleMenuOutputMessageWidget");
addToContainers_class("UMenuOutputWidget", "Shows messages such as \'you cannot rebind to that key\' My notes: I have written this class with the assumption that UUserWidgets with their tick frequency set Auto may consume CPU cycles each tick. This means I will not spawn all the single message widgets required in InitialSetup and instead will create and destroy them as messages come and go.", "Docs/Classes/UMenuOutputWidget/UMenuOutputWidget.html", ["menu", "output", "widget"], "");
addToContainers_function("UMenuOutputWidget", "", "Docs/Classes/UMenuOutputWidget/Functions/UMenuOutputWidget.html", ["menu", "output", "widget"], "UMenuOutputWidget");
addToContainers_variable("PC", "-----------------------------------------------------", "Docs/Classes/UMenuOutputWidget/Variables/PC.html", [], "UMenuOutputWidget");
addToContainers_variable("", "This will not have any message widgets added to it. It is here in case you want a background or something to your message box. It should have Panel_Warnings_Inner as a child.", "Docs/Classes/UMenuOutputWidget/Variables/.html", [], "UMenuOutputWidget");
addToContainers_variable("", "Widget that displays warning messages", "Docs/Classes/UMenuOutputWidget/Variables/_1.html", [], "UMenuOutputWidget");
addToContainers_variable("", "Widget to use for single warning messages", "Docs/Classes/UMenuOutputWidget/Variables/_2.html", [], "UMenuOutputWidget");
addToContainers_variable("WarningMessages", "Array of warning message widgets. Probably a replica of widgets in Panel_Warnings_Inner->Slots", "Docs/Classes/UMenuOutputWidget/Variables/WarningMessages.html", ["warning", "messages"], "UMenuOutputWidget");
addToContainers_variable("NumWarningMessages", "Number of warning messages this widget is displaying", "Docs/Classes/UMenuOutputWidget/Variables/NumWarningMessages.html", ["num", "warning", "messages"], "UMenuOutputWidget");
addToContainers_variable("", "Maximum number of warning messages that can be shown. MaxNumWarningMessages user widget are created at setup time so don\'t set this to insanely high numbers", "Docs/Classes/UMenuOutputWidget/Variables/_3.html", [], "UMenuOutputWidget");
addToContainers_class("USettingsSubmenuBase", "Base class for widgets that are a submenu of the settings menu. Example of submenus: video settings, control settings", "Docs/Classes/USettingsSubmenuBase/USettingsSubmenuBase.html", ["settings", "submenu", "base"], "");
addToContainers_class("USettingsConfirmationWidget_Exit", "Widget that asks player \"are you sure?\" when deciding whether to apply or discard changes This gets displayed overtop the settings menu. Make sure something on this blocks the settings menu from getting mouse events.", "Docs/Classes/USettingsConfirmationWidget_Exit/USettingsConfirmationWidget_Exit.html", ["settings", "confirmation", "widget_", "exit"], "");
addToContainers_variable("PC", "----------------------------------------------------------", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/PC.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_variable("SettingsMenu", "Widget this widget is on", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/SettingsMenu.html", ["settings", "menu"], "USettingsConfirmationWidget_Exit");
addToContainers_variable("", "Button to save changes", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_variable("", "Button to discard changes", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/_1.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_variable("", "Button to close this confirmation widget and go back to the settings menu", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/_2.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_class("USettingsConfirmationWidget_ResetToDefaults", "Widget that asks the player if they are sure they want to reset settings to default. This gets displayed overtop the settings menu. Make sure something on this blocks the settings menu from getting mouse events.", "Docs/Classes/USettingsConfirmationWidget_ResetToDefaults/USettingsConfirmationWidget_ResetToDefaults.html", ["settings", "confirmation", "widget_", "reset", "to", "defaults"], "");
addToContainers_variable("PC", "----------------------------------------------------------------", "Docs/Classes/USettingsConfirmationWidget_ResetToDefaults/Variables/PC.html", [], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_variable("SettingsMenu", "Widget this widget is on", "Docs/Classes/USettingsConfirmationWidget_ResetToDefaults/Variables/SettingsMenu.html", ["settings", "menu"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_variable("", "Button to go ahead and reset settings back to defaults", "Docs/Classes/USettingsConfirmationWidget_ResetToDefaults/Variables/.html", [], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_variable("", "Button to go back", "Docs/Classes/USettingsConfirmationWidget_ResetToDefaults/Variables/_1.html", [], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_class("USettingsWidget", "The widget that shows settings like video settings, key mappings etc", "Docs/Classes/USettingsWidget/USettingsWidget.html", ["settings", "widget"], "");
addToContainers_function("USettingsWidget", "", "Docs/Classes/USettingsWidget/Functions/USettingsWidget.html", ["settings", "widget"], "USettingsWidget");
addToContainers_variable("RESET_TO_DEFAULTS_CONFIRMATION_WIDGET_Z_ORDER", "", "Docs/Classes/USettingsWidget/Variables/RESET_TO_DEFAULTS_CONFIRMATION_WIDGET_Z_ORDER.html", ["e", "s", "e", "t_", "t", "o_", "d", "e", "f", "a", "u", "l", "t", "s_", "c", "o", "n", "f", "i", "r", "m", "a", "t", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "USettingsWidget");
addToContainers_variable("EXIT_CONFIRMATION_WIDGET_Z_ORDER", "", "Docs/Classes/USettingsWidget/Variables/EXIT_CONFIRMATION_WIDGET_Z_ORDER.html", ["x", "i", "t_", "c", "o", "n", "f", "i", "r", "m", "a", "t", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "USettingsWidget");
addToContainers_variable("GI", "------------------------------------------------------------", "Docs/Classes/USettingsWidget/Variables/GI.html", [], "USettingsWidget");
addToContainers_variable("PC", "", "Docs/Classes/USettingsWidget/Variables/PC.html", [], "USettingsWidget");
addToContainers_variable("", "Button to apply/save changes and return to the previous menu", "Docs/Classes/USettingsWidget/Variables/.html", [], "USettingsWidget");
addToContainers_variable("", "Button to not save changes and return to the previous menu", "Docs/Classes/USettingsWidget/Variables/_1.html", [], "USettingsWidget");
addToContainers_variable("", "Button that changes all settings back to defaults", "Docs/Classes/USettingsWidget/Variables/_2.html", [], "USettingsWidget");
addToContainers_variable("", "Widget switcher to put each submenu on", "Docs/Classes/USettingsWidget/Variables/_3.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the video settings submenu", "Docs/Classes/USettingsWidget/Variables/_4.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_5.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the audio submenu", "Docs/Classes/USettingsWidget/Variables/_6.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_7.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the controls submenu", "Docs/Classes/USettingsWidget/Variables/_8.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_9.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the key bindings submenu", "Docs/Classes/USettingsWidget/Variables/_10.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_11.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the game settings submenu", "Docs/Classes/USettingsWidget/Variables/_12.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_13.html", [], "USettingsWidget");
addToContainers_variable("", "The individual menu to be on when the settings menu is opened", "Docs/Classes/USettingsWidget/Variables/_14.html", [], "USettingsWidget");
addToContainers_variable("", "Whether to remember which individual menu was open last time My notes: this may or may not persistest through map changes. If it does not considier storing a variable on the GI", "Docs/Classes/USettingsWidget/Variables/_15.html", [], "USettingsWidget");
addToContainers_variable("", "What to do with unsaved changes when the player closes the menu by pressing the cancel key", "Docs/Classes/USettingsWidget/Variables/_16.html", [], "USettingsWidget");
addToContainers_variable("SubmenuToShowOnNextOpen", "Widget to show when this widget is shown", "Docs/Classes/USettingsWidget/Variables/SubmenuToShowOnNextOpen.html", ["submenu", "to", "show", "on", "next", "open"], "USettingsWidget");
addToContainers_variable("", "Widget that asks player whether to apply and save unsaved changes when closing the widget", "Docs/Classes/USettingsWidget/Variables/_17.html", [], "USettingsWidget");
addToContainers_variable("ConfirmationWidget_Exit", "", "Docs/Classes/USettingsWidget/Variables/ConfirmationWidget_Exit.html", ["confirmation", "widget_", "exit"], "USettingsWidget");
addToContainers_variable("", "Widget that asks the player \"are you sure you want to reset all settings to defaults?\"", "Docs/Classes/USettingsWidget/Variables/_18.html", [], "USettingsWidget");
addToContainers_variable("ConfirmationWidget_ResetToDefaults", "", "Docs/Classes/USettingsWidget/Variables/ConfirmationWidget_ResetToDefaults.html", ["confirmation", "widget_", "reset", "to", "defaults"], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_19.html", [], "USettingsWidget");
addToContainers_struct("FVideoSettingInfoBase", "", "Docs/Structs/FVideoSettingInfoBase/FVideoSettingInfoBase.html", ["video", "setting", "info", "base"], "");
addToContainers_function("FVideoSettingInfoBase", "", "Docs/Structs/FVideoSettingInfoBase/Functions/FVideoSettingInfoBase.html", ["video", "setting", "info", "base"], "FVideoSettingInfoBase");
addToContainers_variable("", "", "Docs/Structs/FVideoSettingInfoBase/Variables/.html", [], "FVideoSettingInfoBase");
addToContainers_variable("DisplayName", "Name of setting", "Docs/Structs/FVideoSettingInfoBase/Variables/DisplayName.html", ["display", "name"], "FVideoSettingInfoBase");
addToContainers_struct("FVideoSetting_WindowMode", "Update UI", "Docs/Structs/FVideoSetting_WindowMode/FVideoSetting_WindowMode.html", ["video", "setting_", "window", "mode"], "");
addToContainers_function("FVideoSetting_WindowMode", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/FVideoSetting_WindowMode.html", ["video", "setting_", "window", "mode"], "FVideoSetting_WindowMode");
addToContainers_struct("FVideoSetting_Resolution", "", "Docs/Structs/FVideoSetting_Resolution/FVideoSetting_Resolution.html", ["video", "setting_", "resolution"], "");
addToContainers_function("FVideoSetting_Resolution", "", "Docs/Structs/FVideoSetting_Resolution/Functions/FVideoSetting_Resolution.html", ["video", "setting_", "resolution"], "FVideoSetting_Resolution");
addToContainers_variable("ResolutionsArray", "Array of all resolutions the monitor can handle", "Docs/Structs/FVideoSetting_Resolution/Variables/ResolutionsArray.html", ["resolutions", "array"], "FVideoSetting_Resolution");
addToContainers_variable("CurrentResolutionIndex", "Index in ResolutionsArray that the current resolution is", "Docs/Structs/FVideoSetting_Resolution/Variables/CurrentResolutionIndex.html", ["current", "resolution", "index"], "FVideoSetting_Resolution");
addToContainers_struct("FVideoSetting_OverallQuality", "", "Docs/Structs/FVideoSetting_OverallQuality/FVideoSetting_OverallQuality.html", ["video", "setting_", "overall", "quality"], "");
addToContainers_function("FVideoSetting_OverallQuality", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/FVideoSetting_OverallQuality.html", ["video", "setting_", "overall", "quality"], "FVideoSetting_OverallQuality");
addToContainers_variable("ValueBeforeSwitchingToCustom", "What the overall quality level was at before switching to custom", "Docs/Structs/FVideoSetting_OverallQuality/Variables/ValueBeforeSwitchingToCustom.html", ["value", "before", "switching", "to", "custom"], "FVideoSetting_OverallQuality");
addToContainers_struct("FVideoSetting_FoliageQuality", "", "Docs/Structs/FVideoSetting_FoliageQuality/FVideoSetting_FoliageQuality.html", ["video", "setting_", "foliage", "quality"], "");
addToContainers_function("FVideoSetting_FoliageQuality", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/FVideoSetting_FoliageQuality.html", ["video", "setting_", "foliage", "quality"], "FVideoSetting_FoliageQuality");
addToContainers_struct("FVideoSetting_FrameRateLimit", "", "Docs/Structs/FVideoSetting_FrameRateLimit/FVideoSetting_FrameRateLimit.html", ["video", "setting_", "frame", "rate", "limit"], "");
addToContainers_function("FVideoSetting_FrameRateLimit", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/FVideoSetting_FrameRateLimit.html", ["video", "setting_", "frame", "rate", "limit"], "FVideoSetting_FrameRateLimit");
addToContainers_variable("MIN", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Variables/MIN.html", ["i", "n"], "FVideoSetting_FrameRateLimit");
addToContainers_variable("MAX", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Variables/MAX.html", ["a", "x"], "FVideoSetting_FrameRateLimit");
addToContainers_variable("STEP_SIZE", "1 is low. Pressing the buttons to change framerate limit is very tedious", "Docs/Structs/FVideoSetting_FrameRateLimit/Variables/STEP_SIZE.html", ["t", "e", "p_", "s", "i", "z", "e"], "FVideoSetting_FrameRateLimit");
addToContainers_struct("FVideoSetting_AntiAliasingQuality", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/FVideoSetting_AntiAliasingQuality.html", ["video", "setting_", "anti", "aliasing", "quality"], "");
addToContainers_function("FVideoSetting_AntiAliasingQuality", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/FVideoSetting_AntiAliasingQuality.html", ["video", "setting_", "anti", "aliasing", "quality"], "FVideoSetting_AntiAliasingQuality");
addToContainers_struct("FVideoSetting_ShadowQuality", "11 different levels of AA: None, FXAA very low, low, medium, high, very high and TAA very low, low, medium, high, very high I have written this class\'s functions with the assumption that - the console command r.DefaultFeature.AntiAliasing 0 = none 1 = FXAA 2 = TemporalAA will set the method - UGameUserSettings::SetAntiAliasingQuality affects how strong the anti-aliasing method is and it\'s range is [0, 4]", "Docs/Structs/FVideoSetting_ShadowQuality/FVideoSetting_ShadowQuality.html", ["video", "setting_", "shadow", "quality"], "");
addToContainers_function("FVideoSetting_ShadowQuality", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/FVideoSetting_ShadowQuality.html", ["video", "setting_", "shadow", "quality"], "FVideoSetting_ShadowQuality");
addToContainers_struct("FVideoSetting_ViewDistanceQuality", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/FVideoSetting_ViewDistanceQuality.html", ["video", "setting_", "view", "distance", "quality"], "");
addToContainers_function("FVideoSetting_ViewDistanceQuality", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/FVideoSetting_ViewDistanceQuality.html", ["video", "setting_", "view", "distance", "quality"], "FVideoSetting_ViewDistanceQuality");
addToContainers_struct("FVideoSetting_TextureQuality", "", "Docs/Structs/FVideoSetting_TextureQuality/FVideoSetting_TextureQuality.html", ["video", "setting_", "texture", "quality"], "");
addToContainers_function("FVideoSetting_TextureQuality", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/FVideoSetting_TextureQuality.html", ["video", "setting_", "texture", "quality"], "FVideoSetting_TextureQuality");
addToContainers_struct("FVideoSetting_VisualEffectQuality", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/FVideoSetting_VisualEffectQuality.html", ["video", "setting_", "visual", "effect", "quality"], "");
addToContainers_function("FVideoSetting_VisualEffectQuality", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/FVideoSetting_VisualEffectQuality.html", ["video", "setting_", "visual", "effect", "quality"], "FVideoSetting_VisualEffectQuality");
addToContainers_struct("FVideoSetting_PostProcessingQuality", "", "Docs/Structs/FVideoSetting_PostProcessingQuality/FVideoSetting_PostProcessingQuality.html", ["video", "setting_", "post", "processing", "quality"], "");
addToContainers_function("FVideoSetting_PostProcessingQuality", "", "Docs/Structs/FVideoSetting_PostProcessingQuality/Functions/FVideoSetting_PostProcessingQuality.html", ["video", "setting_", "post", "processing", "quality"], "FVideoSetting_PostProcessingQuality");
addToContainers_struct("FVideoSetting_VSync", "", "Docs/Structs/FVideoSetting_VSync/FVideoSetting_VSync.html", ["video", "setting_", "v", "sync"], "");
addToContainers_function("FVideoSetting_VSync", "", "Docs/Structs/FVideoSetting_VSync/Functions/FVideoSetting_VSync.html", ["video", "setting_", "v", "sync"], "FVideoSetting_VSync");
addToContainers_class("USingleVideoSettingWidget", "Widget for a single video setting", "Docs/Classes/USingleVideoSettingWidget/USingleVideoSettingWidget.html", ["single", "video", "setting", "widget"], "");
addToContainers_variable("PC", "--------------------------------------------------------", "Docs/Classes/USingleVideoSettingWidget/Variables/PC.html", [], "USingleVideoSettingWidget");
addToContainers_variable("VideoSettingsWidget", "", "Docs/Classes/USingleVideoSettingWidget/Variables/VideoSettingsWidget.html", ["video", "settings", "widget"], "USingleVideoSettingWidget");
addToContainers_variable("", "Text that displays the name of the setting", "Docs/Classes/USingleVideoSettingWidget/Variables/.html", [], "USingleVideoSettingWidget");
addToContainers_variable("", "Text to display the value of the setting", "Docs/Classes/USingleVideoSettingWidget/Variables/_1.html", [], "USingleVideoSettingWidget");
addToContainers_variable("", "Progress bar to display the value of the setting", "Docs/Classes/USingleVideoSettingWidget/Variables/_2.html", [], "USingleVideoSettingWidget");
addToContainers_variable("", "Button to adjust setting to the left", "Docs/Classes/USingleVideoSettingWidget/Variables/_3.html", [], "USingleVideoSettingWidget");
addToContainers_variable("AdjustLeftButtonOriginalOpacity", "", "Docs/Classes/USingleVideoSettingWidget/Variables/AdjustLeftButtonOriginalOpacity.html", ["adjust", "left", "button", "original", "opacity"], "USingleVideoSettingWidget");
addToContainers_variable("AdjustRightButtonOriginalOpacity", "", "Docs/Classes/USingleVideoSettingWidget/Variables/AdjustRightButtonOriginalOpacity.html", ["adjust", "right", "button", "original", "opacity"], "USingleVideoSettingWidget");
addToContainers_variable("", "Button to adjust setting to the right", "Docs/Classes/USingleVideoSettingWidget/Variables/_4.html", [], "USingleVideoSettingWidget");
addToContainers_variable("SettingInfo", "", "Docs/Classes/USingleVideoSettingWidget/Variables/SettingInfo.html", ["setting", "info"], "USingleVideoSettingWidget");
addToContainers_variable("", "Type of setting this widget is for", "Docs/Classes/USingleVideoSettingWidget/Variables/_5.html", [], "USingleVideoSettingWidget");
addToContainers_class("UVideoSettingsWidget", "Widget that shows and allows player to change their video settings", "Docs/Classes/UVideoSettingsWidget/UVideoSettingsWidget.html", ["video", "settings", "widget"], "");
addToContainers_function("UVideoSettingsWidget", "", "Docs/Classes/UVideoSettingsWidget/Functions/UVideoSettingsWidget.html", ["video", "settings", "widget"], "UVideoSettingsWidget");
addToContainers_variable("", "", "Docs/Classes/UVideoSettingsWidget/Variables/.html", [], "UVideoSettingsWidget");
addToContainers_variable("SingleSettingWidgets", "Array of every single setting widget. Entries can be null. Ordering matters.", "Docs/Classes/UVideoSettingsWidget/Variables/SingleSettingWidgets.html", ["single", "setting", "widgets"], "UVideoSettingsWidget");
addToContainers_variable("", "If true then the setings menu will be auto populated. This was mainly added here for development", "Docs/Classes/UVideoSettingsWidget/Variables/_1.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "If bAutoPopulate is true then this is the widget that is spawned for each single setting type", "Docs/Classes/UVideoSettingsWidget/Variables/_2.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "If bAutoPopulate is true then this is the panel they are added to", "Docs/Classes/UVideoSettingsWidget/Variables/_3.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "Render opacity multiplier for adjust buttons when the value is at it\'s lowest/highest", "Docs/Classes/UVideoSettingsWidget/Variables/_4.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "Visibility to set adjustment buttons when the control setting is at its limit", "Docs/Classes/UVideoSettingsWidget/Variables/_5.html", [], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_WindowMode", "Struct for each of the different types of settings", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_WindowMode.html", ["setting", "info_", "window", "mode"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_Resolution", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_Resolution.html", ["setting", "info_", "resolution"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_OverallQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_OverallQuality.html", ["setting", "info_", "overall", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_FoliageQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_FoliageQuality.html", ["setting", "info_", "foliage", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_FramerateLimit", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_FramerateLimit.html", ["setting", "info_", "framerate", "limit"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_AntiAliasingQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_AntiAliasingQuality.html", ["setting", "info_", "anti", "aliasing", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_ShadowQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_ShadowQuality.html", ["setting", "info_", "shadow", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_ViewDistanceQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_ViewDistanceQuality.html", ["setting", "info_", "view", "distance", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_TextureQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_TextureQuality.html", ["setting", "info_", "texture", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_VisualEffectQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_VisualEffectQuality.html", ["setting", "info_", "visual", "effect", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_PostProcessingQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_PostProcessingQuality.html", ["setting", "info_", "post", "processing", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_VSync", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_VSync.html", ["setting", "info_", "v", "sync"], "UVideoSettingsWidget");
addToContainers_class("USelectableWidgetComponent", "Widget component that shows information about a selectable. It should not have a user widget assigned but instead the faction info will set one", "Docs/Classes/USelectableWidgetComponent/USelectableWidgetComponent.html", ["selectable", "widget", "component"], "");
addToContainers_function("USelectableWidgetComponent", "", "Docs/Classes/USelectableWidgetComponent/Functions/USelectableWidgetComponent.html", ["selectable", "widget", "component"], "USelectableWidgetComponent");
addToContainers_variable("", "Pointer to the user widget this component has", "Docs/Classes/USelectableWidgetComponent/Variables/.html", [], "USelectableWidgetComponent");
addToContainers_class("UWorldWidget", "Widget that appears on a selectable in world", "Docs/Classes/UWorldWidget/UWorldWidget.html", ["world", "widget"], "");
addToContainers_function("UWorldWidget", "", "Docs/Classes/UWorldWidget/Functions/UWorldWidget.html", ["world", "widget"], "UWorldWidget");
addToContainers_variable("", "Health bar", "Docs/Classes/UWorldWidget/Variables/.html", [], "UWorldWidget");
addToContainers_variable("", "Health as a number ", "Docs/Classes/UWorldWidget/Variables/_1.html", [], "UWorldWidget");
addToContainers_variable("", "Progress bar for selectable resource. Selectable resource is something like mana", "Docs/Classes/UWorldWidget/Variables/_2.html", [], "UWorldWidget");
addToContainers_variable("", "Construction progress bar. Only really relevant for buildings", "Docs/Classes/UWorldWidget/Variables/_3.html", [], "UWorldWidget");
addToContainers_variable("", "Construction progess as a percentage. Does not show % sign", "Docs/Classes/UWorldWidget/Variables/_4.html", [], "UWorldWidget");
addToContainers_variable("SelectableMaxHealth", "Attributes about the owning selectable", "Docs/Classes/UWorldWidget/Variables/SelectableMaxHealth.html", ["selectable", "max", "health"], "UWorldWidget");
addToContainers_variable("", "List of widgets that can be bound with BindWidgetOptional. Auto populated inside ctor. Maps widget name to widget class", "Docs/Classes/UWorldWidget/Variables/_5.html", [], "UWorldWidget");
addToContainers_class("FRTS_Ver2EditorModule", "This module was created to create the editor utility widget for the editor play settings. I did not end up using it for that though or anything really.", "Docs/Classes/FRTS_Ver2EditorModule/FRTS_Ver2EditorModule.html", ["r", "t", "s_", "ver2", "editor", "module"], "");
addToContainers_enum("EPlayerSpawnRule", "", "Docs/Enums/EPlayerSpawnRule/EPlayerSpawnRule.html", ["player", "spawn", "rule"], "");
addToContainers_enumValue("Random", "Pick a random player start on the map", "Docs/Enums/EPlayerSpawnRule/Values/Random.html", [], "EPlayerSpawnRule");
addToContainers_enumValue("NearTeammates", "Try and spawn players near their teammates", "Docs/Enums/EPlayerSpawnRule/Values/NearTeammates.html", ["near", "teammates"], "EPlayerSpawnRule");
addToContainers_enum("EPropertyOverrideMode", "", "Docs/Enums/EPropertyOverrideMode/EPropertyOverrideMode.html", ["property", "override", "mode"], "");
addToContainers_enumValue("UseDefaultIfNotSet", "Only use the override if one is not set", "Docs/Enums/EPropertyOverrideMode/Values/UseDefaultIfNotSet.html", ["use", "default", "if", "not", "set"], "EPropertyOverrideMode");
addToContainers_enumValue("AlwaysUseDefault", "Always use the override", "Docs/Enums/EPropertyOverrideMode/Values/AlwaysUseDefault.html", ["always", "use", "default"], "EPropertyOverrideMode");
addToContainers_enum("EPIEOnMapSelectableSetupResult", "", "Docs/Enums/EPIEOnMapSelectableSetupResult/EPIEOnMapSelectableSetupResult.html", ["p", "i", "e", "on", "map", "selectable", "setup", "result"], "");
addToContainers_enumValue("None", "Here to pick up uninitialized values. Means nothing else. Never to be used", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/None.html", [], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("OwnerIndexTooHigh", "Owner index on instance on map is too high for the number of players in PIE and was not reassigned to the server player so will not be respawned", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/OwnerIndexTooHigh.html", ["owner", "index", "too", "high"], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("ObserverOwner", "Was assigned an owner who is a match observer so cannot be respawned", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/ObserverOwner.html", ["observer", "owner"], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("WrongFaction", "Was assigned owner but the owner\'s faction does not have this selectable on its building/unit roster so could not be respawned", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/WrongFaction.html", ["wrong", "faction"], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("Success", "Selectable will be respawned later and will appear in PIE/standalone session", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/Success.html", [], "EPIEOnMapSelectableSetupResult");
addToContainers_enum("EPlayerType", "", "Docs/Enums/EPlayerType/EPlayerType.html", ["player", "type"], "");
addToContainers_enumValue("Unknown", "Has not been specified yet", "Docs/Enums/EPlayerType/Values/Unknown.html", [], "EPlayerType");
addToContainers_enumValue("Player", "A player participating in a match", "Docs/Enums/EPlayerType/Values/Player.html", [], "EPlayerType");
addToContainers_enumValue("Observer", "A player watching the match", "Docs/Enums/EPlayerType/Values/Observer.html", [], "EPlayerType");
addToContainers_enum("ERotationDirection", "", "Docs/Enums/ERotationDirection/ERotationDirection.html", ["rotation", "direction"], "");
addToContainers_enumValue("NoDirectionEstablished", "Direction of rotation. Used when rotating ghost", "Docs/Enums/ERotationDirection/Values/NoDirectionEstablished.html", ["no", "direction", "established"], "ERotationDirection");
addToContainers_enumValue("Clockwise", "", "Docs/Enums/ERotationDirection/Values/Clockwise.html", [], "ERotationDirection");
addToContainers_enumValue("CounterClockwise", "", "Docs/Enums/ERotationDirection/Values/CounterClockwise.html", ["counter", "clockwise"], "ERotationDirection");
addToContainers_enum("", "", "Docs/Enums//.html", [], "");
addToContainers_enumValue("ResetTiles", "--------------------------------------------------------------------------------------------", "Docs/Enums//Values/ResetTiles.html", ["reset", "tiles"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("0", "", "Docs/Enums//Values/0.html", [], "");
addToContainers_enumValue("RevealTilesFromBuildings", "", "Docs/Enums//Values/RevealTilesFromBuildings.html", ["reveal", "tiles", "from", "buildings"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("RevealTilesFromInfantry", "", "Docs/Enums//Values/RevealTilesFromInfantry.html", ["reveal", "tiles", "from", "infantry"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("2", "", "Docs/Enums//Values/2.html", [], "");
addToContainers_enumValue("TickAndRevealTilesFromTemporaryRevealEffects", "", "Docs/Enums//Values/TickAndRevealTilesFromTemporaryRevealEffects.html", ["tick", "and", "reveal", "tiles", "from", "temporary", "reveal", "effects"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("3", "", "Docs/Enums//Values/3.html", [], "");
addToContainers_enumValue("StoreTileVisibility", "", "Docs/Enums//Values/StoreTileVisibility.html", ["store", "tile", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("4", "", "Docs/Enums//Values/4.html", [], "");
addToContainers_enumValue("QueueUpRenderingFogOfWar", "", "Docs/Enums//Values/QueueUpRenderingFogOfWar.html", ["queue", "up", "rendering", "fog", "of", "war"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("5", "", "Docs/Enums//Values/5.html", [], "");
addToContainers_enumValue("StoreHostileTeamSelectableVisibility", "", "Docs/Enums//Values/StoreHostileTeamSelectableVisibility.html", ["store", "hostile", "team", "selectable", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("6", "", "Docs/Enums//Values/6.html", [], "");
addToContainers_enumValue("StoreProjectilesVisibility", "", "Docs/Enums//Values/StoreProjectilesVisibility.html", ["store", "projectiles", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("7", "", "Docs/Enums//Values/7.html", [], "");
addToContainers_enumValue("StoreParticleSystemsVisibility", "", "Docs/Enums//Values/StoreParticleSystemsVisibility.html", ["store", "particle", "systems", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("8", "", "Docs/Enums//Values/8.html", [], "");
addToContainers_enumValue("StoreInventoryItemVisibility", "", "Docs/Enums//Values/StoreInventoryItemVisibility.html", ["store", "inventory", "item", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("9", "", "Docs/Enums//Values/9.html", [], "");
addToContainers_enumValue("Finished", "", "Docs/Enums//Values/Finished.html", [], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("10", "", "Docs/Enums//Values/10.html", [], "");
addToContainers_enum("", "", "Docs/Enums/_1/.html", [], "");
addToContainers_enumValue("ResearchedFromBuilding", "How the player completed the upgrade", "Docs/Enums/_1/Values/ResearchedFromBuilding.html", ["researched", "from", "building"], "");
addToContainers_enumValue("CommanderAbility", "", "Docs/Enums/_1/Values/CommanderAbility.html", ["commander", "ability"], "");
addToContainers_enum("", "", "Docs/Enums/_2/.html", [], "");
addToContainers_enumValue("Uninitialized", "This is just a bool but has a third value called \"Uninitialized\". Side note: I get compile errors when this is declared as a UENUM", "Docs/Enums/_2/Values/Uninitialized.html", [], "");
addToContainers_enumValue("False", "", "Docs/Enums/_2/Values/False.html", [], "");
addToContainers_enumValue("True", "", "Docs/Enums/_2/Values/True.html", [], "");
addToContainers_enum("EDamageDealingRule", "", "Docs/Enums/EDamageDealingRule/EDamageDealingRule.html", ["damage", "dealing", "rule"], "");
addToContainers_enumValue("AbsoluteAmount", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EDamageDealingRule/Values/AbsoluteAmount.html", ["absolute", "amount"], "EDamageDealingRule");
addToContainers_enumValue("PercentageOfSelectableResourceAmountDrained", "", "Docs/Enums/EDamageDealingRule/Values/PercentageOfSelectableResourceAmountDrained.html", ["percentage", "of", "selectable", "resource", "amount", "drained"], "EDamageDealingRule");
addToContainers_enum("EUnitState", "", "Docs/Enums/EUnitState/EUnitState.html", ["unit", "state"], "");
addToContainers_enumValue("BehaviorNotStarted", "State AI controller is spawned with", "Docs/Enums/EUnitState/Values/BehaviorNotStarted.html", ["behavior", "not", "started"], "EUnitState");
addToContainers_enumValue("MovingToBarracksInitialPoint", "Was just spawned and is moving to the initial location for building", "Docs/Enums/EUnitState/Values/MovingToBarracksInitialPoint.html", ["moving", "to", "barracks", "initial", "point"], "EUnitState");
addToContainers_enumValue("MovingToBarracksRallyPoint", "Moving to the barracks rally point", "Docs/Enums/EUnitState/Values/MovingToBarracksRallyPoint.html", ["moving", "to", "barracks", "rally", "point"], "EUnitState");
addToContainers_enumValue("PossessedUnitDestroyed", "State when possessed unit has reached zero heath", "Docs/Enums/EUnitState/Values/PossessedUnitDestroyed.html", ["possessed", "unit", "destroyed"], "EUnitState");
addToContainers_enumValue("Idle_WithoutTarget", "Has no command and no target within aquire range", "Docs/Enums/EUnitState/Values/Idle_WithoutTarget.html", ["idle_", "without", "target"], "EUnitState");
addToContainers_enumValue("Idle_WithTarget", "Has no command so is idle but has aquired a target within aquire range and will persue and engage", "Docs/Enums/EUnitState/Values/Idle_WithTarget.html", ["idle_", "with", "target"], "EUnitState");
addToContainers_enumValue("Idle_ReturningToLeashLocation", "Has no command and is returning to leash location after chasing enemy", "Docs/Enums/EUnitState/Values/Idle_ReturningToLeashLocation.html", ["idle_", "returning", "to", "leash", "location"], "EUnitState");
addToContainers_enumValue("HoldingPositionWithoutTarget", "", "Docs/Enums/EUnitState/Values/HoldingPositionWithoutTarget.html", ["holding", "position", "without", "target"], "EUnitState");
addToContainers_enumValue("HoldingPositionWithTarget", "", "Docs/Enums/EUnitState/Values/HoldingPositionWithTarget.html", ["holding", "position", "with", "target"], "EUnitState");
addToContainers_enumValue("MovingToRightClickLocation", "Player has right clicked on world", "Docs/Enums/EUnitState/Values/MovingToRightClickLocation.html", ["moving", "to", "right", "click", "location"], "EUnitState");
addToContainers_enumValue("MovingToPointNearStaticSelectable", "Move to a static selectable e.g. building", "Docs/Enums/EUnitState/Values/MovingToPointNearStaticSelectable.html", ["moving", "to", "point", "near", "static", "selectable"], "EUnitState");
addToContainers_enumValue("MoveCommandToFriendlyMobileSelectable", "can also move itself i.e. not building", "Docs/Enums/EUnitState/Values/MoveCommandToFriendlyMobileSelectable.html", ["move", "command", "to", "friendly", "mobile", "selectable"], "EUnitState");
addToContainers_enumValue("RightClickOnEnemy", "Right click or attack move command on an enemy selectable", "Docs/Enums/EUnitState/Values/RightClickOnEnemy.html", ["right", "click", "on", "enemy"], "EUnitState");
addToContainers_enumValue("AttackMoveCommand_WithNoTargetAquired", "Attack move command when clicked on location in world", "Docs/Enums/EUnitState/Values/AttackMoveCommand_WithNoTargetAquired.html", ["attack", "move", "command_", "with", "no", "target", "aquired"], "EUnitState");
addToContainers_enumValue("AttackMoveCommand_WithTargetAquired", "Doing attack move and has aquired a target within range ", "Docs/Enums/EUnitState/Values/AttackMoveCommand_WithTargetAquired.html", ["attack", "move", "command_", "with", "target", "aquired"], "EUnitState");
addToContainers_enumValue("AttackMoveCommand_ReturningToLeashLocation", "", "Docs/Enums/EUnitState/Values/AttackMoveCommand_ReturningToLeashLocation.html", ["attack", "move", "command_", "returning", "to", "leash", "location"], "EUnitState");
addToContainers_enumValue("HeadingToContextCommandWorldLocation", "Heading to location on map to carry out context command", "Docs/Enums/EUnitState/Values/HeadingToContextCommandWorldLocation.html", ["heading", "to", "context", "command", "world", "location"], "EUnitState");
addToContainers_enumValue("ChasingTargetToDoContextCommand", "Heading towards a target to carry out context command", "Docs/Enums/EUnitState/Values/ChasingTargetToDoContextCommand.html", ["chasing", "target", "to", "do", "context", "command"], "EUnitState");
addToContainers_enumValue("HeadingToBuildingToDoBuildingTargetingAbility", "Heading towards a building to do a special building targeting ability", "Docs/Enums/EUnitState/Values/HeadingToBuildingToDoBuildingTargetingAbility.html", ["heading", "to", "building", "to", "do", "building", "targeting", "ability"], "EUnitState");
addToContainers_enumValue("HeadingToBuildingToEnterItsGarrison", "", "Docs/Enums/EUnitState/Values/HeadingToBuildingToEnterItsGarrison.html", ["heading", "to", "building", "to", "enter", "its", "garrison"], "EUnitState");
addToContainers_enumValue("InsideBuildingGarrison", "This is the only \'inside garrison\' enum value I have. If/when I add being able to attack from inside garrisons then I might want to add another", "Docs/Enums/EUnitState/Values/InsideBuildingGarrison.html", ["inside", "building", "garrison"], "EUnitState");
addToContainers_enumValue("HeadingToResourceSpot", "", "Docs/Enums/EUnitState/Values/HeadingToResourceSpot.html", ["heading", "to", "resource", "spot"], "EUnitState");
addToContainers_enumValue("WaitingToGatherResources", "Standing at a resource spot waiting our turn to gather from it", "Docs/Enums/EUnitState/Values/WaitingToGatherResources.html", ["waiting", "to", "gather", "resources"], "EUnitState");
addToContainers_enumValue("GatheringResources", "", "Docs/Enums/EUnitState/Values/GatheringResources.html", ["gathering", "resources"], "EUnitState");
addToContainers_enumValue("ReturningToResourceDepot", "", "Docs/Enums/EUnitState/Values/ReturningToResourceDepot.html", ["returning", "to", "resource", "depot"], "EUnitState");
addToContainers_enumValue("DroppingOfResources", "Playing drop off resources anim", "Docs/Enums/EUnitState/Values/DroppingOfResources.html", ["dropping", "of", "resources"], "EUnitState");
addToContainers_enumValue("HeadingToConstructionSite", "Heading to a construction site that already exists to work on it", "Docs/Enums/EUnitState/Values/HeadingToConstructionSite.html", ["heading", "to", "construction", "site"], "EUnitState");
addToContainers_enumValue("HeadingToPotentialConstructionSite", "Heading to a location to try and place building foundations when there", "Docs/Enums/EUnitState/Values/HeadingToPotentialConstructionSite.html", ["heading", "to", "potential", "construction", "site"], "EUnitState");
addToContainers_enumValue("WaitingForFoundationsToBePlaced", "Recently tried to place building and waiting for result from player controller", "Docs/Enums/EUnitState/Values/WaitingForFoundationsToBePlaced.html", ["waiting", "for", "foundations", "to", "be", "placed"], "EUnitState");
addToContainers_enumValue("ConstructingBuilding", "", "Docs/Enums/EUnitState/Values/ConstructingBuilding.html", ["constructing", "building"], "EUnitState");
addToContainers_enumValue("DoingContextActionAnim", "Doing the animation for a context action", "Docs/Enums/EUnitState/Values/DoingContextActionAnim.html", ["doing", "context", "action", "anim"], "EUnitState");
addToContainers_enumValue("DoingSpecialBuildingTargetingAbility", "", "Docs/Enums/EUnitState/Values/DoingSpecialBuildingTargetingAbility.html", ["doing", "special", "building", "targeting", "ability"], "EUnitState");
addToContainers_enumValue("GoingToPickUpInventoryItem", "Moving to an inventory item on ground to pick it up", "Docs/Enums/EUnitState/Values/GoingToPickUpInventoryItem.html", ["going", "to", "pick", "up", "inventory", "item"], "EUnitState");
addToContainers_enumValue("PickingUpInventoryItem", "Playing animation to pick up inventory item off ground", "Docs/Enums/EUnitState/Values/PickingUpInventoryItem.html", ["picking", "up", "inventory", "item"], "EUnitState");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EUnitState/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EUnitState");
addToContainers_enum("EUnitAnimState", "", "Docs/Enums/EUnitAnimState/EUnitAnimState.html", ["unit", "anim", "state"], "");
addToContainers_enumValue("NotPlayingImportantAnim", "Not playing an animation that will affect behavior", "Docs/Enums/EUnitAnimState/Values/NotPlayingImportantAnim.html", ["not", "playing", "important", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingAttackAnim", "Playing attack animation and have not reached anim notify that says anim is finshed", "Docs/Enums/EUnitAnimState/Values/DoingAttackAnim.html", ["doing", "attack", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingInterruptibleContextActionAnim", "A context action anim that can be interrupted by a player command", "Docs/Enums/EUnitAnimState/Values/DoingInterruptibleContextActionAnim.html", ["doing", "interruptible", "context", "action", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingUninterruptibleContextActionAnim", "A context action anim that cannot be interrupted by a player command", "Docs/Enums/EUnitAnimState/Values/DoingUninterruptibleContextActionAnim.html", ["doing", "uninterruptible", "context", "action", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingInterruptibleBuildingTargetingAbilityAnim", "A special ability that targets buildings", "Docs/Enums/EUnitAnimState/Values/DoingInterruptibleBuildingTargetingAbilityAnim.html", ["doing", "interruptible", "building", "targeting", "ability", "anim"], "EUnitAnimState");
addToContainers_enumValue("PlayingGatheringResourcesAnim", "Playing resource gathering anim", "Docs/Enums/EUnitAnimState/Values/PlayingGatheringResourcesAnim.html", ["playing", "gathering", "resources", "anim"], "EUnitAnimState");
addToContainers_enumValue("PlayingDropOffResourcesAnim", "Playing drop off resources anim", "Docs/Enums/EUnitAnimState/Values/PlayingDropOffResourcesAnim.html", ["playing", "drop", "off", "resources", "anim"], "EUnitAnimState");
addToContainers_enumValue("ConstructingBuildingAnim", "Constructing building", "Docs/Enums/EUnitAnimState/Values/ConstructingBuildingAnim.html", ["constructing", "building", "anim"], "EUnitAnimState");
addToContainers_enum("EDistanceCheckMethod", "", "Docs/Enums/EDistanceCheckMethod/EDistanceCheckMethod.html", ["distance", "check", "method"], "");
addToContainers_enumValue("Closest", "Prefer targets closer to defense structure", "Docs/Enums/EDistanceCheckMethod/Values/Closest.html", [], "EDistanceCheckMethod");
addToContainers_enumValue("Furtherest", "Prefer targest far away from defense structure", "Docs/Enums/EDistanceCheckMethod/Values/Furtherest.html", [], "EDistanceCheckMethod");
addToContainers_enum("ETargetAquireMethodPriorties", "", "Docs/Enums/ETargetAquireMethodPriorties/ETargetAquireMethodPriorties.html", ["target", "aquire", "method", "priorties"], "");
addToContainers_enumValue("None", "Just choose the first actor encounted by iteration. Best performance.", "Docs/Enums/ETargetAquireMethodPriorties/Values/None.html", [], "ETargetAquireMethodPriorties");
addToContainers_enumValue("LeastRotationRequired", "Try and pick actors that would require the building to rotate the least to target If the structure does not have any facing requirement then this is irrelevant. This is a good value to have to avoid enemies \'running circles\' around your structure", "Docs/Enums/ETargetAquireMethodPriorties/Values/LeastRotationRequired.html", ["least", "rotation", "required"], "ETargetAquireMethodPriorties");
addToContainers_enumValue("HasAttack", "Pick actors with an attack over anything else", "Docs/Enums/ETargetAquireMethodPriorties/Values/HasAttack.html", ["has", "attack"], "ETargetAquireMethodPriorties");
addToContainers_enumValue("Distance", "Always pick the closest/furtherest target", "Docs/Enums/ETargetAquireMethodPriorties/Values/Distance.html", [], "ETargetAquireMethodPriorties");
addToContainers_enumValue("HasAttack_LeastRotationRequired", "Pick an actor that has an attack. Pick the one that requires the least rotation to fire at. If no actors have an attack pick the one that requires the least rotation to fire at.", "Docs/Enums/ETargetAquireMethodPriorties/Values/HasAttack_LeastRotationRequired.html", ["has", "attack_", "least", "rotation", "required"], "ETargetAquireMethodPriorties");
addToContainers_enumValue("HasAttack_Distance", "Pick the closest/furtherest actor that has an attack. If no actors have an attack then it will pick the closest/furtherest actor", "Docs/Enums/ETargetAquireMethodPriorties/Values/HasAttack_Distance.html", ["has", "attack_", "distance"], "ETargetAquireMethodPriorties");
addToContainers_enum("ETargetLocationZAxisOption", "", "Docs/Enums/ETargetLocationZAxisOption/ETargetLocationZAxisOption.html", ["target", "location", "z", "axis", "option"], "");
addToContainers_enumValue("DoNothing", "e.g. Player uses ability at location (0.f, 0.f, 0.f). We choose the location (500.f, 0.f, 0.f) as one of the locations around the use location where we should fire a projectile. But this location may not be on the ground. Best performance", "Docs/Enums/ETargetLocationZAxisOption/Values/DoNothing.html", ["do", "nothing"], "ETargetLocationZAxisOption");
addToContainers_enumValue("LineTrace", "Do a line trace so every projectile is fired at a location on the ground", "Docs/Enums/ETargetLocationZAxisOption/Values/LineTrace.html", ["line", "trace"], "ETargetLocationZAxisOption");
addToContainers_enum("", "", "Docs/Enums/_3/.html", [], "");
addToContainers_enumValue("Uninitialized", "@See EUninitializableBool", "Docs/Enums/_3/Values/Uninitialized.html", [], "");
addToContainers_enumValue("False", "", "Docs/Enums/_3/Values/False.html", [], "");
addToContainers_enumValue("True", "", "Docs/Enums/_3/Values/True.html", [], "");
addToContainers_enum("", "", "Docs/Enums/_4/.html", [], "");
addToContainers_enumValue("Phase1_MovingToTarget", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/_4/Values/Phase1_MovingToTarget.html", ["phase1_", "moving", "to", "target"], "");
addToContainers_enumValue("Phase2_Descending", "Lowering pitch so facing ground", "Docs/Enums/_4/Values/Phase2_Descending.html", ["phase2_", "descending"], "");
addToContainers_enumValue("Phase3_Firing", "Is firing shots", "Docs/Enums/_4/Values/Phase3_Firing.html", ["phase3_", "firing"], "");
addToContainers_enumValue("Phase4_PostFired", "Has fired every shot", "Docs/Enums/_4/Values/Phase4_PostFired.html", ["phase4_", "post", "fired"], "");
addToContainers_enum("EPreciseProjectileMovementMode", "", "Docs/Enums/EPreciseProjectileMovementMode/EPreciseProjectileMovementMode.html", ["precise", "projectile", "movement", "mode"], "");
addToContainers_enumValue("StraightLine", "Projectile will only travel in a straight line. Quick to set up but limited in what you can do.", "Docs/Enums/EPreciseProjectileMovementMode/Values/StraightLine.html", ["straight", "line"], "EPreciseProjectileMovementMode");
addToContainers_enumValue("CurveAssets", "Use curve assets to specify exactly how projectile moves and rotates", "Docs/Enums/EPreciseProjectileMovementMode/Values/CurveAssets.html", ["curve", "assets"], "EPreciseProjectileMovementMode");
addToContainers_enum("EArcingProjectileTrajectoryMethod", "", "Docs/Enums/EArcingProjectileTrajectoryMethod/EArcingProjectileTrajectoryMethod.html", ["arcing", "projectile", "trajectory", "method"], "");
addToContainers_enumValue("ChooseInitialVelocity", "With this method the projectile\'s initial velocity is always the same. It is the arc that will vary. UProjectileMovementComponent::InitialSpeed is what you should tweak to get the projectile firing how you want it. Also UNoCollisionProjectileMovement::bUseHighArc also matters. For this to work InitialSpeed has to be high enough.", "Docs/Enums/EArcingProjectileTrajectoryMethod/Values/ChooseInitialVelocity.html", ["choose", "initial", "velocity"], "EArcingProjectileTrajectoryMethod");
addToContainers_enumValue("ChooseArc", "UNoCollisionProjectileMovement::ArcValue is what you should tweak. InitialSpeed is ignored. With this method it\'s the arc that will stay the same. It is the projectile\'s launch speed that will vary (I think). I think this option is more safer in that it can never fail to find an arc (I think. I know ChooseInitialVelocity can fail if InitialSpeed is too low).", "Docs/Enums/EArcingProjectileTrajectoryMethod/Values/ChooseArc.html", ["choose", "arc"], "EArcingProjectileTrajectoryMethod");
addToContainers_enum("ENoCollisionProjectileMode", "", "Docs/Enums/ENoCollisionProjectileMode/ENoCollisionProjectileMode.html", ["no", "collision", "projectile", "mode"], "");
addToContainers_enumValue("StraightFiringAtTarget", "Fires straight and is being fired at a actor", "Docs/Enums/ENoCollisionProjectileMode/Values/StraightFiringAtTarget.html", ["straight", "firing", "at", "target"], "ENoCollisionProjectileMode");
addToContainers_enumValue("StraightFiringAtLocation", "Fires straight and is being fired at a location", "Docs/Enums/ENoCollisionProjectileMode/Values/StraightFiringAtLocation.html", ["straight", "firing", "at", "location"], "ENoCollisionProjectileMode");
addToContainers_enumValue("ArcedFiringAtLocation", "Fires in an arc and is being fired at a location", "Docs/Enums/ENoCollisionProjectileMode/Values/ArcedFiringAtLocation.html", ["arced", "firing", "at", "location"], "ENoCollisionProjectileMode");
addToContainers_enumValue("ArcedFiringAtLocation", "Fires in an arc and is being fired at a location", "Docs/Enums/ENoCollisionProjectileMode/Values/ArcedFiringAtLocation.html", ["arced", "firing", "at", "location"], "ENoCollisionProjectileMode");
addToContainers_enum("", "", "Docs/Enums/_5/.html", [], "");
addToContainers_enumValue("HitSomething", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/_5/Values/HitSomething.html", ["hit", "something"], "");
addToContainers_enumValue("OutsideWorldBounds", "", "Docs/Enums/_5/Values/OutsideWorldBounds.html", ["outside", "world", "bounds"], "");
addToContainers_enum("ECPUPlayerState", "", "Docs/Enums/ECPUPlayerState/ECPUPlayerState.html", ["c", "p", "u", "player", "state"], "");
addToContainers_enumValue("None", "The state the CPU players infastructure and economy is in", "Docs/Enums/ECPUPlayerState/Values/None.html", [], "ECPUPlayerState");
addToContainers_enumValue("Normal", "Can build buildings and gather resources", "Docs/Enums/ECPUPlayerState/Values/Normal.html", [], "ECPUPlayerState");
addToContainers_enumValue("InfastructureUnrecoverable", "Cannot construct buildings anymore e.g. construction yard gone. A long victory may still be possible but perhaps CPU player will try to win in the short to medium term", "Docs/Enums/ECPUPlayerState/Values/InfastructureUnrecoverable.html", ["infastructure", "unrecoverable"], "ECPUPlayerState");
addToContainers_enumValue("EconomyUnrecoverable", "Cannot gather resources anymore. CPU player will play to win in the short-term", "Docs/Enums/ECPUPlayerState/Values/EconomyUnrecoverable.html", ["economy", "unrecoverable"], "ECPUPlayerState");
addToContainers_enumValue("InfastructureUnrecoverableAndArmyProductionImpossible", "Cannot construct buildings and build any army units. CPU player will play to win in the very short-term", "Docs/Enums/ECPUPlayerState/Values/InfastructureUnrecoverableAndArmyProductionImpossible.html", ["infastructure", "unrecoverable", "and", "army", "production", "impossible"], "ECPUPlayerState");
addToContainers_enum("", "", "Docs/Enums/_6/.html", [], "");
addToContainers_enumValue("None", "Not a comment", "Docs/Enums/_6/Values/None.html", [], "");
addToContainers_enumValue("SingleLineComment", "spans onto another line like this", "Docs/Enums/_6/Values/SingleLineComment.html", ["single", "line", "comment"], "");
addToContainers_enumValue("MultiLineComment", "A comment like this", "Docs/Enums/_6/Values/MultiLineComment.html", ["multi", "line", "comment"], "");
addToContainers_enum("", "", "Docs/Enums/_7/.html", [], "");
addToContainers_enumValue("Private", "", "Docs/Enums/_7/Values/Private.html", [], "");
addToContainers_enumValue("Protected", "", "Docs/Enums/_7/Values/Protected.html", [], "");
addToContainers_enumValue("Public", "", "Docs/Enums/_7/Values/Public.html", [], "");
addToContainers_enum("", "", "Docs/Enums/_8/.html", [], "");
addToContainers_enumValue("Reference", "One of these: int32 & MyVariable;", "Docs/Enums/_8/Values/Reference.html", [], "");
addToContainers_enumValue("Pointer", "One of these: int32 * MyVariable;", "Docs/Enums/_8/Values/Pointer.html", [], "");
addToContainers_enumValue("ConstPointer", "One of these: int32 * const MyVariable;", "Docs/Enums/_8/Values/ConstPointer.html", ["const", "pointer"], "");
addToContainers_enum("", "", "Docs/Enums/_9/.html", [], "");
addToContainers_enumValue("Class", "-------------------------------------------------------------------", "Docs/Enums/_9/Values/Class.html", [], "");
addToContainers_enumValue("Struct", "", "Docs/Enums/_9/Values/Struct.html", [], "");
addToContainers_enumValue("Enum", "", "Docs/Enums/_9/Values/Enum.html", [], "");
addToContainers_enumValue("Function", "", "Docs/Enums/_9/Values/Function.html", [], "");
addToContainers_enumValue("Variable", "", "Docs/Enums/_9/Values/Variable.html", [], "");
addToContainers_enumValue("EnumValue", "", "Docs/Enums/_9/Values/EnumValue.html", ["enum", "value"], "");
addToContainers_enum("EActionToTakeAfterDestroySession", "", "Docs/Enums/EActionToTakeAfterDestroySession/EActionToTakeAfterDestroySession.html", ["action", "to", "take", "after", "destroy", "session"], "");
addToContainers_enumValue("None", "Do nothing. Probably not desired", "Docs/Enums/EActionToTakeAfterDestroySession/Values/None.html", [], "EActionToTakeAfterDestroySession");
addToContainers_enumValue("ReturnToLobbyBrowsingScreen", "Return to lobby browsing screen", "Docs/Enums/EActionToTakeAfterDestroySession/Values/ReturnToLobbyBrowsingScreen.html", ["return", "to", "lobby", "browsing", "screen"], "EActionToTakeAfterDestroySession");
addToContainers_enumValue("HostToMainMenuClientsToLobbyBrowsing", "Return host to main menu and any connected clients to lobby browsing screen", "Docs/Enums/EActionToTakeAfterDestroySession/Values/HostToMainMenuClientsToLobbyBrowsing.html", ["host", "to", "main", "menu", "clients", "to", "lobby", "browsing"], "EActionToTakeAfterDestroySession");
addToContainers_enumValue("CreateNewSession", "Create a new session. Use this if trying to create a session but one is already made", "Docs/Enums/EActionToTakeAfterDestroySession/Values/CreateNewSession.html", ["create", "new", "session"], "EActionToTakeAfterDestroySession");
addToContainers_enum("EClassRepNodeMapping", "", "Docs/Enums/EClassRepNodeMapping/EClassRepNodeMapping.html", ["class", "rep", "node", "mapping"], "");
addToContainers_enumValue("NotRouted", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EClassRepNodeMapping/Values/NotRouted.html", ["not", "routed"], "EClassRepNodeMapping");
addToContainers_enumValue("RelevantAllConnections", "", "Docs/Enums/EClassRepNodeMapping/Values/RelevantAllConnections.html", ["relevant", "all", "connections"], "EClassRepNodeMapping");
addToContainers_enumValue("RelevantOwnerOnly", "", "Docs/Enums/EClassRepNodeMapping/Values/RelevantOwnerOnly.html", ["relevant", "owner", "only"], "EClassRepNodeMapping");
addToContainers_enumValue("PlayerOwnedSelectable_Building", "e.g. units, buildings, etc built by player. NOT neutral selectables", "Docs/Enums/EClassRepNodeMapping/Values/PlayerOwnedSelectable_Building.html", ["player", "owned", "selectable_", "building"], "EClassRepNodeMapping");
addToContainers_enumValue("PlayerOwnedSelectable_Infantry", "", "Docs/Enums/EClassRepNodeMapping/Values/PlayerOwnedSelectable_Infantry.html", ["player", "owned", "selectable_", "infantry"], "EClassRepNodeMapping");
addToContainers_enum("ETestRepPolicy", "", "Docs/Enums/ETestRepPolicy/ETestRepPolicy.html", ["test", "rep", "policy"], "");
addToContainers_enumValue("NotRouted", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/ETestRepPolicy/Values/NotRouted.html", ["not", "routed"], "ETestRepPolicy");
addToContainers_enumValue("RelevantOwnerOnly", "", "Docs/Enums/ETestRepPolicy/Values/RelevantOwnerOnly.html", ["relevant", "owner", "only"], "ETestRepPolicy");
addToContainers_enumValue("RelevantAllConnections", "", "Docs/Enums/ETestRepPolicy/Values/RelevantAllConnections.html", ["relevant", "all", "connections"], "ETestRepPolicy");
addToContainers_enumValue("RelevantAllConnections", "", "Docs/Enums/ETestRepPolicy/Values/RelevantAllConnections.html", ["relevant", "all", "connections"], "ETestRepPolicy");
addToContainers_enum("", "", "Docs/Enums/_10/.html", [], "");
addToContainers_enumValue("PlayerOnly", "------------------------------------------------------------------------------------------------ FIXME Issues in this file: I ran into a crazy bug. The jist of it was that I could not declare function pointer variables in my class otherwise the arrays would not work. That\'s right. Simply declaring the function pointer variable and doing absolutally nothing with it will cause the array to have .Num() of zero or if using regular C arrays the values will be different every time and never the correct ones. But if I simply removed the function pointer variables from the class then it would work. The implications of this bug is that I have to use FName to define the function to call, and every input function in PC must be a UFUNCTION. In PC::SetupInputComponent the functions are bound by name or function pointer. I hope binding input to a UInputComponent with FNames instead of raw function pointers doesn\'t have any effect on performance. But it binds it as a dynamic delegate so I\'m pretty sure it does. ------------------------------------------------------------------------------------------------", "Docs/Enums/_10/Values/PlayerOnly.html", ["player", "only"], "");
addToContainers_enumValue("ObserverOnly", "", "Docs/Enums/_10/Values/ObserverOnly.html", ["observer", "only"], "");
addToContainers_enumValue("PlayerAndObserver", "", "Docs/Enums/_10/Values/PlayerAndObserver.html", ["player", "and", "observer"], "");
addToContainers_enum("EKeyMappingAction", "", "Docs/Enums/EKeyMappingAction/EKeyMappingAction.html", ["key", "mapping", "action"], "");
addToContainers_enumValue("None", "If you\'re adding a value for CreateDefaultActionInfos() then just add it. You don\'t need to do anything else with the new enum value", "Docs/Enums/EKeyMappingAction/Values/None.html", [], "EKeyMappingAction");
addToContainers_enumValue("LMB", "-----------------------------------------", "Docs/Enums/EKeyMappingAction/Values/LMB.html", ["m", "b"], "EKeyMappingAction");
addToContainers_enumValue("RMB", "", "Docs/Enums/EKeyMappingAction/Values/RMB.html", ["m", "b"], "EKeyMappingAction");
addToContainers_enumValue("ZoomCameraIn", "", "Docs/Enums/EKeyMappingAction/Values/ZoomCameraIn.html", ["zoom", "camera", "in"], "EKeyMappingAction");
addToContainers_enumValue("ZoomCameraOut", "", "Docs/Enums/EKeyMappingAction/Values/ZoomCameraOut.html", ["zoom", "camera", "out"], "EKeyMappingAction");
addToContainers_enumValue("EnableCameraLookAround", "", "Docs/Enums/EKeyMappingAction/Values/EnableCameraLookAround.html", ["enable", "camera", "look", "around"], "EKeyMappingAction");
addToContainers_enumValue("ResetCameraRotationToOriginal", "", "Docs/Enums/EKeyMappingAction/Values/ResetCameraRotationToOriginal.html", ["reset", "camera", "rotation", "to", "original"], "EKeyMappingAction");
addToContainers_enumValue("ResetCameraZoomToOriginal", "", "Docs/Enums/EKeyMappingAction/Values/ResetCameraZoomToOriginal.html", ["reset", "camera", "zoom", "to", "original"], "EKeyMappingAction");
addToContainers_enumValue("ResetCameraRotationAndZoomToOriginal", "", "Docs/Enums/EKeyMappingAction/Values/ResetCameraRotationAndZoomToOriginal.html", ["reset", "camera", "rotation", "and", "zoom", "to", "original"], "EKeyMappingAction");
addToContainers_enumValue("OpenTeamChat", "", "Docs/Enums/EKeyMappingAction/Values/OpenTeamChat.html", ["open", "team", "chat"], "EKeyMappingAction");
addToContainers_enumValue("OpenAllChat", "", "Docs/Enums/EKeyMappingAction/Values/OpenAllChat.html", ["open", "all", "chat"], "EKeyMappingAction");
addToContainers_enumValue("OpenPauseMenuSlashCancel", "", "Docs/Enums/EKeyMappingAction/Values/OpenPauseMenuSlashCancel.html", ["open", "pause", "menu", "slash", "cancel"], "EKeyMappingAction");
addToContainers_enumValue("InstaQuitGame", "", "Docs/Enums/EKeyMappingAction/Values/InstaQuitGame.html", ["insta", "quit", "game"], "EKeyMappingAction");
addToContainers_enumValue("ShowDevelopmentCheatWidget", "", "Docs/Enums/EKeyMappingAction/Values/ShowDevelopmentCheatWidget.html", ["show", "development", "cheat", "widget"], "EKeyMappingAction");
addToContainers_enumValue("OpenCommanderSkillTree", "", "Docs/Enums/EKeyMappingAction/Values/OpenCommanderSkillTree.html", ["open", "commander", "skill", "tree"], "EKeyMappingAction");
addToContainers_enumValue("CloseCommanderSkillTree", "", "Docs/Enums/EKeyMappingAction/Values/CloseCommanderSkillTree.html", ["close", "commander", "skill", "tree"], "EKeyMappingAction");
addToContainers_enumValue("ToggleCommanderSkillTree", "", "Docs/Enums/EKeyMappingAction/Values/ToggleCommanderSkillTree.html", ["toggle", "commander", "skill", "tree"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup0", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup0.html", ["assign", "control", "group0"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup1", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup1.html", ["assign", "control", "group1"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup2", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup2.html", ["assign", "control", "group2"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup3", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup3.html", ["assign", "control", "group3"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup4", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup4.html", ["assign", "control", "group4"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup5", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup5.html", ["assign", "control", "group5"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup6", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup6.html", ["assign", "control", "group6"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup7", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup7.html", ["assign", "control", "group7"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup8", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup8.html", ["assign", "control", "group8"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup9", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup9.html", ["assign", "control", "group9"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup0", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup0.html", ["select", "control", "group0"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup1", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup1.html", ["select", "control", "group1"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup2", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup2.html", ["select", "control", "group2"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup3", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup3.html", ["select", "control", "group3"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup4", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup4.html", ["select", "control", "group4"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup5", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup5.html", ["select", "control", "group5"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup6", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup6.html", ["select", "control", "group6"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup7", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup7.html", ["select", "control", "group7"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup8", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup8.html", ["select", "control", "group8"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup9", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup9.html", ["select", "control", "group9"], "EKeyMappingAction");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "-----------------------------------------", "Docs/Enums/EKeyMappingAction/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EKeyMappingAction");
addToContainers_enum("EKeyMappingAxis", "", "Docs/Enums/EKeyMappingAxis/EKeyMappingAxis.html", ["key", "mapping", "axis"], "");
addToContainers_enumValue("None", "", "Docs/Enums/EKeyMappingAxis/Values/None.html", [], "EKeyMappingAxis");
addToContainers_enumValue("MouseMoveX", "-----------------------------------------", "Docs/Enums/EKeyMappingAxis/Values/MouseMoveX.html", ["mouse", "move", "x"], "EKeyMappingAxis");
addToContainers_enumValue("MouseMoveY", "", "Docs/Enums/EKeyMappingAxis/Values/MouseMoveY.html", ["mouse", "move", "y"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraLeft", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraLeft.html", ["move", "camera", "left"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraRight", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraRight.html", ["move", "camera", "right"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraForward", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraForward.html", ["move", "camera", "forward"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraBackward", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraBackward.html", ["move", "camera", "backward"], "EKeyMappingAxis");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "-----------------------------------------", "Docs/Enums/EKeyMappingAxis/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EKeyMappingAxis");
addToContainers_enum("EVariableType", "", "Docs/Enums/EVariableType/EVariableType.html", ["variable", "type"], "");
addToContainers_enumValue("None", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EVariableType/Values/None.html", [], "EVariableType");
addToContainers_enumValue("Bool", "", "Docs/Enums/EVariableType/Values/Bool.html", [], "EVariableType");
addToContainers_enumValue("Float", "", "Docs/Enums/EVariableType/Values/Float.html", [], "EVariableType");
addToContainers_enum("EDependencyRequirementType", "", "Docs/Enums/EDependencyRequirementType/EDependencyRequirementType.html", ["dependency", "requirement", "type"], "");
addToContainers_enumValue("Bool", "", "Docs/Enums/EDependencyRequirementType/Values/Bool.html", [], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsLessThanOrEqualTo", "~ Floats", "Docs/Enums/EDependencyRequirementType/Values/Float_IsLessThanOrEqualTo.html", ["float_", "is", "less", "than", "or", "equal", "to"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsLessThan", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsLessThan.html", ["float_", "is", "less", "than"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsEqualTo", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsEqualTo.html", ["float_", "is", "equal", "to"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsGreaterThan", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsGreaterThan.html", ["float_", "is", "greater", "than"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsGreaterThanOrEqualTo", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsGreaterThanOrEqualTo.html", ["float_", "is", "greater", "than", "or", "equal", "to"], "EDependencyRequirementType");
addToContainers_enum("EGameStartType", "", "Docs/Enums/EGameStartType/EGameStartType.html", ["game", "start", "type"], "");
addToContainers_enumValue("HasNotStartedGameBefore", "", "Docs/Enums/EGameStartType/Values/HasNotStartedGameBefore.html", ["has", "not", "started", "game", "before"], "EGameStartType");
addToContainers_enumValue("HasStartedGameBefore", "", "Docs/Enums/EGameStartType/Values/HasStartedGameBefore.html", ["has", "started", "game", "before"], "EGameStartType");
addToContainers_enumValue("HasStartedGameBefore", "", "Docs/Enums/EGameStartType/Values/HasStartedGameBefore.html", ["has", "started", "game", "before"], "EGameStartType");
addToContainers_enum("EFaction", "", "Docs/Enums/EFaction/EFaction.html", [], "");
addToContainers_enumValue("None", "Different playable factions. Examples of factions from RTS games: Terran, Zerg, Soviets, Allies, etc", "Docs/Enums/EFaction/Values/None.html", [], "EFaction");
addToContainers_enumValue("Humans", "=========================================", "Docs/Enums/EFaction/Values/Humans.html", [], "EFaction");
addToContainers_enumValue("Monsters", "", "Docs/Enums/EFaction/Values/Monsters.html", [], "EFaction");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "This should always be last in the enum", "Docs/Enums/EFaction/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EFaction");
addToContainers_enum("ETeam", "", "Docs/Enums/ETeam/ETeam.html", [], "");
addToContainers_enumValue("Uninitialized", "Allied players share the same team", "Docs/Enums/ETeam/Values/Uninitialized.html", [], "ETeam");
addToContainers_enumValue("Team1", "=========================================", "Docs/Enums/ETeam/Values/Team1.html", [], "ETeam");
addToContainers_enumValue("Team2", "", "Docs/Enums/ETeam/Values/Team2.html", [], "ETeam");
addToContainers_enumValue("Team3", "", "Docs/Enums/ETeam/Values/Team3.html", [], "ETeam");
addToContainers_enumValue("Team4", "", "Docs/Enums/ETeam/Values/Team4.html", [], "ETeam");
addToContainers_enumValue("Neutral", "Examples of neutral: map resource spots", "Docs/Enums/ETeam/Values/Neutral.html", [], "ETeam");
addToContainers_enumValue("Observer", "Someone spectating the match", "Docs/Enums/ETeam/Values/Observer.html", [], "ETeam");
addToContainers_enum("EBuildingType", "", "Docs/Enums/EBuildingType/EBuildingType.html", ["building", "type"], "");
addToContainers_enumValue("HumanMain", "=========================================", "Docs/Enums/EBuildingType/Values/HumanMain.html", ["human", "main"], "EBuildingType");
addToContainers_enumValue("HumanSupplyDepot", "", "Docs/Enums/EBuildingType/Values/HumanSupplyDepot.html", ["human", "supply", "depot"], "EBuildingType");
addToContainers_enumValue("HumanPowerPlant", "", "Docs/Enums/EBuildingType/Values/HumanPowerPlant.html", ["human", "power", "plant"], "EBuildingType");
addToContainers_enumValue("HumanBarracks", "", "Docs/Enums/EBuildingType/Values/HumanBarracks.html", ["human", "barracks"], "EBuildingType");
addToContainers_enumValue("HumanRadar", "", "Docs/Enums/EBuildingType/Values/HumanRadar.html", ["human", "radar"], "EBuildingType");
addToContainers_enumValue("HumanAirForceBase", "", "Docs/Enums/EBuildingType/Values/HumanAirForceBase.html", ["human", "air", "force", "base"], "EBuildingType");
addToContainers_enumValue("HumanMissleSilo", "", "Docs/Enums/EBuildingType/Values/HumanMissleSilo.html", ["human", "missle", "silo"], "EBuildingType");
addToContainers_enumValue("HumanTurret", "", "Docs/Enums/EBuildingType/Values/HumanTurret.html", ["human", "turret"], "EBuildingType");
addToContainers_enumValue("HumanMissleTurret", "", "Docs/Enums/EBuildingType/Values/HumanMissleTurret.html", ["human", "missle", "turret"], "EBuildingType");
addToContainers_enumValue("HumanSniperNest", "", "Docs/Enums/EBuildingType/Values/HumanSniperNest.html", ["human", "sniper", "nest"], "EBuildingType");
addToContainers_enumValue("MonstersMain", "", "Docs/Enums/EBuildingType/Values/MonstersMain.html", ["monsters", "main"], "EBuildingType");
addToContainers_enumValue("MonstersBarracks", "", "Docs/Enums/EBuildingType/Values/MonstersBarracks.html", ["monsters", "barracks"], "EBuildingType");
addToContainers_enumValue("MonstersAdvancedBarracks", "", "Docs/Enums/EBuildingType/Values/MonstersAdvancedBarracks.html", ["monsters", "advanced", "barracks"], "EBuildingType");
addToContainers_enumValue("MonstersItemShop", "", "Docs/Enums/EBuildingType/Values/MonstersItemShop.html", ["monsters", "item", "shop"], "EBuildingType");
addToContainers_enumValue("MonstersSpecialBarracks", "", "Docs/Enums/EBuildingType/Values/MonstersSpecialBarracks.html", ["monsters", "special", "barracks"], "EBuildingType");
addToContainers_enumValue("MonstersSandDepot", "", "Docs/Enums/EBuildingType/Values/MonstersSandDepot.html", ["monsters", "sand", "depot"], "EBuildingType");
addToContainers_enumValue("MonstersSuperweapon", "", "Docs/Enums/EBuildingType/Values/MonstersSuperweapon.html", ["monsters", "superweapon"], "EBuildingType");
addToContainers_enumValue("MonstersObelisk", "", "Docs/Enums/EBuildingType/Values/MonstersObelisk.html", ["monsters", "obelisk"], "EBuildingType");
addToContainers_enumValue("ResourceSpot", "Do not use this as one of your faction buildings", "Docs/Enums/EBuildingType/Values/ResourceSpot.html", ["resource", "spot"], "EBuildingType");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "This is always 2nd last in the enum", "Docs/Enums/EBuildingType/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuildingType");
addToContainers_enumValue("NotBuilding", "This is always last in the enum", "Docs/Enums/EBuildingType/Values/NotBuilding.html", ["not", "building"], "EBuildingType");
addToContainers_enum("EUnitType", "", "Docs/Enums/EUnitType/EUnitType.html", ["unit", "type"], "");
addToContainers_enumValue("None", "Here to pick up uninitialized values", "Docs/Enums/EUnitType/Values/None.html", [], "EUnitType");
addToContainers_enumValue("HumanWorker", "~ Units here will be given lowest priority when choosing a context menu to show when selecting multiple units", "Docs/Enums/EUnitType/Values/HumanWorker.html", ["human", "worker"], "EUnitType");
addToContainers_enumValue("HumanCollector", "", "Docs/Enums/EUnitType/Values/HumanCollector.html", ["human", "collector"], "EUnitType");
addToContainers_enumValue("HumanBasic", "", "Docs/Enums/EUnitType/Values/HumanBasic.html", ["human", "basic"], "EUnitType");
addToContainers_enumValue("HumanSniper", "", "Docs/Enums/EUnitType/Values/HumanSniper.html", ["human", "sniper"], "EUnitType");
addToContainers_enumValue("HumanRecon", "", "Docs/Enums/EUnitType/Values/HumanRecon.html", ["human", "recon"], "EUnitType");
addToContainers_enumValue("HumanSpellcaster", "", "Docs/Enums/EUnitType/Values/HumanSpellcaster.html", ["human", "spellcaster"], "EUnitType");
addToContainers_enumValue("HumanSpecial", "", "Docs/Enums/EUnitType/Values/HumanSpecial.html", ["human", "special"], "EUnitType");
addToContainers_enumValue("MonstersCollector", "", "Docs/Enums/EUnitType/Values/MonstersCollector.html", ["monsters", "collector"], "EUnitType");
addToContainers_enumValue("MonstersMelee", "", "Docs/Enums/EUnitType/Values/MonstersMelee.html", ["monsters", "melee"], "EUnitType");
addToContainers_enumValue("MonstersBasicInfantry", "", "Docs/Enums/EUnitType/Values/MonstersBasicInfantry.html", ["monsters", "basic", "infantry"], "EUnitType");
addToContainers_enumValue("MonstersHeavyInfantry", "", "Docs/Enums/EUnitType/Values/MonstersHeavyInfantry.html", ["monsters", "heavy", "infantry"], "EUnitType");
addToContainers_enumValue("MonstersMedic", "", "Docs/Enums/EUnitType/Values/MonstersMedic.html", ["monsters", "medic"], "EUnitType");
addToContainers_enumValue("MonstersSpecial", "", "Docs/Enums/EUnitType/Values/MonstersSpecial.html", ["monsters", "special"], "EUnitType");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "~ This is always 2nd last in the enum", "Docs/Enums/EUnitType/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EUnitType");
addToContainers_enumValue("NotUnit", "~ This is always last in the enum", "Docs/Enums/EUnitType/Values/NotUnit.html", ["not", "unit"], "EUnitType");
addToContainers_enum("EUpgradeType", "", "Docs/Enums/EUpgradeType/EUpgradeType.html", ["upgrade", "type"], "");
addToContainers_enumValue("ImprovedBasicInfantryDamage", "=========================================", "Docs/Enums/EUpgradeType/Values/ImprovedBasicInfantryDamage.html", ["improved", "basic", "infantry", "damage"], "EUpgradeType");
addToContainers_enumValue("ImprovedSniperFireRate", "", "Docs/Enums/EUpgradeType/Values/ImprovedSniperFireRate.html", ["improved", "sniper", "fire", "rate"], "EUpgradeType");
addToContainers_enumValue("ImprovedSpellcasterManaRegenRate", "", "Docs/Enums/EUpgradeType/Values/ImprovedSpellcasterManaRegenRate.html", ["improved", "spellcaster", "mana", "regen", "rate"], "EUpgradeType");
addToContainers_enumValue("ImprovedCollectorResourceCapacity", "", "Docs/Enums/EUpgradeType/Values/ImprovedCollectorResourceCapacity.html", ["improved", "collector", "resource", "capacity"], "EUpgradeType");
addToContainers_enumValue("UnlockTrainMonstersMelee", "", "Docs/Enums/EUpgradeType/Values/UnlockTrainMonstersMelee.html", ["unlock", "train", "monsters", "melee"], "EUpgradeType");
addToContainers_enumValue("UnlockTrainSnipers", "", "Docs/Enums/EUpgradeType/Values/UnlockTrainSnipers.html", ["unlock", "train", "snipers"], "EUpgradeType");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "=========================================", "Docs/Enums/EUpgradeType/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EUpgradeType");
addToContainers_enumValue("None", "For making adding to TMap in editor less painful. Leave this always as last in enum", "Docs/Enums/EUpgradeType/Values/None.html", [], "EUpgradeType");
addToContainers_enum("EInventoryItem", "", "Docs/Enums/EInventoryItem/EInventoryItem.html", ["inventory", "item"], "");
addToContainers_enumValue("Shoes", "=========================================", "Docs/Enums/EInventoryItem/Values/Shoes.html", [], "EInventoryItem");
addToContainers_enumValue("SimpleBangle", "", "Docs/Enums/EInventoryItem/Values/SimpleBangle.html", ["simple", "bangle"], "EInventoryItem");
addToContainers_enumValue("RedGem", "", "Docs/Enums/EInventoryItem/Values/RedGem.html", ["red", "gem"], "EInventoryItem");
addToContainers_enumValue("GreenGem", "", "Docs/Enums/EInventoryItem/Values/GreenGem.html", ["green", "gem"], "EInventoryItem");
addToContainers_enumValue("RottenPumpkin", "", "Docs/Enums/EInventoryItem/Values/RottenPumpkin.html", ["rotten", "pumpkin"], "EInventoryItem");
addToContainers_enumValue("Apple", "", "Docs/Enums/EInventoryItem/Values/Apple.html", [], "EInventoryItem");
addToContainers_enumValue("AverageCrown", "", "Docs/Enums/EInventoryItem/Values/AverageCrown.html", ["average", "crown"], "EInventoryItem");
addToContainers_enumValue("GoldenCrown", "", "Docs/Enums/EInventoryItem/Values/GoldenCrown.html", ["golden", "crown"], "EInventoryItem");
addToContainers_enumValue("Necklace", "", "Docs/Enums/EInventoryItem/Values/Necklace.html", [], "EInventoryItem");
addToContainers_enumValue("GoldBar", "", "Docs/Enums/EInventoryItem/Values/GoldBar.html", ["gold", "bar"], "EInventoryItem");
addToContainers_enumValue("GoldenDagger", "", "Docs/Enums/EInventoryItem/Values/GoldenDagger.html", ["golden", "dagger"], "EInventoryItem");
addToContainers_enumValue("StrongSniperRifle", "", "Docs/Enums/EInventoryItem/Values/StrongSniperRifle.html", ["strong", "sniper", "rifle"], "EInventoryItem");
addToContainers_enumValue("ArtilleryBeacon", "", "Docs/Enums/EInventoryItem/Values/ArtilleryBeacon.html", ["artillery", "beacon"], "EInventoryItem");
addToContainers_enumValue("None", "=========================================", "Docs/Enums/EInventoryItem/Values/None.html", [], "EInventoryItem");
addToContainers_enum("EResourceType", "", "Docs/Enums/EResourceType/EResourceType.html", ["resource", "type"], "");
addToContainers_enumValue("None", "Always first in enum", "Docs/Enums/EResourceType/Values/None.html", [], "EResourceType");
addToContainers_enumValue("Cash", "=========================================", "Docs/Enums/EResourceType/Values/Cash.html", [], "EResourceType");
addToContainers_enumValue("Sand", "", "Docs/Enums/EResourceType/Values/Sand.html", [], "EResourceType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EResourceType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EResourceType");
addToContainers_enum("EHousingResourceType", "", "Docs/Enums/EHousingResourceType/EHousingResourceType.html", ["housing", "resource", "type"], "");
addToContainers_enumValue("None", "Resource types similar to the population resource in starcraft II. For now buildings can provide it and units and use it. Could possibly allow buildings to also use it aswell but just keeping it basic for now.", "Docs/Enums/EHousingResourceType/Values/None.html", [], "EHousingResourceType");
addToContainers_enumValue("Population", "=========================================", "Docs/Enums/EHousingResourceType/Values/Population.html", [], "EHousingResourceType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EHousingResourceType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EHousingResourceType");
addToContainers_enum("ECPUDifficulty", "", "Docs/Enums/ECPUDifficulty/ECPUDifficulty.html", ["c", "p", "u", "difficulty"], "");
addToContainers_enumValue("None", "", "Docs/Enums/ECPUDifficulty/Values/None.html", [], "ECPUDifficulty");
addToContainers_enumValue("DoesNothing", "CPU player does nothing. Useful for testing. Note that only the CPU player\'s behavior is disabled but each selectable\'s behavior still runs", "Docs/Enums/ECPUDifficulty/Values/DoesNothing.html", ["does", "nothing"], "ECPUDifficulty");
addToContainers_enumValue("Easy", "=========================================", "Docs/Enums/ECPUDifficulty/Values/Easy.html", [], "ECPUDifficulty");
addToContainers_enumValue("Medium", "", "Docs/Enums/ECPUDifficulty/Values/Medium.html", [], "ECPUDifficulty");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ECPUDifficulty/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECPUDifficulty");
addToContainers_enum("ETargetingType", "", "Docs/Enums/ETargetingType/ETargetingType.html", ["targeting", "type"], "");
addToContainers_enumValue("None", "Uninitialized value never to be used", "Docs/Enums/ETargetingType/Values/None.html", [], "ETargetingType");
addToContainers_enumValue("Default", "This value is given to every selectable by default to allow \'everything works as expected\' out of the box. This is given both as their type and the types they can target. Made it hidden assuming the editor values will be reset to this if user sets a custom enum value then later deletes it. If not the case then hidden meta should be removed. You can actually rename this to something else if you like.", "Docs/Enums/ETargetingType/Values/Default.html", [], "ETargetingType");
addToContainers_enumValue("BiologicalInfantry", "=========================================", "Docs/Enums/ETargetingType/Values/BiologicalInfantry.html", ["biological", "infantry"], "ETargetingType");
addToContainers_enumValue("MechanicalInfantry", "", "Docs/Enums/ETargetingType/Values/MechanicalInfantry.html", ["mechanical", "infantry"], "ETargetingType");
addToContainers_enumValue("BiologicalAndMechanicalInfantry", "", "Docs/Enums/ETargetingType/Values/BiologicalAndMechanicalInfantry.html", ["biological", "and", "mechanical", "infantry"], "ETargetingType");
addToContainers_enumValue("Building", "", "Docs/Enums/ETargetingType/Values/Building.html", [], "ETargetingType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ETargetingType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ETargetingType");
addToContainers_enum("EArmourType", "", "Docs/Enums/EArmourType/EArmourType.html", ["armour", "type"], "");
addToContainers_enumValue("None", "Armour type of selectable. Used for calculating damage. Similar to Mechanical, Biological etc in SCII. Currently only one armour type can be assigned to each selectable so if you want a selectable to have multiple types you would need to create entries like TallGreenBiologicalInfatry", "Docs/Enums/EArmourType/Values/None.html", [], "EArmourType");
addToContainers_enumValue("Default", "Default value given to everything that needs an armour value. This can be removed but may have some references to it in code that will need changing (replacing those instances with EArmourType() + 1 could be a possibility as long as user has at least one custom enum value", "Docs/Enums/EArmourType/Values/Default.html", [], "EArmourType");
addToContainers_enumValue("Building", "=========================================", "Docs/Enums/EArmourType/Values/Building.html", [], "EArmourType");
addToContainers_enumValue("SuperweaponBuilding", "", "Docs/Enums/EArmourType/Values/SuperweaponBuilding.html", ["superweapon", "building"], "EArmourType");
addToContainers_enumValue("Infantry", "", "Docs/Enums/EArmourType/Values/Infantry.html", [], "EArmourType");
addToContainers_enumValue("HeavyInfantry", "", "Docs/Enums/EArmourType/Values/HeavyInfantry.html", ["heavy", "infantry"], "EArmourType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EArmourType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EArmourType");
addToContainers_enum("EHUDPersistentTabType", "", "Docs/Enums/EHUDPersistentTabType/EHUDPersistentTabType.html", ["h", "u", "d", "persistent", "tab", "type"], "");
addToContainers_enumValue("None", "Use this if you do not want the button for this to appear on the HUD persistent tab. This is a special case value; if you assign a persistent tab to use this then it will not work correctly", "Docs/Enums/EHUDPersistentTabType/Values/None.html", [], "EHUDPersistentTabType");
addToContainers_enumValue("Buildings", "Tab for buildings", "Docs/Enums/EHUDPersistentTabType/Values/Buildings.html", [], "EHUDPersistentTabType");
addToContainers_enumValue("Units", "Tab for all units", "Docs/Enums/EHUDPersistentTabType/Values/Units.html", [], "EHUDPersistentTabType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EHUDPersistentTabType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EHUDPersistentTabType");
addToContainers_enum("EAnimation", "", "Docs/Enums/EAnimation/EAnimation.html", [], "");
addToContainers_enumValue("None", "Here for removing key clashes when adding entries to TMap", "Docs/Enums/EAnimation/Values/None.html", [], "EAnimation");
addToContainers_enumValue("Idle", "Should be looping", "Docs/Enums/EAnimation/Values/Idle.html", [], "EAnimation");
addToContainers_enumValue("Moving", "Should be looping", "Docs/Enums/EAnimation/Values/Moving.html", [], "EAnimation");
addToContainers_enumValue("Attack", "Should have 2 anim notifies in it: - FireWeapon - OnAttackAnimationFinished. Should also have a looping idle animation at the end of it", "Docs/Enums/EAnimation/Values/Attack.html", [], "EAnimation");
addToContainers_enumValue("Destroyed", "", "Docs/Enums/EAnimation/Values/Destroyed.html", [], "EAnimation");
addToContainers_enumValue("GatheringResources", "Only relevant if unit can gather resources and is optional", "Docs/Enums/EAnimation/Values/GatheringResources.html", ["gathering", "resources"], "EAnimation");
addToContainers_enumValue("ConstructBuilding", "Should be looping", "Docs/Enums/EAnimation/Values/ConstructBuilding.html", ["construct", "building"], "EAnimation");
addToContainers_enumValue("PickingUpInventoryItem", "Picking up an inventory item that\'s in the world", "Docs/Enums/EAnimation/Values/PickingUpInventoryItem.html", ["picking", "up", "inventory", "item"], "EAnimation");
addToContainers_enumValue("MovingWithResources", "Optional for when moving with resources held. Should be looping", "Docs/Enums/EAnimation/Values/MovingWithResources.html", ["moving", "with", "resources"], "EAnimation");
addToContainers_enumValue("DropOffResources", "Optional. The animation to play having returned to a depot with resources.", "Docs/Enums/EAnimation/Values/DropOffResources.html", ["drop", "off", "resources"], "EAnimation");
addToContainers_enumValue("ContextAction_1", "These can be deleted if you like and replaced with whatever you want. You can be as specific as you like e.g. \"CastFireball\", \"CallArtilleryStrike\"", "Docs/Enums/EAnimation/Values/ContextAction_1.html", ["context", "action_1"], "EAnimation");
addToContainers_enumValue("ContextAction_2", "", "Docs/Enums/EAnimation/Values/ContextAction_2.html", ["context", "action_2"], "EAnimation");
addToContainers_enumValue("ContextAction_3", "", "Docs/Enums/EAnimation/Values/ContextAction_3.html", ["context", "action_3"], "EAnimation");
addToContainers_enumValue("Throw", "", "Docs/Enums/EAnimation/Values/Throw.html", [], "EAnimation");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EAnimation/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EAnimation");
addToContainers_enum("EBuildingAnimation", "", "Docs/Enums/EBuildingAnimation/EBuildingAnimation.html", ["building", "animation"], "");
addToContainers_enumValue("None", "Animations for buildings", "Docs/Enums/EBuildingAnimation/Values/None.html", [], "EBuildingAnimation");
addToContainers_enumValue("Construction", "The animation to play when being constructed", "Docs/Enums/EBuildingAnimation/Values/Construction.html", [], "EBuildingAnimation");
addToContainers_enumValue("Idle", "When nothing is happening. Should be looping", "Docs/Enums/EBuildingAnimation/Values/Idle.html", [], "EBuildingAnimation");
addToContainers_enumValue("OpenDoor", "Right before a unit is built from it", "Docs/Enums/EBuildingAnimation/Values/OpenDoor.html", ["open", "door"], "EBuildingAnimation");
addToContainers_enumValue("Destroyed", "This will need the anim notify OnZeroHealthAnimationFinished on it", "Docs/Enums/EBuildingAnimation/Values/Destroyed.html", [], "EBuildingAnimation");
addToContainers_enumValue("OpenMissleSiloDoor", "Open the door for the missle silo in preparation for launching a nuke.", "Docs/Enums/EBuildingAnimation/Values/OpenMissleSiloDoor.html", ["open", "missle", "silo", "door"], "EBuildingAnimation");
addToContainers_enumValue("CloseMissleSiloDoor", "Close the missle silo door after the nuke has been launched. Probably want idle looping at the end of this anim", "Docs/Enums/EBuildingAnimation/Values/CloseMissleSiloDoor.html", ["close", "missle", "silo", "door"], "EBuildingAnimation");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "=========================================", "Docs/Enums/EBuildingAnimation/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuildingAnimation");
addToContainers_enumValue("SinkIntoGround", "This is not an animation, but is used by the server to signal that the building should sink into the ground", "Docs/Enums/EBuildingAnimation/Values/SinkIntoGround.html", ["sink", "into", "ground"], "EBuildingAnimation");
addToContainers_enum("EContextButton", "", "Docs/Enums/EContextButton/EContextButton.html", ["context", "button"], "");
addToContainers_enumValue("None", "Not a value that should be used", "Docs/Enums/EContextButton/Values/None.html", [], "EContextButton");
addToContainers_enumValue("Heal", "From range heal a single target", "Docs/Enums/EContextButton/Values/Heal.html", [], "EContextButton");
addToContainers_enumValue("ArtilleryStrike", "", "Docs/Enums/EContextButton/Values/ArtilleryStrike.html", ["artillery", "strike"], "EContextButton");
addToContainers_enumValue("Dash", "Increase own move speed by 50% for 10 secs", "Docs/Enums/EContextButton/Values/Dash.html", [], "EContextButton");
addToContainers_enumValue("Haste", "Increase own move speed by 30% for some amount of time", "Docs/Enums/EContextButton/Values/Haste.html", [], "EContextButton");
addToContainers_enumValue("Corruption", "", "Docs/Enums/EContextButton/Values/Corruption.html", [], "EContextButton");
addToContainers_enumValue("StealthSelf", "", "Docs/Enums/EContextButton/Values/StealthSelf.html", ["stealth", "self"], "EContextButton");
addToContainers_enumValue("Cleanse", "Removes \'The plague\' debuff from a friendly target", "Docs/Enums/EContextButton/Values/Cleanse.html", [], "EContextButton");
addToContainers_enumValue("IceBarrier", "Create a ice type barrier around the user that damages enemies while they stand in it", "Docs/Enums/EContextButton/Values/IceBarrier.html", ["ice", "barrier"], "EContextButton");
addToContainers_enumValue("DeathAura", "", "Docs/Enums/EContextButton/Values/DeathAura.html", ["death", "aura"], "EContextButton");
addToContainers_enumValue("Death", "", "Docs/Enums/EContextButton/Values/Death.html", [], "EContextButton");
addToContainers_enumValue("Blizzard", "Call down a storm of ice shards", "Docs/Enums/EContextButton/Values/Blizzard.html", [], "EContextButton");
addToContainers_enumValue("ManaBurn", "Burn mana from a single target", "Docs/Enums/EContextButton/Values/ManaBurn.html", ["mana", "burn"], "EContextButton");
addToContainers_enumValue("EatRottenPumpkin", "", "Docs/Enums/EContextButton/Values/EatRottenPumpkin.html", ["eat", "rotten", "pumpkin"], "EContextButton");
addToContainers_enumValue("EatApple", "", "Docs/Enums/EContextButton/Values/EatApple.html", ["eat", "apple"], "EContextButton");
addToContainers_enumValue("LightningStrike", "", "Docs/Enums/EContextButton/Values/LightningStrike.html", ["lightning", "strike"], "EContextButton");
addToContainers_enumValue("FinishingBlow", "Only usable on targets below 50% health. Kills them", "Docs/Enums/EContextButton/Values/FinishingBlow.html", ["finishing", "blow"], "EContextButton");
addToContainers_enumValue("CullingBlade", "Similar to axe\'s culling blade", "Docs/Enums/EContextButton/Values/CullingBlade.html", ["culling", "blade"], "EContextButton");
addToContainers_enumValue("RadarScan", "Reveal some part of the map for some amount of time", "Docs/Enums/EContextButton/Values/RadarScan.html", ["radar", "scan"], "EContextButton");
addToContainers_enumValue("Nuke", "Launch a nuke. Instigated by a building", "Docs/Enums/EContextButton/Values/Nuke.html", [], "EContextButton");
addToContainers_enumValue("HealOverTime", "", "Docs/Enums/EContextButton/Values/HealOverTime.html", ["heal", "over", "time"], "EContextButton");
addToContainers_enumValue("IncreasingHealOverTime", "", "Docs/Enums/EContextButton/Values/IncreasingHealOverTime.html", ["increasing", "heal", "over", "time"], "EContextButton");
addToContainers_enumValue("Beserk", "", "Docs/Enums/EContextButton/Values/Beserk.html", [], "EContextButton");
addToContainers_enumValue("Sacrifice", "Destroy self and deal massive damage to those around you", "Docs/Enums/EContextButton/Values/Sacrifice.html", [], "EContextButton");
addToContainers_enumValue("Tribute", "Target a friendly unit and deal damage to them. If they die the ability instigator gains mana", "Docs/Enums/EContextButton/Values/Tribute.html", [], "EContextButton");
addToContainers_enumValue("BeaconArtilleryStrike", "Artillery strike that comes from the artillery beacon item", "Docs/Enums/EContextButton/Values/BeaconArtilleryStrike.html", ["beacon", "artillery", "strike"], "EContextButton");
addToContainers_enumValue("AttackMove", "~ Currently using AttackMove in UStatics to define NUM_CUSTOM_CONTEXT_ACTIONS", "Docs/Enums/EContextButton/Values/AttackMove.html", ["attack", "move"], "EContextButton");
addToContainers_enumValue("HoldPosition", "", "Docs/Enums/EContextButton/Values/HoldPosition.html", ["hold", "position"], "EContextButton");
addToContainers_enumValue("BuildBuilding", "~ This should always be 6th last in enum ", "Docs/Enums/EContextButton/Values/BuildBuilding.html", ["build", "building"], "EContextButton");
addToContainers_enumValue("Train", "~ This should always be 5th to last in enum", "Docs/Enums/EContextButton/Values/Train.html", [], "EContextButton");
addToContainers_enumValue("Upgrade", "~ This should always be 4th last in enum", "Docs/Enums/EContextButton/Values/Upgrade.html", [], "EContextButton");
addToContainers_enumValue("z_ALWAYS_3RD_LAST_IN_ENUM", "This should always be 3rd last in the enum", "Docs/Enums/EContextButton/Values/z_ALWAYS_3RD_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_3", "r", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EContextButton");
addToContainers_enumValue("PlacingGhost", "", "Docs/Enums/EContextButton/Values/PlacingGhost.html", ["placing", "ghost"], "EContextButton");
addToContainers_enumValue("RecentlyExecuted", "Set in LMB press and changed on LMB release", "Docs/Enums/EContextButton/Values/RecentlyExecuted.html", ["recently", "executed"], "EContextButton");
addToContainers_enumValue("RecentlyExecuted", "Set in LMB press and changed on LMB release", "Docs/Enums/EContextButton/Values/RecentlyExecuted.html", ["recently", "executed"], "EContextButton");
addToContainers_enum("ECommanderAbility", "", "Docs/Enums/ECommanderAbility/ECommanderAbility.html", ["commander", "ability"], "");
addToContainers_enumValue("None", "Abilities that are instigated by the player as opposed to a selectable e.g. in C&C Generals: fuel air bomb, artillery strike, etc", "Docs/Enums/ECommanderAbility/Values/None.html", [], "ECommanderAbility");
addToContainers_enumValue("Human_ArtilleryStrike_Rank1", "=========================================", "Docs/Enums/ECommanderAbility/Values/Human_ArtilleryStrike_Rank1.html", ["human_", "artillery", "strike_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Human_ArtilleryStrike_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Human_ArtilleryStrike_Rank2.html", ["human_", "artillery", "strike_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Human_ResourceSteal", "Steals some resources from a hostile player", "Docs/Enums/ECommanderAbility/Values/Human_ResourceSteal.html", ["human_", "resource", "steal"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Explosion_Rank1", "Causes an explosion to happen somewhere", "Docs/Enums/ECommanderAbility/Values/Monsters_Explosion_Rank1.html", ["monsters_", "explosion_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Explosion_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Monsters_Explosion_Rank2.html", ["monsters_", "explosion_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Frenzy_Rank1", "Buffs all units in an AoE with something", "Docs/Enums/ECommanderAbility/Values/Monsters_Frenzy_Rank1.html", ["monsters_", "frenzy_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Frenzy_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Monsters_Frenzy_Rank2.html", ["monsters_", "frenzy_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Frenzy_Rank3", "", "Docs/Enums/ECommanderAbility/Values/Monsters_Frenzy_Rank3.html", ["monsters_", "frenzy_", "rank3"], "ECommanderAbility");
addToContainers_enumValue("Monsters_GlobalFrenzy", "", "Docs/Enums/ECommanderAbility/Values/Monsters_GlobalFrenzy.html", ["monsters_", "global", "frenzy"], "ECommanderAbility");
addToContainers_enumValue("Monsters_DestroyAllPlayersCollectors", "Destroy all the collectors for a player", "Docs/Enums/ECommanderAbility/Values/Monsters_DestroyAllPlayersCollectors.html", ["monsters_", "destroy", "all", "players", "collectors"], "ECommanderAbility");
addToContainers_enumValue("Monsters_MakeUnitInvulnerable", "", "Docs/Enums/ECommanderAbility/Values/Monsters_MakeUnitInvulnerable.html", ["monsters_", "make", "unit", "invulnerable"], "ECommanderAbility");
addToContainers_enumValue("Monsters_KillUnit", "", "Docs/Enums/ECommanderAbility/Values/Monsters_KillUnit.html", ["monsters_", "kill", "unit"], "ECommanderAbility");
addToContainers_enumValue("Human_AirshipBarrage", "", "Docs/Enums/ECommanderAbility/Values/Human_AirshipBarrage.html", ["human_", "airship", "barrage"], "ECommanderAbility");
addToContainers_enumValue("Monsters_UnlockTrainMelee", "", "Docs/Enums/ECommanderAbility/Values/Monsters_UnlockTrainMelee.html", ["monsters_", "unlock", "train", "melee"], "ECommanderAbility");
addToContainers_enumValue("Humans_Snipers_Rank1", "", "Docs/Enums/ECommanderAbility/Values/Humans_Snipers_Rank1.html", ["humans_", "snipers_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Humans_Snipers_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Humans_Snipers_Rank2.html", ["humans_", "snipers_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Human_Warthog", "", "Docs/Enums/ECommanderAbility/Values/Human_Warthog.html", ["human_", "warthog"], "ECommanderAbility");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ECommanderAbility/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECommanderAbility");
addToContainers_enum("ECommanderSkillTreeNodeType", "", "Docs/Enums/ECommanderSkillTreeNodeType/ECommanderSkillTreeNodeType.html", ["commander", "skill", "tree", "node", "type"], "");
addToContainers_enumValue("None", "Different types of nodes that appear on a commander\'s skill tree", "Docs/Enums/ECommanderSkillTreeNodeType/Values/None.html", [], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_ArtilleryStrike", "=========================================", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_ArtilleryStrike.html", ["human_", "artillery", "strike"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_ResourceSteal", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_ResourceSteal.html", ["human_", "resource", "steal"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_Explosion", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_Explosion.html", ["monsters_", "explosion"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_Frenzy", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_Frenzy.html", ["monsters_", "frenzy"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_GlobalFrenzy", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_GlobalFrenzy.html", ["monsters_", "global", "frenzy"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_DestroyAllPlayersCollectors", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_DestroyAllPlayersCollectors.html", ["monsters_", "destroy", "all", "players", "collectors"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_MakeUnitInvulnerable", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_MakeUnitInvulnerable.html", ["monsters_", "make", "unit", "invulnerable"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_KillUnit", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_KillUnit.html", ["monsters_", "kill", "unit"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_AirshipBarrage", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_AirshipBarrage.html", ["human_", "airship", "barrage"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_UnlockTrainMelee", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_UnlockTrainMelee.html", ["monsters_", "unlock", "train", "melee"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Humans_UnlockTrainSnipers", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Humans_UnlockTrainSnipers.html", ["humans_", "unlock", "train", "snipers"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_Warthog", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_Warthog.html", ["human_", "warthog"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ECommanderSkillTreeNodeType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECommanderSkillTreeNodeType");
addToContainers_enum("EBuildingTargetingAbility", "", "Docs/Enums/EBuildingTargetingAbility/EBuildingTargetingAbility.html", ["building", "targeting", "ability"], "");
addToContainers_enumValue("None", "Building targeting abilities are abilities that can only target buildings. This enum was added to do custom behavior when right-clicking on buildings e.g. in C&C engineers will capture the building, spies will show you what is being produced, etc", "Docs/Enums/EBuildingTargetingAbility/Values/None.html", [], "EBuildingTargetingAbility");
addToContainers_enumValue("StealResources", "=========================================", "Docs/Enums/EBuildingTargetingAbility/Values/StealResources.html", ["steal", "resources"], "EBuildingTargetingAbility");
addToContainers_enumValue("DealDamage", "", "Docs/Enums/EBuildingTargetingAbility/Values/DealDamage.html", ["deal", "damage"], "EBuildingTargetingAbility");
addToContainers_enumValue("DealDamage", "", "Docs/Enums/EBuildingTargetingAbility/Values/DealDamage.html", ["deal", "damage"], "EBuildingTargetingAbility");
addToContainers_enum("EAbilityRequirement", "", "Docs/Enums/EAbilityRequirement/EAbilityRequirement.html", ["ability", "requirement"], "");
addToContainers_enumValue("Uninitialized", "Default value, never to be used", "Docs/Enums/EAbilityRequirement/Values/Uninitialized.html", [], "EAbilityRequirement");
addToContainers_enumValue("NoMissingRequirement", "This is used as a return value for the requirements checking function and signals that all requirements were met", "Docs/Enums/EAbilityRequirement/Values/NoMissingRequirement.html", ["no", "missing", "requirement"], "EAbilityRequirement");
addToContainers_enumValue("BuffOrDebuffNotPresent", "=========================================", "Docs/Enums/EAbilityRequirement/Values/BuffOrDebuffNotPresent.html", ["buff", "or", "debuff", "not", "present"], "EAbilityRequirement");
addToContainers_enumValue("TargetMustUseMana", "Ability must be used on a mana using target", "Docs/Enums/EAbilityRequirement/Values/TargetMustUseMana.html", ["target", "must", "use", "mana"], "EAbilityRequirement");
addToContainers_enumValue("RequiresTargetWithHealth", "", "Docs/Enums/EAbilityRequirement/Values/RequiresTargetWithHealth.html", ["requires", "target", "with", "health"], "EAbilityRequirement");
addToContainers_enumValue("TargetsHealthNotLowEnough", "", "Docs/Enums/EAbilityRequirement/Values/TargetsHealthNotLowEnough.html", ["targets", "health", "not", "low", "enough"], "EAbilityRequirement");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EAbilityRequirement/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EAbilityRequirement");
addToContainers_enum("EStaticBuffAndDebuffType", "", "Docs/Enums/EStaticBuffAndDebuffType/EStaticBuffAndDebuffType.html", ["static", "buff", "and", "debuff", "type"], "");
addToContainers_enumValue("None", "Default value, never to be used", "Docs/Enums/EStaticBuffAndDebuffType/Values/None.html", [], "EStaticBuffAndDebuffType");
addToContainers_enumValue("HoldingResources", "Unit is holding resources", "Docs/Enums/EStaticBuffAndDebuffType/Values/HoldingResources.html", ["holding", "resources"], "EStaticBuffAndDebuffType");
addToContainers_enumValue("ThePlague", "=========================================", "Docs/Enums/EStaticBuffAndDebuffType/Values/ThePlague.html", ["the", "plague"], "EStaticBuffAndDebuffType");
addToContainers_enumValue("Disease", "", "Docs/Enums/EStaticBuffAndDebuffType/Values/Disease.html", [], "EStaticBuffAndDebuffType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EStaticBuffAndDebuffType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EStaticBuffAndDebuffType");
addToContainers_enum("ETickableBuffAndDebuffType", "", "Docs/Enums/ETickableBuffAndDebuffType/ETickableBuffAndDebuffType.html", ["tickable", "buff", "and", "debuff", "type"], "");
addToContainers_enumValue("None", "Default value, never to be used", "Docs/Enums/ETickableBuffAndDebuffType/Values/None.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Dash", "=========================================", "Docs/Enums/ETickableBuffAndDebuffType/Values/Dash.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Haste", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/Haste.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("BasicHealOverTime", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/BasicHealOverTime.html", ["basic", "heal", "over", "time"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("IncreasingHealOverTime", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/IncreasingHealOverTime.html", ["increasing", "heal", "over", "time"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("CleansersMight", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/CleansersMight.html", ["cleansers", "might"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("PainOverTime", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/PainOverTime.html", ["pain", "over", "time"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Corruption", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/Corruption.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("NearInvulnerability", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/NearInvulnerability.html", ["near", "invulnerability"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("RottenPumpkinEatEffect", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/RottenPumpkinEatEffect.html", ["rotten", "pumpkin", "eat", "effect"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("TempStealth", "Enter stealth mode for 10 seconds", "Docs/Enums/ETickableBuffAndDebuffType/Values/TempStealth.html", ["temp", "stealth"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Beserk", "Increase damage done by 50%. Increases move speed by 30%. Increases attack speed by 50%", "Docs/Enums/ETickableBuffAndDebuffType/Values/Beserk.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ETickableBuffAndDebuffType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ETickableBuffAndDebuffType");
addToContainers_enum("EBuffAndDebuffSubType", "", "Docs/Enums/EBuffAndDebuffSubType/EBuffAndDebuffSubType.html", ["buff", "and", "debuff", "sub", "type"], "");
addToContainers_enumValue("Default", "This should not be referenced anywhere in code. It is only here so the editor default value looks prettier than z_ALWAYS_LAST_IN_ENUM (which I cannot get to change with the DisplayName and ScriptName specifiers in the UMETA macro)", "Docs/Enums/EBuffAndDebuffSubType/Values/Default.html", [], "EBuffAndDebuffSubType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EBuffAndDebuffSubType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuffAndDebuffSubType");
addToContainers_enum("EAbilityOutcome", "", "Docs/Enums/EAbilityOutcome/EAbilityOutcome.html", ["ability", "outcome"], "");
addToContainers_enumValue("Default", "The outcome of an ability. Can add more values if needed", "Docs/Enums/EAbilityOutcome/Values/Default.html", [], "EAbilityOutcome");
addToContainers_enumValue("CullingBlade_BelowThreshold", "=========================================", "Docs/Enums/EAbilityOutcome/Values/CullingBlade_BelowThreshold.html", ["culling", "blade_", "below", "threshold"], "EAbilityOutcome");
addToContainers_enumValue("CullingBlade_AboveThreshold", "", "Docs/Enums/EAbilityOutcome/Values/CullingBlade_AboveThreshold.html", ["culling", "blade_", "above", "threshold"], "EAbilityOutcome");
addToContainers_enumValue("DidNotKill", "", "Docs/Enums/EAbilityOutcome/Values/DidNotKill.html", ["did", "not", "kill"], "EAbilityOutcome");
addToContainers_enumValue("DidKill", "", "Docs/Enums/EAbilityOutcome/Values/DidKill.html", ["did", "kill"], "EAbilityOutcome");
addToContainers_enumValue("DidKill", "", "Docs/Enums/EAbilityOutcome/Values/DidKill.html", ["did", "kill"], "EAbilityOutcome");
addToContainers_enum("EBuffOrDebuffApplicationOutcome", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/EBuffOrDebuffApplicationOutcome.html", ["buff", "or", "debuff", "application", "outcome"], "");
addToContainers_enumValue("Failure", "The result of trying to apply a buff/debuff. Can add more values if needed", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/Failure.html", [], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("ResetDuration", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/ResetDuration.html", ["reset", "duration"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("Success", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/Success.html", [], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("AlreadyHasIt", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/AlreadyHasIt.html", ["already", "has", "it"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("CullingBlade_Kill", "An example of a couple of values that could be added for axe\'s culling blade if it were to ever be implemented", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/CullingBlade_Kill.html", ["culling", "blade_", "kill"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("CullingBlade_DealDamage", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/CullingBlade_DealDamage.html", ["culling", "blade_", "deal", "damage"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("CullingBlade_DealDamage", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/CullingBlade_DealDamage.html", ["culling", "blade_", "deal", "damage"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enum("EBuffOrDebuffTickOutcome", "", "Docs/Enums/EBuffOrDebuffTickOutcome/EBuffOrDebuffTickOutcome.html", ["buff", "or", "debuff", "tick", "outcome"], "");
addToContainers_enumValue("StandardOutcome", "The result of tick logic of a buff/debuff. Add more values if needed", "Docs/Enums/EBuffOrDebuffTickOutcome/Values/StandardOutcome.html", ["standard", "outcome"], "EBuffOrDebuffTickOutcome");
addToContainers_enumValue("PainOverTime_KilledTargetAndGotHeal", "", "Docs/Enums/EBuffOrDebuffTickOutcome/Values/PainOverTime_KilledTargetAndGotHeal.html", ["pain", "over", "time_", "killed", "target", "and", "got", "heal"], "EBuffOrDebuffTickOutcome");
addToContainers_enumValue("PainOverTime_KilledTargetButNoHeal", "", "Docs/Enums/EBuffOrDebuffTickOutcome/Values/PainOverTime_KilledTargetButNoHeal.html", ["pain", "over", "time_", "killed", "target", "but", "no", "heal"], "EBuffOrDebuffTickOutcome");
addToContainers_enum("EBuffOrDebuffRemovalOutcome", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/EBuffOrDebuffRemovalOutcome.html", ["buff", "or", "debuff", "removal", "outcome"], "");
addToContainers_enumValue("NotPresent", "The result of trying to remove buff/debuff from a selectable. Add more values if needed", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/NotPresent.html", ["not", "present"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Failure", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Failure.html", [], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Success", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Success.html", [], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Cleanse_ResetDurationOfCleansersMight", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Cleanse_ResetDurationOfCleansersMight.html", ["cleanse_", "reset", "duration", "of", "cleansers", "might"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Cleanse_FreshApplicationOfCleansersMight", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Cleanse_FreshApplicationOfCleansersMight.html", ["cleanse_", "fresh", "application", "of", "cleansers", "might"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Cleanse_FreshApplicationOfCleansersMight", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Cleanse_FreshApplicationOfCleansersMight.html", ["cleanse_", "fresh", "application", "of", "cleansers", "might"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enum("EBuffAndDebuffRemovalReason", "", "Docs/Enums/EBuffAndDebuffRemovalReason/EBuffAndDebuffRemovalReason.html", ["buff", "and", "debuff", "removal", "reason"], "");
addToContainers_enumValue("Expired", "All ticks have happened", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/Expired.html", [], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("TargetDied", "Target reached zero health most likely not because of this buff/debuff but because of some other reason", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/TargetDied.html", ["target", "died"], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("CleanseSpell", "=========================================", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/CleanseSpell.html", ["cleanse", "spell"], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("Test", "", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/Test.html", [], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("Test", "", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/Test.html", [], "EBuffAndDebuffRemovalReason");
addToContainers_enum("ESelectableBodySocket", "", "Docs/Enums/ESelectableBodySocket/ESelectableBodySocket.html", ["selectable", "body", "socket"], "");
addToContainers_enumValue("None", "A point on an actor to know where to attach/spawn things relative to it", "Docs/Enums/ESelectableBodySocket/Values/None.html", [], "ESelectableBodySocket");
addToContainers_enumValue("Floor", "The part of the selectable that makes contact with the ground.", "Docs/Enums/ESelectableBodySocket/Values/Floor.html", [], "ESelectableBodySocket");
addToContainers_enumValue("Middle", "The part of the body you consider the middle", "Docs/Enums/ESelectableBodySocket/Values/Middle.html", [], "ESelectableBodySocket");
addToContainers_enumValue("Head", "", "Docs/Enums/ESelectableBodySocket/Values/Head.html", [], "ESelectableBodySocket");
addToContainers_enumValue("AboveHead_DoesNotRotate", "", "Docs/Enums/ESelectableBodySocket/Values/AboveHead_DoesNotRotate.html", ["above", "head_", "does", "not", "rotate"], "ESelectableBodySocket");
addToContainers_enumValue("Floor_DoesNotRotate", "", "Docs/Enums/ESelectableBodySocket/Values/Floor_DoesNotRotate.html", ["floor_", "does", "not", "rotate"], "ESelectableBodySocket");
addToContainers_enumValue("NukeLaunchSite", "Where to launch nuke from", "Docs/Enums/ESelectableBodySocket/Values/NukeLaunchSite.html", ["nuke", "launch", "site"], "ESelectableBodySocket");
addToContainers_enumValue("NukeLaunchSite", "Where to launch nuke from", "Docs/Enums/ESelectableBodySocket/Values/NukeLaunchSite.html", ["nuke", "launch", "site"], "ESelectableBodySocket");
addToContainers_enum("EStartingResourceAmount", "", "Docs/Enums/EStartingResourceAmount/EStartingResourceAmount.html", ["starting", "resource", "amount"], "");
addToContainers_enumValue("Default", "Default value used if no value specified by user", "Docs/Enums/EStartingResourceAmount/Values/Default.html", [], "EStartingResourceAmount");
addToContainers_enumValue("Low", "=========================================", "Docs/Enums/EStartingResourceAmount/Values/Low.html", [], "EStartingResourceAmount");
addToContainers_enumValue("Medium", "", "Docs/Enums/EStartingResourceAmount/Values/Medium.html", [], "EStartingResourceAmount");
addToContainers_enumValue("High", "", "Docs/Enums/EStartingResourceAmount/Values/High.html", [], "EStartingResourceAmount");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "=========================================", "Docs/Enums/EStartingResourceAmount/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EStartingResourceAmount");
addToContainers_enumValue("DevelopmentSettings", "Use whatever is defined in development settings", "Docs/Enums/EStartingResourceAmount/Values/DevelopmentSettings.html", ["development", "settings"], "EStartingResourceAmount");
addToContainers_enum("EDefeatCondition", "", "Docs/Enums/EDefeatCondition/EDefeatCondition.html", ["defeat", "condition"], "");
addToContainers_enumValue("None", "Here to pickup uninitialized values - should never be used", "Docs/Enums/EDefeatCondition/Values/None.html", [], "EDefeatCondition");
addToContainers_enumValue("NoCondition", "Cannot be defeated. Match will never end. Great for testing with editor. Probably safe to delete this but need to change the references to it in code to something", "Docs/Enums/EDefeatCondition/Values/NoCondition.html", ["no", "condition"], "EDefeatCondition");
addToContainers_enumValue("AllBuildingsDestroyed", "You are defeated when you have no buildings left. Having building foundations placed will count as a building", "Docs/Enums/EDefeatCondition/Values/AllBuildingsDestroyed.html", ["all", "buildings", "destroyed"], "EDefeatCondition");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EDefeatCondition/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EDefeatCondition");
addToContainers_enum("ESelectableResourceType", "", "Docs/Enums/ESelectableResourceType/ESelectableResourceType.html", ["selectable", "resource", "type"], "");
addToContainers_enumValue("Mana", "=========================================", "Docs/Enums/ESelectableResourceType/Values/Mana.html", [], "ESelectableResourceType");
addToContainers_enumValue("None", "=========================================", "Docs/Enums/ESelectableResourceType/Values/None.html", [], "ESelectableResourceType");
addToContainers_enumValue("None", "=========================================", "Docs/Enums/ESelectableResourceType/Values/None.html", [], "ESelectableResourceType");
addToContainers_enum("EBuildingNetworkType", "", "Docs/Enums/EBuildingNetworkType/EBuildingNetworkType.html", ["building", "network", "type"], "");
addToContainers_enumValue("None", "This values means \'not part of any network\' e.g. terran bunkers, C&C generals china bunkers", "Docs/Enums/EBuildingNetworkType/Values/None.html", [], "EBuildingNetworkType");
addToContainers_enumValue("HumanBarracks", "=========================================", "Docs/Enums/EBuildingNetworkType/Values/HumanBarracks.html", ["human", "barracks"], "EBuildingNetworkType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EBuildingNetworkType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuildingNetworkType");
addToContainers_enum("EMouseCursorType", "", "Docs/Enums/EMouseCursorType/EMouseCursorType.html", ["mouse", "cursor", "type"], "");
addToContainers_enumValue("None", "Default value to make it easier to add entries to TMaps in editor", "Docs/Enums/EMouseCursorType/Values/None.html", [], "EMouseCursorType");
addToContainers_enumValue("SciFi_Default", "=========================================", "Docs/Enums/EMouseCursorType/Values/SciFi_Default.html", ["sci", "fi_", "default"], "EMouseCursorType");
addToContainers_enumValue("SciFi_BlueOutline", "", "Docs/Enums/EMouseCursorType/Values/SciFi_BlueOutline.html", ["sci", "fi_", "blue", "outline"], "EMouseCursorType");
addToContainers_enumValue("SciFi_RedCross", "", "Docs/Enums/EMouseCursorType/Values/SciFi_RedCross.html", ["sci", "fi_", "red", "cross"], "EMouseCursorType");
addToContainers_enumValue("SciFi_QuestionMark", "", "Docs/Enums/EMouseCursorType/Values/SciFi_QuestionMark.html", ["sci", "fi_", "question", "mark"], "EMouseCursorType");
addToContainers_enumValue("SciFi_BlueCrosshair", "", "Docs/Enums/EMouseCursorType/Values/SciFi_BlueCrosshair.html", ["sci", "fi_", "blue", "crosshair"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollUp", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollUp.html", ["sci", "fi_", "edge", "scroll", "up"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollUpRight", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollUpRight.html", ["sci", "fi_", "edge", "scroll", "up", "right"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollRight", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollRight.html", ["sci", "fi_", "edge", "scroll", "right"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollDownRight", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollDownRight.html", ["sci", "fi_", "edge", "scroll", "down", "right"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollDown", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollDown.html", ["sci", "fi_", "edge", "scroll", "down"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollDownLeft", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollDownLeft.html", ["sci", "fi_", "edge", "scroll", "down", "left"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollLeft", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollLeft.html", ["sci", "fi_", "edge", "scroll", "left"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollUpLeft", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollUpLeft.html", ["sci", "fi_", "edge", "scroll", "up", "left"], "EMouseCursorType");
addToContainers_enumValue("EnterGarrison", "", "Docs/Enums/EMouseCursorType/Values/EnterGarrison.html", ["enter", "garrison"], "EMouseCursorType");
addToContainers_enumValue("CashHack", "", "Docs/Enums/EMouseCursorType/Values/CashHack.html", ["cash", "hack"], "EMouseCursorType");
addToContainers_enumValue("CommandoBomb", "", "Docs/Enums/EMouseCursorType/Values/CommandoBomb.html", ["commando", "bomb"], "EMouseCursorType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EMouseCursorType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMouseCursorType");
addToContainers_enum("EControlSettingType", "", "Docs/Enums/EControlSettingType/EControlSettingType.html", ["control", "setting", "type"], "");
addToContainers_enumValue("None", "Different settings for controls", "Docs/Enums/EControlSettingType/Values/None.html", [], "EControlSettingType");
addToContainers_enumValue("CameraPanSpeed_Keyboard", "Speed camera moves when using keyboard to move it", "Docs/Enums/EControlSettingType/Values/CameraPanSpeed_Keyboard.html", ["camera", "pan", "speed_", "keyboard"], "EControlSettingType");
addToContainers_enumValue("CameraPanSpeed_Mouse", "Speed camera moves when moving mouse to edge of screen", "Docs/Enums/EControlSettingType/Values/CameraPanSpeed_Mouse.html", ["camera", "pan", "speed_", "mouse"], "EControlSettingType");
addToContainers_enumValue("CameraMaxSpeed", "Max speed of camera", "Docs/Enums/EControlSettingType/Values/CameraMaxSpeed.html", ["camera", "max", "speed"], "EControlSettingType");
addToContainers_enumValue("bEnableCameraMovementLag", "", "Docs/Enums/EControlSettingType/Values/bEnableCameraMovementLag.html", ["enable", "camera", "movement", "lag"], "EControlSettingType");
addToContainers_enumValue("CameraMovementLagSpeed", "", "Docs/Enums/EControlSettingType/Values/CameraMovementLagSpeed.html", ["camera", "movement", "lag", "speed"], "EControlSettingType");
addToContainers_enumValue("CameraTurningBoost", "How fast changes in camera move direction should happen with regards to WASD and mouse edge movement", "Docs/Enums/EControlSettingType/Values/CameraTurningBoost.html", ["camera", "turning", "boost"], "EControlSettingType");
addToContainers_enumValue("CameraZoomIncrementalAmount", "Amount a single mouse wheel scroll will change zoom", "Docs/Enums/EControlSettingType/Values/CameraZoomIncrementalAmount.html", ["camera", "zoom", "incremental", "amount"], "EControlSettingType");
addToContainers_enumValue("CameraZoomSpeed", "Speed camera zooms in/out", "Docs/Enums/EControlSettingType/Values/CameraZoomSpeed.html", ["camera", "zoom", "speed"], "EControlSettingType");
addToContainers_enumValue("MMBLookYawSensitivity", "Speed the X axis changes when the middle mouse button is held down and looking around", "Docs/Enums/EControlSettingType/Values/MMBLookYawSensitivity.html", ["m", "b", "look", "yaw", "sensitivity"], "EControlSettingType");
addToContainers_enumValue("MMBLookPitchSensitivity", "Speed the Y axis changes when the middle mouse button is held down and looking around", "Docs/Enums/EControlSettingType/Values/MMBLookPitchSensitivity.html", ["m", "b", "look", "pitch", "sensitivity"], "EControlSettingType");
addToContainers_enumValue("bInvertMMBLookYaw", "Whether to invert the X axis middle mouse button free look", "Docs/Enums/EControlSettingType/Values/bInvertMMBLookYaw.html", ["invert", "m", "m", "b", "look", "yaw"], "EControlSettingType");
addToContainers_enumValue("bInvertMMBLookPitch", "Whether to invert the Y axis middle mouse button free look", "Docs/Enums/EControlSettingType/Values/bInvertMMBLookPitch.html", ["invert", "m", "m", "b", "look", "pitch"], "EControlSettingType");
addToContainers_enumValue("bEnableMMBLookLag", "If true, when MMB is pressed view will update gradually. Makes looking around with MMB pressed less repsonsive. False = view updates instantly", "Docs/Enums/EControlSettingType/Values/bEnableMMBLookLag.html", ["enable", "m", "m", "b", "look", "lag"], "EControlSettingType");
addToContainers_enumValue("MMBLookLagAmount", "Only relevant if bEnableMMBLookLag is true. The amount of lagginess. Lower = more laggy", "Docs/Enums/EControlSettingType/Values/MMBLookLagAmount.html", ["m", "b", "look", "lag", "amount"], "EControlSettingType");
addToContainers_enumValue("DefaultCameraPitch", "The camera pitch to start a match with and to return to when using the \'return to default rotation\' button", "Docs/Enums/EControlSettingType/Values/DefaultCameraPitch.html", ["default", "camera", "pitch"], "EControlSettingType");
addToContainers_enumValue("DefaultCameraZoomAmount", "Amount of camera zoom to start match with", "Docs/Enums/EControlSettingType/Values/DefaultCameraZoomAmount.html", ["default", "camera", "zoom", "amount"], "EControlSettingType");
addToContainers_enumValue("ResetCameraToDefaultSpeed", "Spee camera resets to default rotation/zoom", "Docs/Enums/EControlSettingType/Values/ResetCameraToDefaultSpeed.html", ["reset", "camera", "to", "default", "speed"], "EControlSettingType");
addToContainers_enumValue("CameraEdgeMovementThreshold", "How close mouse must be to the edge of the screen for camera panning to happen", "Docs/Enums/EControlSettingType/Values/CameraEdgeMovementThreshold.html", ["camera", "edge", "movement", "threshold"], "EControlSettingType");
addToContainers_enumValue("CameraAcceleration", "Acceleration when moving camera", "Docs/Enums/EControlSettingType/Values/CameraAcceleration.html", ["camera", "acceleration"], "EControlSettingType");
addToContainers_enumValue("CameraDeceleration", "How fast camera stops", "Docs/Enums/EControlSettingType/Values/CameraDeceleration.html", ["camera", "deceleration"], "EControlSettingType");
addToContainers_enumValue("DoubleClickTime", "Time allowed for double clicks", "Docs/Enums/EControlSettingType/Values/DoubleClickTime.html", ["double", "click", "time"], "EControlSettingType");
addToContainers_enumValue("MouseMovementThreshold", "", "Docs/Enums/EControlSettingType/Values/MouseMovementThreshold.html", ["mouse", "movement", "threshold"], "EControlSettingType");
addToContainers_enumValue("GhostRotationRadius", "", "Docs/Enums/EControlSettingType/Values/GhostRotationRadius.html", ["ghost", "rotation", "radius"], "EControlSettingType");
addToContainers_enumValue("GhostRotationSpeed", "", "Docs/Enums/EControlSettingType/Values/GhostRotationSpeed.html", ["ghost", "rotation", "speed"], "EControlSettingType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EControlSettingType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EControlSettingType");
addToContainers_enum("EItemAquireReason", "", "Docs/Enums/EItemAquireReason/EItemAquireReason.html", ["item", "aquire", "reason"], "");
addToContainers_enumValue("PurchasedFromShop", "Purchased the item from a shop", "Docs/Enums/EItemAquireReason/Values/PurchasedFromShop.html", ["purchased", "from", "shop"], "EItemAquireReason");
addToContainers_enumValue("CombinedFromOthers", "The item was created by combining other items e.g. divine rapier, boots of travel", "Docs/Enums/EItemAquireReason/Values/CombinedFromOthers.html", ["combined", "from", "others"], "EItemAquireReason");
addToContainers_enumValue("PickedUpOffGround", "Found it in the world and picked it up", "Docs/Enums/EItemAquireReason/Values/PickedUpOffGround.html", ["picked", "up", "off", "ground"], "EItemAquireReason");
addToContainers_enumValue("MagicallyCreated", "This is for development. Item was added using the development cheat widget", "Docs/Enums/EItemAquireReason/Values/MagicallyCreated.html", ["magically", "created"], "EItemAquireReason");
addToContainers_enumValue("MagicallyCreated", "This is for development. Item was added using the development cheat widget", "Docs/Enums/EItemAquireReason/Values/MagicallyCreated.html", ["magically", "created"], "EItemAquireReason");
addToContainers_enum("EItemRemovalReason", "", "Docs/Enums/EItemRemovalReason/EItemRemovalReason.html", ["item", "removal", "reason"], "");
addToContainers_enumValue("DroppedOnDeath", "The item drops when it\'s weilder dies which is what has happened e.g. divine rapier, gem of true sight", "Docs/Enums/EItemRemovalReason/Values/DroppedOnDeath.html", ["dropped", "on", "death"], "EItemRemovalReason");
addToContainers_enumValue("Ingredient", "The item is being removed because it + other items are being combined to create another item e.g. claymore is removed to make a divine rapier", "Docs/Enums/EItemRemovalReason/Values/Ingredient.html", [], "EItemRemovalReason");
addToContainers_enumValue("RemovedOnZeroCharges", "When item reaches zero charges it is removed which is what happened e.g. clarity potions, TP scrolls", "Docs/Enums/EItemRemovalReason/Values/RemovedOnZeroCharges.html", ["removed", "on", "zero", "charges"], "EItemRemovalReason");
addToContainers_enumValue("Sold", "Item was sold to a shop", "Docs/Enums/EItemRemovalReason/Values/Sold.html", [], "EItemRemovalReason");
addToContainers_enumValue("Sold", "Item was sold to a shop", "Docs/Enums/EItemRemovalReason/Values/Sold.html", [], "EItemRemovalReason");
addToContainers_enum("EItemEntersWorldReason", "", "Docs/Enums/EItemEntersWorldReason/EItemEntersWorldReason.html", ["item", "enters", "world", "reason"], "");
addToContainers_enumValue("DroppedOnDeath", "Item is the type of item that drops when it\'s owner dies which is what has happened", "Docs/Enums/EItemEntersWorldReason/Values/DroppedOnDeath.html", ["dropped", "on", "death"], "EItemEntersWorldReason");
addToContainers_enumValue("ExplicitlyDropped", "Adding this because I anticipate it will be used at some point. Selectable was commanded to drop the item", "Docs/Enums/EItemEntersWorldReason/Values/ExplicitlyDropped.html", ["explicitly", "dropped"], "EItemEntersWorldReason");
addToContainers_enumValue("ExplicitlyDropped", "Adding this because I anticipate it will be used at some point. Selectable was commanded to drop the item", "Docs/Enums/EItemEntersWorldReason/Values/ExplicitlyDropped.html", ["explicitly", "dropped"], "EItemEntersWorldReason");
addToContainers_enum("EItemChangesNumChargesReason", "", "Docs/Enums/EItemChangesNumChargesReason/EItemChangesNumChargesReason.html", ["item", "changes", "num", "charges", "reason"], "");
addToContainers_enumValue("Use", "The owner used it which consumed a charge", "Docs/Enums/EItemChangesNumChargesReason/Values/Use.html", [], "EItemChangesNumChargesReason");
addToContainers_enumValue("Use", "The owner used it which consumed a charge", "Docs/Enums/EItemChangesNumChargesReason/Values/Use.html", [], "EItemChangesNumChargesReason");
addToContainers_enum("ELobbySlotStatus", "", "Docs/Enums/ELobbySlotStatus/ELobbySlotStatus.html", ["lobby", "slot", "status"], "");
addToContainers_enumValue("JustInitialized", "Default value. Never to be used", "Docs/Enums/ELobbySlotStatus/Values/JustInitialized.html", ["just", "initialized"], "ELobbySlotStatus");
addToContainers_enumValue("Human", "Another human player", "Docs/Enums/ELobbySlotStatus/Values/Human.html", [], "ELobbySlotStatus");
addToContainers_enumValue("CPU", "Computer controlled player", "Docs/Enums/ELobbySlotStatus/Values/CPU.html", ["p", "u"], "ELobbySlotStatus");
addToContainers_enumValue("Open", "Slot is open. Players can occupy it", "Docs/Enums/ELobbySlotStatus/Values/Open.html", [], "ELobbySlotStatus");
addToContainers_enumValue("Closed", "Slot cannot be occupied. Will be made invisible", "Docs/Enums/ELobbySlotStatus/Values/Closed.html", [], "ELobbySlotStatus");
addToContainers_enumValue("Closed", "Slot cannot be occupied. Will be made invisible", "Docs/Enums/ELobbySlotStatus/Values/Closed.html", [], "ELobbySlotStatus");
addToContainers_enum("EMatchType", "", "Docs/Enums/EMatchType/EMatchType.html", ["match", "type"], "");
addToContainers_enumValue("None", "Type of match", "Docs/Enums/EMatchType/Values/None.html", [], "EMatchType");
addToContainers_enumValue("Offline", "", "Docs/Enums/EMatchType/Values/Offline.html", [], "EMatchType");
addToContainers_enumValue("LAN", "", "Docs/Enums/EMatchType/Values/LAN.html", ["a", "n"], "EMatchType");
addToContainers_enumValue("SteamOnline", "", "Docs/Enums/EMatchType/Values/SteamOnline.html", ["steam", "online"], "EMatchType");
addToContainers_enum("ELoadingStatus", "", "Docs/Enums/ELoadingStatus/ELoadingStatus.html", ["loading", "status"], "");
addToContainers_enumValue("None", "Status of loading a match", "Docs/Enums/ELoadingStatus/Values/None.html", [], "ELoadingStatus");
addToContainers_enumValue("LoadingPersistentMap", "Before new persistent map has even been loaded - game mode has not switched yet", "Docs/Enums/ELoadingStatus/Values/LoadingPersistentMap.html", ["loading", "persistent", "map"], "ELoadingStatus");
addToContainers_enumValue("WaitingForAllPlayersToConnect", "Waiting for all human players to reach game modes PostLogin. Because maps are streamed in and no travel is used this will likely never to set", "Docs/Enums/ELoadingStatus/Values/WaitingForAllPlayersToConnect.html", ["waiting", "for", "all", "players", "to", "connect"], "ELoadingStatus");
addToContainers_enumValue("WaitingForPlayerControllerClientSetupForMatchAcknowledgementFromAllPlayers", "Waiting for all players to signal they have done their player controller\'s Client_SetupForMatch", "Docs/Enums/ELoadingStatus/Values/WaitingForPlayerControllerClientSetupForMatchAcknowledgementFromAllPlayers.html", ["waiting", "for", "player", "controller", "client", "setup", "for", "match", "acknowledgement", "from", "all", "players"], "ELoadingStatus");
addToContainers_enumValue("WaitingForAllPlayersToStreamInLevel", "Waiting for all players to stream in the sub-level", "Docs/Enums/ELoadingStatus/Values/WaitingForAllPlayersToStreamInLevel.html", ["waiting", "for", "all", "players", "to", "stream", "in", "level"], "ELoadingStatus");
addToContainers_enumValue("WaitingForInitialValuesAcknowledgementFromAllPlayers", "Waiting for all players to say they have received every players player state info including CPU player state info", "Docs/Enums/ELoadingStatus/Values/WaitingForInitialValuesAcknowledgementFromAllPlayers.html", ["waiting", "for", "initial", "values", "acknowledgement", "from", "all", "players"], "ELoadingStatus");
addToContainers_enumValue("WaitingForFinalSetupAcks", "Waiting for all AMyPlayerState::Client_FinalSetup to complete", "Docs/Enums/ELoadingStatus/Values/WaitingForFinalSetupAcks.html", ["waiting", "for", "final", "setup", "acks"], "ELoadingStatus");
addToContainers_enumValue("SpawningStartingSelectables", "Spawn the starting buildings/units for each player. Once this is done each players input is enabled and the match starts", "Docs/Enums/ELoadingStatus/Values/SpawningStartingSelectables.html", ["spawning", "starting", "selectables"], "ELoadingStatus");
addToContainers_enumValue("ShowingBlackScreenRightBeforeMatchStart", "When showing a black screen for one second before match starts.", "Docs/Enums/ELoadingStatus/Values/ShowingBlackScreenRightBeforeMatchStart.html", ["showing", "black", "screen", "right", "before", "match", "start"], "ELoadingStatus");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/ELoadingStatus/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ELoadingStatus");
addToContainers_enum("EAffiliation", "", "Docs/Enums/EAffiliation/EAffiliation.html", [], "");
addToContainers_enumValue("Unknown", "Cannot derive affiliation yet", "Docs/Enums/EAffiliation/Values/Unknown.html", [], "EAffiliation");
addToContainers_enumValue("Owned", "Built by you. Under your control", "Docs/Enums/EAffiliation/Values/Owned.html", [], "EAffiliation");
addToContainers_enumValue("Allied", "Built by a player you\'re allied with", "Docs/Enums/EAffiliation/Values/Allied.html", [], "EAffiliation");
addToContainers_enumValue("Neutral", "Not controlled by any player", "Docs/Enums/EAffiliation/Values/Neutral.html", [], "EAffiliation");
addToContainers_enumValue("Hostile", "Built by a player you are not allied with", "Docs/Enums/EAffiliation/Values/Hostile.html", [], "EAffiliation");
addToContainers_enumValue("Observed", "Local player is an observer of match, not actually playing", "Docs/Enums/EAffiliation/Values/Observed.html", [], "EAffiliation");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EAffiliation/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EAffiliation");
addToContainers_enum("EWidgetType", "", "Docs/Enums/EWidgetType/EWidgetType.html", ["widget", "type"], "");
addToContainers_enumValue("Lobby", "A lobby for either single or multiplayer", "Docs/Enums/EWidgetType/Values/Lobby.html", [], "EWidgetType");
addToContainers_enumValue("PasswordEntry", "Widget that appears for password entry", "Docs/Enums/EWidgetType/Values/PasswordEntry.html", ["password", "entry"], "EWidgetType");
addToContainers_enumValue("ConfirmExitFromLobby", "The \'Are you sure you want to exit lobby?\' widget", "Docs/Enums/EWidgetType/Values/ConfirmExitFromLobby.html", ["confirm", "exit", "from", "lobby"], "EWidgetType");
addToContainers_enumValue("LobbyCreationScreen", "The screen for setting up a multiplayer lobby", "Docs/Enums/EWidgetType/Values/LobbyCreationScreen.html", ["lobby", "creation", "screen"], "EWidgetType");
addToContainers_enumValue("MapSelectionScreen", "Widget for when selecting a map to play on", "Docs/Enums/EWidgetType/Values/MapSelectionScreen.html", ["map", "selection", "screen"], "EWidgetType");
addToContainers_enumValue("LobbyBrowser", "Networked game browser", "Docs/Enums/EWidgetType/Values/LobbyBrowser.html", ["lobby", "browser"], "EWidgetType");
addToContainers_enumValue("MainMenu", "", "Docs/Enums/EWidgetType/Values/MainMenu.html", ["main", "menu"], "EWidgetType");
addToContainers_enumValue("Settings", "Menu for video/audio/game/control settings", "Docs/Enums/EWidgetType/Values/Settings.html", [], "EWidgetType");
addToContainers_enumValue("Profile", "The screen to adjust things like nickname etc", "Docs/Enums/EWidgetType/Values/Profile.html", [], "EWidgetType");
addToContainers_enumValue("GameMessage", "Widget that shows warning/error messages like \"lobby full\"", "Docs/Enums/EWidgetType/Values/GameMessage.html", ["game", "message"], "EWidgetType");
addToContainers_enumValue("NicknameEntryScreen", "The widget that lets user enter their nickname", "Docs/Enums/EWidgetType/Values/NicknameEntryScreen.html", ["nickname", "entry", "screen"], "EWidgetType");
addToContainers_enumValue("PlayMenu", "Menu that appears after pessing \'Play\' from the main menu", "Docs/Enums/EWidgetType/Values/PlayMenu.html", ["play", "menu"], "EWidgetType");
addToContainers_enumValue("LoadingScreen", "Screen for loading a match", "Docs/Enums/EWidgetType/Values/LoadingScreen.html", ["loading", "screen"], "EWidgetType");
addToContainers_enumValue("ConfirmExitToOS", "\'Are you sure you want to exit to OS?\' widget", "Docs/Enums/EWidgetType/Values/ConfirmExitToOS.html", ["confirm", "exit", "to", "o", "s"], "EWidgetType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "This is always last in the enum", "Docs/Enums/EWidgetType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EWidgetType");
addToContainers_enum("EMatchWidgetType", "", "Docs/Enums/EMatchWidgetType/EMatchWidgetType.html", ["match", "widget", "type"], "");
addToContainers_enumValue("None", "Widgets that appear during a match", "Docs/Enums/EMatchWidgetType/Values/None.html", [], "EMatchWidgetType");
addToContainers_enumValue("HUD", "Displays things like current resources", "Docs/Enums/EMatchWidgetType/Values/HUD.html", ["u", "d"], "EMatchWidgetType");
addToContainers_enumValue("CommanderSkillTree_Ver2", "_Ver2 can be deleted from name. Note Z ordering via enum value means nothing for this widget. See HUDStatics::COMMANDER_SKILL_TREE_Z_ORDER instead", "Docs/Enums/EMatchWidgetType/Values/CommanderSkillTree_Ver2.html", ["commander", "skill", "tree_", "ver2"], "EMatchWidgetType");
addToContainers_enumValue("Defeat", "Screen that will only appear if you have been defeated but the match is still going", "Docs/Enums/EMatchWidgetType/Values/Defeat.html", [], "EMatchWidgetType");
addToContainers_enumValue("EndOfMatch", "Screen that appears when the match has finished", "Docs/Enums/EMatchWidgetType/Values/EndOfMatch.html", ["end", "of", "match"], "EMatchWidgetType");
addToContainers_enumValue("PauseMenu", "Menu that shows when you press pause button", "Docs/Enums/EMatchWidgetType/Values/PauseMenu.html", ["pause", "menu"], "EMatchWidgetType");
addToContainers_enumValue("Settings", "Settings menu like video, audio etc accessable from the pause menu", "Docs/Enums/EMatchWidgetType/Values/Settings.html", [], "EMatchWidgetType");
addToContainers_enumValue("ConfirmReturnToMainMenu", "The \'are you sure you want to return to main menu?\' widget", "Docs/Enums/EMatchWidgetType/Values/ConfirmReturnToMainMenu.html", ["confirm", "return", "to", "main", "menu"], "EMatchWidgetType");
addToContainers_enumValue("z_ALWAYS_3RD_LAST_IN_ENUM", "~ Highest Z order here", "Docs/Enums/EMatchWidgetType/Values/z_ALWAYS_3RD_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_3", "r", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMatchWidgetType");
addToContainers_enumValue("DevelopmentCheats", "Has cheat actions for development", "Docs/Enums/EMatchWidgetType/Values/DevelopmentCheats.html", ["development", "cheats"], "EMatchWidgetType");
addToContainers_enumValue("DevelopmentCheatsPopupMenu", "Popup widget used by development cheats widget", "Docs/Enums/EMatchWidgetType/Values/DevelopmentCheatsPopupMenu.html", ["development", "cheats", "popup", "menu"], "EMatchWidgetType");
addToContainers_enum("EProductionQueueType", "", "Docs/Enums/EProductionQueueType/EProductionQueueType.html", ["production", "queue", "type"], "");
addToContainers_enumValue("None", "Default value. Never to be used ", "Docs/Enums/EProductionQueueType/Values/None.html", [], "EProductionQueueType");
addToContainers_enumValue("Persistent", "Queue that is only used when producing buildings from the HUD persistent panel.", "Docs/Enums/EProductionQueueType/Values/Persistent.html", [], "EProductionQueueType");
addToContainers_enumValue("Context", "Queue that is used when producing either units or upgrades", "Docs/Enums/EProductionQueueType/Values/Context.html", [], "EProductionQueueType");
addToContainers_enum("EMessageType", "", "Docs/Enums/EMessageType/EMessageType.html", ["message", "type"], "");
addToContainers_enumValue("None", "Different types of messages that can be displayed to the HUD", "Docs/Enums/EMessageType/Values/None.html", [], "EMessageType");
addToContainers_enumValue("GameNotification", "", "Docs/Enums/EMessageType/Values/GameNotification.html", ["game", "notification"], "EMessageType");
addToContainers_enumValue("GameWarning", "", "Docs/Enums/EMessageType/Values/GameWarning.html", ["game", "warning"], "EMessageType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMessageType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMessageType");
addToContainers_enum("EGameNotification", "", "Docs/Enums/EGameNotification/EGameNotification.html", ["game", "notification"], "");
addToContainers_enumValue("None", "Notifications that happen during game", "Docs/Enums/EGameNotification/Values/None.html", [], "EGameNotification");
addToContainers_enumValue("ResourceSpotDepleted", "Resources at a resource spot have depleted", "Docs/Enums/EGameNotification/Values/ResourceSpotDepleted.html", ["resource", "spot", "depleted"], "EGameNotification");
addToContainers_enumValue("PlayerDefeated", "A player has been defeated", "Docs/Enums/EGameNotification/Values/PlayerDefeated.html", ["player", "defeated"], "EGameNotification");
addToContainers_enumValue("NukeLaunchedByOurselves", "", "Docs/Enums/EGameNotification/Values/NukeLaunchedByOurselves.html", ["nuke", "launched", "by", "ourselves"], "EGameNotification");
addToContainers_enumValue("NukeLaunchedByAllies", "", "Docs/Enums/EGameNotification/Values/NukeLaunchedByAllies.html", ["nuke", "launched", "by", "allies"], "EGameNotification");
addToContainers_enumValue("NukeLaunchedByHostiles", "", "Docs/Enums/EGameNotification/Values/NukeLaunchedByHostiles.html", ["nuke", "launched", "by", "hostiles"], "EGameNotification");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EGameNotification/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EGameNotification");
addToContainers_enum("EGameWarning", "", "Docs/Enums/EGameWarning/EGameWarning.html", ["game", "warning"], "");
addToContainers_enumValue("None", "This should not get a message assigned to it", "Docs/Enums/EGameWarning/Values/None.html", [], "EGameWarning");
addToContainers_enumValue("ActionOnCooldown", "Action is on cooldown", "Docs/Enums/EGameWarning/Values/ActionOnCooldown.html", ["action", "on", "cooldown"], "EGameWarning");
addToContainers_enumValue("NotEnoughSelectableResources", "Not enough mana/energy/whatever to use an ability. This is a generalized message. I should possibly remove this and add more specific messages like NotEnoughMana and NotEnoughEnergy so users can be more specific with their warning messages. Will probably require creating yet another overload for PS::OnGameWarningHappened that takes a ESelectableResourceType", "Docs/Enums/EGameWarning/Values/NotEnoughSelectableResources.html", ["not", "enough", "selectable", "resources"], "EGameWarning");
addToContainers_enumValue("PrerequisitesNotMet", "The prerequisites are not met yet", "Docs/Enums/EGameWarning/Values/PrerequisitesNotMet.html", ["prerequisites", "not", "met"], "EGameWarning");
addToContainers_enumValue("TrainingQueueFull", "Same situation as trying to add more than 5 units to a queue in Starcraft II", "Docs/Enums/EGameWarning/Values/TrainingQueueFull.html", ["training", "queue", "full"], "EGameWarning");
addToContainers_enumValue("AlreadyBeingResearched", "For upgrades only. If trying to click a button to research something and it is already being researched.", "Docs/Enums/EGameWarning/Values/AlreadyBeingResearched.html", ["already", "being", "researched"], "EGameWarning");
addToContainers_enumValue("FullyResearched", "Upgrade cannot be researched anymore", "Docs/Enums/EGameWarning/Values/FullyResearched.html", ["fully", "researched"], "EGameWarning");
addToContainers_enumValue("Building_InsideFog", "Trying to place ghost building inside fog of war", "Docs/Enums/EGameWarning/Values/Building_InsideFog.html", ["building_", "inside", "fog"], "EGameWarning");
addToContainers_enumValue("Building_SelectableInTheWay", "Trying to place ghost but another building/unit is in the way", "Docs/Enums/EGameWarning/Values/Building_SelectableInTheWay.html", ["building_", "selectable", "in", "the", "way"], "EGameWarning");
addToContainers_enumValue("Building_NotCloseEnoughToBase", "Trying to place building but building is too far away from other owned/allied buildings", "Docs/Enums/EGameWarning/Values/Building_NotCloseEnoughToBase.html", ["building_", "not", "close", "enough", "to", "base"], "EGameWarning");
addToContainers_enumValue("Building_GroundNotFlatEnough", "Trying to place building but the ground is not flat enough", "Docs/Enums/EGameWarning/Values/Building_GroundNotFlatEnough.html", ["building_", "ground", "not", "flat", "enough"], "EGameWarning");
addToContainers_enumValue("CannotProduce", "Basically means you don\'t have a construction yard type building yet you are trying to build a building. Should only appear as a message from the server. Otherwise clients should not be allowed to click the button in the first place", "Docs/Enums/EGameWarning/Values/CannotProduce.html", ["cannot", "produce"], "EGameWarning");
addToContainers_enumValue("BuildingInProgress", "For HUD persistent panel only. Means that you are already building something and cannot build any more", "Docs/Enums/EGameWarning/Values/BuildingInProgress.html", ["building", "in", "progress"], "EGameWarning");
addToContainers_enumValue("BuildingNotReadyYet", "When trying to place a building using BuildsInTab but the server says it\'s not actually ready yet even though it was on the client. Only happens because of timer drift and is expected to be rare", "Docs/Enums/EGameWarning/Values/BuildingNotReadyYet.html", ["building", "not", "ready", "yet"], "EGameWarning");
addToContainers_enumValue("InternalSelectableCapReached", "The internal selectable cap has been reached, which is usually around the size of UINT8_MAX. Have to wait until a selectable is destroyed before another can be built", "Docs/Enums/EGameWarning/Values/InternalSelectableCapReached.html", ["internal", "selectable", "cap", "reached"], "EGameWarning");
addToContainers_enumValue("BuildingTypeQuantityLimit", "The faction has a limit on the quantity of a building and you are trying to build another that would send you over the limit e.g. in RA2 you are only allowed to build one weather device", "Docs/Enums/EGameWarning/Values/BuildingTypeQuantityLimit.html", ["building", "type", "quantity", "limit"], "EGameWarning");
addToContainers_enumValue("UnitTypeQuantityLimit", "The faction has a limit on the the qunatity of a unit and you are trying to build another that would send you over the limit e.g. in RA2 you are only allowed to build one tanya", "Docs/Enums/EGameWarning/Values/UnitTypeQuantityLimit.html", ["unit", "type", "quantity", "limit"], "EGameWarning");
addToContainers_enumValue("InvalidTarget", "Target is not an acceptable target for ability", "Docs/Enums/EGameWarning/Values/InvalidTarget.html", ["invalid", "target"], "EGameWarning");
addToContainers_enumValue("AbilityCannotTargetHostiles", "", "Docs/Enums/EGameWarning/Values/AbilityCannotTargetHostiles.html", ["ability", "cannot", "target", "hostiles"], "EGameWarning");
addToContainers_enumValue("AbilityCannotTargetFriendlies", "", "Docs/Enums/EGameWarning/Values/AbilityCannotTargetFriendlies.html", ["ability", "cannot", "target", "friendlies"], "EGameWarning");
addToContainers_enumValue("CannotUseAbility", "Broad message when cannot use an ability", "Docs/Enums/EGameWarning/Values/CannotUseAbility.html", ["cannot", "use", "ability"], "EGameWarning");
addToContainers_enumValue("NoTarget", "No target hovered for an ability that requires a target", "Docs/Enums/EGameWarning/Values/NoTarget.html", ["no", "target"], "EGameWarning");
addToContainers_enumValue("AbilityCannotTargetSelf", "A unit is trying to target itself with an ability but this is not allowed", "Docs/Enums/EGameWarning/Values/AbilityCannotTargetSelf.html", ["ability", "cannot", "target", "self"], "EGameWarning");
addToContainers_enumValue("AbilityOutOfRange", "Ability is out of range", "Docs/Enums/EGameWarning/Values/AbilityOutOfRange.html", ["ability", "out", "of", "range"], "EGameWarning");
addToContainers_enumValue("AbilityLocationInsideFog", "Tried to place an ability inside fog of war but we are not allowed to do that", "Docs/Enums/EGameWarning/Values/AbilityLocationInsideFog.html", ["ability", "location", "inside", "fog"], "EGameWarning");
addToContainers_enumValue("UserNoLongerAlive", "Added for items. Trying to use an item but the selectable that is ment to use it is no longer alive", "Docs/Enums/EGameWarning/Values/UserNoLongerAlive.html", ["user", "no", "longer", "alive"], "EGameWarning");
addToContainers_enumValue("UserNoLongerValid", "Rare but can happen for remote clients. This is when they try to issue a context command but server says the units are now invalid", "Docs/Enums/EGameWarning/Values/UserNoLongerValid.html", ["user", "no", "longer", "valid"], "EGameWarning");
addToContainers_enumValue("TargetNoLongerAlive", "", "Docs/Enums/EGameWarning/Values/TargetNoLongerAlive.html", ["target", "no", "longer", "alive"], "EGameWarning");
addToContainers_enumValue("NothingSelectedCanPickUpItem", "Right-clicked on an inventory item in the world but nothing selected can pick it up", "Docs/Enums/EGameWarning/Values/NothingSelectedCanPickUpItem.html", ["nothing", "selected", "can", "pick", "up", "item"], "EGameWarning");
addToContainers_enumValue("TypeCannotAquireItem", "The unit trying to pick up or purchase an item cannot because the item type does not allow the unit type to do so", "Docs/Enums/EGameWarning/Values/TypeCannotAquireItem.html", ["type", "cannot", "aquire", "item"], "EGameWarning");
addToContainers_enumValue("TargetNotVisible", "Rare but basically remote client requested doing something to a target that the server says they can\'t actually see", "Docs/Enums/EGameWarning/Values/TargetNotVisible.html", ["target", "not", "visible"], "EGameWarning");
addToContainers_enumValue("SelectionNotUnderYourControl", "Another pretty rare warning as of right now. Kind of a modified client alert if this happens", "Docs/Enums/EGameWarning/Values/SelectionNotUnderYourControl.html", ["selection", "not", "under", "your", "control"], "EGameWarning");
addToContainers_enumValue("BuilderDestroyed", "For Tried to place a building but the builder was destroyed. Can probably code to avoid this situation but is here for now", "Docs/Enums/EGameWarning/Values/BuilderDestroyed.html", ["builder", "destroyed"], "EGameWarning");
addToContainers_enumValue("NotValid_Shop", "Remote client trying to purchase from a shop that is no longer valid. Rare warning", "Docs/Enums/EGameWarning/Values/NotValid_Shop.html", ["not", "valid_", "shop"], "EGameWarning");
addToContainers_enumValue("ItemNotForSale", "Trying to buy inventory item in shop but item can only be browsed not bought", "Docs/Enums/EGameWarning/Values/ItemNotForSale.html", ["item", "not", "for", "sale"], "EGameWarning");
addToContainers_enumValue("ItemSoldOut", "Inventory item in shop has a limited quantity and has sold out", "Docs/Enums/EGameWarning/Values/ItemSoldOut.html", ["item", "sold", "out"], "EGameWarning");
addToContainers_enumValue("ItemOutOfCharges", "Trying to use an inventory item but it\'s used up all it\'s charges", "Docs/Enums/EGameWarning/Values/ItemOutOfCharges.html", ["item", "out", "of", "charges"], "EGameWarning");
addToContainers_enumValue("ItemNoLongerInInventory", "Trying to use an inventory item but it is no longer in inventory. This warning will only be seen if you implement abilities/effects that can remove items from inventories", "Docs/Enums/EGameWarning/Values/ItemNoLongerInInventory.html", ["item", "no", "longer", "in", "inventory"], "EGameWarning");
addToContainers_enumValue("ItemNoLongerInWorld", "Tried to pick up an inventory item in the world but it is no longer there", "Docs/Enums/EGameWarning/Values/ItemNoLongerInWorld.html", ["item", "no", "longer", "in", "world"], "EGameWarning");
addToContainers_enumValue("ItemOnCooldown", "Trying to use an inventory item but it is on cooldown", "Docs/Enums/EGameWarning/Values/ItemOnCooldown.html", ["item", "on", "cooldown"], "EGameWarning");
addToContainers_enumValue("ItemNotUsable", "This one will likely only come from the server. It could be evidience of a modified client but can also be the result of inventory being modified on server before RPC has arrived to client", "Docs/Enums/EGameWarning/Values/ItemNotUsable.html", ["item", "not", "usable"], "EGameWarning");
addToContainers_enumValue("NotInRangeToPurchaseFromShop", "Trying to purchase an item from a shop but no selectable is in range to accept the item", "Docs/Enums/EGameWarning/Values/NotInRangeToPurchaseFromShop.html", ["not", "in", "range", "to", "purchase", "from", "shop"], "EGameWarning");
addToContainers_enumValue("NotInRangeToSellToShop", "Trying to sell an item but no shop is in range", "Docs/Enums/EGameWarning/Values/NotInRangeToSellToShop.html", ["not", "in", "range", "to", "sell", "to", "shop"], "EGameWarning");
addToContainers_enumValue("ItemCannotBeSold", "Trying to sell an item but it is the type of item that cannot be sold", "Docs/Enums/EGameWarning/Values/ItemCannotBeSold.html", ["item", "cannot", "be", "sold"], "EGameWarning");
addToContainers_enumValue("InventoryFull", "Trying to buy an item from a shop but everyone that is in range has a full inventory", "Docs/Enums/EGameWarning/Values/InventoryFull.html", ["inventory", "full"], "EGameWarning");
addToContainers_enumValue("CannotCarryAnymoreOfItem", "Trying to put an item in inventory but we are not allowed to carry anymore of it. Means the item is unique or something", "Docs/Enums/EGameWarning/Values/CannotCarryAnymoreOfItem.html", ["cannot", "carry", "anymore", "of", "item"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_MaxAbilityRankObtained", "The player is tryingto gain another rank for an ability but has already gained the max rank of the ability", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_MaxAbilityRankObtained.html", ["commander", "skill", "tree_", "max", "ability", "rank", "obtained"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_CommanderRankNotHighEnough", "The player is trying to aquire an ability but their rank is not high enough", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_CommanderRankNotHighEnough.html", ["commander", "skill", "tree_", "commander", "rank", "not", "high", "enough"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_PrerequisitesNotMet", "The player is trying to aquire an ability but the prerequisites have not been aquired", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_PrerequisitesNotMet.html", ["commander", "skill", "tree_", "prerequisites", "not", "met"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_NotEnoughSkillPoints", "The player is trying to aquire an ability but they cannot afford its skill point cost", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_NotEnoughSkillPoints.html", ["commander", "skill", "tree_", "not", "enough", "skill", "points"], "EGameWarning");
addToContainers_enumValue("AllAbilityChargesUsed", "Ability has a limited number of charges and cannot be used anymore. This was added for commander abilities", "Docs/Enums/EGameWarning/Values/AllAbilityChargesUsed.html", ["all", "ability", "charges", "used"], "EGameWarning");
addToContainers_enumValue("TargetPlayerHasBeenDefeated", "Trying to target a player with an ability but they have been defeated", "Docs/Enums/EGameWarning/Values/TargetPlayerHasBeenDefeated.html", ["target", "player", "has", "been", "defeated"], "EGameWarning");
addToContainers_enumValue("TargetPlayerIsHostile", "Trying to target a hostile player but the ability does not allow this", "Docs/Enums/EGameWarning/Values/TargetPlayerIsHostile.html", ["target", "player", "is", "hostile"], "EGameWarning");
addToContainers_enumValue("TargetPlayerIsAllied", "Trying to target an allied player but the ability does not allow this", "Docs/Enums/EGameWarning/Values/TargetPlayerIsAllied.html", ["target", "player", "is", "allied"], "EGameWarning");
addToContainers_enumValue("TargetPlayerIsSelf", "Trying to target ourself (meaning the player) but the ability does not allow this", "Docs/Enums/EGameWarning/Values/TargetPlayerIsSelf.html", ["target", "player", "is", "self"], "EGameWarning");
addToContainers_enumValue("NotAllowedToRemapAction", "Trying to remap a game action to some key but the action isn\'t allowed to be remapped", "Docs/Enums/EGameWarning/Values/NotAllowedToRemapAction.html", ["not", "allowed", "to", "remap", "action"], "EGameWarning");
addToContainers_enumValue("WouldUnbindUnremappableAction", "Trying to remap a game action to another key. However that key is mapped to some other action that isn\'t allowed to be changed ever", "Docs/Enums/EGameWarning/Values/WouldUnbindUnremappableAction.html", ["would", "unbind", "unremappable", "action"], "EGameWarning");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "", "Docs/Enums/EGameWarning/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EGameWarning");
addToContainers_enumValue("NotEnoughResources", "", "Docs/Enums/EGameWarning/Values/NotEnoughResources.html", ["not", "enough", "resources"], "EGameWarning");
addToContainers_enum("EBuildingBuildMethod", "", "Docs/Enums/EBuildingBuildMethod/EBuildingBuildMethod.html", ["building", "build", "method"], "");
addToContainers_enumValue("None", "Not to be used", "Docs/Enums/EBuildingBuildMethod/Values/None.html", [], "EBuildingBuildMethod");
addToContainers_enumValue("BuildsInTab", "Like classic Command and Conquer games or Allies in Red Alert 3. Building builds in your HUD and when complete you can place it somewhere at which point it will construct very quickly (or however slow you want it to, use FBuildingAttributes::ConstructTime to change this)", "Docs/Enums/EBuildingBuildMethod/Values/BuildsInTab.html", ["builds", "in", "tab"], "EBuildingBuildMethod");
addToContainers_enumValue("BuildsItself", "Like Soviets in Red Alert 3. Building is placed in world and builds itself", "Docs/Enums/EBuildingBuildMethod/Values/BuildsItself.html", ["builds", "itself"], "EBuildingBuildMethod");
addToContainers_enumValue("LayFoundationsInstantly", "Like Command and Conquer Generals. The foundation of the building is placed the moment the order is given. When the builder unit reaches the foundation it will start constructing the building", "Docs/Enums/EBuildingBuildMethod/Values/LayFoundationsInstantly.html", ["lay", "foundations", "instantly"], "EBuildingBuildMethod");
addToContainers_enumValue("LayFoundationsWhenAtLocation", "Like Terran and Zerg in Starcraft II. When builder unit gets to the build location they lay the foundation and start constructing it", "Docs/Enums/EBuildingBuildMethod/Values/LayFoundationsWhenAtLocation.html", ["lay", "foundations", "when", "at", "location"], "EBuildingBuildMethod");
addToContainers_enumValue("Protoss", "Like Protoss in Starcraft II. Requires the worker to get to order location, then building builds itself. Possibly can be merged with BuildsItself unless buildings context menus can build other buildings from it", "Docs/Enums/EBuildingBuildMethod/Values/Protoss.html", [], "EBuildingBuildMethod");
addToContainers_enum("EBuildingRallyPointDisplayRule", "", "Docs/Enums/EBuildingRallyPointDisplayRule/EBuildingRallyPointDisplayRule.html", ["building", "rally", "point", "display", "rule"], "");
addToContainers_enumValue("Always", "Show even when being constructed", "Docs/Enums/EBuildingRallyPointDisplayRule/Values/Always.html", [], "EBuildingRallyPointDisplayRule");
addToContainers_enumValue("OnlyWhenFullyConstructed", "Do not show when being constructed", "Docs/Enums/EBuildingRallyPointDisplayRule/Values/OnlyWhenFullyConstructed.html", ["only", "when", "fully", "constructed"], "EBuildingRallyPointDisplayRule");
addToContainers_enumValue("OnlyWhenFullyConstructed", "Do not show when being constructed", "Docs/Enums/EBuildingRallyPointDisplayRule/Values/OnlyWhenFullyConstructed.html", ["only", "when", "fully", "constructed"], "EBuildingRallyPointDisplayRule");
addToContainers_enum("ESelectableType", "", "Docs/Enums/ESelectableType/ESelectableType.html", ["selectable", "type"], "");
addToContainers_enumValue("Building", "The type of a selectable", "Docs/Enums/ESelectableType/Values/Building.html", [], "ESelectableType");
addToContainers_enumValue("Unit", "", "Docs/Enums/ESelectableType/Values/Unit.html", [], "ESelectableType");
addToContainers_enumValue("InventoryItem", "", "Docs/Enums/ESelectableType/Values/InventoryItem.html", ["inventory", "item"], "ESelectableType");
addToContainers_enum("EFogStatus", "", "Docs/Enums/EFogStatus/EFogStatus.html", ["fog", "status"], "");
addToContainers_enumValue("0x00", "", "Docs/Enums/EFogStatus/Values/0x00.html", [], "EFogStatus");
addToContainers_enumValue("0x01", "", "Docs/Enums/EFogStatus/Values/0x01.html", [], "EFogStatus");
addToContainers_enumValue("0x02", "", "Docs/Enums/EFogStatus/Values/0x02.html", [], "EFogStatus");
addToContainers_enumValue("0x03", "", "Docs/Enums/EFogStatus/Values/0x03.html", [], "EFogStatus");
addToContainers_enum("EMatchResult", "", "Docs/Enums/EMatchResult/EMatchResult.html", ["match", "result"], "");
addToContainers_enumValue("None", "Default value, never to be used", "Docs/Enums/EMatchResult/Values/None.html", [], "EMatchResult");
addToContainers_enumValue("Defeat", "", "Docs/Enums/EMatchResult/Values/Defeat.html", [], "EMatchResult");
addToContainers_enumValue("Draw", "", "Docs/Enums/EMatchResult/Values/Draw.html", [], "EMatchResult");
addToContainers_enumValue("Victory", "", "Docs/Enums/EMatchResult/Values/Victory.html", [], "EMatchResult");
addToContainers_enum("EAbilityMouseAppearance", "", "Docs/Enums/EAbilityMouseAppearance/EAbilityMouseAppearance.html", ["ability", "mouse", "appearance"], "");
addToContainers_enumValue("NoChange", "Mouse cursor will not change when using this ability", "Docs/Enums/EAbilityMouseAppearance/Values/NoChange.html", ["no", "change"], "EAbilityMouseAppearance");
addToContainers_enumValue("CustomMouseCursor", "Show a custom mouse cursor. At least default cursor will need a valid path while the other 2 are optional", "Docs/Enums/EAbilityMouseAppearance/Values/CustomMouseCursor.html", ["custom", "mouse", "cursor"], "EAbilityMouseAppearance");
addToContainers_enumValue("HideAndShowDecal", "Hide the mouse cursor and draw a decal onto the world", "Docs/Enums/EAbilityMouseAppearance/Values/HideAndShowDecal.html", ["hide", "and", "show", "decal"], "EAbilityMouseAppearance");
addToContainers_enum("ECommandTargetType", "", "Docs/Enums/ECommandTargetType/ECommandTargetType.html", ["command", "target", "type"], "");
addToContainers_enumValue("NoTarget", "No target. The ground for example", "Docs/Enums/ECommandTargetType/Values/NoTarget.html", ["no", "target"], "ECommandTargetType");
addToContainers_enumValue("OwnedSelectable", "", "Docs/Enums/ECommandTargetType/Values/OwnedSelectable.html", ["owned", "selectable"], "ECommandTargetType");
addToContainers_enumValue("AlliedSelectable", "", "Docs/Enums/ECommandTargetType/Values/AlliedSelectable.html", ["allied", "selectable"], "ECommandTargetType");
addToContainers_enumValue("NeutralSelectable", "", "Docs/Enums/ECommandTargetType/Values/NeutralSelectable.html", ["neutral", "selectable"], "ECommandTargetType");
addToContainers_enumValue("HostileSelectable", "", "Docs/Enums/ECommandTargetType/Values/HostileSelectable.html", ["hostile", "selectable"], "ECommandTargetType");
addToContainers_enumValue("ObservedSelectable", "~ Should always be 2nd last in enum", "Docs/Enums/ECommandTargetType/Values/ObservedSelectable.html", ["observed", "selectable"], "ECommandTargetType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/ECommandTargetType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECommandTargetType");
addToContainers_enum("EMessageRecipients", "", "Docs/Enums/EMessageRecipients/EMessageRecipients.html", ["message", "recipients"], "");
addToContainers_enumValue("None", "Who will receive an in-match chat message", "Docs/Enums/EMessageRecipients/Values/None.html", [], "EMessageRecipients");
addToContainers_enumValue("TeamOnly", "Only people on our own team", "Docs/Enums/EMessageRecipients/Values/TeamOnly.html", ["team", "only"], "EMessageRecipients");
addToContainers_enumValue("Everyone", "Everyone in the match ", "Docs/Enums/EMessageRecipients/Values/Everyone.html", [], "EMessageRecipients");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMessageRecipients/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMessageRecipients");
addToContainers_enum("EMarqueeBoxDrawMethod", "", "Docs/Enums/EMarqueeBoxDrawMethod/EMarqueeBoxDrawMethod.html", ["marquee", "box", "draw", "method"], "");
addToContainers_enumValue("BorderOnly", "Only draw an opaque border line like in starcraft", "Docs/Enums/EMarqueeBoxDrawMethod/Values/BorderOnly.html", ["border", "only"], "EMarqueeBoxDrawMethod");
addToContainers_enumValue("FilledRectangleOnly", "Only draw a transparent filled rectangle", "Docs/Enums/EMarqueeBoxDrawMethod/Values/FilledRectangleOnly.html", ["filled", "rectangle", "only"], "EMarqueeBoxDrawMethod");
addToContainers_enumValue("BorderAndFill", "Draw an opaque border and a transparent filled rectangle", "Docs/Enums/EMarqueeBoxDrawMethod/Values/BorderAndFill.html", ["border", "and", "fill"], "EMarqueeBoxDrawMethod");
addToContainers_enum("EBuffOrDebuffType", "", "Docs/Enums/EBuffOrDebuffType/EBuffOrDebuffType.html", ["buff", "or", "debuff", "type"], "");
addToContainers_enumValue("Buff", "Enum to define whether something is a buff or debuff", "Docs/Enums/EBuffOrDebuffType/Values/Buff.html", [], "EBuffOrDebuffType");
addToContainers_enumValue("Debuff", "", "Docs/Enums/EBuffOrDebuffType/Values/Debuff.html", [], "EBuffOrDebuffType");
addToContainers_enum("EMacroCommandType", "", "Docs/Enums/EMacroCommandType/EMacroCommandType.html", ["macro", "command", "type"], "");
addToContainers_enumValue("None", "Default value", "Docs/Enums/EMacroCommandType/Values/None.html", [], "EMacroCommandType");
addToContainers_enumValue("TrainCollector", "Training a unit for the purpose of harvesting resources", "Docs/Enums/EMacroCommandType/Values/TrainCollector.html", ["train", "collector"], "EMacroCommandType");
addToContainers_enumValue("BuildResourceDepot", "Building a building to serve as a resource depot", "Docs/Enums/EMacroCommandType/Values/BuildResourceDepot.html", ["build", "resource", "depot"], "EMacroCommandType");
addToContainers_enumValue("BuildConstructionYard", "Building a building so it can serve as a construction yard", "Docs/Enums/EMacroCommandType/Values/BuildConstructionYard.html", ["build", "construction", "yard"], "EMacroCommandType");
addToContainers_enumValue("TrainWorker", "Training a worker unit so they can build buildings", "Docs/Enums/EMacroCommandType/Values/TrainWorker.html", ["train", "worker"], "EMacroCommandType");
addToContainers_enumValue("BuildBarracks", "Building a building for the purpose of training army units from it", "Docs/Enums/EMacroCommandType/Values/BuildBarracks.html", ["build", "barracks"], "EMacroCommandType");
addToContainers_enumValue("ResearchUpgrade", "Research an upgrade", "Docs/Enums/EMacroCommandType/Values/ResearchUpgrade.html", ["research", "upgrade"], "EMacroCommandType");
addToContainers_enumValue("BuildBaseDefense", "Base a base defense building", "Docs/Enums/EMacroCommandType/Values/BuildBaseDefense.html", ["build", "base", "defense"], "EMacroCommandType");
addToContainers_enumValue("TrainArmyUnit", "Training a unit to use as an army unit", "Docs/Enums/EMacroCommandType/Values/TrainArmyUnit.html", ["train", "army", "unit"], "EMacroCommandType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMacroCommandType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMacroCommandType");
addToContainers_enum("EMacroCommandSecondaryType", "", "Docs/Enums/EMacroCommandSecondaryType/EMacroCommandSecondaryType.html", ["macro", "command", "secondary", "type"], "");
addToContainers_enumValue("None", "Default value", "Docs/Enums/EMacroCommandSecondaryType/Values/None.html", [], "EMacroCommandSecondaryType");
addToContainers_enumValue("TrainingUnit", "Training unit either as army unit or worker or collector", "Docs/Enums/EMacroCommandSecondaryType/Values/TrainingUnit.html", ["training", "unit"], "EMacroCommandSecondaryType");
addToContainers_enumValue("BuildingBuilding", "Building a building", "Docs/Enums/EMacroCommandSecondaryType/Values/BuildingBuilding.html", ["building", "building"], "EMacroCommandSecondaryType");
addToContainers_enumValue("ResearchingUpgrade", "", "Docs/Enums/EMacroCommandSecondaryType/Values/ResearchingUpgrade.html", ["researching", "upgrade"], "EMacroCommandSecondaryType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMacroCommandSecondaryType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMacroCommandSecondaryType");
addToContainers_enum("EAbilityDecalType", "", "Docs/Enums/EAbilityDecalType/EAbilityDecalType.html", ["ability", "decal", "type"], "");
addToContainers_enumValue("UsableLocation", "The decal to show when the mouse is at a location where if clicked then a command will be issued", "Docs/Enums/EAbilityDecalType/Values/UsableLocation.html", ["usable", "location"], "EAbilityDecalType");
addToContainers_enumValue("NotUsableLocation", "The decal to show when the mouse is at a location where if clicked a command will not be issued", "Docs/Enums/EAbilityDecalType/Values/NotUsableLocation.html", ["not", "usable", "location"], "EAbilityDecalType");
addToContainers_enum("EAttributeAdjustmentRule", "", "Docs/Enums/EAttributeAdjustmentRule/EAttributeAdjustmentRule.html", ["attribute", "adjustment", "rule"], "");
addToContainers_enumValue("NoChange", "If max health increases by 200 then current health will not change. If max health decreases by 200 then current health will not change unless it is now more than max health in which case it will be set to max health", "Docs/Enums/EAttributeAdjustmentRule/Values/NoChange.html", ["no", "change"], "EAttributeAdjustmentRule");
addToContainers_enumValue("Percentage", "If max health increases by 30% then current health increases by 30%. If max health decreases by 30% then current health decreases by 30%", "Docs/Enums/EAttributeAdjustmentRule/Values/Percentage.html", [], "EAttributeAdjustmentRule");
addToContainers_enumValue("Absolute", "If max health increases by 200 then so does current health. If max health decreases by 200 then current health will not change unless it is now more than max health in which case it will be set to max health", "Docs/Enums/EAttributeAdjustmentRule/Values/Absolute.html", [], "EAttributeAdjustmentRule");
addToContainers_enumValue("Absolute", "If max health increases by 200 then so does current health. If max health decreases by 200 then current health will not change unless it is now more than max health in which case it will be set to max health", "Docs/Enums/EAttributeAdjustmentRule/Values/Absolute.html", [], "EAttributeAdjustmentRule");
addToContainers_enum("ESelectableCreationMethod", "", "Docs/Enums/ESelectableCreationMethod/ESelectableCreationMethod.html", ["selectable", "creation", "method"], "");
addToContainers_enumValue("Uninitialized", "Currently it is unknown how it was created yet", "Docs/Enums/ESelectableCreationMethod/Values/Uninitialized.html", [], "ESelectableCreationMethod");
addToContainers_enumValue("StartingSelectable", "The selectable is a selectable that the player started the match with", "Docs/Enums/ESelectableCreationMethod/Values/StartingSelectable.html", ["starting", "selectable"], "ESelectableCreationMethod");
addToContainers_enumValue("Production", "The selectable was created using a production queue or from a worker", "Docs/Enums/ESelectableCreationMethod/Values/Production.html", [], "ESelectableCreationMethod");
addToContainers_enumValue("Spawned", "Spawned using an ability or something", "Docs/Enums/ESelectableCreationMethod/Values/Spawned.html", [], "ESelectableCreationMethod");
addToContainers_enumValue("Spawned", "Spawned using an ability or something", "Docs/Enums/ESelectableCreationMethod/Values/Spawned.html", [], "ESelectableCreationMethod");
addToContainers_enum("EInventoryItemNumChargesChangedBehavior", "", "Docs/Enums/EInventoryItemNumChargesChangedBehavior/EInventoryItemNumChargesChangedBehavior.html", ["inventory", "item", "num", "charges", "changed", "behavior"], "");
addToContainers_enumValue("AlwaysDoNothing", "Do nothing e.g. diffusal blade", "Docs/Enums/EInventoryItemNumChargesChangedBehavior/Values/AlwaysDoNothing.html", ["always", "do", "nothing"], "EInventoryItemNumChargesChangedBehavior");
addToContainers_enumValue("DestroyAtZeroCharges", "Destroy the item when it reaches zero charges e.g. TP scroll", "Docs/Enums/EInventoryItemNumChargesChangedBehavior/Values/DestroyAtZeroCharges.html", ["destroy", "at", "zero", "charges"], "EInventoryItemNumChargesChangedBehavior");
addToContainers_enumValue("CustomBehavior", "Use your own custom behavior. You will need to assing a function pointer for this usually it is done in some GI function", "Docs/Enums/EInventoryItemNumChargesChangedBehavior/Values/CustomBehavior.html", ["custom", "behavior"], "EInventoryItemNumChargesChangedBehavior");
addToContainers_enum("EAbilityUsageType", "", "Docs/Enums/EAbilityUsageType/EAbilityUsageType.html", ["ability", "usage", "type"], "");
addToContainers_enumValue("SelectablesActionBar", "The ability is on the action bar of a selectable", "Docs/Enums/EAbilityUsageType/Values/SelectablesActionBar.html", ["selectables", "action", "bar"], "EAbilityUsageType");
addToContainers_enumValue("SelectablesInventory", "The ability is from a selectable using an item in their inventory", "Docs/Enums/EAbilityUsageType/Values/SelectablesInventory.html", ["selectables", "inventory"], "EAbilityUsageType");
addToContainers_enumValue("SpecialBuildingTargetingAbility", "One of those abilities like engineers capturing buildings or spies revealing what the building is producing", "Docs/Enums/EAbilityUsageType/Values/SpecialBuildingTargetingAbility.html", ["special", "building", "targeting", "ability"], "EAbilityUsageType");
addToContainers_enum("ESelectionDecalSetup", "", "Docs/Enums/ESelectionDecalSetup/ESelectionDecalSetup.html", ["selection", "decal", "setup"], "");
addToContainers_enumValue("Unknown", "Not good. Means uninitialized value", "Docs/Enums/ESelectionDecalSetup/Values/Unknown.html", [], "ESelectionDecalSetup");
addToContainers_enumValue("DoesNotUse", "Does not use a selection decal", "Docs/Enums/ESelectionDecalSetup/Values/DoesNotUse.html", ["does", "not", "use"], "ESelectionDecalSetup");
addToContainers_enumValue("UsesNonDynamicMaterial", "Uses a selection decal and the material is a non-dynamic material instance", "Docs/Enums/ESelectionDecalSetup/Values/UsesNonDynamicMaterial.html", ["uses", "non", "dynamic", "material"], "ESelectionDecalSetup");
addToContainers_enumValue("UsesDynamicMaterial", "Uses a selection decal and the material is a dynamic material instance", "Docs/Enums/ESelectionDecalSetup/Values/UsesDynamicMaterial.html", ["uses", "dynamic", "material"], "ESelectionDecalSetup");
addToContainers_enum("EUIElementType", "", "Docs/Enums/EUIElementType/EUIElementType.html", ["u", "i", "element", "type"], "");
addToContainers_enumValue("SelectablesActionBar", "Something on a selectable\'s action bar", "Docs/Enums/EUIElementType/Values/SelectablesActionBar.html", ["selectables", "action", "bar"], "EUIElementType");
addToContainers_enumValue("PersistentPanel", "Something on the C&C like persistent panel", "Docs/Enums/EUIElementType/Values/PersistentPanel.html", ["persistent", "panel"], "EUIElementType");
addToContainers_enumValue("InventorySlot", "Slot in a selectables inventory", "Docs/Enums/EUIElementType/Values/InventorySlot.html", ["inventory", "slot"], "EUIElementType");
addToContainers_enumValue("ShopSlot", "Slot in a shop", "Docs/Enums/EUIElementType/Values/ShopSlot.html", ["shop", "slot"], "EUIElementType");
addToContainers_enumValue("ProductionQueueSlot", "A slot in a production queue", "Docs/Enums/EUIElementType/Values/ProductionQueueSlot.html", ["production", "queue", "slot"], "EUIElementType");
addToContainers_enumValue("GlobalSkillsPanelButton", "Button on the commander\'s global skills panel", "Docs/Enums/EUIElementType/Values/GlobalSkillsPanelButton.html", ["global", "skills", "panel", "button"], "EUIElementType");
addToContainers_enumValue("CommanderSkillTreeNode", "A node on the commander\'s skill tree", "Docs/Enums/EUIElementType/Values/CommanderSkillTreeNode.html", ["commander", "skill", "tree", "node"], "EUIElementType");
addToContainers_enumValue("NoTooltipRequired", "A button type that does not show a tooltip when hovered", "Docs/Enums/EUIElementType/Values/NoTooltipRequired.html", ["no", "tooltip", "required"], "EUIElementType");
addToContainers_enumValue("None", "", "Docs/Enums/EUIElementType/Values/None.html", [], "EUIElementType");
addToContainers_enum("EUnitInitialSpawnBehavior", "", "Docs/Enums/EUnitInitialSpawnBehavior/EUnitInitialSpawnBehavior.html", ["unit", "initial", "spawn", "behavior"], "");
addToContainers_enumValue("MoveToRallyPoint", "Move towards the building\'s rally point", "Docs/Enums/EUnitInitialSpawnBehavior/Values/MoveToRallyPoint.html", ["move", "to", "rally", "point"], "EUnitInitialSpawnBehavior");
addToContainers_enumValue("CollectFromNearestResourceSpot", "If the unit can collect resources then it will collect from the nearest resource spot that it can. If there are no resource spots that it can collect from then it will move to the building\'s rally point. This is ambiguous. Is it the closest discovered resource spot or can we see through fog with this?", "Docs/Enums/EUnitInitialSpawnBehavior/Values/CollectFromNearestResourceSpot.html", ["collect", "from", "nearest", "resource", "spot"], "EUnitInitialSpawnBehavior");
addToContainers_enum("ESoundFogRules", "", "Docs/Enums/ESoundFogRules/ESoundFogRules.html", ["sound", "fog", "rules"], "");
addToContainers_enumValue("Ignore", "Ignore fog of war completely. If player positions camera over sounds location then they will be able to hear it, whether the location is revealed or not. Exactly the same as if you were to take a UAudioComponent and play the sound on that. My note: this doesn\'t fully work. If an actor has not replicated yet then the sound is never known which is not the correct behavior. Don\'t think many people will use this though.", "Docs/Enums/ESoundFogRules/Values/Ignore.html", [], "ESoundFogRules");
addToContainers_enumValue("DecideOnSpawn", "If spawn location is inside fog of war then sound will never be able to be heard. If spawn location is outside fog of war then sound will always be able to be heard. Worse performance than Ignore. A good use for this would be if the sound is quite short (say less than 1 second).", "Docs/Enums/ESoundFogRules/Values/DecideOnSpawn.html", ["decide", "on", "spawn"], "ESoundFogRules");
addToContainers_enumValue("InstigatingTeamOnly", "Only the team making the sound can hear it", "Docs/Enums/ESoundFogRules/Values/InstigatingTeamOnly.html", ["instigating", "team", "only"], "ESoundFogRules");
addToContainers_enumValue("AlwaysKnownOnceHeard", "Once the sound is heard once it can be heard forever. Worse performance than DecideOnSpawn", "Docs/Enums/ESoundFogRules/Values/AlwaysKnownOnceHeard.html", ["always", "known", "once", "heard"], "ESoundFogRules");
addToContainers_enumValue("DynamicExceptForInstigatorsTeam", "Sound will become unheard if it is inside fog of war, except for the team that instigated the sound. For them it will always be heard even if the sound\'s location becomes inside fog of war. Worse performance than DecideOnSpawn.", "Docs/Enums/ESoundFogRules/Values/DynamicExceptForInstigatorsTeam.html", ["dynamic", "except", "for", "instigators", "team"], "ESoundFogRules");
addToContainers_enumValue("Dynamic", "Sound will change from being heard/unheard based on its current locations fog status. This has worse performance than all above but it\'s really no biggie.", "Docs/Enums/ESoundFogRules/Values/Dynamic.html", [], "ESoundFogRules");
addToContainers_enumValue("Dynamic", "Sound will change from being heard/unheard based on its current locations fog status. This has worse performance than all above but it\'s really no biggie.", "Docs/Enums/ESoundFogRules/Values/Dynamic.html", [], "ESoundFogRules");
addToContainers_enum("EWorldWidgetViewMode", "", "Docs/Enums/EWorldWidgetViewMode/EWorldWidgetViewMode.html", ["world", "widget", "view", "mode"], "");
addToContainers_enumValue("NoChange", "Do nothing", "Docs/Enums/EWorldWidgetViewMode/Values/NoChange.html", ["no", "change"], "EWorldWidgetViewMode");
addToContainers_enumValue("NoChange", "Do nothing", "Docs/Enums/EWorldWidgetViewMode/Values/NoChange.html", ["no", "change"], "EWorldWidgetViewMode");
addToContainers_enum("EAbilityTargetingMethod", "", "Docs/Enums/EAbilityTargetingMethod/EAbilityTargetingMethod.html", ["ability", "targeting", "method"], "");
addToContainers_enumValue("DoesNotRequireAnyTarget", "Does not require any target", "Docs/Enums/EAbilityTargetingMethod/Values/DoesNotRequireAnyTarget.html", ["does", "not", "require", "any", "target"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresSelectable", "Requires another selectable as a target e.g. SCII ghost snipe", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresSelectable.html", ["requires", "selectable"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresWorldLocation", "Requires a location in the world as a target e.g. artillery strike", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresWorldLocation.html", ["requires", "world", "location"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresWorldLocationOrSelectable", "Can target either another selectable or a world location e.g. attack move", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresWorldLocationOrSelectable.html", ["requires", "world", "location", "or", "selectable"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresPlayer", "Targets a player", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresPlayer.html", ["requires", "player"], "EAbilityTargetingMethod");
addToContainers_enum("EGarrisonUnloadAllMethod", "", "Docs/Enums/EGarrisonUnloadAllMethod/EGarrisonUnloadAllMethod.html", ["garrison", "unload", "all", "method"], "");
addToContainers_enumValue("AllAtOnce_Grid", "Everyone leaves all at once. I think SCII terran bunkers do it this way. The units are tried to be positioned in a grid on the side of the building", "Docs/Enums/EGarrisonUnloadAllMethod/Values/AllAtOnce_Grid.html", ["all", "at", "once_", "grid"], "EGarrisonUnloadAllMethod");
addToContainers_enumValue("AllAtOnce_Grid", "Everyone leaves all at once. I think SCII terran bunkers do it this way. The units are tried to be positioned in a grid on the side of the building", "Docs/Enums/EGarrisonUnloadAllMethod/Values/AllAtOnce_Grid.html", ["all", "at", "once_", "grid"], "EGarrisonUnloadAllMethod");
addToContainers_enum("EDevelopmentAction", "", "Docs/Enums/EDevelopmentAction/EDevelopmentAction.html", ["development", "action"], "");
addToContainers_enumValue("None", "Do no action", "Docs/Enums/EDevelopmentAction/Values/None.html", [], "EDevelopmentAction");
addToContainers_enumValue("ClosePopupMenu", "Close the secondary popup menu widget if it is showing", "Docs/Enums/EDevelopmentAction/Values/ClosePopupMenu.html", ["close", "popup", "menu"], "EDevelopmentAction");
addToContainers_enumValue("IgnoreAllLMBRelease", "", "Docs/Enums/EDevelopmentAction/Values/IgnoreAllLMBRelease.html", ["ignore", "all", "l", "m", "b", "release"], "EDevelopmentAction");
addToContainers_enumValue("IgnoreNextLMBRelease", "", "Docs/Enums/EDevelopmentAction/Values/IgnoreNextLMBRelease.html", ["ignore", "next", "l", "m", "b", "release"], "EDevelopmentAction");
addToContainers_enumValue("DealMassiveDamageToSelectable", "Give a selectable zero health by dealing a massive amount of damage to it", "Docs/Enums/EDevelopmentAction/Values/DealMassiveDamageToSelectable.html", ["deal", "massive", "damage", "to", "selectable"], "EDevelopmentAction");
addToContainers_enumValue("CancelDealMassiveDamage", "", "Docs/Enums/EDevelopmentAction/Values/CancelDealMassiveDamage.html", ["cancel", "deal", "massive", "damage"], "EDevelopmentAction");
addToContainers_enumValue("DamageSelectable", "Deal a small amount of damage to a selectable", "Docs/Enums/EDevelopmentAction/Values/DamageSelectable.html", ["damage", "selectable"], "EDevelopmentAction");
addToContainers_enumValue("CancelDamageSelectable", "", "Docs/Enums/EDevelopmentAction/Values/CancelDamageSelectable.html", ["cancel", "damage", "selectable"], "EDevelopmentAction");
addToContainers_enumValue("AwardExperience", "Award experience to a selectable", "Docs/Enums/EDevelopmentAction/Values/AwardExperience.html", ["award", "experience"], "EDevelopmentAction");
addToContainers_enumValue("CancelAwardExperience", "", "Docs/Enums/EDevelopmentAction/Values/CancelAwardExperience.html", ["cancel", "award", "experience"], "EDevelopmentAction");
addToContainers_enumValue("AwardLotsOfExperience", "Award enough experience to a selectable such that they level up once or twice or something", "Docs/Enums/EDevelopmentAction/Values/AwardLotsOfExperience.html", ["award", "lots", "of", "experience"], "EDevelopmentAction");
addToContainers_enumValue("CancelAwardLotsOfExperience", "", "Docs/Enums/EDevelopmentAction/Values/CancelAwardLotsOfExperience.html", ["cancel", "award", "lots", "of", "experience"], "EDevelopmentAction");
addToContainers_enumValue("AwardExperienceToLocalPlayer", "", "Docs/Enums/EDevelopmentAction/Values/AwardExperienceToLocalPlayer.html", ["award", "experience", "to", "local", "player"], "EDevelopmentAction");
addToContainers_enumValue("GiveRandomInventoryItem", "Try give a random inventory item to a selectable", "Docs/Enums/EDevelopmentAction/Values/GiveRandomInventoryItem.html", ["give", "random", "inventory", "item"], "EDevelopmentAction");
addToContainers_enumValue("CancelGiveRandomInventoryItem", "", "Docs/Enums/EDevelopmentAction/Values/CancelGiveRandomInventoryItem.html", ["cancel", "give", "random", "inventory", "item"], "EDevelopmentAction");
addToContainers_enumValue("GiveSpecificInventoryItem_SelectionPhase", "", "Docs/Enums/EDevelopmentAction/Values/GiveSpecificInventoryItem_SelectionPhase.html", ["give", "specific", "inventory", "item_", "selection", "phase"], "EDevelopmentAction");
addToContainers_enumValue("GiveSpecificInventoryItem_SelectTarget", "", "Docs/Enums/EDevelopmentAction/Values/GiveSpecificInventoryItem_SelectTarget.html", ["give", "specific", "inventory", "item_", "select", "target"], "EDevelopmentAction");
addToContainers_enumValue("CancelGiveSpecificInventoryItem_SelectTarget", "", "Docs/Enums/EDevelopmentAction/Values/CancelGiveSpecificInventoryItem_SelectTarget.html", ["cancel", "give", "specific", "inventory", "item_", "select", "target"], "EDevelopmentAction");
addToContainers_enumValue("GetUnitAIInfo", "", "Docs/Enums/EDevelopmentAction/Values/GetUnitAIInfo.html", ["get", "unit", "a", "i", "info"], "EDevelopmentAction");
addToContainers_enumValue("GetUnitAIInfo", "", "Docs/Enums/EDevelopmentAction/Values/GetUnitAIInfo.html", ["get", "unit", "a", "i", "info"], "EDevelopmentAction");
addToContainers_enum("EEditorPlaySkippingOption", "", "Docs/Enums/EEditorPlaySkippingOption/EEditorPlaySkippingOption.html", ["editor", "play", "skipping", "option"], "");
addToContainers_enumValue("SkipNothing", "Skip nothing so opening movie will play then main menu will be shown", "Docs/Enums/EEditorPlaySkippingOption/Values/SkipNothing.html", ["skip", "nothing"], "EEditorPlaySkippingOption");
addToContainers_enumValue("SkipOpeningCutsceneOnly", "Skip just the opening movie so main menu will be shown", "Docs/Enums/EEditorPlaySkippingOption/Values/SkipOpeningCutsceneOnly.html", ["skip", "opening", "cutscene", "only"], "EEditorPlaySkippingOption");
addToContainers_enumValue("SkipMainMenu", "Skip opening cutscene and main menu so you will play a match on the map open in editor straight away", "Docs/Enums/EEditorPlaySkippingOption/Values/SkipMainMenu.html", ["skip", "main", "menu"], "EEditorPlaySkippingOption");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EEditorPlaySkippingOption/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EEditorPlaySkippingOption");
addToContainers_enum("EInvalidOwnerIndexAction", "", "Docs/Enums/EInvalidOwnerIndexAction/EInvalidOwnerIndexAction.html", ["invalid", "owner", "index", "action"], "");
addToContainers_enumValue("DoNotSpawn", "Selectable will not be respawned and will be excluded from PIE", "Docs/Enums/EInvalidOwnerIndexAction/Values/DoNotSpawn.html", ["do", "not", "spawn"], "EInvalidOwnerIndexAction");
addToContainers_enumValue("AssignToServerPlayer", "Selectable will be respawned belonging to the server player", "Docs/Enums/EInvalidOwnerIndexAction/Values/AssignToServerPlayer.html", ["assign", "to", "server", "player"], "EInvalidOwnerIndexAction");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EInvalidOwnerIndexAction/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EInvalidOwnerIndexAction");
addToContainers_enum("EImcomingDamageReductionRule", "", "Docs/Enums/EImcomingDamageReductionRule/EImcomingDamageReductionRule.html", ["imcoming", "damage", "reduction", "rule"], "");
addToContainers_enumValue("MultiplyThenAdd", "e.g. Damage multiplier = 0.9, damage reduction amount = 10 Incoming damage = 100. Damage = 100 * 0.9 - 10 = 80", "Docs/Enums/EImcomingDamageReductionRule/Values/MultiplyThenAdd.html", ["multiply", "then", "add"], "EImcomingDamageReductionRule");
addToContainers_enumValue("AddThenMultiply", "e.g. Damage multiplier = 0.9, damage reduction amount = 10 Incoming damage = 100. Damage = 100 - 10 * 0.9 = 81", "Docs/Enums/EImcomingDamageReductionRule/Values/AddThenMultiply.html", ["add", "then", "multiply"], "EImcomingDamageReductionRule");
addToContainers_enum("EInputKeyDisplayMethod", "", "Docs/Enums/EInputKeyDisplayMethod/EInputKeyDisplayMethod.html", ["input", "key", "display", "method"], "");
addToContainers_enumValue("ImageOnly", "You have an image that sufficiently conveys which key it represents", "Docs/Enums/EInputKeyDisplayMethod/Values/ImageOnly.html", ["image", "only"], "EInputKeyDisplayMethod");
addToContainers_enumValue("ImageAndAddTextAtRuntime", "You have a image but want to add some text to it e.g. you have a sqaure key image that is blank and want to write \"Enter\" overtop of it to convey it is the enter key", "Docs/Enums/EInputKeyDisplayMethod/Values/ImageAndAddTextAtRuntime.html", ["image", "and", "add", "text", "at", "runtime"], "EInputKeyDisplayMethod");
addToContainers_enum("EKeyModifiers", "", "Docs/Enums/EKeyModifiers/EKeyModifiers.html", ["key", "modifiers"], "");
addToContainers_enumValue("0", "", "Docs/Enums/EKeyModifiers/Values/0.html", [], "EKeyModifiers");
addToContainers_enumValue("1", "", "Docs/Enums/EKeyModifiers/Values/1.html", [], "EKeyModifiers");
addToContainers_enumValue("2", "", "Docs/Enums/EKeyModifiers/Values/2.html", [], "EKeyModifiers");
addToContainers_enumValue("4", "", "Docs/Enums/EKeyModifiers/Values/4.html", [], "EKeyModifiers");
addToContainers_enumValue("3", "", "Docs/Enums/EKeyModifiers/Values/3.html", [], "EKeyModifiers");
addToContainers_enumValue("5", "", "Docs/Enums/EKeyModifiers/Values/5.html", [], "EKeyModifiers");
addToContainers_enumValue("6", "", "Docs/Enums/EKeyModifiers/Values/6.html", [], "EKeyModifiers");
addToContainers_enumValue("7", "", "Docs/Enums/EKeyModifiers/Values/7.html", [], "EKeyModifiers");
addToContainers_enum("ECommanderSkillTreeAnimationPlayRule", "", "Docs/Enums/ECommanderSkillTreeAnimationPlayRule/ECommanderSkillTreeAnimationPlayRule.html", ["commander", "skill", "tree", "animation", "play", "rule"], "");
addToContainers_enumValue("Never", "Never play the anim. An alternative is to just never name the anim correctly in editor", "Docs/Enums/ECommanderSkillTreeAnimationPlayRule/Values/Never.html", [], "ECommanderSkillTreeAnimationPlayRule");
addToContainers_enumValue("CanAffordAbilityAtStartOfMatchOrLevelUp", "The anim will play: - at the start of the match if the player can afford at least one ability on the skill tree - if you level up and can afford at least one ability on the skill tree", "Docs/Enums/ECommanderSkillTreeAnimationPlayRule/Values/CanAffordAbilityAtStartOfMatchOrLevelUp.html", ["can", "afford", "ability", "at", "start", "of", "match", "or", "level", "up"], "ECommanderSkillTreeAnimationPlayRule");
addToContainers_enumValue("CanAffordAbilityAtStartOfMatchOrLevelUp", "The anim will play: - at the start of the match if the player can afford at least one ability on the skill tree - if you level up and can afford at least one ability on the skill tree", "Docs/Enums/ECommanderSkillTreeAnimationPlayRule/Values/CanAffordAbilityAtStartOfMatchOrLevelUp.html", ["can", "afford", "ability", "at", "start", "of", "match", "or", "level", "up"], "ECommanderSkillTreeAnimationPlayRule");
addToContainers_enum("EAssignedAbilityType", "", "Docs/Enums/EAssignedAbilityType/EAssignedAbilityType.html", ["assigned", "ability", "type"], "");
addToContainers_enumValue("CommanderSkill", "What kind of ability is assigned to this button", "Docs/Enums/EAssignedAbilityType/Values/CommanderSkill.html", ["commander", "skill"], "EAssignedAbilityType");
addToContainers_enumValue("CommanderSkill", "What kind of ability is assigned to this button", "Docs/Enums/EAssignedAbilityType/Values/CommanderSkill.html", ["commander", "skill"], "EAssignedAbilityType");
addToContainers_enum("", "", "Docs/Enums/_11/.html", [], "");
addToContainers_enumValue("ExitToMainMenu", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/_11/Values/ExitToMainMenu.html", ["exit", "to", "main", "menu"], "");
addToContainers_enumValue("ExitToOperatingSystem", "", "Docs/Enums/_11/Values/ExitToOperatingSystem.html", ["exit", "to", "operating", "system"], "");
addToContainers_enum("ECannotStartMatchReason", "", "Docs/Enums/ECannotStartMatchReason/ECannotStartMatchReason.html", ["cannot", "start", "match", "reason"], "");
addToContainers_enumValue("NotEnoughPlayers", "Need more players in lobby", "Docs/Enums/ECannotStartMatchReason/Values/NotEnoughPlayers.html", ["not", "enough", "players"], "ECannotStartMatchReason");
addToContainers_enumValue("EveryonesOnOneTeam", "Need 2+ different teams", "Docs/Enums/ECannotStartMatchReason/Values/EveryonesOnOneTeam.html", ["everyones", "on", "one", "team"], "ECannotStartMatchReason");
addToContainers_enumValue("SlotsNotLocked", "Lobby slots are not locked", "Docs/Enums/ECannotStartMatchReason/Values/SlotsNotLocked.html", ["slots", "not", "locked"], "ECannotStartMatchReason");
addToContainers_enumValue("NoReason", "No reason, can actually start match", "Docs/Enums/ECannotStartMatchReason/Values/NoReason.html", ["no", "reason"], "ECannotStartMatchReason");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/ECannotStartMatchReason/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECannotStartMatchReason");
addToContainers_enum("EPlayerStartDisplay", "", "Docs/Enums/EPlayerStartDisplay/EPlayerStartDisplay.html", ["player", "start", "display"], "");
addToContainers_enumValue("FString", "", "Docs/Enums/EPlayerStartDisplay/Values/FString.html", [], "EPlayerStartDisplay");
addToContainers_enumValue("const;", "", "Docs/Enums/EPlayerStartDisplay/Values/const;.html", [], "EPlayerStartDisplay");
addToContainers_enum("EWidgetAnimStatus", "", "Docs/Enums/EWidgetAnimStatus/EWidgetAnimStatus.html", ["widget", "anim", "status"], "");
addToContainers_enumValue("NoAnims", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EWidgetAnimStatus/Values/NoAnims.html", ["no", "anims"], "EWidgetAnimStatus");
addToContainers_enumValue("ShowAnimOnly", "", "Docs/Enums/EWidgetAnimStatus/Values/ShowAnimOnly.html", ["show", "anim", "only"], "EWidgetAnimStatus");
addToContainers_enumValue("HideAnimOnly", "", "Docs/Enums/EWidgetAnimStatus/Values/HideAnimOnly.html", ["hide", "anim", "only"], "EWidgetAnimStatus");
addToContainers_enumValue("ShowAndHideAnims", "", "Docs/Enums/EWidgetAnimStatus/Values/ShowAndHideAnims.html", ["show", "and", "hide", "anims"], "EWidgetAnimStatus");
addToContainers_enumValue("SingleAnim", "", "Docs/Enums/EWidgetAnimStatus/Values/SingleAnim.html", ["single", "anim"], "EWidgetAnimStatus");
addToContainers_enum("", "", "Docs/Enums/_12/.html", [], "");
addToContainers_enumValue("EscapeRequest", "Player pressed the cancel key which is ESC by default", "Docs/Enums/_12/Values/EscapeRequest.html", ["escape", "request"], "");
addToContainers_enumValue("ButtonWidget", "Player clicked on a UI button", "Docs/Enums/_12/Values/ButtonWidget.html", ["button", "widget"], "");
addToContainers_enum("ECloseRequestBehavior", "", "Docs/Enums/ECloseRequestBehavior/ECloseRequestBehavior.html", ["close", "request", "behavior"], "");
addToContainers_enumValue("DoNotSave", "Load from disk and apply those, so any unsaved changes are not saved", "Docs/Enums/ECloseRequestBehavior/Values/DoNotSave.html", ["do", "not", "save"], "ECloseRequestBehavior");
addToContainers_enumValue("Save", "Apply unsaved changes and save them to disk", "Docs/Enums/ECloseRequestBehavior/Values/Save.html", [], "ECloseRequestBehavior");
addToContainers_enumValue("Ask", "Ask the user what to do", "Docs/Enums/ECloseRequestBehavior/Values/Ask.html", [], "ECloseRequestBehavior");
addToContainers_enumValue("Ask", "Ask the user what to do", "Docs/Enums/ECloseRequestBehavior/Values/Ask.html", [], "ECloseRequestBehavior");
addToContainers_enum("ESettingsSubmenuType", "", "Docs/Enums/ESettingsSubmenuType/ESettingsSubmenuType.html", ["settings", "submenu", "type"], "");
addToContainers_enumValue("VideoSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/VideoSettings.html", ["video", "settings"], "ESettingsSubmenuType");
addToContainers_enumValue("AudioSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/AudioSettings.html", ["audio", "settings"], "ESettingsSubmenuType");
addToContainers_enumValue("ControlSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/ControlSettings.html", ["control", "settings"], "ESettingsSubmenuType");
addToContainers_enumValue("KeyBindings", "", "Docs/Enums/ESettingsSubmenuType/Values/KeyBindings.html", ["key", "bindings"], "ESettingsSubmenuType");
addToContainers_enumValue("GameSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/GameSettings.html", ["game", "settings"], "ESettingsSubmenuType");
addToContainers_enum("EVideoSettingType", "", "Docs/Enums/EVideoSettingType/EVideoSettingType.html", ["video", "setting", "type"], "");
addToContainers_enumValue("None", "Not a value that should ever be used", "Docs/Enums/EVideoSettingType/Values/None.html", [], "EVideoSettingType");
addToContainers_enumValue("WindowMode", "", "Docs/Enums/EVideoSettingType/Values/WindowMode.html", ["window", "mode"], "EVideoSettingType");
addToContainers_enumValue("Resolution", "", "Docs/Enums/EVideoSettingType/Values/Resolution.html", [], "EVideoSettingType");
addToContainers_enumValue("FrameRateLimit", "", "Docs/Enums/EVideoSettingType/Values/FrameRateLimit.html", ["frame", "rate", "limit"], "EVideoSettingType");
addToContainers_enumValue("VSync", "", "Docs/Enums/EVideoSettingType/Values/VSync.html", [], "EVideoSettingType");
addToContainers_enumValue("OverallQuality", "", "Docs/Enums/EVideoSettingType/Values/OverallQuality.html", ["overall", "quality"], "EVideoSettingType");
addToContainers_enumValue("ShadowQuality", "", "Docs/Enums/EVideoSettingType/Values/ShadowQuality.html", ["shadow", "quality"], "EVideoSettingType");
addToContainers_enumValue("TextureQuality", "", "Docs/Enums/EVideoSettingType/Values/TextureQuality.html", ["texture", "quality"], "EVideoSettingType");
addToContainers_enumValue("AntiAliasingQuality", "", "Docs/Enums/EVideoSettingType/Values/AntiAliasingQuality.html", ["anti", "aliasing", "quality"], "EVideoSettingType");
addToContainers_enumValue("ViewDistanceQuality", "", "Docs/Enums/EVideoSettingType/Values/ViewDistanceQuality.html", ["view", "distance", "quality"], "EVideoSettingType");
addToContainers_enumValue("VisualEffectQuality", "", "Docs/Enums/EVideoSettingType/Values/VisualEffectQuality.html", ["visual", "effect", "quality"], "EVideoSettingType");
addToContainers_enumValue("PostProcessingQuality", "", "Docs/Enums/EVideoSettingType/Values/PostProcessingQuality.html", ["post", "processing", "quality"], "EVideoSettingType");
addToContainers_enumValue("FoliageQuality", "", "Docs/Enums/EVideoSettingType/Values/FoliageQuality.html", ["foliage", "quality"], "EVideoSettingType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EVideoSettingType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EVideoSettingType");

//------------------------------------------------
// ------- Trie Implementation -------
//------------------------------------------------
//	Trie implementation for the search box suggestions

/**
 *	A single node in a trie
 */
class TrieNode
{
	constructor()
	{
		// The letter attached to this node. Only the root node should keep this empty
		this.letter = "";
		// Whether this node is the last letter of a word
		this.bIsWord = false;
		// if bIsWord == true then this equals the word
		this.word = "";
		// Child nodes
		this.children = [];
	}
};

TrieNode.prototype.recursiveFindChildThenAdd = function(str, index)
{
	// Check if at end of string
	if (index == str.length)
	{
		this.bIsWord = true;
		this.word = str;
		return;
	}

	for (var i = 0; i < this.children.length; ++i)
	{
		if (this.children[i].letter == str.charAt(index))
		{
			if (index >= str.length)
			{
				console.error("recursiveFindChildThenAdd(): index >= str.length");
			}

			index++;
			this.children[i].recursiveFindChildThenAdd(str, index);
			return;
		}
	}

	/* If here then none of the children had the letter. Create a new node with the letter */
	var newNode = new TrieNode();
	newNode.letter = str.charAt(index);
	this.children.push(newNode);

	index++;
	newNode.recursiveFindChildThenAdd(str, index);
};

/** Add a word to the trie. This is intended to be called on the root node */
TrieNode.prototype.insert = function(str)
{
	this.recursiveFindChildThenAdd(str, 0);
};

/**
 * Get words in the trie that prefix a string
 *
 * @param str - string to get words for
 * @param index - current position in str
 * @param words - array of words that str is a prefix for
 */
TrieNode.prototype.recursiveGetPrefixedWords = function(str, index, words)
{
	index++;
	/* Check if this node is a word and it is the same or greater length than str. If yes then add it */
	if (this.bIsWord == true && str.length <= index)
	{
		words.push(this.word);
	}

	if (str.length <= index)
	{
		for (var i = 0; i < this.children.length; ++i)
		{
			this.children[i].recursiveGetPrefixedWords(str, index, words);
		}
	}
	else
	{
		for (var i = 0; i < this.children.length; ++i)
		{
			if (this.children[i].letter.toLowerCase() == str.charAt(index).toLowerCase())
			{
				this.children[i].recursiveGetPrefixedWords(str, index, words);
				/* Have commented this return. Reason is the search is case insensitive so if user types "a"
				then the entry "apple" and "Apple" are both possibilities so cannot return since one might
				get skipped */
				//return;
			}
		}
	}
};


/** Class declaration: a trie. Contains a hashset and a root node */
class Trie
{
	constructor()
	{
		// Should I be using new here? Or is there a better way?

		// A container that holds all the words in the trie
		this.wordsSet = new Set();
		// The root node of the trie
		this.RootNode = new TrieNode();
	}
};


/**
 * Check whether a string has already been added to the trie
 *
 *	@return - true if the string has already been added to the trie.
 */
Trie.prototype.contains = function(str)
{
	return this.wordsSet.has(str);
};

/**
 * Try add a string to the trie
 *
 * @param str - the string to add to the trie
 */
Trie.prototype.insert = function(str)
{
	if (str.length == 0)
	{
		// Avoid adding empty string
		return;
	}

	if (this.contains(str))
	{
		// Avoid adding string if it's already in the trie
		return;
	}

	this.RootNode.insert(str);
	this.wordsSet.add(str);
};

/**
 * Return all the words in the trie that have str as a prefix
 *
 * @param str - prefix string
 * @return - array of words that have str as a prefix
 */
Trie.prototype.getPrefixedWords = function(str)
{
	var words = [];

	if (str.length == 0)
	{
		return words;
	}

	this.RootNode.recursiveGetPrefixedWords(str, -1, words);

	return words;
};

// ------------- End trie implementaion ---------------


// The trie for search suggestions for the search box on the documentation homepage
var searchTrie = new Trie();

searchTrie.insert("UFogObeyingAudioComponent");
searchTrie.insert("UFogObeyingAudioComponent");
searchTrie.insert("SavedVolumeMultiplier");
searchTrie.insert("bMuted");
searchTrie.insert("bInContainer");
searchTrie.insert("FogObeyingRule");
searchTrie.insert("URTSUnrealEdEngine");
searchTrie.insert("FAtLeastOneInt32");
searchTrie.insert("FAtLeastOneInt32");
searchTrie.insert("");
searchTrie.insert("FUnitTypeArray");
searchTrie.insert("Array");
searchTrie.insert("FBuildingTypeArray");
searchTrie.insert("Array");
searchTrie.insert("FButtonArray");
searchTrie.insert("Buttons");
searchTrie.insert("FRankInfo");
searchTrie.insert("FRankInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AFactionInfo");
searchTrie.insert("AFactionInfo");
searchTrie.insert("");
searchTrie.insert("Faction");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UpgradesResearchableThroughBuildings");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MouseCursor_Info");
searchTrie.insert("EdgeScrollingCursor_Infos[8]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredHostileUnit_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredHostileUnit_Info");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredFriendlyUnit_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredFriendlyUnit_Info");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredHostileBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredHostileBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredFriendlyBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredFriendlyBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CanPickUpHoveredInventoryItem_Info");
searchTrie.insert("DefaultMouseCursor_CannotPickUpHoveredInventoryItem_Info");
searchTrie.insert("DefaultMouseCursor_CanGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]");
searchTrie.insert("DefaultMouseCursor_CannotGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("LargestContextMenu");
searchTrie.insert("LargestProductionQueueCapacity");
searchTrie.insert("LargestBuildingGarrisonSlotCapacity");
searchTrie.insert("MaxNumberOfShopItemsOnAShop");
searchTrie.insert("MaxUnitInventoryCapacity");
searchTrie.insert("Info2)");
searchTrie.insert("");
searchTrie.insert("URTSGameInstance");
searchTrie.insert("URTSGameInstance");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsInitializingFactionInfo");
searchTrie.insert("bHasInitialized");
searchTrie.insert("bHasSpawnedInfoActors");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MenuMouseCursor_Info");
searchTrie.insert("DefaultAbilityCursor_Default_Info");
searchTrie.insert("DefaultAbilityCursor_AcceptableTarget_Info");
searchTrie.insert("DefaultAbilityCursor_UnacceptableTarget_Info");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("LeaveOnMapList");
searchTrie.insert("LargestShopCatalogueSize");
searchTrie.insert("LargestInventoryCapacity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("WidgetTransitionFunction");
searchTrie.insert("WidgetToShow");
searchTrie.insert("NumWidgetsBack");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SessionSettings");
searchTrie.insert("LobbyPassword");
searchTrie.insert("PendingSessionSettings");
searchTrie.insert("bIsColdBooting");
searchTrie.insert("bIsInMainMenuMap");
searchTrie.insert("MatchInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("EditorPlaySettingsWidget");
searchTrie.insert("FMinimalPlayerInfo");
searchTrie.insert("FMinimalPlayerInfo");
searchTrie.insert("FMinimalPlayerInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPIESelectableLoggingInfo");
searchTrie.insert("FPIESelectableLoggingInfo");
searchTrie.insert("FPIESelectableLoggingInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPIEStartingSelectableInfo");
searchTrie.insert("FPIEStartingSelectableInfo");
searchTrie.insert("FPIEStartingSelectableInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingType");
searchTrie.insert("UnitType");
searchTrie.insert("FNewPlayerDefaultValues");
searchTrie.insert("FNewPlayerDefaultValues");
searchTrie.insert("FNewPlayerDefaultValues");
searchTrie.insert("");
searchTrie.insert("ARTSGameMode");
searchTrie.insert("ARTSGameMode");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumPIEClients");
searchTrie.insert("NumPIECPUPlayers");
searchTrie.insert("");
searchTrie.insert("NeutralSelectables");
searchTrie.insert("DefeatCondition");
searchTrie.insert("DefeatFunctions[Statics::NUM_DEFEAT_CONDITIONS]");
searchTrie.insert("");
searchTrie.insert("TimerHandle_DefeatCondition");
searchTrie.insert("FResourcesArray");
searchTrie.insert("Array");
searchTrie.insert("FAudioComponentContainer");
searchTrie.insert("Map");
searchTrie.insert("");
searchTrie.insert("ARTSGameState");
searchTrie.insert("ARTSGameState");
searchTrie.insert("AccumulatedTimeTowardsNextGameTick");
searchTrie.insert("");
searchTrie.insert("Server_SelectableResourceUsersThatRegen");
searchTrie.insert("PreviousTickCounterValue");
searchTrie.insert("Client_SelectableResourceUsersThatRegen");
searchTrie.insert("TimeWhenMatchStarted");
searchTrie.insert("NextUniquePlayerID");
searchTrie.insert("LocalPlayersTeam");
searchTrie.insert("NumTeams");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("EnemyQueryParams");
searchTrie.insert("NeutralTraceChannel");
searchTrie.insert("AllTeamsQueryParams");
searchTrie.insert("AllTeams_Overlap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CurrentInventoryItemUniqueID");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("PIE_NumPCSetupCompleteAcks");
searchTrie.insert("PIE_NumPSSetInitialValuesAcks");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ExpectedNumHumanPlayers");
searchTrie.insert("ExpectedNumPlayers");
searchTrie.insert("NumPCSetupAcks");
searchTrie.insert("NumLoadedLevelAcks");
searchTrie.insert("NumInitialValueAcks");
searchTrie.insert("NumFinalSetupAcks");
searchTrie.insert("NumLevelsStreamedOut");
searchTrie.insert("bHasStreamedInMatchLevel");
searchTrie.insert("bHasAckedPostLoginsAndMaps");
searchTrie.insert("URTSLocalPlayer");
searchTrie.insert("URTSLocalPlayer");
searchTrie.insert("");
searchTrie.insert("FCtrlGroupList");
searchTrie.insert("");
searchTrie.insert("FTryBindActionResult");
searchTrie.insert("FTryBindActionResult");
searchTrie.insert("KeyWeAreTryingToAssign");
searchTrie.insert("AlreadyBoundToKey_Axis");
searchTrie.insert("AlreadyBoundToKey_Action[8]");
searchTrie.insert("Warning");
searchTrie.insert("ARTSPlayerController");
searchTrie.insert("ARTSPlayerController");
searchTrie.insert("");
searchTrie.insert("TeamTag");
searchTrie.insert("Team");
searchTrie.insert("Type");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HoveredUIElement");
searchTrie.insert("HighlightedButton");
searchTrie.insert("HoveredUserWidget");
searchTrie.insert("AccumulatedTimeSpentHoveringUIElement");
searchTrie.insert("TimeSpentNotHoveringUIElement");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("AccumulatedTimeSpentHoveringSelectable");
searchTrie.insert("TimeSpentNotHoveringSelectable");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Faction");
searchTrie.insert("");
searchTrie.insert("PendingKeyRebind_Action");
searchTrie.insert("PendingKeyRebind_Axis");
searchTrie.insert("PendingKeyRebind_bWaitingForConfirmation");
searchTrie.insert("PendingKeyRebind_PressedModifierFlags_Left");
searchTrie.insert("PendingKeyRebind_PressedModifierFlags_Right");
searchTrie.insert("PendingKeyRebind_KeyBindingsWidget");
searchTrie.insert("PendingKeyRebind_TimeSpentTryingToCancel");
searchTrie.insert("");
searchTrie.insert("LastSelectControlGroupButtonReleased");
searchTrie.insert("LastSelectControlGroupButtonReleaseTime");
searchTrie.insert("bWasLastSelectControlGroupButtonPressADoublePress");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bNeedToRecordGhostLocOnNextTick");
searchTrie.insert("bIsGhostRotationActive");
searchTrie.insert("GhostScreenSpaceLoc");
searchTrie.insert("GhostRotationRadius");
searchTrie.insert("GhostRotationSpeed");
searchTrie.insert("GhostRotationDirection");
searchTrie.insert("GhostAccumulatedMovementTowardsDirection");
searchTrie.insert("bIsCameraFreeLookEnabled");
searchTrie.insert("MouseLocLastFrame");
searchTrie.insert("MouseLocThisFrame");
searchTrie.insert("MaxLineTraceDistance");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HitResult");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsLMBPressed");
searchTrie.insert("bWantsMarquee");
searchTrie.insert("bIsMarqueeActive");
searchTrie.insert("ButtonPressedOnLMBPressed");
searchTrie.insert("ButtonPressedOnRMBPressed");
searchTrie.insert("MouseMovement");
searchTrie.insert("MouseMovementThreshold");
searchTrie.insert("PlayerID");
searchTrie.insert("");
searchTrie.insert("DefaultCursor");
searchTrie.insert("ScreenLocationCurrentCursor");
searchTrie.insert("CurrentCursor");
searchTrie.insert("");
searchTrie.insert("PendingContextAction");
searchTrie.insert("PendingContextActionUseMethod");
searchTrie.insert("GhostInstigatorID");
searchTrie.insert("PendingContextActionAuxilleryData");
searchTrie.insert("PendingContextActionMoreAuxilleryData");
searchTrie.insert("bHasPrimarySelectedChanged");
searchTrie.insert("PendingContextActionAuxilleryDataPtr");
searchTrie.insert("PendingCommanderAbility");
searchTrie.insert("TimeOfLastSelection_Owned");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bShowingUIButtonPressedImage");
searchTrie.insert("UNKNOWN_PLAYER_NAME");
searchTrie.insert("LobbySlotIndex");
searchTrie.insert("CameraMoveSpeed");
searchTrie.insert("CameraEdgeMoveSpeed");
searchTrie.insert("CameraEdgeThreshold");
searchTrie.insert("CameraZoomIncrementalAmount");
searchTrie.insert("");
searchTrie.insert("CameraZoomSpeed");
searchTrie.insert("NumPendingScrollZooms");
searchTrie.insert("DefaultCameraRotation");
searchTrie.insert("DefaultCameraZoomAmount");
searchTrie.insert("ResetCameraCurve");
searchTrie.insert("ResetCameraToDefaultRate");
searchTrie.insert("ViewportSize_Y");
searchTrie.insert("bIsForwardBackwardCameraMovementKeyPressed");
searchTrie.insert("bIsResettingCameraRotation");
searchTrie.insert("MouseWheelZoomCurveAccumulatedTime");
searchTrie.insert("MouseWheelZoomCurveMax");
searchTrie.insert("bIsResettingCameraZoom");
searchTrie.insert("ResetCameraCurveAccumulatedTime");
searchTrie.insert("ResetCameraCurveMax");
searchTrie.insert("StartResetRotation");
searchTrie.insert("TargetResetRotation");
searchTrie.insert("StartZoomAmount");
searchTrie.insert("TargetZoomAmount");
searchTrie.insert("");
searchTrie.insert("Development_bIsLMBPressed");
searchTrie.insert("DevelopmentInputIntercept_LMBPress");
searchTrie.insert("DevelopmentInputIntercept_LMBRelease");
searchTrie.insert("DevelopmentInputIntercept_RMBPress");
searchTrie.insert("DevelopmentWidgetAuxilleryData");
searchTrie.insert("FUpgradeTypeArray");
searchTrie.insert("FUpgradeTypeArray");
searchTrie.insert("Array");
searchTrie.insert("FBuildingSet");
searchTrie.insert("");
searchTrie.insert("FBuildingArray");
searchTrie.insert("");
searchTrie.insert("ARTSPlayerState");
searchTrie.insert("ARTSPlayerState");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingGarrisonNetworkInfos");
searchTrie.insert("");
searchTrie.insert("NumUnspentSkillPoints");
searchTrie.insert("Rank");
searchTrie.insert("AllCommanderSkillTreeNodes");
searchTrie.insert("CommanderAbilityToNodeType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AquiredCommanderAbilitiesTMap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bBelongsToLocalPlayer");
searchTrie.insert("bHasBeenDefeated");
searchTrie.insert("");
searchTrie.insert("IDAsInt");
searchTrie.insert("");
searchTrie.insert("Team");
searchTrie.insert("");
searchTrie.insert("Affiliation");
searchTrie.insert("Faction");
searchTrie.insert("StartingSpot");
searchTrie.insert("StartLocation");
searchTrie.insert("");
searchTrie.insert("NumQueuedSelectables");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingTypeToMissingUpgradePrereqs");
searchTrie.insert("UnitTypeToMissingUpgradePrereqs");
searchTrie.insert("UpgradeTypeToMissingUpgradePrereqs");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("IDQueue");
searchTrie.insert("IDQueueNum");
searchTrie.insert("");
searchTrie.insert("TimerHandle_GameWarning");
searchTrie.insert("FSelectableRootComponent2DShapeInfo");
searchTrie.insert("FSelectableRootComponent2DShapeInfo");
searchTrie.insert("FSelectableRootComponent2DShapeInfo");
searchTrie.insert("Data");
searchTrie.insert("ISelectable");
searchTrie.insert("ABuffAndDebuffManager");
searchTrie.insert("ABuffAndDebuffManager");
searchTrie.insert("ACPUControllerTickManager");
searchTrie.insert("ACPUControllerTickManager");
searchTrie.insert("NUM_CONTROLLER_ARRAY_ENTRIES");
searchTrie.insert("Index");
searchTrie.insert("AIControllers");
searchTrie.insert("NumAIControllers");
searchTrie.insert("FTileArray");
searchTrie.insert("");
searchTrie.insert("FIntegerArray");
searchTrie.insert("FIntegerArray");
searchTrie.insert("FIntegerArray");
searchTrie.insert("");
searchTrie.insert("AFogOfWarManager");
searchTrie.insert("AFogOfWarManager");
searchTrie.insert("NumTeams");
searchTrie.insert("LocalPlayersTeam");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamTempRevealEffects");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MapCenter");
searchTrie.insert("MapDimensions");
searchTrie.insert("MapTileDimensions");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TextureBuffer");
searchTrie.insert("FogTexture");
searchTrie.insert("TextureRegions");
searchTrie.insert("MapDimensionsInverse");
searchTrie.insert("UHeavyTaskManager");
searchTrie.insert("NUM_BUILDING_ATTACK_COMP_BUCKETS");
searchTrie.insert("CurrentBuildingAttackCompBucketForTick");
searchTrie.insert("BuildingAttackComps[NUM_BUILDING_ATTACK_COMP_BUCKETS]");
searchTrie.insert("BuildingAttackComp_TurretData");
searchTrie.insert("BuildingAttackComp_TurretData");
searchTrie.insert("AttackComponent");
searchTrie.insert("TraceDelegate");
searchTrie.insert("QueryParams");
searchTrie.insert("Location");
searchTrie.insert("SweepRadius");
searchTrie.insert("Array_BuildingAttackComp_TurretData");
searchTrie.insert("Array");
searchTrie.insert("FTaskManagerBucketInfo");
searchTrie.insert("FTaskManagerBucketInfo");
searchTrie.insert("FTaskManagerBucketInfo");
searchTrie.insert("BucketIndex");
searchTrie.insert("ArrayIndex");
searchTrie.insert("MultithreadedFogOfWarManager");
searchTrie.insert("FogManager");
searchTrie.insert("TextureBuffer");
searchTrie.insert("RecentlyCreatedBuildings[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("RecentlyModifiedBuildings[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("RecentlyDestroyedBuildings[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TeamsInfantry[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("RecentlyCreatedTemporaryRevealEffects[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TilesArrays[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TeamVisibilityInfo[ProjectSettings::MAX_NUM_TEAMS][ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("LocalPlayersTeamIndex");
searchTrie.insert("NumTeams");
searchTrie.insert("ServerIdleThreads");
searchTrie.insert("ClientIdleThreads");
searchTrie.insert("TeamProgress[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TeamTilesShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("InfantryStatesShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("BuildingStatesShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TemporaryRevealEffectsShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("InfantryStatesBasicShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("DestroyedBuildingsShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("VisibilityInfoShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("DeltaTime");
searchTrie.insert("DeltaTimeNotThreadSafe");
searchTrie.insert("MapTileDimensions");
searchTrie.insert("MapCenter");
searchTrie.insert("MapDimensionsInverse");
searchTrie.insert("FogTexture");
searchTrie.insert("TextureRegions");
searchTrie.insert("FogOfWarMaterialInstance");
searchTrie.insert("ServerFogOfWarThread");
searchTrie.insert("ServerFogOfWarThread");
searchTrie.insert("ClientFogOfWarThread");
searchTrie.insert("ClientFogOfWarThread");
searchTrie.insert("FogLock");
searchTrie.insert("LockObject");
searchTrie.insert("CalculationProgress");
searchTrie.insert("CalculationProgress");
searchTrie.insert("Lock");
searchTrie.insert("NextTask");
searchTrie.insert("NextTeamIndexForStoringSelectableVisibilityInfo");
searchTrie.insert("JobQueue");
searchTrie.insert("BitField");
searchTrie.insert("TilesArray_NoLock");
searchTrie.insert("Array");
searchTrie.insert("ServerThreadArray");
searchTrie.insert("Array");
searchTrie.insert("Lock");
searchTrie.insert("ClientThreadArray");
searchTrie.insert("Array");
searchTrie.insert("Lock");
searchTrie.insert("InfantryFogInfo");
searchTrie.insert("InfantryFogInfo");
searchTrie.insert("WorldLocation");
searchTrie.insert("SightRadius");
searchTrie.insert("StealthRevealRadius");
searchTrie.insert("BuildingFogInfo");
searchTrie.insert("BuildingFogInfo");
searchTrie.insert("WorldLocation");
searchTrie.insert("SightRadius");
searchTrie.insert("StealthRevealRadius");
searchTrie.insert("SelectableID");
searchTrie.insert("FogStatus");
searchTrie.insert("FogLocationsIndices");
searchTrie.insert("InfantryFogInfoArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("InfantryFogInfoBasic");
searchTrie.insert("InfantryFogInfoBasic");
searchTrie.insert("WorldLocation");
searchTrie.insert("SelectableID");
searchTrie.insert("FogStatus");
searchTrie.insert("InfantryFogInfoFinal");
searchTrie.insert("TilesFogStatus");
searchTrie.insert("InfantryArray");
searchTrie.insert("Array");
searchTrie.insert("InfantryFogInfoBasicArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("BuildingFogInfoArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("BuildingFogInfoArrayBasic");
searchTrie.insert("Array");
searchTrie.insert("SelectableIDArray");
searchTrie.insert("Array");
searchTrie.insert("DestroyedBuildingArray");
searchTrie.insert("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]");
searchTrie.insert("TempRevealEffectArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("TempRevealEffectArray_NoLock");
searchTrie.insert("Array");
searchTrie.insert("TeamVisibilityInfoStruct");
searchTrie.insert("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]");
searchTrie.insert("ArrayLock");
searchTrie.insert("TilesArray");
searchTrie.insert("Array");
searchTrie.insert("Lock");
searchTrie.insert("FSuggestProjectileVelocityEntry");
searchTrie.insert("FSuggestProjectileVelocityEntry");
searchTrie.insert("StartLocation");
searchTrie.insert("TargetLocation");
searchTrie.insert("Distance");
searchTrie.insert("FSuggestProjectileVelocityEntryContainer");
searchTrie.insert("FSuggestProjectileVelocityEntryContainer");
searchTrie.insert("Array");
searchTrie.insert("MAX_CONTAINER_ENTRIES");
searchTrie.insert("FProjectileArray");
searchTrie.insert("FProjectileArray");
searchTrie.insert("FProjectileArray");
searchTrie.insert("");
searchTrie.insert("AObjectPoolingManager");
searchTrie.insert("AObjectPoolingManager");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CurrentFrameNumber");
searchTrie.insert("NumProjectilesSpawnedThisFrame");
searchTrie.insert("WorstProjectileFrame");
searchTrie.insert("WorstProjectileFrameNumber");
searchTrie.insert("SuggestProjectileVelocityFails");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bHasCreatedPools");
searchTrie.insert("FUpgradeTypeArrayPtrArray");
searchTrie.insert("Array");
searchTrie.insert("FUpgradeArray");
searchTrie.insert("");
searchTrie.insert("AUpgradeManager");
searchTrie.insert("AUpgradeManager");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TotalNumUpgradesResearched");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HasUpgradePrerequisite_Buildings");
searchTrie.insert("HasUpgradePrerequisite_Units");
searchTrie.insert("HasUpgradePrerequisite_Upgrades");
searchTrie.insert("bHasInited");
searchTrie.insert("FBuildingAnimState");
searchTrie.insert("FBuildingAnimState");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildingAnimPauseInfo");
searchTrie.insert("FBuildingAnimPauseInfo");
searchTrie.insert("StartTime");
searchTrie.insert("AnimationType");
searchTrie.insert("FConstructionProgressInfo");
searchTrie.insert("FConstructionProgressInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ABuilding");
searchTrie.insert("ABuilding");
searchTrie.insert("TimeToSpendSinking");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BeingWorkedOnAudioComp");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bHasRunOnConstructionCompleteLogic");
searchTrie.insert("");
searchTrie.insert("PausedAnimInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeIntoZeroHealthAnimThatAnimNotifyIs");
searchTrie.insert("HealthWhileUnderConstruction");
searchTrie.insert("DamageTakenWhileUnderConstruction");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HealthGainRate");
searchTrie.insert("SpawnLocation");
searchTrie.insert("");
searchTrie.insert("bIsBeingBuiltParticlesRunning");
searchTrie.insert("bRiseFromGround");
searchTrie.insert("TimeSpentBuilding");
searchTrie.insert("Building2)");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("TimeSpentSinking");
searchTrie.insert("TimerHandle_Destroy");
searchTrie.insert("BoundsHeight");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AGhostBuilding");
searchTrie.insert("AGhostBuilding");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Type");
searchTrie.insert("bIsAtBuildableLocation");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PlayersDefaultYawRot");
searchTrie.insert("FInfantryGarrisonStatus");
searchTrie.insert("FInfantryGarrisonStatus");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AInfantry");
searchTrie.insert("AInfantry");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bStartedInMap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PreviousHeldResourceType");
searchTrie.insert("HeldResourceAmount");
searchTrie.insert("Rank");
searchTrie.insert("PreviousRank");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("TimerHandle_ReenterStealth");
searchTrie.insert("");
searchTrie.insert("ClientPreviousGarrisonStatus");
searchTrie.insert("");
searchTrie.insert("RangeSquared");
searchTrie.insert("");
searchTrie.insert("MoveAnimPlayRate");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingSpawnedFrom");
searchTrie.insert("BarracksRallyLoc");
searchTrie.insert("AInventoryItem");
searchTrie.insert("AInventoryItem");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SelectionParticlesTemplate");
searchTrie.insert("RightClickParticlesTemplate");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumItemCharges");
searchTrie.insert("");
searchTrie.insert("ItemInfo");
searchTrie.insert("Attributes");
searchTrie.insert("SelectionDecalInfo");
searchTrie.insert("AInventoryItem_SM");
searchTrie.insert("AInventoryItem_SM");
searchTrie.insert("");
searchTrie.insert("AInventoryItem_SK");
searchTrie.insert("AInventoryItem_SK");
searchTrie.insert("");
searchTrie.insert("AResourceSpot");
searchTrie.insert("AResourceSpot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsLocalPlayerObserver");
searchTrie.insert("bIsMouseHovering");
searchTrie.insert("CurrentAmount");
searchTrie.insert("");
searchTrie.insert("SelectionDecalInfo");
searchTrie.insert("");
searchTrie.insert("ARTSPlayerStart");
searchTrie.insert("ARTSPlayerStart");
searchTrie.insert("UniqueID");
searchTrie.insert("AAbilityBase");
searchTrie.insert("AAbilityBase");
searchTrie.insert("");
searchTrie.insert("bHasMultipleOutcomes");
searchTrie.insert("bCallAoEStartFunction");
searchTrie.insert("bAoEHitsHaveMultipleOutcomes");
searchTrie.insert("bRequiresTargetOtherThanSelf");
searchTrie.insert("bRequiresLocation");
searchTrie.insert("bHasRandomBehavior");
searchTrie.insert("bRequiresTickCount");
searchTrie.insert("AAbility_AoEBuffOrDebuff");
searchTrie.insert("AAbility_AoEBuffOrDebuff");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_AoEDamage");
searchTrie.insert("AAbility_AoEDamage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_ApplyBuffDebuffToTarget");
searchTrie.insert("AAbility_ApplyBuffDebuffToTarget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FArtilleryStrikeInfo");
searchTrie.insert("FArtilleryStrikeInfo");
searchTrie.insert("FArtilleryStrikeInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Instigator");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_ArtilleryStrike");
searchTrie.insert("AAbility_ArtilleryStrike");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BeaconProjectileDamageInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("RotationCurveMaxY");
searchTrie.insert("DistanceCurveMaxY");
searchTrie.insert("AAbility_BasicApplyBuffOrDebuff");
searchTrie.insert("AAbility_BasicApplyBuffOrDebuff");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_BasicSingleTargetDamage");
searchTrie.insert("AAbility_BasicSingleTargetDamage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_BuffAndDebuffRemoval");
searchTrie.insert("AAbility_BuffAndDebuffRemoval");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_CullingBladeClone");
searchTrie.insert("AAbility_CullingBladeClone");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_DamageAndRestoreMana");
searchTrie.insert("AAbility_DamageAndRestoreMana");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_FinishingBlow");
searchTrie.insert("AAbility_FinishingBlow");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_ManaBurn");
searchTrie.insert("AAbility_ManaBurn");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_Nuke");
searchTrie.insert("AAbility_Nuke");
searchTrie.insert("PoolingManager");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FOngoingAoEDamageInstance");
searchTrie.insert("FOngoingAoEDamageInstance");
searchTrie.insert("FOngoingAoEDamageInstance");
searchTrie.insert("AbilityEpicenter");
searchTrie.insert("AbilityInstigator");
searchTrie.insert("TimerHandle_DoDamageTick");
searchTrie.insert("NumTicksRemaining");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("AAbility_OngoingAoEDamage");
searchTrie.insert("AAbility_OngoingAoEDamage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_Scan");
searchTrie.insert("AAbility_Scan");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AInfantryController");
searchTrie.insert("AInfantryController");
searchTrie.insert("LastCompletedMoveResult");
searchTrie.insert("TickFunctions");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AccumulatedTickBehaviorTime");
searchTrie.insert("TimeTillAttackResets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CharacterMovement");
searchTrie.insert("UnitState");
searchTrie.insert("AnimStateForBehavior");
searchTrie.insert("ClickLocation");
searchTrie.insert("LeashLocation");
searchTrie.insert("EncounterPoint");
searchTrie.insert("TeamVisInfo");
searchTrie.insert("");
searchTrie.insert("AttackTargetBoundsLength");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ContextActionTargetBoundsLength");
searchTrie.insert("bIgnoreLookingAtFocus");
searchTrie.insert("bUnitHasAttack");
searchTrie.insert("bCanUnitBuildBuildings");
searchTrie.insert("TimerHandle_TargetAquiring");
searchTrie.insert("bIsTargetStillInRange");
searchTrie.insert("DoOnMoveComplete");
searchTrie.insert("PendingContextAction");
searchTrie.insert("PendingContextActionType");
searchTrie.insert("PendingAbilityUsageCase");
searchTrie.insert("PendingAbilityAuxilleryData");
searchTrie.insert("PendingAbilityMoreAuxilleryData");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_ResourceGathering");
searchTrie.insert("");
searchTrie.insert("FoundationType");
searchTrie.insert("FoundationRotation");
searchTrie.insert("Range");
searchTrie.insert("LenienceRange");
searchTrie.insert("AttackFacingRotationRequirement");
searchTrie.insert("UBuildingAnimInstance");
searchTrie.insert("");
searchTrie.insert("UInfantryAnimInstance");
searchTrie.insert("UInfantryAnimInstance");
searchTrie.insert("");
searchTrie.insert("UBuildingAttackComponent_SK");
searchTrie.insert("UBuildingAttackComponent_SK");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamVisibilityInfo");
searchTrie.insert("Target");
searchTrie.insert("OwningBuilding");
searchTrie.insert("GS");
searchTrie.insert("PoolingManager");
searchTrie.insert("TargetingTraceDelegate");
searchTrie.insert("TaskManagerBucket");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeSpentWarmingUpAttack");
searchTrie.insert("Team");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("QueryParams");
searchTrie.insert("");
searchTrie.insert("AttackCompUniqueID");
searchTrie.insert("RotatingBase");
searchTrie.insert("UBuildingAttackComponent_SM");
searchTrie.insert("UBuildingAttackComponent_SM");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamVisibilityInfo");
searchTrie.insert("Target");
searchTrie.insert("OwningBuilding");
searchTrie.insert("GS");
searchTrie.insert("PoolingManager");
searchTrie.insert("TargetingTraceDelegate");
searchTrie.insert("TaskManagerBucket");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeSpentWarmingUpAttack");
searchTrie.insert("Team");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("QueryParams");
searchTrie.insert("");
searchTrie.insert("AttackCompUniqueID");
searchTrie.insert("RotatingBase");
searchTrie.insert("UBuildingAttackCompStructBase_SK");
searchTrie.insert("UBuildingAttackCompStructBase_SK");
searchTrie.insert("OwningBuilding");
searchTrie.insert("TurretComp");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("");
searchTrie.insert("UBuildingAttackCompStructBase_SM");
searchTrie.insert("UBuildingAttackCompStructBase_SM");
searchTrie.insert("OwningBuilding");
searchTrie.insert("TurretComp");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("");
searchTrie.insert("IBuildingAttackComp_Turret");
searchTrie.insert("IBuildingAttackComp_TurretsBase");
searchTrie.insert("UMySphereComponent");
searchTrie.insert("UPitchChangeBuildingAttackComp_SK");
searchTrie.insert("UPitchChangeBuildingAttackComp_SK");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MIN_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert("MAX_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("1");
searchTrie.insert("UPitchChangeBuildingAttackComp_SM");
searchTrie.insert("UPitchChangeBuildingAttackComp_SM");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MIN_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert("MAX_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("1");
searchTrie.insert("UBuildingTurretCompAnimInstance");
searchTrie.insert("bIsOnServer");
searchTrie.insert("UBAbility_DealDamage");
searchTrie.insert("UBAbility_DealDamage");
searchTrie.insert("");
searchTrie.insert("UBAbility_StealResources");
searchTrie.insert("UBAbility_StealResources");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UBuildingTargetingAbilityBase");
searchTrie.insert("UAbility_SingleTargetBuffOrDebuff");
searchTrie.insert("UAbility_SingleTargetBuffOrDebuff");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UAbility_StealResources");
searchTrie.insert("UAbility_StealResources");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCAbility_Airstrike");
searchTrie.insert("UCAbility_Airstrike");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCAbility_AoEDamage");
searchTrie.insert("UCAbility_AoEDamage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UActiveArtilleryStrikeState");
searchTrie.insert("UActiveArtilleryStrikeState");
searchTrie.insert("EffectObject");
searchTrie.insert("PoolingManager");
searchTrie.insert("TimeTillStop");
searchTrie.insert("TimeTillSpawnNextProjectile");
searchTrie.insert("AbilityLocation");
searchTrie.insert("LastYawRot");
searchTrie.insert("RandomStream");
searchTrie.insert("bIsServer");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("NumProjectilesRemainingInSalvo");
searchTrie.insert("UCAbility_ArtilleryStrike");
searchTrie.insert("UCAbility_ArtilleryStrike");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBarrageProjectileInfo");
searchTrie.insert("FBarrageProjectileInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UActiveBarrageSingleSalvoTypeState");
searchTrie.insert("UActiveBarrageSingleSalvoTypeState");
searchTrie.insert("BarrageState");
searchTrie.insert("Info");
searchTrie.insert("TimeSpentAlive");
searchTrie.insert("TimeTillStop");
searchTrie.insert("TimeTillNextProjectileSpawn");
searchTrie.insert("CurrentSalvoLocation");
searchTrie.insert("NumProjectilesRemainingInSalvo");
searchTrie.insert("bNextProjectileIsFirstOfSalvo");
searchTrie.insert("ArrayIndex");
searchTrie.insert("FActiveBarrageState");
searchTrie.insert("FActiveBarrageState");
searchTrie.insert("FActiveBarrageState");
searchTrie.insert("RandomStream");
searchTrie.insert("TargetLocation");
searchTrie.insert("FirersOriginalLocation");
searchTrie.insert("Radius");
searchTrie.insert("RotationRate");
searchTrie.insert("UniqueID");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("");
searchTrie.insert("UCAbility_Barrage");
searchTrie.insert("UCAbility_Barrage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCAbility_ResearchUpgrade");
searchTrie.insert("UCAbility_ResearchUpgrade");
searchTrie.insert("");
searchTrie.insert("UCAbility_SingleTargetDamage");
searchTrie.insert("UCAbility_SingleTargetDamage");
searchTrie.insert("");
searchTrie.insert("UCommanderAbilityBase");
searchTrie.insert("UCommanderAbilityBase");
searchTrie.insert("GI");
searchTrie.insert("GS");
searchTrie.insert("PS");
searchTrie.insert("bHasMultipleOutcomes");
searchTrie.insert("bCallAoEStartFunction");
searchTrie.insert("bAoEHitsHaveMultipleOutcomes");
searchTrie.insert("bRequiresSelectableTarget");
searchTrie.insert("bRequiresPlayerTarget");
searchTrie.insert("bRequiresLocation");
searchTrie.insert("bHasRandomBehavior");
searchTrie.insert("bRequiresTickCount");
searchTrie.insert("bRequiresDirection");
searchTrie.insert("FWarthogAttackAttributes");
searchTrie.insert("FWarthogAttackAttributes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AWarthog");
searchTrie.insert("AWarthog");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AbilityUseLocation");
searchTrie.insert("Phase");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("GI");
searchTrie.insert("PoolingManager");
searchTrie.insert("");
searchTrie.insert("RandomStream");
searchTrie.insert("TimeSpentInPhase2AndPhase3");
searchTrie.insert("TimeBetweenShotsCurveYValue");
searchTrie.insert("TimeTillFireNextProjectile");
searchTrie.insert("NumProjectilesRemaining");
searchTrie.insert("TimeSpentInPhase4");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UWarthogMovementComponent");
searchTrie.insert("UWarthogMovementComponent");
searchTrie.insert("OriginalVelocity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ARTSLevelVolume");
searchTrie.insert("ARTSLevelVolume");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MapName");
searchTrie.insert("WALL_THICKNESS");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPlayerCameraMovement");
searchTrie.insert("UPlayerCameraMovement");
searchTrie.insert("MaxSpeed");
searchTrie.insert("Acceleration");
searchTrie.insert("Deceleration");
searchTrie.insert("TurningBoost");
searchTrie.insert(":");
searchTrie.insert("ACollidingProjectile");
searchTrie.insert("ACollidingProjectile");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ACollidingProjectileBase");
searchTrie.insert("ACollidingProjectileBase");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HitResult");
searchTrie.insert("");
searchTrie.insert("AHomingProjectile");
searchTrie.insert("AHomingProjectile");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AInstantHitProjectile");
searchTrie.insert("AInstantHitProjectile");
searchTrie.insert("HitResult");
searchTrie.insert("StartLocation");
searchTrie.insert("EndLocation");
searchTrie.insert("ALeaveThenComeBackProjectile");
searchTrie.insert("ALeaveThenComeBackProjectile");
searchTrie.insert("");
searchTrie.insert("DescentStartingRotation");
searchTrie.insert("DescentStartingLocation");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ANoCollisionTimedProjectile");
searchTrie.insert("ANoCollisionTimedProjectile");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_Hit");
searchTrie.insert("HitResult");
searchTrie.insert("");
searchTrie.insert("FParticleAudioPair");
searchTrie.insert("FParticleAudioPair");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AProjectileBase");
searchTrie.insert("AProjectileBase");
searchTrie.insert("NUM_FOG_LOCATIONS");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ListeningForOnHit");
searchTrie.insert("ListeningForOnHitData");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerManager");
searchTrie.insert("TimerHandle_Lifetime");
searchTrie.insert("TimerHandle_DealDamage");
searchTrie.insert("TimerHandle_TrailParticles");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OwningTeam");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AoEObjectQueryParams");
searchTrie.insert("DamageCurveMaxY");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHomingProjectileMovement");
searchTrie.insert("UHomingProjectileMovement");
searchTrie.insert("TimeSpentInFlight");
searchTrie.insert("LastTargetLocation");
searchTrie.insert("TargetBoundsRadius");
searchTrie.insert("InitialSpeed");
searchTrie.insert("MaxSpeed");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UNoCollisionProjectileMovement");
searchTrie.insert("UNoCollisionProjectileMovement");
searchTrie.insert("Projectile");
searchTrie.insert("TargetLocation");
searchTrie.insert("TargetType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPreciseProjectileMovement");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ReferenceLocation");
searchTrie.insert("ReferenceRotation");
searchTrie.insert("TimeSpentAlive");
searchTrie.insert("");
searchTrie.insert("bTickMostlyPaused");
searchTrie.insert("URTSProjectileMovement");
searchTrie.insert("FUint8Set");
searchTrie.insert("Container");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("ActualCommand");
searchTrie.insert("AuxilleryInfo");
searchTrie.insert("OriginalCommand_PrimaryReason");
searchTrie.insert("OriginalCommand_AuxilleryInfo");
searchTrie.insert("FSavingUpForInfo");
searchTrie.insert("FSavingUpForInfo");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("");
searchTrie.insert("Building");
searchTrie.insert("Unit");
searchTrie.insert("Upgrade");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CommandReason");
searchTrie.insert("FQueueWaitingInfo");
searchTrie.insert("FQueueWaitingInfo");
searchTrie.insert("bWaiting");
searchTrie.insert("");
searchTrie.insert("Queue");
searchTrie.insert("Building");
searchTrie.insert("Unit");
searchTrie.insert("Upgrade");
searchTrie.insert("CommandReason");
searchTrie.insert("FTryingToPlaceBuildingInfo");
searchTrie.insert("FTryingToPlaceBuildingInfo");
searchTrie.insert("PendingBuilding");
searchTrie.insert("bIsForDepot");
searchTrie.insert("");
searchTrie.insert("bUsingConstructionYard");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CommandReason");
searchTrie.insert("NumBuildLocationsTriedThisTick");
searchTrie.insert("NumResourceDepotSpotsTried");
searchTrie.insert("ResourceDepotBuildLocsIndex");
searchTrie.insert("NumGeneralAreasExhausted");
searchTrie.insert("BuildLocMultipliersIndex");
searchTrie.insert("NumLocationsTriedForCurrentGeneralArea");
searchTrie.insert("GeneralArea");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("Building");
searchTrie.insert("bForResourceDepot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Queue");
searchTrie.insert("bProductionComplete");
searchTrie.insert("CommandReason");
searchTrie.insert("FBuildsInTabBuildingInfo");
searchTrie.insert("");
searchTrie.insert("ACPUPlayerAIController");
searchTrie.insert("ACPUPlayerAIController");
searchTrie.insert("Difficulty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StartingSpotLocation");
searchTrie.insert("StartingViewYaw");
searchTrie.insert("BuildsInTabBuildingInfo");
searchTrie.insert("TryingToPlaceBuildingInfo");
searchTrie.insert("ThingSavingUpFor");
searchTrie.insert("QueueWereWaitingToFinish");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TriedRecursiveBuildBuildings");
searchTrie.insert("TriedRecursiveBuildUnits");
searchTrie.insert("NumWorkers");
searchTrie.insert("NumBarracks");
searchTrie.insert("NumBaseDefenses");
searchTrie.insert("ArmyStrength");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PendingCommands_ArmyStrength");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BUILD_LOC_MULTIPLERS_NUM");
searchTrie.insert("BuildLocMultipliers[BUILD_LOC_MULTIPLERS_NUM]");
searchTrie.insert("NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY");
searchTrie.insert("CIRCLE_PORTIONS_IN_RADIANS");
searchTrie.insert("ResourceDepotBuildLocs[NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY]");
searchTrie.insert("NUM_GENERAL_AREAS_TO_TRY");
searchTrie.insert("MAX_NUM_BUILD_LOC_TRIES_PER_TICK");
searchTrie.insert("ParsedUINTERFACE");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Name");
searchTrie.insert("ParsedEnumValue");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Comment");
searchTrie.insert("Name");
searchTrie.insert("ParsedEnum");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Comment");
searchTrie.insert("1");
searchTrie.insert("Name");
searchTrie.insert("BackingInteger");
searchTrie.insert("Values");
searchTrie.insert("ParsedFunctionParamDefaultValue");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Value");
searchTrie.insert("ParsedVariableTemplateValue");
searchTrie.insert("ParsedVariableTemplateValue");
searchTrie.insert("Type");
searchTrie.insert("Pointers");
searchTrie.insert("NestedTemplateValues");
searchTrie.insert("ParsedFunctionParameter");
searchTrie.insert("ParsedFunctionParameter");
searchTrie.insert("1");
searchTrie.insert("VariableTypeName");
searchTrie.insert("TemplateValues");
searchTrie.insert("VariableTypePointers");
searchTrie.insert("Name");
searchTrie.insert("DefaultValue");
searchTrie.insert("UFUNCTIONSpecifier");
searchTrie.insert("UFUNCTIONSpecifier");
searchTrie.insert("UFUNCTIONSpecifier");
searchTrie.insert("Type");
searchTrie.insert("SecondValue");
searchTrie.insert("UFUNCTIONMetaSpecifier");
searchTrie.insert("UFUNCTIONMetaSpecifier");
searchTrie.insert("UFUNCTIONMetaSpecifier");
searchTrie.insert("Type");
searchTrie.insert("SecondValue");
searchTrie.insert("ParsedFunction");
searchTrie.insert("ParsedFunction");
searchTrie.insert("ParsedFunction");
searchTrie.insert("ParsedFunction");
searchTrie.insert("DefaultStruct");
searchTrie.insert("AccessSpecifier");
searchTrie.insert("Comment");
searchTrie.insert("Name");
searchTrie.insert("1");
searchTrie.insert("UFUNCTIONSpecifiers");
searchTrie.insert("UFUNCTIONMetaSpecifiers");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("ReturnValue");
searchTrie.insert("ReturnValuePointers");
searchTrie.insert("ReturnValueTemplateValues");
searchTrie.insert("Parameters");
searchTrie.insert("TemplateParameters");
searchTrie.insert("ParsedUPROPERTYSpecifier");
searchTrie.insert("ParsedUPROPERTYSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValue");
searchTrie.insert("ParsedUPROPERTYMetaSpecifier");
searchTrie.insert("ParsedUPROPERTYMetaSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValues");
searchTrie.insert("ParsedVariable");
searchTrie.insert("ParsedVariable");
searchTrie.insert("ParsedVariable");
searchTrie.insert("DefaultStruct");
searchTrie.insert("AccessSpecifier");
searchTrie.insert("Comment");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("UPROPERTYSpecifiers");
searchTrie.insert("UPROPERTYMetaSpecifiers");
searchTrie.insert("1");
searchTrie.insert("TypeName");
searchTrie.insert("TemplateValues");
searchTrie.insert("Pointers");
searchTrie.insert("Name");
searchTrie.insert("ParsedUSTRUCTOrUCLASSSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValues");
searchTrie.insert("ParsedUSTRUCTOrUCLASSMetaSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValues");
searchTrie.insert("ParsedStructOrClass");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Comment");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("USTRUCTOrUCLASSSpecifiers");
searchTrie.insert("USTRUCTOrUCLASSMetaSpecifiers");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("Name");
searchTrie.insert("ParentsNames");
searchTrie.insert("Functions");
searchTrie.insert("Variables");
searchTrie.insert("DocumentationTool");
searchTrie.insert("DocumentationTool");
searchTrie.insert("bParseCppFiles");
searchTrie.insert("ExcludeList");
searchTrie.insert("bTesting");
searchTrie.insert("TestList");
searchTrie.insert("CurrentParsingFileName");
searchTrie.insert("Chars");
searchTrie.insert("Index");
searchTrie.insert("CurrentComment");
searchTrie.insert("CurrentAccessSpecifier");
searchTrie.insert("CurrentClassOrStruct");
searchTrie.insert("CurrentEnumValue");
searchTrie.insert("CurrentEnum");
searchTrie.insert("CurrentUINTERFACE");
searchTrie.insert("CurrentUFUNCTIONUFUNCTIONSpecifiers");
searchTrie.insert("CurrentUFUNCTIONUFUNCTIONMetaSpecifiers");
searchTrie.insert("CurrentFunctionTemplateParameters");
searchTrie.insert("CurrentFunctionParameters");
searchTrie.insert("CurrentClassOrStructFunctions");
searchTrie.insert("CurrentUPROPERTYSpecifiers");
searchTrie.insert("CurrentUPROPERTYMetaSpecifiers");
searchTrie.insert("CurrentVariable");
searchTrie.insert("ParsedStructsAndClasses");
searchTrie.insert("ParsedEnums");
searchTrie.insert("ParsedUINTERFACEs");
searchTrie.insert("");
searchTrie.insert("ParsedFiles");
searchTrie.insert("");
searchTrie.insert("NumFunctionCalls");
searchTrie.insert("FunctionReturnType");
searchTrie.insert("FunctionReturnType");
searchTrie.insert("FunctionReturnType");
searchTrie.insert("bIsConst");
searchTrie.insert("Type");
searchTrie.insert("Pointers");
searchTrie.insert("FunctionParameter");
searchTrie.insert("FunctionParameter");
searchTrie.insert("bIsConst");
searchTrie.insert("Type");
searchTrie.insert("VariableTemplateValues");
searchTrie.insert("Pointers");
searchTrie.insert("Name");
searchTrie.insert("VirtualFunctionSignature");
searchTrie.insert("VirtualFunctionSignature");
searchTrie.insert("VirtualFunctionSignature");
searchTrie.insert("ReturnType");
searchTrie.insert("Name");
searchTrie.insert("Parameters");
searchTrie.insert("bIsConst");
searchTrie.insert("EngineClassInfo");
searchTrie.insert("EngineClassInfo");
searchTrie.insert("Parents");
searchTrie.insert("bHaveVirtualsBeenConfirmed");
searchTrie.insert("VirtualFunctions");
searchTrie.insert("RelativeDocumentationURL");
searchTrie.insert("FileDeclaredIn");
searchTrie.insert("DocumentationTool_Engine");
searchTrie.insert("DocumentationTool_Engine");
searchTrie.insert("World");
searchTrie.insert("HeaderFileBeingParsed");
searchTrie.insert("TimeBusyWaitForDocsFileDownloadToCompleteStarted");
searchTrie.insert("CachedEngineClassesFilePath");
searchTrie.insert("WebsiteSourceBatchFilePath");
searchTrie.insert("WebsiteSourceFileLocation");
searchTrie.insert("ClassNameToInfo");
searchTrie.insert("bTesting");
searchTrie.insert("DocumentationTool_HTML");
searchTrie.insert("DocumentationTool_HTML");
searchTrie.insert("SearchTokenToPathsContainer");
searchTrie.insert("PathToBasicInfoContainer");
searchTrie.insert("JS");
searchTrie.insert("MoreJS");
searchTrie.insert("PathsInUse");
searchTrie.insert("UDocToolTestUObject");
searchTrie.insert("SomeInt");
searchTrie.insert("");
searchTrie.insert("FSomeTestStruct");
searchTrie.insert("A64BitInt");
searchTrie.insert("AMyTestClass");
searchTrie.insert("APlayerCamera");
searchTrie.insert("APlayerCamera");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UUpgradeEffect");
searchTrie.insert("UUpgrade_DamageAndDefense");
searchTrie.insert("UUpgrade_DamageAndDefense");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UUpgrade_IncreaseResourceCapacity");
searchTrie.insert("UUpgrade_IncreaseResourceCapacity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UUpgrade_AttackSpeed");
searchTrie.insert("UUpgrade_AttackSpeed");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AStartingGrid");
searchTrie.insert("AStartingGrid");
searchTrie.insert("bStartedInMap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UStartingGridComponent");
searchTrie.insert("SessionOptions");
searchTrie.insert("MAX_NUM_LAN_SEARCH_RESULTS");
searchTrie.insert("MAX_NUM_STEAM_SEARCH_RESULTS");
searchTrie.insert("PING_BUCKET_SIZE");
searchTrie.insert("LOBBY_NAME_KEY");
searchTrie.insert("IS_PASSWORD_PROTECTED_KEY");
searchTrie.insert("MAP_NAME_KEY");
searchTrie.insert("STARTING_RESOURCES_KEY");
searchTrie.insert("DEFEAT_CONDITION_KEY");
searchTrie.insert("UNIQUE_RTS_KEY");
searchTrie.insert("ARTSGameSession");
searchTrie.insert("ARTSGameSession");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DoOnDestroySessionComplete");
searchTrie.insert("SessionSearch");
searchTrie.insert("OnCreateSessionCompleteDelegate");
searchTrie.insert("OnStartSessionCompleteDelegate");
searchTrie.insert("OnDestroySessionCompleteDelegate");
searchTrie.insert("OnFindSessionsCompleteDelegate");
searchTrie.insert("OnJoinSessionCompleteDelegate");
searchTrie.insert("DelegateHandle_OnCreateSessionComplete");
searchTrie.insert("DelegateHandle_OnStartSessionComplete");
searchTrie.insert("DelegateHandle_OnDestroySessionComplete");
searchTrie.insert("DelegateHandle_OnFindSessionsComplete");
searchTrie.insert("DelegateHandle_OnJoinSessionComplete");
searchTrie.insert("FRTSConnectionAlwaysRelevantNodePair");
searchTrie.insert("FRTSConnectionAlwaysRelevantNodePair");
searchTrie.insert("FRTSConnectionAlwaysRelevantNodePair");
searchTrie.insert("URTSReplicationGraph");
searchTrie.insert("URTSReplicationGraph");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamVisibilityInfos");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ClassRepNodePolicies");
searchTrie.insert("RTSReplicationGraphFrame");
searchTrie.insert("URTSReplicationGraphConnection");
searchTrie.insert("");
searchTrie.insert("RTSPendingDestructInfoList");
searchTrie.insert("URTSReplicationGraphNode_ActorList");
searchTrie.insert("URTSReplicationGraphNode_ActorList");
searchTrie.insert("ReplicationActorList");
searchTrie.insert("URTSReplicationGraphNode_AlwaysRelevant");
searchTrie.insert("URTSReplicationGraphNode_AlwaysRelevantForConnection");
searchTrie.insert("URTSReplicationGraphNode_TeamBuildings");
searchTrie.insert("Buildings");
searchTrie.insert("Team");
searchTrie.insert("URTSReplicationGraphNode_TeamInfantry");
searchTrie.insert("Infantry");
searchTrie.insert("Team");
searchTrie.insert("FTestConnectionAlwaysRelevantNodePair");
searchTrie.insert("FTestConnectionAlwaysRelevantNodePair");
searchTrie.insert("FTestConnectionAlwaysRelevantNodePair");
searchTrie.insert("UTestReplicationGraph");
searchTrie.insert("UTestReplicationGraph");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ClassRepNodePolicies");
searchTrie.insert("UTestReplicationGraphNode_ActorList");
searchTrie.insert("UTestReplicationGraphNode_ActorList");
searchTrie.insert("UTestReplicationGraphNode_AlwaysRelevant");
searchTrie.insert("UTestReplicationGraphNode_AlwaysRelevantForConnection");
searchTrie.insert("UAnotherTestReplicationGraph");
searchTrie.insert("UAnotherTestReplicationGraph");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ADevelopmentSettings");
searchTrie.insert("ADevelopmentSettings");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UEnumStringRepresentations");
searchTrie.insert("UEnumStringRepresentations");
searchTrie.insert("EnumToString_EditorPlaySkippingOption");
searchTrie.insert("EnumToString_DefeatConditions");
searchTrie.insert("EnumToString_InvalidOwnerIndexAction");
searchTrie.insert("EnumToString_Faction");
searchTrie.insert("EnumToString_Team");
searchTrie.insert("EnumToString_CPUDifficulty");
searchTrie.insert("FInputInfoBase");
searchTrie.insert("FInputInfoBase");
searchTrie.insert("FInputInfoBase");
searchTrie.insert("DisplayName");
searchTrie.insert("ActionName");
searchTrie.insert("KeyWithModifiers");
searchTrie.insert("ActionAsEnum");
searchTrie.insert("AxisAsEnum");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("FInputActionInfo");
searchTrie.insert("FInputActionInfo");
searchTrie.insert("FInputActionInfo");
searchTrie.insert("OnPressedAction");
searchTrie.insert("OnReleasedAction");
searchTrie.insert("KeyMappings");
searchTrie.insert("NUM_ACTIONS");
searchTrie.insert("ActionInfos");
searchTrie.insert("NumArrayEntries");
searchTrie.insert("FInputAxisInfo");
searchTrie.insert("FInputAxisInfo");
searchTrie.insert("FInputAxisInfo");
searchTrie.insert("FunctionPtr");
searchTrie.insert("Scale");
searchTrie.insert("AxisMappings");
searchTrie.insert("NUM_AXIS");
searchTrie.insert("AxisInfos");
searchTrie.insert("NumArrayEntries");
searchTrie.insert("InputMappings");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("Dependency");
searchTrie.insert("DependencyFullfilledOperator");
searchTrie.insert("bRequiredValue");
searchTrie.insert("RequiredValue");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("DisplayName");
searchTrie.insert("VariablePtr");
searchTrie.insert("VariableType");
searchTrie.insert("");
searchTrie.insert("DefaultValueStep");
searchTrie.insert("Steps");
searchTrie.insert("");
searchTrie.insert("URTSGameUserSettings");
searchTrie.insert("URTSGameUserSettings");
searchTrie.insert("MIN_CAMERA_ZOOM_AMOUNT");
searchTrie.insert("MAX_CAMERA_ZOOM_AMOUNT");
searchTrie.insert("MIN_CAMERA_PITCH");
searchTrie.insert("MAX_CAMERA_PITCH");
searchTrie.insert("MOUSE_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER");
searchTrie.insert("KEYBOARD_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("VOLUME_MIN");
searchTrie.insert("VOLUME_MAX");
searchTrie.insert("VOLUME_DEFAULT_STEP");
searchTrie.insert("NUM_VOLUME_STEPS");
searchTrie.insert("VOLUME_STEPS[NUM_VOLUME_STEPS]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("KeyToAction");
searchTrie.insert("");
searchTrie.insert("KeyToAxis");
searchTrie.insert("");
searchTrie.insert("URTSDamageType");
searchTrie.insert("URTSDamageType");
searchTrie.insert("UDamageType_Default");
searchTrie.insert("UDamageType_Bullet");
searchTrie.insert("UDamageType_SniperRound");
searchTrie.insert("UDamageType_Explosive");
searchTrie.insert("UDamageType_BiologicalHeal");
searchTrie.insert("UDamageType_Shadow");
searchTrie.insert("UDamageType_Lightning");
searchTrie.insert("UDamageType_Frost");
searchTrie.insert("UDamageType_Nuke");
searchTrie.insert("UDamageType_GAU8ArmourPiercing");
searchTrie.insert("UDamageType_GAU8HighExplosive");
searchTrie.insert("DevelopmentStatics");
searchTrie.insert("InventoryItemBehavior");
searchTrie.insert("Statics");
searchTrie.insert("PROJECT_API_MACRO_TEXT");
searchTrie.insert("HARDWARE_CURSOR_PATH");
searchTrie.insert("POOLED_ACTOR_SPAWN_LOCATION");
searchTrie.insert("INFO_ACTOR_SPAWN_LOCATION");
searchTrie.insert("NUM_CUSTOM_MESH_SOCKETS");
searchTrie.insert("MeshFloorSocket");
searchTrie.insert("MeshMiddleSocket");
searchTrie.insert("MeshHeadSocket");
searchTrie.insert("LOBBY_OBSERVER_COMBO_BOX_OPTION");
searchTrie.insert("NUM_FACTIONS");
searchTrie.insert("NUM_MENU_WIDGET_TYPES");
searchTrie.insert("NUM_BUILDING_TYPES");
searchTrie.insert("NUM_UNIT_TYPES");
searchTrie.insert("NUM_CONTEXT_ACTIONS");
searchTrie.insert("NUM_CUSTOM_CONTEXT_ACTIONS");
searchTrie.insert("NUM_ANIMATIONS");
searchTrie.insert("NUM_GAME_NOTIFICATION_TYPES");
searchTrie.insert("NUM_GENERIC_GAME_WARNING_TYPES");
searchTrie.insert("NUM_ARMOUR_TYPES");
searchTrie.insert("NUM_UPGRADE_TYPES");
searchTrie.insert("NUM_CPU_DIFFICULTIES");
searchTrie.insert("NUM_DEFEAT_CONDITIONS");
searchTrie.insert("NUM_RESOURCE_TYPES");
searchTrie.insert("NUM_HOUSING_RESOURCE_TYPES");
searchTrie.insert("NUM_PERSISTENT_HUD_TAB_TYPES");
searchTrie.insert("NUM_MATCH_WIDGET_TYPES");
searchTrie.insert("NUM_BUILDING_ANIMATIONS");
searchTrie.insert("NUM_TARGETING_TYPES");
searchTrie.insert("NUM_COMMAND_TARGET_TYPES");
searchTrie.insert("NUM_AFFILIATIONS");
searchTrie.insert("NUM_MATCH_LOADING_STATUSES");
searchTrie.insert("NUM_STARTING_RESOURCE_AMOUNT_TYPES");
searchTrie.insert("NUM_MESSAGE_RECIPIENT_TYPES");
searchTrie.insert("NUM_STATIC_BUFF_AND_DEBUFF_TYPES");
searchTrie.insert("NUM_TICKABLE_BUFF_AND_DEBUFF_TYPES");
searchTrie.insert("NUM_BUFF_AND_DEBUFF_SUBTYPES");
searchTrie.insert("NUM_CUSTOM_ABILITY_CHECK_TYPES");
searchTrie.insert("NUM_SELECTABLE_RESOURCE_TYPES");
searchTrie.insert("NUM_INVENTORY_ITEM_TYPES");
searchTrie.insert("NUM_COMMANDER_ABILITY_TYPES");
searchTrie.insert("NUM_COMMANDER_SKILL_TREE_NODE_TYPES");
searchTrie.insert("NUM_CONTROL_SETTING_TYPES");
searchTrie.insert("NUM_BUILDING_GARRISON_NETWORK_TYPES");
searchTrie.insert("NUM_EDITOR_PLAY_SKIP_OPTIONS");
searchTrie.insert("NUM_PIE_SESSION_INVALID_OWNER_RULES");
searchTrie.insert("SWEEP_HEIGHT");
searchTrie.insert("");
searchTrie.insert("NUM_ACTOR_TAGS");
searchTrie.insert("NeutralID");
searchTrie.insert("NEUTRAL_TEAM_TAG");
searchTrie.insert("OBSERVER_TEAM_TAG");
searchTrie.insert("UNTARGETABLE_TAG");
searchTrie.insert("BuildingTag");
searchTrie.insert("UnitTag");
searchTrie.insert("InventoryItemTag");
searchTrie.insert("AirTag");
searchTrie.insert("NotAirTag");
searchTrie.insert("HasAttackTag");
searchTrie.insert("NotHasAttackTag");
searchTrie.insert("HasZeroHealthTag");
searchTrie.insert("AboveZeroHealthTag");
searchTrie.insert("NotHasInventoryTag");
searchTrie.insert("HasZeroCapacityInventoryTag");
searchTrie.insert("HasInventoryWithCapacityGreaterThanZeroTag");
searchTrie.insert("IsShopThatAcceptsRefundsTag");
searchTrie.insert("DamageTypes");
searchTrie.insert("SocketNames");
searchTrie.insert("TargetTypeFNames");
searchTrie.insert("ImportantAnims");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("");
searchTrie.insert("FFactionBuildingTypePair");
searchTrie.insert("FFactionBuildingTypePair");
searchTrie.insert("FFactionBuildingTypePair");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedImageAndSoundFlags");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("FStaticMeshInfo");
searchTrie.insert("FStaticMeshInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FMeshInfoBasic");
searchTrie.insert("FMeshInfoBasic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCursorInfo");
searchTrie.insert("FCursorInfo");
searchTrie.insert("FCursorInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextCommand");
searchTrie.insert("FContextCommand");
searchTrie.insert("FContextCommand");
searchTrie.insert("FContextCommand");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextCommandWithLocation");
searchTrie.insert("FContextCommandWithLocation");
searchTrie.insert("FContextCommandWithLocation");
searchTrie.insert("");
searchTrie.insert("FContextCommandWithTarget");
searchTrie.insert("FContextCommandWithTarget");
searchTrie.insert("FContextCommandWithTarget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FRightClickCommandBase");
searchTrie.insert("FRightClickCommandBase");
searchTrie.insert("FRightClickCommandBase");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FRightClickCommandWithTarget");
searchTrie.insert("FRightClickCommandWithTarget");
searchTrie.insert("FRightClickCommandWithTarget");
searchTrie.insert("");
searchTrie.insert("FRightClickCommandOnInventoryItem");
searchTrie.insert("FRightClickCommandOnInventoryItem");
searchTrie.insert("FRightClickCommandOnInventoryItem");
searchTrie.insert("");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("Info)");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("ActualCommandType");
searchTrie.insert("AuxilleryInfo");
searchTrie.insert("OriginalCommand_ReasonForProduction");
searchTrie.insert("OriginalCommand_AuxilleryInfo");
searchTrie.insert("FBasicDecalInfo");
searchTrie.insert("FBasicDecalInfo");
searchTrie.insert("FBasicDecalInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefaultMouseCursor_Info");
searchTrie.insert("AcceptableTargetMouseCursor_Info");
searchTrie.insert("UnacceptableTargetMouseCursor_Info");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderAbilityInfo");
searchTrie.insert("FCommanderAbilityInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefaultMouseCursor_Info");
searchTrie.insert("AcceptableTargetMouseCursor_Info");
searchTrie.insert("UnacceptableTargetMouseCursor_Info");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderSkillTreePrerequisiteArrayEntry");
searchTrie.insert("FCommanderSkillTreePrerequisiteArrayEntry");
searchTrie.insert("FCommanderSkillTreePrerequisiteArrayEntry");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderAbilityTreeNodeSingleRankInfo");
searchTrie.insert("FCommanderAbilityTreeNodeSingleRankInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AbilityInfo");
searchTrie.insert("FCommanderAbilityTreeNodeInfo");
searchTrie.insert("FCommanderAbilityTreeNodeInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderLevelUpInfo");
searchTrie.insert("FCommanderLevelUpInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnaquiredCommanderAbilityState");
searchTrie.insert("FUnaquiredCommanderAbilityState");
searchTrie.insert("FUnaquiredCommanderAbilityState");
searchTrie.insert("NodeInfo");
searchTrie.insert("MissingPrerequisites");
searchTrie.insert("FAquiredCommanderAbilityState");
searchTrie.insert("FAquiredCommanderAbilityState");
searchTrie.insert("FAquiredCommanderAbilityState");
searchTrie.insert("AbilityInfo");
searchTrie.insert("TimerHandle_CooldownRemaining");
searchTrie.insert("RankAquired");
searchTrie.insert("NumTimesUsed");
searchTrie.insert("GlobalSkillsPanelButtonIndex");
searchTrie.insert("FBuildingTargetingAbilityStaticInfo");
searchTrie.insert("FBuildingTargetingAbilityStaticInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AcceptableTargetMouseCursor_Info");
searchTrie.insert("");
searchTrie.insert("AbilityType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildingTargetingAbilityPerSelectableInfo");
searchTrie.insert("FBuildingTargetingAbilityPerSelectableInfo");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("FBuildingTargetingAbilitiesAttributes");
searchTrie.insert("");
searchTrie.insert("FProductionQueue");
searchTrie.insert("FProductionQueue");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextMenuButtons");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FDisplayInfoBase");
searchTrie.insert("FDisplayInfoBase");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUpgradeInfo");
searchTrie.insert("FUpgradeInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("FBuildingInfo");
searchTrie.insert("FBuildingInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("FUnitInfo");
searchTrie.insert("");
searchTrie.insert("ImpactDamage");
searchTrie.insert("ImpactDamageType");
searchTrie.insert("ImpactRandomDamageFactor");
searchTrie.insert("AoEDamage");
searchTrie.insert("AoEDamageType");
searchTrie.insert("AoERandomDamageFactor");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("FStaticBuffOrDebuffInstanceInfo");
searchTrie.insert("FStaticBuffOrDebuffInstanceInfo");
searchTrie.insert("FStaticBuffOrDebuffInstanceInfo");
searchTrie.insert("Info");
searchTrie.insert("SpecificType");
searchTrie.insert("Instigator");
searchTrie.insert("InstigatorAsSelectable");
searchTrie.insert("FTickableBuffOrDebuffInstanceInfo");
searchTrie.insert("FTickableBuffOrDebuffInstanceInfo");
searchTrie.insert("FTickableBuffOrDebuffInstanceInfo");
searchTrie.insert("Info");
searchTrie.insert("SpecificType");
searchTrie.insert("TickCount");
searchTrie.insert("TimeRemainingTillNextTick");
searchTrie.insert("Instigator");
searchTrie.insert("InstigatorAsSelectable");
searchTrie.insert("FPlayerStateArray");
searchTrie.insert("");
searchTrie.insert("FVaryingSizeParticleArray");
searchTrie.insert("FVaryingSizeParticleArray");
searchTrie.insert("");
searchTrie.insert("FParticleInfo");
searchTrie.insert("FParticleInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FParticleInfo_Attach");
searchTrie.insert("FParticleInfo_Attach");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("PSC");
searchTrie.insert("UniqueID");
searchTrie.insert("FDecalInfo");
searchTrie.insert("FDecalInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttachInfo");
searchTrie.insert("FAttachInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAnimationRepVariable");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FInventoryItemInfo");
searchTrie.insert("FInventoryItemInfo");
searchTrie.insert("FInventoryItemInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OnAquiredFunctionPtr");
searchTrie.insert("OnRemovedFunctionPtr");
searchTrie.insert("ItemType");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UseAbilityInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OnNumChargesChangedFunctionPtr");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FItemOnDisplayInShopSlot");
searchTrie.insert("FItemOnDisplayInShopSlot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FShopInfo");
searchTrie.insert("FShopInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FInventorySlotState");
searchTrie.insert("FInventorySlotState");
searchTrie.insert("FInventorySlotState");
searchTrie.insert("ItemType");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("NumInStackOrNumCharges");
searchTrie.insert("TimerHandle_ItemUseCooldown");
searchTrie.insert("FInventoryItemQuantity");
searchTrie.insert("FInventoryItemQuantity");
searchTrie.insert("FInventoryItemQuantity");
searchTrie.insert("NumStacks");
searchTrie.insert("Num");
searchTrie.insert("FInventoryItemQuantityPair");
searchTrie.insert("FInventoryItemQuantityPair");
searchTrie.insert("FInventoryItemQuantityPair");
searchTrie.insert("ItemType");
searchTrie.insert("Quantity");
searchTrie.insert("FInventory");
searchTrie.insert("FInventory");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableResourceInfo");
searchTrie.insert("FSelectableResourceInfo");
searchTrie.insert("MULTIPLIER");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FGatheredResourceMeshInfo");
searchTrie.insert("FGatheredResourceMeshInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FResourceCollectionAttribute");
searchTrie.insert("FResourceCollectionAttribute");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FResourceGatheringProperties");
searchTrie.insert("FResourceGatheringProperties");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableAttributesBase");
searchTrie.insert("FSelectableAttributesBase");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableAttributesBasic");
searchTrie.insert("FSelectableAttributesBasic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumTempMaxHealthModifiers");
searchTrie.insert("");
searchTrie.insert("NumTempDefenseMultiplierModifiers");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
searchTrie.insert("FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
searchTrie.insert("LOCATION_INVALID");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FoursSidesInfo[4]");
searchTrie.insert("CurrentFoursSidesInfoIndex");
searchTrie.insert("NumUnitsEvacced");
searchTrie.insert("bHasGivenOutFirstLocation");
searchTrie.insert("FBuildingNetworkAttributes");
searchTrie.insert("FBuildingNetworkAttributes");
searchTrie.insert("");
searchTrie.insert("FBuildingNetworkState");
searchTrie.insert("FBuildingNetworkState");
searchTrie.insert("GarrisonedUnits");
searchTrie.insert("SlotCapacity");
searchTrie.insert("SlotUsage");
searchTrie.insert("FPlayersBuildingNetworksState");
searchTrie.insert("FPlayersBuildingNetworksState");
searchTrie.insert("FBuildingGarrisonAttributes");
searchTrie.insert("FBuildingGarrisonAttributes");
searchTrie.insert("GarrisonNetworkInfo");
searchTrie.insert("GarrisonedUnits");
searchTrie.insert("");
searchTrie.insert("SlotUsage");
searchTrie.insert("HightestSightRadiusContainerContributor");
searchTrie.insert("HighestStealthRevealRadiusContainerContributor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildingAttributes");
searchTrie.insert("FBuildingAttributes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StaticBuffs");
searchTrie.insert("StaticDebuffs");
searchTrie.insert("TickableBuffs");
searchTrie.insert("TickableDebuffs");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FEnteringGarrisonAttributes");
searchTrie.insert("FEnteringGarrisonAttributes");
searchTrie.insert("");
searchTrie.insert("FInfantryAttributes");
searchTrie.insert("FInfantryAttributes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StaticBuffs");
searchTrie.insert("StaticDebuffs");
searchTrie.insert("TickableBuffs");
searchTrie.insert("TickableDebuffs");
searchTrie.insert("AttachedParticles");
searchTrie.insert("NumTempMoveSpeedModifiers");
searchTrie.insert("NumTempExperienceGainModifiers");
searchTrie.insert("DefaultExperienceGainMultiplier");
searchTrie.insert("NumTempStealthModeEffects");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FStartingSelectables");
searchTrie.insert("Buildings");
searchTrie.insert("Units");
searchTrie.insert("FGameNotificationInfo");
searchTrie.insert("FGameNotificationInfo");
searchTrie.insert("FGameNotificationInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FGameWarningInfo");
searchTrie.insert("FGameWarningInfo");
searchTrie.insert("FGameWarningInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedMouseFocusImage");
searchTrie.insert("FUnifiedMouseFocusImage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedUIButtonSound");
searchTrie.insert("FUnifiedUIButtonSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedImageAndSoundAssets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FVisibilityInfo");
searchTrie.insert("");
searchTrie.insert("FUint64Array");
searchTrie.insert("");
searchTrie.insert("FAttackAttributes");
searchTrie.insert("FAttackAttributes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumTempImpactDamageModifiers");
searchTrie.insert("DefaultImpactDamage");
searchTrie.insert("NumTempAoEDamageModifiers");
searchTrie.insert("DefaultAoEDamage");
searchTrie.insert("NumTempAttackRateModifiers");
searchTrie.insert("DefaultAttackRate");
searchTrie.insert("NumTempAttackRangeModifiers");
searchTrie.insert("DefaultAttackRange");
searchTrie.insert("Default");
searchTrie.insert("");
searchTrie.insert("FDamageMultipliers");
searchTrie.insert("FDamageMultipliers");
searchTrie.insert("");
searchTrie.insert("FSelectionDecalInfo");
searchTrie.insert("FSelectionDecalInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FDefeatConditionInfo");
searchTrie.insert("");
searchTrie.insert("FCPUDifficultyInfo");
searchTrie.insert("FCPUDifficultyInfo");
searchTrie.insert("FCPUDifficultyInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPlayerStartDistanceInfo");
searchTrie.insert("FPlayerStartDistanceInfo");
searchTrie.insert("FPlayerStartDistanceInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FMapInfo");
searchTrie.insert("FMapInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FResourceInfo");
searchTrie.insert("FResourceInfo");
searchTrie.insert("");
searchTrie.insert("FStartingResourceConfig");
searchTrie.insert("FStartingResourceConfig");
searchTrie.insert("FStartingResourceConfig");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FMatchInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FStaticBuffOrDebuffInfo");
searchTrie.insert("FStaticBuffOrDebuffInfo");
searchTrie.insert("FStaticBuffOrDebuffInfo");
searchTrie.insert("SpecificType");
searchTrie.insert("TryApplyToPtr");
searchTrie.insert("OnRemovedPtr");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FTickableBuffOrDebuffInfo");
searchTrie.insert("FTickableBuffOrDebuffInfo");
searchTrie.insert("FTickableBuffOrDebuffInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SpecificType");
searchTrie.insert("TryApplyToPtr");
searchTrie.insert("DoTickPtr");
searchTrie.insert("OnRemovedPtr");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuffOrDebuffSubTypeInfo");
searchTrie.insert("FBuffOrDebuffSubTypeInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableResourceColorInfo");
searchTrie.insert("FSelectableResourceColorInfo");
searchTrie.insert("");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAbilityHitWithOutcome");
searchTrie.insert("FAbilityHitWithOutcome");
searchTrie.insert("FAbilityHitWithOutcome");
searchTrie.insert("");
searchTrie.insert("FHitActorAndOutcome");
searchTrie.insert("FHitActorAndOutcome");
searchTrie.insert("FHitActorAndOutcome");
searchTrie.insert("HitActor");
searchTrie.insert("Outcome");
searchTrie.insert("FHousingResourceState");
searchTrie.insert("FHousingResourceState");
searchTrie.insert("FHousingResourceState");
searchTrie.insert("AmountConsumed");
searchTrie.insert("AmountProvidedClamped");
searchTrie.insert("AmountProvided");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("");
searchTrie.insert("FMapID");
searchTrie.insert("FMapID");
searchTrie.insert("FMapID");
searchTrie.insert("");
searchTrie.insert("FSelectableRankInt");
searchTrie.insert("FSelectableRankInt");
searchTrie.insert("FSelectableRankInt");
searchTrie.insert("");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Workarounds");
searchTrie.insert("FFloatAttributeBase");
searchTrie.insert("FFloatAttributeBase");
searchTrie.insert("FFloatAttributeBase");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumTempValueModifiers");
searchTrie.insert("NumTempMultiplierModifiers");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttribute_AttackSpeed");
searchTrie.insert("FAttribute_AttackSpeed");
searchTrie.insert("");
searchTrie.insert("FAttribute_AttackRange");
searchTrie.insert("FAttribute_AttackRange");
searchTrie.insert("");
searchTrie.insert("FAttribute_Building_SightRange");
searchTrie.insert("FAttribute_Building_SightRange");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttribute_Building_StealthRevealRange");
searchTrie.insert("FAttribute_Building_StealthRevealRange");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttribute_Unit_SightRange");
searchTrie.insert("FAttribute_Unit_SightRange");
searchTrie.insert("");
searchTrie.insert("FAttribute_Unit_StealthRevealRange");
searchTrie.insert("FAttribute_Unit_StealthRevealRange");
searchTrie.insert("");
searchTrie.insert("FAttribute_Defense");
searchTrie.insert("FAttribute_Defense");
searchTrie.insert("ReductionRule");
searchTrie.insert("FAttribute_ExperienceBounty");
searchTrie.insert("FAttribute_ExperienceBounty");
searchTrie.insert("");
searchTrie.insert("FPIEPlayerInfo");
searchTrie.insert("FPIEPlayerInfo");
searchTrie.insert("FPIEPlayerInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPIECPUPlayerInfo");
searchTrie.insert("FPIECPUPlayerInfo");
searchTrie.insert("FPIECPUPlayerInfo");
searchTrie.insert("");
searchTrie.insert("GarrisonStructs");
searchTrie.insert("GarrisonStructs");
searchTrie.insert("FTemporaryFogRevealEffectInfo");
searchTrie.insert("FTemporaryFogRevealEffectInfo");
searchTrie.insert("FTemporaryFogRevealEffectInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeExisted");
searchTrie.insert("Location");
searchTrie.insert("");
searchTrie.insert("FTemporaryFogRevealEffectsArray");
searchTrie.insert("FTemporaryFogRevealEffectsArray");
searchTrie.insert("FTemporaryFogRevealEffectsArray");
searchTrie.insert("Array");
searchTrie.insert("FSpawnDecalInfo");
searchTrie.insert("FSpawnDecalInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FKeyInfo");
searchTrie.insert("FKeyInfo");
searchTrie.insert("FKeyInfo");
searchTrie.insert("FKeyInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleBuffOrDebuffWidget");
searchTrie.insert("USingleBuffOrDebuffWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleTickableBuffOrDebuffWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TotalDuration");
searchTrie.insert("UEndOfMatchWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UInGameWidgetBase");
searchTrie.insert("UInGameWidgetBase");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bHasSetup");
searchTrie.insert("");
searchTrie.insert("UInMatchDeveloperWidget");
searchTrie.insert("UInMatchDeveloperWidget");
searchTrie.insert("STARTING_Y_POSITION");
searchTrie.insert("Y_SPACING_BETWEEN_BUTTONS");
searchTrie.insert("BUTTON_SIZE");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UDevelopmentPopupWidget");
searchTrie.insert("UDevelopmentPopupWidget");
searchTrie.insert("NUM_GRID_PANEL_CHILDREN_PER_ROW");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UDevelopmentPopupWidgetButton");
searchTrie.insert("UDevelopmentPopupWidgetButton");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ClickFunctionality");
searchTrie.insert("ClickAuxilleryInfo");
searchTrie.insert("AMarqueeHUD");
searchTrie.insert("AMarqueeHUD");
searchTrie.insert("ClickLoc");
searchTrie.insert("MouseLoc");
searchTrie.insert("MarqueeBoxDrawMethod");
searchTrie.insert("MarqueeBoxRectangleColor");
searchTrie.insert("MarqueeBoxBorderColor");
searchTrie.insert("MarqueeBorderLineThickness");
searchTrie.insert("bPerformMarqueeASAP");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("URTSHUD");
searchTrie.insert("URTSHUD");
searchTrie.insert("PALETTE_CATEGORY");
searchTrie.insert("BLANK_TEXT");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CommanderSkillTreeWidget");
searchTrie.insert("");
searchTrie.insert("PlayerTargetingPanel");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("EscapeRequestResponableWidgets");
searchTrie.insert("PauseMenu");
searchTrie.insert("MenuOutputWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeWhenPauseMenuWasShown");
searchTrie.insert("");
searchTrie.insert("SkillTreeWantsOpeningAnimName");
searchTrie.insert("SkillTreeWantsOpeningAnim");
searchTrie.insert("");
searchTrie.insert("USelectableContextMenu");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USelectableInfo");
searchTrie.insert("USelectableInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("QueueNum");
searchTrie.insert("ProductionQueue");
searchTrie.insert("LastSelectableResourceType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ItemOnDisplayInShopButtons");
searchTrie.insert("");
searchTrie.insert("CoolingDownInventorySlots");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("InventoryButtons");
searchTrie.insert("UProductionQueueButton");
searchTrie.insert("UProductionQueueButton");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ButtonType");
searchTrie.insert("UItemOnDisplayInShopButton");
searchTrie.insert("UItemOnDisplayInShopButton");
searchTrie.insert("");
searchTrie.insert("OwningWidget");
searchTrie.insert("ShopSlotIndex");
searchTrie.insert("SlotStateInfo");
searchTrie.insert("ItemInfo");
searchTrie.insert("OriginalOpacity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UInventoryItemButton");
searchTrie.insert("UInventoryItemButton");
searchTrie.insert("InventorySlot");
searchTrie.insert("SlotsItemInfo");
searchTrie.insert("");
searchTrie.insert("ServerSlotIndex");
searchTrie.insert("DisplayedItemType");
searchTrie.insert("StackQuantityOrNumChargesShown");
searchTrie.insert("UnifiedBrushAndSoundFlags");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ItemUseTotalCooldown");
searchTrie.insert("USelectableActionBar");
searchTrie.insert("USelectableActionBar");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumButtonsInMenu");
searchTrie.insert("UContextActionButton");
searchTrie.insert("UContextActionButton");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsCooldownTextEmpty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsForProductionAction");
searchTrie.insert("ProductionQueue");
searchTrie.insert("TimerHandle_ProgressBar");
searchTrie.insert("ButtonType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bPrerequisitesMet");
searchTrie.insert("OriginalAlpha");
searchTrie.insert("UGarrisonedUnitInfo");
searchTrie.insert("");
searchTrie.insert("GarrisonedSelectable");
searchTrie.insert("UGarrisonInfo");
searchTrie.insert("PrimarySelectedsGarrisonNetworkType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDResourcesWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDSingleResourcesWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StartAmount");
searchTrie.insert("CurrentAmount");
searchTrie.insert("TargetAmount");
searchTrie.insert("UpdateCurveDuration");
searchTrie.insert("CurrentCurveTime");
searchTrie.insert("Range");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDSingleHousingResourceWidget");
searchTrie.insert("UHUDSingleHousingResourceWidget");
searchTrie.insert("");
searchTrie.insert("Consumed_OriginalColor");
searchTrie.insert("Provided_OriginalColor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsOverCap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDChatInputWidget");
searchTrie.insert("UHUDChatInputWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MessageRecipients");
searchTrie.insert("NumUndeletableCharacters");
searchTrie.insert("UHUDChatOutputWidget");
searchTrie.insert("UHUDChatOutputWidget");
searchTrie.insert("MessageReceivedAnimName");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FrontOfMessageIndices");
searchTrie.insert("NumMessages");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_Hide");
searchTrie.insert("FGameMessageAttributes");
searchTrie.insert("FGameMessageAttributes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_HidePanel");
searchTrie.insert("FrontOfMessageIndices");
searchTrie.insert("NumMessages");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OwningWidget");
searchTrie.insert("HidePanelFunctionPtr");
searchTrie.insert("UHUDGameOutputWidget");
searchTrie.insert("UHUDGameOutputWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDPersistentPanel");
searchTrie.insert("UHUDPersistentPanel");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ActiveTab");
searchTrie.insert("UHUDPersistentTabSwitchingButton");
searchTrie.insert("UHUDPersistentTabSwitchingButton");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("ButtonPtr");
searchTrie.insert("bArePrerequisitesMet");
searchTrie.insert("bHasQueueSupport");
searchTrie.insert("FActiveButtonStateData");
searchTrie.insert("FActiveButtonStateData");
searchTrie.insert("Queue");
searchTrie.insert("");
searchTrie.insert("NumItemsInQueue");
searchTrie.insert("bIsAnotherButtonsPersistentQueueProducing");
searchTrie.insert("CannotFunctionReason");
searchTrie.insert("UHUDPersistentTab");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ButtonIndices");
searchTrie.insert("ButtonStates");
searchTrie.insert("UnactiveButtons");
searchTrie.insert("");
searchTrie.insert("UnclickableButtonOpacity");
searchTrie.insert("bShowTextLabelsOnButtons");
searchTrie.insert("Widget2)");
searchTrie.insert("UHUDPersistentTabButton");
searchTrie.insert("UHUDPersistentTabButton");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Button");
searchTrie.insert("StateInfo");
searchTrie.insert("OriginalAlpha");
searchTrie.insert("UnclickableAlpha");
searchTrie.insert("UMinimap");
searchTrie.insert("UMinimap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MapCenter");
searchTrie.insert("MapDimensionsInverse");
searchTrie.insert("ImageSizeInPixels");
searchTrie.insert("ViewportSizeInPixels");
searchTrie.insert("UTooltipWidget_InventoryItem");
searchTrie.insert("UTooltipWidget_InventoryItem");
searchTrie.insert("DisplayedInventoryItem");
searchTrie.insert("DisplayedItemInfo");
searchTrie.insert("DisplayedNumInStackOrNumCharges");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_Ability");
searchTrie.insert("DisplayedButtonType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_Production");
searchTrie.insert("DisplayedInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_GlobalSkillsPanelButton");
searchTrie.insert("DisplayedAbilityState");
searchTrie.insert("DisplayedAbilityInfoStruct");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_CommanderSkillTreeNode");
searchTrie.insert("UTooltipWidget_CommanderSkillTreeNode");
searchTrie.insert("DisplayedNodeInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CostTextOriginalColor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UIUtilities");
searchTrie.insert("UEditorPlayStartingResourcesWidget");
searchTrie.insert("");
searchTrie.insert("UPIEHumanPlayerInfoProxy");
searchTrie.insert("EnumStringObject");
searchTrie.insert("PlaySettingsWidget");
searchTrie.insert("PlayerIndex");
searchTrie.insert("PlayerInfo");
searchTrie.insert("Text_PlayerIndex");
searchTrie.insert("ComboBox_Team");
searchTrie.insert("ComboBox_Faction");
searchTrie.insert("Text_StartingSpot");
searchTrie.insert("UPIECPUPlayerInfoProxy");
searchTrie.insert("EnumStringObject");
searchTrie.insert("PlaySettingsWidget");
searchTrie.insert("PlayerIndex");
searchTrie.insert("PlayerInfo");
searchTrie.insert("Text_PlayerIndex");
searchTrie.insert("ComboBox_Team");
searchTrie.insert("ComboBox_Faction");
searchTrie.insert("Text_StartingSpot");
searchTrie.insert("ComboBox_CPUDifficulty");
searchTrie.insert("UEditorPlaySettingsWidget");
searchTrie.insert("UEditorPlaySettingsWidget");
searchTrie.insert("EnumStringObject");
searchTrie.insert("SkippingOption");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HumanPlayerInfoCopy");
searchTrie.insert("CPUPlayerInfoCopy");
searchTrie.insert("NumCPUPlayers");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StartingResourceAmounts");
searchTrie.insert("StartingResourceConfig");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefeatCondition");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bInitiallyShowCheatWidget");
searchTrie.insert("CheatWidget_BP");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("InvalidHumanOwnerRule");
searchTrie.insert("InvalidCPUOwnerRule");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCreateDocumentationConfirmationWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPluginMaintainerEditorWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCommanderSkillTreeNodeWidget");
searchTrie.insert("UCommanderSkillTreeNodeWidget");
searchTrie.insert("UNAQUIRABLE_COLOR_MULTIPLIER");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("OriginalColor");
searchTrie.insert("");
searchTrie.insert("NodeInfo");
searchTrie.insert("");
searchTrie.insert("AllNodesArrayIndex");
searchTrie.insert("FNodeArray");
searchTrie.insert("Array");
searchTrie.insert("UCommanderSkillTreeWidget");
searchTrie.insert("UCommanderSkillTreeWidget");
searchTrie.insert("bShownOrPlayingShowAnim");
searchTrie.insert("NodesUnlockedByRank");
searchTrie.insert("RankHighEnoughButNotFullyAquiredNodes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ShowAnimationFName");
searchTrie.insert("HideAnimationFName");
searchTrie.insert("ShowAnim");
searchTrie.insert("HideAnim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UGlobalSkillsPanel");
searchTrie.insert("UGlobalSkillsPanel");
searchTrie.insert("CoolingDownAbilities");
searchTrie.insert("AllButtons");
searchTrie.insert("");
searchTrie.insert("EnterAnimFName");
searchTrie.insert("EnterAnim");
searchTrie.insert("NumActiveButtons");
searchTrie.insert("UGlobalSkillsPanelButton");
searchTrie.insert("UGlobalSkillsPanelButton");
searchTrie.insert("");
searchTrie.insert("EnterAnimFName");
searchTrie.insert("EnterAnim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OriginalOpacity");
searchTrie.insert("");
searchTrie.insert("AssignedCommanderAbilityInfo");
searchTrie.insert("UInfantryControllerDebugWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UInMatchConfirmationWidget");
searchTrie.insert("Purpose");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPauseMenu");
searchTrie.insert("SETTINGS_WIDGET_Z_ORDER");
searchTrie.insert("CONFIRMATION_WIDGET_Z_ORDER");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SettingsWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ConfirmExitToMainMenuWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ConfirmExitToOperatingSystemWidget");
searchTrie.insert("");
searchTrie.insert("FButtonArrayEntry");
searchTrie.insert("FButtonArrayEntry");
searchTrie.insert("FButtonArrayEntry");
searchTrie.insert("Button");
searchTrie.insert("AssignedPlayer");
searchTrie.insert("ButtonOriginalOpacity");
searchTrie.insert("bHasAssignedPlayerBeenDefeated");
searchTrie.insert("AssignedPlayersAffiliation");
searchTrie.insert("UPlayerTargetingPanel");
searchTrie.insert("AssignedAbilityInfo");
searchTrie.insert("Buttons");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ShowAnimFName");
searchTrie.insert("HideAnimFName");
searchTrie.insert("ShowAnim");
searchTrie.insert("HideAnim");
searchTrie.insert("bShownOrPlayingShowAnim");
searchTrie.insert("");
searchTrie.insert("UMyButton");
searchTrie.insert("UMyButton");
searchTrie.insert("Purpose");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MyButton");
searchTrie.insert("UMyButtonSlot");
searchTrie.insert("UMyButtonSlot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Button");
searchTrie.insert("SMyButton");
searchTrie.insert("NormalImage");
searchTrie.insert("HoverImage");
searchTrie.insert("PressedImage");
searchTrie.insert("HighlightedImage");
searchTrie.insert("OnLeftMouseButtonPressed");
searchTrie.insert("OnRightMouseButtonPressed");
searchTrie.insert("OnLeftMouseButtonReleased");
searchTrie.insert("OnRightMouseButtonReleased");
searchTrie.insert("HoveredSound");
searchTrie.insert("PressedByLMBSound");
searchTrie.insert("PressedByRMBSound");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("PC");
searchTrie.insert("UMGWidget");
searchTrie.insert("UserWidgetButtonOwner");
searchTrie.insert("BorderImage");
searchTrie.insert("DesiredSizeScale");
searchTrie.insert("BorderBackgroundColor");
searchTrie.insert("UGameMessageWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OriginalTextColor");
searchTrie.insert("UChatOutputSingleMessageWidget");
searchTrie.insert("UChatOutputSingleMessageWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OriginalTextColor");
searchTrie.insert("ULobbyChat");
searchTrie.insert("ULobbyChat");
searchTrie.insert("NumChatLogMessages");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeAtLastMessageReceived");
searchTrie.insert("ULobbySlot");
searchTrie.insert("ULobbySlot");
searchTrie.insert("Status");
searchTrie.insert("");
searchTrie.insert("SlotIndex");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FTextAndSound");
searchTrie.insert("FTextAndSound");
searchTrie.insert("FTextAndSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ULobbyWidget");
searchTrie.insert("ULobbyWidget");
searchTrie.insert("SINGLEPLAYER_DEFAULT_LOBBY_NAME");
searchTrie.insert("DEFAULT_NUM_CPU_OPPONENTS");
searchTrie.insert("DEFAULT_CPU_DIFFICULTY");
searchTrie.insert("DEFAULT_TEAM");
searchTrie.insert("LobbyType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Map");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_CannotStartMatchWidget");
searchTrie.insert("TimerHandle_CannotStartMatchSound");
searchTrie.insert("bAreSlotsLocked");
searchTrie.insert("NumPlayersWhenStartMatchButtonPressed");
searchTrie.insert("ULoadingScreen");
searchTrie.insert("");
searchTrie.insert("ULobbyInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ULobbyBrowserWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsFindingSessions");
searchTrie.insert("UPasswordEntryWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ULobbyCreationWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMainMenuWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPlayerStartWidget");
searchTrie.insert("UPlayerStartWidget");
searchTrie.insert("PlayerStartUniqueID");
searchTrie.insert("AssignedLobbySlot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMapInfoWidget");
searchTrie.insert("UMapInfoWidget");
searchTrie.insert("");
searchTrie.insert("MapInfo");
searchTrie.insert("");
searchTrie.insert("bIsDisplayingPlayerStarts");
searchTrie.insert("");
searchTrie.insert("MinimapImageScreenLoc");
searchTrie.insert("MinimapImageScreenDim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMapSelectionWidget");
searchTrie.insert("UMapSelectionWidget");
searchTrie.insert("CurrentMapInfo");
searchTrie.insert("bHasSetupMapInfoList");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMatchRulesWidget");
searchTrie.insert("bIsForLobby");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Menus");
searchTrie.insert("PALETTE_CATEGORY");
searchTrie.insert("BLANK_TEXT");
searchTrie.insert("UMenuButton");
searchTrie.insert("UMenuButton");
searchTrie.insert("UMenuTextBox");
searchTrie.insert("UMenuEditableText");
searchTrie.insert("UConfirmExitToOS_YesButton");
searchTrie.insert("UConfirmExitToOS_NoButton");
searchTrie.insert("UNicknameEntryWidget");
searchTrie.insert("");
searchTrie.insert("NextWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPopupWidget");
searchTrie.insert("UPopupWidget");
searchTrie.insert("ShowAnimFullName");
searchTrie.insert("HideAnimFullName");
searchTrie.insert("SingleAnimFullName");
searchTrie.insert("");
searchTrie.insert("OriginalTextColor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AnimStatus");
searchTrie.insert("ShowDuration");
searchTrie.insert("TimerHandle_Hide");
searchTrie.insert("USingleAudioClassWidget");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UAudioSettingsWidget");
searchTrie.insert("PC");
searchTrie.insert("SingleAudioClassWidgets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleControlSettingWidgetBase");
searchTrie.insert("USingleControlSettingWidgetBase");
searchTrie.insert("PC");
searchTrie.insert("ControlSettingsWidget");
searchTrie.insert("");
searchTrie.insert("SettingInfo");
searchTrie.insert("");
searchTrie.insert("USingleBoolControlSettingWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AdjustLeftButtonOriginalOpacity");
searchTrie.insert("AdjustRightButtonOriginalOpacity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleFloatControlSettingWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DecreaseButtonOriginalOpacity");
searchTrie.insert("IncreaseButtonOriginalOpacity");
searchTrie.insert("");
searchTrie.insert("UControlSettingsWidget");
searchTrie.insert("UControlSettingsWidget");
searchTrie.insert("SingleSettingWidgets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UGameSettingsWidget");
searchTrie.insert("GI");
searchTrie.insert("");
searchTrie.insert("TextBoxPlayerAliasOriginalOpacity");
searchTrie.insert("USingleKeyBindingWidget");
searchTrie.insert("USingleKeyBindingWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PC");
searchTrie.insert("OwningWidget");
searchTrie.insert("BindingInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumKeyElementWidgetsBound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BorderKeyElements[7]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPressAnyKeyWidget");
searchTrie.insert("");
searchTrie.insert("URebindingCollisionWidget");
searchTrie.insert("PC");
searchTrie.insert("KeyBindingsWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UKeyBindingsWidget");
searchTrie.insert("PRESS_ANY_KEY_WIDGET_Z_ORDER");
searchTrie.insert("REBINDING_COLLISION_WIDGET_Z_ORDER");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("BindingWidgets");
searchTrie.insert("PressAnyKeyWidget");
searchTrie.insert("RebindingCollisionWidget");
searchTrie.insert("PendingRebindInstigator");
searchTrie.insert("PendingKey");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleMenuOutputMessageWidget");
searchTrie.insert("USingleMenuOutputMessageWidget");
searchTrie.insert("OwningWidget");
searchTrie.insert("");
searchTrie.insert("ShowAnimName");
searchTrie.insert("ShowAnim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMenuOutputWidget");
searchTrie.insert("UMenuOutputWidget");
searchTrie.insert("PC");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("WarningMessages");
searchTrie.insert("NumWarningMessages");
searchTrie.insert("");
searchTrie.insert("USettingsSubmenuBase");
searchTrie.insert("USettingsConfirmationWidget_Exit");
searchTrie.insert("PC");
searchTrie.insert("SettingsMenu");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USettingsConfirmationWidget_ResetToDefaults");
searchTrie.insert("PC");
searchTrie.insert("SettingsMenu");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USettingsWidget");
searchTrie.insert("USettingsWidget");
searchTrie.insert("RESET_TO_DEFAULTS_CONFIRMATION_WIDGET_Z_ORDER");
searchTrie.insert("EXIT_CONFIRMATION_WIDGET_Z_ORDER");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SubmenuToShowOnNextOpen");
searchTrie.insert("");
searchTrie.insert("ConfirmationWidget_Exit");
searchTrie.insert("");
searchTrie.insert("ConfirmationWidget_ResetToDefaults");
searchTrie.insert("");
searchTrie.insert("FVideoSettingInfoBase");
searchTrie.insert("FVideoSettingInfoBase");
searchTrie.insert("");
searchTrie.insert("DisplayName");
searchTrie.insert("FVideoSetting_WindowMode");
searchTrie.insert("FVideoSetting_WindowMode");
searchTrie.insert("FVideoSetting_Resolution");
searchTrie.insert("FVideoSetting_Resolution");
searchTrie.insert("ResolutionsArray");
searchTrie.insert("CurrentResolutionIndex");
searchTrie.insert("FVideoSetting_OverallQuality");
searchTrie.insert("FVideoSetting_OverallQuality");
searchTrie.insert("ValueBeforeSwitchingToCustom");
searchTrie.insert("FVideoSetting_FoliageQuality");
searchTrie.insert("FVideoSetting_FoliageQuality");
searchTrie.insert("FVideoSetting_FrameRateLimit");
searchTrie.insert("FVideoSetting_FrameRateLimit");
searchTrie.insert("MIN");
searchTrie.insert("MAX");
searchTrie.insert("STEP_SIZE");
searchTrie.insert("FVideoSetting_AntiAliasingQuality");
searchTrie.insert("FVideoSetting_AntiAliasingQuality");
searchTrie.insert("FVideoSetting_ShadowQuality");
searchTrie.insert("FVideoSetting_ShadowQuality");
searchTrie.insert("FVideoSetting_ViewDistanceQuality");
searchTrie.insert("FVideoSetting_ViewDistanceQuality");
searchTrie.insert("FVideoSetting_TextureQuality");
searchTrie.insert("FVideoSetting_TextureQuality");
searchTrie.insert("FVideoSetting_VisualEffectQuality");
searchTrie.insert("FVideoSetting_VisualEffectQuality");
searchTrie.insert("FVideoSetting_PostProcessingQuality");
searchTrie.insert("FVideoSetting_PostProcessingQuality");
searchTrie.insert("FVideoSetting_VSync");
searchTrie.insert("FVideoSetting_VSync");
searchTrie.insert("USingleVideoSettingWidget");
searchTrie.insert("PC");
searchTrie.insert("VideoSettingsWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AdjustLeftButtonOriginalOpacity");
searchTrie.insert("AdjustRightButtonOriginalOpacity");
searchTrie.insert("");
searchTrie.insert("SettingInfo");
searchTrie.insert("");
searchTrie.insert("UVideoSettingsWidget");
searchTrie.insert("UVideoSettingsWidget");
searchTrie.insert("");
searchTrie.insert("SingleSettingWidgets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SettingInfo_WindowMode");
searchTrie.insert("SettingInfo_Resolution");
searchTrie.insert("SettingInfo_OverallQuality");
searchTrie.insert("SettingInfo_FoliageQuality");
searchTrie.insert("SettingInfo_FramerateLimit");
searchTrie.insert("SettingInfo_AntiAliasingQuality");
searchTrie.insert("SettingInfo_ShadowQuality");
searchTrie.insert("SettingInfo_ViewDistanceQuality");
searchTrie.insert("SettingInfo_TextureQuality");
searchTrie.insert("SettingInfo_VisualEffectQuality");
searchTrie.insert("SettingInfo_PostProcessingQuality");
searchTrie.insert("SettingInfo_VSync");
searchTrie.insert("USelectableWidgetComponent");
searchTrie.insert("USelectableWidgetComponent");
searchTrie.insert("");
searchTrie.insert("UWorldWidget");
searchTrie.insert("UWorldWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SelectableMaxHealth");
searchTrie.insert("");
searchTrie.insert("FRTS_Ver2EditorModule");
searchTrie.insert("EPlayerSpawnRule");
searchTrie.insert("Random");
searchTrie.insert("NearTeammates");
searchTrie.insert("EPropertyOverrideMode");
searchTrie.insert("UseDefaultIfNotSet");
searchTrie.insert("AlwaysUseDefault");
searchTrie.insert("EPIEOnMapSelectableSetupResult");
searchTrie.insert("None");
searchTrie.insert("OwnerIndexTooHigh");
searchTrie.insert("ObserverOwner");
searchTrie.insert("WrongFaction");
searchTrie.insert("Success");
searchTrie.insert("EPlayerType");
searchTrie.insert("Unknown");
searchTrie.insert("Player");
searchTrie.insert("Observer");
searchTrie.insert("ERotationDirection");
searchTrie.insert("NoDirectionEstablished");
searchTrie.insert("Clockwise");
searchTrie.insert("CounterClockwise");
searchTrie.insert("");
searchTrie.insert("ResetTiles");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("0");
searchTrie.insert("RevealTilesFromBuildings");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("1");
searchTrie.insert("RevealTilesFromInfantry");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("2");
searchTrie.insert("TickAndRevealTilesFromTemporaryRevealEffects");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("3");
searchTrie.insert("StoreTileVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("4");
searchTrie.insert("QueueUpRenderingFogOfWar");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("5");
searchTrie.insert("StoreHostileTeamSelectableVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("6");
searchTrie.insert("StoreProjectilesVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("7");
searchTrie.insert("StoreParticleSystemsVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("8");
searchTrie.insert("StoreInventoryItemVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("9");
searchTrie.insert("Finished");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("10");
searchTrie.insert("");
searchTrie.insert("ResearchedFromBuilding");
searchTrie.insert("CommanderAbility");
searchTrie.insert("");
searchTrie.insert("Uninitialized");
searchTrie.insert("False");
searchTrie.insert("True");
searchTrie.insert("EDamageDealingRule");
searchTrie.insert("AbsoluteAmount");
searchTrie.insert("PercentageOfSelectableResourceAmountDrained");
searchTrie.insert("EUnitState");
searchTrie.insert("BehaviorNotStarted");
searchTrie.insert("MovingToBarracksInitialPoint");
searchTrie.insert("MovingToBarracksRallyPoint");
searchTrie.insert("PossessedUnitDestroyed");
searchTrie.insert("Idle_WithoutTarget");
searchTrie.insert("Idle_WithTarget");
searchTrie.insert("Idle_ReturningToLeashLocation");
searchTrie.insert("HoldingPositionWithoutTarget");
searchTrie.insert("HoldingPositionWithTarget");
searchTrie.insert("MovingToRightClickLocation");
searchTrie.insert("MovingToPointNearStaticSelectable");
searchTrie.insert("MoveCommandToFriendlyMobileSelectable");
searchTrie.insert("RightClickOnEnemy");
searchTrie.insert("AttackMoveCommand_WithNoTargetAquired");
searchTrie.insert("AttackMoveCommand_WithTargetAquired");
searchTrie.insert("AttackMoveCommand_ReturningToLeashLocation");
searchTrie.insert("HeadingToContextCommandWorldLocation");
searchTrie.insert("ChasingTargetToDoContextCommand");
searchTrie.insert("HeadingToBuildingToDoBuildingTargetingAbility");
searchTrie.insert("HeadingToBuildingToEnterItsGarrison");
searchTrie.insert("InsideBuildingGarrison");
searchTrie.insert("HeadingToResourceSpot");
searchTrie.insert("WaitingToGatherResources");
searchTrie.insert("GatheringResources");
searchTrie.insert("ReturningToResourceDepot");
searchTrie.insert("DroppingOfResources");
searchTrie.insert("HeadingToConstructionSite");
searchTrie.insert("HeadingToPotentialConstructionSite");
searchTrie.insert("WaitingForFoundationsToBePlaced");
searchTrie.insert("ConstructingBuilding");
searchTrie.insert("DoingContextActionAnim");
searchTrie.insert("DoingSpecialBuildingTargetingAbility");
searchTrie.insert("GoingToPickUpInventoryItem");
searchTrie.insert("PickingUpInventoryItem");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EUnitAnimState");
searchTrie.insert("NotPlayingImportantAnim");
searchTrie.insert("DoingAttackAnim");
searchTrie.insert("DoingInterruptibleContextActionAnim");
searchTrie.insert("DoingUninterruptibleContextActionAnim");
searchTrie.insert("DoingInterruptibleBuildingTargetingAbilityAnim");
searchTrie.insert("PlayingGatheringResourcesAnim");
searchTrie.insert("PlayingDropOffResourcesAnim");
searchTrie.insert("ConstructingBuildingAnim");
searchTrie.insert("EDistanceCheckMethod");
searchTrie.insert("Closest");
searchTrie.insert("Furtherest");
searchTrie.insert("ETargetAquireMethodPriorties");
searchTrie.insert("None");
searchTrie.insert("LeastRotationRequired");
searchTrie.insert("HasAttack");
searchTrie.insert("Distance");
searchTrie.insert("HasAttack_LeastRotationRequired");
searchTrie.insert("HasAttack_Distance");
searchTrie.insert("ETargetLocationZAxisOption");
searchTrie.insert("DoNothing");
searchTrie.insert("LineTrace");
searchTrie.insert("");
searchTrie.insert("Uninitialized");
searchTrie.insert("False");
searchTrie.insert("True");
searchTrie.insert("");
searchTrie.insert("Phase1_MovingToTarget");
searchTrie.insert("Phase2_Descending");
searchTrie.insert("Phase3_Firing");
searchTrie.insert("Phase4_PostFired");
searchTrie.insert("EPreciseProjectileMovementMode");
searchTrie.insert("StraightLine");
searchTrie.insert("CurveAssets");
searchTrie.insert("EArcingProjectileTrajectoryMethod");
searchTrie.insert("ChooseInitialVelocity");
searchTrie.insert("ChooseArc");
searchTrie.insert("ENoCollisionProjectileMode");
searchTrie.insert("StraightFiringAtTarget");
searchTrie.insert("StraightFiringAtLocation");
searchTrie.insert("ArcedFiringAtLocation");
searchTrie.insert("ArcedFiringAtLocation");
searchTrie.insert("");
searchTrie.insert("HitSomething");
searchTrie.insert("OutsideWorldBounds");
searchTrie.insert("ECPUPlayerState");
searchTrie.insert("None");
searchTrie.insert("Normal");
searchTrie.insert("InfastructureUnrecoverable");
searchTrie.insert("EconomyUnrecoverable");
searchTrie.insert("InfastructureUnrecoverableAndArmyProductionImpossible");
searchTrie.insert("");
searchTrie.insert("None");
searchTrie.insert("SingleLineComment");
searchTrie.insert("MultiLineComment");
searchTrie.insert("");
searchTrie.insert("Private");
searchTrie.insert("Protected");
searchTrie.insert("Public");
searchTrie.insert("");
searchTrie.insert("Reference");
searchTrie.insert("Pointer");
searchTrie.insert("ConstPointer");
searchTrie.insert("");
searchTrie.insert("Class");
searchTrie.insert("Struct");
searchTrie.insert("Enum");
searchTrie.insert("Function");
searchTrie.insert("Variable");
searchTrie.insert("EnumValue");
searchTrie.insert("EActionToTakeAfterDestroySession");
searchTrie.insert("None");
searchTrie.insert("ReturnToLobbyBrowsingScreen");
searchTrie.insert("HostToMainMenuClientsToLobbyBrowsing");
searchTrie.insert("CreateNewSession");
searchTrie.insert("EClassRepNodeMapping");
searchTrie.insert("NotRouted");
searchTrie.insert("RelevantAllConnections");
searchTrie.insert("RelevantOwnerOnly");
searchTrie.insert("PlayerOwnedSelectable_Building");
searchTrie.insert("PlayerOwnedSelectable_Infantry");
searchTrie.insert("ETestRepPolicy");
searchTrie.insert("NotRouted");
searchTrie.insert("RelevantOwnerOnly");
searchTrie.insert("RelevantAllConnections");
searchTrie.insert("RelevantAllConnections");
searchTrie.insert("");
searchTrie.insert("PlayerOnly");
searchTrie.insert("ObserverOnly");
searchTrie.insert("PlayerAndObserver");
searchTrie.insert("EKeyMappingAction");
searchTrie.insert("None");
searchTrie.insert("LMB");
searchTrie.insert("RMB");
searchTrie.insert("ZoomCameraIn");
searchTrie.insert("ZoomCameraOut");
searchTrie.insert("EnableCameraLookAround");
searchTrie.insert("ResetCameraRotationToOriginal");
searchTrie.insert("ResetCameraZoomToOriginal");
searchTrie.insert("ResetCameraRotationAndZoomToOriginal");
searchTrie.insert("OpenTeamChat");
searchTrie.insert("OpenAllChat");
searchTrie.insert("OpenPauseMenuSlashCancel");
searchTrie.insert("InstaQuitGame");
searchTrie.insert("ShowDevelopmentCheatWidget");
searchTrie.insert("OpenCommanderSkillTree");
searchTrie.insert("CloseCommanderSkillTree");
searchTrie.insert("ToggleCommanderSkillTree");
searchTrie.insert("AssignControlGroup0");
searchTrie.insert("AssignControlGroup1");
searchTrie.insert("AssignControlGroup2");
searchTrie.insert("AssignControlGroup3");
searchTrie.insert("AssignControlGroup4");
searchTrie.insert("AssignControlGroup5");
searchTrie.insert("AssignControlGroup6");
searchTrie.insert("AssignControlGroup7");
searchTrie.insert("AssignControlGroup8");
searchTrie.insert("AssignControlGroup9");
searchTrie.insert("SelectControlGroup0");
searchTrie.insert("SelectControlGroup1");
searchTrie.insert("SelectControlGroup2");
searchTrie.insert("SelectControlGroup3");
searchTrie.insert("SelectControlGroup4");
searchTrie.insert("SelectControlGroup5");
searchTrie.insert("SelectControlGroup6");
searchTrie.insert("SelectControlGroup7");
searchTrie.insert("SelectControlGroup8");
searchTrie.insert("SelectControlGroup9");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EKeyMappingAxis");
searchTrie.insert("None");
searchTrie.insert("MouseMoveX");
searchTrie.insert("MouseMoveY");
searchTrie.insert("MoveCameraLeft");
searchTrie.insert("MoveCameraRight");
searchTrie.insert("MoveCameraForward");
searchTrie.insert("MoveCameraBackward");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EVariableType");
searchTrie.insert("None");
searchTrie.insert("Bool");
searchTrie.insert("Float");
searchTrie.insert("EDependencyRequirementType");
searchTrie.insert("Bool");
searchTrie.insert("Float_IsLessThanOrEqualTo");
searchTrie.insert("Float_IsLessThan");
searchTrie.insert("Float_IsEqualTo");
searchTrie.insert("Float_IsGreaterThan");
searchTrie.insert("Float_IsGreaterThanOrEqualTo");
searchTrie.insert("EGameStartType");
searchTrie.insert("HasNotStartedGameBefore");
searchTrie.insert("HasStartedGameBefore");
searchTrie.insert("HasStartedGameBefore");
searchTrie.insert("EFaction");
searchTrie.insert("None");
searchTrie.insert("Humans");
searchTrie.insert("Monsters");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ETeam");
searchTrie.insert("Uninitialized");
searchTrie.insert("Team1");
searchTrie.insert("Team2");
searchTrie.insert("Team3");
searchTrie.insert("Team4");
searchTrie.insert("Neutral");
searchTrie.insert("Observer");
searchTrie.insert("EBuildingType");
searchTrie.insert("HumanMain");
searchTrie.insert("HumanSupplyDepot");
searchTrie.insert("HumanPowerPlant");
searchTrie.insert("HumanBarracks");
searchTrie.insert("HumanRadar");
searchTrie.insert("HumanAirForceBase");
searchTrie.insert("HumanMissleSilo");
searchTrie.insert("HumanTurret");
searchTrie.insert("HumanMissleTurret");
searchTrie.insert("HumanSniperNest");
searchTrie.insert("MonstersMain");
searchTrie.insert("MonstersBarracks");
searchTrie.insert("MonstersAdvancedBarracks");
searchTrie.insert("MonstersItemShop");
searchTrie.insert("MonstersSpecialBarracks");
searchTrie.insert("MonstersSandDepot");
searchTrie.insert("MonstersSuperweapon");
searchTrie.insert("MonstersObelisk");
searchTrie.insert("ResourceSpot");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("NotBuilding");
searchTrie.insert("EUnitType");
searchTrie.insert("None");
searchTrie.insert("HumanWorker");
searchTrie.insert("HumanCollector");
searchTrie.insert("HumanBasic");
searchTrie.insert("HumanSniper");
searchTrie.insert("HumanRecon");
searchTrie.insert("HumanSpellcaster");
searchTrie.insert("HumanSpecial");
searchTrie.insert("MonstersCollector");
searchTrie.insert("MonstersMelee");
searchTrie.insert("MonstersBasicInfantry");
searchTrie.insert("MonstersHeavyInfantry");
searchTrie.insert("MonstersMedic");
searchTrie.insert("MonstersSpecial");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("NotUnit");
searchTrie.insert("EUpgradeType");
searchTrie.insert("ImprovedBasicInfantryDamage");
searchTrie.insert("ImprovedSniperFireRate");
searchTrie.insert("ImprovedSpellcasterManaRegenRate");
searchTrie.insert("ImprovedCollectorResourceCapacity");
searchTrie.insert("UnlockTrainMonstersMelee");
searchTrie.insert("UnlockTrainSnipers");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("None");
searchTrie.insert("EInventoryItem");
searchTrie.insert("Shoes");
searchTrie.insert("SimpleBangle");
searchTrie.insert("RedGem");
searchTrie.insert("GreenGem");
searchTrie.insert("RottenPumpkin");
searchTrie.insert("Apple");
searchTrie.insert("AverageCrown");
searchTrie.insert("GoldenCrown");
searchTrie.insert("Necklace");
searchTrie.insert("GoldBar");
searchTrie.insert("GoldenDagger");
searchTrie.insert("StrongSniperRifle");
searchTrie.insert("ArtilleryBeacon");
searchTrie.insert("None");
searchTrie.insert("EResourceType");
searchTrie.insert("None");
searchTrie.insert("Cash");
searchTrie.insert("Sand");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EHousingResourceType");
searchTrie.insert("None");
searchTrie.insert("Population");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ECPUDifficulty");
searchTrie.insert("None");
searchTrie.insert("DoesNothing");
searchTrie.insert("Easy");
searchTrie.insert("Medium");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ETargetingType");
searchTrie.insert("None");
searchTrie.insert("Default");
searchTrie.insert("BiologicalInfantry");
searchTrie.insert("MechanicalInfantry");
searchTrie.insert("BiologicalAndMechanicalInfantry");
searchTrie.insert("Building");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EArmourType");
searchTrie.insert("None");
searchTrie.insert("Default");
searchTrie.insert("Building");
searchTrie.insert("SuperweaponBuilding");
searchTrie.insert("Infantry");
searchTrie.insert("HeavyInfantry");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EHUDPersistentTabType");
searchTrie.insert("None");
searchTrie.insert("Buildings");
searchTrie.insert("Units");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAnimation");
searchTrie.insert("None");
searchTrie.insert("Idle");
searchTrie.insert("Moving");
searchTrie.insert("Attack");
searchTrie.insert("Destroyed");
searchTrie.insert("GatheringResources");
searchTrie.insert("ConstructBuilding");
searchTrie.insert("PickingUpInventoryItem");
searchTrie.insert("MovingWithResources");
searchTrie.insert("DropOffResources");
searchTrie.insert("ContextAction_1");
searchTrie.insert("ContextAction_2");
searchTrie.insert("ContextAction_3");
searchTrie.insert("Throw");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EBuildingAnimation");
searchTrie.insert("None");
searchTrie.insert("Construction");
searchTrie.insert("Idle");
searchTrie.insert("OpenDoor");
searchTrie.insert("Destroyed");
searchTrie.insert("OpenMissleSiloDoor");
searchTrie.insert("CloseMissleSiloDoor");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("SinkIntoGround");
searchTrie.insert("EContextButton");
searchTrie.insert("None");
searchTrie.insert("Heal");
searchTrie.insert("ArtilleryStrike");
searchTrie.insert("Dash");
searchTrie.insert("Haste");
searchTrie.insert("Corruption");
searchTrie.insert("StealthSelf");
searchTrie.insert("Cleanse");
searchTrie.insert("IceBarrier");
searchTrie.insert("DeathAura");
searchTrie.insert("Death");
searchTrie.insert("Blizzard");
searchTrie.insert("ManaBurn");
searchTrie.insert("EatRottenPumpkin");
searchTrie.insert("EatApple");
searchTrie.insert("LightningStrike");
searchTrie.insert("FinishingBlow");
searchTrie.insert("CullingBlade");
searchTrie.insert("RadarScan");
searchTrie.insert("Nuke");
searchTrie.insert("HealOverTime");
searchTrie.insert("IncreasingHealOverTime");
searchTrie.insert("Beserk");
searchTrie.insert("Sacrifice");
searchTrie.insert("Tribute");
searchTrie.insert("BeaconArtilleryStrike");
searchTrie.insert("AttackMove");
searchTrie.insert("HoldPosition");
searchTrie.insert("BuildBuilding");
searchTrie.insert("Train");
searchTrie.insert("Upgrade");
searchTrie.insert("z_ALWAYS_3RD_LAST_IN_ENUM");
searchTrie.insert("PlacingGhost");
searchTrie.insert("RecentlyExecuted");
searchTrie.insert("RecentlyExecuted");
searchTrie.insert("ECommanderAbility");
searchTrie.insert("None");
searchTrie.insert("Human_ArtilleryStrike_Rank1");
searchTrie.insert("Human_ArtilleryStrike_Rank2");
searchTrie.insert("Human_ResourceSteal");
searchTrie.insert("Monsters_Explosion_Rank1");
searchTrie.insert("Monsters_Explosion_Rank2");
searchTrie.insert("Monsters_Frenzy_Rank1");
searchTrie.insert("Monsters_Frenzy_Rank2");
searchTrie.insert("Monsters_Frenzy_Rank3");
searchTrie.insert("Monsters_GlobalFrenzy");
searchTrie.insert("Monsters_DestroyAllPlayersCollectors");
searchTrie.insert("Monsters_MakeUnitInvulnerable");
searchTrie.insert("Monsters_KillUnit");
searchTrie.insert("Human_AirshipBarrage");
searchTrie.insert("Monsters_UnlockTrainMelee");
searchTrie.insert("Humans_Snipers_Rank1");
searchTrie.insert("Humans_Snipers_Rank2");
searchTrie.insert("Human_Warthog");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ECommanderSkillTreeNodeType");
searchTrie.insert("None");
searchTrie.insert("Human_ArtilleryStrike");
searchTrie.insert("Human_ResourceSteal");
searchTrie.insert("Monsters_Explosion");
searchTrie.insert("Monsters_Frenzy");
searchTrie.insert("Monsters_GlobalFrenzy");
searchTrie.insert("Monsters_DestroyAllPlayersCollectors");
searchTrie.insert("Monsters_MakeUnitInvulnerable");
searchTrie.insert("Monsters_KillUnit");
searchTrie.insert("Human_AirshipBarrage");
searchTrie.insert("Monsters_UnlockTrainMelee");
searchTrie.insert("Humans_UnlockTrainSnipers");
searchTrie.insert("Human_Warthog");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EBuildingTargetingAbility");
searchTrie.insert("None");
searchTrie.insert("StealResources");
searchTrie.insert("DealDamage");
searchTrie.insert("DealDamage");
searchTrie.insert("EAbilityRequirement");
searchTrie.insert("Uninitialized");
searchTrie.insert("NoMissingRequirement");
searchTrie.insert("BuffOrDebuffNotPresent");
searchTrie.insert("TargetMustUseMana");
searchTrie.insert("RequiresTargetWithHealth");
searchTrie.insert("TargetsHealthNotLowEnough");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EStaticBuffAndDebuffType");
searchTrie.insert("None");
searchTrie.insert("HoldingResources");
searchTrie.insert("ThePlague");
searchTrie.insert("Disease");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ETickableBuffAndDebuffType");
searchTrie.insert("None");
searchTrie.insert("Dash");
searchTrie.insert("Haste");
searchTrie.insert("BasicHealOverTime");
searchTrie.insert("IncreasingHealOverTime");
searchTrie.insert("CleansersMight");
searchTrie.insert("PainOverTime");
searchTrie.insert("Corruption");
searchTrie.insert("NearInvulnerability");
searchTrie.insert("RottenPumpkinEatEffect");
searchTrie.insert("TempStealth");
searchTrie.insert("Beserk");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EBuffAndDebuffSubType");
searchTrie.insert("Default");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAbilityOutcome");
searchTrie.insert("Default");
searchTrie.insert("CullingBlade_BelowThreshold");
searchTrie.insert("CullingBlade_AboveThreshold");
searchTrie.insert("DidNotKill");
searchTrie.insert("DidKill");
searchTrie.insert("DidKill");
searchTrie.insert("EBuffOrDebuffApplicationOutcome");
searchTrie.insert("Failure");
searchTrie.insert("ResetDuration");
searchTrie.insert("Success");
searchTrie.insert("AlreadyHasIt");
searchTrie.insert("CullingBlade_Kill");
searchTrie.insert("CullingBlade_DealDamage");
searchTrie.insert("CullingBlade_DealDamage");
searchTrie.insert("EBuffOrDebuffTickOutcome");
searchTrie.insert("StandardOutcome");
searchTrie.insert("PainOverTime_KilledTargetAndGotHeal");
searchTrie.insert("PainOverTime_KilledTargetButNoHeal");
searchTrie.insert("EBuffOrDebuffRemovalOutcome");
searchTrie.insert("NotPresent");
searchTrie.insert("Failure");
searchTrie.insert("Success");
searchTrie.insert("Cleanse_ResetDurationOfCleansersMight");
searchTrie.insert("Cleanse_FreshApplicationOfCleansersMight");
searchTrie.insert("Cleanse_FreshApplicationOfCleansersMight");
searchTrie.insert("EBuffAndDebuffRemovalReason");
searchTrie.insert("Expired");
searchTrie.insert("TargetDied");
searchTrie.insert("CleanseSpell");
searchTrie.insert("Test");
searchTrie.insert("Test");
searchTrie.insert("ESelectableBodySocket");
searchTrie.insert("None");
searchTrie.insert("Floor");
searchTrie.insert("Middle");
searchTrie.insert("Head");
searchTrie.insert("AboveHead_DoesNotRotate");
searchTrie.insert("Floor_DoesNotRotate");
searchTrie.insert("NukeLaunchSite");
searchTrie.insert("NukeLaunchSite");
searchTrie.insert("EStartingResourceAmount");
searchTrie.insert("Default");
searchTrie.insert("Low");
searchTrie.insert("Medium");
searchTrie.insert("High");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("DevelopmentSettings");
searchTrie.insert("EDefeatCondition");
searchTrie.insert("None");
searchTrie.insert("NoCondition");
searchTrie.insert("AllBuildingsDestroyed");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ESelectableResourceType");
searchTrie.insert("Mana");
searchTrie.insert("None");
searchTrie.insert("None");
searchTrie.insert("EBuildingNetworkType");
searchTrie.insert("None");
searchTrie.insert("HumanBarracks");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMouseCursorType");
searchTrie.insert("None");
searchTrie.insert("SciFi_Default");
searchTrie.insert("SciFi_BlueOutline");
searchTrie.insert("SciFi_RedCross");
searchTrie.insert("SciFi_QuestionMark");
searchTrie.insert("SciFi_BlueCrosshair");
searchTrie.insert("SciFi_EdgeScrollUp");
searchTrie.insert("SciFi_EdgeScrollUpRight");
searchTrie.insert("SciFi_EdgeScrollRight");
searchTrie.insert("SciFi_EdgeScrollDownRight");
searchTrie.insert("SciFi_EdgeScrollDown");
searchTrie.insert("SciFi_EdgeScrollDownLeft");
searchTrie.insert("SciFi_EdgeScrollLeft");
searchTrie.insert("SciFi_EdgeScrollUpLeft");
searchTrie.insert("EnterGarrison");
searchTrie.insert("CashHack");
searchTrie.insert("CommandoBomb");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EControlSettingType");
searchTrie.insert("None");
searchTrie.insert("CameraPanSpeed_Keyboard");
searchTrie.insert("CameraPanSpeed_Mouse");
searchTrie.insert("CameraMaxSpeed");
searchTrie.insert("bEnableCameraMovementLag");
searchTrie.insert("CameraMovementLagSpeed");
searchTrie.insert("CameraTurningBoost");
searchTrie.insert("CameraZoomIncrementalAmount");
searchTrie.insert("CameraZoomSpeed");
searchTrie.insert("MMBLookYawSensitivity");
searchTrie.insert("MMBLookPitchSensitivity");
searchTrie.insert("bInvertMMBLookYaw");
searchTrie.insert("bInvertMMBLookPitch");
searchTrie.insert("bEnableMMBLookLag");
searchTrie.insert("MMBLookLagAmount");
searchTrie.insert("DefaultCameraPitch");
searchTrie.insert("DefaultCameraZoomAmount");
searchTrie.insert("ResetCameraToDefaultSpeed");
searchTrie.insert("CameraEdgeMovementThreshold");
searchTrie.insert("CameraAcceleration");
searchTrie.insert("CameraDeceleration");
searchTrie.insert("DoubleClickTime");
searchTrie.insert("MouseMovementThreshold");
searchTrie.insert("GhostRotationRadius");
searchTrie.insert("GhostRotationSpeed");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EItemAquireReason");
searchTrie.insert("PurchasedFromShop");
searchTrie.insert("CombinedFromOthers");
searchTrie.insert("PickedUpOffGround");
searchTrie.insert("MagicallyCreated");
searchTrie.insert("MagicallyCreated");
searchTrie.insert("EItemRemovalReason");
searchTrie.insert("DroppedOnDeath");
searchTrie.insert("Ingredient");
searchTrie.insert("RemovedOnZeroCharges");
searchTrie.insert("Sold");
searchTrie.insert("Sold");
searchTrie.insert("EItemEntersWorldReason");
searchTrie.insert("DroppedOnDeath");
searchTrie.insert("ExplicitlyDropped");
searchTrie.insert("ExplicitlyDropped");
searchTrie.insert("EItemChangesNumChargesReason");
searchTrie.insert("Use");
searchTrie.insert("Use");
searchTrie.insert("ELobbySlotStatus");
searchTrie.insert("JustInitialized");
searchTrie.insert("Human");
searchTrie.insert("CPU");
searchTrie.insert("Open");
searchTrie.insert("Closed");
searchTrie.insert("Closed");
searchTrie.insert("EMatchType");
searchTrie.insert("None");
searchTrie.insert("Offline");
searchTrie.insert("LAN");
searchTrie.insert("SteamOnline");
searchTrie.insert("ELoadingStatus");
searchTrie.insert("None");
searchTrie.insert("LoadingPersistentMap");
searchTrie.insert("WaitingForAllPlayersToConnect");
searchTrie.insert("WaitingForPlayerControllerClientSetupForMatchAcknowledgementFromAllPlayers");
searchTrie.insert("WaitingForAllPlayersToStreamInLevel");
searchTrie.insert("WaitingForInitialValuesAcknowledgementFromAllPlayers");
searchTrie.insert("WaitingForFinalSetupAcks");
searchTrie.insert("SpawningStartingSelectables");
searchTrie.insert("ShowingBlackScreenRightBeforeMatchStart");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAffiliation");
searchTrie.insert("Unknown");
searchTrie.insert("Owned");
searchTrie.insert("Allied");
searchTrie.insert("Neutral");
searchTrie.insert("Hostile");
searchTrie.insert("Observed");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EWidgetType");
searchTrie.insert("Lobby");
searchTrie.insert("PasswordEntry");
searchTrie.insert("ConfirmExitFromLobby");
searchTrie.insert("LobbyCreationScreen");
searchTrie.insert("MapSelectionScreen");
searchTrie.insert("LobbyBrowser");
searchTrie.insert("MainMenu");
searchTrie.insert("Settings");
searchTrie.insert("Profile");
searchTrie.insert("GameMessage");
searchTrie.insert("NicknameEntryScreen");
searchTrie.insert("PlayMenu");
searchTrie.insert("LoadingScreen");
searchTrie.insert("ConfirmExitToOS");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMatchWidgetType");
searchTrie.insert("None");
searchTrie.insert("HUD");
searchTrie.insert("CommanderSkillTree_Ver2");
searchTrie.insert("Defeat");
searchTrie.insert("EndOfMatch");
searchTrie.insert("PauseMenu");
searchTrie.insert("Settings");
searchTrie.insert("ConfirmReturnToMainMenu");
searchTrie.insert("z_ALWAYS_3RD_LAST_IN_ENUM");
searchTrie.insert("DevelopmentCheats");
searchTrie.insert("DevelopmentCheatsPopupMenu");
searchTrie.insert("EProductionQueueType");
searchTrie.insert("None");
searchTrie.insert("Persistent");
searchTrie.insert("Context");
searchTrie.insert("EMessageType");
searchTrie.insert("None");
searchTrie.insert("GameNotification");
searchTrie.insert("GameWarning");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EGameNotification");
searchTrie.insert("None");
searchTrie.insert("ResourceSpotDepleted");
searchTrie.insert("PlayerDefeated");
searchTrie.insert("NukeLaunchedByOurselves");
searchTrie.insert("NukeLaunchedByAllies");
searchTrie.insert("NukeLaunchedByHostiles");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EGameWarning");
searchTrie.insert("None");
searchTrie.insert("ActionOnCooldown");
searchTrie.insert("NotEnoughSelectableResources");
searchTrie.insert("PrerequisitesNotMet");
searchTrie.insert("TrainingQueueFull");
searchTrie.insert("AlreadyBeingResearched");
searchTrie.insert("FullyResearched");
searchTrie.insert("Building_InsideFog");
searchTrie.insert("Building_SelectableInTheWay");
searchTrie.insert("Building_NotCloseEnoughToBase");
searchTrie.insert("Building_GroundNotFlatEnough");
searchTrie.insert("CannotProduce");
searchTrie.insert("BuildingInProgress");
searchTrie.insert("BuildingNotReadyYet");
searchTrie.insert("InternalSelectableCapReached");
searchTrie.insert("BuildingTypeQuantityLimit");
searchTrie.insert("UnitTypeQuantityLimit");
searchTrie.insert("InvalidTarget");
searchTrie.insert("AbilityCannotTargetHostiles");
searchTrie.insert("AbilityCannotTargetFriendlies");
searchTrie.insert("CannotUseAbility");
searchTrie.insert("NoTarget");
searchTrie.insert("AbilityCannotTargetSelf");
searchTrie.insert("AbilityOutOfRange");
searchTrie.insert("AbilityLocationInsideFog");
searchTrie.insert("UserNoLongerAlive");
searchTrie.insert("UserNoLongerValid");
searchTrie.insert("TargetNoLongerAlive");
searchTrie.insert("NothingSelectedCanPickUpItem");
searchTrie.insert("TypeCannotAquireItem");
searchTrie.insert("TargetNotVisible");
searchTrie.insert("SelectionNotUnderYourControl");
searchTrie.insert("BuilderDestroyed");
searchTrie.insert("NotValid_Shop");
searchTrie.insert("ItemNotForSale");
searchTrie.insert("ItemSoldOut");
searchTrie.insert("ItemOutOfCharges");
searchTrie.insert("ItemNoLongerInInventory");
searchTrie.insert("ItemNoLongerInWorld");
searchTrie.insert("ItemOnCooldown");
searchTrie.insert("ItemNotUsable");
searchTrie.insert("NotInRangeToPurchaseFromShop");
searchTrie.insert("NotInRangeToSellToShop");
searchTrie.insert("ItemCannotBeSold");
searchTrie.insert("InventoryFull");
searchTrie.insert("CannotCarryAnymoreOfItem");
searchTrie.insert("CommanderSkillTree_MaxAbilityRankObtained");
searchTrie.insert("CommanderSkillTree_CommanderRankNotHighEnough");
searchTrie.insert("CommanderSkillTree_PrerequisitesNotMet");
searchTrie.insert("CommanderSkillTree_NotEnoughSkillPoints");
searchTrie.insert("AllAbilityChargesUsed");
searchTrie.insert("TargetPlayerHasBeenDefeated");
searchTrie.insert("TargetPlayerIsHostile");
searchTrie.insert("TargetPlayerIsAllied");
searchTrie.insert("TargetPlayerIsSelf");
searchTrie.insert("NotAllowedToRemapAction");
searchTrie.insert("WouldUnbindUnremappableAction");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("NotEnoughResources");
searchTrie.insert("EBuildingBuildMethod");
searchTrie.insert("None");
searchTrie.insert("BuildsInTab");
searchTrie.insert("BuildsItself");
searchTrie.insert("LayFoundationsInstantly");
searchTrie.insert("LayFoundationsWhenAtLocation");
searchTrie.insert("Protoss");
searchTrie.insert("EBuildingRallyPointDisplayRule");
searchTrie.insert("Always");
searchTrie.insert("OnlyWhenFullyConstructed");
searchTrie.insert("OnlyWhenFullyConstructed");
searchTrie.insert("ESelectableType");
searchTrie.insert("Building");
searchTrie.insert("Unit");
searchTrie.insert("InventoryItem");
searchTrie.insert("EFogStatus");
searchTrie.insert("0x00");
searchTrie.insert("0x01");
searchTrie.insert("0x02");
searchTrie.insert("0x03");
searchTrie.insert("EMatchResult");
searchTrie.insert("None");
searchTrie.insert("Defeat");
searchTrie.insert("Draw");
searchTrie.insert("Victory");
searchTrie.insert("EAbilityMouseAppearance");
searchTrie.insert("NoChange");
searchTrie.insert("CustomMouseCursor");
searchTrie.insert("HideAndShowDecal");
searchTrie.insert("ECommandTargetType");
searchTrie.insert("NoTarget");
searchTrie.insert("OwnedSelectable");
searchTrie.insert("AlliedSelectable");
searchTrie.insert("NeutralSelectable");
searchTrie.insert("HostileSelectable");
searchTrie.insert("ObservedSelectable");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMessageRecipients");
searchTrie.insert("None");
searchTrie.insert("TeamOnly");
searchTrie.insert("Everyone");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMarqueeBoxDrawMethod");
searchTrie.insert("BorderOnly");
searchTrie.insert("FilledRectangleOnly");
searchTrie.insert("BorderAndFill");
searchTrie.insert("EBuffOrDebuffType");
searchTrie.insert("Buff");
searchTrie.insert("Debuff");
searchTrie.insert("EMacroCommandType");
searchTrie.insert("None");
searchTrie.insert("TrainCollector");
searchTrie.insert("BuildResourceDepot");
searchTrie.insert("BuildConstructionYard");
searchTrie.insert("TrainWorker");
searchTrie.insert("BuildBarracks");
searchTrie.insert("ResearchUpgrade");
searchTrie.insert("BuildBaseDefense");
searchTrie.insert("TrainArmyUnit");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMacroCommandSecondaryType");
searchTrie.insert("None");
searchTrie.insert("TrainingUnit");
searchTrie.insert("BuildingBuilding");
searchTrie.insert("ResearchingUpgrade");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAbilityDecalType");
searchTrie.insert("UsableLocation");
searchTrie.insert("NotUsableLocation");
searchTrie.insert("EAttributeAdjustmentRule");
searchTrie.insert("NoChange");
searchTrie.insert("Percentage");
searchTrie.insert("Absolute");
searchTrie.insert("Absolute");
searchTrie.insert("ESelectableCreationMethod");
searchTrie.insert("Uninitialized");
searchTrie.insert("StartingSelectable");
searchTrie.insert("Production");
searchTrie.insert("Spawned");
searchTrie.insert("Spawned");
searchTrie.insert("EInventoryItemNumChargesChangedBehavior");
searchTrie.insert("AlwaysDoNothing");
searchTrie.insert("DestroyAtZeroCharges");
searchTrie.insert("CustomBehavior");
searchTrie.insert("EAbilityUsageType");
searchTrie.insert("SelectablesActionBar");
searchTrie.insert("SelectablesInventory");
searchTrie.insert("SpecialBuildingTargetingAbility");
searchTrie.insert("ESelectionDecalSetup");
searchTrie.insert("Unknown");
searchTrie.insert("DoesNotUse");
searchTrie.insert("UsesNonDynamicMaterial");
searchTrie.insert("UsesDynamicMaterial");
searchTrie.insert("EUIElementType");
searchTrie.insert("SelectablesActionBar");
searchTrie.insert("PersistentPanel");
searchTrie.insert("InventorySlot");
searchTrie.insert("ShopSlot");
searchTrie.insert("ProductionQueueSlot");
searchTrie.insert("GlobalSkillsPanelButton");
searchTrie.insert("CommanderSkillTreeNode");
searchTrie.insert("NoTooltipRequired");
searchTrie.insert("None");
searchTrie.insert("EUnitInitialSpawnBehavior");
searchTrie.insert("MoveToRallyPoint");
searchTrie.insert("CollectFromNearestResourceSpot");
searchTrie.insert("ESoundFogRules");
searchTrie.insert("Ignore");
searchTrie.insert("DecideOnSpawn");
searchTrie.insert("InstigatingTeamOnly");
searchTrie.insert("AlwaysKnownOnceHeard");
searchTrie.insert("DynamicExceptForInstigatorsTeam");
searchTrie.insert("Dynamic");
searchTrie.insert("Dynamic");
searchTrie.insert("EWorldWidgetViewMode");
searchTrie.insert("NoChange");
searchTrie.insert("NoChange");
searchTrie.insert("EAbilityTargetingMethod");
searchTrie.insert("DoesNotRequireAnyTarget");
searchTrie.insert("RequiresSelectable");
searchTrie.insert("RequiresWorldLocation");
searchTrie.insert("RequiresWorldLocationOrSelectable");
searchTrie.insert("RequiresPlayer");
searchTrie.insert("EGarrisonUnloadAllMethod");
searchTrie.insert("AllAtOnce_Grid");
searchTrie.insert("AllAtOnce_Grid");
searchTrie.insert("EDevelopmentAction");
searchTrie.insert("None");
searchTrie.insert("ClosePopupMenu");
searchTrie.insert("IgnoreAllLMBRelease");
searchTrie.insert("IgnoreNextLMBRelease");
searchTrie.insert("DealMassiveDamageToSelectable");
searchTrie.insert("CancelDealMassiveDamage");
searchTrie.insert("DamageSelectable");
searchTrie.insert("CancelDamageSelectable");
searchTrie.insert("AwardExperience");
searchTrie.insert("CancelAwardExperience");
searchTrie.insert("AwardLotsOfExperience");
searchTrie.insert("CancelAwardLotsOfExperience");
searchTrie.insert("AwardExperienceToLocalPlayer");
searchTrie.insert("GiveRandomInventoryItem");
searchTrie.insert("CancelGiveRandomInventoryItem");
searchTrie.insert("GiveSpecificInventoryItem_SelectionPhase");
searchTrie.insert("GiveSpecificInventoryItem_SelectTarget");
searchTrie.insert("CancelGiveSpecificInventoryItem_SelectTarget");
searchTrie.insert("GetUnitAIInfo");
searchTrie.insert("GetUnitAIInfo");
searchTrie.insert("EEditorPlaySkippingOption");
searchTrie.insert("SkipNothing");
searchTrie.insert("SkipOpeningCutsceneOnly");
searchTrie.insert("SkipMainMenu");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EInvalidOwnerIndexAction");
searchTrie.insert("DoNotSpawn");
searchTrie.insert("AssignToServerPlayer");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EImcomingDamageReductionRule");
searchTrie.insert("MultiplyThenAdd");
searchTrie.insert("AddThenMultiply");
searchTrie.insert("EInputKeyDisplayMethod");
searchTrie.insert("ImageOnly");
searchTrie.insert("ImageAndAddTextAtRuntime");
searchTrie.insert("EKeyModifiers");
searchTrie.insert("0");
searchTrie.insert("1");
searchTrie.insert("2");
searchTrie.insert("4");
searchTrie.insert("3");
searchTrie.insert("5");
searchTrie.insert("6");
searchTrie.insert("7");
searchTrie.insert("ECommanderSkillTreeAnimationPlayRule");
searchTrie.insert("Never");
searchTrie.insert("CanAffordAbilityAtStartOfMatchOrLevelUp");
searchTrie.insert("CanAffordAbilityAtStartOfMatchOrLevelUp");
searchTrie.insert("EAssignedAbilityType");
searchTrie.insert("CommanderSkill");
searchTrie.insert("CommanderSkill");
searchTrie.insert("");
searchTrie.insert("ExitToMainMenu");
searchTrie.insert("ExitToOperatingSystem");
searchTrie.insert("ECannotStartMatchReason");
searchTrie.insert("NotEnoughPlayers");
searchTrie.insert("EveryonesOnOneTeam");
searchTrie.insert("SlotsNotLocked");
searchTrie.insert("NoReason");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EPlayerStartDisplay");
searchTrie.insert("FString");
searchTrie.insert("const;");
searchTrie.insert("EWidgetAnimStatus");
searchTrie.insert("NoAnims");
searchTrie.insert("ShowAnimOnly");
searchTrie.insert("HideAnimOnly");
searchTrie.insert("ShowAndHideAnims");
searchTrie.insert("SingleAnim");
searchTrie.insert("");
searchTrie.insert("EscapeRequest");
searchTrie.insert("ButtonWidget");
searchTrie.insert("ECloseRequestBehavior");
searchTrie.insert("DoNotSave");
searchTrie.insert("Save");
searchTrie.insert("Ask");
searchTrie.insert("Ask");
searchTrie.insert("ESettingsSubmenuType");
searchTrie.insert("VideoSettings");
searchTrie.insert("AudioSettings");
searchTrie.insert("ControlSettings");
searchTrie.insert("KeyBindings");
searchTrie.insert("GameSettings");
searchTrie.insert("EVideoSettingType");
searchTrie.insert("None");
searchTrie.insert("WindowMode");
searchTrie.insert("Resolution");
searchTrie.insert("FrameRateLimit");
searchTrie.insert("VSync");
searchTrie.insert("OverallQuality");
searchTrie.insert("ShadowQuality");
searchTrie.insert("TextureQuality");
searchTrie.insert("AntiAliasingQuality");
searchTrie.insert("ViewDistanceQuality");
searchTrie.insert("VisualEffectQuality");
searchTrie.insert("PostProcessingQuality");
searchTrie.insert("FoliageQuality");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
