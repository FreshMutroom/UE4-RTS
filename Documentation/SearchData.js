//-------------------------------------------------------------
//-------------------------------------------------------------
//------- STOP. This file is created via C++. -----------------
//------- If you are modifying it then you should -------------
//------- probably be modifying the C++ code that -------------
//------- creates it instead ----------------------------------
//-------------------------------------------------------------
//-------------------------------------------------------------


class ArraysOfFolderPaths
{
	constructor()
	{
		this.classes = [];
		this.structs = [];
		this.variables = [];
		this.functions = [];
		this.enums = [];
		this.enumValues = [];
	}
};

class SearchPaths
{
	constructor(inFolderPath)
	{
		this.partialMatches = new ArraysOfFolderPaths();

		this.exactMatches = new ArraysOfFolderPaths();
	}
};

class BasicSearchInfo
{
	/**
	 *	@param inType - "class", "struct", "enum", "function", "variable", "enumValue"
	 *	@param inOwner - can be left blank. This is the "item" that owns this item
	 *	e.g. something of type "function" will usually have an owner that is the name of the
	 *	class/struct that it was declared in
	 */
	constructor(inName, inDescription, inType, inOwner)
	{
		// name supports case
		this.name = inName;
		this.description = inDescription;
		this.type = inType;
		this.owner = inOwner;
	}
};


// Key = a string, value = class SearchPaths
var searchTokenToPaths = new Map();

// Maps folder path to basic info about the item such as it's description
var pathToBasicInfo = new Map();


/**
 *	@param name - should not be coverted to lower case
 *	@param description - description of class. Needs escaped characters
 *	@param partialTokens - array. Should all be lower case
 *	@param owner - can be left blank
 */
function addToContainers_class(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.classes.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.classes.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "class", owner));
}

function addToContainers_struct(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.structs.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.structs.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "struct", owner));
}

function addToContainers_enum(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.enums.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.enums.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "enum", owner));
}

function addToContainers_function(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.functions.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.functions.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "function", owner));
}

function addToContainers_variable(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.variables.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.variables.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "variable", owner));
}

function addToContainers_enumValue(name, description, relativePath, partialTokens, owner)
{
	var nameLowerCase = name.toLowerCase();

	if (searchTokenToPaths.has(nameLowerCase) == false)
	{
		searchTokenToPaths.set(nameLowerCase, new SearchPaths());
	}
	searchTokenToPaths.get(nameLowerCase).exactMatches.enumValues.push(relativePath);
	
	for (var i = partialTokens.length - 1; i >= 0; --i)
	{
		var tkn = partialTokens[i];
		if (searchTokenToPaths.has(nameLowerCase) == false)
		{
			searchTokenToPaths.set(nameLowerCase, new SearchPaths());
		}
		searchTokenToPaths.get(nameLowerCase).partialMatches.enumValues.push(relativePath);
	}
	
	pathToBasicInfo.set(relativePath, new BasicSearchInfo(name, description, "enumValue", owner));
}


addToContainers_class("UFogObeyingAudioComponent", "A sound component that can decide who hears the sounds in relation to teams and fog of war.", "Docs/Classes/UFogObeyingAudioComponent/UFogObeyingAudioComponent.html", ["fog", "obeying", "audio", "component"], "");
addToContainers_function("UFogObeyingAudioComponent", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/UFogObeyingAudioComponent.html", ["fog", "obeying", "audio", "component"], "UFogObeyingAudioComponent");
addToContainers_function("Activate", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/Activate.html", [], "UFogObeyingAudioComponent");
addToContainers_function("PseudoMute", "This function is ment to mute the audio component while at the same time still let it play", "Docs/Classes/UFogObeyingAudioComponent/Functions/PseudoMute.html", ["pseudo", "mute"], "UFogObeyingAudioComponent");
addToContainers_function("UnPseudoMute", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/UnPseudoMute.html", ["un", "pseudo", "mute"], "UFogObeyingAudioComponent");
addToContainers_function("IsMuted", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/IsMuted.html", ["is", "muted"], "UFogObeyingAudioComponent");
addToContainers_function("PlaySound", "Use this function to play a sound on this audio component", "Docs/Classes/UFogObeyingAudioComponent/Functions/PlaySound.html", ["play", "sound"], "UFogObeyingAudioComponent");
addToContainers_function("OnExitFogOfWar_Dynamic", "Functions called by the fog of war manager", "Docs/Classes/UFogObeyingAudioComponent/Functions/OnExitFogOfWar_Dynamic.html", ["on", "exit", "fog", "of", "war_", "dynamic"], "UFogObeyingAudioComponent");
addToContainers_function("OnEnterFogOfWar_Dynamic", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/OnEnterFogOfWar_Dynamic.html", ["on", "enter", "fog", "of", "war_", "dynamic"], "UFogObeyingAudioComponent");
addToContainers_function("OnExitFogOfWar_DynamicExceptForInstigatorsTeam", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/OnExitFogOfWar_DynamicExceptForIn.html", ["on", "exit", "fog", "of", "war_", "dynamic", "except", "for", "instigators", "team"], "UFogObeyingAudioComponent");
addToContainers_function("OnEnterFogOfWar_DynamicExceptForInstigatorsTeam", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/OnEnterFogOfWar_DynamicExceptForI.html", ["on", "enter", "fog", "of", "war_", "dynamic", "except", "for", "instigators", "team"], "UFogObeyingAudioComponent");
addToContainers_function("OnExitFogOfWar_AlwaysKnownOnceHeard", "", "Docs/Classes/UFogObeyingAudioComponent/Functions/OnExitFogOfWar_AlwaysKnownOnceHea.html", ["on", "exit", "fog", "of", "war_", "always", "known", "once", "heard"], "UFogObeyingAudioComponent");
addToContainers_function("OnAudioFinishedFunc", "Bound to OnAudioFinished", "Docs/Classes/UFogObeyingAudioComponent/Functions/OnAudioFinishedFunc.html", ["on", "audio", "finished", "func"], "UFogObeyingAudioComponent");
addToContainers_variable("SavedVolumeMultiplier", "Volume multiplier before this audio component was muted", "Docs/Classes/UFogObeyingAudioComponent/Variables/SavedVolumeMultiplier.html", ["saved", "volume", "multiplier"], "UFogObeyingAudioComponent");
addToContainers_variable("bMuted", "", "Docs/Classes/UFogObeyingAudioComponent/Variables/bMuted.html", [], "UFogObeyingAudioComponent");
addToContainers_variable("bInContainer", "Whether the audio component is in a game state container. Faster to just query this bool than to do a contains check on the array. Actually I use a TMap but this is still probably faster", "Docs/Classes/UFogObeyingAudioComponent/Variables/bInContainer.html", ["in", "container"], "UFogObeyingAudioComponent");
addToContainers_variable("FogObeyingRule", "How audio played through this component obeys fog of war", "Docs/Classes/UFogObeyingAudioComponent/Variables/FogObeyingRule.html", ["fog", "obeying", "rule"], "UFogObeyingAudioComponent");
addToContainers_class("URTSUnrealEdEngine", "Custom editor engine. I added this class so important editor utility widgets are automatically created. My notes: I tried making this class a part of my RTS_Ver2Editor module but it wouldn\'t load. Not sure if there\'s something I\'m missing or if that\'s just not allowed in the first place.", "Docs/Classes/URTSUnrealEdEngine/URTSUnrealEdEngine.html", ["r", "t", "s", "unreal", "ed", "engine"], "");
addToContainers_function("Init", "", "Docs/Classes/URTSUnrealEdEngine/Functions/Init.html", [], "URTSUnrealEdEngine");
addToContainers_function("CreateEditorPlaySettingsUtilityWidget", "", "Docs/Classes/URTSUnrealEdEngine/Functions/CreateEditorPlaySettingsUtilityWi.html", ["create", "editor", "play", "settings", "utility", "widget"], "URTSUnrealEdEngine");
addToContainers_struct("FAtLeastOneInt32", "An integer that is clamped to always be at least 1", "Docs/Structs/FAtLeastOneInt32/FAtLeastOneInt32.html", ["at", "least", "one", "int32"], "");
addToContainers_function("FAtLeastOneInt32", "", "Docs/Structs/FAtLeastOneInt32/Functions/FAtLeastOneInt32.html", ["at", "least", "one", "int32"], "FAtLeastOneInt32");
addToContainers_function("GetInteger", "", "Docs/Structs/FAtLeastOneInt32/Functions/GetInteger.html", ["get", "integer"], "FAtLeastOneInt32");
addToContainers_variable("", "", "Docs/Structs/FAtLeastOneInt32/Variables/.html", [], "FAtLeastOneInt32");
addToContainers_struct("FUnitTypeArray", "", "Docs/Structs/FUnitTypeArray/FUnitTypeArray.html", ["unit", "type", "array"], "");
addToContainers_function("Emplace", "", "Docs/Structs/FUnitTypeArray/Functions/Emplace.html", [], "FUnitTypeArray");
addToContainers_function("GetArray", "", "Docs/Structs/FUnitTypeArray/Functions/GetArray.html", ["get", "array"], "FUnitTypeArray");
addToContainers_variable("Array", "", "Docs/Structs/FUnitTypeArray/Variables/Array.html", [], "FUnitTypeArray");
addToContainers_struct("FBuildingTypeArray", "", "Docs/Structs/FBuildingTypeArray/FBuildingTypeArray.html", ["building", "type", "array"], "");
addToContainers_function("Emplace", "", "Docs/Structs/FBuildingTypeArray/Functions/Emplace.html", [], "FBuildingTypeArray");
addToContainers_function("GetArray", "", "Docs/Structs/FBuildingTypeArray/Functions/GetArray.html", ["get", "array"], "FBuildingTypeArray");
addToContainers_variable("Array", "", "Docs/Structs/FBuildingTypeArray/Variables/Array.html", [], "FBuildingTypeArray");
addToContainers_struct("FButtonArray", "An array of FContextButton", "Docs/Structs/FButtonArray/FButtonArray.html", ["button", "array"], "");
addToContainers_function("Sort", "", "Docs/Structs/FButtonArray/Functions/Sort.html", [], "FButtonArray");
addToContainers_function("GetButtons", "", "Docs/Structs/FButtonArray/Functions/GetButtons.html", ["get", "buttons"], "FButtonArray");
addToContainers_function("AddButton", "Add button to Buttons, based on user defined ordering with HUDPersistentTabButtonOrdering", "Docs/Structs/FButtonArray/Functions/AddButton.html", ["add", "button"], "FButtonArray");
addToContainers_variable("Buttons", "", "Docs/Structs/FButtonArray/Variables/Buttons.html", [], "FButtonArray");
addToContainers_struct("FRankInfo", "Holds information about things that happen when leveling up", "Docs/Structs/FRankInfo/FRankInfo.html", ["rank", "info"], "");
addToContainers_function("FRankInfo", "", "Docs/Structs/FRankInfo/Functions/FRankInfo.html", ["rank", "info"], "FRankInfo");
addToContainers_function("GetBonus", "", "Docs/Structs/FRankInfo/Functions/GetBonus.html", ["get", "bonus"], "FRankInfo");
addToContainers_function("GetParticles", "", "Docs/Structs/FRankInfo/Functions/GetParticles.html", ["get", "particles"], "FRankInfo");
addToContainers_function("GetSound", "", "Docs/Structs/FRankInfo/Functions/GetSound.html", ["get", "sound"], "FRankInfo");
addToContainers_function("GetIcon", "", "Docs/Structs/FRankInfo/Functions/GetIcon.html", ["get", "icon"], "FRankInfo");
addToContainers_variable("", "Optional. Upgrade effect applied to unit when reaching this level", "Docs/Structs/FRankInfo/Variables/.html", [], "FRankInfo");
addToContainers_variable("", "Optional. Particle effect to play when reaching this level. If multiple levels are gained at the same time then only the particle effect for the highest level gained will be played", "Docs/Structs/FRankInfo/Variables/_1.html", [], "FRankInfo");
addToContainers_variable("", "Sound to play when a unit reaches this level", "Docs/Structs/FRankInfo/Variables/_2.html", [], "FRankInfo");
addToContainers_variable("", "Image to display on unit for this unit. If you are choosing to display level icons on your unit widgets then you will need to give this a value", "Docs/Structs/FRankInfo/Variables/_3.html", [], "FRankInfo");
addToContainers_class("AFactionInfo", "A info class that holds all the data about a faction. It is a pure info class. This object stores no state.", "Docs/Classes/AFactionInfo/AFactionInfo.html", ["faction", "info"], "");
addToContainers_function("AFactionInfo", "", "Docs/Classes/AFactionInfo/Functions/AFactionInfo.html", ["faction", "info"], "AFactionInfo");
addToContainers_function("BeginPlay", "", "Docs/Classes/AFactionInfo/Functions/BeginPlay.html", ["begin", "play"], "AFactionInfo");
addToContainers_function("Initialize", "Initialize", "Docs/Classes/AFactionInfo/Functions/Initialize.html", [], "AFactionInfo");
addToContainers_function("InitHUDPersistentTabButtons", "Fill HUDPersistentTabButtons with emtpy arrays for all tab types", "Docs/Classes/AFactionInfo/Functions/InitHUDPersistentTabButtons.html", ["init", "h", "u", "d", "persistent", "tab", "buttons"], "AFactionInfo");
addToContainers_function("InitBuildingInfo", "Fills the PS array BuildingInfo with info on all the buildings this faction can make. The ordering is the order they were added in the editor", "Docs/Classes/AFactionInfo/Functions/InitBuildingInfo.html", ["init", "building", "info"], "AFactionInfo");
addToContainers_function("InitUnitInfo", "Fills the PS array UnitInfo with info on all the units this faction can make. The ordering is the order they were added in the editor", "Docs/Classes/AFactionInfo/Functions/InitUnitInfo.html", ["init", "unit", "info"], "AFactionInfo");
addToContainers_function("CheckGhost", "Checks if the ghost building has all the right properties to be a ghost for a building. Throws assert if it is not @param GhostBuilding - ghost building @param Building - actual building", "Docs/Classes/AFactionInfo/Functions/CheckGhost.html", ["check", "ghost"], "AFactionInfo");
addToContainers_function("CreatePrerequisitesText", "Create the FText for each building/units prerequisites", "Docs/Classes/AFactionInfo/Functions/CreatePrerequisitesText.html", ["create", "prerequisites", "text"], "AFactionInfo");
addToContainers_function("InitUpgradeInfo", "Do setup type stuff for upgrades", "Docs/Classes/AFactionInfo/Functions/InitUpgradeInfo.html", ["init", "upgrade", "info"], "AFactionInfo");
addToContainers_function("EmptyBuildingInfo", "Clears BuildingInfo", "Docs/Classes/AFactionInfo/Functions/EmptyBuildingInfo.html", ["empty", "building", "info"], "AFactionInfo");
addToContainers_function("EmptyUnitInfo", "Clears UnitInfo", "Docs/Classes/AFactionInfo/Functions/EmptyUnitInfo.html", ["empty", "unit", "info"], "AFactionInfo");
addToContainers_function("SortHUDPersistentTabButtons", "", "Docs/Classes/AFactionInfo/Functions/SortHUDPersistentTabButtons.html", ["sort", "h", "u", "d", "persistent", "tab", "buttons"], "AFactionInfo");
addToContainers_function("InitButtonToPersistentTabMappings", "Sets up TMap from button types to what HUD persistent tab they belong in. This is mainly for the HUD, giving it fast lookups to what tab a button resides in when it is added to a production queue", "Docs/Classes/AFactionInfo/Functions/InitButtonToPersistentTabMappings.html", ["init", "button", "to", "persistent", "tab", "mappings"], "AFactionInfo");
addToContainers_function("InitLevelUpBonuses", "Sets up LevelUpBonuses", "Docs/Classes/AFactionInfo/Functions/InitLevelUpBonuses.html", ["init", "level", "up", "bonuses"], "AFactionInfo");
addToContainers_function("InitMouseCursors", "", "Docs/Classes/AFactionInfo/Functions/InitMouseCursors.html", ["init", "mouse", "cursors"], "AFactionInfo");
addToContainers_function("InitSelectionDecals", "", "Docs/Classes/AFactionInfo/Functions/InitSelectionDecals.html", ["init", "selection", "decals"], "AFactionInfo");
addToContainers_function("CreateTechTree", "", "Docs/Classes/AFactionInfo/Functions/CreateTechTree.html", ["create", "tech", "tree"], "AFactionInfo");
addToContainers_function("InitHUDWarningInfo", "Setup all the HUD warnings", "Docs/Classes/AFactionInfo/Functions/InitHUDWarningInfo.html", ["init", "h", "u", "d", "warning", "info"], "AFactionInfo");
addToContainers_function("PostEditChangeChainProperty", "To change visibility of options in upgrades", "Docs/Classes/AFactionInfo/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AFactionInfo");
addToContainers_function("SetInitialFaction", "This should not be called by anything other than the game instance when it is initializing faction info", "Docs/Classes/AFactionInfo/Functions/SetInitialFaction.html", ["set", "initial", "faction"], "AFactionInfo");
addToContainers_function("GetName", "", "Docs/Classes/AFactionInfo/Functions/GetName.html", ["get", "name"], "AFactionInfo");
addToContainers_function("GetFactionIcon", "", "Docs/Classes/AFactionInfo/Functions/GetFactionIcon.html", ["get", "faction", "icon"], "AFactionInfo");
addToContainers_function("GetBuildingInfo", "", "Docs/Classes/AFactionInfo/Functions/GetBuildingInfo.html", ["get", "building", "info"], "AFactionInfo");
addToContainers_function("GetBuildingInfoSlow", "This version is slow and is only run during the spawning of starting selectables. It can be made faster by using a TMap that maps from actor blueprint to a FBuildingInfo pointer (or the Tset SelectableBPs could be converted for this purpose, would have to remove the WITH_EDITORONLY_DATA that wraps it though). The reason I do not want to add another data structure is basically we\'ll just accept it is slowish during starting selectable spawn but we do not polute CPU cache more @return - null if faction does not have a the building on its building roster", "Docs/Classes/AFactionInfo/Functions/GetBuildingInfoSlow.html", ["get", "building", "info", "slow"], "AFactionInfo");
addToContainers_function("GetUnitInfo", "", "Docs/Classes/AFactionInfo/Functions/GetUnitInfo.html", ["get", "unit", "info"], "AFactionInfo");
addToContainers_function("GetUpgradeInfoChecked", "Get info for an upgrade type. Assumes that an entry is in the upgrade roster", "Docs/Classes/AFactionInfo/Functions/GetUpgradeInfoChecked.html", ["get", "upgrade", "info", "checked"], "AFactionInfo");
addToContainers_function("GetUpgradeInfoMutable", "", "Docs/Classes/AFactionInfo/Functions/GetUpgradeInfoMutable.html", ["get", "upgrade", "info", "mutable"], "AFactionInfo");
addToContainers_function("GetUpgradeInfoNotChecked", "Returns pointer to upgrade info if the upgrade type is on the faction\'s upgrade roster. Otherwise it will return null", "Docs/Classes/AFactionInfo/Functions/GetUpgradeInfoNotChecked.html", ["get", "upgrade", "info", "not", "checked"], "AFactionInfo");
addToContainers_function("IsUpgradeResearchableThroughBuilding", "Return true if an upgrade is on the context menu of at least one building on this faction\'s building roster", "Docs/Classes/AFactionInfo/Functions/IsUpgradeResearchableThroughBuild.html", ["is", "upgrade", "researchable", "through", "building"], "AFactionInfo");
addToContainers_function("HasSelectable", "Return whether this faction has this selectable on their roster", "Docs/Classes/AFactionInfo/Functions/HasSelectable.html", ["has", "selectable"], "AFactionInfo");
addToContainers_function("GetProductionTime", "Get the time it takes to produce something in a production queue", "Docs/Classes/AFactionInfo/Functions/GetProductionTime.html", ["get", "production", "time"], "AFactionInfo");
addToContainers_function("GetStartingGrid", "", "Docs/Classes/AFactionInfo/Functions/GetStartingGrid.html", ["get", "starting", "grid"], "AFactionInfo");
addToContainers_function("GetFaction", "Get what faction this info is for", "Docs/Classes/AFactionInfo/Functions/GetFaction.html", ["get", "faction"], "AFactionInfo");
addToContainers_function("GetUpgradesMap", "Get reference to upgrades array", "Docs/Classes/AFactionInfo/Functions/GetUpgradesMap.html", ["get", "upgrades", "map"], "AFactionInfo");
addToContainers_function("GetLevelUpInfo", "Get info for a level/rank", "Docs/Classes/AFactionInfo/Functions/GetLevelUpInfo.html", ["get", "level", "up", "info"], "AFactionInfo");
addToContainers_function("GetLevelUpBonus", "", "Docs/Classes/AFactionInfo/Functions/GetLevelUpBonus.html", ["get", "level", "up", "bonus"], "AFactionInfo");
addToContainers_function("GetCommanderLevelUpInfo", "Get info struct for a certain rank of commander", "Docs/Classes/AFactionInfo/Functions/GetCommanderLevelUpInfo.html", ["get", "commander", "level", "up", "info"], "AFactionInfo");
addToContainers_function("GetNumInitialCommanderSkillPoints", "Get how many skill points the commander should start the game with", "Docs/Classes/AFactionInfo/Functions/GetNumInitialCommanderSkillPoints.html", ["get", "num", "initial", "commander", "skill", "points"], "AFactionInfo");
addToContainers_function("GetMouseCursorInfo", "Get info on this faction\'s default match mouse cursor", "Docs/Classes/AFactionInfo/Functions/GetMouseCursorInfo.html", ["get", "mouse", "cursor", "info"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_Top", "Mouse cursors for when the mouse is close enough to the edge of the screen that the camera moves", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_Top.html", ["get", "edge", "scrolling", "cursor", "info_", "top"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_TopRight", "", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_TopRig.html", ["get", "edge", "scrolling", "cursor", "info_", "top", "right"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_Right", "", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_Right.html", ["get", "edge", "scrolling", "cursor", "info_", "right"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_BottomRight", "", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_Bottom.html", ["get", "edge", "scrolling", "cursor", "info_", "bottom", "right"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_Bottom", "", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_Bottom_1.html", ["get", "edge", "scrolling", "cursor", "info_", "bottom"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_BottomLeft", "", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_Bottom_2.html", ["get", "edge", "scrolling", "cursor", "info_", "bottom", "left"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_Left", "", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_Left.html", ["get", "edge", "scrolling", "cursor", "info_", "left"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo_TopLeft", "", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo_TopLef.html", ["get", "edge", "scrolling", "cursor", "info_", "top", "left"], "AFactionInfo");
addToContainers_function("GetEdgeScrollingCursorInfo", "Gets the mouse cursor given the caller has already calculated the array index", "Docs/Classes/AFactionInfo/Functions/GetEdgeScrollingCursorInfo.html", ["get", "edge", "scrolling", "cursor", "info"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CanAttackHoveredHostileUnit", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CanAtta.html", ["get", "default", "mouse", "cursor", "info_", "can", "attack", "hovered", "hostile", "unit"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CannotAttackHoveredHostileUnit", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CannotA.html", ["get", "default", "mouse", "cursor", "info_", "cannot", "attack", "hovered", "hostile", "unit"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CanAttackHoveredFriendlyUnit", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CanAtta_1.html", ["get", "default", "mouse", "cursor", "info_", "can", "attack", "hovered", "friendly", "unit"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CannotAttackHoveredFriendlyUnit", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CannotA_1.html", ["get", "default", "mouse", "cursor", "info_", "cannot", "attack", "hovered", "friendly", "unit"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CanAttackHoveredHostileBuilding", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CanAtta_2.html", ["get", "default", "mouse", "cursor", "info_", "can", "attack", "hovered", "hostile", "building"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CannotAttackHoveredHostileBuilding", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CannotA_2.html", ["get", "default", "mouse", "cursor", "info_", "cannot", "attack", "hovered", "hostile", "building"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CanAttackHoveredFriendlyBuilding", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CanAtta_3.html", ["get", "default", "mouse", "cursor", "info_", "can", "attack", "hovered", "friendly", "building"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CannotAttackHoveredFriendlyBuilding", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CannotA_3.html", ["get", "default", "mouse", "cursor", "info_", "cannot", "attack", "hovered", "friendly", "building"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CanPickUpHoveredInventoryItem", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CanPick.html", ["get", "default", "mouse", "cursor", "info_", "can", "pick", "up", "hovered", "inventory", "item"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CannotPickUpHoveredInventoryItem", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CannotP.html", ["get", "default", "mouse", "cursor", "info_", "cannot", "pick", "up", "hovered", "inventory", "item"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CanGatherFromHoveredResourceSpot", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CanGath.html", ["get", "default", "mouse", "cursor", "info_", "can", "gather", "from", "hovered", "resource", "spot"], "AFactionInfo");
addToContainers_function("GetDefaultMouseCursorInfo_CannotGatherFromHoveredResourceSpot", "", "Docs/Classes/AFactionInfo/Functions/GetDefaultMouseCursorInfo_CannotG.html", ["get", "default", "mouse", "cursor", "info_", "cannot", "gather", "from", "hovered", "resource", "spot"], "AFactionInfo");
addToContainers_function("GetSelectablePersistentWorldWidget", "Get the persistent selectable world user widget", "Docs/Classes/AFactionInfo/Functions/GetSelectablePersistentWorldWidge.html", ["get", "selectable", "persistent", "world", "widget"], "AFactionInfo");
addToContainers_function("GetSelectableSelectionWorldWidget", "Get the widget to show only when selected", "Docs/Classes/AFactionInfo/Functions/GetSelectableSelectionWorldWidget.html", ["get", "selectable", "selection", "world", "widget"], "AFactionInfo");
addToContainers_function("GetResourceSpotPersistentWorldWidget", "Get the persistent widget for resource spots", "Docs/Classes/AFactionInfo/Functions/GetResourceSpotPersistentWorldWid.html", ["get", "resource", "spot", "persistent", "world", "widget"], "AFactionInfo");
addToContainers_function("GetResourceSpotSelectionWorldWidget", "Get the widget to show on resource spots only when they are selected", "Docs/Classes/AFactionInfo/Functions/GetResourceSpotSelectionWorldWidg.html", ["get", "resource", "spot", "selection", "world", "widget"], "AFactionInfo");
addToContainers_function("GetSelectionDecalInfo", "Get decal to appear under selectable when selected.", "Docs/Classes/AFactionInfo/Functions/GetSelectionDecalInfo.html", ["get", "selection", "decal", "info"], "AFactionInfo");
addToContainers_function("GetSelectionParticles", "Get the particle system template to attach to a selectable because it was selected @param Affiliation - affiliation of selectable towards local player @param SelectablesSize - how large the selectable considers itself", "Docs/Classes/AFactionInfo/Functions/GetSelectionParticles.html", ["get", "selection", "particles"], "AFactionInfo");
addToContainers_function("GetRightClickParticles", "Get the particle system template to attach to a selectable because it was right-clicked @param Affiliation - affiliation of selectable towards local player @param SelectablesSize - how large the selectable considers itself", "Docs/Classes/AFactionInfo/Functions/GetRightClickParticles.html", ["get", "right", "click", "particles"], "AFactionInfo");
addToContainers_function("GetRightClickCommandStaticParticles", "Get info about a particle system to spawn when issuing right click commands. This particle system does not attach to selectables", "Docs/Classes/AFactionInfo/Functions/GetRightClickCommandStaticParticl.html", ["get", "right", "click", "command", "static", "particles"], "AFactionInfo");
addToContainers_function("GetRightClickCommandDecal", "Get info about a decal to show when issuing right click commands. Pointer to material in struct can be null @param TargetAffiliation - affiliation of selectable clicked on", "Docs/Classes/AFactionInfo/Functions/GetRightClickCommandDecal.html", ["get", "right", "click", "command", "decal"], "AFactionInfo");
addToContainers_function("GetMatchWidgetBP", "Get blueprint for in-game widget", "Docs/Classes/AFactionInfo/Functions/GetMatchWidgetBP.html", ["get", "match", "widget", "b", "p"], "AFactionInfo");
addToContainers_function("GetHUDErrorMessage", "Get message like \"Not enough resources\" if one is set, or null otherwise", "Docs/Classes/AFactionInfo/Functions/GetHUDErrorMessage.html", ["get", "h", "u", "d", "error", "message"], "AFactionInfo");
addToContainers_function("GetHUDErrorMessage", "", "Docs/Classes/AFactionInfo/Functions/GetHUDErrorMessage_1.html", ["get", "h", "u", "d", "error", "message"], "AFactionInfo");
addToContainers_function("GetHUDMissingResourceMessage", "", "Docs/Classes/AFactionInfo/Functions/GetHUDMissingResourceMessage.html", ["get", "h", "u", "d", "missing", "resource", "message"], "AFactionInfo");
addToContainers_function("GetHUDMissingHousingResourceMessage", "", "Docs/Classes/AFactionInfo/Functions/GetHUDMissingHousingResourceMessa.html", ["get", "h", "u", "d", "missing", "housing", "resource", "message"], "AFactionInfo");
addToContainers_function("GetWarningSound", "Get sound for the warnings", "Docs/Classes/AFactionInfo/Functions/GetWarningSound.html", ["get", "warning", "sound"], "AFactionInfo");
addToContainers_function("GetWarningSound", "", "Docs/Classes/AFactionInfo/Functions/GetWarningSound_1.html", ["get", "warning", "sound"], "AFactionInfo");
addToContainers_function("GetWarningSound", "", "Docs/Classes/AFactionInfo/Functions/GetWarningSound_2.html", ["get", "warning", "sound"], "AFactionInfo");
addToContainers_function("GetWarningSound", "", "Docs/Classes/AFactionInfo/Functions/GetWarningSound_3.html", ["get", "warning", "sound"], "AFactionInfo");
addToContainers_function("GetHUDPersistentTabButton", "Given a HUD persistent tab type and index, get the button for that tab at index, or null if no button for that combination exists. Tab category None can be used and is possible to return valid pointer", "Docs/Classes/AFactionInfo/Functions/GetHUDPersistentTabButton.html", ["get", "h", "u", "d", "persistent", "tab", "button"], "AFactionInfo");
addToContainers_function("GetHUDPersistentTabButtons", "", "Docs/Classes/AFactionInfo/Functions/GetHUDPersistentTabButtons.html", ["get", "h", "u", "d", "persistent", "tab", "buttons"], "AFactionInfo");
addToContainers_function("GetHUDPersistentTab", "Given some training info get the the HUD persistent tab it should belong in", "Docs/Classes/AFactionInfo/Functions/GetHUDPersistentTab.html", ["get", "h", "u", "d", "persistent", "tab"], "AFactionInfo");
addToContainers_function("GetHUDPersistentTab", "", "Docs/Classes/AFactionInfo/Functions/GetHUDPersistentTab_1.html", ["get", "h", "u", "d", "persistent", "tab"], "AFactionInfo");
addToContainers_function("GetConstantHousingResourceAmountProvided", "Get how much of housing resources is always provided", "Docs/Classes/AFactionInfo/Functions/GetConstantHousingResourceAmountP.html", ["get", "constant", "housing", "resource", "amount", "provided"], "AFactionInfo");
addToContainers_function("GetHousingResourceLimits", "Get the limits for each housing resource e.g. in SCII it is 200", "Docs/Classes/AFactionInfo/Functions/GetHousingResourceLimits.html", ["get", "housing", "resource", "limits"], "AFactionInfo");
addToContainers_function("IsQuantityLimited", "Return whether there is a limit on the number of buildings/units of a particular type the player is allowed @return - true if there is some kind of limit", "Docs/Classes/AFactionInfo/Functions/IsQuantityLimited.html", ["is", "quantity", "limited"], "AFactionInfo");
addToContainers_function("IsQuantityLimited", "", "Docs/Classes/AFactionInfo/Functions/IsQuantityLimited_1.html", ["is", "quantity", "limited"], "AFactionInfo");
addToContainers_function("GetQuantityLimit", "Returns what the quantity limit of a selectable is. Will crash if quantity of the passed in type is not limited. Should always return at least 1", "Docs/Classes/AFactionInfo/Functions/GetQuantityLimit.html", ["get", "quantity", "limit"], "AFactionInfo");
addToContainers_function("GetQuantityLimit", "", "Docs/Classes/AFactionInfo/Functions/GetQuantityLimit_1.html", ["get", "quantity", "limit"], "AFactionInfo");
addToContainers_function("GetBuildInfo", "Get build info for a context button. Assumes that it is either for a building or unit and not an upgrade", "Docs/Classes/AFactionInfo/Functions/GetBuildInfo.html", ["get", "build", "info"], "AFactionInfo");
addToContainers_function("GetDisplayInfo", "Given a context button, get the display info that corrisponds to it", "Docs/Classes/AFactionInfo/Functions/GetDisplayInfo.html", ["get", "display", "info"], "AFactionInfo");
addToContainers_function("GetUnitQuantityLimits", "", "Docs/Classes/AFactionInfo/Functions/GetUnitQuantityLimits.html", ["get", "unit", "quantity", "limits"], "AFactionInfo");
addToContainers_function("GetDefaultBuildingBuildMethod", "Get the build method to use for building buildings for this faction. Buildings can override this if they choose", "Docs/Classes/AFactionInfo/Functions/GetDefaultBuildingBuildMethod.html", ["get", "default", "building", "build", "method"], "AFactionInfo");
addToContainers_function("GetBuildingProximityRange", "Get the default building proximity range", "Docs/Classes/AFactionInfo/Functions/GetBuildingProximityRange.html", ["get", "building", "proximity", "range"], "AFactionInfo");
addToContainers_function("CanBuildOffAllies", "Get whether this faction can build off allied buildings", "Docs/Classes/AFactionInfo/Functions/CanBuildOffAllies.html", ["can", "build", "off", "allies"], "AFactionInfo");
addToContainers_function("HasOverriddenResourceImage", "Whether this faction has overridden a resource image", "Docs/Classes/AFactionInfo/Functions/HasOverriddenResourceImage.html", ["has", "overridden", "resource", "image"], "AFactionInfo");
addToContainers_function("GetResourceImage", "Get image that represents a resource. Assuming it has already been checked that faction overrides image", "Docs/Classes/AFactionInfo/Functions/GetResourceImage.html", ["get", "resource", "image"], "AFactionInfo");
addToContainers_function("GetMatchMusic", "Get the music to play during a match", "Docs/Classes/AFactionInfo/Functions/GetMatchMusic.html", ["get", "match", "music"], "AFactionInfo");
addToContainers_function("GetChangeRallyPointSound", "Get sound to play when changing rally point", "Docs/Classes/AFactionInfo/Functions/GetChangeRallyPointSound.html", ["get", "change", "rally", "point", "sound"], "AFactionInfo");
addToContainers_function("GetNumUpgrades", "Get how many different upgrades this faction has", "Docs/Classes/AFactionInfo/Functions/GetNumUpgrades.html", ["get", "num", "upgrades"], "AFactionInfo");
addToContainers_function("GetAllBuildingTypes", "Was added here so the keys can be iterated over to know what buildings are on this faction\'s building roster.", "Docs/Classes/AFactionInfo/Functions/GetAllBuildingTypes.html", ["get", "all", "building", "types"], "AFactionInfo");
addToContainers_function("GetPersistentQueueTypes", "", "Docs/Classes/AFactionInfo/Functions/GetPersistentQueueTypes.html", ["get", "persistent", "queue", "types"], "AFactionInfo");
addToContainers_function("GetAllUnitTypes", "Was added to be able to know all the unit types this faction has on it\'s unit roster", "Docs/Classes/AFactionInfo/Functions/GetAllUnitTypes.html", ["get", "all", "unit", "types"], "AFactionInfo");
addToContainers_function("GetWorkerTypes", "Get array of all unit types that are considered worker types", "Docs/Classes/AFactionInfo/Functions/GetWorkerTypes.html", ["get", "worker", "types"], "AFactionInfo");
addToContainers_function("GetCollectorTypes", "Given a resource type get all the units that can gather that resource", "Docs/Classes/AFactionInfo/Functions/GetCollectorTypes.html", ["get", "collector", "types"], "AFactionInfo");
addToContainers_function("GetAllDepotsForResource", "Given a resource type get all the buildings that can serve as a drop point for it. This is mainly here fore the CPU player AI controller", "Docs/Classes/AFactionInfo/Functions/GetAllDepotsForResource.html", ["get", "all", "depots", "for", "resource"], "AFactionInfo");
addToContainers_function("GetBarracksBuildingTypes", "Get all buildings that can train a unit", "Docs/Classes/AFactionInfo/Functions/GetBarracksBuildingTypes.html", ["get", "barracks", "building", "types"], "AFactionInfo");
addToContainers_function("GetAttackingUnitTypes", "Get a list of all unit types that are considered attacking units", "Docs/Classes/AFactionInfo/Functions/GetAttackingUnitTypes.html", ["get", "attacking", "unit", "types"], "AFactionInfo");
addToContainers_function("GetBaseDefenseTypes", "Get all buildings that are considered base defenses", "Docs/Classes/AFactionInfo/Functions/GetBaseDefenseTypes.html", ["get", "base", "defense", "types"], "AFactionInfo");
addToContainers_function("HasCollectorType", "For a given resource type returns whether the faction has at least one unit on its unit roster that can collect that resource", "Docs/Classes/AFactionInfo/Functions/HasCollectorType.html", ["has", "collector", "type"], "AFactionInfo");
addToContainers_function("HasUpgrades", "Returns whether this faction has at least one upgrade on its upgrade roster", "Docs/Classes/AFactionInfo/Functions/HasUpgrades.html", ["has", "upgrades"], "AFactionInfo");
addToContainers_function("HasBaseDefenseTypeBuildings", "Returns whether this faction has base defense buildings on its building roster", "Docs/Classes/AFactionInfo/Functions/HasBaseDefenseTypeBuildings.html", ["has", "base", "defense", "type", "buildings"], "AFactionInfo");
addToContainers_function("HasAttackingUnitTypes", "Return whether this faction has any army units on its unit roster", "Docs/Classes/AFactionInfo/Functions/HasAttackingUnitTypes.html", ["has", "attacking", "unit", "types"], "AFactionInfo");
addToContainers_function("Random_GetPersistentQueueSupportingType", "Get a random building that is a construction yard. Returns EBuildingType::NotBuilding if this faction has none", "Docs/Classes/AFactionInfo/Functions/Random_GetPersistentQueueSupporti.html", ["random_", "get", "persistent", "queue", "supporting", "type"], "AFactionInfo");
addToContainers_function("Random_GetWorkerType", "Get a random unit that can build at least one building. Returns EUnitType::None if this faction has no units that can build buildings", "Docs/Classes/AFactionInfo/Functions/Random_GetWorkerType.html", ["random_", "get", "worker", "type"], "AFactionInfo");
addToContainers_function("Random_GetAttackingUnitType", "Get a random unit this is considered an \'attacking\' unit. Returns EUnitType::None if no unit on this faction is an attacking unit", "Docs/Classes/AFactionInfo/Functions/Random_GetAttackingUnitType.html", ["random_", "get", "attacking", "unit", "type"], "AFactionInfo");
addToContainers_function("Random_GetBaseDefenseType", "Get a random base defense building type. Returns EBuildingType::NotBuilding if faction has no base defense buildings", "Docs/Classes/AFactionInfo/Functions/Random_GetBaseDefenseType.html", ["random_", "get", "base", "defense", "type"], "AFactionInfo");
addToContainers_function("GetLargestContextMenu", "Get how many buttons the selectable with the most context buttons on this faction has", "Docs/Classes/AFactionInfo/Functions/GetLargestContextMenu.html", ["get", "largest", "context", "menu"], "AFactionInfo");
addToContainers_function("GetLargestProductionQueueCapacity", "Returns the largest production queue for buildings this faction has", "Docs/Classes/AFactionInfo/Functions/GetLargestProductionQueueCapacity.html", ["get", "largest", "production", "queue", "capacity"], "AFactionInfo");
addToContainers_function("GetLargestBuildingGarrisonSlotCapacity", "", "Docs/Classes/AFactionInfo/Functions/GetLargestBuildingGarrisonSlotCap.html", ["get", "largest", "building", "garrison", "slot", "capacity"], "AFactionInfo");
addToContainers_function("GetLargestShopCatalogue", "Return the maximum number of items a shop on this faction displays and/or sells", "Docs/Classes/AFactionInfo/Functions/GetLargestShopCatalogue.html", ["get", "largest", "shop", "catalogue"], "AFactionInfo");
addToContainers_function("GetLargestInventory", "Return the largest number of slots a selectable on this faction has in their inventory", "Docs/Classes/AFactionInfo/Functions/GetLargestInventory.html", ["get", "largest", "inventory"], "AFactionInfo");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/AFactionInfo/Variables/.html", [], "AFactionInfo");
addToContainers_variable("Faction", "The faction this info is for", "Docs/Classes/AFactionInfo/Variables/Faction.html", [], "AFactionInfo");
addToContainers_variable("", "The name to appear in UI", "Docs/Classes/AFactionInfo/Variables/_1.html", [], "AFactionInfo");
addToContainers_variable("", "Image to appear in UI", "Docs/Classes/AFactionInfo/Variables/_2.html", [], "AFactionInfo");
addToContainers_variable("", "Buildings that can be built by this faction.", "Docs/Classes/AFactionInfo/Variables/_3.html", [], "AFactionInfo");
addToContainers_variable("", "Units that can be built by this faction", "Docs/Classes/AFactionInfo/Variables/_4.html", [], "AFactionInfo");
addToContainers_variable("", "The starting grid to use for this faction. Starting grids define what and where buildings/units this faction starts a match with", "Docs/Classes/AFactionInfo/Variables/_5.html", [], "AFactionInfo");
addToContainers_variable("", "Upgrades this faction can research", "Docs/Classes/AFactionInfo/Variables/_6.html", [], "AFactionInfo");
addToContainers_variable("UpgradesResearchableThroughBuildings", "These are upgrades that can be researched through a building as opposed to being aquired by a commander ability. Note: I currently don\'t use this at any other time besides setup. It could be removed as a class variable to save on memory.", "Docs/Classes/AFactionInfo/Variables/UpgradesResearchableThroughBuildi.html", ["upgrades", "researchable", "through", "buildings"], "AFactionInfo");
addToContainers_variable("", "Maps level to info about what happens to a selectable upon reaching that level. The entry for the starting level will ignore the bonus and particles - it is just for the icon", "Docs/Classes/AFactionInfo/Variables/_7.html", [], "AFactionInfo");
addToContainers_variable("", "What happens when the commander gains a rank. Maps rank to the bonuses", "Docs/Classes/AFactionInfo/Variables/_8.html", [], "AFactionInfo");
addToContainers_variable("", "How many commander skill points players who play this faction should start the game with", "Docs/Classes/AFactionInfo/Variables/_9.html", [], "AFactionInfo");
addToContainers_variable("", "Holds information for all buildings for this faction", "Docs/Classes/AFactionInfo/Variables/_10.html", [], "AFactionInfo");
addToContainers_variable("", "Holds information for all units for this faction", "Docs/Classes/AFactionInfo/Variables/_11.html", [], "AFactionInfo");
addToContainers_variable("", "Holds bonuses from level ups for selectables as created UObjects", "Docs/Classes/AFactionInfo/Variables/_12.html", [], "AFactionInfo");
addToContainers_variable("", "Optional override for mouse cursor to use when playing matches as this faction. Leaving Cursor Path blank will default to using the one defined in game instance", "Docs/Classes/AFactionInfo/Variables/_13.html", [], "AFactionInfo");
addToContainers_variable("", "8 edge scrolling cursors", "Docs/Classes/AFactionInfo/Variables/_14.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_15.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_16.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_17.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_18.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_19.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_20.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_21.html", [], "AFactionInfo");
addToContainers_variable("MouseCursor_Info", "", "Docs/Classes/AFactionInfo/Variables/MouseCursor_Info.html", ["mouse", "cursor_", "info"], "AFactionInfo");
addToContainers_variable("EdgeScrollingCursor_Infos[8]", "Array of the 8 mouse cursors that appear when the player has their mouse close enough to the edge of the screen that the camera moves Index 0 = left Index 1 = right Index 2 = up Index 3 = left + up Index 4 = right + up Index 5 = down Index 6 = left + down Index 7 = right + down The indices are set out like this so just additions can be used to figure out the index in ARTSPlayerController::MoveIfAtEdgeOfScreen", "Docs/Classes/AFactionInfo/Variables/EdgeScrollingCursor_Infos[8].html", ["edge", "scrolling", "cursor_", "infos[8]"], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering the mouse over a hostile unit and it can be attacked by at least one selected selectable", "Docs/Classes/AFactionInfo/Variables/_22.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering the mouse over a hostile unit and it cannot be attacked by any selected selectables", "Docs/Classes/AFactionInfo/Variables/_23.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering the mouse over a friendly unit and it can be \'attacked\' by at least one selected selectable. The attack is hopefully something helpful that heals the target or something.", "Docs/Classes/AFactionInfo/Variables/_24.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_25.html", [], "AFactionInfo");
addToContainers_variable("", "Same deal as the unit cursors except for buildings instead", "Docs/Classes/AFactionInfo/Variables/_26.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_27.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_28.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_29.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering mouse over an inventory item in the world and at least one selected selectable can pick it up", "Docs/Classes/AFactionInfo/Variables/_30.html", [], "AFactionInfo");
addToContainers_variable("", "Default mouse cursor to show when hovering mouse over an inventory item in the world and no selected selectable can pick it up.", "Docs/Classes/AFactionInfo/Variables/_31.html", [], "AFactionInfo");
addToContainers_variable("", "Default cursors to show when hovering mouse over a resource spot and at least one selected selectable can gather from it.", "Docs/Classes/AFactionInfo/Variables/_32.html", [], "AFactionInfo");
addToContainers_variable("", "", "Docs/Classes/AFactionInfo/Variables/_33.html", [], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredHostileUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHover.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "hostile", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredHostileUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHo.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "hostile", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredFriendlyUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHover_1.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "friendly", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredFriendlyUnit_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHo_1.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "friendly", "unit_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredHostileBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHover_2.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "hostile", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredHostileBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHo_2.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "hostile", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanAttackHoveredFriendlyBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanAttackHover_3.html", ["default", "mouse", "cursor_", "can", "attack", "hovered", "friendly", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotAttackHoveredFriendlyBuilding_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotAttackHo_3.html", ["default", "mouse", "cursor_", "cannot", "attack", "hovered", "friendly", "building_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanPickUpHoveredInventoryItem_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanPickUpHover.html", ["default", "mouse", "cursor_", "can", "pick", "up", "hovered", "inventory", "item_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotPickUpHoveredInventoryItem_Info", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotPickUpHo.html", ["default", "mouse", "cursor_", "cannot", "pick", "up", "hovered", "inventory", "item_", "info"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CanGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]", "Use Statics::ResourceTypeToArrayIndex to get the right index", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CanGatherFromH.html", ["default", "mouse", "cursor_", "can", "gather", "from", "hovered", "resource", "spot_", "info[", "statics::", "n", "u", "m_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s]"], "AFactionInfo");
addToContainers_variable("DefaultMouseCursor_CannotGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]", "", "Docs/Classes/AFactionInfo/Variables/DefaultMouseCursor_CannotGatherFr.html", ["default", "mouse", "cursor_", "cannot", "gather", "from", "hovered", "resource", "spot_", "info[", "statics::", "n", "u", "m_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s]"], "AFactionInfo");
addToContainers_variable("", "The widget to attach to all selectables when playing this faction excluding resource spots", "Docs/Classes/AFactionInfo/Variables/_34.html", [], "AFactionInfo");
addToContainers_variable("", "The widget to attach to all selectables when they are selected excluding resource spots", "Docs/Classes/AFactionInfo/Variables/_35.html", [], "AFactionInfo");
addToContainers_variable("", "The widget to attach to all resource spots. This widget should not have any health displaying widgets bound", "Docs/Classes/AFactionInfo/Variables/_36.html", [], "AFactionInfo");
addToContainers_variable("", "The widget to attach to a resource spot when it is selected. This widget should not have any health displaying widgets bound", "Docs/Classes/AFactionInfo/Variables/_37.html", [], "AFactionInfo");
addToContainers_variable("", "Decal to show under a selectable when it is selected. Set size individually on each selectable", "Docs/Classes/AFactionInfo/Variables/_38.html", [], "AFactionInfo");
addToContainers_variable("", "Maps affiliation to particles to display on selectable when selecting them. Different size templates can be set instead of just scaling the particles which sometimes does not look right", "Docs/Classes/AFactionInfo/Variables/_39.html", [], "AFactionInfo");
addToContainers_variable("", "Maps affiliation to particles to display on a selectable when right-clicking it", "Docs/Classes/AFactionInfo/Variables/_40.html", [], "AFactionInfo");
addToContainers_variable("", "Particle system to spawn on world when right mouse click command is issued, if any. Note these do not attach to the selectable clicked so the target ones might want to be left blank", "Docs/Classes/AFactionInfo/Variables/_41.html", [], "AFactionInfo");
addToContainers_variable("", "Decal to show under a selectable when right-clicking it. Setup size in each specific selectable\'s BP. These do attach to the selectable clicked", "Docs/Classes/AFactionInfo/Variables/_42.html", [], "AFactionInfo");
addToContainers_variable("", "Optional set of widgets than can override the default in-game widgets. Any widget types without entries will use the widget defined in the game instance.", "Docs/Classes/AFactionInfo/Variables/_43.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for events such as \'Production queue is full\'. Any warning types without entries will use the message defined in game instance.", "Docs/Classes/AFactionInfo/Variables/_44.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for whatever custom checks are performed by abilities e.g. \"Target not below 30% HP\", \"Buff not present on target\" Any warning types without entries will use the message defined in game instance.", "Docs/Classes/AFactionInfo/Variables/_45.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for times when you try to spend more resources than you have. Any resource types without entries will use the message defined in game instance", "Docs/Classes/AFactionInfo/Variables/_46.html", [], "AFactionInfo");
addToContainers_variable("", "Optional warning message overrides for times when you do not have enough housing resources Any resource types without entries will use the message defined in game instance", "Docs/Classes/AFactionInfo/Variables/_47.html", [], "AFactionInfo");
addToContainers_variable("", "Maps HUD persistent tab type to sorted array of order buttons should appear on that tab", "Docs/Classes/AFactionInfo/Variables/_48.html", [], "AFactionInfo");
addToContainers_variable("", "Maps button type to what HUD persistent tab it should be in", "Docs/Classes/AFactionInfo/Variables/_49.html", [], "AFactionInfo");
addToContainers_variable("", "How much housing resources are always provided no matter what. e.g. in SCII if you have 0 pylons and 0 nexus then you have 0 supply. However if this variable is 5 then you would have 5. After you build a pylon you would have 13.", "Docs/Classes/AFactionInfo/Variables/_50.html", [], "AFactionInfo");
addToContainers_variable("", "Copy of ConstantHousingResourceAmountProvided that is populated on post edit. It exists for performance only", "Docs/Classes/AFactionInfo/Variables/_51.html", [], "AFactionInfo");
addToContainers_variable("", "Limits on the max value a housing resource can provide. Leaving no entry means the resource has no limit. e.g. in SCII population has a limit of 200", "Docs/Classes/AFactionInfo/Variables/_52.html", [], "AFactionInfo");
addToContainers_variable("", "Copy of HousingResourceLimits that is populated in post edit. It exists for performance only", "Docs/Classes/AFactionInfo/Variables/_53.html", [], "AFactionInfo");
addToContainers_variable("", "Maps building type to the maximum amount of that building each player is allowed to have when playing as this faction. e.g. in C&C generals sometimes each player is only allowed to build a maximum of one superweapon. Maps from building type to the limit. All values should be at least one. If you do not want a limit then just remove its key/value pair from this container.", "Docs/Classes/AFactionInfo/Variables/_54.html", [], "AFactionInfo");
addToContainers_variable("", "Same as BuildingQuantityLimits except for units instead e.g. in RA2 only one tanya can be built per player at a time", "Docs/Classes/AFactionInfo/Variables/_55.html", [], "AFactionInfo");
addToContainers_variable("", "The default way buildings are built for this faction. This can be overridden on a per building basis", "Docs/Classes/AFactionInfo/Variables/_56.html", [], "AFactionInfo");
addToContainers_variable("", "The distance a building must be from another owned/allied (see bCanBuildOffAllies below) building for it to be built. This is measured from the center of the building trying to be placed to the edge of other buildings. 0 = unlimited. This can be overridden and ignored on a per building basis e.g. In C&C 3 and many other C&Cs there is a rule where the building must be placed close to other buildings. In SCII there is no restriction", "Docs/Classes/AFactionInfo/Variables/_57.html", [], "AFactionInfo");
addToContainers_variable("", "Whether BuildingProximityRange can use allied buildings aswell. So if true you can build off allies buildings too. An example of true is in Red Alert 2 where you can place buildings near friendlies buildings Because BuildingProximityRange can be overridden on a per building basis this can still be relevant even if BuildingProximityRange = 0", "Docs/Classes/AFactionInfo/Variables/_58.html", [], "AFactionInfo");
addToContainers_variable("", "Optional overrides for the default image set in game instance. These are for different resource types", "Docs/Classes/AFactionInfo/Variables/_59.html", [], "AFactionInfo");
addToContainers_variable("", "Music to play when playing match as this faction", "Docs/Classes/AFactionInfo/Variables/_60.html", [], "AFactionInfo");
addToContainers_variable("", "Sound to play when setting a rally point for a unit producing building", "Docs/Classes/AFactionInfo/Variables/_61.html", [], "AFactionInfo");
addToContainers_variable("", "Buildings that have a persistent queue i.e. are construction yard type buildings. This is mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_62.html", [], "AFactionInfo");
addToContainers_variable("", "Units that can build at least one building. This is mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_63.html", [], "AFactionInfo");
addToContainers_variable("", "Unit types that are considered \'attacking\' types. Anything not a collector or a worker will be considered an attacking type. This is mainly here for CPU player AI controller", "Docs/Classes/AFactionInfo/Variables/_64.html", [], "AFactionInfo");
addToContainers_variable("", "Maps resource type to unit types that can gather that resource. This is mainly here for CPU player AI controller", "Docs/Classes/AFactionInfo/Variables/_65.html", [], "AFactionInfo");
addToContainers_variable("", "Maps resource type to the type of buildings that serve as a drop point for it. Mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_66.html", [], "AFactionInfo");
addToContainers_variable("", "Array of all building types that can build at least one unit. Does not distinguish between whether they are a worker/collector/army unit. Mainly here for CPU player AI controllers", "Docs/Classes/AFactionInfo/Variables/_67.html", [], "AFactionInfo");
addToContainers_variable("", "Array of building types that are considered base defenses. Mainly here for CPU player AI controller", "Docs/Classes/AFactionInfo/Variables/_68.html", [], "AFactionInfo");
addToContainers_variable("LargestContextMenu", "Largest context menu on this faction", "Docs/Classes/AFactionInfo/Variables/LargestContextMenu.html", ["largest", "context", "menu"], "AFactionInfo");
addToContainers_variable("LargestProductionQueueCapacity", "Largest production queue for all buildings on this faction\'s building roster. Context queues only", "Docs/Classes/AFactionInfo/Variables/LargestProductionQueueCapacity.html", ["largest", "production", "queue", "capacity"], "AFactionInfo");
addToContainers_variable("LargestBuildingGarrisonSlotCapacity", "Most unit garrison slots a building on this faction has", "Docs/Classes/AFactionInfo/Variables/LargestBuildingGarrisonSlotCapaci.html", ["largest", "building", "garrison", "slot", "capacity"], "AFactionInfo");
addToContainers_variable("MaxNumberOfShopItemsOnAShop", "The maximum number of items a shop on this faction has on display and/or sells", "Docs/Classes/AFactionInfo/Variables/MaxNumberOfShopItemsOnAShop.html", ["max", "number", "of", "shop", "items", "on", "a", "shop"], "AFactionInfo");
addToContainers_variable("MaxUnitInventoryCapacity", "The maximum size inventory a selectable on this faction has", "Docs/Classes/AFactionInfo/Variables/MaxUnitInventoryCapacity.html", ["max", "unit", "inventory", "capacity"], "AFactionInfo");
addToContainers_variable("Info2)", "For sorting", "Docs/Classes/AFactionInfo/Variables/Info2).html", [], "AFactionInfo");
addToContainers_variable("", "Stores all the blueprints for each selectable on this faction. Here to speed up the process of removing already placed on map selectables right before a PIE session", "Docs/Classes/AFactionInfo/Variables/_69.html", [], "AFactionInfo");
addToContainers_class("URTSGameInstance", "A very important class. Contains a lot of properties for your game.", "Docs/Classes/URTSGameInstance/URTSGameInstance.html", ["r", "t", "s", "game", "instance"], "");
addToContainers_function("URTSGameInstance", "", "Docs/Classes/URTSGameInstance/Functions/URTSGameInstance.html", ["r", "t", "s", "game", "instance"], "URTSGameInstance");
addToContainers_function("SetupInitialSettings", "Spawn and set a sound mix and find all sound classes", "Docs/Classes/URTSGameInstance/Functions/SetupInitialSettings.html", ["setup", "initial", "settings"], "URTSGameInstance");
addToContainers_function("InitDevelopmentSettings", "Spawn actor that holds settings for development", "Docs/Classes/URTSGameInstance/Functions/InitDevelopmentSettings.html", ["init", "development", "settings"], "URTSGameInstance");
addToContainers_function("CreatePoolingManager", "Spawn object pooling manager", "Docs/Classes/URTSGameInstance/Functions/CreatePoolingManager.html", ["create", "pooling", "manager"], "URTSGameInstance");
addToContainers_function("InitFactionInfo", "Create all the structs for each type of building/unit and store them in arrays. Call at least before playing a match", "Docs/Classes/URTSGameInstance/Functions/InitFactionInfo.html", ["init", "faction", "info"], "URTSGameInstance");
addToContainers_function("InitContextActions", "Initialize ContextInfo on begin play by checking if it contains duplicates with the same type (crash if it does), and then sorting it", "Docs/Classes/URTSGameInstance/Functions/InitContextActions.html", ["init", "context", "actions"], "URTSGameInstance");
addToContainers_function("InitCommanderAbilityInfo", "", "Docs/Classes/URTSGameInstance/Functions/InitCommanderAbilityInfo.html", ["init", "commander", "ability", "info"], "URTSGameInstance");
addToContainers_function("InitCommanderSkillTreeNodeInfo", "", "Docs/Classes/URTSGameInstance/Functions/InitCommanderSkillTreeNodeInfo.html", ["init", "commander", "skill", "tree", "node", "info"], "URTSGameInstance");
addToContainers_function("InitBuildingTargetingAbilityInfo", "", "Docs/Classes/URTSGameInstance/Functions/InitBuildingTargetingAbilityInfo.html", ["init", "building", "targeting", "ability", "info"], "URTSGameInstance");
addToContainers_function("SetupBuffsAndDebuffInfos", "Set the function pointers for the buff/debuff infos", "Docs/Classes/URTSGameInstance/Functions/SetupBuffsAndDebuffInfos.html", ["setup", "buffs", "and", "debuff", "infos"], "URTSGameInstance");
addToContainers_function("InitInventoryItemInfo", "Do setupy stuff for inventory items", "Docs/Classes/URTSGameInstance/Functions/InitInventoryItemInfo.html", ["init", "inventory", "item", "info"], "URTSGameInstance");
addToContainers_function("InitKeyInfo", "", "Docs/Classes/URTSGameInstance/Functions/InitKeyInfo.html", ["init", "key", "info"], "URTSGameInstance");
addToContainers_function("CreateHeavyTaskManager", "", "Docs/Classes/URTSGameInstance/Functions/CreateHeavyTaskManager.html", ["create", "heavy", "task", "manager"], "URTSGameInstance");
addToContainers_function("InitMouseCursorInfo", "Setup custom mouse cursors", "Docs/Classes/URTSGameInstance/Functions/InitMouseCursorInfo.html", ["init", "mouse", "cursor", "info"], "URTSGameInstance");
addToContainers_function("SetupDefeatConditionInfo", "", "Docs/Classes/URTSGameInstance/Functions/SetupDefeatConditionInfo.html", ["setup", "defeat", "condition", "info"], "URTSGameInstance");
addToContainers_function("SetupMapPool", "", "Docs/Classes/URTSGameInstance/Functions/SetupMapPool.html", ["setup", "map", "pool"], "URTSGameInstance");
addToContainers_function("SetupLoadingScreenMessages", "", "Docs/Classes/URTSGameInstance/Functions/SetupLoadingScreenMessages.html", ["setup", "loading", "screen", "messages"], "URTSGameInstance");
addToContainers_function("SetupCommonContextActions", "Sets up some common context commands such as \'attack move\' and \'hold position\'. Saves having to redo them in editor because of data loss bug", "Docs/Classes/URTSGameInstance/Functions/SetupCommonContextActions.html", ["setup", "common", "context", "actions"], "URTSGameInstance");
addToContainers_function("SetupCustomContextActions", "Setup context actions like artillery strike. Saves having to redo in editor because of data loss bug", "Docs/Classes/URTSGameInstance/Functions/SetupCustomContextActions.html", ["setup", "custom", "context", "actions"], "URTSGameInstance");
addToContainers_function("SetupMissingContextActions", "Fill context action TMap with default struct for any abilities that have not been defined in SetupCommonContextActions or SetupCustomContextActions", "Docs/Classes/URTSGameInstance/Functions/SetupMissingContextActions.html", ["setup", "missing", "context", "actions"], "URTSGameInstance");
addToContainers_function("SetupCPUInfo", "", "Docs/Classes/URTSGameInstance/Functions/SetupCPUInfo.html", ["setup", "c", "p", "u", "info"], "URTSGameInstance");
addToContainers_function("SetupMatchWidgets_BP", "", "Docs/Classes/URTSGameInstance/Functions/SetupMatchWidgets_BP.html", ["setup", "match", "widgets_", "b", "p"], "URTSGameInstance");
addToContainers_function("SetDefaultHUDMessages", "", "Docs/Classes/URTSGameInstance/Functions/SetDefaultHUDMessages.html", ["set", "default", "h", "u", "d", "messages"], "URTSGameInstance");
addToContainers_function("SetupResourceInfo", "", "Docs/Classes/URTSGameInstance/Functions/SetupResourceInfo.html", ["setup", "resource", "info"], "URTSGameInstance");
addToContainers_function("SetupLeaveOnMapList", "", "Docs/Classes/URTSGameInstance/Functions/SetupLeaveOnMapList.html", ["setup", "leave", "on", "map", "list"], "URTSGameInstance");
addToContainers_function("SetupSelectableResourceInfo", "", "Docs/Classes/URTSGameInstance/Functions/SetupSelectableResourceInfo.html", ["setup", "selectable", "resource", "info"], "URTSGameInstance");
addToContainers_function("SetupInventoryItemInfo", "", "Docs/Classes/URTSGameInstance/Functions/SetupInventoryItemInfo.html", ["setup", "inventory", "item", "info"], "URTSGameInstance");
addToContainers_function("SetupKeyInfo", "", "Docs/Classes/URTSGameInstance/Functions/SetupKeyInfo.html", ["setup", "key", "info"], "URTSGameInstance");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/URTSGameInstance/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "URTSGameInstance");
addToContainers_function("Initialize", "Init() = overridable game instance version of begin play", "Docs/Classes/URTSGameInstance/Functions/Initialize.html", [], "URTSGameInstance");
addToContainers_function("OnMapChange", "Spawns faction infos. Initialize() may work too", "Docs/Classes/URTSGameInstance/Functions/OnMapChange.html", ["on", "map", "change"], "URTSGameInstance");
addToContainers_function("Shutdown", "Virtual function to allow custom GameInstances an opportunity to do cleanup when shutting down", "Docs/Classes/URTSGameInstance/Functions/Shutdown.html", [], "URTSGameInstance");
addToContainers_function("GetAllFactionInfo", "Get array of all faction info", "Docs/Classes/URTSGameInstance/Functions/GetAllFactionInfo.html", ["get", "all", "faction", "info"], "URTSGameInstance");
addToContainers_function("GetFactionInfo", "Get reference to FactionInfo for certain faction @param Faction - the faction to get info for @return - the faction info", "Docs/Classes/URTSGameInstance/Functions/GetFactionInfo.html", ["get", "faction", "info"], "URTSGameInstance");
addToContainers_function("GetRandomFactionInfo", "Get faction info for a random faction", "Docs/Classes/URTSGameInstance/Functions/GetRandomFactionInfo.html", ["get", "random", "faction", "info"], "URTSGameInstance");
addToContainers_function("GetRandomFaction", "Get a random faction", "Docs/Classes/URTSGameInstance/Functions/GetRandomFaction.html", ["get", "random", "faction"], "URTSGameInstance");
addToContainers_function("GetContextInfo", "Get info about a context action given the button type. The function that is called by each button type needs to be added to a function in MyPlayerController @param ButtonType - the button type to get info for @return - a struct that holds the info about the button", "Docs/Classes/URTSGameInstance/Functions/GetContextInfo.html", ["get", "context", "info"], "URTSGameInstance");
addToContainers_function("GetCommanderAbilityInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetCommanderAbilityInfo.html", ["get", "commander", "ability", "info"], "URTSGameInstance");
addToContainers_function("GetCommanderSkillTreeNodeInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetCommanderSkillTreeNodeInfo.html", ["get", "commander", "skill", "tree", "node", "info"], "URTSGameInstance");
addToContainers_function("GetAllCommanderAbilities", "", "Docs/Classes/URTSGameInstance/Functions/GetAllCommanderAbilities.html", ["get", "all", "commander", "abilities"], "URTSGameInstance");
addToContainers_function("GetBuildingTargetingAbilityInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetBuildingTargetingAbilityInfo.html", ["get", "building", "targeting", "ability", "info"], "URTSGameInstance");
addToContainers_function("GetResourceInfo", "Get information about a resource", "Docs/Classes/URTSGameInstance/Functions/GetResourceInfo.html", ["get", "resource", "info"], "URTSGameInstance");
addToContainers_function("GetStartingResourceConfig", "Get the specific amounts of resources to start with given an amount enum", "Docs/Classes/URTSGameInstance/Functions/GetStartingResourceConfig.html", ["get", "starting", "resource", "config"], "URTSGameInstance");
addToContainers_function("GetAllStartingResourceConfigs", "", "Docs/Classes/URTSGameInstance/Functions/GetAllStartingResourceConfigs.html", ["get", "all", "starting", "resource", "configs"], "URTSGameInstance");
addToContainers_function("GetPoolingManager", "Get object pooling manager in charge of projectile pooling", "Docs/Classes/URTSGameInstance/Functions/GetPoolingManager.html", ["get", "pooling", "manager"], "URTSGameInstance");
addToContainers_function("GetHeavyTaskManager", "", "Docs/Classes/URTSGameInstance/Functions/GetHeavyTaskManager.html", ["get", "heavy", "task", "manager"], "URTSGameInstance");
addToContainers_function("GetDamageMultiplier", "Get how much base damage (before upgrades) a certain damage type deals to a certain armour type @param DamageType - damage instigator\'s damage type @param ArmourType - damage recipient\'s armour type @return - base damage multiplier", "Docs/Classes/URTSGameInstance/Functions/GetDamageMultiplier.html", ["get", "damage", "multiplier"], "URTSGameInstance");
addToContainers_function("GetBuildingNetworkInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetBuildingNetworkInfo.html", ["get", "building", "network", "info"], "URTSGameInstance");
addToContainers_function("GetExperienceBountyMultiplierPerLevel", "", "Docs/Classes/URTSGameInstance/Functions/GetExperienceBountyMultiplierPerL.html", ["get", "experience", "bounty", "multiplier", "per", "level"], "URTSGameInstance");
addToContainers_function("IsInitializingFactionInfo", "", "Docs/Classes/URTSGameInstance/Functions/IsInitializingFactionInfo.html", ["is", "initializing", "faction", "info"], "URTSGameInstance");
addToContainers_function("GetAllContextInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetAllContextInfo.html", ["get", "all", "context", "info"], "URTSGameInstance");
addToContainers_function("GetDefeatConditionInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetDefeatConditionInfo.html", ["get", "defeat", "condition", "info"], "URTSGameInstance");
addToContainers_function("GetAllDefeatConditions", "", "Docs/Classes/URTSGameInstance/Functions/GetAllDefeatConditions.html", ["get", "all", "defeat", "conditions"], "URTSGameInstance");
addToContainers_function("GetMapPool", "Get the list of maps matches can be played on.", "Docs/Classes/URTSGameInstance/Functions/GetMapPool.html", ["get", "map", "pool"], "URTSGameInstance");
addToContainers_function("GetMapInfo", "Get map info given its name or ID. I think MapName refers to the name given by user in editor not folder path", "Docs/Classes/URTSGameInstance/Functions/GetMapInfo.html", ["get", "map", "info"], "URTSGameInstance");
addToContainers_function("GetMapInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetMapInfo_1.html", ["get", "map", "info"], "URTSGameInstance");
addToContainers_function("IsLocationInsideMapBounds", "Return whether a world location is inside the bounds of the current map", "Docs/Classes/URTSGameInstance/Functions/IsLocationInsideMapBounds.html", ["is", "location", "inside", "map", "bounds"], "URTSGameInstance");
addToContainers_function("GetMouseCursorInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetMouseCursorInfo.html", ["get", "mouse", "cursor", "info"], "URTSGameInstance");
addToContainers_function("GetMatchMouseCursor", "", "Docs/Classes/URTSGameInstance/Functions/GetMatchMouseCursor.html", ["get", "match", "mouse", "cursor"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_Top", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_Top.html", ["get", "edge", "scrolling", "cursor_", "top"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_TopRight", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_TopRight.html", ["get", "edge", "scrolling", "cursor_", "top", "right"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_Right", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_Right.html", ["get", "edge", "scrolling", "cursor_", "right"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_BottomRight", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_BottomRigh.html", ["get", "edge", "scrolling", "cursor_", "bottom", "right"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_Bottom", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_Bottom.html", ["get", "edge", "scrolling", "cursor_", "bottom"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_BottomLeft", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_BottomLeft.html", ["get", "edge", "scrolling", "cursor_", "bottom", "left"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_Left", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_Left.html", ["get", "edge", "scrolling", "cursor_", "left"], "URTSGameInstance");
addToContainers_function("GetEdgeScrollingCursor_TopLeft", "", "Docs/Classes/URTSGameInstance/Functions/GetEdgeScrollingCursor_TopLeft.html", ["get", "edge", "scrolling", "cursor_", "top", "left"], "URTSGameInstance");
addToContainers_function("GetAbilityDefaultMouseCursor_Default", "", "Docs/Classes/URTSGameInstance/Functions/GetAbilityDefaultMouseCursor_Defa.html", ["get", "ability", "default", "mouse", "cursor_", "default"], "URTSGameInstance");
addToContainers_function("GetAbilityDefaultMouseCursor_AcceptableTarget", "", "Docs/Classes/URTSGameInstance/Functions/GetAbilityDefaultMouseCursor_Acce.html", ["get", "ability", "default", "mouse", "cursor_", "acceptable", "target"], "URTSGameInstance");
addToContainers_function("GetAbilityDefaultMouseCursor_UnacceptableTarget", "", "Docs/Classes/URTSGameInstance/Functions/GetAbilityDefaultMouseCursor_Unac.html", ["get", "ability", "default", "mouse", "cursor_", "unacceptable", "target"], "URTSGameInstance");
addToContainers_function("GetSoundMix", "Get sound mix that is passed around by UGameplayStatics::SetSoundMixClassOverride", "Docs/Classes/URTSGameInstance/Functions/GetSoundMix.html", ["get", "sound", "mix"], "URTSGameInstance");
addToContainers_function("GetSoundClasses", "Get all sound classes", "Docs/Classes/URTSGameInstance/Functions/GetSoundClasses.html", ["get", "sound", "classes"], "URTSGameInstance");
addToContainers_function("GetSoundClass", "Given a string get the sound class", "Docs/Classes/URTSGameInstance/Functions/GetSoundClass.html", ["get", "sound", "class"], "URTSGameInstance");
addToContainers_function("GetBuffOrDebuffInfo", "Get info about a static buff/debuff", "Docs/Classes/URTSGameInstance/Functions/GetBuffOrDebuffInfo.html", ["get", "buff", "or", "debuff", "info"], "URTSGameInstance");
addToContainers_function("GetBuffOrDebuffInfo", "Get info about a tickable buff/debuff", "Docs/Classes/URTSGameInstance/Functions/GetBuffOrDebuffInfo_1.html", ["get", "buff", "or", "debuff", "info"], "URTSGameInstance");
addToContainers_function("GetBuffOrDebuffSubTypeInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetBuffOrDebuffSubTypeInfo.html", ["get", "buff", "or", "debuff", "sub", "type", "info"], "URTSGameInstance");
addToContainers_function("GetSelectableResourceInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetSelectableResourceInfo.html", ["get", "selectable", "resource", "info"], "URTSGameInstance");
addToContainers_function("GetInventoryItemInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetInventoryItemInfo.html", ["get", "inventory", "item", "info"], "URTSGameInstance");
addToContainers_function("GetRandomInventoryItem", "Returns \"None\" if there are none", "Docs/Classes/URTSGameInstance/Functions/GetRandomInventoryItem.html", ["get", "random", "inventory", "item"], "URTSGameInstance");
addToContainers_function("GetEmptyInventorySlotImage_Normal", "", "Docs/Classes/URTSGameInstance/Functions/GetEmptyInventorySlotImage_Normal.html", ["get", "empty", "inventory", "slot", "image_", "normal"], "URTSGameInstance");
addToContainers_function("GetEmptyInventorySlotImage_Hovered", "", "Docs/Classes/URTSGameInstance/Functions/GetEmptyInventorySlotImage_Hovere.html", ["get", "empty", "inventory", "slot", "image_", "hovered"], "URTSGameInstance");
addToContainers_function("GetEmptyInventorySlotImage_Pressed", "", "Docs/Classes/URTSGameInstance/Functions/GetEmptyInventorySlotImage_Presse.html", ["get", "empty", "inventory", "slot", "image_", "pressed"], "URTSGameInstance");
addToContainers_function("GetEmptyInventorySlotSound_Hovered", "", "Docs/Classes/URTSGameInstance/Functions/GetEmptyInventorySlotSound_Hovere.html", ["get", "empty", "inventory", "slot", "sound_", "hovered"], "URTSGameInstance");
addToContainers_function("GetEmptyInventorySlotSound_PressedByLMB", "", "Docs/Classes/URTSGameInstance/Functions/GetEmptyInventorySlotSound_Presse.html", ["get", "empty", "inventory", "slot", "sound_", "pressed", "by", "l", "m", "b"], "URTSGameInstance");
addToContainers_function("GetEmptyInventorySlotSound_PressedByRMB", "", "Docs/Classes/URTSGameInstance/Functions/GetEmptyInventorySlotSound_Presse_1.html", ["get", "empty", "inventory", "slot", "sound_", "pressed", "by", "r", "m", "b"], "URTSGameInstance");
addToContainers_function("IsBuff", "Functions to query whether a type is a buff or a debuff", "Docs/Classes/URTSGameInstance/Functions/IsBuff.html", ["is", "buff"], "URTSGameInstance");
addToContainers_function("IsBuff", "", "Docs/Classes/URTSGameInstance/Functions/IsBuff_1.html", ["is", "buff"], "URTSGameInstance");
addToContainers_function("IsDebuff", "", "Docs/Classes/URTSGameInstance/Functions/IsDebuff.html", ["is", "debuff"], "URTSGameInstance");
addToContainers_function("IsDebuff", "", "Docs/Classes/URTSGameInstance/Functions/IsDebuff_1.html", ["is", "debuff"], "URTSGameInstance");
addToContainers_function("GetMenuCursorInfo", "Get info on the custom main menu mouse cursor", "Docs/Classes/URTSGameInstance/Functions/GetMenuCursorInfo.html", ["get", "menu", "cursor", "info"], "URTSGameInstance");
addToContainers_function("GetObserverSelectionDecal", "Get selection decal info for observers", "Docs/Classes/URTSGameInstance/Functions/GetObserverSelectionDecal.html", ["get", "observer", "selection", "decal"], "URTSGameInstance");
addToContainers_function("GetObserverSelectableSelectionWorldWidget", "Get widgets to appear on selectables for observers", "Docs/Classes/URTSGameInstance/Functions/GetObserverSelectableSelectionWor.html", ["get", "observer", "selectable", "selection", "world", "widget"], "URTSGameInstance");
addToContainers_function("GetObserverSelectablePersistentWorldWidget", "", "Docs/Classes/URTSGameInstance/Functions/GetObserverSelectablePersistentWo.html", ["get", "observer", "selectable", "persistent", "world", "widget"], "URTSGameInstance");
addToContainers_function("GetObserverResourceSpotSelectionWorldWidget", "", "Docs/Classes/URTSGameInstance/Functions/GetObserverResourceSpotSelectionW.html", ["get", "observer", "resource", "spot", "selection", "world", "widget"], "URTSGameInstance");
addToContainers_function("GetObserverResourceSpotPersistentWorldWidget", "", "Docs/Classes/URTSGameInstance/Functions/GetObserverResourceSpotPersistent.html", ["get", "observer", "resource", "spot", "persistent", "world", "widget"], "URTSGameInstance");
addToContainers_function("GetWorldWidgetViewMode", "", "Docs/Classes/URTSGameInstance/Functions/GetWorldWidgetViewMode.html", ["get", "world", "widget", "view", "mode"], "URTSGameInstance");
addToContainers_function("GetCPUDifficulty", "Get CPU difficulty as string", "Docs/Classes/URTSGameInstance/Functions/GetCPUDifficulty.html", ["get", "c", "p", "u", "difficulty"], "URTSGameInstance");
addToContainers_function("GetCPUDifficultyInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetCPUDifficultyInfo.html", ["get", "c", "p", "u", "difficulty", "info"], "URTSGameInstance");
addToContainers_function("IsMatchWidgetBlueprintSet", "Return whether an optional match widget has a blueprint set for it", "Docs/Classes/URTSGameInstance/Functions/IsMatchWidgetBlueprintSet.html", ["is", "match", "widget", "blueprint", "set"], "URTSGameInstance");
addToContainers_function("GetMatchWidgetBP", "", "Docs/Classes/URTSGameInstance/Functions/GetMatchWidgetBP.html", ["get", "match", "widget", "b", "p"], "URTSGameInstance");
addToContainers_function("GetHUDNotificationMessageInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetHUDNotificationMessageInfo.html", ["get", "h", "u", "d", "notification", "message", "info"], "URTSGameInstance");
addToContainers_function("GetGameWarningInfo", "For generic common things", "Docs/Classes/URTSGameInstance/Functions/GetGameWarningInfo.html", ["get", "game", "warning", "info"], "URTSGameInstance");
addToContainers_function("GetGameWarningInfo", "For some reason an ability cannot be used", "Docs/Classes/URTSGameInstance/Functions/GetGameWarningInfo_1.html", ["get", "game", "warning", "info"], "URTSGameInstance");
addToContainers_function("GetGameWarningInfo", "For missing resources", "Docs/Classes/URTSGameInstance/Functions/GetGameWarningInfo_2.html", ["get", "game", "warning", "info"], "URTSGameInstance");
addToContainers_function("GetGameWarningInfo", "For missing housing resources", "Docs/Classes/URTSGameInstance/Functions/GetGameWarningInfo_3.html", ["get", "game", "warning", "info"], "URTSGameInstance");
addToContainers_function("GetHUDGameMessageCooldown", "", "Docs/Classes/URTSGameInstance/Functions/GetHUDGameMessageCooldown.html", ["get", "h", "u", "d", "game", "message", "cooldown"], "URTSGameInstance");
addToContainers_function("GetMarqueeSelectionBoxStyle", "Marquee settings ", "Docs/Classes/URTSGameInstance/Functions/GetMarqueeSelectionBoxStyle.html", ["get", "marquee", "selection", "box", "style"], "URTSGameInstance");
addToContainers_function("GetMarqueeBoxRectangleFillColor", "", "Docs/Classes/URTSGameInstance/Functions/GetMarqueeBoxRectangleFillColor.html", ["get", "marquee", "box", "rectangle", "fill", "color"], "URTSGameInstance");
addToContainers_function("GetMarqueeBoxBorderColor", "", "Docs/Classes/URTSGameInstance/Functions/GetMarqueeBoxBorderColor.html", ["get", "marquee", "box", "border", "color"], "URTSGameInstance");
addToContainers_function("GetMarqueeBoxBorderLineThickness", "", "Docs/Classes/URTSGameInstance/Functions/GetMarqueeBoxBorderLineThickness.html", ["get", "marquee", "box", "border", "line", "thickness"], "URTSGameInstance");
addToContainers_function("GetBuildingStartHealthPercentage", "", "Docs/Classes/URTSGameInstance/Functions/GetBuildingStartHealthPercentage.html", ["get", "building", "start", "health", "percentage"], "URTSGameInstance");
addToContainers_function("GetBuildingRallyPointDisplayRule", "", "Docs/Classes/URTSGameInstance/Functions/GetBuildingRallyPointDisplayRule.html", ["get", "building", "rally", "point", "display", "rule"], "URTSGameInstance");
addToContainers_function("GetGhostBadLocationParamName", "", "Docs/Classes/URTSGameInstance/Functions/GetGhostBadLocationParamName.html", ["get", "ghost", "bad", "location", "param", "name"], "URTSGameInstance");
addToContainers_function("GetGhostBadLocationParamValue", "", "Docs/Classes/URTSGameInstance/Functions/GetGhostBadLocationParamValue.html", ["get", "ghost", "bad", "location", "param", "value"], "URTSGameInstance");
addToContainers_function("GetFogOfWarMaterial", "", "Docs/Classes/URTSGameInstance/Functions/GetFogOfWarMaterial.html", ["get", "fog", "of", "war", "material"], "URTSGameInstance");
addToContainers_function("UsingAtLeastOneUnifiedMouseFocusImage", "Return whether the user wants to use the same mouse hover/press image for at least one type of HUD element", "Docs/Classes/URTSGameInstance/Functions/UsingAtLeastOneUnifiedMouseFocusI.html", ["using", "at", "least", "one", "unified", "mouse", "focus", "image"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssets_ActionBar", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssets_ActionBar.html", ["get", "unified", "button", "assets_", "action", "bar"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssets_Inventory", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssets_Inventory.html", ["get", "unified", "button", "assets_", "inventory"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssets_Shop", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssets_Shop.html", ["get", "unified", "button", "assets_", "shop"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssets_Menus", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssets_Menus.html", ["get", "unified", "button", "assets_", "menus"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverBrush_ActionBar", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverBrush_ActionBar.html", ["get", "unified", "hover", "brush_", "action", "bar"], "URTSGameInstance");
addToContainers_function("GetUnifiedPressedBrush_ActionBar", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedPressedBrush_ActionBar.html", ["get", "unified", "pressed", "brush_", "action", "bar"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverSound_ActionBar", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverSound_ActionBar.html", ["get", "unified", "hover", "sound_", "action", "bar"], "URTSGameInstance");
addToContainers_function("GetUnifiedLMBPressedSound_ActionBar", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedLMBPressedSound_ActionB.html", ["get", "unified", "l", "m", "b", "pressed", "sound_", "action", "bar"], "URTSGameInstance");
addToContainers_function("GetUnifiedRMBPressedSound_ActionBar", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedRMBPressedSound_ActionB.html", ["get", "unified", "r", "m", "b", "pressed", "sound_", "action", "bar"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverBrush_Inventory", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverBrush_Inventory.html", ["get", "unified", "hover", "brush_", "inventory"], "URTSGameInstance");
addToContainers_function("GetUnifiedPressedBrush_Inventory", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedPressedBrush_Inventory.html", ["get", "unified", "pressed", "brush_", "inventory"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverSound_Inventory", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverSound_Inventory.html", ["get", "unified", "hover", "sound_", "inventory"], "URTSGameInstance");
addToContainers_function("GetUnifiedLMBPressedSound_Inventory", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedLMBPressedSound_Invento.html", ["get", "unified", "l", "m", "b", "pressed", "sound_", "inventory"], "URTSGameInstance");
addToContainers_function("GetUnifiedRMBPressedSound_Inventory", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedRMBPressedSound_Invento.html", ["get", "unified", "r", "m", "b", "pressed", "sound_", "inventory"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverBrush_Shop", "These just return the same as inventory", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverBrush_Shop.html", ["get", "unified", "hover", "brush_", "shop"], "URTSGameInstance");
addToContainers_function("GetUnifiedPressedBrush_Shop", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedPressedBrush_Shop.html", ["get", "unified", "pressed", "brush_", "shop"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverSound_Shop", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverSound_Shop.html", ["get", "unified", "hover", "sound_", "shop"], "URTSGameInstance");
addToContainers_function("GetUnifiedLMBPressedSound_Shop", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedLMBPressedSound_Shop.html", ["get", "unified", "l", "m", "b", "pressed", "sound_", "shop"], "URTSGameInstance");
addToContainers_function("GetUnifiedRMBPressedSound_Shop", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedRMBPressedSound_Shop.html", ["get", "unified", "r", "m", "b", "pressed", "sound_", "shop"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverBrush_Menus", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverBrush_Menus.html", ["get", "unified", "hover", "brush_", "menus"], "URTSGameInstance");
addToContainers_function("GetUnifiedPressedBrush_Menus", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedPressedBrush_Menus.html", ["get", "unified", "pressed", "brush_", "menus"], "URTSGameInstance");
addToContainers_function("GetUnifiedHoverSound_Menus", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedHoverSound_Menus.html", ["get", "unified", "hover", "sound_", "menus"], "URTSGameInstance");
addToContainers_function("GetUnifiedLMBPressedSound_Menus", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedLMBPressedSound_Menus.html", ["get", "unified", "l", "m", "b", "pressed", "sound_", "menus"], "URTSGameInstance");
addToContainers_function("GetUnifiedRMBPressedSound_Menus", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedRMBPressedSound_Menus.html", ["get", "unified", "r", "m", "b", "pressed", "sound_", "menus"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssetFlags_ActionBar", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssetFlags_Action.html", ["get", "unified", "button", "asset", "flags_", "action", "bar"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssetFlags_InventoryItems", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssetFlags_Invent.html", ["get", "unified", "button", "asset", "flags_", "inventory", "items"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssetFlags_Shop", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssetFlags_Shop.html", ["get", "unified", "button", "asset", "flags_", "shop"], "URTSGameInstance");
addToContainers_function("GetUnifiedButtonAssetFlags_Menus", "", "Docs/Classes/URTSGameInstance/Functions/GetUnifiedButtonAssetFlags_Menus.html", ["get", "unified", "button", "asset", "flags_", "menus"], "URTSGameInstance");
addToContainers_function("GetCamaraZoomToMoveSpeedCurve", "", "Docs/Classes/URTSGameInstance/Functions/GetCamaraZoomToMoveSpeedCurve.html", ["get", "camara", "zoom", "to", "move", "speed", "curve"], "URTSGameInstance");
addToContainers_function("GetCameraMouseWheelZoomCurve", "", "Docs/Classes/URTSGameInstance/Functions/GetCameraMouseWheelZoomCurve.html", ["get", "camera", "mouse", "wheel", "zoom", "curve"], "URTSGameInstance");
addToContainers_function("GetCameraResetCurve", "", "Docs/Classes/URTSGameInstance/Functions/GetCameraResetCurve.html", ["get", "camera", "reset", "curve"], "URTSGameInstance");
addToContainers_function("GetInputKeyInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetInputKeyInfo.html", ["get", "input", "key", "info"], "URTSGameInstance");
addToContainers_function("KeyMappings_GetPlusSymbolImage", "", "Docs/Classes/URTSGameInstance/Functions/KeyMappings_GetPlusSymbolImage.html", ["key", "mappings_", "get", "plus", "symbol", "image"], "URTSGameInstance");
addToContainers_function("KeyMappings_GetCTRLModifierImage", "", "Docs/Classes/URTSGameInstance/Functions/KeyMappings_GetCTRLModifierImage.html", ["key", "mappings_", "get", "c", "t", "r", "l", "modifier", "image"], "URTSGameInstance");
addToContainers_function("KeyMappings_GetALTModifierImage", "", "Docs/Classes/URTSGameInstance/Functions/KeyMappings_GetALTModifierImage.html", ["key", "mappings_", "get", "a", "l", "t", "modifier", "image"], "URTSGameInstance");
addToContainers_function("KeyMappings_GetSHIFTModifierImage", "", "Docs/Classes/URTSGameInstance/Functions/KeyMappings_GetSHIFTModifierImage.html", ["key", "mappings_", "get", "s", "h", "i", "f", "t", "modifier", "image"], "URTSGameInstance");
addToContainers_function("ShouldStayOnMap", "Given a selectable return whether it should stay on the map or be destroyed at the start of the match. Resource spots are examples of falses. This is a slowish operation", "Docs/Classes/URTSGameInstance/Functions/ShouldStayOnMap.html", ["should", "stay", "on", "map"], "URTSGameInstance");
addToContainers_function("GetLargestShopCatalogueSize", "", "Docs/Classes/URTSGameInstance/Functions/GetLargestShopCatalogueSize.html", ["get", "largest", "shop", "catalogue", "size"], "URTSGameInstance");
addToContainers_function("GetLargestInventoryCapacity", "", "Docs/Classes/URTSGameInstance/Functions/GetLargestInventoryCapacity.html", ["get", "largest", "inventory", "capacity"], "URTSGameInstance");
addToContainers_function("SetupAudioComponents", "Setup audio component during Initialize", "Docs/Classes/URTSGameInstance/Functions/SetupAudioComponents.html", ["setup", "audio", "components"], "URTSGameInstance");
addToContainers_function("PlayMusic", "Play some music from the music audio comp", "Docs/Classes/URTSGameInstance/Functions/PlayMusic.html", ["play", "music"], "URTSGameInstance");
addToContainers_function("IsPlayingPlayerSelectionSound", "Returns whether a sound for player selection is playing or not", "Docs/Classes/URTSGameInstance/Functions/IsPlayingPlayerSelectionSound.html", ["is", "playing", "player", "selection", "sound"], "URTSGameInstance");
addToContainers_function("PlayPlayerSelectionSound", "Play a \'player selection\' sound - the sound when player selects a selectable", "Docs/Classes/URTSGameInstance/Functions/PlayPlayerSelectionSound.html", ["play", "player", "selection", "sound"], "URTSGameInstance");
addToContainers_function("IsPlayingPlayerCommandSound", "Returns whether a sound for a player command is playing or not", "Docs/Classes/URTSGameInstance/Functions/IsPlayingPlayerCommandSound.html", ["is", "playing", "player", "command", "sound"], "URTSGameInstance");
addToContainers_function("PlayPlayerCommandSound", "Play a sound for when the player issues a command", "Docs/Classes/URTSGameInstance/Functions/PlayPlayerCommandSound.html", ["play", "player", "command", "sound"], "URTSGameInstance");
addToContainers_function("IsPlayingZeroHealthSound", "", "Docs/Classes/URTSGameInstance/Functions/IsPlayingZeroHealthSound.html", ["is", "playing", "zero", "health", "sound"], "URTSGameInstance");
addToContainers_function("PlayZeroHealthSound", "", "Docs/Classes/URTSGameInstance/Functions/PlayZeroHealthSound.html", ["play", "zero", "health", "sound"], "URTSGameInstance");
addToContainers_function("PlayEffectSound", "Play a 2D sound with EffectsAudioComp", "Docs/Classes/URTSGameInstance/Functions/PlayEffectSound.html", ["play", "effect", "sound"], "URTSGameInstance");
addToContainers_function("GetChatMessageReceivedSound", "Get the sound to play for a certain chat message type, or null if none", "Docs/Classes/URTSGameInstance/Functions/GetChatMessageReceivedSound.html", ["get", "chat", "message", "received", "sound"], "URTSGameInstance");
addToContainers_function("ShowWidget", "Show a widget and optionally change visibility of the current widget. Use Collapsed to hide, Visible to show and make interactive, HitTestInvisible to show but make inactive. Z order for widgets is defined as static_cast<uint8>(WidgetType) and can be reordered by reordering EWidgetType enum. @param WidgetType - type of widget to show @param NewCurrentWidgetsVisibility - visibility to change current widget to, either HistTestInvisible or collapsed", "Docs/Classes/URTSGameInstance/Functions/ShowWidget.html", ["show", "widget"], "URTSGameInstance");
addToContainers_function("ShowPreviousWidget", "Show previous widget and make it interactable again if it is not. Behavior for returning to a previous widget is to play current widgets exit anim and when it finishes to then make all widgets in between the target widget to become hidden and then play target widgets enter anim. Currently widget does not become interactable until anim fully completes (can be overridden by adding it as a keyframe in editor but strongly advise not doing this) @param NumToGoBack - how many widgets to go back. Use 0 to return to the first widget in WidgetHistory. If NumToGoBack is larger then the number of previous widgets shown then an assert will be thrown", "Docs/Classes/URTSGameInstance/Functions/ShowPreviousWidget.html", ["show", "previous", "widget"], "URTSGameInstance");
addToContainers_function("Internal_HideWidget", "Remove a widget from viewport. For internal use only. Possibly not safe to call with NumWidgetsBack = 0 @return - true if a widget was removed, false otherwise", "Docs/Classes/URTSGameInstance/Functions/Internal_HideWidget.html", ["internal_", "hide", "widget"], "URTSGameInstance");
addToContainers_function("HideAllMenuWidgets", "Remove all menu widgets from viewport and delete WidgetHistory", "Docs/Classes/URTSGameInstance/Functions/HideAllMenuWidgets.html", ["hide", "all", "menu", "widgets"], "URTSGameInstance");
addToContainers_function("RemoveFromWidgetHistory", "Remove a widget type from WidgetHistory so it can never be navigated to with ShowPreviousWidget", "Docs/Classes/URTSGameInstance/Functions/RemoveFromWidgetHistory.html", ["remove", "from", "widget", "history"], "URTSGameInstance");
addToContainers_function("DestroyMenuWidgetsBeforeMatch", "When loading a match destroy all the menu widgets since they aren\'t needed except the match loading screen", "Docs/Classes/URTSGameInstance/Functions/DestroyMenuWidgetsBeforeMatch.html", ["destroy", "menu", "widgets", "before", "match"], "URTSGameInstance");
addToContainers_function("OnWidgetExitAnimFinished", "", "Docs/Classes/URTSGameInstance/Functions/OnWidgetExitAnimFinished.html", ["on", "widget", "exit", "anim", "finished"], "URTSGameInstance");
addToContainers_function("OnWidgetEnterAnimFinished", "", "Docs/Classes/URTSGameInstance/Functions/OnWidgetEnterAnimFinished.html", ["on", "widget", "enter", "anim", "finished"], "URTSGameInstance");
addToContainers_function("IsWidgetBlueprintSet", "Returns whether an optional widget has had its blueprint set in editor", "Docs/Classes/URTSGameInstance/Functions/IsWidgetBlueprintSet.html", ["is", "widget", "blueprint", "set"], "URTSGameInstance");
addToContainers_function("GetWidget", "Returns a reference to the widget for the specified type. Will construct a widget if the widget hasn\'t already been created. For this reason should never return null. Should not be called in mutlithreaded situations to avoid possibility of creating two of the same widget type", "Docs/Classes/URTSGameInstance/Functions/GetWidget.html", ["get", "widget"], "URTSGameInstance");
addToContainers_function("GetWidget", "A templated version of GetWidget which I should use in place of the non-templated version.", "Docs/Classes/URTSGameInstance/Functions/GetWidget_1.html", ["get", "widget"], "URTSGameInstance");
addToContainers_function("GetCurrentWidget", "Get the widget most recently added to screen", "Docs/Classes/URTSGameInstance/Functions/GetCurrentWidget.html", ["get", "current", "widget"], "URTSGameInstance");
addToContainers_function("GetZOrder", "Get the ZOrder for a type of widget", "Docs/Classes/URTSGameInstance/Functions/GetZOrder.html", ["get", "z", "order"], "URTSGameInstance");
addToContainers_function("PlayWidgetExitAnim", "Play the exit animation for a widget when it is leaving the screen", "Docs/Classes/URTSGameInstance/Functions/PlayWidgetExitAnim.html", ["play", "widget", "exit", "anim"], "URTSGameInstance");
addToContainers_function("void", "", "Docs/Classes/URTSGameInstance/Functions/void.html", [], "URTSGameInstance");
addToContainers_function("PlayWidgetEnterAnim", "", "Docs/Classes/URTSGameInstance/Functions/PlayWidgetEnterAnim.html", ["play", "widget", "enter", "anim"], "URTSGameInstance");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay before calling function", "Docs/Classes/URTSGameInstance/Functions/Delay).html", [], "URTSGameInstance");
addToContainers_function("ShowPopupWidget", "Show the popup widget. Widget does not go in widget history and will be removed from screen when changing widget @param Message - message to set on popup widget @param Duration - how long to show widget for. @See UPopupWidget::Show for a more thourogh breakdown @param bSpecifyTextColor - if true then 3rd param will be color text will be. If false widget will use the color that was set in editor @param TextColor - color of text", "Docs/Classes/URTSGameInstance/Functions/ShowPopupWidget.html", ["show", "popup", "widget"], "URTSGameInstance");
addToContainers_function("HidePopupWidget", "", "Docs/Classes/URTSGameInstance/Functions/HidePopupWidget.html", ["hide", "popup", "widget"], "URTSGameInstance");
addToContainers_function("OnEnterMainMenuFromStartup", "Called when entering main menu for the very first time from launching game", "Docs/Classes/URTSGameInstance/Functions/OnEnterMainMenuFromStartup.html", ["on", "enter", "main", "menu", "from", "startup"], "URTSGameInstance");
addToContainers_function("OnEnterMainMenu", "", "Docs/Classes/URTSGameInstance/Functions/OnEnterMainMenu.html", ["on", "enter", "main", "menu"], "URTSGameInstance");
addToContainers_function("OnQuitGameInitiated", "Call when user has confirmed they want to exit to OS", "Docs/Classes/URTSGameInstance/Functions/OnQuitGameInitiated.html", ["on", "quit", "game", "initiated"], "URTSGameInstance");
addToContainers_function("QuitGame", "Static version. Exit to OS as fast as possible", "Docs/Classes/URTSGameInstance/Functions/QuitGame.html", ["quit", "game"], "URTSGameInstance");
addToContainers_function("QuitGame", "Exit to OS as fast as possible", "Docs/Classes/URTSGameInstance/Functions/QuitGame_1.html", ["quit", "game"], "URTSGameInstance");
addToContainers_function("CreateSingleplayerLobby", "Travel to lobby map and show lobby widget @param LobbyType - network model of lobby e.g. LAN, online, offline", "Docs/Classes/URTSGameInstance/Functions/CreateSingleplayerLobby.html", ["create", "singleplayer", "lobby"], "URTSGameInstance");
addToContainers_function("LoadLobbyMapForSingleplayer", "Open the blank persistent level and stream in the lobby map", "Docs/Classes/URTSGameInstance/Functions/LoadLobbyMapForSingleplayer.html", ["load", "lobby", "map", "for", "singleplayer"], "URTSGameInstance");
addToContainers_function("SetupLobbyWidget_Singleplayer", "", "Docs/Classes/URTSGameInstance/Functions/SetupLobbyWidget_Singleplayer.html", ["setup", "lobby", "widget_", "singleplayer"], "URTSGameInstance");
addToContainers_function("CreateNetworkedSession", "Try create a networked session @param LobbyName - @param bIsLAN - true if network model is LAN @param Password - password for lobby. Blank implies no password @param NumSlots - @param MapID - map ID of the map to create lobby with. Map can possibly be changed after lobby has already been created @param StartingResources - resources for players to start with when match begins @param DefeatCondition - the defeat condition for match", "Docs/Classes/URTSGameInstance/Functions/CreateNetworkedSession.html", ["create", "networked", "session"], "URTSGameInstance");
addToContainers_function("OnNetworkedSessionCreated", "Called from game session when it tries to create a networked session @param SessionSettings - all the settings for the session such as max players, if LAN etc @param bSuccessful - whether creating the session was successful or not", "Docs/Classes/URTSGameInstance/Functions/OnNetworkedSessionCreated.html", ["on", "networked", "session", "created"], "URTSGameInstance");
addToContainers_function("CreateMultiplayerLobby", "", "Docs/Classes/URTSGameInstance/Functions/CreateMultiplayerLobby.html", ["create", "multiplayer", "lobby"], "URTSGameInstance");
addToContainers_function("LoadLobbyMapForMultiplayer", "", "Docs/Classes/URTSGameInstance/Functions/LoadLobbyMapForMultiplayer.html", ["load", "lobby", "map", "for", "multiplayer"], "URTSGameInstance");
addToContainers_function("SetupLobbyWidget_Multiplayer", "", "Docs/Classes/URTSGameInstance/Functions/SetupLobbyWidget_Multiplayer.html", ["setup", "lobby", "widget_", "multiplayer"], "URTSGameInstance");
addToContainers_function("GetSessionSettings", "", "Docs/Classes/URTSGameInstance/Functions/GetSessionSettings.html", ["get", "session", "settings"], "URTSGameInstance");
addToContainers_function("GetLobbyPassword", "", "Docs/Classes/URTSGameInstance/Functions/GetLobbyPassword.html", ["get", "lobby", "password"], "URTSGameInstance");
addToContainers_function("SetLobbyPassword", "", "Docs/Classes/URTSGameInstance/Functions/SetLobbyPassword.html", ["set", "lobby", "password"], "URTSGameInstance");
addToContainers_function("GetPendingSessionSettings", "", "Docs/Classes/URTSGameInstance/Functions/GetPendingSessionSettings.html", ["get", "pending", "session", "settings"], "URTSGameInstance");
addToContainers_function("SetPendingSessionSettings", "Maybe param needs to be a ref I don\'t know", "Docs/Classes/URTSGameInstance/Functions/SetPendingSessionSettings.html", ["set", "pending", "session", "settings"], "URTSGameInstance");
addToContainers_function("GoFromLobbyToMainMenu", "==========================================================================================", "Docs/Classes/URTSGameInstance/Functions/GoFromLobbyToMainMenu.html", ["go", "from", "lobby", "to", "main", "menu"], "URTSGameInstance");
addToContainers_function("GoFromMatchToMainMenu", "", "Docs/Classes/URTSGameInstance/Functions/GoFromMatchToMainMenu.html", ["go", "from", "match", "to", "main", "menu"], "URTSGameInstance");
addToContainers_function("ReturnToMainMenu", "This is called by GM::ReturnToMainMenuHost, which bubbles to game session then to PC impl then this. This will be called by both host and client when the host leaves the lobby", "Docs/Classes/URTSGameInstance/Functions/ReturnToMainMenu.html", ["return", "to", "main", "menu"], "URTSGameInstance");
addToContainers_function("SearchForNetworkedLobbies", "==========================================================================================", "Docs/Classes/URTSGameInstance/Functions/SearchForNetworkedLobbies.html", ["search", "for", "networked", "lobbies"], "URTSGameInstance");
addToContainers_function("TryJoinNetworkedSession", "URTSLocalPlayer::GetGameLoginOptions() passes in password info amoung other things", "Docs/Classes/URTSGameInstance/Functions/TryJoinNetworkedSession.html", ["try", "join", "networked", "session"], "URTSGameInstance");
addToContainers_function("TryCreateMatch", "The first function called when lobby is requesting a match to be created", "Docs/Classes/URTSGameInstance/Functions/TryCreateMatch.html", ["try", "create", "match"], "URTSGameInstance");
addToContainers_function("OnStartSessionComplete", "Called by game session when delegate fires", "Docs/Classes/URTSGameInstance/Functions/OnStartSessionComplete.html", ["on", "start", "session", "complete"], "URTSGameInstance");
addToContainers_function("AssignOptimalStartingSpots", "Assign a starting spot to players that do not have one. -1 means they were not assigned a spot. By the end of func every entry should be either >= 0 or -2. -2 means could not find spot for player @param PlayerInfo - info about all the players in the match. Important to only change their starting spots and nothing else", "Docs/Classes/URTSGameInstance/Functions/AssignOptimalStartingSpots.html", ["assign", "optimal", "starting", "spots"], "URTSGameInstance");
addToContainers_function("LoadMatch", "The function called from lobby when a match is going to happen", "Docs/Classes/URTSGameInstance/Functions/LoadMatch.html", ["load", "match"], "URTSGameInstance");
addToContainers_function("OnMatchLevelLoaded", "Called my GS when level has loaded", "Docs/Classes/URTSGameInstance/Functions/OnMatchLevelLoaded.html", ["on", "match", "level", "loaded"], "URTSGameInstance");
addToContainers_function("OnLevelLoadedAndPCSetupsDone", "Call when all players have connected, have acknowledged they have completed their client post login and have streamed in the level", "Docs/Classes/URTSGameInstance/Functions/OnLevelLoadedAndPCSetupsDone.html", ["on", "level", "loaded", "and", "p", "c", "setups", "done"], "URTSGameInstance");
addToContainers_function("OnInitialValuesAcked", "Call when all human players have acknowledged they have received the initial values for each player state (including CPU players player states)", "Docs/Classes/URTSGameInstance/Functions/OnInitialValuesAcked.html", ["on", "initial", "values", "acked"], "URTSGameInstance");
addToContainers_function("OnMatchFinalSetupComplete", "Called when all player states have completed AMyPlayerState::Client_FinalSetup", "Docs/Classes/URTSGameInstance/Functions/OnMatchFinalSetupComplete.html", ["on", "match", "final", "setup", "complete"], "URTSGameInstance");
addToContainers_function("GetMatchInfo", "", "Docs/Classes/URTSGameInstance/Functions/GetMatchInfo.html", ["get", "match", "info"], "URTSGameInstance");
addToContainers_function("GetMatchInfoModifiable", "", "Docs/Classes/URTSGameInstance/Functions/GetMatchInfoModifiable.html", ["get", "match", "info", "modifiable"], "URTSGameInstance");
addToContainers_function("GetMatchLoadingStatusText", "", "Docs/Classes/URTSGameInstance/Functions/GetMatchLoadingStatusText.html", ["get", "match", "loading", "status", "text"], "URTSGameInstance");
addToContainers_function("IsColdBooting", "", "Docs/Classes/URTSGameInstance/Functions/IsColdBooting.html", ["is", "cold", "booting"], "URTSGameInstance");
addToContainers_function("SetIsColdBooting", "", "Docs/Classes/URTSGameInstance/Functions/SetIsColdBooting.html", ["set", "is", "cold", "booting"], "URTSGameInstance");
addToContainers_function("IsInMainMenuMap", "Whether we are in the main menu map or not", "Docs/Classes/URTSGameInstance/Functions/IsInMainMenuMap.html", ["is", "in", "main", "menu", "map"], "URTSGameInstance");
addToContainers_function("SpawnCPUPlayer", "Setup CPU player @param bSetup - whether to call Setup on the AI controller", "Docs/Classes/URTSGameInstance/Functions/SpawnCPUPlayer.html", ["spawn", "c", "p", "u", "player"], "URTSGameInstance");
addToContainers_function("SpawnStartingSelectables", "Spawn the buildings/units that each player starts with. @return - a TMap that maps player state to the types of selectables they started match with. This is here for CPU player AI controllers", "Docs/Classes/URTSGameInstance/Functions/SpawnStartingSelectables.html", ["spawn", "starting", "selectables"], "URTSGameInstance");
addToContainers_function("OnInitiateSkipMainMenu", "==========================================================================================", "Docs/Classes/URTSGameInstance/Functions/OnInitiateSkipMainMenu.html", ["on", "initiate", "skip", "main", "menu"], "URTSGameInstance");
addToContainers_function("SetupMatchInfoForPIE", "Partially setup MatchInfo for when playing in PIE. Assumption about the param array is that host is at index 0, client 1 at index 1, etc. Some info is not added such as match map or starting resources @param NewTeams - maps old team to new team, where new team is the lowest enum value possible", "Docs/Classes/URTSGameInstance/Functions/SetupMatchInfoForPIE.html", ["setup", "match", "info", "for", "p", "i", "e"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_ShouldSkipOpeningCutscene", "Functions to get the setting to use for a PIE/standalone session. They will likely either query the ADevelopmentSettings actor or the editor play settings editor utility widget", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_ShouldSkipOpeni.html", ["editor", "play", "session_", "should", "skip", "opening", "cutscene"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_ShouldSkipMainMenu", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_ShouldSkipMainM.html", ["editor", "play", "session_", "should", "skip", "main", "menu"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetDefeatCondition", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetDefeatCondit.html", ["editor", "play", "session_", "get", "defeat", "condition"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetHumanPlayerInfo", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetHumanPlayerI.html", ["editor", "play", "session_", "get", "human", "player", "info"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetNumCPUPlayers", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetNumCPUPlayer.html", ["editor", "play", "session_", "get", "num", "c", "p", "u", "players"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetCPUPlayerInfo", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetCPUPlayerInf.html", ["editor", "play", "session_", "get", "c", "p", "u", "player", "info"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetInvalidHumanOwnerRule", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetInvalidHuman.html", ["editor", "play", "session_", "get", "invalid", "human", "owner", "rule"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetInvalidCPUOwnerRule", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetInvalidCPUOw.html", ["editor", "play", "session_", "get", "invalid", "c", "p", "u", "owner", "rule"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_IsCheatWidgetBPSet", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_IsCheatWidgetBP.html", ["editor", "play", "session_", "is", "cheat", "widget", "b", "p", "set"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_ShouldInitiallyShowCheatWidget", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_ShouldInitially.html", ["editor", "play", "session_", "should", "initially", "show", "cheat", "widget"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetCheatWidgetBP", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetCheatWidgetB.html", ["editor", "play", "session_", "get", "cheat", "widget", "b", "p"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_ShowInfantryControllerDebugWidgets", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_ShowInfantryCon.html", ["editor", "play", "session_", "show", "infantry", "controller", "debug", "widgets"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetInfantryControllerDebugWidgetBP", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetInfantryCont.html", ["editor", "play", "session_", "get", "infantry", "controller", "debug", "widget", "b", "p"], "URTSGameInstance");
addToContainers_function("EditorPlaySession_GetStartingResourceConfig", "", "Docs/Classes/URTSGameInstance/Functions/EditorPlaySession_GetStartingReso.html", ["editor", "play", "session_", "get", "starting", "resource", "config"], "URTSGameInstance");
addToContainers_variable("", "Holds FactionInfo blueprints for the different factions. Needs one entry for every type of faction", "Docs/Classes/URTSGameInstance/Variables/.html", [], "URTSGameInstance");
addToContainers_variable("", "Map that stores information about context button types.", "Docs/Classes/URTSGameInstance/Variables/_1.html", [], "URTSGameInstance");
addToContainers_variable("", "Essentially the contexts of ContextActionsMap but sorted. Using this because it\'s faster to lookup in array than hashmap given array index is known", "Docs/Classes/URTSGameInstance/Variables/_2.html", [], "URTSGameInstance");
addToContainers_variable("", "Different abilities the commander can use", "Docs/Classes/URTSGameInstance/Variables/_3.html", [], "URTSGameInstance");
addToContainers_variable("", "Contents of CommanderAbilitiesTMap but in an array because it\'s faster to access an array instead of a hashmap if the index is known", "Docs/Classes/URTSGameInstance/Variables/_4.html", [], "URTSGameInstance");
addToContainers_variable("", "Different types of nodes that can appear on a commander\'s skill tree", "Docs/Classes/URTSGameInstance/Variables/_5.html", [], "URTSGameInstance");
addToContainers_variable("", "Contents of the TMap transfered to an array because array lookup is faster than hashmap when the index is known", "Docs/Classes/URTSGameInstance/Variables/_6.html", [], "URTSGameInstance");
addToContainers_variable("", "----------------------------------------------------------------------", "Docs/Classes/URTSGameInstance/Variables/_7.html", [], "URTSGameInstance");
addToContainers_variable("", "Object pooling manager", "Docs/Classes/URTSGameInstance/Variables/_8.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_9.html", [], "URTSGameInstance");
addToContainers_variable("", "Gets filled with information about each faction", "Docs/Classes/URTSGameInstance/Variables/_10.html", [], "URTSGameInstance");
addToContainers_variable("", "Holds damage multipliers for each attack type towards each armour type. To add new damage types see DamageTypes.h. 0 and negative values can be used to create damage types that do nothing/heal. That way you never need to pass a negative value into TakeDamage - just pass the amount and let the multiplier decide whether it should heal or not", "Docs/Classes/URTSGameInstance/Variables/_11.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about building garrison networks", "Docs/Classes/URTSGameInstance/Variables/_12.html", [], "URTSGameInstance");
addToContainers_variable("", "Static buffs and debuffs for your project. Only some of their info can be filled in here - the rest of their behavior will need to be implemented in C++. See BuffAndDebuffManager.h", "Docs/Classes/URTSGameInstance/Variables/_13.html", [], "URTSGameInstance");
addToContainers_variable("", "Tickable buffs and debuffs for your project. Only some of their info can be filled in here - the rest of their behavior will need to be implemented in C++. See BuffAndDebuffManager.h", "Docs/Classes/URTSGameInstance/Variables/_14.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about subtypes of buffs/debuffs", "Docs/Classes/URTSGameInstance/Variables/_15.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about different selectable resources. Selectable resources are things like mana or energy", "Docs/Classes/URTSGameInstance/Variables/_16.html", [], "URTSGameInstance");
addToContainers_variable("", "Info about each inventory item", "Docs/Classes/URTSGameInstance/Variables/_17.html", [], "URTSGameInstance");
addToContainers_variable("", "The image to display for an inventory slot that does not have any item in it", "Docs/Classes/URTSGameInstance/Variables/_18.html", [], "URTSGameInstance");
addToContainers_variable("", "The image to display for an inventory slot that does not have any item in it and the mouse is hovered over it. This will be ignored if you use a unified hover image. @See UnifiedMouseHoverImage_InventoryItems", "Docs/Classes/URTSGameInstance/Variables/_19.html", [], "URTSGameInstance");
addToContainers_variable("", "The image to display for an inventory slot that does not have any item in it and the mouse is pressed on it. This will be ignored if you use a unified pressed image", "Docs/Classes/URTSGameInstance/Variables/_20.html", [], "URTSGameInstance");
addToContainers_variable("", "The sound to play when hovering over an emtpy inventory slot", "Docs/Classes/URTSGameInstance/Variables/_21.html", [], "URTSGameInstance");
addToContainers_variable("", "The sound to play when pressing an empty inventpry slot with LMB", "Docs/Classes/URTSGameInstance/Variables/_22.html", [], "URTSGameInstance");
addToContainers_variable("", "The sound to play when pressing an empty inventory slot with RMB", "Docs/Classes/URTSGameInstance/Variables/_23.html", [], "URTSGameInstance");
addToContainers_variable("", "How much experience bounty is multiplied by when a unit levels up. e.g. if this = 1.2 then a level 1 unit when destroyed will award 20% more experience to the unit that destroyed them", "Docs/Classes/URTSGameInstance/Variables/_24.html", [], "URTSGameInstance");
addToContainers_variable("bIsInitializingFactionInfo", "True if initializing faction info. Prevents spawned actors from running their BeginPlay which could rely on things that have not been set up yet.", "Docs/Classes/URTSGameInstance/Variables/bIsInitializingFactionInfo.html", ["is", "initializing", "faction", "info"], "URTSGameInstance");
addToContainers_variable("bHasInitialized", "True if Initialize has been called", "Docs/Classes/URTSGameInstance/Variables/bHasInitialized.html", ["has", "initialized"], "URTSGameInstance");
addToContainers_variable("bHasSpawnedInfoActors", "True if info actors have been spawned. Reset on every map change", "Docs/Classes/URTSGameInstance/Variables/bHasSpawnedInfoActors.html", ["has", "spawned", "info", "actors"], "URTSGameInstance");
addToContainers_variable("", "If you choose to use a cursor here then it will override anything you have set in project settings under hardware cursors. This cursor will show up when using the main menu. If tesing in PIE and using bSkipMainMenu this still needs to be set. Make it the same as your match cursor", "Docs/Classes/URTSGameInstance/Variables/_25.html", [], "URTSGameInstance");
addToContainers_variable("", "Mouse cursor to use during matches. This can be overriddem on a per-faction basis. If choosing to use custom mouse cursors for abilities then this or faction infos will need to set a cursor here for the game to roll back to it - I know no way of setting the hardware cursor back to the default white arrow cursor.", "Docs/Classes/URTSGameInstance/Variables/_26.html", [], "URTSGameInstance");
addToContainers_variable("", "8 edge scrolling cursors. The cursors that appear when the mouse is close enough to the edge of the screen that the camera moves", "Docs/Classes/URTSGameInstance/Variables/_27.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_28.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_29.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_30.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_31.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_32.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_33.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_34.html", [], "URTSGameInstance");
addToContainers_variable("", "Default mouse cursor to use if ability does not have one set", "Docs/Classes/URTSGameInstance/Variables/_35.html", [], "URTSGameInstance");
addToContainers_variable("", "Default mouse cursor to use if ability does not have one set", "Docs/Classes/URTSGameInstance/Variables/_36.html", [], "URTSGameInstance");
addToContainers_variable("", "Default mouse cursor to use if ability does not have one set", "Docs/Classes/URTSGameInstance/Variables/_37.html", [], "URTSGameInstance");
addToContainers_variable("MenuMouseCursor_Info", "", "Docs/Classes/URTSGameInstance/Variables/MenuMouseCursor_Info.html", ["menu", "mouse", "cursor_", "info"], "URTSGameInstance");
addToContainers_variable("DefaultAbilityCursor_Default_Info", "", "Docs/Classes/URTSGameInstance/Variables/DefaultAbilityCursor_Default_Info.html", ["default", "ability", "cursor_", "default_", "info"], "URTSGameInstance");
addToContainers_variable("DefaultAbilityCursor_AcceptableTarget_Info", "", "Docs/Classes/URTSGameInstance/Variables/DefaultAbilityCursor_AcceptableTa.html", ["default", "ability", "cursor_", "acceptable", "target_", "info"], "URTSGameInstance");
addToContainers_variable("DefaultAbilityCursor_UnacceptableTarget_Info", "", "Docs/Classes/URTSGameInstance/Variables/DefaultAbilityCursor_Unacceptable.html", ["default", "ability", "cursor_", "unacceptable", "target_", "info"], "URTSGameInstance");
addToContainers_variable("", "Selection decal to appear under a selectable when a match observer selects something", "Docs/Classes/URTSGameInstance/Variables/_38.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to appear on a selectable when it is selected and the player is a match observer. Not used for resource spots", "Docs/Classes/URTSGameInstance/Variables/_39.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to always appear on selectables when the player is a match observer. Widget can show things like health, construction status etc. Not used for resource spots", "Docs/Classes/URTSGameInstance/Variables/_40.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to appear on a resource spot when it is selected and the player is a match observer Made these seperate because the ObserverSelectableSelectionWorldWidget will likely have a health bar and resource spots won\'t need that", "Docs/Classes/URTSGameInstance/Variables/_41.html", [], "URTSGameInstance");
addToContainers_variable("", "Widget to always appear on a resource spot and the player is a match observer", "Docs/Classes/URTSGameInstance/Variables/_42.html", [], "URTSGameInstance");
addToContainers_variable("", "How world widget (like health bars) are positioned whenever the player\'s camera moves, rotates or zooms", "Docs/Classes/URTSGameInstance/Variables/_43.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps each defeat condition to info about it. To actually change what function is called to check if condition is met will require adding code to game mode", "Docs/Classes/URTSGameInstance/Variables/_44.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps integer to FName for less bandwidth across wire when changing map", "Docs/Classes/URTSGameInstance/Variables/_45.html", [], "URTSGameInstance");
addToContainers_variable("", "List of maps that matches can be played on. Maps map name (the name it was given in editor minus any extensions e.g. Minimal_Default, Entry, etc) to info about it Limit 256 maps If changing the name of this variable then update ALevelVolume::StoreMapInfo", "Docs/Classes/URTSGameInstance/Variables/_46.html", [], "URTSGameInstance");
addToContainers_variable("", "Mouse cursors. Map enum type to the path/hotspot info. Note: if your mouse cursor appears to be off of its location make sure to adjust the host spot", "Docs/Classes/URTSGameInstance/Variables/_47.html", [], "URTSGameInstance");
addToContainers_variable("", "The rule for choosing player starts for players that weren\'t assigned one before match started", "Docs/Classes/URTSGameInstance/Variables/_48.html", [], "URTSGameInstance");
addToContainers_variable("", "A sound mix which will modify the volume of all sounds", "Docs/Classes/URTSGameInstance/Variables/_49.html", [], "URTSGameInstance");
addToContainers_variable("", "Map of all sound classes. Maps their GetName() to the UObject. The TMap is so a user can enter the type of sound class they want a audio settings widget to modify", "Docs/Classes/URTSGameInstance/Variables/_50.html", [], "URTSGameInstance");
addToContainers_variable("", "Match loading screen messages", "Docs/Classes/URTSGameInstance/Variables/_51.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps CPU player difficulty info about them", "Docs/Classes/URTSGameInstance/Variables/_52.html", [], "URTSGameInstance");
addToContainers_variable("", "Widgets to use during a match. Faction info that has not specified a specific widget will default to using the one from here", "Docs/Classes/URTSGameInstance/Variables/_53.html", [], "URTSGameInstance");
addToContainers_variable("", "Information about resources", "Docs/Classes/URTSGameInstance/Variables/_54.html", [], "URTSGameInstance");
addToContainers_variable("", "Defines how much resources players start with at start of match", "Docs/Classes/URTSGameInstance/Variables/_55.html", [], "URTSGameInstance");
addToContainers_variable("", "Game notification messages to appear in HUD + sound to play", "Docs/Classes/URTSGameInstance/Variables/_56.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages to appear when things happen in game. Can be overridden on a per-faction basis", "Docs/Classes/URTSGameInstance/Variables/_57.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages for custom reasons abilities can fail", "Docs/Classes/URTSGameInstance/Variables/_58.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages to display when you try to spend more of a resource than you have", "Docs/Classes/URTSGameInstance/Variables/_59.html", [], "URTSGameInstance");
addToContainers_variable("", "Warning messages to display when you try to spend more of a resource than you have", "Docs/Classes/URTSGameInstance/Variables/_60.html", [], "URTSGameInstance");
addToContainers_variable("", "Minimum time between game warning messages being allowed to show on HUD. If player say spams a build button without the prereqs met then messages will appear on HUD only if this amount of time has passed", "Docs/Classes/URTSGameInstance/Variables/_61.html", [], "URTSGameInstance");
addToContainers_variable("", "How to draw the marquee selection box", "Docs/Classes/URTSGameInstance/Variables/_62.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_63.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_64.html", [], "URTSGameInstance");
addToContainers_variable("", "Color of the marquee box filled rectangle if using it", "Docs/Classes/URTSGameInstance/Variables/_65.html", [], "URTSGameInstance");
addToContainers_variable("", "Color of the marquee box border. Always drawn opaque - alpha value will be ignored", "Docs/Classes/URTSGameInstance/Variables/_66.html", [], "URTSGameInstance");
addToContainers_variable("", "How thick to draw the line for the marquee box border", "Docs/Classes/URTSGameInstance/Variables/_67.html", [], "URTSGameInstance");
addToContainers_variable("", "The percentage of max health building starts with at the start of its construction (in the range 0 to 1). Clamped to 0.01 (1%) because possible replicated float compresssion may cause it to be rounded to 0 (if that is even a thing)", "Docs/Classes/URTSGameInstance/Variables/_68.html", [], "URTSGameInstance");
addToContainers_variable("", "Rule for being able to see and change unit rally point for a unit-producing building. The rule refers to the state of the building", "Docs/Classes/URTSGameInstance/Variables/_69.html", [], "URTSGameInstance");
addToContainers_variable("", "The name of the vector param on each of the ghost building mesh\'s materials to modify when the ghost is in a suitable/non-suitable build location e.g. in most RTSes the building will change to a red color when not in a suitable build location", "Docs/Classes/URTSGameInstance/Variables/_70.html", [], "URTSGameInstance");
addToContainers_variable("", "The value to change GhostBadLocationParam to when not in a suitable build location", "Docs/Classes/URTSGameInstance/Variables/_71.html", [], "URTSGameInstance");
addToContainers_variable("", "Fog of war material", "Docs/Classes/URTSGameInstance/Variables/_72.html", [], "URTSGameInstance");
addToContainers_variable("", "Selectable\'s action bar / Persistent HUD panel / Production queue", "Docs/Classes/URTSGameInstance/Variables/_73.html", [], "URTSGameInstance");
addToContainers_variable("", "Selectable\'s inventory / Item shop", "Docs/Classes/URTSGameInstance/Variables/_74.html", [], "URTSGameInstance");
addToContainers_variable("", "Menus. I have only used these for the pause menu but may want to use them for main menu, lobby, etc", "Docs/Classes/URTSGameInstance/Variables/_75.html", [], "URTSGameInstance");
addToContainers_variable("", "These hold data already contained in the structs above. It is here for performance", "Docs/Classes/URTSGameInstance/Variables/_76.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_77.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_78.html", [], "URTSGameInstance");
addToContainers_variable("", "", "Docs/Classes/URTSGameInstance/Variables/_79.html", [], "URTSGameInstance");
addToContainers_variable("", "A curve that says how fast the camera moves at different zoom levels X axis = Zoom amount e.g. if your range of zoom amounts is 500 to 5000 then that is what should be along this axis Y axis = speed multiplier", "Docs/Classes/URTSGameInstance/Variables/_80.html", [], "URTSGameInstance");
addToContainers_variable("", "SHOULD BE LINEAR, NOT CURVED. Actually zooming doesn\'t really work very well anyway so doesn\'t matter. Curve used for gradual zoom in/out when scrolling mouse wheel. Can be left null and zoom amount will be changed instantly. X axis = base time to reset camera. Will be multiplied by CameraZoomSpeed Y axis = Lerp amount, range should be from 0 to 1 At some point a pointer on the PC is set to this. But are there performance gains from having it as a EditDefaultsOnly variable on the PC to begin with? Unless there is some serious black magic with UE4 then I would think not. If there is though could just remove that variable on PC and go GI->GetCameraMouseWheelZoomCurve() whenever we need it.", "Docs/Classes/URTSGameInstance/Variables/_81.html", [], "URTSGameInstance");
addToContainers_variable("", "Curve to use to transition from current camera rotation/zoom to defaults. Can be left null and transition will happen instantly. X axis = base time to complete zoom. Will be multiplied by ResetCameraToDefaultRate. Good to make it at least from 0 to 1 and adjust ResetCameraToDefaultRate to get desired time taken Y axis = Lerp amount, range should be from 0 to 1", "Docs/Classes/URTSGameInstance/Variables/_82.html", [], "URTSGameInstance");
addToContainers_variable("", "Maps a key on the keyboard/mouse to information about it", "Docs/Classes/URTSGameInstance/Variables/_83.html", [], "URTSGameInstance");
addToContainers_variable("", "The \"plus: symbol to put in between modifier keys e.g. CTRL + ALT + P", "Docs/Classes/URTSGameInstance/Variables/_84.html", [], "URTSGameInstance");
addToContainers_variable("", "The symbol for the CTRL key when it is being used as a modifier", "Docs/Classes/URTSGameInstance/Variables/_85.html", [], "URTSGameInstance");
addToContainers_variable("", "The symbol for the ALT key when it is being used as a modifier", "Docs/Classes/URTSGameInstance/Variables/_86.html", [], "URTSGameInstance");
addToContainers_variable("", "The symbol for the SHIFT key when it is being used as a modifier", "Docs/Classes/URTSGameInstance/Variables/_87.html", [], "URTSGameInstance");
addToContainers_variable("", "If true then you want the image representation of a keyboard/mouse key to have some text drawn overtop of some image and you want this to happen for every key. My notes: could perhaps allow certain FKeyInfo to opt out of having this applied to them", "Docs/Classes/URTSGameInstance/Variables/_88.html", [], "URTSGameInstance");
addToContainers_variable("", "How to use the image override", "Docs/Classes/URTSGameInstance/Variables/_89.html", [], "URTSGameInstance");
addToContainers_variable("", "How to use the font override", "Docs/Classes/URTSGameInstance/Variables/_90.html", [], "URTSGameInstance");
addToContainers_variable("", "Partial brush override", "Docs/Classes/URTSGameInstance/Variables/_91.html", [], "URTSGameInstance");
addToContainers_variable("", "Partial font override", "Docs/Classes/URTSGameInstance/Variables/_92.html", [], "URTSGameInstance");
addToContainers_variable("LeaveOnMapList", "UPROPERTY() // Can maybe get away without this", "Docs/Classes/URTSGameInstance/Variables/LeaveOnMapList.html", ["leave", "on", "map", "list"], "URTSGameInstance");
addToContainers_variable("LargestShopCatalogueSize", "Most amount of items a shop has on display and/or sells", "Docs/Classes/URTSGameInstance/Variables/LargestShopCatalogueSize.html", ["largest", "shop", "catalogue", "size"], "URTSGameInstance");
addToContainers_variable("LargestInventoryCapacity", "The largest inventory a selectable has", "Docs/Classes/URTSGameInstance/Variables/LargestInventoryCapacity.html", ["largest", "inventory", "capacity"], "URTSGameInstance");
addToContainers_variable("", "The audio component in charge of playing music, both in the main menu and in match", "Docs/Classes/URTSGameInstance/Variables/_93.html", [], "URTSGameInstance");
addToContainers_variable("", "The audio component in charge of playing the sound when player selects a selectable e.g. \"Ready to roll out!\"", "Docs/Classes/URTSGameInstance/Variables/_94.html", [], "URTSGameInstance");
addToContainers_variable("", "Audio component in charge of playing sounds when the player issues a command", "Docs/Classes/URTSGameInstance/Variables/_95.html", [], "URTSGameInstance");
addToContainers_variable("", "Audio component to play zero health sounds", "Docs/Classes/URTSGameInstance/Variables/_96.html", [], "URTSGameInstance");
addToContainers_variable("", "Audio component to play various effects that don\'t fall into a category above for example: the sound when player sets a buildings rally point", "Docs/Classes/URTSGameInstance/Variables/_97.html", [], "URTSGameInstance");
addToContainers_variable("", "The music to play while in main menu/lobby", "Docs/Classes/URTSGameInstance/Variables/_98.html", [], "URTSGameInstance");
addToContainers_variable("", "The sounds to play when a chat message is received", "Docs/Classes/URTSGameInstance/Variables/_99.html", [], "URTSGameInstance");
addToContainers_variable("", "Main menu widgets blueprints", "Docs/Classes/URTSGameInstance/Variables/_100.html", [], "URTSGameInstance");
addToContainers_variable("", "Main menu widgets that have already been created", "Docs/Classes/URTSGameInstance/Variables/_101.html", [], "URTSGameInstance");
addToContainers_variable("", "Array to keep track of previous menus visited to implement back behaviour. Index 0 holds the first widget viewed, index 1 the next etc. If returning to a previous menu then show widget at WidgetHistory.Num() - 2 provided it\'s a valid index. ShowWidget() and ShowPreviousWidget() are the only two functions that change this array", "Docs/Classes/URTSGameInstance/Variables/_102.html", [], "URTSGameInstance");
addToContainers_variable("WidgetTransitionFunction", "Optional function to call after widget exit anim finishes. Mainly here to aid in playing widget animations and changing maps", "Docs/Classes/URTSGameInstance/Variables/WidgetTransitionFunction.html", ["widget", "transition", "function"], "URTSGameInstance");
addToContainers_variable("WidgetToShow", "Widget to show after camera fade", "Docs/Classes/URTSGameInstance/Variables/WidgetToShow.html", ["widget", "to", "show"], "URTSGameInstance");
addToContainers_variable("NumWidgetsBack", "When calling ShowPreviousWidget how many widgets back to go. Also used as a signal to know whether we are showing a new widget or returning to a previous one. 0 means showing new widget. > 0 means returning to a previous one", "Docs/Classes/URTSGameInstance/Variables/NumWidgetsBack.html", ["num", "widgets", "back"], "URTSGameInstance");
addToContainers_variable("", "Widget to show up when a warning or something wants to be shown to player while in menus", "Docs/Classes/URTSGameInstance/Variables/_103.html", [], "URTSGameInstance");
addToContainers_variable("", "Popup widget once it has been created", "Docs/Classes/URTSGameInstance/Variables/_104.html", [], "URTSGameInstance");
addToContainers_variable("SessionSettings", "Session settings here so they persist across map changes", "Docs/Classes/URTSGameInstance/Variables/SessionSettings.html", ["session", "settings"], "URTSGameInstance");
addToContainers_variable("LobbyPassword", "Only known on host", "Docs/Classes/URTSGameInstance/Variables/LobbyPassword.html", ["lobby", "password"], "URTSGameInstance");
addToContainers_variable("PendingSessionSettings", "Session settings for session we are trying to create. Cached here so delegates can reference it when trying to recreate session", "Docs/Classes/URTSGameInstance/Variables/PendingSessionSettings.html", ["pending", "session", "settings"], "URTSGameInstance");
addToContainers_variable("bIsColdBooting", "Because same game mode used for all maps. Helps GM know to show intro or not. True while main menu has never been seen", "Docs/Classes/URTSGameInstance/Variables/bIsColdBooting.html", ["is", "cold", "booting"], "URTSGameInstance");
addToContainers_variable("bIsInMainMenuMap", "Because same game mode if used for main menu, lobby and matches this helps game mode decide what to do each time it initializes and call BeginPlay etc", "Docs/Classes/URTSGameInstance/Variables/bIsInMainMenuMap.html", ["is", "in", "main", "menu", "map"], "URTSGameInstance");
addToContainers_variable("MatchInfo", "Info about match for when level has loaded. Saving as a reference/pointer will not work after OpenLevel because widgets must get destroyed after map change", "Docs/Classes/URTSGameInstance/Variables/MatchInfo.html", ["match", "info"], "URTSGameInstance");
addToContainers_variable("", "Class that holds settings that can be changed while not in shipping build to speed up development", "Docs/Classes/URTSGameInstance/Variables/_105.html", [], "URTSGameInstance");
addToContainers_variable("", "Development settings actor once spawned", "Docs/Classes/URTSGameInstance/Variables/_106.html", [], "URTSGameInstance");
addToContainers_variable("EditorPlaySettingsWidget", "Alternative to DevelopmentSettings", "Docs/Classes/URTSGameInstance/Variables/EditorPlaySettingsWidget.html", ["editor", "play", "settings", "widget"], "URTSGameInstance");
addToContainers_struct("FMinimalPlayerInfo", "==============================================================================================", "Docs/Structs/FMinimalPlayerInfo/FMinimalPlayerInfo.html", ["minimal", "player", "info"], "");
addToContainers_function("FMinimalPlayerInfo", "", "Docs/Structs/FMinimalPlayerInfo/Functions/FMinimalPlayerInfo.html", ["minimal", "player", "info"], "FMinimalPlayerInfo");
addToContainers_function("FMinimalPlayerInfo", "", "Docs/Structs/FMinimalPlayerInfo/Functions/FMinimalPlayerInfo_1.html", ["minimal", "player", "info"], "FMinimalPlayerInfo");
addToContainers_function("IsHumanPlayer", "", "Docs/Structs/FMinimalPlayerInfo/Functions/IsHumanPlayer.html", ["is", "human", "player"], "FMinimalPlayerInfo");
addToContainers_function("GetTeam", "", "Docs/Structs/FMinimalPlayerInfo/Functions/GetTeam.html", ["get", "team"], "FMinimalPlayerInfo");
addToContainers_function("GetFaction", "", "Docs/Structs/FMinimalPlayerInfo/Functions/GetFaction.html", ["get", "faction"], "FMinimalPlayerInfo");
addToContainers_function("GetStartingSpot", "", "Docs/Structs/FMinimalPlayerInfo/Functions/GetStartingSpot.html", ["get", "starting", "spot"], "FMinimalPlayerInfo");
addToContainers_function("SetStartingSpot", "", "Docs/Structs/FMinimalPlayerInfo/Functions/SetStartingSpot.html", ["set", "starting", "spot"], "FMinimalPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FMinimalPlayerInfo/Variables/.html", [], "FMinimalPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FMinimalPlayerInfo/Variables/_1.html", [], "FMinimalPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FMinimalPlayerInfo/Variables/_2.html", [], "FMinimalPlayerInfo");
addToContainers_variable("", "This can change during GI::AssignOptimalStartingSpots", "Docs/Structs/FMinimalPlayerInfo/Variables/_3.html", [], "FMinimalPlayerInfo");
addToContainers_struct("FPIESelectableLoggingInfo", "Info for logging about selectables already in map on PIE", "Docs/Structs/FPIESelectableLoggingInfo/FPIESelectableLoggingInfo.html", ["p", "i", "e", "selectable", "logging", "info"], "");
addToContainers_function("FPIESelectableLoggingInfo", "", "Docs/Structs/FPIESelectableLoggingInfo/Functions/FPIESelectableLoggingInfo.html", ["p", "i", "e", "selectable", "logging", "info"], "FPIESelectableLoggingInfo");
addToContainers_function("FPIESelectableLoggingInfo", "", "Docs/Structs/FPIESelectableLoggingInfo/Functions/FPIESelectableLoggingInfo_1.html", ["p", "i", "e", "selectable", "logging", "info"], "FPIESelectableLoggingInfo");
addToContainers_variable("", "Actor name", "Docs/Structs/FPIESelectableLoggingInfo/Variables/.html", [], "FPIESelectableLoggingInfo");
addToContainers_variable("", "Owner index", "Docs/Structs/FPIESelectableLoggingInfo/Variables/_1.html", [], "FPIESelectableLoggingInfo");
addToContainers_struct("FPIEStartingSelectableInfo", "For PIE testing only. Info needed to respawn a selectable already placed in map", "Docs/Structs/FPIEStartingSelectableInfo/FPIEStartingSelectableInfo.html", ["p", "i", "e", "starting", "selectable", "info"], "");
addToContainers_function("FPIEStartingSelectableInfo", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/FPIEStartingSelectableInfo.html", ["p", "i", "e", "starting", "selectable", "info"], "FPIEStartingSelectableInfo");
addToContainers_function("FPIEStartingSelectableInfo", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/FPIEStartingSelectableInfo_1.html", ["p", "i", "e", "starting", "selectable", "info"], "FPIEStartingSelectableInfo");
addToContainers_function("GetActorBP", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/GetActorBP.html", ["get", "actor", "b", "p"], "FPIEStartingSelectableInfo");
addToContainers_function("GetSpawnTransform", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/GetSpawnTransform.html", ["get", "spawn", "transform"], "FPIEStartingSelectableInfo");
addToContainers_function("GetOwnerIndex", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/GetOwnerIndex.html", ["get", "owner", "index"], "FPIEStartingSelectableInfo");
addToContainers_function("IsForCPUPlayer", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/IsForCPUPlayer.html", ["is", "for", "c", "p", "u", "player"], "FPIEStartingSelectableInfo");
addToContainers_function("GetBuildingType", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/GetBuildingType.html", ["get", "building", "type"], "FPIEStartingSelectableInfo");
addToContainers_function("GetUnitType", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/GetUnitType.html", ["get", "unit", "type"], "FPIEStartingSelectableInfo");
addToContainers_function("IsForBuilding", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/IsForBuilding.html", ["is", "for", "building"], "FPIEStartingSelectableInfo");
addToContainers_function("IsForUnit", "", "Docs/Structs/FPIEStartingSelectableInfo/Functions/IsForUnit.html", ["is", "for", "unit"], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Blueprint of selectable", "Docs/Structs/FPIEStartingSelectableInfo/Variables/.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Transform to spawn actor at", "Docs/Structs/FPIEStartingSelectableInfo/Variables/_1.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Index of player that will own selectable. -2 = no one 0 = server player 1 = client 1 2 = client 2 and so on", "Docs/Structs/FPIEStartingSelectableInfo/Variables/_2.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("", "Whether the owner index is for a CPU or human player", "Docs/Structs/FPIEStartingSelectableInfo/Variables/_3.html", [], "FPIEStartingSelectableInfo");
addToContainers_variable("BuildingType", "The type of building/unit this is. Here for CPU player AI controllers. NotBuilding if selectablke is not a building, and NotUnit if selectable is not a unit", "Docs/Structs/FPIEStartingSelectableInfo/Variables/BuildingType.html", ["building", "type"], "FPIEStartingSelectableInfo");
addToContainers_variable("UnitType", "", "Docs/Structs/FPIEStartingSelectableInfo/Variables/UnitType.html", ["unit", "type"], "FPIEStartingSelectableInfo");
addToContainers_struct("FNewPlayerDefaultValues", "Multiplayer lobbies only. Holds what settings a newly joined player wants to set as their default values when they join", "Docs/Structs/FNewPlayerDefaultValues/FNewPlayerDefaultValues.html", ["new", "player", "default", "values"], "");
addToContainers_function("FNewPlayerDefaultValues", "Default constructor, never to be used", "Docs/Structs/FNewPlayerDefaultValues/Functions/FNewPlayerDefaultValues.html", ["new", "player", "default", "values"], "FNewPlayerDefaultValues");
addToContainers_function("FNewPlayerDefaultValues", "Constructor intended to be used", "Docs/Structs/FNewPlayerDefaultValues/Functions/FNewPlayerDefaultValues_1.html", ["new", "player", "default", "values"], "FNewPlayerDefaultValues");
addToContainers_function("GetFaction", "", "Docs/Structs/FNewPlayerDefaultValues/Functions/GetFaction.html", ["get", "faction"], "FNewPlayerDefaultValues");
addToContainers_variable("", "The faction they want to be when they join", "Docs/Structs/FNewPlayerDefaultValues/Variables/.html", [], "FNewPlayerDefaultValues");
addToContainers_class("ARTSGameMode", "Game mode handles checking if players are defeated during a match. It also handles what to do when testing in PIE/standalone When testing in PIE game mode and auto-connect true game mode will only be spawned for the server player, or at least BeginPlay only gets called for server player", "Docs/Classes/ARTSGameMode/ARTSGameMode.html", ["r", "t", "s", "game", "mode"], "");
addToContainers_function("ARTSGameMode", "", "Docs/Classes/ARTSGameMode/Functions/ARTSGameMode.html", ["r", "t", "s", "game", "mode"], "ARTSGameMode");
addToContainers_function("InitNewPlayer", "Called during Login(). Handles assigning player name via APlayerState::SetPlayerName", "Docs/Classes/ARTSGameMode/Functions/InitNewPlayer.html", ["init", "new", "player"], "ARTSGameMode");
addToContainers_function("PostLogin", "", "Docs/Classes/ARTSGameMode/Functions/PostLogin.html", ["post", "login"], "ARTSGameMode");
addToContainers_function("Logout", "", "Docs/Classes/ARTSGameMode/Functions/Logout.html", [], "ARTSGameMode");
addToContainers_function("BeginPlay", "I use this as the entry point for starting the game from the operating system", "Docs/Classes/ARTSGameMode/Functions/BeginPlay.html", ["begin", "play"], "ARTSGameMode");
addToContainers_function("RestartPlayer", "Called during StartMatch. Even though param is just AController pretty sure it does nothing for bot players", "Docs/Classes/ARTSGameMode/Functions/RestartPlayer.html", ["restart", "player"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartup", "Handles loading straight into map instead of showing main menu. Only called when WITH_EDITOR is true", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartup.html", ["go", "to", "map", "from", "startup"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPart0", "", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPart0.html", ["go", "to", "map", "from", "startup", "part0"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPartZeroPointFive", "", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPartZeroPointFi.html", ["go", "to", "map", "from", "startup", "part", "zero", "point", "five"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPartZeroPointSevenFive", "", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPartZeroPointSe.html", ["go", "to", "map", "from", "startup", "part", "zero", "point", "seven", "five"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPart1", "@param NewTeamsMap - mapping from team set in dev settings to lowest enum value possible team", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPart1.html", ["go", "to", "map", "from", "startup", "part1"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPart2", "", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPart2.html", ["go", "to", "map", "from", "startup", "part2"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPart3", "", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPart3.html", ["go", "to", "map", "from", "startup", "part3"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPart4", "", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPart4.html", ["go", "to", "map", "from", "startup", "part4"], "ARTSGameMode");
addToContainers_function("GoToMapFromStartupPart5", "", "Docs/Classes/ARTSGameMode/Functions/GoToMapFromStartupPart5.html", ["go", "to", "map", "from", "startup", "part5"], "ARTSGameMode");
addToContainers_function("ShowIntro", "Show startup movie for when starting from OS", "Docs/Classes/ARTSGameMode/Functions/ShowIntro.html", ["show", "intro"], "ARTSGameMode");
addToContainers_function("OnIntroFinished", "", "Docs/Classes/ARTSGameMode/Functions/OnIntroFinished.html", ["on", "intro", "finished"], "ARTSGameMode");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay before calling function", "Docs/Classes/ARTSGameMode/Functions/Delay).html", [], "ARTSGameMode");
addToContainers_function("bool", "", "Docs/Classes/ARTSGameMode/Functions/bool.html", [], "ARTSGameMode");
addToContainers_function("IsPlayerDefeated", "Checks to see if a player is defeated", "Docs/Classes/ARTSGameMode/Functions/IsPlayerDefeated.html", ["is", "player", "defeated"], "ARTSGameMode");
addToContainers_function("SetupDefeatFunctions", "Setup DefeatFunctions array in constructor", "Docs/Classes/ARTSGameMode/Functions/SetupDefeatFunctions.html", ["setup", "defeat", "functions"], "ARTSGameMode");
addToContainers_function("DefeatFunction_NoCondition", "Checks if a player has been defeated under the no condition defeat condition. This will always return false", "Docs/Classes/ARTSGameMode/Functions/DefeatFunction_NoCondition.html", ["defeat", "function_", "no", "condition"], "ARTSGameMode");
addToContainers_function("DefeatFunction_AllBuildingsDestroyed", "Checks to see if a player is defeated when using the AllBuildingsDestroyed defeat condition @return - true if player has been defeated", "Docs/Classes/ARTSGameMode/Functions/DefeatFunction_AllBuildingsDestro.html", ["defeat", "function_", "all", "buildings", "destroyed"], "ARTSGameMode");
addToContainers_function("StartDefeatConditionChecking", "Start constantly checking if players in match have been defeated. If only one (or zero) teams are undefeated then the match will end", "Docs/Classes/ARTSGameMode/Functions/StartDefeatConditionChecking.html", ["start", "defeat", "condition", "checking"], "ARTSGameMode");
addToContainers_function("StopDefeatConditionChecking", "Stop checking if match is over", "Docs/Classes/ARTSGameMode/Functions/StopDefeatConditionChecking.html", ["stop", "defeat", "condition", "checking"], "ARTSGameMode");
addToContainers_function("CheckDefeatCondition", "Check if a team has won the match and notify game state", "Docs/Classes/ARTSGameMode/Functions/CheckDefeatCondition.html", ["check", "defeat", "condition"], "ARTSGameMode");
addToContainers_variable("", "Info about players that gets parsed from their options string during Login(). It needs to be cached here because it is not safe to send by RPC until PostLogin()", "Docs/Classes/ARTSGameMode/Variables/.html", [], "ARTSGameMode");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSGameMode/Variables/_1.html", [], "ARTSGameMode");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ARTSGameMode/Variables/_2.html", [], "ARTSGameMode");
addToContainers_variable("NumPIEClients", "The number of PIE players including server player. Excludes CPU players", "Docs/Classes/ARTSGameMode/Variables/NumPIEClients.html", ["num", "p", "i", "e", "clients"], "ARTSGameMode");
addToContainers_variable("NumPIECPUPlayers", "Number of CPU players actually spawned for PIE/standalone session, not the number desired", "Docs/Classes/ARTSGameMode/Variables/NumPIECPUPlayers.html", ["num", "p", "i", "e", "c", "p", "u", "players"], "ARTSGameMode");
addToContainers_variable("", "Array of info about actors to respawn as part of the PIE/standalone setup", "Docs/Classes/ARTSGameMode/Variables/_3.html", [], "ARTSGameMode");
addToContainers_variable("NeutralSelectables", "Neutral selectables that should be setup close to starting match", "Docs/Classes/ARTSGameMode/Variables/NeutralSelectables.html", ["neutral", "selectables"], "ARTSGameMode");
addToContainers_variable("DefeatCondition", "Rule for if player is defeated", "Docs/Classes/ARTSGameMode/Variables/DefeatCondition.html", ["defeat", "condition"], "ARTSGameMode");
addToContainers_variable("DefeatFunctions[Statics::NUM_DEFEAT_CONDITIONS]", "Function pointer to function to use to check if team has been defeated", "Docs/Classes/ARTSGameMode/Variables/DefeatFunctions[Statics::NUM_DEFE.html", ["defeat", "functions[", "statics::", "n", "u", "m_", "d", "e", "f", "e", "a", "t_", "c", "o", "n", "d", "i", "t", "i", "o", "n", "s]"], "ARTSGameMode");
addToContainers_variable("", "Having custom victory conditions means polling seems like the most feasible option. Rate at which checks to see if defeat conditions are fulfilled. The larger the value the greater the chance of a draw", "Docs/Classes/ARTSGameMode/Variables/_4.html", [], "ARTSGameMode");
addToContainers_variable("TimerHandle_DefeatCondition", "Timer handle for checking if players have been defeated and as a consquence if the match should end", "Docs/Classes/ARTSGameMode/Variables/TimerHandle_DefeatCondition.html", ["timer", "handle_", "defeat", "condition"], "ARTSGameMode");
addToContainers_struct("FResourcesArray", "Array of resource spots", "Docs/Structs/FResourcesArray/FResourcesArray.html", ["resources", "array"], "");
addToContainers_function("GetArray", "", "Docs/Structs/FResourcesArray/Functions/GetArray.html", ["get", "array"], "FResourcesArray");
addToContainers_function("AddResourceSpot", "", "Docs/Structs/FResourcesArray/Functions/AddResourceSpot.html", ["add", "resource", "spot"], "FResourcesArray");
addToContainers_variable("Array", "", "Docs/Structs/FResourcesArray/Variables/Array.html", [], "FResourcesArray");
addToContainers_struct("FAudioComponentContainer", "TMap and TArray of UAudioComponents. TMap and TArray contain the same elements. Did it like this for O(1) contains, add and remove and array speed iteration.", "Docs/Structs/FAudioComponentContainer/FAudioComponentContainer.html", ["audio", "component", "container"], "");
addToContainers_function("Num", "", "Docs/Structs/FAudioComponentContainer/Functions/Num.html", [], "FAudioComponentContainer");
addToContainers_function("Contains", "", "Docs/Structs/FAudioComponentContainer/Functions/Contains.html", [], "FAudioComponentContainer");
addToContainers_function("Add", "Assumes the element isn\'t already in the container", "Docs/Structs/FAudioComponentContainer/Functions/Add.html", [], "FAudioComponentContainer");
addToContainers_function("RemoveChecked", "Remove element given we know it\'s in container", "Docs/Structs/FAudioComponentContainer/Functions/RemoveChecked.html", ["remove", "checked"], "FAudioComponentContainer");
addToContainers_function("GetArray", "", "Docs/Structs/FAudioComponentContainer/Functions/GetArray.html", ["get", "array"], "FAudioComponentContainer");
addToContainers_variable("Map", "Key = index in Array component is", "Docs/Structs/FAudioComponentContainer/Variables/Map.html", [], "FAudioComponentContainer");
addToContainers_variable("", "", "Docs/Structs/FAudioComponentContainer/Variables/.html", [], "FAudioComponentContainer");
addToContainers_class("ARTSGameState", "Same game state used all the time. Handles lobby state aswell", "Docs/Classes/ARTSGameState/ARTSGameState.html", ["r", "t", "s", "game", "state"], "");
addToContainers_function("ARTSGameState", "", "Docs/Classes/ARTSGameState/Functions/ARTSGameState.html", ["r", "t", "s", "game", "state"], "ARTSGameState");
addToContainers_function("Tick", "", "Docs/Classes/ARTSGameState/Functions/Tick.html", [], "ARTSGameState");
addToContainers_function("BeginPlay", "virtual void PostInitializeComponents() override;", "Docs/Classes/ARTSGameState/Functions/BeginPlay.html", ["begin", "play"], "ARTSGameState");
addToContainers_function("PreReplication", "", "Docs/Classes/ARTSGameState/Functions/PreReplication.html", ["pre", "replication"], "ARTSGameState");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/ARTSGameState/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "ARTSGameState");
addToContainers_function("OnRep_TickCounter", "", "Docs/Classes/ARTSGameState/Functions/OnRep_TickCounter.html", ["on", "rep_", "tick", "counter"], "ARTSGameState");
addToContainers_function("Server_RegenSelectableResources", "", "Docs/Classes/ARTSGameState/Functions/Server_RegenSelectableResources.html", ["server_", "regen", "selectable", "resources"], "ARTSGameState");
addToContainers_function("Client_RegenSelectableResources", "", "Docs/Classes/ARTSGameState/Functions/Client_RegenSelectableResources.html", ["client_", "regen", "selectable", "resources"], "ARTSGameState");
addToContainers_function("InitTeamTraceChannels", "Calculate the EObjectTypeQuery for each team and put them in TeamTraceChannels", "Docs/Classes/ARTSGameState/Functions/InitTeamTraceChannels.html", ["init", "team", "trace", "channels"], "ARTSGameState");
addToContainers_function("SetPoolingManager", "", "Docs/Classes/ARTSGameState/Functions/SetPoolingManager.html", ["set", "pooling", "manager"], "ARTSGameState");
addToContainers_function("SetupEffectsActors", "Spawn the effects actors which will handle creating context action effects during a match (e.g. artillery strikes)", "Docs/Classes/ARTSGameState/Functions/SetupEffectsActors.html", ["setup", "effects", "actors"], "ARTSGameState");
addToContainers_function("SetupCommanderAbilityEffects", "Spawn the eeffect UObjects for each commander ability", "Docs/Classes/ARTSGameState/Functions/SetupCommanderAbilityEffects.html", ["setup", "commander", "ability", "effects"], "ARTSGameState");
addToContainers_function("SetupTeamTags", "Setup the FNames that corrispond to each team", "Docs/Classes/ARTSGameState/Functions/SetupTeamTags.html", ["setup", "team", "tags"], "ARTSGameState");
addToContainers_function("AddController", "Register a player controller. Call when joining", "Docs/Classes/ARTSGameState/Functions/AddController.html", ["add", "controller"], "ARTSGameState");
addToContainers_function("SetupForMatch", "", "Docs/Classes/ARTSGameState/Functions/SetupForMatch.html", ["setup", "for", "match"], "ARTSGameState");
addToContainers_function("GetAllResourceSpots", "Get array of all resource spots on map", "Docs/Classes/ARTSGameState/Functions/GetAllResourceSpots.html", ["get", "all", "resource", "spots"], "ARTSGameState");
addToContainers_function("GetResourceSpots", "Get all the resource spots on map for a resource type", "Docs/Classes/ARTSGameState/Functions/GetResourceSpots.html", ["get", "resource", "spots"], "ARTSGameState");
addToContainers_function("AddToResourceSpots", "Add resource spot to ResourceSpots", "Docs/Classes/ARTSGameState/Functions/AddToResourceSpots.html", ["add", "to", "resource", "spots"], "ARTSGameState");
addToContainers_function("AddToTeam", "Add a player state to a team", "Docs/Classes/ARTSGameState/Functions/AddToTeam.html", ["add", "to", "team"], "ARTSGameState");
addToContainers_function("AddCPUController", "Register a CPU controller", "Docs/Classes/ARTSGameState/Functions/AddCPUController.html", ["add", "c", "p", "u", "controller"], "ARTSGameState");
addToContainers_function("SetupCollisionChannels", "Before match starts, sets up which collision channel each team will use + their enemies. for things like capsule sweeps", "Docs/Classes/ARTSGameState/Functions/SetupCollisionChannels.html", ["setup", "collision", "channels"], "ARTSGameState");
addToContainers_function("GetGameTickCounter", "Get the current value of the game tick counter. It overflows a lot so this cannot be used to derive the total length of the match", "Docs/Classes/ARTSGameState/Functions/GetGameTickCounter.html", ["get", "game", "tick", "counter"], "ARTSGameState");
addToContainers_function("GetObjectPoolingManager", "", "Docs/Classes/ARTSGameState/Functions/GetObjectPoolingManager.html", ["get", "object", "pooling", "manager"], "ARTSGameState");
addToContainers_function("OnBuildingPlaced", "Called when a selectable is built. Updates fog of war visiblity map @param Selectable - the selectable created @param Team - the team the selectable belongs to @param bIsServer - whether it is the server that is calling this", "Docs/Classes/ARTSGameState/Functions/OnBuildingPlaced.html", ["on", "building", "placed"], "ARTSGameState");
addToContainers_function("OnBuildingConstructionCompleted", "", "Docs/Classes/ARTSGameState/Functions/OnBuildingConstructionCompleted.html", ["on", "building", "construction", "completed"], "ARTSGameState");
addToContainers_function("OnInfantryBuilt", "", "Docs/Classes/ARTSGameState/Functions/OnInfantryBuilt.html", ["on", "infantry", "built"], "ARTSGameState");
addToContainers_function("OnBuildingZeroHealth", "", "Docs/Classes/ARTSGameState/Functions/OnBuildingZeroHealth.html", ["on", "building", "zero", "health"], "ARTSGameState");
addToContainers_function("OnInfantryZeroHealth", "", "Docs/Classes/ARTSGameState/Functions/OnInfantryZeroHealth.html", ["on", "infantry", "zero", "health"], "ARTSGameState");
addToContainers_function("Server_RegisterSelectableResourceRegener", "Functions to let us know a selectable can/cannot regenerate its selectable resource over time", "Docs/Classes/ARTSGameState/Functions/Server_RegisterSelectableResource.html", ["server_", "register", "selectable", "resource", "regener"], "ARTSGameState");
addToContainers_function("Client_RegisterSelectableResourceRegener", "", "Docs/Classes/ARTSGameState/Functions/Client_RegisterSelectableResource.html", ["client_", "register", "selectable", "resource", "regener"], "ARTSGameState");
addToContainers_function("Server_UnregisterSelectableResourceRegener", "", "Docs/Classes/ARTSGameState/Functions/Server_UnregisterSelectableResour.html", ["server_", "unregister", "selectable", "resource", "regener"], "ARTSGameState");
addToContainers_function("Client_UnregisterSelectableResourceRegener", "", "Docs/Classes/ARTSGameState/Functions/Client_UnregisterSelectableResour.html", ["client_", "unregister", "selectable", "resource", "regener"], "ARTSGameState");
addToContainers_function("OnSelectableDestroyed", "Called when a selectable is destroyed. Updates fog of war visibility map @param Selectable - the selectable destroyed @param Team - the team the selectable belongs to @param bIsServer - whether it is the server that is calling this", "Docs/Classes/ARTSGameState/Functions/OnSelectableDestroyed.html", ["on", "selectable", "destroyed"], "ARTSGameState");
addToContainers_function("Server_RegisterNeutralSelectable", "Should be called by a neutral selectable at some point during its initialization", "Docs/Classes/ARTSGameState/Functions/Server_RegisterNeutralSelectable.html", ["server_", "register", "neutral", "selectable"], "ARTSGameState");
addToContainers_function("RegisterFogProjectile", "Register a projectile to be affected by fog of war", "Docs/Classes/ARTSGameState/Functions/RegisterFogProjectile.html", ["register", "fog", "projectile"], "ARTSGameState");
addToContainers_function("UnregisterFogProjectile", "", "Docs/Classes/ARTSGameState/Functions/UnregisterFogProjectile.html", ["unregister", "fog", "projectile"], "ARTSGameState");
addToContainers_function("RegisterFogParticles", "Register a particle system to be affected by fog of war", "Docs/Classes/ARTSGameState/Functions/RegisterFogParticles.html", ["register", "fog", "particles"], "ARTSGameState");
addToContainers_function("Multicast_OnSelectableLevelUp", "Multicast that a selectable has leveled/ranked up @param NewRank - the new level/rank the selectable has achieved", "Docs/Classes/ARTSGameState/Functions/Multicast_OnSelectableLevelUp.html", ["multicast_", "on", "selectable", "level", "up"], "ARTSGameState");
addToContainers_function("Multicast_OnUpgradeComplete", "Multicast that an upgrade has completed. Doing this through GS instead of calling on the upgrade manager because we may need ordering guarantees for these @param PlayerID - ID of the player who completed the upgrade @param UpgradeType - the upgrade the player completed", "Docs/Classes/ARTSGameState/Functions/Multicast_OnUpgradeComplete.html", ["multicast_", "on", "upgrade", "complete"], "ARTSGameState");
addToContainers_function("GetAbilityEffectActor", "Get the effect actor for a certain ability", "Docs/Classes/ARTSGameState/Functions/GetAbilityEffectActor.html", ["get", "ability", "effect", "actor"], "ARTSGameState");
addToContainers_function("Server_CreateAbilityEffect", "Create the effect of an ability server-side, then notify all clients @param UsageCaseAuxilleryData - if this is an inventory slot usage then this should be the slot index @param AbilityInfo - type of ability to activate @param bOutIsRandom - whether the ability has random behavior @pararm EffectInstigator - actor using the ability @param InstigatorAsSelectable - EffectInstigator as a ISelectable @param InstigatorsTeam - team of EffectInstigator @param AbilityLocation - where to create ability @param AbilityTarget - target of ability or null if not a targeting ability @param TargetAsSelectable - Target as a ISelectable @return - random number seed to send to client. Can be ignored if ability does not have random behavior", "Docs/Classes/ARTSGameState/Functions/Server_CreateAbilityEffect.html", ["server_", "create", "ability", "effect"], "ARTSGameState");
addToContainers_function("IsServer", "Return true if we are executing code on the server", "Docs/Classes/ARTSGameState/Functions/IsServer.html", ["is", "server"], "ARTSGameState");
addToContainers_function("AbilityMulticasts_PassedInstigatorValidChecks", "Checks if the instigator is valid or whatever: in a state that the ability can go through. If false then this func will add the function data to a container to have it executed later. See the first ability RPC for kind of how this should be done, but it probably needs changing quite a bit", "Docs/Classes/ARTSGameState/Functions/AbilityMulticasts_PassedInstigato.html", ["ability", "multicasts_", "passed", "instigator", "valid", "checks"], "ARTSGameState");
addToContainers_function("AbilityMulticasts_PassedInstigatorAndTargetValidChecks", "Checks that both the instigator and target are both valid or whatever and the ability can go through. If false then this function will handle adding the RPC to whatever container or whatever that processes them later", "Docs/Classes/ARTSGameState/Functions/AbilityMulticasts_PassedInstigato_1.html", ["ability", "multicasts_", "passed", "instigator", "and", "target", "valid", "checks"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom", "Except for the first one which I have already added to, the other 47 need the param TickCounterOnServerAtTimeOfAbility added to them", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_1.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_2.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_3.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_4.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_5.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_6.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_7.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_8.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_9.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_10.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_11.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_12.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_13.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_14.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_15.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_16.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_17.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_18.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_19.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_20.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_21.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_22.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_23.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_1.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_2.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_3.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_4.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_5.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_6.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_7.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_8.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_9.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_10.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_11.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_12.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_13.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_14.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_15.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_16.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_17.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_18.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_19.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_20.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_21.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_22.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_23.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom", "===========================================================================================", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_1.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_2.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_3.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_4.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_5.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_6.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_7.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_8.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_9.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_10.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_11.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_12.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_13.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_14.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_15.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_16.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_17.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_18.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_19.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_20.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_21.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_22.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_23.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_24.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_25.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_26.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_27.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_28.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_29.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_30.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_31.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_32.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_33.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_34.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_35.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_36.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_37.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_38.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_39.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_40.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_41.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_42.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_43.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_44.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_45.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_46.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationNotRandom", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_47.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount", "===========================================================================================", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_24.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_25.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_26.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_27.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_28.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_29.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_30.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_31.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_32.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_33.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_34.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_35.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_36.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_37.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_38.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_39.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_40.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_41.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_42.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_43.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_44.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_45.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_46.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Mult_47.html", ["multicast_", "notify", "of", "ability", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_24.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_25.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_26.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_27.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_28.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_29.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_30.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_31.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_32.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_33.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_34.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_35.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_36.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_37.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_38.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_39.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_40.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_41.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_42.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_43.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_44.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_45.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_46.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfAbilityUse_Sing_47.html", ["multicast_", "notify", "of", "ability", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount", "The inventory ones", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_48.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_49.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_50.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_51.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_52.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_53.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_54.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_55.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_56.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_57.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_58.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_59.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_60.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_61.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_62.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_63.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_64.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_65.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_66.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_67.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_68.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_69.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_70.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_71.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "multiple", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_72.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_73.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_74.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_75.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_76.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_77.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_78.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_79.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_80.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_81.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_82.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_83.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_84.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_85.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_86.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "multiple", "hit", "outcomes", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_87.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "ao", "e", "single", "hit", "outcome", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_88.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_89.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_90.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_91.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "with", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_92.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_93.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "with", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_94.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount", "", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfInventorySlotUs_95.html", ["multicast_", "notify", "of", "inventory", "slot", "use_", "single", "outcome", "not", "ao", "e", "no", "target", "no", "location", "not", "random", "with", "tick", "count"], "ARTSGameState");
addToContainers_function("GetAllCommanderAbilityEffectObjects", "===========================================================================================", "Docs/Classes/ARTSGameState/Functions/GetAllCommanderAbilityEffectObjec.html", ["get", "all", "commander", "ability", "effect", "objects"], "ARTSGameState");
addToContainers_function("GetCommanderAbilityEffectObject", "", "Docs/Classes/ARTSGameState/Functions/GetCommanderAbilityEffectObject.html", ["get", "commander", "ability", "effect", "object"], "ARTSGameState");
addToContainers_function("Server_CreateAbilityEffect", "[Server] Create an commander ability effect on the server and multicast it to all clients", "Docs/Classes/ARTSGameState/Functions/Server_CreateAbilityEffect_1.html", ["server_", "create", "ability", "effect"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfCommanderAbilityUse_EverySingleParam", "This function is for development only. It calls the multicast RPC with every param possible and is not very bandwidth efficient", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfCommanderAbilit.html", ["multicast_", "notify", "of", "commander", "ability", "use_", "every", "single", "param"], "ARTSGameState");
addToContainers_function("Server_CreateAbilityEffect", "[Server] Create a building targeting ability effect on the server and multicast it to all clients. @param AbilityInfo - info struct for the ability that is being used @param AbilityTarget - building that is being targeted by the ability", "Docs/Classes/ARTSGameState/Functions/Server_CreateAbilityEffect_2.html", ["server_", "create", "ability", "effect"], "ARTSGameState");
addToContainers_function("Multicast_NotifyOfBuildingTargetingAbilityUse_EverySingleParam", "This function is for development only. It calls the multicast RPC with every param possible and is not very bandwidth efficient", "Docs/Classes/ARTSGameState/Functions/Multicast_NotifyOfBuildingTargeti.html", ["multicast_", "notify", "of", "building", "targeting", "ability", "use_", "every", "single", "param"], "ARTSGameState");
addToContainers_function("GetInventoryItemsInWorld", "Get array of all inventory items that are in the world. Does not include any item actors that are in the object pool", "Docs/Classes/ARTSGameState/Functions/GetInventoryItemsInWorld.html", ["get", "inventory", "items", "in", "world"], "ARTSGameState");
addToContainers_function("GenerateInventoryItemUniqueID", "Returns an ID to be used for an inventory item that has a presence in the world", "Docs/Classes/ARTSGameState/Functions/GenerateInventoryItemUniqueID.html", ["generate", "inventory", "item", "unique", "i", "d"], "ARTSGameState");
addToContainers_function("PutInventoryItemActorInArray", "Put inventory item actor into relevant containers", "Docs/Classes/ARTSGameState/Functions/PutInventoryItemActorInArray.html", ["put", "inventory", "item", "actor", "in", "array"], "ARTSGameState");
addToContainers_function("GetInventoryItemFromID", "", "Docs/Classes/ARTSGameState/Functions/GetInventoryItemFromID.html", ["get", "inventory", "item", "from", "i", "d"], "ARTSGameState");
addToContainers_function("Server_TryPutItemInInventory", "[Server] Try put item in inventory from a store purchase. @return - \"None\" if successful", "Docs/Classes/ARTSGameState/Functions/Server_TryPutItemInInventory.html", ["server_", "try", "put", "item", "in", "inventory"], "ARTSGameState");
addToContainers_function("Server_TryPutItemInInventory", "[Server] Put an item into a selectable\'s inventory. Broadcasts this to all clients. This function assumes that uniqueness checks and whatever have already happened. Handles warnings if unsuccessful. @param SelectableGettingItem - the selectable getting the item @param bIsInventoryOwnerCurrentSelected - whether selectable getting item is selected by the local player. @param bIsInventoryOwnerCurrentSelected - whether selectable getting item is the current @param SelectablesOwner - SelectableGettingItem\'s owner selected for the local player @param ItemType - the item to give to selectable @param Quantity - how many of the item to give to the selectable. Must be at least 1. @param ItemsInfo - item info for ItemType as a convenience @param ReasonForAquiring - how the item is being aquired @param ItemOnGround - if item is being picked up off the ground then this should point to that item actor. Otherwise it can be null. @return - None if item was successfully added to inventory, something else otherwise.", "Docs/Classes/ARTSGameState/Functions/Server_TryPutItemInInventory_1.html", ["server_", "try", "put", "item", "in", "inventory"], "ARTSGameState");
addToContainers_function("Multicast_PutItemInInventoryFromGround", "Tell clients to put an item on the ground into inventory", "Docs/Classes/ARTSGameState/Functions/Multicast_PutItemInInventoryFromG.html", ["multicast_", "put", "item", "in", "inventory", "from", "ground"], "ARTSGameState");
addToContainers_function("PutItemInInventoryFromShopPurchase_PassedParamChecks", "Check that the parameters for good enough to carry out its logic. If not then this function will should handle noting down the function as unexecuted so it can be executed later. @return - true if the params are in a state that they can be used.", "Docs/Classes/ARTSGameState/Functions/PutItemInInventoryFromShopPurchas.html", ["put", "item", "in", "inventory", "from", "shop", "purchase_", "passed", "param", "checks"], "ARTSGameState");
addToContainers_function("Multicast_PutItemInInventoryFromShopPurchase", "Tells clients about a successful item purchase from a shop.", "Docs/Classes/ARTSGameState/Functions/Multicast_PutItemInInventoryFromS.html", ["multicast_", "put", "item", "in", "inventory", "from", "shop", "purchase"], "ARTSGameState");
addToContainers_function("Multicast_PutItemInInventory", "Tell clients to put an item into a selectable\'s inventory. Assumes it has already been checked that item can go in inventory. @param Quantity - how many of the item they are getting @param ReasonForAquiringItem - how they are aquiring the item", "Docs/Classes/ARTSGameState/Functions/Multicast_PutItemInInventory.html", ["multicast_", "put", "item", "in", "inventory"], "ARTSGameState");
addToContainers_function("Multicast_OnInventoryItemSold", "Broadcast that an item was sold", "Docs/Classes/ARTSGameState/Functions/Multicast_OnInventoryItemSold.html", ["multicast_", "on", "inventory", "item", "sold"], "ARTSGameState");
addToContainers_function("PutInventoryItemInObjectPool", "Put an inventory item actor into object pool", "Docs/Classes/ARTSGameState/Functions/PutInventoryItemInObjectPool.html", ["put", "inventory", "item", "in", "object", "pool"], "ARTSGameState");
addToContainers_function("PutInventoryItemInObjectPool", "", "Docs/Classes/ARTSGameState/Functions/PutInventoryItemInObjectPool_1.html", ["put", "inventory", "item", "in", "object", "pool"], "ARTSGameState");
addToContainers_function("ShouldPlayInventoryItemAquireSound", "Return whether we should play a sound for a selectable aquiring an item", "Docs/Classes/ARTSGameState/Functions/ShouldPlayInventoryItemAquireSoun.html", ["should", "play", "inventory", "item", "aquire", "sound"], "ARTSGameState");
addToContainers_function("ShouldShowInventoryItemAquireParticles", "Return whether we should show some particles for a selectable aquiring an item", "Docs/Classes/ARTSGameState/Functions/ShouldShowInventoryItemAquirePart.html", ["should", "show", "inventory", "item", "aquire", "particles"], "ARTSGameState");
addToContainers_function("PlayItemAquireParticles", "Play particles for a selectable aquiring an item", "Docs/Classes/ARTSGameState/Functions/PlayItemAquireParticles.html", ["play", "item", "aquire", "particles"], "ARTSGameState");
addToContainers_function("PutInventoryItemInWorld", "Puts an inventory item actor into the world at the specified location and rotation. @param ItemStackQuantity - how many of the item to be in the stack @param SpawnReason - the reason this item is appearing in the world", "Docs/Classes/ARTSGameState/Functions/PutInventoryItemInWorld.html", ["put", "inventory", "item", "in", "world"], "ARTSGameState");
addToContainers_function("Multicast_OnSelectableZeroHealth", "Not actually inventory item related. Send an RPC to say a selectable has reached zero health. Important: there is no guarantee this will be sent for every selectable that reaches zero health. Currently it is only sent when a selectable drops items on death. The X, Y, Z params are split up because they need to be exact. FVector might compress each axis, I don\'t know, but want to be safe by sending the float seperately. @param Selectable - selectable that reached zero health @param Location_X - the X of the selectable\'s location @param Location_Y - the Y of the selectable\'s location @param Location_Z - the Z of the selectable\'s location @param Yaw - the yaw of selectable\'s rotation", "Docs/Classes/ARTSGameState/Functions/Multicast_OnSelectableZeroHealth.html", ["multicast_", "on", "selectable", "zero", "health"], "ARTSGameState");
addToContainers_function("NoteDownUnexecutedRPC_Ability", "==========================================================================================", "Docs/Classes/ARTSGameState/Functions/NoteDownUnexecutedRPC_Ability.html", ["note", "down", "unexecuted", "r", "p", "c_", "ability"], "ARTSGameState");
addToContainers_function("NoteDownUnexecutedRPC_CommanderAbility", "", "Docs/Classes/ARTSGameState/Functions/NoteDownUnexecutedRPC_CommanderAb.html", ["note", "down", "unexecuted", "r", "p", "c_", "commander", "ability"], "ARTSGameState");
addToContainers_function("NoteDownUnexecutedRPC_BuildingTargetingAbility", "", "Docs/Classes/ARTSGameState/Functions/NoteDownUnexecutedRPC_BuildingTar.html", ["note", "down", "unexecuted", "r", "p", "c_", "building", "targeting", "ability"], "ARTSGameState");
addToContainers_function("NoteDownUnexecutedRPC_PutItemInInventory", "", "Docs/Classes/ARTSGameState/Functions/NoteDownUnexecutedRPC_PutItemInIn.html", ["note", "down", "unexecuted", "r", "p", "c_", "put", "item", "in", "inventory"], "ARTSGameState");
addToContainers_function("NoteDownUnexecutedRPC_PutItemInInventoryFromGround", "", "Docs/Classes/ARTSGameState/Functions/NoteDownUnexecutedRPC_PutItemInIn_1.html", ["note", "down", "unexecuted", "r", "p", "c_", "put", "item", "in", "inventory", "from", "ground"], "ARTSGameState");
addToContainers_function("NoteDownUnexecutedRPC_OnSelectableZeroHealth", "", "Docs/Classes/ARTSGameState/Functions/NoteDownUnexecutedRPC_OnSelectabl.html", ["note", "down", "unexecuted", "r", "p", "c_", "on", "selectable", "zero", "health"], "ARTSGameState");
addToContainers_function("NoteDownUnexecutedRPC_OnInventoryItemSold", "", "Docs/Classes/ARTSGameState/Functions/NoteDownUnexecutedRPC_OnInventory.html", ["note", "down", "unexecuted", "r", "p", "c_", "on", "inventory", "item", "sold"], "ARTSGameState");
addToContainers_function("SetGI", "==========================================================================================", "Docs/Classes/ARTSGameState/Functions/SetGI.html", ["set", "g", "i"], "ARTSGameState");
addToContainers_function("Server_GetMatchTime", "[Server] Get how long match has been going for. Is stopped when game is paused. Negative value means match has not started. Server-side only", "Docs/Classes/ARTSGameState/Functions/Server_GetMatchTime.html", ["server_", "get", "match", "time"], "ARTSGameState");
addToContainers_function("SetLocalPlayersTeam", "", "Docs/Classes/ARTSGameState/Functions/SetLocalPlayersTeam.html", ["set", "local", "players", "team"], "ARTSGameState");
addToContainers_function("GetLocalPlayersTeam", "", "Docs/Classes/ARTSGameState/Functions/GetLocalPlayersTeam.html", ["get", "local", "players", "team"], "ARTSGameState");
addToContainers_function("GetPlayers", "Get all players player controllers", "Docs/Classes/ARTSGameState/Functions/GetPlayers.html", ["get", "players"], "ARTSGameState");
addToContainers_function("GetPlayerStates", "Get all player states", "Docs/Classes/ARTSGameState/Functions/GetPlayerStates.html", ["get", "player", "states"], "ARTSGameState");
addToContainers_function("GetPlayerStatesByValue", "", "Docs/Classes/ARTSGameState/Functions/GetPlayerStatesByValue.html", ["get", "player", "states", "by", "value"], "ARTSGameState");
addToContainers_function("GetCPUControllers", "Get all CPU AI controllers", "Docs/Classes/ARTSGameState/Functions/GetCPUControllers.html", ["get", "c", "p", "u", "controllers"], "ARTSGameState");
addToContainers_function("GetTeams", "Get a reference to the Teams array", "Docs/Classes/ARTSGameState/Functions/GetTeams.html", ["get", "teams"], "ARTSGameState");
addToContainers_function("GetTeamPlayerStates", "Get a reference to the player state array for a team", "Docs/Classes/ARTSGameState/Functions/GetTeamPlayerStates.html", ["get", "team", "player", "states"], "ARTSGameState");
addToContainers_function("GetUndefeatedPlayers", "Get all players that haven\'t been defeated in the current match yet", "Docs/Classes/ARTSGameState/Functions/GetUndefeatedPlayers.html", ["get", "undefeated", "players"], "ARTSGameState");
addToContainers_function("GetPlayerFromID", "Get the player state given a player\'s uint8 ID", "Docs/Classes/ARTSGameState/Functions/GetPlayerFromID.html", ["get", "player", "from", "i", "d"], "ARTSGameState");
addToContainers_function("GetTeamVisibilityInfo", "Get reference to the visibility info of a team", "Docs/Classes/ARTSGameState/Functions/GetTeamVisibilityInfo.html", ["get", "team", "visibility", "info"], "ARTSGameState");
addToContainers_function("GetTeamVisibilityInfo", "", "Docs/Classes/ARTSGameState/Functions/GetTeamVisibilityInfo_1.html", ["get", "team", "visibility", "info"], "ARTSGameState");
addToContainers_function("GetAllTeamsVisibilityInfo", "Get all team\'s visibility info containers", "Docs/Classes/ARTSGameState/Functions/GetAllTeamsVisibilityInfo.html", ["get", "all", "teams", "visibility", "info"], "ARTSGameState");
addToContainers_function("GetNumTeams", "Get number of different teams in match", "Docs/Classes/ARTSGameState/Functions/GetNumTeams.html", ["get", "num", "teams"], "ARTSGameState");
addToContainers_function("GetNeutrals", "", "Docs/Classes/ARTSGameState/Functions/GetNeutrals.html", ["get", "neutrals"], "ARTSGameState");
addToContainers_function("GetTeamTag", "For a given team get its FName tag to appear in actor tags", "Docs/Classes/ARTSGameState/Functions/GetTeamTag.html", ["get", "team", "tag"], "ARTSGameState");
addToContainers_function("GetTemporaryFogProjectiles", "", "Docs/Classes/ARTSGameState/Functions/GetTemporaryFogProjectiles.html", ["get", "temporary", "fog", "projectiles"], "ARTSGameState");
addToContainers_function("GetTemporaryFogParticles", "", "Docs/Classes/ARTSGameState/Functions/GetTemporaryFogParticles.html", ["get", "temporary", "fog", "particles"], "ARTSGameState");
addToContainers_function("GetAllTeamCollisionChannels", "", "Docs/Classes/ARTSGameState/Functions/GetAllTeamCollisionChannels.html", ["get", "all", "team", "collision", "channels"], "ARTSGameState");
addToContainers_function("GetAllTeamsQueryParams", "Get a collision object query params that is setup to query against all teams channels", "Docs/Classes/ARTSGameState/Functions/GetAllTeamsQueryParams.html", ["get", "all", "teams", "query", "params"], "ARTSGameState");
addToContainers_function("GetAllTeamsCollisionResponseContainer_Overlap", "This this struct that is set up to overlap all team\'s channels and ignore everything else", "Docs/Classes/ARTSGameState/Functions/GetAllTeamsCollisionResponseConta.html", ["get", "all", "teams", "collision", "response", "container_", "overlap"], "ARTSGameState");
addToContainers_function("GetTeamCollisionChannel", "Get the trace channel for a team as a ECollisionChannel", "Docs/Classes/ARTSGameState/Functions/GetTeamCollisionChannel.html", ["get", "team", "collision", "channel"], "ARTSGameState");
addToContainers_function("GetEnemyChannels", "Get array of collision channels of enemy teams as uint8", "Docs/Classes/ARTSGameState/Functions/GetEnemyChannels.html", ["get", "enemy", "channels"], "ARTSGameState");
addToContainers_function("GetAllEnemiesQueryParams", "For a certain team return query params that will give all enemy teams", "Docs/Classes/ARTSGameState/Functions/GetAllEnemiesQueryParams.html", ["get", "all", "enemies", "query", "params"], "ARTSGameState");
addToContainers_function("GetNeutralTeamCollisionChannel", "", "Docs/Classes/ARTSGameState/Functions/GetNeutralTeamCollisionChannel.html", ["get", "neutral", "team", "collision", "channel"], "ARTSGameState");
addToContainers_function("SetFogManager", "", "Docs/Classes/ARTSGameState/Functions/SetFogManager.html", ["set", "fog", "manager"], "ARTSGameState");
addToContainers_function("GetFogManager", "", "Docs/Classes/ARTSGameState/Functions/GetFogManager.html", ["get", "fog", "manager"], "ARTSGameState");
addToContainers_function("SetupSingleplayerLobby", "", "Docs/Classes/ARTSGameState/Functions/SetupSingleplayerLobby.html", ["setup", "singleplayer", "lobby"], "ARTSGameState");
addToContainers_function("SetupNetworkedLobby", "", "Docs/Classes/ARTSGameState/Functions/SetupNetworkedLobby.html", ["setup", "networked", "lobby"], "ARTSGameState");
addToContainers_function("OnClientJoinsLobby", "Called during game modes InitNewPlayer function when a new player joins, excluding ourselves @param NewPlayerController - player controller of the person who has joined @param DefaultFaction - faction to set them as when they join @return - the lobby slot they joined into, or -1 if no open lobby slot could be found", "Docs/Classes/ARTSGameState/Functions/OnClientJoinsLobby.html", ["on", "client", "joins", "lobby"], "ARTSGameState");
addToContainers_function("GetNextOpenLobbySlot", "Returns the first open lobby slot or -1 if no slot is open", "Docs/Classes/ARTSGameState/Functions/GetNextOpenLobbySlot.html", ["get", "next", "open", "lobby", "slot"], "ARTSGameState");
addToContainers_function("ClearLobby", "Empty all lobby arrays. Leave lobby name and map how it is", "Docs/Classes/ARTSGameState/Functions/ClearLobby.html", ["clear", "lobby"], "ARTSGameState");
addToContainers_function("PopulateLobbySlot", "Put player in lobby slot with a specified faction @param Player - player controller for new player @param StartingFaction - faction they passed to server when joining @return - the lobby slot they joined into, or -1 if no slot could be found", "Docs/Classes/ARTSGameState/Functions/PopulateLobbySlot.html", ["populate", "lobby", "slot"], "ARTSGameState");
addToContainers_function("PopulateLobbySlot", "Put a CPU player in a lobby slot", "Docs/Classes/ARTSGameState/Functions/PopulateLobbySlot_1.html", ["populate", "lobby", "slot"], "ARTSGameState");
addToContainers_function("RemoveFromLobby", "Remove a human player from the lobby @param SlotIndex - slot in lobby widget @param NewSlotStatus - what status to put the slot as, either open or closed", "Docs/Classes/ARTSGameState/Functions/RemoveFromLobby.html", ["remove", "from", "lobby"], "ARTSGameState");
addToContainers_function("UpdateServerLobby", "Call OnReps because not called automatically on server", "Docs/Classes/ARTSGameState/Functions/UpdateServerLobby.html", ["update", "server", "lobby"], "ARTSGameState");
addToContainers_function("OnRep_LobbyName", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyName.html", ["on", "rep_", "lobby", "name"], "ARTSGameState");
addToContainers_function("OnRep_LobbyPlayers", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyPlayers.html", ["on", "rep_", "lobby", "players"], "ARTSGameState");
addToContainers_function("OnRep_LobbyPlayerTypes", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyPlayerTypes.html", ["on", "rep_", "lobby", "player", "types"], "ARTSGameState");
addToContainers_function("OnRep_LobbyCPUDifficulties", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyCPUDifficulties.html", ["on", "rep_", "lobby", "c", "p", "u", "difficulties"], "ARTSGameState");
addToContainers_function("OnRep_LobbyTeams", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyTeams.html", ["on", "rep_", "lobby", "teams"], "ARTSGameState");
addToContainers_function("OnRep_LobbyFactions", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyFactions.html", ["on", "rep_", "lobby", "factions"], "ARTSGameState");
addToContainers_function("OnRep_LobbyPlayerStarts", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyPlayerStarts.html", ["on", "rep_", "lobby", "player", "starts"], "ARTSGameState");
addToContainers_function("OnRep_LobbyStartingResources", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyStartingResources.html", ["on", "rep_", "lobby", "starting", "resources"], "ARTSGameState");
addToContainers_function("OnRep_LobbyDefeatCondition", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyDefeatCondition.html", ["on", "rep_", "lobby", "defeat", "condition"], "ARTSGameState");
addToContainers_function("OnRep_LobbyMap", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyMap.html", ["on", "rep_", "lobby", "map"], "ARTSGameState");
addToContainers_function("OnRep_LobbyAreSlotsLocked", "", "Docs/Classes/ARTSGameState/Functions/OnRep_LobbyAreSlotsLocked.html", ["on", "rep_", "lobby", "are", "slots", "locked"], "ARTSGameState");
addToContainers_function("IsInMatch", "Among other possible cases this is used by game mode when a player leaves to determine what kind of behavior to take", "Docs/Classes/ARTSGameState/Functions/IsInMatch.html", ["is", "in", "match"], "ARTSGameState");
addToContainers_function("AreLobbySlotsLocked", "", "Docs/Classes/ARTSGameState/Functions/AreLobbySlotsLocked.html", ["are", "lobby", "slots", "locked"], "ARTSGameState");
addToContainers_function("ChangeTeamInLobby", "For Human players", "Docs/Classes/ARTSGameState/Functions/ChangeTeamInLobby.html", ["change", "team", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeTeamInLobby", "For CPU players", "Docs/Classes/ARTSGameState/Functions/ChangeTeamInLobby_1.html", ["change", "team", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeFactionInLobby", "For human players", "Docs/Classes/ARTSGameState/Functions/ChangeFactionInLobby.html", ["change", "faction", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeFactionInLobby", "For CPU players", "Docs/Classes/ARTSGameState/Functions/ChangeFactionInLobby_1.html", ["change", "faction", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeStartingSpotInLobby", "", "Docs/Classes/ARTSGameState/Functions/ChangeStartingSpotInLobby.html", ["change", "starting", "spot", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeCPUDifficultyInLobby", "", "Docs/Classes/ARTSGameState/Functions/ChangeCPUDifficultyInLobby.html", ["change", "c", "p", "u", "difficulty", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeStartingResourcesInLobby", "", "Docs/Classes/ARTSGameState/Functions/ChangeStartingResourcesInLobby.html", ["change", "starting", "resources", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeDefeatConditionInLobby", "", "Docs/Classes/ARTSGameState/Functions/ChangeDefeatConditionInLobby.html", ["change", "defeat", "condition", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeMapInLobby", "", "Docs/Classes/ARTSGameState/Functions/ChangeMapInLobby.html", ["change", "map", "in", "lobby"], "ARTSGameState");
addToContainers_function("KickPlayerInLobby", "", "Docs/Classes/ARTSGameState/Functions/KickPlayerInLobby.html", ["kick", "player", "in", "lobby"], "ARTSGameState");
addToContainers_function("ChangeLockedSlotsStatusInLobby", "", "Docs/Classes/ARTSGameState/Functions/ChangeLockedSlotsStatusInLobby.html", ["change", "locked", "slots", "status", "in", "lobby"], "ARTSGameState");
addToContainers_function("SetTeamFromServer", "Functions to set what our team/faction is when we change it on client but is not allowed on server, one reason for this is slots are locked server-sdie but haven\'t repped to client yet", "Docs/Classes/ARTSGameState/Functions/SetTeamFromServer.html", ["set", "team", "from", "server"], "ARTSGameState");
addToContainers_function("SetFactionFromServer", "", "Docs/Classes/ARTSGameState/Functions/SetFactionFromServer.html", ["set", "faction", "from", "server"], "ARTSGameState");
addToContainers_function("SetStartingSpotFromServer", "", "Docs/Classes/ARTSGameState/Functions/SetStartingSpotFromServer.html", ["set", "starting", "spot", "from", "server"], "ARTSGameState");
addToContainers_function("TryOpenLobbySlot", "Make a lobby slot open for players to join if there is enough room in lobby @return - true if successful", "Docs/Classes/ARTSGameState/Functions/TryOpenLobbySlot.html", ["try", "open", "lobby", "slot"], "ARTSGameState");
addToContainers_function("CloseLobbySlot", "Make a lobby slot unable to be occupied", "Docs/Classes/ARTSGameState/Functions/CloseLobbySlot.html", ["close", "lobby", "slot"], "ARTSGameState");
addToContainers_function("Multicast_SendLobbyChatMessage", "Broadcast chat message to clients", "Docs/Classes/ARTSGameState/Functions/Multicast_SendLobbyChatMessage.html", ["multicast_", "send", "lobby", "chat", "message"], "ARTSGameState");
addToContainers_function("GetLobbyPlayerStart", "Given the index of a player in lobby get their player start", "Docs/Classes/ARTSGameState/Functions/GetLobbyPlayerStart.html", ["get", "lobby", "player", "start"], "ARTSGameState");
addToContainers_function("IsMatchInfoCorrect", "For debugging only. Compares match info against values in replicated arrays to ensure widgets had the right values displayed @param MatchInfo - match info struct to repped lobby arrays/variables to @param NewTeamMap - map to put array of teams through before checking. This is because lobby will change teams to lowest values possible, e.g. if players have teams 1 and 3 then they will be changed to 1 and 2 respecively @param bCheckPlayerStarts - whether to check if the player start locations are correct @return - error string or FString() if no error", "Docs/Classes/ARTSGameState/Functions/IsMatchInfoCorrect.html", ["is", "match", "info", "correct"], "ARTSGameState");
addToContainers_function("AreMatchInfoPlayerStartsCorrect", "For debugging only. Verify match info state is the same as game state state", "Docs/Classes/ARTSGameState/Functions/AreMatchInfoPlayerStartsCorrect.html", ["are", "match", "info", "player", "starts", "correct"], "ARTSGameState");
addToContainers_function("GetNumPCSetupAcksForPIE", "GM will poll this during PIE + skip main menu setup", "Docs/Classes/ARTSGameState/Functions/GetNumPCSetupAcksForPIE.html", ["get", "num", "p", "c", "setup", "acks", "for", "p", "i", "e"], "ARTSGameState");
addToContainers_function("GetNumPSSetupAcksForPIE", "Get number of acks received from ARTSPlayerState::Multicast_SetInitialValues", "Docs/Classes/ARTSGameState/Functions/GetNumPSSetupAcksForPIE.html", ["get", "num", "p", "s", "setup", "acks", "for", "p", "i", "e"], "ARTSGameState");
addToContainers_function("GetNumFinalSetupAcks", "Number of ARTSPlayerState::Client_FinalSetup have completed", "Docs/Classes/ARTSGameState/Functions/GetNumFinalSetupAcks.html", ["get", "num", "final", "setup", "acks"], "ARTSGameState");
addToContainers_function("GenerateUniquePlayerID", "==========================================================================================", "Docs/Classes/ARTSGameState/Functions/GenerateUniquePlayerID.html", ["generate", "unique", "player", "i", "d"], "ARTSGameState");
addToContainers_function("Multicast_LoadMatchMap", "Tell all players to load map for match", "Docs/Classes/ARTSGameState/Functions/Multicast_LoadMatchMap.html", ["multicast_", "load", "match", "map"], "ARTSGameState");
addToContainers_function("SetNumPlayersForMatch", "[Server] Set expected number of players + CPU players to know number of acks needed to start match @param InNumPlayers - total number of players including CPU players @param InNumHumanPlayers - number of human players only", "Docs/Classes/ARTSGameState/Functions/SetNumPlayersForMatch.html", ["set", "num", "players", "for", "match"], "ARTSGameState");
addToContainers_function("OnRep_MatchLoadingStatus", "", "Docs/Classes/ARTSGameState/Functions/OnRep_MatchLoadingStatus.html", ["on", "rep_", "match", "loading", "status"], "ARTSGameState");
addToContainers_function("StreamInMatchLevel", "Stream in the match level @param MapPath - the name of the map as it appears in editor. The full path isn\'t necessary, just the name, but it must be in the /Game/Maps/ directory", "Docs/Classes/ARTSGameState/Functions/StreamInMatchLevel.html", ["stream", "in", "match", "level"], "ARTSGameState");
addToContainers_function("OnLevelStreamedOut", "", "Docs/Classes/ARTSGameState/Functions/OnLevelStreamedOut.html", ["on", "level", "streamed", "out"], "ARTSGameState");
addToContainers_function("OnMatchLevelStreamedIn", "", "Docs/Classes/ARTSGameState/Functions/OnMatchLevelStreamedIn.html", ["on", "match", "level", "streamed", "in"], "ARTSGameState");
addToContainers_function("DestroyAllSelectablesOnMap", "Destroy all selectables on the currently loaded map that are not things that should be there at the start (so exclude things like resource spots)", "Docs/Classes/ARTSGameState/Functions/DestroyAllSelectablesOnMap.html", ["destroy", "all", "selectables", "on", "map"], "ARTSGameState");
addToContainers_function("CheckIfStreamingComplete", "Check if all levels streamed out and match level streamed in", "Docs/Classes/ARTSGameState/Functions/CheckIfStreamingComplete.html", ["check", "if", "streaming", "complete"], "ARTSGameState");
addToContainers_function("CheckIfLevelsLoadedAndPostLoginsComplete", "[Server] Check if all human players have connected, they have all acknowledged they have complete Client_PostLogin and they have all finished streaming in their map. If all true then move on to next part of match setup", "Docs/Classes/ARTSGameState/Functions/CheckIfLevelsLoadedAndPostLoginsC.html", ["check", "if", "levels", "loaded", "and", "post", "logins", "complete"], "ARTSGameState");
addToContainers_function("GetMatchLoadingStatus", "", "Docs/Classes/ARTSGameState/Functions/GetMatchLoadingStatus.html", ["get", "match", "loading", "status"], "ARTSGameState");
addToContainers_function("SetMatchLoadingStatus", "", "Docs/Classes/ARTSGameState/Functions/SetMatchLoadingStatus.html", ["set", "match", "loading", "status"], "ARTSGameState");
addToContainers_function("Server_AckPCSetupComplete", "Called by a player controller when they have completed their Client_SetupForMatch", "Docs/Classes/ARTSGameState/Functions/Server_AckPCSetupComplete.html", ["server_", "ack", "p", "c", "setup", "complete"], "ARTSGameState");
addToContainers_function("AckLevelStreamingComplete", "Called when all levels have streamed out and match level has streamed in", "Docs/Classes/ARTSGameState/Functions/AckLevelStreamingComplete.html", ["ack", "level", "streaming", "complete"], "ARTSGameState");
addToContainers_function("Server_AckInitialValuesReceived", "Called by player state when it has received all replicated info about a player state", "Docs/Classes/ARTSGameState/Functions/Server_AckInitialValuesReceived.html", ["server_", "ack", "initial", "values", "received"], "ARTSGameState");
addToContainers_function("Server_AckFinalSetupComplete", "", "Docs/Classes/ARTSGameState/Functions/Server_AckFinalSetupComplete.html", ["server_", "ack", "final", "setup", "complete"], "ARTSGameState");
addToContainers_function("StartMatch", "", "Docs/Classes/ARTSGameState/Functions/StartMatch.html", ["start", "match"], "ARTSGameState");
addToContainers_function("Multicast_OnMatchStarted", "Should only need to be called right before match begins", "Docs/Classes/ARTSGameState/Functions/Multicast_OnMatchStarted.html", ["multicast_", "on", "match", "started"], "ARTSGameState");
addToContainers_function("OnMatchStarted_Part2", "", "Docs/Classes/ARTSGameState/Functions/OnMatchStarted_Part2.html", ["on", "match", "started_", "part2"], "ARTSGameState");
addToContainers_function("StartMatchTimer", "Start the timer that says how long match has been going for", "Docs/Classes/ARTSGameState/Functions/StartMatchTimer.html", ["start", "match", "timer"], "ARTSGameState");
addToContainers_function("StartCPUPlayerBehavior", "Start all CPU player behavior @param StartingSelectables - maps player state to the selectables they started match with", "Docs/Classes/ARTSGameState/Functions/StartCPUPlayerBehavior.html", ["start", "c", "p", "u", "player", "behavior"], "ARTSGameState");
addToContainers_function("StartPIEMatch", "Called when a play in editor test has has fully setup and is about to start @param CPUStartingSelectables - maps each CPU player\'s player state to the selectables they are starting the match with", "Docs/Classes/ARTSGameState/Functions/StartPIEMatch.html", ["start", "p", "i", "e", "match"], "ARTSGameState");
addToContainers_function("HandleClientLoggingOutInMatch", "Called by game mode when a player logs out during a match", "Docs/Classes/ARTSGameState/Functions/HandleClientLoggingOutInMatch.html", ["handle", "client", "logging", "out", "in", "match"], "ARTSGameState");
addToContainers_function("DisconnectAllClients", "This is usually called when the host leaves the match either by choice or not. Tells all clients to disconnect gracefully", "Docs/Classes/ARTSGameState/Functions/DisconnectAllClients.html", ["disconnect", "all", "clients"], "ARTSGameState");
addToContainers_function("IsMatchNowOver", "Returns true if a winner has been found. @param DefeatedThisCheck - the player(s) that were previously not defeated but are now. @param OutWinningTeams - the team(s) that won. If Num() > 1 then it is a draw between some teams @return - true if match should end", "Docs/Classes/ARTSGameState/Functions/IsMatchNowOver.html", ["is", "match", "now", "over"], "ARTSGameState");
addToContainers_function("Multicast_OnPlayersDefeated", "Send notification that a player has been defeated. Will not be sent if match ends at same time @param NewlyDefeatedPlayers - players defeated on most recent game mode defeated player check", "Docs/Classes/ARTSGameState/Functions/Multicast_OnPlayersDefeated.html", ["multicast_", "on", "players", "defeated"], "ARTSGameState");
addToContainers_function("OnMatchWinnerFound", "Called by the game mode when it finds a winning team for the match. If param .Num() is greater than 1 then the match is considered a draw and all the teams in the array should get a \"draw\" result while the rest will get a \"lost\" result. Otherwise if the param .Num() is 1 then that team is the winner", "Docs/Classes/ARTSGameState/Functions/OnMatchWinnerFound.html", ["on", "match", "winner", "found"], "ARTSGameState");
addToContainers_function("Multicast_OnMatchWinnerFound", "Send notification that match has ended", "Docs/Classes/ARTSGameState/Functions/Multicast_OnMatchWinnerFound.html", ["multicast_", "on", "match", "winner", "found"], "ARTSGameState");
addToContainers_function("SendInMatchChatMessageToEveryone", "==========================================================================================", "Docs/Classes/ARTSGameState/Functions/SendInMatchChatMessageToEveryone.html", ["send", "in", "match", "chat", "message", "to", "everyone"], "ARTSGameState");
addToContainers_function("SendInMatchChatMessageToTeam", "", "Docs/Classes/ARTSGameState/Functions/SendInMatchChatMessageToTeam.html", ["send", "in", "match", "chat", "message", "to", "team"], "ARTSGameState");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/ARTSGameState/Functions/Delay).html", [], "ARTSGameState");
addToContainers_variable("AccumulatedTimeTowardsNextGameTick", "[Server] Amount of time towards incrementing TickCounter", "Docs/Classes/ARTSGameState/Variables/AccumulatedTimeTowardsNextGameTic.html", ["accumulated", "time", "towards", "next", "game", "tick"], "ARTSGameState");
addToContainers_variable("", "A counter that tracks number of ticks. To reduce bandwidth it is kept as 1 byte but can be increased if needed. It will overflow often and that is ok. This should never equal 255", "Docs/Classes/ARTSGameState/Variables/.html", [], "ARTSGameState");
addToContainers_variable("Server_SelectableResourceUsersThatRegen", "[Server] Stores a pointer to selectables that have a selectable resource that thas a regen rate != 0", "Docs/Classes/ARTSGameState/Variables/Server_SelectableResourceUsersTha.html", ["server_", "selectable", "resource", "users", "that", "regen"], "ARTSGameState");
addToContainers_variable("PreviousTickCounterValue", "[Client] The last value of TickCounter", "Docs/Classes/ARTSGameState/Variables/PreviousTickCounterValue.html", ["previous", "tick", "counter", "value"], "ARTSGameState");
addToContainers_variable("Client_SelectableResourceUsersThatRegen", "[Client] Stores pointers to selectables that regen a selectable resource over time", "Docs/Classes/ARTSGameState/Variables/Client_SelectableResourceUsersTha.html", ["client_", "selectable", "resource", "users", "that", "regen"], "ARTSGameState");
addToContainers_variable("TimeWhenMatchStarted", "[Server] The time when match started. Used to create a custom match timer", "Docs/Classes/ARTSGameState/Variables/TimeWhenMatchStarted.html", ["time", "when", "match", "started"], "ARTSGameState");
addToContainers_variable("NextUniquePlayerID", "The unique ID to assign to the next player. These will be assigned when loading a match from lobby or testing with PIE. APlayerState::PlayerId used to work but now always shows 0 in PIE", "Docs/Classes/ARTSGameState/Variables/NextUniquePlayerID.html", ["next", "unique", "player", "i", "d"], "ARTSGameState");
addToContainers_variable("LocalPlayersTeam", "The team the local player is on", "Docs/Classes/ARTSGameState/Variables/LocalPlayersTeam.html", ["local", "players", "team"], "ARTSGameState");
addToContainers_variable("NumTeams", "Number of different teams in the match excluding neutral", "Docs/Classes/ARTSGameState/Variables/NumTeams.html", ["num", "teams"], "ARTSGameState");
addToContainers_variable("", "Array of the player states of each team.", "Docs/Classes/ARTSGameState/Variables/_1.html", [], "ARTSGameState");
addToContainers_variable("", "Holds the FNames to appear in actor tags for each team. Use UStatics::TeamToArrayIndex to convert an ETeam to its index in this array", "Docs/Classes/ARTSGameState/Variables/_2.html", [], "ARTSGameState");
addToContainers_variable("", "Array of player controllers server-side only", "Docs/Classes/ARTSGameState/Variables/_3.html", [], "ARTSGameState");
addToContainers_variable("", "Array of all player states excluding observers, usable by both server and client", "Docs/Classes/ARTSGameState/Variables/_4.html", [], "ARTSGameState");
addToContainers_variable("", "Array of CPU player AI controllers", "Docs/Classes/ARTSGameState/Variables/_5.html", [], "ARTSGameState");
addToContainers_variable("", "Array of players that have not been defeated in the current match", "Docs/Classes/ARTSGameState/Variables/_6.html", [], "ARTSGameState");
addToContainers_variable("", "Array of player states for players that are match observers", "Docs/Classes/ARTSGameState/Variables/_7.html", [], "ARTSGameState");
addToContainers_variable("", "Maps RTS player ID (uint8) to the player", "Docs/Classes/ARTSGameState/Variables/_8.html", [], "ARTSGameState");
addToContainers_variable("", "Reference to fog of war manager once a match has started", "Docs/Classes/ARTSGameState/Variables/_9.html", [], "ARTSGameState");
addToContainers_variable("", "Modified on server only. Accessed by the fog of war manager on the server. Holds all info about the visibiliy of all selectables for all teams. Used to avoid sending updates over the wire when a selectables visibility has not changed", "Docs/Classes/ARTSGameState/Variables/_10.html", [], "ARTSGameState");
addToContainers_variable("", "Map elements that do not belong to a team but are selectable e.g. resource spots. Updated server-side only", "Docs/Classes/ARTSGameState/Variables/_11.html", [], "ARTSGameState");
addToContainers_variable("", "Actors that have been spawned into the world such as projectiles that follow the rules of fog of war", "Docs/Classes/ARTSGameState/Variables/_12.html", [], "ARTSGameState");
addToContainers_variable("", "Particle systems components that have been spawned into the world that follow the rules of fog of war", "Docs/Classes/ARTSGameState/Variables/_13.html", [], "ARTSGameState");
addToContainers_variable("", "Maps context action type to a actor that handles that context action", "Docs/Classes/ARTSGameState/Variables/_14.html", [], "ARTSGameState");
addToContainers_variable("", "Maps commander ability type to its effect object", "Docs/Classes/ARTSGameState/Variables/_15.html", [], "ARTSGameState");
addToContainers_variable("", "[Performance] Array of all inventory items that are in the world. Maintained on both server and clients. This just basically exists because it\'s faster iterating a TArray than a TMap. It was added here for the fog of war manager. We could remove this.", "Docs/Classes/ARTSGameState/Variables/_16.html", [], "ARTSGameState");
addToContainers_variable("", "Maps ID to item for it. Replica of InventoryItemsInWorldArray. Maintained on both server and clients.", "Docs/Classes/ARTSGameState/Variables/_17.html", [], "ARTSGameState");
addToContainers_variable("", "Maps team to their trace channel as a uint64. Key = static_cast<uint8>(Team).", "Docs/Classes/ARTSGameState/Variables/_18.html", [], "ARTSGameState");
addToContainers_variable("", "Maps team to array of every collision channel of their enemies. Key = static_cast<uint8>(Team).", "Docs/Classes/ARTSGameState/Variables/_19.html", [], "ARTSGameState");
addToContainers_variable("EnemyQueryParams", "Maps team to all the trace channels for their enemies Key = Statics::TeamToArrayIndex(Team)", "Docs/Classes/ARTSGameState/Variables/EnemyQueryParams.html", ["enemy", "query", "params"], "ARTSGameState");
addToContainers_variable("NeutralTraceChannel", "The trace channel for neutrals that want to be a part of queries. An example of neutrals that might want to use this is neutral item shops", "Docs/Classes/ARTSGameState/Variables/NeutralTraceChannel.html", ["neutral", "trace", "channel"], "ARTSGameState");
addToContainers_variable("AllTeamsQueryParams", "Query params to use when querying for all teams selectables", "Docs/Classes/ARTSGameState/Variables/AllTeamsQueryParams.html", ["all", "teams", "query", "params"], "ARTSGameState");
addToContainers_variable("AllTeams_Overlap", "Collsion struct that is set to overlap with all team channels and ignore everything else", "Docs/Classes/ARTSGameState/Variables/AllTeams_Overlap.html", ["all", "teams_", "overlap"], "ARTSGameState");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/ARTSGameState/Variables/_20.html", [], "ARTSGameState");
addToContainers_variable("", "List of resource spots on map. Should be populated when the map loads", "Docs/Classes/ARTSGameState/Variables/_21.html", [], "ARTSGameState");
addToContainers_variable("", "Array of all resource spots on map", "Docs/Classes/ARTSGameState/Variables/_22.html", [], "ARTSGameState");
addToContainers_variable("CurrentInventoryItemUniqueID", "The ID to give to the next inventory item in actor form that requests one", "Docs/Classes/ARTSGameState/Variables/CurrentInventoryItemUniqueID.html", ["current", "inventory", "item", "unique", "i", "d"], "ARTSGameState");
addToContainers_variable("", "Sounds in the world with EFogSoundRules::Dynamic", "Docs/Classes/ARTSGameState/Variables/_23.html", [], "ARTSGameState");
addToContainers_variable("", "Unheard AlwaysKnownOnceHeard sounds", "Docs/Classes/ARTSGameState/Variables/_24.html", [], "ARTSGameState");
addToContainers_variable("", "This will only contain the the sounds of hostiles", "Docs/Classes/ARTSGameState/Variables/_25.html", [], "ARTSGameState");
addToContainers_variable("", "True if playing game, false if in say lobby. Used to know whether to consider certain lobby-specific variables for replication", "Docs/Classes/ARTSGameState/Variables/_26.html", [], "ARTSGameState");
addToContainers_variable("", "Name of lobby", "Docs/Classes/ARTSGameState/Variables/_27.html", [], "ARTSGameState");
addToContainers_variable("", "Player states in lobby. Using this player name, team and faction can be derived", "Docs/Classes/ARTSGameState/Variables/_28.html", [], "ARTSGameState");
addToContainers_variable("", "Whether lobby players are human or CPU players. Also whether slot is open or closed", "Docs/Classes/ARTSGameState/Variables/_29.html", [], "ARTSGameState");
addToContainers_variable("", "Difficulty of CPU player if CPU player", "Docs/Classes/ARTSGameState/Variables/_30.html", [], "ARTSGameState");
addToContainers_variable("", "What team each person in lobby is", "Docs/Classes/ARTSGameState/Variables/_31.html", [], "ARTSGameState");
addToContainers_variable("", "What faction each person in lobby is", "Docs/Classes/ARTSGameState/Variables/_32.html", [], "ARTSGameState");
addToContainers_variable("", "What player start location each player in lobby has. -1 == unassigned", "Docs/Classes/ARTSGameState/Variables/_33.html", [], "ARTSGameState");
addToContainers_variable("", "Amount of resources to start match with. Value is the value currently set in lobby", "Docs/Classes/ARTSGameState/Variables/_34.html", [], "ARTSGameState");
addToContainers_variable("", "Defeat condition for match that is currently set in lobby", "Docs/Classes/ARTSGameState/Variables/_35.html", [], "ARTSGameState");
addToContainers_variable("", "Index of lobby map in some array", "Docs/Classes/ARTSGameState/Variables/_36.html", [], "ARTSGameState");
addToContainers_variable(":", "If true then no human players should be allowed to join lobby and players already in lobby are not allowed to change anything like their team, faction etc but can still leave. This gives host a chance to review the lobby state without sneaky changes before match starts", "Docs/Classes/ARTSGameState/Variables/:.html", [], "ARTSGameState");
addToContainers_variable("PIE_NumPCSetupCompleteAcks", "Counter for the number of PCs that have completed Client_SetupForMatch when testing with PIE and skip main menu", "Docs/Classes/ARTSGameState/Variables/PIE_NumPCSetupCompleteAcks.html", ["i", "e_", "num", "p", "c", "setup", "complete", "acks"], "ARTSGameState");
addToContainers_variable("PIE_NumPSSetInitialValuesAcks", "Number of acks received for PS::Multicast_SetInitialValues", "Docs/Classes/ARTSGameState/Variables/PIE_NumPSSetInitialValuesAcks.html", ["i", "e_", "num", "p", "s", "set", "initial", "values", "acks"], "ARTSGameState");
addToContainers_variable("", "The status of loading the match", "Docs/Classes/ARTSGameState/Variables/_37.html", [], "ARTSGameState");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSGameState/Variables/_38.html", [], "ARTSGameState");
addToContainers_variable("ExpectedNumHumanPlayers", "Number of human players expected to be in the match", "Docs/Classes/ARTSGameState/Variables/ExpectedNumHumanPlayers.html", ["expected", "num", "human", "players"], "ARTSGameState");
addToContainers_variable("ExpectedNumPlayers", "Expected number of players in match including CPU players", "Docs/Classes/ARTSGameState/Variables/ExpectedNumPlayers.html", ["expected", "num", "players"], "ARTSGameState");
addToContainers_variable("NumPCSetupAcks", "Number of match player controllers that have completed their Client_SetupForMatch", "Docs/Classes/ARTSGameState/Variables/NumPCSetupAcks.html", ["num", "p", "c", "setup", "acks"], "ARTSGameState");
addToContainers_variable("NumLoadedLevelAcks", "Number of players that have finished streaming in the level", "Docs/Classes/ARTSGameState/Variables/NumLoadedLevelAcks.html", ["num", "loaded", "level", "acks"], "ARTSGameState");
addToContainers_variable("NumInitialValueAcks", "Number of player states that have had their inital values set up. This should be larger than the number of players because it is one ack for every player state", "Docs/Classes/ARTSGameState/Variables/NumInitialValueAcks.html", ["num", "initial", "value", "acks"], "ARTSGameState");
addToContainers_variable("NumFinalSetupAcks", "Number of acks from AMyPlayerState::Client_FinalSetup", "Docs/Classes/ARTSGameState/Variables/NumFinalSetupAcks.html", ["num", "final", "setup", "acks"], "ARTSGameState");
addToContainers_variable("NumLevelsStreamedOut", "", "Docs/Classes/ARTSGameState/Variables/NumLevelsStreamedOut.html", ["num", "levels", "streamed", "out"], "ARTSGameState");
addToContainers_variable("bHasStreamedInMatchLevel", "", "Docs/Classes/ARTSGameState/Variables/bHasStreamedInMatchLevel.html", ["has", "streamed", "in", "match", "level"], "ARTSGameState");
addToContainers_variable("bHasAckedPostLoginsAndMaps", "True if check above was successful. Only here for debugging purposes", "Docs/Classes/ARTSGameState/Variables/bHasAckedPostLoginsAndMaps.html", ["has", "acked", "post", "logins", "and", "maps"], "ARTSGameState");
addToContainers_class("URTSLocalPlayer", "Here for one reason: - to pass data such as password to the server when connecting to an online session How to set custom ULocalPlayer class: edit DefaultEngine.ini", "Docs/Classes/URTSLocalPlayer/URTSLocalPlayer.html", ["r", "t", "s", "local", "player"], "");
addToContainers_function("URTSLocalPlayer", "", "Docs/Classes/URTSLocalPlayer/Functions/URTSLocalPlayer.html", ["r", "t", "s", "local", "player"], "URTSLocalPlayer");
addToContainers_function("GetGameLoginOptions", "Return the string to send into AGameModeBase::PreLogin which in turn calls AGameSession::ApproveLogin. This is here for passwords and for setting our desired faction when we join a networked game", "Docs/Classes/URTSLocalPlayer/Functions/GetGameLoginOptions.html", ["get", "game", "login", "options"], "URTSLocalPlayer");
addToContainers_function("SetPassword", "Store the password to send to server when trying to join", "Docs/Classes/URTSLocalPlayer/Functions/SetPassword.html", ["set", "password"], "URTSLocalPlayer");
addToContainers_variable("", "Password to send to server when trying to connect to networked lobby", "Docs/Classes/URTSLocalPlayer/Variables/.html", [], "URTSLocalPlayer");
addToContainers_struct("FCtrlGroupList", "Array that holds what selectables are in a ctrl group", "Docs/Structs/FCtrlGroupList/FCtrlGroupList.html", ["ctrl", "group", "list"], "");
addToContainers_function("GetArray", "", "Docs/Structs/FCtrlGroupList/Functions/GetArray.html", ["get", "array"], "FCtrlGroupList");
addToContainers_function("GetNum", "Get number of selectables in control group", "Docs/Structs/FCtrlGroupList/Functions/GetNum.html", ["get", "num"], "FCtrlGroupList");
addToContainers_variable("", "Holds the selectable in the ctrl group. Not quite there yet in using selectable IDs because it is hard to know if an actor was destroyed, then their ID was assigned to a newly built selectable and now that selectable will be in the ctrl group even though it shouldn\'t be", "Docs/Structs/FCtrlGroupList/Variables/.html", [], "FCtrlGroupList");
addToContainers_struct("FTryBindActionResult", "The result of trying to change a key binding", "Docs/Structs/FTryBindActionResult/FTryBindActionResult.html", ["try", "bind", "action", "result"], "");
addToContainers_function("FTryBindActionResult", "", "Docs/Structs/FTryBindActionResult/Functions/FTryBindActionResult.html", ["try", "bind", "action", "result"], "FTryBindActionResult");
addToContainers_variable("KeyWeAreTryingToAssign", "", "Docs/Structs/FTryBindActionResult/Variables/KeyWeAreTryingToAssign.html", ["key", "we", "are", "trying", "to", "assign"], "FTryBindActionResult");
addToContainers_variable("AlreadyBoundToKey_Axis", "If this != None then an axis is already bound to key. Also if binding was successful then the axis that gets unbinded can be stored here, or it will be None if no axis was unbinded. This will be None if we\'re just changing the key for the same axis e.g. MoveCameraForward is changing from W to T and there\'s nothing becoming unbound", "Docs/Structs/FTryBindActionResult/Variables/AlreadyBoundToKey_Axis.html", ["already", "bound", "to", "key_", "axis"], "FTryBindActionResult");
addToContainers_variable("AlreadyBoundToKey_Action[8]", "Same as above except for action mappings instead. If it was an axis binding we were trying to bind then it will unmap every modifier combination with that key so there can be up to 8 actions unmapped from a rebinding", "Docs/Structs/FTryBindActionResult/Variables/AlreadyBoundToKey_Action[8].html", ["already", "bound", "to", "key_", "action[8]"], "FTryBindActionResult");
addToContainers_variable("Warning", "If this != None then something else was the problem", "Docs/Structs/FTryBindActionResult/Variables/Warning.html", [], "FTryBindActionResult");
addToContainers_class("ARTSPlayerController", "All input handled through this class, well at least non-widget input. Both players and obsevers use this class", "Docs/Classes/ARTSPlayerController/ARTSPlayerController.html", ["r", "t", "s", "player", "controller"], "");
addToContainers_function("ARTSPlayerController", "", "Docs/Classes/ARTSPlayerController/Functions/ARTSPlayerController.html", ["r", "t", "s", "player", "controller"], "ARTSPlayerController");
addToContainers_function("SetPlayer", "", "Docs/Classes/ARTSPlayerController/Functions/SetPlayer.html", ["set", "player"], "ARTSPlayerController");
addToContainers_function("BeginPlay", "", "Docs/Classes/ARTSPlayerController/Functions/BeginPlay.html", ["begin", "play"], "ARTSPlayerController");
addToContainers_function("Tick", "", "Docs/Classes/ARTSPlayerController/Functions/Tick.html", [], "ARTSPlayerController");
addToContainers_function("SetupInputComponent", "", "Docs/Classes/ARTSPlayerController/Functions/SetupInputComponent.html", ["setup", "input", "component"], "ARTSPlayerController");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/ARTSPlayerController/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_HUDPersistentPanel_Build", "Mouse events for trying to build something from HUD persistet panel", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_HUDPersistentPanel_B.html", ["on", "l", "m", "b", "pressed_", "h", "u", "d", "persistent", "panel_", "build"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_HUDPersistentPanel_Build", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_HUDPersistentPanel_.html", ["on", "l", "m", "b", "released_", "h", "u", "d", "persistent", "panel_", "build"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_HUDPersistentPanel_Build", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_HUDPersistentPanel_B.html", ["on", "r", "m", "b", "pressed_", "h", "u", "d", "persistent", "panel_", "build"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_HUDPersistentPanel_Build", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_HUDPersistentPanel_.html", ["on", "r", "m", "b", "released_", "h", "u", "d", "persistent", "panel_", "build"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_HUDPersistentPanel_SwitchTab", "Mouse events for the buttons on the HUD persistent panel to switch between tabs", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_HUDPersistentPanel_S.html", ["on", "l", "m", "b", "pressed_", "h", "u", "d", "persistent", "panel_", "switch", "tab"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_HUDPersistentPanel_SwitchTab", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_HUDPersistentPanel__1.html", ["on", "l", "m", "b", "released_", "h", "u", "d", "persistent", "panel_", "switch", "tab"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_HUDPersistentPanel_SwitchTab", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_HUDPersistentPanel_S.html", ["on", "r", "m", "b", "pressed_", "h", "u", "d", "persistent", "panel_", "switch", "tab"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_HUDPersistentPanel_SwitchTab", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_HUDPersistentPanel__1.html", ["on", "r", "m", "b", "released_", "h", "u", "d", "persistent", "panel_", "switch", "tab"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PrimarySelected_ActionBar", "Mouse events for primary selected\'s action bar", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PrimarySelected_Acti.html", ["on", "l", "m", "b", "pressed_", "primary", "selected_", "action", "bar"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PrimarySelected_ActionBar", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PrimarySelected_Act.html", ["on", "l", "m", "b", "released_", "primary", "selected_", "action", "bar"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PrimarySelected_ActionBar", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PrimarySelected_Acti.html", ["on", "r", "m", "b", "pressed_", "primary", "selected_", "action", "bar"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PrimarySelected_ActionBar", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PrimarySelected_Act.html", ["on", "r", "m", "b", "released_", "primary", "selected_", "action", "bar"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PrimarySelected_InventoryButton", "Mouse events for inventory of primary selected", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PrimarySelected_Inve.html", ["on", "l", "m", "b", "pressed_", "primary", "selected_", "inventory", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PrimarySelected_InventoryButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PrimarySelected_Inv.html", ["on", "l", "m", "b", "released_", "primary", "selected_", "inventory", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PrimarySelected_InventoryButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PrimarySelected_Inve.html", ["on", "r", "m", "b", "pressed_", "primary", "selected_", "inventory", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PrimarySelected_InventoryButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PrimarySelected_Inv.html", ["on", "r", "m", "b", "released_", "primary", "selected_", "inventory", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PrimarySelected_ShopButton", "Mouse events for items in shop", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PrimarySelected_Shop.html", ["on", "l", "m", "b", "pressed_", "primary", "selected_", "shop", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PrimarySelected_ShopButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PrimarySelected_Sho.html", ["on", "l", "m", "b", "released_", "primary", "selected_", "shop", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PrimarySelected_ShopButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PrimarySelected_Shop.html", ["on", "r", "m", "b", "pressed_", "primary", "selected_", "shop", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PrimarySelected_ShopButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PrimarySelected_Sho.html", ["on", "r", "m", "b", "released_", "primary", "selected_", "shop", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PrimarySelected_ProductionQueueSlot", "Mouse events for a selectable\'s production queue", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PrimarySelected_Prod.html", ["on", "l", "m", "b", "pressed_", "primary", "selected_", "production", "queue", "slot"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PrimarySelected_ProductionQueueSlot", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PrimarySelected_Pro.html", ["on", "l", "m", "b", "released_", "primary", "selected_", "production", "queue", "slot"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PrimarySelected_ProductionQueueSlot", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PrimarySelected_Prod.html", ["on", "r", "m", "b", "pressed_", "primary", "selected_", "production", "queue", "slot"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PrimarySelected_ProductionQueueSlot", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PrimarySelected_Pro.html", ["on", "r", "m", "b", "released_", "primary", "selected_", "production", "queue", "slot"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PauseGame", "Pause game button", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PauseGame.html", ["on", "l", "m", "b", "pressed_", "pause", "game"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PauseGame", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PauseGame.html", ["on", "l", "m", "b", "released_", "pause", "game"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PauseGame", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PauseGame.html", ["on", "r", "m", "b", "pressed_", "pause", "game"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PauseGame", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PauseGame.html", ["on", "r", "m", "b", "released_", "pause", "game"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_CommanderSkillTreeShowButton", "Button that shows/hides commander skill tree", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_CommanderSkillTreeSh.html", ["on", "l", "m", "b", "pressed_", "commander", "skill", "tree", "show", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_CommanderSkillTreeShowButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_CommanderSkillTreeS.html", ["on", "l", "m", "b", "released_", "commander", "skill", "tree", "show", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_CommanderSkillTreeShowButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_CommanderSkillTreeSh.html", ["on", "r", "m", "b", "pressed_", "commander", "skill", "tree", "show", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_CommanderSkillTreeShowButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_CommanderSkillTreeS.html", ["on", "r", "m", "b", "released_", "commander", "skill", "tree", "show", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_GlobalSkillsPanelButton", "Buttons on the global skills panel", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_GlobalSkillsPanelBut.html", ["on", "l", "m", "b", "pressed_", "global", "skills", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_GlobalSkillsPanelButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_GlobalSkillsPanelBu.html", ["on", "l", "m", "b", "released_", "global", "skills", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_GlobalSkillsPanelButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_GlobalSkillsPanelBut.html", ["on", "r", "m", "b", "pressed_", "global", "skills", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_GlobalSkillsPanelButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_GlobalSkillsPanelBu.html", ["on", "r", "m", "b", "released_", "global", "skills", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PlayerTargetingPanelButton", "Buttons on the player targeting panel", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PlayerTargetingPanel.html", ["on", "l", "m", "b", "pressed_", "player", "targeting", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PlayerTargetingPanelButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PlayerTargetingPane.html", ["on", "l", "m", "b", "released_", "player", "targeting", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PlayerTargetingPanelButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PlayerTargetingPanel.html", ["on", "r", "m", "b", "pressed_", "player", "targeting", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PlayerTargetingPanelButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PlayerTargetingPane.html", ["on", "r", "m", "b", "released_", "player", "targeting", "panel", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_HidePlayerTargetingPanel", "Button that hides the player targeting panel effectively cancelling the ability", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_HidePlayerTargetingP.html", ["on", "l", "m", "b", "pressed_", "hide", "player", "targeting", "panel"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_HidePlayerTargetingPanel", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_HidePlayerTargeting.html", ["on", "l", "m", "b", "released_", "hide", "player", "targeting", "panel"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_HidePlayerTargetingPanel", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_HidePlayerTargetingP.html", ["on", "r", "m", "b", "pressed_", "hide", "player", "targeting", "panel"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_HidePlayerTargetingPanel", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_HidePlayerTargeting.html", ["on", "r", "m", "b", "released_", "hide", "player", "targeting", "panel"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_CommanderSkillTreeNode", "Buttons for abilities on the commander\'s skill tree", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_CommanderSkillTreeNo.html", ["on", "l", "m", "b", "pressed_", "commander", "skill", "tree", "node"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_CommanderSkillTreeNode", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_CommanderSkillTreeN.html", ["on", "l", "m", "b", "released_", "commander", "skill", "tree", "node"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_CommanderSkillTreeNode", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_CommanderSkillTreeNo.html", ["on", "r", "m", "b", "pressed_", "commander", "skill", "tree", "node"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_CommanderSkillTreeNode", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_CommanderSkillTreeN.html", ["on", "r", "m", "b", "released_", "commander", "skill", "tree", "node"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_UnloadSingleGarrisonUnit", "Button to unload a single unit in a garrison", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_UnloadSingleGarrison.html", ["on", "l", "m", "b", "pressed_", "unload", "single", "garrison", "unit"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_UnloadSingleGarrisonUnit", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_UnloadSingleGarriso.html", ["on", "l", "m", "b", "released_", "unload", "single", "garrison", "unit"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_UnloadSingleGarrisonUnit", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_UnloadSingleGarrison.html", ["on", "r", "m", "b", "pressed_", "unload", "single", "garrison", "unit"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_UnloadSingleGarrisonUnit", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_UnloadSingleGarriso.html", ["on", "r", "m", "b", "released_", "unload", "single", "garrison", "unit"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_UnloadGarrisonButton", "Button for unload all units in garrison", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_UnloadGarrisonButton.html", ["on", "l", "m", "b", "pressed_", "unload", "garrison", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_UnloadGarrisonButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_UnloadGarrisonButto.html", ["on", "l", "m", "b", "released_", "unload", "garrison", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_UnloadGarrisonButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_UnloadGarrisonButton.html", ["on", "r", "m", "b", "pressed_", "unload", "garrison", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_UnloadGarrisonButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_UnloadGarrisonButto.html", ["on", "r", "m", "b", "released_", "unload", "garrison", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PauseMenu_Resume", "\"Resume play\" button on pause menu", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PauseMenu_Resume.html", ["on", "l", "m", "b", "pressed_", "pause", "menu_", "resume"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PauseMenu_Resume", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PauseMenu_Resume.html", ["on", "l", "m", "b", "released_", "pause", "menu_", "resume"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PauseMenu_Resume", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PauseMenu_Resume.html", ["on", "r", "m", "b", "pressed_", "pause", "menu_", "resume"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PauseMenu_Resume", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PauseMenu_Resume.html", ["on", "r", "m", "b", "released_", "pause", "menu_", "resume"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PauseMenu_ShowSettingsMenu", "Show settings menu button on pause menu", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PauseMenu_ShowSettin.html", ["on", "l", "m", "b", "pressed_", "pause", "menu_", "show", "settings", "menu"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PauseMenu_ShowSettingsMenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PauseMenu_ShowSetti.html", ["on", "l", "m", "b", "released_", "pause", "menu_", "show", "settings", "menu"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PauseMenu_ShowSettingsMenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PauseMenu_ShowSettin.html", ["on", "r", "m", "b", "pressed_", "pause", "menu_", "show", "settings", "menu"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PauseMenu_ShowSettingsMenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PauseMenu_ShowSetti.html", ["on", "r", "m", "b", "released_", "pause", "menu_", "show", "settings", "menu"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PauseMenu_ReturnToMainMenu", "\"Return to main menu\" button on pause menu", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PauseMenu_ReturnToMa.html", ["on", "l", "m", "b", "pressed_", "pause", "menu_", "return", "to", "main", "menu"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PauseMenu_ReturnToMainMenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PauseMenu_ReturnToM.html", ["on", "l", "m", "b", "released_", "pause", "menu_", "return", "to", "main", "menu"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PauseMenu_ReturnToMainMenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PauseMenu_ReturnToMa.html", ["on", "r", "m", "b", "pressed_", "pause", "menu_", "return", "to", "main", "menu"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PauseMenu_ReturnToMainMenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PauseMenu_ReturnToM.html", ["on", "r", "m", "b", "released_", "pause", "menu_", "return", "to", "main", "menu"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_PauseMenu_ReturnToOperatingSystem", "\"Return to operating system\" button on pause menu", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_PauseMenu_ReturnToOp.html", ["on", "l", "m", "b", "pressed_", "pause", "menu_", "return", "to", "operating", "system"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_PauseMenu_ReturnToOperatingSystem", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_PauseMenu_ReturnToO.html", ["on", "l", "m", "b", "released_", "pause", "menu_", "return", "to", "operating", "system"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_PauseMenu_ReturnToOperatingSystem", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_PauseMenu_ReturnToOp.html", ["on", "r", "m", "b", "pressed_", "pause", "menu_", "return", "to", "operating", "system"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_PauseMenu_ReturnToOperatingSystem", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_PauseMenu_ReturnToO.html", ["on", "r", "m", "b", "released_", "pause", "menu_", "return", "to", "operating", "system"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_ConfirmationWidgetYesButton", "Confirmation widgets", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_ConfirmationWidgetYe.html", ["on", "l", "m", "b", "pressed_", "confirmation", "widget", "yes", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_ConfirmationWidgetYesButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_ConfirmationWidgetY.html", ["on", "l", "m", "b", "released_", "confirmation", "widget", "yes", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_ConfirmationWidgetYesButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_ConfirmationWidgetYe.html", ["on", "r", "m", "b", "pressed_", "confirmation", "widget", "yes", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_ConfirmationWidgetYesButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_ConfirmationWidgetY.html", ["on", "r", "m", "b", "released_", "confirmation", "widget", "yes", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_ConfirmationWidgetNoButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_ConfirmationWidgetNo.html", ["on", "l", "m", "b", "pressed_", "confirmation", "widget", "no", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_ConfirmationWidgetNoButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_ConfirmationWidgetN.html", ["on", "l", "m", "b", "released_", "confirmation", "widget", "no", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_ConfirmationWidgetNoButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_ConfirmationWidgetNo.html", ["on", "r", "m", "b", "pressed_", "confirmation", "widget", "no", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_ConfirmationWidgetNoButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_ConfirmationWidgetN.html", ["on", "r", "m", "b", "released_", "confirmation", "widget", "no", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsMenu_SaveChangesAndReturnButton", "Buttons to leave the settings menu", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsMenu_SaveCha.html", ["on", "l", "m", "b", "pressed_", "settings", "menu_", "save", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsMenu_SaveChangesAndReturnButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsMenu_SaveCh.html", ["on", "l", "m", "b", "released_", "settings", "menu_", "save", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsMenu_SaveChangesAndReturnButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsMenu_SaveCha.html", ["on", "r", "m", "b", "pressed_", "settings", "menu_", "save", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsMenu_SaveChangesAndReturnButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsMenu_SaveCh.html", ["on", "r", "m", "b", "released_", "settings", "menu_", "save", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsMenu_DiscardChangesAndReturnButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsMenu_Discard.html", ["on", "l", "m", "b", "pressed_", "settings", "menu_", "discard", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsMenu_DiscardChangesAndReturnButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsMenu_Discar.html", ["on", "l", "m", "b", "released_", "settings", "menu_", "discard", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsMenu_DiscardChangesAndReturnButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsMenu_Discard.html", ["on", "r", "m", "b", "pressed_", "settings", "menu_", "discard", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsMenu_DiscardChangesAndReturnButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsMenu_Discar.html", ["on", "r", "m", "b", "released_", "settings", "menu_", "discard", "changes", "and", "return", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsMenu_ResetToDefaults", "Button to reset all settings back to defaults", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsMenu_ResetTo.html", ["on", "l", "m", "b", "pressed_", "settings", "menu_", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsMenu_ResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsMenu_ResetT.html", ["on", "l", "m", "b", "released_", "settings", "menu_", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsMenu_ResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsMenu_ResetTo.html", ["on", "r", "m", "b", "pressed_", "settings", "menu_", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsMenu_ResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsMenu_ResetT.html", ["on", "r", "m", "b", "released_", "settings", "menu_", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsMenu_ConfirmResetToDefaults", "Settings menu confirmation widget asking whether to reset to defaults", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsMenu_Confirm.html", ["on", "l", "m", "b", "pressed_", "settings", "menu_", "confirm", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsMenu_ConfirmResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsMenu_Confir.html", ["on", "l", "m", "b", "released_", "settings", "menu_", "confirm", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsMenu_ConfirmResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsMenu_Confirm.html", ["on", "r", "m", "b", "pressed_", "settings", "menu_", "confirm", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsMenu_ConfirmResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsMenu_Confir.html", ["on", "r", "m", "b", "released_", "settings", "menu_", "confirm", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsMenu_CancelResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsMenu_CancelR.html", ["on", "l", "m", "b", "pressed_", "settings", "menu_", "cancel", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsMenu_CancelResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsMenu_Cancel.html", ["on", "l", "m", "b", "released_", "settings", "menu_", "cancel", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsMenu_CancelResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsMenu_CancelR.html", ["on", "r", "m", "b", "pressed_", "settings", "menu_", "cancel", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsMenu_CancelResetToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsMenu_Cancel.html", ["on", "r", "m", "b", "released_", "settings", "menu_", "cancel", "reset", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsConfirmationWidget_Confirm", "The confirmation widget on the settings menu asking whether to save or discard changes", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsConfirmation.html", ["on", "l", "m", "b", "pressed_", "settings", "confirmation", "widget_", "confirm"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsConfirmationWidget_Confirm", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsConfirmatio.html", ["on", "l", "m", "b", "released_", "settings", "confirmation", "widget_", "confirm"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsConfirmationWidget_Confirm", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsConfirmation.html", ["on", "r", "m", "b", "pressed_", "settings", "confirmation", "widget_", "confirm"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsConfirmationWidget_Confirm", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsConfirmatio.html", ["on", "r", "m", "b", "released_", "settings", "confirmation", "widget_", "confirm"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsConfirmationWidget_Discard", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsConfirmation_1.html", ["on", "l", "m", "b", "pressed_", "settings", "confirmation", "widget_", "discard"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsConfirmationWidget_Discard", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsConfirmatio_1.html", ["on", "l", "m", "b", "released_", "settings", "confirmation", "widget_", "discard"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsConfirmationWidget_Discard", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsConfirmation_1.html", ["on", "r", "m", "b", "pressed_", "settings", "confirmation", "widget_", "discard"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsConfirmationWidget_Discard", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsConfirmatio_1.html", ["on", "r", "m", "b", "released_", "settings", "confirmation", "widget_", "discard"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SettingsConfirmationWidget_Cancel", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SettingsConfirmation_2.html", ["on", "l", "m", "b", "pressed_", "settings", "confirmation", "widget_", "cancel"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SettingsConfirmationWidget_Cancel", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SettingsConfirmatio_2.html", ["on", "l", "m", "b", "released_", "settings", "confirmation", "widget_", "cancel"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SettingsConfirmationWidget_Cancel", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SettingsConfirmation_2.html", ["on", "r", "m", "b", "pressed_", "settings", "confirmation", "widget_", "cancel"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SettingsConfirmationWidget_Cancel", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SettingsConfirmatio_2.html", ["on", "r", "m", "b", "released_", "settings", "confirmation", "widget_", "cancel"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_SwitchSettingsSubmenu", "Buttons to switch between submenus in the settings menu", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_SwitchSettingsSubmen.html", ["on", "l", "m", "b", "pressed_", "switch", "settings", "submenu"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_SwitchSettingsSubmenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_SwitchSettingsSubme.html", ["on", "l", "m", "b", "released_", "switch", "settings", "submenu"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_SwitchSettingsSubmenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_SwitchSettingsSubmen.html", ["on", "r", "m", "b", "pressed_", "switch", "settings", "submenu"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_SwitchSettingsSubmenu", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_SwitchSettingsSubme.html", ["on", "r", "m", "b", "released_", "switch", "settings", "submenu"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_AdjustVideoSettingLeft", "Buttons to adjust video settings", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_AdjustVideoSettingLe.html", ["on", "l", "m", "b", "pressed_", "adjust", "video", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_AdjustVideoSettingLeft", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_AdjustVideoSettingL.html", ["on", "l", "m", "b", "released_", "adjust", "video", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_AdjustVideoSettingLeft", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_AdjustVideoSettingLe.html", ["on", "r", "m", "b", "pressed_", "adjust", "video", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_AdjustVideoSettingLeft", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_AdjustVideoSettingL.html", ["on", "r", "m", "b", "released_", "adjust", "video", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_AdjustVideoSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_AdjustVideoSettingRi.html", ["on", "l", "m", "b", "pressed_", "adjust", "video", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_AdjustVideoSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_AdjustVideoSettingR.html", ["on", "l", "m", "b", "released_", "adjust", "video", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_AdjustVideoSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_AdjustVideoSettingRi.html", ["on", "r", "m", "b", "pressed_", "adjust", "video", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_AdjustVideoSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_AdjustVideoSettingR.html", ["on", "r", "m", "b", "released_", "adjust", "video", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_DecreaseAudioQuality", "Buttons to change the audio quality", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_DecreaseAudioQuality.html", ["on", "l", "m", "b", "pressed_", "decrease", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_DecreaseAudioQuality", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_DecreaseAudioQualit.html", ["on", "l", "m", "b", "released_", "decrease", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_DecreaseAudioQuality", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_DecreaseAudioQuality.html", ["on", "r", "m", "b", "pressed_", "decrease", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_DecreaseAudioQuality", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_DecreaseAudioQualit.html", ["on", "r", "m", "b", "released_", "decrease", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_IncreaseAudioQuality", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_IncreaseAudioQuality.html", ["on", "l", "m", "b", "pressed_", "increase", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_IncreaseAudioQuality", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_IncreaseAudioQualit.html", ["on", "l", "m", "b", "released_", "increase", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_IncreaseAudioQuality", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_IncreaseAudioQuality.html", ["on", "r", "m", "b", "pressed_", "increase", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_IncreaseAudioQuality", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_IncreaseAudioQualit.html", ["on", "r", "m", "b", "released_", "increase", "audio", "quality"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_DecreaseVolumeButton", "Buttons to change the volume of a sound class", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_DecreaseVolumeButton.html", ["on", "l", "m", "b", "pressed_", "decrease", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_DecreaseVolumeButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_DecreaseVolumeButto.html", ["on", "l", "m", "b", "released_", "decrease", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_DecreaseVolumeButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_DecreaseVolumeButton.html", ["on", "r", "m", "b", "pressed_", "decrease", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_DecreaseVolumeButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_DecreaseVolumeButto.html", ["on", "r", "m", "b", "released_", "decrease", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_IncreaseVolumeButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_IncreaseVolumeButton.html", ["on", "l", "m", "b", "pressed_", "increase", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_IncreaseVolumeButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_IncreaseVolumeButto.html", ["on", "l", "m", "b", "released_", "increase", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_IncreaseVolumeButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_IncreaseVolumeButton.html", ["on", "r", "m", "b", "pressed_", "increase", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_IncreaseVolumeButton", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_IncreaseVolumeButto.html", ["on", "r", "m", "b", "released_", "increase", "volume", "button"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_AdjustBoolControlSettingLeft", "Buttons to adjust a boolean control setting", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_AdjustBoolControlSet.html", ["on", "l", "m", "b", "pressed_", "adjust", "bool", "control", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_AdjustBoolControlSettingLeft", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_AdjustBoolControlSe.html", ["on", "l", "m", "b", "released_", "adjust", "bool", "control", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_AdjustBoolControlSettingLeft", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_AdjustBoolControlSet.html", ["on", "r", "m", "b", "pressed_", "adjust", "bool", "control", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_AdjustBoolControlSettingLeft", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_AdjustBoolControlSe.html", ["on", "r", "m", "b", "released_", "adjust", "bool", "control", "setting", "left"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_AdjustBoolControlSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_AdjustBoolControlSet_1.html", ["on", "l", "m", "b", "pressed_", "adjust", "bool", "control", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_AdjustBoolControlSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_AdjustBoolControlSe_1.html", ["on", "l", "m", "b", "released_", "adjust", "bool", "control", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_AdjustBoolControlSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_AdjustBoolControlSet_1.html", ["on", "r", "m", "b", "pressed_", "adjust", "bool", "control", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_AdjustBoolControlSettingRight", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_AdjustBoolControlSe_1.html", ["on", "r", "m", "b", "released_", "adjust", "bool", "control", "setting", "right"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_DecreaseControlSetting_Float", "Buttons to adjust a float control setting", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_DecreaseControlSetti.html", ["on", "l", "m", "b", "pressed_", "decrease", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_DecreaseControlSetting_Float", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_DecreaseControlSett.html", ["on", "l", "m", "b", "released_", "decrease", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_DecreaseControlSetting_Float", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_DecreaseControlSetti.html", ["on", "r", "m", "b", "pressed_", "decrease", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_DecreaseControlSetting_Float", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_DecreaseControlSett.html", ["on", "r", "m", "b", "released_", "decrease", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_IncreaseControlSetting_Float", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_IncreaseControlSetti.html", ["on", "l", "m", "b", "pressed_", "increase", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_IncreaseControlSetting_Float", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_IncreaseControlSett.html", ["on", "l", "m", "b", "released_", "increase", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_IncreaseControlSetting_Float", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_IncreaseControlSetti.html", ["on", "r", "m", "b", "pressed_", "increase", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_IncreaseControlSetting_Float", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_IncreaseControlSett.html", ["on", "r", "m", "b", "released_", "increase", "control", "setting_", "float"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_RemapKey", "The buttons in the key bindings menu to change the mapping", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_RemapKey.html", ["on", "l", "m", "b", "pressed_", "remap", "key"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_RemapKey", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_RemapKey.html", ["on", "l", "m", "b", "released_", "remap", "key"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_RemapKey", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_RemapKey.html", ["on", "r", "m", "b", "pressed_", "remap", "key"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_RemapKey", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_RemapKey.html", ["on", "r", "m", "b", "released_", "remap", "key"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_RebindingCollisionWidgetConfirm", "The buttons to confirm the players wants to rebind a key", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_RebindingCollisionWi.html", ["on", "l", "m", "b", "pressed_", "rebinding", "collision", "widget", "confirm"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_RebindingCollisionWidgetConfirm", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_RebindingCollisionW.html", ["on", "l", "m", "b", "released_", "rebinding", "collision", "widget", "confirm"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_RebindingCollisionWidgetConfirm", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_RebindingCollisionWi.html", ["on", "r", "m", "b", "pressed_", "rebinding", "collision", "widget", "confirm"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_RebindingCollisionWidgetConfirm", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_RebindingCollisionW.html", ["on", "r", "m", "b", "released_", "rebinding", "collision", "widget", "confirm"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_RebindingCollisionWidgetCancel", "The buttons to cancel rebinding a key", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_RebindingCollisionWi_1.html", ["on", "l", "m", "b", "pressed_", "rebinding", "collision", "widget", "cancel"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_RebindingCollisionWidgetCancel", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_RebindingCollisionW_1.html", ["on", "l", "m", "b", "released_", "rebinding", "collision", "widget", "cancel"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_RebindingCollisionWidgetCancel", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_RebindingCollisionWi_1.html", ["on", "r", "m", "b", "pressed_", "rebinding", "collision", "widget", "cancel"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_RebindingCollisionWidgetCancel", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_RebindingCollisionW_1.html", ["on", "r", "m", "b", "released_", "rebinding", "collision", "widget", "cancel"], "ARTSPlayerController");
addToContainers_function("OnLMBPressed_ResetKeyBindingsToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBPressed_ResetKeyBindingsToDe.html", ["on", "l", "m", "b", "pressed_", "reset", "key", "bindings", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_ResetKeyBindingsToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_ResetKeyBindingsToD.html", ["on", "l", "m", "b", "released_", "reset", "key", "bindings", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBPressed_ResetKeyBindingsToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBPressed_ResetKeyBindingsToDe.html", ["on", "r", "m", "b", "pressed_", "reset", "key", "bindings", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_ResetKeyBindingsToDefaults", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_ResetKeyBindingsToD.html", ["on", "r", "m", "b", "released_", "reset", "key", "bindings", "to", "defaults"], "ARTSPlayerController");
addToContainers_function("ListenForKeyRemappingInputEvents", "Call this to have the next key events rebind an action", "Docs/Classes/ARTSPlayerController/Functions/ListenForKeyRemappingInputEvents.html", ["listen", "for", "key", "remapping", "input", "events"], "ARTSPlayerController");
addToContainers_function("ListenForKeyRemappingInputEvents", "", "Docs/Classes/ARTSPlayerController/Functions/ListenForKeyRemappingInputEvents_1.html", ["listen", "for", "key", "remapping", "input", "events"], "ARTSPlayerController");
addToContainers_function("CancelPendingKeyRebind", "", "Docs/Classes/ARTSPlayerController/Functions/CancelPendingKeyRebind.html", ["cancel", "pending", "key", "rebind"], "ARTSPlayerController");
addToContainers_function("OnCancelPendingKeyRebindButtonHeld", "", "Docs/Classes/ARTSPlayerController/Functions/OnCancelPendingKeyRebindButtonHel.html", ["on", "cancel", "pending", "key", "rebind", "button", "held"], "ARTSPlayerController");
addToContainers_function("InputKey", "Handles a key press. Remember it will be called for both the key down and key up events", "Docs/Classes/ARTSPlayerController/Functions/InputKey.html", ["input", "key"], "ARTSPlayerController");
addToContainers_function("PendingKeyRebind_UpdatePressedModifierFlags", "On key event update what modifiers are being pressed. @return - true if Key is a modifier key and EventType == IE_Pressed or IE_Released", "Docs/Classes/ARTSPlayerController/Functions/PendingKeyRebind_UpdatePressedMod.html", ["pending", "key", "rebind_", "update", "pressed", "modifier", "flags"], "ARTSPlayerController");
addToContainers_function("TryRebindAction", "Attempt to rebind an action to a new key, then notify a UI element if one is set. Will apply the change but does not write it to .ini file. @param Key - the key player wants to assign to Action @param bForce - if true the key binding will happen for sure even if there is a conflicting binding already set except if it would cause an unrebindable action to become unbinded. The previous action will become unbound. If false then if there is a conflicting mapping already then the change will not take place. @return - true if successful", "Docs/Classes/ARTSPlayerController/Functions/TryRebindAction.html", ["try", "rebind", "action"], "ARTSPlayerController");
addToContainers_function("TryRebindAction", "", "Docs/Classes/ARTSPlayerController/Functions/TryRebindAction_1.html", ["try", "rebind", "action"], "ARTSPlayerController");
addToContainers_function("DoOnEveryLMBPress", "", "Docs/Classes/ARTSPlayerController/Functions/DoOnEveryLMBPress.html", ["do", "on", "every", "l", "m", "b", "press"], "ARTSPlayerController");
addToContainers_function("DoOnEveryLMBRelease", "", "Docs/Classes/ARTSPlayerController/Functions/DoOnEveryLMBRelease.html", ["do", "on", "every", "l", "m", "b", "release"], "ARTSPlayerController");
addToContainers_function("PendingKeyRebind_GetAllKeyModifiers", "Return what modifier keys are pressed, taking into account both left and right ones. Only call this if a key bind is pending. Otherwise query PlayerInput instead", "Docs/Classes/ARTSPlayerController/Functions/PendingKeyRebind_GetAllKeyModifie.html", ["pending", "key", "rebind_", "get", "all", "key", "modifiers"], "ARTSPlayerController");
addToContainers_function("Input_LMBPressed", "All of these are made UFUNCTION because of the nasty bug described near the top of KeyMappings.h", "Docs/Classes/ARTSPlayerController/Functions/Input_LMBPressed.html", ["input_", "l", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_function("Input_LMBReleased", "", "Docs/Classes/ARTSPlayerController/Functions/Input_LMBReleased.html", ["input_", "l", "m", "b", "released"], "ARTSPlayerController");
addToContainers_function("Input_RMBPressed", "", "Docs/Classes/ARTSPlayerController/Functions/Input_RMBPressed.html", ["input_", "r", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_function("Input_RMBReleased", "", "Docs/Classes/ARTSPlayerController/Functions/Input_RMBReleased.html", ["input_", "r", "m", "b", "released"], "ARTSPlayerController");
addToContainers_function("Axis_MoveCameraRight", "", "Docs/Classes/ARTSPlayerController/Functions/Axis_MoveCameraRight.html", ["axis_", "move", "camera", "right"], "ARTSPlayerController");
addToContainers_function("Axis_MoveCameraForward", "", "Docs/Classes/ARTSPlayerController/Functions/Axis_MoveCameraForward.html", ["axis_", "move", "camera", "forward"], "ARTSPlayerController");
addToContainers_function("Input_ZoomCameraIn", "", "Docs/Classes/ARTSPlayerController/Functions/Input_ZoomCameraIn.html", ["input_", "zoom", "camera", "in"], "ARTSPlayerController");
addToContainers_function("Input_ZoomCameraOut", "", "Docs/Classes/ARTSPlayerController/Functions/Input_ZoomCameraOut.html", ["input_", "zoom", "camera", "out"], "ARTSPlayerController");
addToContainers_function("Input_EnableCameraFreeLook", "", "Docs/Classes/ARTSPlayerController/Functions/Input_EnableCameraFreeLook.html", ["input_", "enable", "camera", "free", "look"], "ARTSPlayerController");
addToContainers_function("Input_DisableCameraFreeLook", "", "Docs/Classes/ARTSPlayerController/Functions/Input_DisableCameraFreeLook.html", ["input_", "disable", "camera", "free", "look"], "ARTSPlayerController");
addToContainers_function("Input_ResetCameraRotationToOriginal", "", "Docs/Classes/ARTSPlayerController/Functions/Input_ResetCameraRotationToOrigin.html", ["input_", "reset", "camera", "rotation", "to", "original"], "ARTSPlayerController");
addToContainers_function("Input_ResetCameraZoomToOriginal", "", "Docs/Classes/ARTSPlayerController/Functions/Input_ResetCameraZoomToOriginal.html", ["input_", "reset", "camera", "zoom", "to", "original"], "ARTSPlayerController");
addToContainers_function("Input_ResetCameraRotationAndZoomToOriginal", "", "Docs/Classes/ARTSPlayerController/Functions/Input_ResetCameraRotationAndZoomT.html", ["input_", "reset", "camera", "rotation", "and", "zoom", "to", "original"], "ARTSPlayerController");
addToContainers_function("Input_OpenTeamChat", "", "Docs/Classes/ARTSPlayerController/Functions/Input_OpenTeamChat.html", ["input_", "open", "team", "chat"], "ARTSPlayerController");
addToContainers_function("Input_OpenAllChat", "", "Docs/Classes/ARTSPlayerController/Functions/Input_OpenAllChat.html", ["input_", "open", "all", "chat"], "ARTSPlayerController");
addToContainers_function("Input_Cancel", "", "Docs/Classes/ARTSPlayerController/Functions/Input_Cancel.html", ["input_", "cancel"], "ARTSPlayerController");
addToContainers_function("Input_QuitGame", "", "Docs/Classes/ARTSPlayerController/Functions/Input_QuitGame.html", ["input_", "quit", "game"], "ARTSPlayerController");
addToContainers_function("Input_ToggleDevelopmentCheatWidget", "", "Docs/Classes/ARTSPlayerController/Functions/Input_ToggleDevelopmentCheatWidge.html", ["input_", "toggle", "development", "cheat", "widget"], "ARTSPlayerController");
addToContainers_function("Input_OpenCommanderSkillTree", "", "Docs/Classes/ARTSPlayerController/Functions/Input_OpenCommanderSkillTree.html", ["input_", "open", "commander", "skill", "tree"], "ARTSPlayerController");
addToContainers_function("Input_CloseCommanderSkillTree", "", "Docs/Classes/ARTSPlayerController/Functions/Input_CloseCommanderSkillTree.html", ["input_", "close", "commander", "skill", "tree"], "ARTSPlayerController");
addToContainers_function("Input_ToggleCommanderSkillTree", "", "Docs/Classes/ARTSPlayerController/Functions/Input_ToggleCommanderSkillTree.html", ["input_", "toggle", "commander", "skill", "tree"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_0", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre.html", ["input_", "assign", "control", "group", "button", "pressed_0"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_1", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_1.html", ["input_", "assign", "control", "group", "button", "pressed_1"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_2", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_2.html", ["input_", "assign", "control", "group", "button", "pressed_2"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_3", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_3.html", ["input_", "assign", "control", "group", "button", "pressed_3"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_4", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_4.html", ["input_", "assign", "control", "group", "button", "pressed_4"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_5", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_5.html", ["input_", "assign", "control", "group", "button", "pressed_5"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_6", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_6.html", ["input_", "assign", "control", "group", "button", "pressed_6"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_7", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_7.html", ["input_", "assign", "control", "group", "button", "pressed_7"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_8", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_8.html", ["input_", "assign", "control", "group", "button", "pressed_8"], "ARTSPlayerController");
addToContainers_function("Input_AssignControlGroupButtonPressed_9", "", "Docs/Classes/ARTSPlayerController/Functions/Input_AssignControlGroupButtonPre_9.html", ["input_", "assign", "control", "group", "button", "pressed_9"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_0", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre.html", ["input_", "select", "control", "group", "button", "pressed_0"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_1", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_1.html", ["input_", "select", "control", "group", "button", "pressed_1"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_2", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_2.html", ["input_", "select", "control", "group", "button", "pressed_2"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_3", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_3.html", ["input_", "select", "control", "group", "button", "pressed_3"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_4", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_4.html", ["input_", "select", "control", "group", "button", "pressed_4"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_5", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_5.html", ["input_", "select", "control", "group", "button", "pressed_5"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_6", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_6.html", ["input_", "select", "control", "group", "button", "pressed_6"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_7", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_7.html", ["input_", "select", "control", "group", "button", "pressed_7"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_8", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_8.html", ["input_", "select", "control", "group", "button", "pressed_8"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonPressed_9", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonPre_9.html", ["input_", "select", "control", "group", "button", "pressed_9"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_0", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel.html", ["input_", "select", "control", "group", "button", "released_0"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_1", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_1.html", ["input_", "select", "control", "group", "button", "released_1"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_2", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_2.html", ["input_", "select", "control", "group", "button", "released_2"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_3", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_3.html", ["input_", "select", "control", "group", "button", "released_3"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_4", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_4.html", ["input_", "select", "control", "group", "button", "released_4"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_5", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_5.html", ["input_", "select", "control", "group", "button", "released_5"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_6", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_6.html", ["input_", "select", "control", "group", "button", "released_6"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_7", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_7.html", ["input_", "select", "control", "group", "button", "released_7"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_8", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_8.html", ["input_", "select", "control", "group", "button", "released_8"], "ARTSPlayerController");
addToContainers_function("Input_SelectControlGroupButtonReleased_9", "", "Docs/Classes/ARTSPlayerController/Functions/Input_SelectControlGroupButtonRel_9.html", ["input_", "select", "control", "group", "button", "released_9"], "ARTSPlayerController");
addToContainers_function("On_Mouse_Move_X", "Called when mouse moves left/right", "Docs/Classes/ARTSPlayerController/Functions/On_Mouse_Move_X.html", ["on_", "mouse_", "move_", "x"], "ARTSPlayerController");
addToContainers_function("On_Mouse_Move_Y", "Called when mouse moves up/down", "Docs/Classes/ARTSPlayerController/Functions/On_Mouse_Move_Y.html", ["on_", "mouse_", "move_", "y"], "ARTSPlayerController");
addToContainers_function("GetCameraMovementMultiplierDueToZoom", "Get how much to multiply movement due to the zoom amount of the camera", "Docs/Classes/ARTSPlayerController/Functions/GetCameraMovementMultiplierDueToZ.html", ["get", "camera", "movement", "multiplier", "due", "to", "zoom"], "ARTSPlayerController");
addToContainers_function("MoveCameraForward", "", "Docs/Classes/ARTSPlayerController/Functions/MoveCameraForward.html", ["move", "camera", "forward"], "ARTSPlayerController");
addToContainers_function("MoveCameraRight", "", "Docs/Classes/ARTSPlayerController/Functions/MoveCameraRight.html", ["move", "camera", "right"], "ARTSPlayerController");
addToContainers_function("MoveIfAtEdgeOfScreen", "Check if at edge of screen for camera movement and do movement", "Docs/Classes/ARTSPlayerController/Functions/MoveIfAtEdgeOfScreen.html", ["move", "if", "at", "edge", "of", "screen"], "ARTSPlayerController");
addToContainers_function("ShouldResetCameraRotation", "Functions to say whether on a reset button press whether camera needs to be reset or not", "Docs/Classes/ARTSPlayerController/Functions/ShouldResetCameraRotation.html", ["should", "reset", "camera", "rotation"], "ARTSPlayerController");
addToContainers_function("ShouldResetCameraZoom", "", "Docs/Classes/ARTSPlayerController/Functions/ShouldResetCameraZoom.html", ["should", "reset", "camera", "zoom"], "ARTSPlayerController");
addToContainers_function("OnAssignControlGroupButtonPressed", "", "Docs/Classes/ARTSPlayerController/Functions/OnAssignControlGroupButtonPressed.html", ["on", "assign", "control", "group", "button", "pressed"], "ARTSPlayerController");
addToContainers_function("OnSelectControlGroupButtonPressed", "Here cause double press is measured from when button is released to when it is pressed next time", "Docs/Classes/ARTSPlayerController/Functions/OnSelectControlGroupButtonPressed.html", ["on", "select", "control", "group", "button", "pressed"], "ARTSPlayerController");
addToContainers_function("OnSelectControlGroupButtonReleased", "", "Docs/Classes/ARTSPlayerController/Functions/OnSelectControlGroupButtonRelease.html", ["on", "select", "control", "group", "button", "released"], "ARTSPlayerController");
addToContainers_function("OnSelectControlGroupButtonSinglePress", "", "Docs/Classes/ARTSPlayerController/Functions/OnSelectControlGroupButtonSingleP.html", ["on", "select", "control", "group", "button", "single", "press"], "ARTSPlayerController");
addToContainers_function("OnSelectControlGroupButtonDoublePress", "", "Docs/Classes/ARTSPlayerController/Functions/OnSelectControlGroupButtonDoubleP.html", ["on", "select", "control", "group", "button", "double", "press"], "ARTSPlayerController");
addToContainers_function("CreateControlGroup", "Causes the current selection to become a ctrl group, like when ctrl + a number button is pressed", "Docs/Classes/ARTSPlayerController/Functions/CreateControlGroup.html", ["create", "control", "group"], "ARTSPlayerController");
addToContainers_function("SelectControlGroup", "Change the selection to that of a ctrl group @return - true if player\'s selection changed", "Docs/Classes/ARTSPlayerController/Functions/SelectControlGroup.html", ["select", "control", "group"], "ARTSPlayerController");
addToContainers_function("SnapViewToControlGroup", "Sets the camera view to a ctrl group, does not actually select them. Could change it though. @return - true if ctrl group contained at least one selectable that was valid and alive and camera position was set to some location", "Docs/Classes/ARTSPlayerController/Functions/SnapViewToControlGroup.html", ["snap", "view", "to", "control", "group"], "ARTSPlayerController");
addToContainers_function("GetNumCtrlGroupMembers", "Return the number of members in a ctrl group, but does not account for whether they are still valid/alive or not @param CtrlGroupNumber - ctrl group to query. Range = 0 ... 9", "Docs/Classes/ARTSPlayerController/Functions/GetNumCtrlGroupMembers.html", ["get", "num", "ctrl", "group", "members"], "ARTSPlayerController");
addToContainers_function("InitCtrlGroups", "Begin play type setup function to add key/value pairs to CtrlGroups.", "Docs/Classes/ARTSPlayerController/Functions/InitCtrlGroups.html", ["init", "ctrl", "groups"], "ARTSPlayerController");
addToContainers_function("WasDoublePress", "Call when pressing a button if you would like to know if it was a double click/press/whatever. Will update fields to store whether future presses are also doubles. Instead of using this func an alternative would be using a custom UPlayerInput class and overridding InputKey but I do not know if setting custom UPlayerInput class is possible. Double press time is from the moment button was released to when it is pressed again @param ControlGroupButtonPressed - the ctrl group key that was pressed, range: 0 ... 9 @return - whether it was a double click/press/whatever or not", "Docs/Classes/ARTSPlayerController/Functions/WasDoublePress.html", ["was", "double", "press"], "ARTSPlayerController");
addToContainers_function("RotateGhost", "Calculate the new rotation of ghost when rotating it with LMB held down, then rotate it @param DeltaTime - deltatime from tick", "Docs/Classes/ARTSPlayerController/Functions/RotateGhost.html", ["rotate", "ghost"], "ARTSPlayerController");
addToContainers_function("GhostRotStandard_GetAngleFalloffMultiplier", "@param ScreenSpaceAngleWithGhost - angle mouse makes with ghost (all screenspace). 0 = 3 o\'clock, 90 = 12 o\'clock, etc", "Docs/Classes/ARTSPlayerController/Functions/GhostRotStandard_GetAngleFalloffM.html", ["ghost", "rot", "standard_", "get", "angle", "falloff", "multiplier"], "ARTSPlayerController");
addToContainers_function("GhostRotStandard_GetDistanceFalloffMultiplier", "@param Distance2D - screen space distance from ghost to mouse", "Docs/Classes/ARTSPlayerController/Functions/GhostRotStandard_GetDistanceFallo.html", ["ghost", "rot", "standard_", "get", "distance", "falloff", "multiplier"], "ARTSPlayerController");
addToContainers_function("GhostRotStandard_AssignNeutralDirectionYawRot", "Assigns rot when mouse moves in a direction that isn\'t expected to rotate ghost", "Docs/Classes/ARTSPlayerController/Functions/GhostRotStandard_AssignNeutralDir.html", ["ghost", "rot", "standard_", "assign", "neutral", "direction", "yaw", "rot"], "ARTSPlayerController");
addToContainers_function("GhostRotStandard_AssignYawRotForClockwiseTypeMouseMovement", "Function to assign rotation when mouse moves in such a way that it is expected to apply rotation in the clockwise direction", "Docs/Classes/ARTSPlayerController/Functions/GhostRotStandard_AssignYawRotForC.html", ["ghost", "rot", "standard_", "assign", "yaw", "rot", "for", "clockwise", "type", "mouse", "movement"], "ARTSPlayerController");
addToContainers_function("GhostRotStandard_AssignYawRotForCounterClockwiseTypeMouseMovement", "Opposite of AssignYawRotForClockwiseTypeMouseMovement", "Docs/Classes/ARTSPlayerController/Functions/GhostRotStandard_AssignYawRotForC_1.html", ["ghost", "rot", "standard_", "assign", "yaw", "rot", "for", "counter", "clockwise", "type", "mouse", "movement"], "ARTSPlayerController");
addToContainers_function("GetMouseCoords", "Return screen space coords of mouse as a FVector2D @return mouse screen space coords", "Docs/Classes/ARTSPlayerController/Functions/GetMouseCoords.html", ["get", "mouse", "coords"], "ARTSPlayerController");
addToContainers_function("SpawnGhostBuilding", "Spawn a ghost building and attach it to the mouse cursor for placement in the world @param BuildingType - the type of building to spawn @param InstigatorsID - Only relveant if the building is being built from a context menu. The selectable ID of the selectable wanting to build this building. Can be ignored if building from the HUD persistent panel and 0 will be the signal for that", "Docs/Classes/ARTSPlayerController/Functions/SpawnGhostBuilding.html", ["spawn", "ghost", "building"], "ARTSPlayerController");
addToContainers_function("IsHoveringUIElement", "Whether the mouse is hovering over a UI element. Currently this will only return true if the UI element is a UMyButton. But I would like to change this to include pretty much all of the HUD. But I think this would require making more custom slate widgets", "Docs/Classes/ARTSPlayerController/Functions/IsHoveringUIElement.html", ["is", "hovering", "u", "i", "element"], "ARTSPlayerController");
addToContainers_function("WasMouseClick", "Call when mouse button is released. Returns true if the mouse hasn\'t moved around the screen enough for it to still be considered a click @return - True if a mouse click happened", "Docs/Classes/ARTSPlayerController/Functions/WasMouseClick.html", ["was", "mouse", "click"], "ARTSPlayerController");
addToContainers_function("LineTraceUnderMouse", "Line trace under mouse and put hit result into HitResult. This version should only be called during tick. Tbh if it returns false there will be problems @param Channel the channel to test for hits on @return trace hit something within MaxLineTraceDistance", "Docs/Classes/ARTSPlayerController/Functions/LineTraceUnderMouse.html", ["line", "trace", "under", "mouse"], "ARTSPlayerController");
addToContainers_function("LineTraceUnderMouse", "Line trace under mouse and put hit result into HitResult. Tbh if it returns false there will be problems @param Channel the channel to test for hits on @param Hit - the hit result to store the result in @return trace hit something within MaxLineTraceDistance", "Docs/Classes/ARTSPlayerController/Functions/LineTraceUnderMouse_1.html", ["line", "trace", "under", "mouse"], "ARTSPlayerController");
addToContainers_function("MoveGhostBuilding", "Move ghost building to location of mouse", "Docs/Classes/ARTSPlayerController/Functions/MoveGhostBuilding.html", ["move", "ghost", "building"], "ARTSPlayerController");
addToContainers_function("CanPlaceBuilding", "Check if it\'s ok to build ghost building. Checks literally everything there is to check @param BuildingType - type of building @param InstigatorsID - will be 0 if being built from the HUD persistent panel. Otherwise this will be the selectable ID of the selectable that wants to build this building @param Location - location @param Rotation - rotation @param bShowHUDMessages - whether to try and show a message on the HUD if any of the conditions fail @param OutProducer - actor that will be used to produce building, or null if no actors queue can be used to produce the desired building. Currently is always a ABuilding but was left as an AActor in case in future actors other than buildings can produce stuff @param OutQueueType - type of queue that will be used to produce building @return - true if it is ok", "Docs/Classes/ARTSPlayerController/Functions/CanPlaceBuilding.html", ["can", "place", "building"], "ARTSPlayerController");
addToContainers_function("CanPlaceBuilding", "Clients version. Doesn\'t care about what actor is picked for production since it will be checked on server anyway", "Docs/Classes/ARTSPlayerController/Functions/CanPlaceBuilding_1.html", ["can", "place", "building"], "ARTSPlayerController");
addToContainers_function("Server_PlaceBuilding", "Remove ghost building and place a real one. @param BuildingType - the type of building to start building @param Location - the location @param Rotation - the rotation @param ConstructionInstigatorID - selectable ID of selectable wanting to place this building, but only relevant if being placed from a context menu. Should be 0 otherwise", "Docs/Classes/ARTSPlayerController/Functions/Server_PlaceBuilding.html", ["server_", "place", "building"], "ARTSPlayerController");
addToContainers_function("Client_OnPlaceBuildingSuccess", "Called when the server successfully places a building. If its build method is BuildsInTab the second function will remove it from the array of complete queues in PS. 3 functions to reduce on bandwidth @param ProducingBuilding - only relevant if placing a building using BuildInTab. The building that produced the other building @param BuildingType - the type of building that was placed, not the producer. Not required but helps HUD efficiently find button this action effects", "Docs/Classes/ARTSPlayerController/Functions/Client_OnPlaceBuildingSuccess.html", ["client_", "on", "place", "building", "success"], "ARTSPlayerController");
addToContainers_function("Client_OnBuildsInTabPlaceBuildingSuccess", "", "Docs/Classes/ARTSPlayerController/Functions/Client_OnBuildsInTabPlaceBuilding.html", ["client_", "on", "builds", "in", "tab", "place", "building", "success"], "ARTSPlayerController");
addToContainers_function("CancelGhost", "Cancel placing ghost e.g. by right clicking", "Docs/Classes/ARTSPlayerController/Functions/CancelGhost.html", ["cancel", "ghost"], "ARTSPlayerController");
addToContainers_function("GetWidget", "Get a reference to the widget of a certain type. May be constructed and setup if one has not already been created. Will check if BP is set in faction info before using one in game instance", "Docs/Classes/ARTSPlayerController/Functions/GetWidget.html", ["get", "widget"], "ARTSPlayerController");
addToContainers_function("ShowWidget", "Show a match widget. We use AddToViewport and RemoveFromViewport to toggle widget visibility. Will construct widget if it has not already been constructed @param WidgetType - type of widget to add to viewport @param bAddToWidgetHistory - whether to add to WidgetHistory. False is mainly there just for HUD @param PreviousWidgetVisibility - the visibility to set to the widget last in widget history before this was called @param bCallSetupWidget - whether to calle UInGameWidgetBase::SetupWidget on the widget to be shown @return - reference to widget", "Docs/Classes/ARTSPlayerController/Functions/ShowWidget.html", ["show", "widget"], "ARTSPlayerController");
addToContainers_function("ShowPreviousWidget", "Return to previous widget in widget history by removing current from viewport. Will hide current widget if WidgetHistory.Num() == 1. If WidgetHistory.Num() == 0 crash @return - widget that becomes the current as aresult of this", "Docs/Classes/ARTSPlayerController/Functions/ShowPreviousWidget.html", ["show", "previous", "widget"], "ARTSPlayerController");
addToContainers_function("HideWidget", "Hide a widget and remove it from widget history", "Docs/Classes/ARTSPlayerController/Functions/HideWidget.html", ["hide", "widget"], "ARTSPlayerController");
addToContainers_function("IsWidgetBlueprintSet", "Check if an optional widget has its blueprint set from editor so we know whether we should try showing it or not", "Docs/Classes/ARTSPlayerController/Functions/IsWidgetBlueprintSet.html", ["is", "widget", "blueprint", "set"], "ARTSPlayerController");
addToContainers_function("GetWidgetZOrder", "Get the ZOrder for a match widget", "Docs/Classes/ARTSPlayerController/Functions/GetWidgetZOrder.html", ["get", "widget", "z", "order"], "ARTSPlayerController");
addToContainers_function("GetBuildingIndex", "", "Docs/Classes/ARTSPlayerController/Functions/GetBuildingIndex.html", ["get", "building", "index"], "ARTSPlayerController");
addToContainers_function("OnRep_PlayerState", "", "Docs/Classes/ARTSPlayerController/Functions/OnRep_PlayerState.html", ["on", "rep_", "player", "state"], "ARTSPlayerController");
addToContainers_function("SetupReferences", "", "Docs/Classes/ARTSPlayerController/Functions/SetupReferences.html", ["setup", "references"], "ARTSPlayerController");
addToContainers_function("AssignGI", "", "Docs/Classes/ARTSPlayerController/Functions/AssignGI.html", ["assign", "g", "i"], "ARTSPlayerController");
addToContainers_function("AssignPS", "", "Docs/Classes/ARTSPlayerController/Functions/AssignPS.html", ["assign", "p", "s"], "ARTSPlayerController");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay before calling function", "Docs/Classes/ARTSPlayerController/Functions/Delay).html", [], "ARTSPlayerController");
addToContainers_function("IsContextActionPending", "This is used to get an idea of what mouse clicks should do. Returns true if a context action is pending e.g. a ghost is being placed or an attack move command is about to be given.", "Docs/Classes/ARTSPlayerController/Functions/IsContextActionPending.html", ["is", "context", "action", "pending"], "ARTSPlayerController");
addToContainers_function("IsGlobalSkillsPanelAbilityPending", "Return true if an ability form the global skills panel is pending. This includes abilities that target a selectable, the ground, both or a player", "Docs/Classes/ARTSPlayerController/Functions/IsGlobalSkillsPanelAbilityPending.html", ["is", "global", "skills", "panel", "ability", "pending"], "ARTSPlayerController");
addToContainers_function("SendMouseLocToMarqueeHUD", "Sends info for the marquee rectangle to HUD", "Docs/Classes/ARTSPlayerController/Functions/SendMouseLocToMarqueeHUD.html", ["send", "mouse", "loc", "to", "marquee", "h", "u", "d"], "ARTSPlayerController");
addToContainers_function("OnLMBReleased_WasUIButtonClicked", "Return whether we think a click has happened on a UI button", "Docs/Classes/ARTSPlayerController/Functions/OnLMBReleased_WasUIButtonClicked.html", ["on", "l", "m", "b", "released_", "was", "u", "i", "button", "clicked"], "ARTSPlayerController");
addToContainers_function("OnRMBReleased_WasUIButtonClicked", "", "Docs/Classes/ARTSPlayerController/Functions/OnRMBReleased_WasUIButtonClicked.html", ["on", "r", "m", "b", "released_", "was", "u", "i", "button", "clicked"], "ARTSPlayerController");
addToContainers_function("IsASelectable", "Returns true if actor implements Selectable", "Docs/Classes/ARTSPlayerController/Functions/IsASelectable.html", ["is", "a", "selectable"], "ARTSPlayerController");
addToContainers_function("SetSpringArmTargetArmLength", "", "Docs/Classes/ARTSPlayerController/Functions/SetSpringArmTargetArmLength.html", ["set", "spring", "arm", "target", "arm", "length"], "ARTSPlayerController");
addToContainers_function("AdjustWorldWidgetLocations", "Adjust the location of world widgets because the camera\'s zoom amount changed", "Docs/Classes/ARTSPlayerController/Functions/AdjustWorldWidgetLocations.html", ["adjust", "world", "widget", "locations"], "ARTSPlayerController");
addToContainers_function("SingleSelect", "Called when mouse has been pressed and released near the same location. Will select a slectable. Assumes param is valid. @param SelectedActor - the object that was under the mouse both when it was pressed and released", "Docs/Classes/ARTSPlayerController/Functions/SingleSelect.html", ["single", "select"], "ARTSPlayerController");
addToContainers_function("ShouldPlaySelectionSound", "Returns whether a selectable selection sound should be played. Usually called when the players selection changes", "Docs/Classes/ARTSPlayerController/Functions/ShouldPlaySelectionSound.html", ["should", "play", "selection", "sound"], "ARTSPlayerController");
addToContainers_function("PlaySelectablesSelectionSound", "Plays CurrentSelected\'s selectable selection sound", "Docs/Classes/ARTSPlayerController/Functions/PlaySelectablesSelectionSound.html", ["play", "selectables", "selection", "sound"], "ARTSPlayerController");
addToContainers_function("ShouldPlayMoveCommandSound", "Returns whether to play a commands sound", "Docs/Classes/ARTSPlayerController/Functions/ShouldPlayMoveCommandSound.html", ["should", "play", "move", "command", "sound"], "ARTSPlayerController");
addToContainers_function("PlayMoveCommandSound", "Play sound for when selectable is given move command", "Docs/Classes/ARTSPlayerController/Functions/PlayMoveCommandSound.html", ["play", "move", "command", "sound"], "ARTSPlayerController");
addToContainers_function("ShouldPlayCommandSound", "Whether should play context command sound", "Docs/Classes/ARTSPlayerController/Functions/ShouldPlayCommandSound.html", ["should", "play", "command", "sound"], "ARTSPlayerController");
addToContainers_function("PlayCommandSound", "Play command sound for context commnand", "Docs/Classes/ARTSPlayerController/Functions/PlayCommandSound.html", ["play", "command", "sound"], "ARTSPlayerController");
addToContainers_function("ShouldPlayChangeRallyPointSound", "Return whether should play sound when setting unit rally point for a building", "Docs/Classes/ARTSPlayerController/Functions/ShouldPlayChangeRallyPointSound.html", ["should", "play", "change", "rally", "point", "sound"], "ARTSPlayerController");
addToContainers_function("PlayChangeRallyPointSound", "Play sound for setting unit rally point for building", "Docs/Classes/ARTSPlayerController/Functions/PlayChangeRallyPointSound.html", ["play", "change", "rally", "point", "sound"], "ARTSPlayerController");
addToContainers_function("ShouldPlayChatMessageReceivedSound", "Return whether to play a sound when a chat message is received", "Docs/Classes/ARTSPlayerController/Functions/ShouldPlayChatMessageReceivedSoun.html", ["should", "play", "chat", "message", "received", "sound"], "ARTSPlayerController");
addToContainers_function("PlayChatMessageReceivedSound", "Play sound for receiving a chat message @param MessageType - type of message that was received e.g. team chat, everyone chat", "Docs/Classes/ARTSPlayerController/Functions/PlayChatMessageReceivedSound.html", ["play", "chat", "message", "received", "sound"], "ARTSPlayerController");
addToContainers_function("ShouldPlayZeroHealthSound", "Return whether to play a sound when a selectable reaches zero health", "Docs/Classes/ARTSPlayerController/Functions/ShouldPlayZeroHealthSound.html", ["should", "play", "zero", "health", "sound"], "ARTSPlayerController");
addToContainers_function("PlayZeroHealthSound", "", "Docs/Classes/ARTSPlayerController/Functions/PlayZeroHealthSound.html", ["play", "zero", "health", "sound"], "ARTSPlayerController");
addToContainers_function("SetPerformMarqueeNextTick", "Tell HUD to make marquee selection. Marquee selection will be performed when the HUD ticks next (when DrawHUD is called) @param bNewValue - True to make it do it on next DrawHUD; false to not", "Docs/Classes/ARTSPlayerController/Functions/SetPerformMarqueeNextTick.html", ["set", "perform", "marquee", "next", "tick"], "ARTSPlayerController");
addToContainers_function("IsGlobalSkillsPanelAbilityUsable", "Return whether it\'s possible to use an ability on the global skills panel e.g. it\'s off cooldown etc. This function will probably assume that the ability has been aquired", "Docs/Classes/ARTSPlayerController/Functions/IsGlobalSkillsPanelAbilityUsable.html", ["is", "global", "skills", "panel", "ability", "usable"], "ARTSPlayerController");
addToContainers_function("IsGlobalSkillsPanelAbilityUsable", "Version for abilities that target another player", "Docs/Classes/ARTSPlayerController/Functions/IsGlobalSkillsPanelAbilityUsable_1.html", ["is", "global", "skills", "panel", "ability", "usable"], "ARTSPlayerController");
addToContainers_function("IsGlobalSkillsPanelAbilityUsable", "Version for ability that targets a selectable", "Docs/Classes/ARTSPlayerController/Functions/IsGlobalSkillsPanelAbilityUsable_2.html", ["is", "global", "skills", "panel", "ability", "usable"], "ARTSPlayerController");
addToContainers_function("IsGlobalSkillsPanelAbilityUsable", "Version for ability that targets a world location", "Docs/Classes/ARTSPlayerController/Functions/IsGlobalSkillsPanelAbilityUsable_3.html", ["is", "global", "skills", "panel", "ability", "usable"], "ARTSPlayerController");
addToContainers_function("HighlightButton", "Makes a UI element highlighted e.g. if it is a button for an ability that is pending and required a target then it could be highlighted", "Docs/Classes/ARTSPlayerController/Functions/HighlightButton.html", ["highlight", "button"], "ARTSPlayerController");
addToContainers_function("UnhighlightHighlightedButton", "", "Docs/Classes/ARTSPlayerController/Functions/UnhighlightHighlightedButton.html", ["unhighlight", "highlighted", "button"], "ARTSPlayerController");
addToContainers_function("UpdateMouseAppearance", "Changes the mouse appearance based on what context action is pending. Will either make the mouse cursor visible and set its curosr or will make the mouse cursor invisible and draw a decal under it", "Docs/Classes/ARTSPlayerController/Functions/UpdateMouseAppearance.html", ["update", "mouse", "appearance"], "ARTSPlayerController");
addToContainers_function("GetMouseCursor_NoAbilitiesPending", "Return the mouse cursor to show for hovering the mouse over a selectable. This will only be called if there are no abilities pending. @param HoveredActor - hovered selectable as an AActor @param HoveredSelectable - selectable that is being hovered by mouse cursor @param HoveredAffiliation - affiliation of the hovered selectable as a convenience @param OutCursor - return value", "Docs/Classes/ARTSPlayerController/Functions/GetMouseCursor_NoAbilitiesPending.html", ["get", "mouse", "cursor_", "no", "abilities", "pending"], "ARTSPlayerController");
addToContainers_function("SetMouseCursor", "Changes mouse cursor @param MouseCursorInfo - info about the mouse cursor you want to change to @param bFirstCall - whether this is the first time calling this and therefore CurrentCursor is null", "Docs/Classes/ARTSPlayerController/Functions/SetMouseCursor.html", ["set", "mouse", "cursor"], "ARTSPlayerController");
addToContainers_function("SetMouseDecal", "Set a decal to draw at the mouse location", "Docs/Classes/ARTSPlayerController/Functions/SetMouseDecal.html", ["set", "mouse", "decal"], "ARTSPlayerController");
addToContainers_function("SetContextDecal", "Make a decal appear under the mouse cursor. Uses the \"acceptable location\" decal of the ability @param ButtonInfo - the context button info whose decal you want drawn", "Docs/Classes/ARTSPlayerController/Functions/SetContextDecal.html", ["set", "context", "decal"], "ARTSPlayerController");
addToContainers_function("SetContextDecalType", "Change the decal for the current pending ability @param AbilityInfo - ability to set the decal for @param DecalTypeToSet - the type of decal to set. If one has not been assigned for the ability then will silently fail (except maybe the \"acceptable location\" one, unsure of this)", "Docs/Classes/ARTSPlayerController/Functions/SetContextDecalType.html", ["set", "context", "decal", "type"], "ARTSPlayerController");
addToContainers_function("SetCommanderAbilityDecalType", "Set the decal for the current pending commander ability", "Docs/Classes/ARTSPlayerController/Functions/SetCommanderAbilityDecalType.html", ["set", "commander", "ability", "decal", "type"], "ARTSPlayerController");
addToContainers_function("ResetMouseAppearance", "Change mouse appearance to default cursor and hide any decals under it", "Docs/Classes/ARTSPlayerController/Functions/ResetMouseAppearance.html", ["reset", "mouse", "appearance"], "ARTSPlayerController");
addToContainers_function("HideContextDecal", "Stop drawing context decal", "Docs/Classes/ARTSPlayerController/Functions/HideContextDecal.html", ["hide", "context", "decal"], "ARTSPlayerController");
addToContainers_function("UpdateSelectableUnderMouse", "Highlight/unhighlight selectable under mouse on tick", "Docs/Classes/ARTSPlayerController/Functions/UpdateSelectableUnderMouse.html", ["update", "selectable", "under", "mouse"], "ARTSPlayerController");
addToContainers_function("UnhoverPreviouslyHoveredSelectable", "", "Docs/Classes/ARTSPlayerController/Functions/UnhoverPreviouslyHoveredSelectabl.html", ["unhover", "previously", "hovered", "selectable"], "ARTSPlayerController");
addToContainers_function("UpdateMouseDecalLocation", "Update location of decal under mouse. Call on tick and should be done after line trace has happened", "Docs/Classes/ARTSPlayerController/Functions/UpdateMouseDecalLocation.html", ["update", "mouse", "decal", "location"], "ARTSPlayerController");
addToContainers_function("Server_GiveLayFoundationCommand", "Special case of a context command for building buildings. This applies to the build methods LayFoundationsWhenAtLocation and Protoss only. Give a command to CurrentSelected to move to a location and try lay some foundations there. @param BuildingType - building type to lay foundations for when at location @param Location - location of foundations @param Rotation - rotation of foundations @param BuildersID - the selectable ID of the selectable wanting to build this building. Pretty sure this is needed provided Selected is not updated on server (which iirc it isn\'t)", "Docs/Classes/ARTSPlayerController/Functions/Server_GiveLayFoundationCommand.html", ["server_", "give", "lay", "foundation", "command"], "ARTSPlayerController");
addToContainers_function("PrepareContextCommandRPC", "[Client] Called when a two-click context command that requires a selectable as a target is issued @param CommandType - the ability to use @param ClickLoc - world location where click was made. Some abilities may want this @param ClickTarget - the selectable that was clicked on. Assumed to be valid", "Docs/Classes/ARTSPlayerController/Functions/PrepareContextCommandRPC.html", ["prepare", "context", "command", "r", "p", "c"], "ARTSPlayerController");
addToContainers_function("PrepareContextCommandRPC", "[Client] Called when a two-click context command that requires a world location as a target is issued @param CommandType - the ability to use @param ClickLoc - world location where click was made", "Docs/Classes/ARTSPlayerController/Functions/PrepareContextCommandRPC_1.html", ["prepare", "context", "command", "r", "p", "c"], "ARTSPlayerController");
addToContainers_function("Server_IssueContextCommand", "RPC to make server do context command. Do not call from server", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueContextCommand.html", ["server_", "issue", "context", "command"], "ARTSPlayerController");
addToContainers_function("Server_IssueLocationTargetingContextCommand", "RPC to make server do context command that requires a world location", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueLocationTargetingCont.html", ["server_", "issue", "location", "targeting", "context", "command"], "ARTSPlayerController");
addToContainers_function("Server_IssueInstantContextCommand", "RPC to make server do instant context action. Avoid calling this directly from server, use IssueInstantContextCommand instead", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueInstantContextCommand.html", ["server_", "issue", "instant", "context", "command"], "ARTSPlayerController");
addToContainers_function("Server_IssueInstantUseInventoryItemCommand", "RPC to make server do instant inventory item use. Avoid calling this from server, use something else instead @param SelectableID - selectable ID of the selectable to carry out the item use @param InventorySlotIndex - the slot in their inventory they are using. This must be the index in FInventory::SlotsArray. @param ItemType - this is kind of not required. It is sent because the selectable\'s inventory could have been modified on server and client hasn\'t been updated yet, so it avoids the case of a client say using a diffusal blade when on their machine they actually clicked on a clarity potion.", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueInstantUseInventoryIt.html", ["server_", "issue", "instant", "use", "inventory", "item", "command"], "ARTSPlayerController");
addToContainers_function("Server_IssueLocationTargetingUseInventoryItemCommand", "RPC to make server do an inventory item use for only the primary selected. Call from clients only", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueLocationTargetingUseI.html", ["server_", "issue", "location", "targeting", "use", "inventory", "item", "command"], "ARTSPlayerController");
addToContainers_function("Server_IssueSelectableTargetingUseInventoryItemCommand", "The TargetSelectable param can be changed to an FSelectableIdentifier to make it 2 bytes", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueSelectableTargetingUs.html", ["server_", "issue", "selectable", "targeting", "use", "inventory", "item", "command"], "ARTSPlayerController");
addToContainers_function("IssueTargetRequiredContextCommandChecked", "[Server] Issue a context command that requires a target. Assumes everything that PC needs to check has been checked so should just issue the command @param ToIssueTo - the selectables to issue the command to", "Docs/Classes/ARTSPlayerController/Functions/IssueTargetRequiredContextCommand.html", ["issue", "target", "required", "context", "command", "checked"], "ARTSPlayerController");
addToContainers_function("IssueLocationRequiredContextCommandChecked", "[Server] Issue a context command that requires a location as a target. Assumes everything that PC needs to check has been checked so should just issue commands @param ToIssueTo - the selectables to issue the command to", "Docs/Classes/ARTSPlayerController/Functions/IssueLocationRequiredContextComma.html", ["issue", "location", "required", "context", "command", "checked"], "ARTSPlayerController");
addToContainers_function("IssueInstantUseInventoryItemCommandChecked", "[Server] Issue a command to use an inventory item for primary selected. The use ability is an instant type one. @param InventorySlot - inventory slot we are trying to use @param ItemsInfo - info struct for the item in InventorySlot @param AbilityInfo - ability info struct for the use of the item", "Docs/Classes/ARTSPlayerController/Functions/IssueInstantUseInventoryItemComma.html", ["issue", "instant", "use", "inventory", "item", "command", "checked"], "ARTSPlayerController");
addToContainers_function("IssueUseInventoryItemCommandChecked", "[Server] For item use that targets a world location", "Docs/Classes/ARTSPlayerController/Functions/IssueUseInventoryItemCommandCheck.html", ["issue", "use", "inventory", "item", "command", "checked"], "ARTSPlayerController");
addToContainers_function("IssueUseInventoryItemCommandChecked", "[Server] For item use that requires another selectable as a target", "Docs/Classes/ARTSPlayerController/Functions/IssueUseInventoryItemCommandCheck_1.html", ["issue", "use", "inventory", "item", "command", "checked"], "ARTSPlayerController");
addToContainers_function("IssueContextCommand", "Issues a context command to the selected selectables that it applies to. Called if clicked on another selectable. @param CommandInfo - all the info about the button that was pressed @param ClickLoc - the world coords where the mouse was clicked. @param Target - the selectable that was clicked on. If no selectable was clicked on then this should be null @return - true if at least one selectable was issued a command", "Docs/Classes/ARTSPlayerController/Functions/IssueContextCommand.html", ["issue", "context", "command"], "ARTSPlayerController");
addToContainers_function("IssueContextCommand", "Issues a context command to the selected selectables that it applies to. This version is for abilities that only require a world location as their target @return - true if at least one selectable was issued a command", "Docs/Classes/ARTSPlayerController/Functions/IssueContextCommand_1.html", ["issue", "context", "command"], "ARTSPlayerController");
addToContainers_function("IssueInstantContextCommand", "Issue instant context commands on server. Handles displaying HUD warnings if no command is issued @param bFromServerPlayer - whether we are the server player @return - true if at least one selectable was given a command", "Docs/Classes/ARTSPlayerController/Functions/IssueInstantContextCommand.html", ["issue", "instant", "context", "command"], "ARTSPlayerController");
addToContainers_function("ExecuteCommanderAbility", "Carries out a commander ability, puts it on cooldown, etc. Assumes that all checks have been made an it is OK to carry it out. @param AbilityState - state struct for ability to carry out @param AbilityInfo - info struct for AbilityState just as a convenience", "Docs/Classes/ARTSPlayerController/Functions/ExecuteCommanderAbility.html", ["execute", "commander", "ability"], "ARTSPlayerController");
addToContainers_function("ExecuteCommanderAbility", "This version is for commander abilities that require targeting a player", "Docs/Classes/ARTSPlayerController/Functions/ExecuteCommanderAbility_1.html", ["execute", "commander", "ability"], "ARTSPlayerController");
addToContainers_function("ExecuteCommanderAbility", "This version is for commander abilities that require targeting a selectable", "Docs/Classes/ARTSPlayerController/Functions/ExecuteCommanderAbility_2.html", ["execute", "commander", "ability"], "ARTSPlayerController");
addToContainers_function("ExecuteCommanderAbility", "This version is for commander abilities that reuqire targeting a world location", "Docs/Classes/ARTSPlayerController/Functions/ExecuteCommanderAbility_3.html", ["execute", "commander", "ability"], "ARTSPlayerController");
addToContainers_function("ExecuteCommanderAbility", "This version is for commander abilities that can target either a world location or a selectable. Pass in the AActor* param as null to signal you are targeting the world location @param TargetAsSelectable - selectable that is the target for the ability. Pass in null to signal you are targeting a world location instead", "Docs/Classes/ARTSPlayerController/Functions/ExecuteCommanderAbility_4.html", ["execute", "commander", "ability"], "ARTSPlayerController");
addToContainers_function("Server_RequestExecuteCommanderAbility", "RPCs to execute commander abilities", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestExecuteCommanderAbi.html", ["server_", "request", "execute", "commander", "ability"], "ARTSPlayerController");
addToContainers_function("Server_RequestExecuteCommanderAbility_PlayerTargeting", "", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestExecuteCommanderAbi_1.html", ["server_", "request", "execute", "commander", "ability_", "player", "targeting"], "ARTSPlayerController");
addToContainers_function("Server_RequestExecuteCommanderAbility_SelectableTargeting", "", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestExecuteCommanderAbi_2.html", ["server_", "request", "execute", "commander", "ability_", "selectable", "targeting"], "ARTSPlayerController");
addToContainers_function("Server_RequestExecuteCommanderAbility_LocationTargeting", "", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestExecuteCommanderAbi_3.html", ["server_", "request", "execute", "commander", "ability_", "location", "targeting"], "ARTSPlayerController");
addToContainers_function("Server_RequestExecuteCommanderAbility_LocationOrSelectableTargeting_UsingSelectable", "", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestExecuteCommanderAbi_4.html", ["server_", "request", "execute", "commander", "ability_", "location", "or", "selectable", "targeting_", "using", "selectable"], "ARTSPlayerController");
addToContainers_function("Server_RequestExecuteCommanderAbility_LocationOrSelectableTargeting_UsingLocation", "", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestExecuteCommanderAbi_5.html", ["server_", "request", "execute", "commander", "ability_", "location", "or", "selectable", "targeting_", "using", "location"], "ARTSPlayerController");
addToContainers_function("CancelPendingContextCommand", "Cancel ability to issue context command that\'s pending. Do we want to cancel ghosts too? I call this a lot right before switching to another context action. For performance consider creating a function like ReplacePendingContextCommander(const FContextButtonInfo & NewAbility) + overloads for inventory items and commander abilities too", "Docs/Classes/ARTSPlayerController/Functions/CancelPendingContextCommand.html", ["cancel", "pending", "context", "command"], "ARTSPlayerController");
addToContainers_function("CancelPendingGlobalSkillsPanelAbility", "Cancel pending global skills panel ability", "Docs/Classes/ARTSPlayerController/Functions/CancelPendingGlobalSkillsPanelAbi.html", ["cancel", "pending", "global", "skills", "panel", "ability"], "ARTSPlayerController");
addToContainers_function("RemoveSelection", "Call OnDeselect() on and remove all selectables in Selected. Clear out SelectedIDs", "Docs/Classes/ARTSPlayerController/Functions/RemoveSelection.html", ["remove", "selection"], "ARTSPlayerController");
addToContainers_function("RemoveSelection", "Call OnDeselect() on all in Selected except param if it is in there, then empty Selected. Also completely clears out SelectedIDs @param Exclude - the selectable to not remove if it is in Seleceted", "Docs/Classes/ARTSPlayerController/Functions/RemoveSelection_1.html", ["remove", "selection"], "ARTSPlayerController");
addToContainers_function("HasSelection", "Check if any units/buildings are selected @return - true if at least one object is selected", "Docs/Classes/ARTSPlayerController/Functions/HasSelection.html", ["has", "selection"], "ARTSPlayerController");
addToContainers_function("HasMultipleSelected", "Returns true if multiple units are selected", "Docs/Classes/ARTSPlayerController/Functions/HasMultipleSelected.html", ["has", "multiple", "selected"], "ARTSPlayerController");
addToContainers_function("IsControlledByThis", "Returns true if the player ID matches this player and therefore the selectable is owned by this player", "Docs/Classes/ARTSPlayerController/Functions/IsControlledByThis.html", ["is", "controlled", "by", "this"], "ARTSPlayerController");
addToContainers_function("IsControlledByThis", "Returns true if an actor is controlled by this", "Docs/Classes/ARTSPlayerController/Functions/IsControlledByThis_1.html", ["is", "controlled", "by", "this"], "ARTSPlayerController");
addToContainers_function("IsSelectionControlledByThis", "Returns true if player has a selection and it is controlled by them", "Docs/Classes/ARTSPlayerController/Functions/IsSelectionControlledByThis.html", ["is", "selection", "controlled", "by", "this"], "ARTSPlayerController");
addToContainers_function("ToSelectablePtr", "Get raw ptr from TScriptInterface ptr. I use this because some funcs I have written require ISelectable* and I cannot be arsed overloading them to allow TScriptInterface aswell", "Docs/Classes/ARTSPlayerController/Functions/ToSelectablePtr.html", ["to", "selectable", "ptr"], "ARTSPlayerController");
addToContainers_function("IsNeutral", "Returns true if the player ID matches that of something that is neutral", "Docs/Classes/ARTSPlayerController/Functions/IsNeutral.html", ["is", "neutral"], "ARTSPlayerController");
addToContainers_function("OnRightClickCommand", "Call when issuing a right click command @param ClickLoc - world space coords where right click was made @param Target - the actor that was right clicked on, or null if none", "Docs/Classes/ARTSPlayerController/Functions/OnRightClickCommand.html", ["on", "right", "click", "command"], "ARTSPlayerController");
addToContainers_function("FillCommandWithIDs", "[Client] Put the right selectable IDs into the command struct @param Command - command struct to fill with selectable IDs", "Docs/Classes/ARTSPlayerController/Functions/FillCommandWithIDs.html", ["fill", "command", "with", "i", "ds"], "ARTSPlayerController");
addToContainers_function("PlayRightClickCommandParticlesAndSound", "@param InPrimarySelected - player\'s primary selected at the time the command was issued", "Docs/Classes/ARTSPlayerController/Functions/PlayRightClickCommandParticlesAnd.html", ["play", "right", "click", "command", "particles", "and", "sound"], "ARTSPlayerController");
addToContainers_function("Server_IssueRightClickCommand", "Sends from client message to issue right click command", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueRightClickCommand.html", ["server_", "issue", "right", "click", "command"], "ARTSPlayerController");
addToContainers_function("Server_IssueRightClickCommandOnInventoryItem", "Sends from client message to issue right click command. Assuming that the actor that was clicked on was an inventory item", "Docs/Classes/ARTSPlayerController/Functions/Server_IssueRightClickCommandOnIn.html", ["server_", "issue", "right", "click", "command", "on", "inventory", "item"], "ARTSPlayerController");
addToContainers_function("IssueRightClickCommand", "Issues a right click command to all selected. If the actor right clicked on is a selectable then pass a reference to them, otherwise pass null. All selectables should be replicated so while non-selectables may not. If a non-selectable reference is passed it will be null on server which is ok while selectable references should all be not null on server. @param Location - the world coords of the right click @param ClickedActor - the actor that was clicked on @return - something not equal to \"None\" if a command was not issued", "Docs/Classes/ARTSPlayerController/Functions/IssueRightClickCommand.html", ["issue", "right", "click", "command"], "ARTSPlayerController");
addToContainers_function("SetupFogOfWarManager", "", "Docs/Classes/ARTSPlayerController/Functions/SetupFogOfWarManager.html", ["setup", "fog", "of", "war", "manager"], "ARTSPlayerController");
addToContainers_function("SetupGhostPool", "Spawn ghost buildings and add them to GhostPool", "Docs/Classes/ARTSPlayerController/Functions/SetupGhostPool.html", ["setup", "ghost", "pool"], "ARTSPlayerController");
addToContainers_function("SetupExternalReferences", "Set PC and GS references in player state. Can\'t find a BeginPlay type function in player state so I call this instead", "Docs/Classes/ARTSPlayerController/Functions/SetupExternalReferences.html", ["setup", "external", "references"], "ARTSPlayerController");
addToContainers_function("SetupPlayerID", "Set unique ID for player. APlayerState::PlayerId used to work in PIE but now it\'s always returning 0", "Docs/Classes/ARTSPlayerController/Functions/SetupPlayerID.html", ["setup", "player", "i", "d"], "ARTSPlayerController");
addToContainers_function("InitHUD", "Sets up HUD before match starts", "Docs/Classes/ARTSPlayerController/Functions/InitHUD.html", ["init", "h", "u", "d"], "ARTSPlayerController");
addToContainers_function("SetupMouseCursorProperties", "Set the mouse cursor, either main menu or match one depending on if we are in main menu or match", "Docs/Classes/ARTSPlayerController/Functions/SetupMouseCursorProperties.html", ["setup", "mouse", "cursor", "properties"], "ARTSPlayerController");
addToContainers_function("SetStartingSpotInMatch", "Teleport to the location player should start match at. Also as a result sets the default yaw of the player\'s camera which is the yaw that it will be reset to when they press the \'reset camera view\' button @param InStartingSpotID - the starting spot unique ID that they should teleport to. If -2 then they weren\'t assigned a starting spot and the game could not find one for them usually because there aren\'t any left on map. @param MapID - the unique ID of the map we are going to play match on.", "Docs/Classes/ARTSPlayerController/Functions/SetStartingSpotInMatch.html", ["set", "starting", "spot", "in", "match"], "ARTSPlayerController");
addToContainers_function("Server_SetupForMatch", "Was called Server_PostLogin for a long time. Sets up everything the controller needs to be function in a match. Should be called at some point when transitioning from lobby to match. Doesn\'t setup UI elements", "Docs/Classes/ARTSPlayerController/Functions/Server_SetupForMatch.html", ["server_", "setup", "for", "match"], "ARTSPlayerController");
addToContainers_function("Client_SetupForMatch", "Was called Client_PostLogin for a long time. Sets up everything the controller needs to be function in a match. Should be called at some point when transitioning from lobby to match. Called by Server_SetupForMatch", "Docs/Classes/ARTSPlayerController/Functions/Client_SetupForMatch.html", ["client_", "setup", "for", "match"], "ARTSPlayerController");
addToContainers_function("Server_AckSetupForMatchComplete", "Tell game state that Client_SetupForMatch has completed", "Docs/Classes/ARTSPlayerController/Functions/Server_AckSetupForMatchComplete.html", ["server_", "ack", "setup", "for", "match", "complete"], "ARTSPlayerController");
addToContainers_function("Server_BeginPlay", "Called during game modes begin play", "Docs/Classes/ARTSPlayerController/Functions/Server_BeginPlay.html", ["server_", "begin", "play"], "ARTSPlayerController");
addToContainers_function("Client_OnPIEStarted", "Called by game state when PIE starts", "Docs/Classes/ARTSPlayerController/Functions/Client_OnPIEStarted.html", ["client_", "on", "p", "i", "e", "started"], "ARTSPlayerController");
addToContainers_function("OnMatchStarted", "Called when a match from lobby starts. The specific time is actually after the 1 second black screen ends", "Docs/Classes/ARTSPlayerController/Functions/OnMatchStarted.html", ["on", "match", "started"], "ARTSPlayerController");
addToContainers_function("NotifyOfBuildingReachingZeroHealth", "", "Docs/Classes/ARTSPlayerController/Functions/NotifyOfBuildingReachingZeroHealt.html", ["notify", "of", "building", "reaching", "zero", "health"], "ARTSPlayerController");
addToContainers_function("NotifyOfInfantryReachingZeroHealth", "Called by a selectable when it reaches zero health @param Selectable - selectable that just reached zero health @param bWasSelected - whether the selectable was selected by the player when it reached zero health", "Docs/Classes/ARTSPlayerController/Functions/NotifyOfInfantryReachingZeroHealt.html", ["notify", "of", "infantry", "reaching", "zero", "health"], "ARTSPlayerController");
addToContainers_function("NotifyOfInfantryEnteringGarrison", "Called when an infantry enters a garrison @param Infantry - infantry that entered garrison @param bWasSelected - if the selectable is selected by this player", "Docs/Classes/ARTSPlayerController/Functions/NotifyOfInfantryEnteringGarrison.html", ["notify", "of", "infantry", "entering", "garrison"], "ARTSPlayerController");
addToContainers_function("NotifyOfInventoryItemBeingPickedUp", "Called when an inventory item in the world is picked up. @param InventoryItem - inventory item that was picked up @param bWasSelected - whether the inventory item was selected by this player controller", "Docs/Classes/ARTSPlayerController/Functions/NotifyOfInventoryItemBeingPickedU.html", ["notify", "of", "inventory", "item", "being", "picked", "up"], "ARTSPlayerController");
addToContainers_function("ServerUnloadSingleUnitFromGarrison", "Unload a single unit from a garrison", "Docs/Classes/ARTSPlayerController/Functions/ServerUnloadSingleUnitFromGarriso.html", ["server", "unload", "single", "unit", "from", "garrison"], "ARTSPlayerController");
addToContainers_function("ServerUnloadGarrison", "Unload all units from a garrison", "Docs/Classes/ARTSPlayerController/Functions/ServerUnloadGarrison.html", ["server", "unload", "garrison"], "ARTSPlayerController");
addToContainers_function("Server_RequestUnloadSingleUnitFromGarrison", "Request unload a single unit from a garrison @param SelectableToUnload - unit to remove from the garrison", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestUnloadSingleUnitFro.html", ["server_", "request", "unload", "single", "unit", "from", "garrison"], "ARTSPlayerController");
addToContainers_function("Server_RequestUnloadGarrison", "Request unload all units from a garrison", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestUnloadGarrison.html", ["server_", "request", "unload", "garrison"], "ARTSPlayerController");
addToContainers_function("RemoveFromSelected", "Removes a selectable from Selected. Useful to use when a selectable reaches zero health", "Docs/Classes/ARTSPlayerController/Functions/RemoveFromSelected.html", ["remove", "from", "selected"], "ARTSPlayerController");
addToContainers_function("OnInventoryIndicesOfPrimarySelectedSwapped", "Called when the inventory of the primary selected swaps around indices for any reason, and it is also owned by this. @param ServerIndex_1 - one of the indices that was swapped @param ServerIndex_2 - one of the indices that was swapped", "Docs/Classes/ARTSPlayerController/Functions/OnInventoryIndicesOfPrimarySelect.html", ["on", "inventory", "indices", "of", "primary", "selected", "swapped"], "ARTSPlayerController");
addToContainers_function("OnMarqueeSelect", "Called when multiple the HUD does a marquee select. @param bDidSelectionChange - true if the marquee select changed the selection", "Docs/Classes/ARTSPlayerController/Functions/OnMarqueeSelect.html", ["on", "marquee", "select"], "ARTSPlayerController");
addToContainers_function("OnPersistentTabButtonLeftClicked", "", "Docs/Classes/ARTSPlayerController/Functions/OnPersistentTabButtonLeftClicked.html", ["on", "persistent", "tab", "button", "left", "clicked"], "ARTSPlayerController");
addToContainers_function("OnPersistentTabButtonRightClicked", "", "Docs/Classes/ARTSPlayerController/Functions/OnPersistentTabButtonRightClicked.html", ["on", "persistent", "tab", "button", "right", "clicked"], "ARTSPlayerController");
addToContainers_function("OnContextButtonClick", "Called when context menu button is clicked. @param Button - the button that was clicked", "Docs/Classes/ARTSPlayerController/Functions/OnContextButtonClick.html", ["on", "context", "button", "click"], "ARTSPlayerController");
addToContainers_function("OnGlobalSkillsPanelButtonLeftClicked", "Called when a button on the global skills panel is left clicked", "Docs/Classes/ARTSPlayerController/Functions/OnGlobalSkillsPanelButtonLeftClic.html", ["on", "global", "skills", "panel", "button", "left", "clicked"], "ARTSPlayerController");
addToContainers_function("OnPlayerTargetingPanelButtonLeftClicked", "Called when a button on the player targeting panel is left clicked @param AbilityTarget - the player that corrisponds to the button.", "Docs/Classes/ARTSPlayerController/Functions/OnPlayerTargetingPanelButtonLeftC.html", ["on", "player", "targeting", "panel", "button", "left", "clicked"], "ARTSPlayerController");
addToContainers_function("OnInventorySlotButtonLeftClicked", "Called when a inventory slot button is left clicked. @param InventorySlot - inventory slot that was clicked @param SlotsServerIndex - index in FInventory::SlotsArray", "Docs/Classes/ARTSPlayerController/Functions/OnInventorySlotButtonLeftClicked.html", ["on", "inventory", "slot", "button", "left", "clicked"], "ARTSPlayerController");
addToContainers_function("OnInventorySlotButtonRightClicked", "Called when an inventory slot button is right clicked. Will likely be how items are sold back to shops. My notes: haven\'t really done anything for this", "Docs/Classes/ARTSPlayerController/Functions/OnInventorySlotButtonRightClicked.html", ["on", "inventory", "slot", "button", "right", "clicked"], "ARTSPlayerController");
addToContainers_function("OnShopSlotButtonLeftClicked", "", "Docs/Classes/ARTSPlayerController/Functions/OnShopSlotButtonLeftClicked.html", ["on", "shop", "slot", "button", "left", "clicked"], "ARTSPlayerController");
addToContainers_function("UnhoverHoveredUIElement", "", "Docs/Classes/ARTSPlayerController/Functions/UnhoverHoveredUIElement.html", ["unhover", "hovered", "u", "i", "element"], "ARTSPlayerController");
addToContainers_function("ShouldIgnoreMouseHoverEvents", "", "Docs/Classes/ARTSPlayerController/Functions/ShouldIgnoreMouseHoverEvents.html", ["should", "ignore", "mouse", "hover", "events"], "ARTSPlayerController");
addToContainers_function("ShouldIgnoreButtonUpOrDownEvents", "", "Docs/Classes/ARTSPlayerController/Functions/ShouldIgnoreButtonUpOrDownEvents.html", ["should", "ignore", "button", "up", "or", "down", "events"], "ARTSPlayerController");
addToContainers_function("OnButtonHovered", "@param UserWidget - if the UMyButton is a button that belongs to another UUserWidget button then this should point to that UUserWidget. Otherwise it should be null. Of course all UWidget are part of a UUserWidget, but that\'s not what this is refering to @return - true to let the hovered button know it should play a hovered sound", "Docs/Classes/ARTSPlayerController/Functions/OnButtonHovered.html", ["on", "button", "hovered"], "ARTSPlayerController");
addToContainers_function("OnButtonUnhovered", "", "Docs/Classes/ARTSPlayerController/Functions/OnButtonUnhovered.html", ["on", "button", "unhovered"], "ARTSPlayerController");
addToContainers_function("ShowUIButtonHoveredImage", "", "Docs/Classes/ARTSPlayerController/Functions/ShowUIButtonHoveredImage.html", ["show", "u", "i", "button", "hovered", "image"], "ARTSPlayerController");
addToContainers_function("ShowUIButtonPressedImage_Mouse", "Call to show a \'on pressed\' version of a button by drawing an image widget overtop of it. This is for the mouse pressing something", "Docs/Classes/ARTSPlayerController/Functions/ShowUIButtonPressedImage_Mouse.html", ["show", "u", "i", "button", "pressed", "image_", "mouse"], "ARTSPlayerController");
addToContainers_function("HideUIButtonPressedImage_Mouse", "", "Docs/Classes/ARTSPlayerController/Functions/HideUIButtonPressedImage_Mouse.html", ["hide", "u", "i", "button", "pressed", "image_", "mouse"], "ARTSPlayerController");
addToContainers_function("OnMenuWarningHappened", "Called whenever a menu warning happens. This is intended to be called for menus that can either be used both in the main menu or in a match e.g. settings menu", "Docs/Classes/ARTSPlayerController/Functions/OnMenuWarningHappened.html", ["on", "menu", "warning", "happened"], "ARTSPlayerController");
addToContainers_function("ShouldShowMenuWarningMessage", "Called every time a menu warning happens. Return whether a message should be displayed on the HUD and a sound should be played", "Docs/Classes/ARTSPlayerController/Functions/ShouldShowMenuWarningMessage.html", ["should", "show", "menu", "warning", "message"], "ARTSPlayerController");
addToContainers_function("PlayCameraShake", "My custom function that measures to the camera pawns root component instead of to the actual camera. Also excludes Z axis for distance calculations @param CameraShakeBP - blueprint for camera shake @param Epicenter - location to play camera shake. Z axis will be ignored @param OuterRadius - area around Location camera shake will affect @param Falloff - Falloff of shakiness", "Docs/Classes/ARTSPlayerController/Functions/PlayCameraShake.html", ["play", "camera", "shake"], "ARTSPlayerController");
addToContainers_function("Server_RequestBuyItemFromShop", "Request buying an item from a shop. @param Shop - the shop we\'re trying to buy an item from @param ShopSlotIndex - what item from the shop we\'re trying to buy", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestBuyItemFromShop.html", ["server_", "request", "buy", "item", "from", "shop"], "ARTSPlayerController");
addToContainers_function("Server_SellInventoryItem", "Request selling item to a shop. @param SellerID - selectable ID of the selectable that wants to sell the item @param ItemInSlot - the type of item we\'re trying to sell. This is just here to try and reduce the number of times a client requests to sell something but the item was actually something different on the server.", "Docs/Classes/ARTSPlayerController/Functions/Server_SellInventoryItem.html", ["server_", "sell", "inventory", "item"], "ARTSPlayerController");
addToContainers_function("PauseGameAndShowPauseMenu", "Pause the game if it is a single player game and show the pause menu", "Docs/Classes/ARTSPlayerController/Functions/PauseGameAndShowPauseMenu.html", ["pause", "game", "and", "show", "pause", "menu"], "ARTSPlayerController");
addToContainers_function("ResumePlay", "When going from pause menu back to playing", "Docs/Classes/ARTSPlayerController/Functions/ResumePlay.html", ["resume", "play"], "ARTSPlayerController");
addToContainers_function("SetGamePaused", "Just calls UGameplayStatics::SetGamePaused", "Docs/Classes/ARTSPlayerController/Functions/SetGamePaused.html", ["set", "game", "paused"], "ARTSPlayerController");
addToContainers_function("OnLevelUp_LastForEvent", "Called if local player levels up but only called for the last level gained if multiple were gained at once @param ExperienceRequiredForNextRank - how much experience is required to go from the current rank to the next rank. Does not change as experience is gained/lost", "Docs/Classes/ARTSPlayerController/Functions/OnLevelUp_LastForEvent.html", ["on", "level", "up_", "last", "for", "event"], "ARTSPlayerController");
addToContainers_function("Server_RequestAquireCommanderSkill", "[Remote clients] Request gaining a rank in a commander skill. Could be the first rank for the ability or the 2nd, 3rd, etc @param AllNodesArrayIndex - index in UCommanderSkilTreeWidget::AllNodes that the player wants to try gain.", "Docs/Classes/ARTSPlayerController/Functions/Server_RequestAquireCommanderSkil.html", ["server_", "request", "aquire", "commander", "skill"], "ARTSPlayerController");
addToContainers_function("IsPlacingGhost", "Return true if placing ghost building", "Docs/Classes/ARTSPlayerController/Functions/IsPlacingGhost.html", ["is", "placing", "ghost"], "ARTSPlayerController");
addToContainers_function("IsMarqueeActive", "True if the marquee box should be drawn", "Docs/Classes/ARTSPlayerController/Functions/IsMarqueeActive.html", ["is", "marquee", "active"], "ARTSPlayerController");
addToContainers_function("SetupCameraReferences", "Setup reference to spring arm of currently possessed camera", "Docs/Classes/ARTSPlayerController/Functions/SetupCameraReferences.html", ["setup", "camera", "references"], "ARTSPlayerController");
addToContainers_function("GetGhostType", "", "Docs/Classes/ARTSPlayerController/Functions/GetGhostType.html", ["get", "ghost", "type"], "ARTSPlayerController");
addToContainers_function("GetTeam", "", "Docs/Classes/ARTSPlayerController/Functions/GetTeam.html", ["get", "team"], "ARTSPlayerController");
addToContainers_function("GetPS", "", "Docs/Classes/ARTSPlayerController/Functions/GetPS.html", ["get", "p", "s"], "ARTSPlayerController");
addToContainers_function("SetPS", "", "Docs/Classes/ARTSPlayerController/Functions/SetPS.html", ["set", "p", "s"], "ARTSPlayerController");
addToContainers_function("GetGS", "", "Docs/Classes/ARTSPlayerController/Functions/GetGS.html", ["get", "g", "s"], "ARTSPlayerController");
addToContainers_function("SetGS", "", "Docs/Classes/ARTSPlayerController/Functions/SetGS.html", ["set", "g", "s"], "ARTSPlayerController");
addToContainers_function("GetFactionInfo", "", "Docs/Classes/ARTSPlayerController/Functions/GetFactionInfo.html", ["get", "faction", "info"], "ARTSPlayerController");
addToContainers_function("GetGI", "", "Docs/Classes/ARTSPlayerController/Functions/GetGI.html", ["get", "g", "i"], "ARTSPlayerController");
addToContainers_function("GetSelected", "Get a reference to Selected", "Docs/Classes/ARTSPlayerController/Functions/GetSelected.html", ["get", "selected"], "ARTSPlayerController");
addToContainers_function("GetCurrentSelected", "Get CurrentSelected - the selected who\'s context menu is showing", "Docs/Classes/ARTSPlayerController/Functions/GetCurrentSelected.html", ["get", "current", "selected"], "ARTSPlayerController");
addToContainers_function("GetPoolingManager", "", "Docs/Classes/ARTSPlayerController/Functions/GetPoolingManager.html", ["get", "pooling", "manager"], "ARTSPlayerController");
addToContainers_function("GetFogOfWarManager", "", "Docs/Classes/ARTSPlayerController/Functions/GetFogOfWarManager.html", ["get", "fog", "of", "war", "manager"], "ARTSPlayerController");
addToContainers_function("GetHUDWidget", "", "Docs/Classes/ARTSPlayerController/Functions/GetHUDWidget.html", ["get", "h", "u", "d", "widget"], "ARTSPlayerController");
addToContainers_function("IsSelected", "Return true if ID is in SelectedIDs", "Docs/Classes/ARTSPlayerController/Functions/IsSelected.html", ["is", "selected"], "ARTSPlayerController");
addToContainers_function("AddToSelectedIDs", "", "Docs/Classes/ARTSPlayerController/Functions/AddToSelectedIDs.html", ["add", "to", "selected", "i", "ds"], "ARTSPlayerController");
addToContainers_function("RemoveFromSelectedIDs", "", "Docs/Classes/ARTSPlayerController/Functions/RemoveFromSelectedIDs.html", ["remove", "from", "selected", "i", "ds"], "ARTSPlayerController");
addToContainers_function("IsObserver", "Returns true if this player controller is for a player observing match but not actually playing", "Docs/Classes/ARTSPlayerController/Functions/IsObserver.html", ["is", "observer"], "ARTSPlayerController");
addToContainers_function("FailedToSpawnPawn", "", "Docs/Classes/ARTSPlayerController/Functions/FailedToSpawnPawn.html", ["failed", "to", "spawn", "pawn"], "ARTSPlayerController");
addToContainers_function("DisableHUD", "Disables HUD input. Usually called when player is defeated or match has ended", "Docs/Classes/ARTSPlayerController/Functions/DisableHUD.html", ["disable", "h", "u", "d"], "ARTSPlayerController");
addToContainers_function("IsChatInputOpen", "Returns true if the chat input widget is showing", "Docs/Classes/ARTSPlayerController/Functions/IsChatInputOpen.html", ["is", "chat", "input", "open"], "ARTSPlayerController");
addToContainers_function("OpenChatInput", "Shows the chat input widget @param MessageRecipients - the group intended to receive the message", "Docs/Classes/ARTSPlayerController/Functions/OpenChatInput.html", ["open", "chat", "input"], "ARTSPlayerController");
addToContainers_function("CloseChatInput", "Hides the chat input widget", "Docs/Classes/ARTSPlayerController/Functions/CloseChatInput.html", ["close", "chat", "input"], "ARTSPlayerController");
addToContainers_function("Server_SendInMatchChatMessageToEveryone", "Send message to server to then send to everyone in the match @param Message - the message user typed without any extra identifiers tagged on", "Docs/Classes/ARTSPlayerController/Functions/Server_SendInMatchChatMessageToEv.html", ["server_", "send", "in", "match", "chat", "message", "to", "everyone"], "ARTSPlayerController");
addToContainers_function("Server_SendInMatchChatMessageToTeam", "Send message to server to then send to everyone on your team @param Message - the message user typed without any extra identifiers tagged on", "Docs/Classes/ARTSPlayerController/Functions/Server_SendInMatchChatMessageToTe.html", ["server_", "send", "in", "match", "chat", "message", "to", "team"], "ARTSPlayerController");
addToContainers_function("Client_OnAllChatInMatchChatMessageReceived", "When an \"all chat\" message is received from server", "Docs/Classes/ARTSPlayerController/Functions/Client_OnAllChatInMatchChatMessag.html", ["client_", "on", "all", "chat", "in", "match", "chat", "message", "received"], "ARTSPlayerController");
addToContainers_function("Client_OnTeamChatInMatchChatMessageReceived", "When a \"team only\" chat message is received from server", "Docs/Classes/ARTSPlayerController/Functions/Client_OnTeamChatInMatchChatMessa.html", ["client_", "on", "team", "chat", "in", "match", "chat", "message", "received"], "ARTSPlayerController");
addToContainers_function("GetLobbySlotIndex", "", "Docs/Classes/ARTSPlayerController/Functions/GetLobbySlotIndex.html", ["get", "lobby", "slot", "index"], "ARTSPlayerController");
addToContainers_function("SetLobbySlotIndexForHost", "Called during GM::PostLogin but only on the host\'s player controller. Sets lobby index to 0", "Docs/Classes/ARTSPlayerController/Functions/SetLobbySlotIndexForHost.html", ["set", "lobby", "slot", "index", "for", "host"], "ARTSPlayerController");
addToContainers_function("Client_OnTryJoinButLobbyFull", "This is called during AGameMode::PostLogin when we joined but no open lobby slots were available. This should hopefully never be called", "Docs/Classes/ARTSPlayerController/Functions/Client_OnTryJoinButLobbyFull.html", ["client_", "on", "try", "join", "but", "lobby", "full"], "ARTSPlayerController");
addToContainers_function("Client_ShowLobbyWidget", "This is called during AGameMode::PostLogin when we have successfully joined into the lobby. It will allow us to show our lobby widget", "Docs/Classes/ARTSPlayerController/Functions/Client_ShowLobbyWidget.html", ["client_", "show", "lobby", "widget"], "ARTSPlayerController");
addToContainers_function("Server_ChangeTeamInLobby", "Change our team in lobby", "Docs/Classes/ARTSPlayerController/Functions/Server_ChangeTeamInLobby.html", ["server_", "change", "team", "in", "lobby"], "ARTSPlayerController");
addToContainers_function("Server_ChangeFactionInLobby", "Change our faction in lobby", "Docs/Classes/ARTSPlayerController/Functions/Server_ChangeFactionInLobby.html", ["server_", "change", "faction", "in", "lobby"], "ARTSPlayerController");
addToContainers_function("Server_ChangeStartingSpotInLobby", "Change starting spot on map in lobby. @param PlayerStartID - unique ID of player start being requested to change to. -1 = unassign", "Docs/Classes/ARTSPlayerController/Functions/Server_ChangeStartingSpotInLobby.html", ["server_", "change", "starting", "spot", "in", "lobby"], "ARTSPlayerController");
addToContainers_function("Client_OnChangeTeamInLobbySuccess", "Note: does not need to be called for server player", "Docs/Classes/ARTSPlayerController/Functions/Client_OnChangeTeamInLobbySuccess.html", ["client_", "on", "change", "team", "in", "lobby", "success"], "ARTSPlayerController");
addToContainers_function("Client_OnChangeFactionInLobbySuccess", "Note: does not need to be called for server player", "Docs/Classes/ARTSPlayerController/Functions/Client_OnChangeFactionInLobbySucc.html", ["client_", "on", "change", "faction", "in", "lobby", "success"], "ARTSPlayerController");
addToContainers_function("Client_OnChangeStartingSpotInLobbySuccess", "Note: does not need to be called for server player", "Docs/Classes/ARTSPlayerController/Functions/Client_OnChangeStartingSpotInLobb.html", ["client_", "on", "change", "starting", "spot", "in", "lobby", "success"], "ARTSPlayerController");
addToContainers_function("Client_OnChangeTeamInLobbyFailed", "Called when lock slots was in place of server but hadn\'t repped to client in time, therefore they could change their team selection @param TeamServerSide - the players team server-side which is what their team will be restored to on their client", "Docs/Classes/ARTSPlayerController/Functions/Client_OnChangeTeamInLobbyFailed.html", ["client_", "on", "change", "team", "in", "lobby", "failed"], "ARTSPlayerController");
addToContainers_function("Client_OnChangeFactionInLobbyFailed", "Called when lock slots was in place on server but hadn\'t repped to client in time, therefore they could change their faction selection", "Docs/Classes/ARTSPlayerController/Functions/Client_OnChangeFactionInLobbyFail.html", ["client_", "on", "change", "faction", "in", "lobby", "failed"], "ARTSPlayerController");
addToContainers_function("Client_OnChangeStartingSpotInLobbyFailed", "@param PlayerStartID - the player start to have client set. If -1 then do not set a player start point", "Docs/Classes/ARTSPlayerController/Functions/Client_OnChangeStartingSpotInLobb_1.html", ["client_", "on", "change", "starting", "spot", "in", "lobby", "failed"], "ARTSPlayerController");
addToContainers_function("Server_SendLobbyChatMessage", "Send chat message in lobby", "Docs/Classes/ARTSPlayerController/Functions/Server_SendLobbyChatMessage.html", ["server_", "send", "lobby", "chat", "message"], "ARTSPlayerController");
addToContainers_function("Server_AckPSSetupOnClient", "Here because of RPCs and ownership. Send ack to GS server-side to let them know that a player state has setup completely for match", "Docs/Classes/ARTSPlayerController/Functions/Server_AckPSSetupOnClient.html", ["server_", "ack", "p", "s", "setup", "on", "client"], "ARTSPlayerController");
addToContainers_function("Server_AckLevelStreamedIn", "Acknowledge level has streamed in for match", "Docs/Classes/ARTSPlayerController/Functions/Server_AckLevelStreamedIn.html", ["server_", "ack", "level", "streamed", "in"], "ARTSPlayerController");
addToContainers_function("SetupCameraCurves", "Functions", "Docs/Classes/ARTSPlayerController/Functions/SetupCameraCurves.html", ["setup", "camera", "curves"], "ARTSPlayerController");
addToContainers_function("AssignViewportValues", "Assign viewport size values", "Docs/Classes/ARTSPlayerController/Functions/AssignViewportValues.html", ["assign", "viewport", "values"], "ARTSPlayerController");
addToContainers_function("SetCameraKeyboardMoveSpeed", "Set the speed to move the camera when using keyboard", "Docs/Classes/ARTSPlayerController/Functions/SetCameraKeyboardMoveSpeed.html", ["set", "camera", "keyboard", "move", "speed"], "ARTSPlayerController");
addToContainers_function("SetCameraMouseMoveSpeed", "Set speed to move the camera when moving mouse to edge of screen", "Docs/Classes/ARTSPlayerController/Functions/SetCameraMouseMoveSpeed.html", ["set", "camera", "mouse", "move", "speed"], "ARTSPlayerController");
addToContainers_function("SetCameraMaxSpeed", "Set max move speed of camera", "Docs/Classes/ARTSPlayerController/Functions/SetCameraMaxSpeed.html", ["set", "camera", "max", "speed"], "ARTSPlayerController");
addToContainers_function("SetCameraAcceleration", "Set camera acceleration for any movement", "Docs/Classes/ARTSPlayerController/Functions/SetCameraAcceleration.html", ["set", "camera", "acceleration"], "ARTSPlayerController");
addToContainers_function("SetEnableCameraMovementLag", "Set whether to use camera movement lag or not", "Docs/Classes/ARTSPlayerController/Functions/SetEnableCameraMovementLag.html", ["set", "enable", "camera", "movement", "lag"], "ARTSPlayerController");
addToContainers_function("SetCameraMovementLagSpeed", "Set the speed the camera lags behind movement", "Docs/Classes/ARTSPlayerController/Functions/SetCameraMovementLagSpeed.html", ["set", "camera", "movement", "lag", "speed"], "ARTSPlayerController");
addToContainers_function("SetCameraTurningBoost", "Set how fast camera changes direction with regards to WASD and mouse edge movement", "Docs/Classes/ARTSPlayerController/Functions/SetCameraTurningBoost.html", ["set", "camera", "turning", "boost"], "ARTSPlayerController");
addToContainers_function("SetCameraDeceleration", "Set how fast camera stops", "Docs/Classes/ARTSPlayerController/Functions/SetCameraDeceleration.html", ["set", "camera", "deceleration"], "ARTSPlayerController");
addToContainers_function("SetCameraEdgeMovementThreshold", "Set how close to edge of screen mouse has to be to move camera", "Docs/Classes/ARTSPlayerController/Functions/SetCameraEdgeMovementThreshold.html", ["set", "camera", "edge", "movement", "threshold"], "ARTSPlayerController");
addToContainers_function("SetCameraZoomIncrementalAmount", "Set how much to zoom out by when scrolling mouse wheel", "Docs/Classes/ARTSPlayerController/Functions/SetCameraZoomIncrementalAmount.html", ["set", "camera", "zoom", "incremental", "amount"], "ARTSPlayerController");
addToContainers_function("SetCameraZoomSpeed", "Set speed camera zooms in/out at", "Docs/Classes/ARTSPlayerController/Functions/SetCameraZoomSpeed.html", ["set", "camera", "zoom", "speed"], "ARTSPlayerController");
addToContainers_function("SetMMBLookYawSensitivity", "Set the sensitivity on X axis when looking around with MMB held", "Docs/Classes/ARTSPlayerController/Functions/SetMMBLookYawSensitivity.html", ["set", "m", "m", "b", "look", "yaw", "sensitivity"], "ARTSPlayerController");
addToContainers_function("SetMMBLookPitchSensitivity", "Set the sensitivity on Y axis when looking around with MMB held", "Docs/Classes/ARTSPlayerController/Functions/SetMMBLookPitchSensitivity.html", ["set", "m", "m", "b", "look", "pitch", "sensitivity"], "ARTSPlayerController");
addToContainers_function("SetInvertMMBYawLook", "Whether to invert the MMB free looks X axis", "Docs/Classes/ARTSPlayerController/Functions/SetInvertMMBYawLook.html", ["set", "invert", "m", "m", "b", "yaw", "look"], "ARTSPlayerController");
addToContainers_function("SetInvertMMBPitchLook", "Whether to invert the MMB free looks Y axis", "Docs/Classes/ARTSPlayerController/Functions/SetInvertMMBPitchLook.html", ["set", "invert", "m", "m", "b", "pitch", "look"], "ARTSPlayerController");
addToContainers_function("SetEnableMMBLookLag", "Whether MMB look around lags. True = lags, false = updates instantly", "Docs/Classes/ARTSPlayerController/Functions/SetEnableMMBLookLag.html", ["set", "enable", "m", "m", "b", "look", "lag"], "ARTSPlayerController");
addToContainers_function("SetMMBLookLagAmount", "Set amount of MMB look around lag", "Docs/Classes/ARTSPlayerController/Functions/SetMMBLookLagAmount.html", ["set", "m", "m", "b", "look", "lag", "amount"], "ARTSPlayerController");
addToContainers_function("SetMouseMovementThreshold", "", "Docs/Classes/ARTSPlayerController/Functions/SetMouseMovementThreshold.html", ["set", "mouse", "movement", "threshold"], "ARTSPlayerController");
addToContainers_function("SetDefaultCameraYaw", "Set what the default camera yaw should be. This will be set on a per-map basis and is not something the user can adjust in their in-game settings", "Docs/Classes/ARTSPlayerController/Functions/SetDefaultCameraYaw.html", ["set", "default", "camera", "yaw"], "ARTSPlayerController");
addToContainers_function("SetDefaultCameraPitch", "Set what the default camera pitch should be", "Docs/Classes/ARTSPlayerController/Functions/SetDefaultCameraPitch.html", ["set", "default", "camera", "pitch"], "ARTSPlayerController");
addToContainers_function("SetDefaultCameraZoomAmount", "Set what camera zoom to have at start of match", "Docs/Classes/ARTSPlayerController/Functions/SetDefaultCameraZoomAmount.html", ["set", "default", "camera", "zoom", "amount"], "ARTSPlayerController");
addToContainers_function("SetResetCameraToDefaultRate", "Set speed camera resets to default rotation/zoom", "Docs/Classes/ARTSPlayerController/Functions/SetResetCameraToDefaultRate.html", ["set", "reset", "camera", "to", "default", "rate"], "ARTSPlayerController");
addToContainers_function("SetDoubleClickTime", "", "Docs/Classes/ARTSPlayerController/Functions/SetDoubleClickTime.html", ["set", "double", "click", "time"], "ARTSPlayerController");
addToContainers_function("SetGhostRotationRadius", "Set how far mouse has to move for rotation is possible", "Docs/Classes/ARTSPlayerController/Functions/SetGhostRotationRadius.html", ["set", "ghost", "rotation", "radius"], "ARTSPlayerController");
addToContainers_function("SetGhostRotationSpeed", "Set rate ghost rotates", "Docs/Classes/ARTSPlayerController/Functions/SetGhostRotationSpeed.html", ["set", "ghost", "rotation", "speed"], "ARTSPlayerController");
addToContainers_function("OnDevelopmentWidgetRequest", "Requests an action to be carried out, usually on the next relevant input", "Docs/Classes/ARTSPlayerController/Functions/OnDevelopmentWidgetRequest.html", ["on", "development", "widget", "request"], "ARTSPlayerController");
addToContainers_function("OnDevelopmentWidgetRequest", "This version aslo takes some auxillery data", "Docs/Classes/ARTSPlayerController/Functions/OnDevelopmentWidgetRequest_1.html", ["on", "development", "widget", "request"], "ARTSPlayerController");
addToContainers_function("ExecuteDevelopmentInputInterceptAction_LMBPress", "All of these functions run on an input @return - true if an action is carried out", "Docs/Classes/ARTSPlayerController/Functions/ExecuteDevelopmentInputInterceptA.html", ["execute", "development", "input", "intercept", "action_", "l", "m", "b", "press"], "ARTSPlayerController");
addToContainers_function("ExecuteDevelopmentInputInterceptAction_LMBRelease", "", "Docs/Classes/ARTSPlayerController/Functions/ExecuteDevelopmentInputInterceptA_1.html", ["execute", "development", "input", "intercept", "action_", "l", "m", "b", "release"], "ARTSPlayerController");
addToContainers_function("ExecuteDevelopmentInputInterceptAction_RMBPress", "", "Docs/Classes/ARTSPlayerController/Functions/ExecuteDevelopmentInputInterceptA_2.html", ["execute", "development", "input", "intercept", "action_", "r", "m", "b", "press"], "ARTSPlayerController");
addToContainers_function("Server_DealDamageToSelectable", "Request server deal default damage to a selectable", "Docs/Classes/ARTSPlayerController/Functions/Server_DealDamageToSelectable.html", ["server_", "deal", "damage", "to", "selectable"], "ARTSPlayerController");
addToContainers_function("Server_AwardExperience", "Award experience to a selectable", "Docs/Classes/ARTSPlayerController/Functions/Server_AwardExperience.html", ["server_", "award", "experience"], "ARTSPlayerController");
addToContainers_function("Server_AwardExperienceToPlayer", "Award experience to a player", "Docs/Classes/ARTSPlayerController/Functions/Server_AwardExperienceToPlayer.html", ["server_", "award", "experience", "to", "player"], "ARTSPlayerController");
addToContainers_function("Server_GiveInventoryItem", "Give an inventory item to a selectable", "Docs/Classes/ARTSPlayerController/Functions/Server_GiveInventoryItem.html", ["server_", "give", "inventory", "item"], "ARTSPlayerController");
addToContainers_variable("", "Reference to ViewTarget\'s sprint arm", "Docs/Classes/ARTSPlayerController/Variables/.html", [], "ARTSPlayerController");
addToContainers_variable("TeamTag", "Team this player is on in FName form", "Docs/Classes/ARTSPlayerController/Variables/TeamTag.html", ["team", "tag"], "ARTSPlayerController");
addToContainers_variable("Team", "Team this player is on", "Docs/Classes/ARTSPlayerController/Variables/Team.html", [], "ARTSPlayerController");
addToContainers_variable("Type", "What type of player this is; either player participating in match or an observer", "Docs/Classes/ARTSPlayerController/Variables/Type.html", [], "ARTSPlayerController");
addToContainers_variable("", "Particle system that will be drawn on world when right clicking on world or selectable. Use UStatics::CommandTargetTypeToArrayIndex to get correct array index", "Docs/Classes/ARTSPlayerController/Variables/_1.html", [], "ARTSPlayerController");
addToContainers_variable("", "The last spawned right click particle so it can be hidden when a new right click happens because we only show one max", "Docs/Classes/ARTSPlayerController/Variables/_2.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to owning game instance", "Docs/Classes/ARTSPlayerController/Variables/_3.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to owning player state", "Docs/Classes/ARTSPlayerController/Variables/_4.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ARTSPlayerController/Variables/_5.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to object pooling manager for handling creating projectiles. One for each client", "Docs/Classes/ARTSPlayerController/Variables/_6.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to the HUD widget", "Docs/Classes/ARTSPlayerController/Variables/_7.html", [], "ARTSPlayerController");
addToContainers_variable("HoveredUIElement", "Widget the mouse is hovered over", "Docs/Classes/ARTSPlayerController/Variables/HoveredUIElement.html", ["hovered", "u", "i", "element"], "ARTSPlayerController");
addToContainers_variable("HighlightedButton", "The button on the UI that is \'highlighted\'. Null if no button is highlighted", "Docs/Classes/ARTSPlayerController/Variables/HighlightedButton.html", ["highlighted", "button"], "ARTSPlayerController");
addToContainers_variable("HoveredUserWidget", "", "Docs/Classes/ARTSPlayerController/Variables/HoveredUserWidget.html", ["hovered", "user", "widget"], "ARTSPlayerController");
addToContainers_variable("AccumulatedTimeSpentHoveringUIElement", "Time spent hovering a UI element", "Docs/Classes/ARTSPlayerController/Variables/AccumulatedTimeSpentHoveringUIEle.html", ["accumulated", "time", "spent", "hovering", "u", "i", "element"], "ARTSPlayerController");
addToContainers_variable("TimeSpentNotHoveringUIElement", "Time spent not hovering a UI element", "Docs/Classes/ARTSPlayerController/Variables/TimeSpentNotHoveringUIElement.html", ["time", "spent", "not", "hovering", "u", "i", "element"], "ARTSPlayerController");
addToContainers_variable("1", "Whether a tooltip for a UI element is showing", "Docs/Classes/ARTSPlayerController/Variables/1.html", [], "ARTSPlayerController");
addToContainers_variable("1", "", "Docs/Classes/ARTSPlayerController/Variables/1_1.html", [], "ARTSPlayerController");
addToContainers_variable("AccumulatedTimeSpentHoveringSelectable", "Time spent hovering a selectable", "Docs/Classes/ARTSPlayerController/Variables/AccumulatedTimeSpentHoveringSelec.html", ["accumulated", "time", "spent", "hovering", "selectable"], "ARTSPlayerController");
addToContainers_variable("TimeSpentNotHoveringSelectable", "Time spent not hovering a selectable", "Docs/Classes/ARTSPlayerController/Variables/TimeSpentNotHoveringSelectable.html", ["time", "spent", "not", "hovering", "selectable"], "ARTSPlayerController");
addToContainers_variable("", "A reference to the marquee box drawing HUD", "Docs/Classes/ARTSPlayerController/Variables/_8.html", [], "ARTSPlayerController");
addToContainers_variable("", "A reference to the faction info for the faction this player is currently controlling. Is just used for visual things currently like appearance of ghost building.", "Docs/Classes/ARTSPlayerController/Variables/_9.html", [], "ARTSPlayerController");
addToContainers_variable("Faction", "Faction this player controller is commanding", "Docs/Classes/ARTSPlayerController/Variables/Faction.html", [], "ARTSPlayerController");
addToContainers_variable("", "Pool of ghost buildings for our faction. To avoid spawn actor during match", "Docs/Classes/ARTSPlayerController/Variables/_10.html", [], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_Action", "If one of these are not \"None\" then the player wants to change one of their key bindings", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_Action.html", ["pending", "key", "rebind_", "action"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_Axis", "", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_Axis.html", ["pending", "key", "rebind_", "axis"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_bWaitingForConfirmation", "If true then the game is asking the player \"Are you sure you want to rebind this key?\" likely because there is a key mapping collision with another action", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_bWaitingForConfi.html", ["pending", "key", "rebind_b", "waiting", "for", "confirmation"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_PressedModifierFlags_Left", "Flags to keep track of what modifier keys are pressed while trying to rebind a key. Only meaningfull while trying to rebind a key. Do not query these at any other time. Use PlayerInput->IsCtrlPressed() etc instead. There are two sets of flags - one for modifier keys on the left of the keyboard and one for modifier keys on the right side of the keyboard", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_PressedModifierF.html", ["pending", "key", "rebind_", "pressed", "modifier", "flags_", "left"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_PressedModifierFlags_Right", "", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_PressedModifierF_1.html", ["pending", "key", "rebind_", "pressed", "modifier", "flags_", "right"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_KeyBindingsWidget", "The widget for key bindings. Can be null", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_KeyBindingsWidge.html", ["pending", "key", "rebind_", "key", "bindings", "widget"], "ARTSPlayerController");
addToContainers_variable("PendingKeyRebind_TimeSpentTryingToCancel", "If >= 0 then the player is holding the cancel key down while a key bind change is pending TODO move this closer to other variables used in tick", "Docs/Classes/ARTSPlayerController/Variables/PendingKeyRebind_TimeSpentTryingT.html", ["pending", "key", "rebind_", "time", "spent", "trying", "to", "cancel"], "ARTSPlayerController");
addToContainers_variable("", "Ctrl group TArray. Maps button pressed to array of selectables that are part of that ctrl group. Ctrl groups are NOT updated when the selectables they contain become invalid and/or reach zero health. This is because there are 10 groups with potentially a lot of selectables in each one and it would be too much of a hit to performance. Instead you will have to check validity/health of each entry before using it. I don\'t really know what is best here - either hard pointers, weak pointers or using the selectableIDs in terms of performance, keeping GC in mind", "Docs/Classes/ARTSPlayerController/Variables/_11.html", [], "ARTSPlayerController");
addToContainers_variable("LastSelectControlGroupButtonReleased", "The last number button that was released from being pressed. Here to detect double presses", "Docs/Classes/ARTSPlayerController/Variables/LastSelectControlGroupButtonRelea.html", ["last", "select", "control", "group", "button", "released"], "ARTSPlayerController");
addToContainers_variable("LastSelectControlGroupButtonReleaseTime", "The time the last number button press was released", "Docs/Classes/ARTSPlayerController/Variables/LastSelectControlGroupButtonRelea_1.html", ["last", "select", "control", "group", "button", "release", "time"], "ARTSPlayerController");
addToContainers_variable("bWasLastSelectControlGroupButtonPressADoublePress", "", "Docs/Classes/ARTSPlayerController/Variables/bWasLastSelectControlGroupButtonP.html", ["was", "last", "select", "control", "group", "button", "press", "a", "double", "press"], "ARTSPlayerController");
addToContainers_variable("", "Reference to players camera pawn during a match", "Docs/Classes/ARTSPlayerController/Variables/_12.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to ghost building", "Docs/Classes/ARTSPlayerController/Variables/_13.html", [], "ARTSPlayerController");
addToContainers_variable("bNeedToRecordGhostLocOnNextTick", "Here to delay recording the screen location of ghost until tick. Recording it on LMB press may give slightly off value, but haven\'t tested if this is the case", "Docs/Classes/ARTSPlayerController/Variables/bNeedToRecordGhostLocOnNextTick.html", ["need", "to", "record", "ghost", "loc", "on", "next", "tick"], "ARTSPlayerController");
addToContainers_variable("bIsGhostRotationActive", "True if mouse has moved at least GhostRotationRadius", "Docs/Classes/ARTSPlayerController/Variables/bIsGhostRotationActive.html", ["is", "ghost", "rotation", "active"], "ARTSPlayerController");
addToContainers_variable("GhostScreenSpaceLoc", "The screen location of the ghost building. Should not change while rotating ghost. Will be updated before calling RotateGhost", "Docs/Classes/ARTSPlayerController/Variables/GhostScreenSpaceLoc.html", ["ghost", "screen", "space", "loc"], "ARTSPlayerController");
addToContainers_variable("GhostRotationRadius", "The larger this is the more you have to move the mouse to rotate ghost. Small values mean the ghost building can sometimes rotate undesirably when trying to actually place it", "Docs/Classes/ARTSPlayerController/Variables/GhostRotationRadius.html", ["ghost", "rotation", "radius"], "ARTSPlayerController");
addToContainers_variable("GhostRotationSpeed", "Higher values mean ghost rotates faster", "Docs/Classes/ARTSPlayerController/Variables/GhostRotationSpeed.html", ["ghost", "rotation", "speed"], "ARTSPlayerController");
addToContainers_variable("GhostRotationDirection", "The way the ghost is currently rotating", "Docs/Classes/ARTSPlayerController/Variables/GhostRotationDirection.html", ["ghost", "rotation", "direction"], "ARTSPlayerController");
addToContainers_variable("GhostAccumulatedMovementTowardsDirection", "This is used to decide if ghost rotation direction should change. When negative mouse movement is in a direction that should cause rotation in the opposite direction then this number will be decreased, while movement in the current direction will increase it (up to a certain limit)", "Docs/Classes/ARTSPlayerController/Variables/GhostAccumulatedMovementTowardsDi.html", ["ghost", "accumulated", "movement", "towards", "direction"], "ARTSPlayerController");
addToContainers_variable("bIsCameraFreeLookEnabled", "True if the player can rotate the camera with mouse movement. By default this is the middle mouse button", "Docs/Classes/ARTSPlayerController/Variables/bIsCameraFreeLookEnabled.html", ["is", "camera", "free", "look", "enabled"], "ARTSPlayerController");
addToContainers_variable("MouseLocLastFrame", "Screen space location of mouse in previous frame or when the LMB was pressed", "Docs/Classes/ARTSPlayerController/Variables/MouseLocLastFrame.html", ["mouse", "loc", "last", "frame"], "ARTSPlayerController");
addToContainers_variable("MouseLocThisFrame", "Screen space location", "Docs/Classes/ARTSPlayerController/Variables/MouseLocThisFrame.html", ["mouse", "loc", "this", "frame"], "ARTSPlayerController");
addToContainers_variable("MaxLineTraceDistance", "Max distance that GetHitResultUnderCursorByChannel will consider it a hit", "Docs/Classes/ARTSPlayerController/Variables/MaxLineTraceDistance.html", ["max", "line", "trace", "distance"], "ARTSPlayerController");
addToContainers_variable("", "Array of widgets currently being displayed (excluding any shown with ShowWidget where 2nd param is false, for example HUD). .Last() is the widget being displayed right now", "Docs/Classes/ARTSPlayerController/Variables/_14.html", [], "ARTSPlayerController");
addToContainers_variable("", "Holds already created widgets", "Docs/Classes/ARTSPlayerController/Variables/_15.html", [], "ARTSPlayerController");
addToContainers_variable("HitResult", "Hit result for trace under mouse on tick", "Docs/Classes/ARTSPlayerController/Variables/HitResult.html", ["hit", "result"], "ARTSPlayerController");
addToContainers_variable("", "Object under mouse on tick. Used for example to highlight selectables under mouse", "Docs/Classes/ARTSPlayerController/Variables/_16.html", [], "ARTSPlayerController");
addToContainers_variable("", "The object under the mouse when it is pressed. Needs to be the same object under mouse when LMB is released for it to get selected.", "Docs/Classes/ARTSPlayerController/Variables/_17.html", [], "ARTSPlayerController");
addToContainers_variable("bIsLMBPressed", "True if LMB is currently held down", "Docs/Classes/ARTSPlayerController/Variables/bIsLMBPressed.html", ["is", "l", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("bWantsMarquee", "Used in On_Mouse_Move_X/Y to know whether we should consider maequee selection to be active or not", "Docs/Classes/ARTSPlayerController/Variables/bWantsMarquee.html", ["wants", "marquee"], "ARTSPlayerController");
addToContainers_variable("bIsMarqueeActive", "True if marquee selection is active", "Docs/Classes/ARTSPlayerController/Variables/bIsMarqueeActive.html", ["is", "marquee", "active"], "ARTSPlayerController");
addToContainers_variable("ButtonPressedOnLMBPressed", "The button that was pressed/released with the mouse button", "Docs/Classes/ARTSPlayerController/Variables/ButtonPressedOnLMBPressed.html", ["button", "pressed", "on", "l", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("ButtonPressedOnRMBPressed", "", "Docs/Classes/ARTSPlayerController/Variables/ButtonPressedOnRMBPressed.html", ["button", "pressed", "on", "r", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("MouseMovement", "How far the mouse has moved since it was clicked", "Docs/Classes/ARTSPlayerController/Variables/MouseMovement.html", ["mouse", "movement"], "ARTSPlayerController");
addToContainers_variable("MouseMovementThreshold", "How far mouse is can move before it is no longer considered a click. Used by marquee selection", "Docs/Classes/ARTSPlayerController/Variables/MouseMovementThreshold.html", ["mouse", "movement", "threshold"], "ARTSPlayerController");
addToContainers_variable("PlayerID", "ID of player. Used to determine what is under control by this player. Assigned on PostLogin", "Docs/Classes/ARTSPlayerController/Variables/PlayerID.html", ["player", "i", "d"], "ARTSPlayerController");
addToContainers_variable("", "Spawned decal to be drawn under mouse cursor. This is not the mouse cursor itself but a decal for context actions that have an AoE. If this is null then no decal will de drawn.", "Docs/Classes/ARTSPlayerController/Variables/_18.html", [], "ARTSPlayerController");
addToContainers_variable("DefaultCursor", "Pointer to mouse cursor that is considered the default cursor. If null then no custom cursor has been set. In that case problems will arise if the cursor changes while doing an ability because the cursor will have nothing to revert back to, so if using custom cursors for abilities then this will need to be non null.", "Docs/Classes/ARTSPlayerController/Variables/DefaultCursor.html", ["default", "cursor"], "ARTSPlayerController");
addToContainers_variable("ScreenLocationCurrentCursor", "I could not think of a better name. This is the cursor that is considered the default given where the mouse is taking into account: - edge scrolling - hovering a UI element So if the mouse is at the edge of the screen then this will be set to one of the edge scrolling cursors. This does not take into account abilities", "Docs/Classes/ARTSPlayerController/Variables/ScreenLocationCurrentCursor.html", ["screen", "location", "current", "cursor"], "ARTSPlayerController");
addToContainers_variable("CurrentCursor", "Pointer to currently set mouse cursor", "Docs/Classes/ARTSPlayerController/Variables/CurrentCursor.html", ["current", "cursor"], "ARTSPlayerController");
addToContainers_variable("", "Size of decal drawn under mouse for Z axis only. Higher values means less performance but the decal will draw up/down slopes better.", "Docs/Classes/ARTSPlayerController/Variables/_19.html", [], "ARTSPlayerController");
addToContainers_variable("PendingContextAction", "The action that requires more than just pressing the context button to carry out. Added \'_A\' onto name for a temporary name change, change it back. All the other pending action variables are irrelevant if this equals \"None\"", "Docs/Classes/ARTSPlayerController/Variables/PendingContextAction.html", ["pending", "context", "action"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionUseMethod", "How the pending context action is being carried out", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionUseMethod.html", ["pending", "context", "action", "use", "method"], "ARTSPlayerController");
addToContainers_variable("GhostInstigatorID", "[Client] If pending context action is to place ghost building, the ID of the selectable that wants to place the building. 0 means no selectable. Will only be non-zero if building is being placed from a context menu. This is sent with Server_PlaceBuilding. If building is placed successfully then on confirmation RPC unit with this ID will be ordered to go over and start working on building", "Docs/Classes/ARTSPlayerController/Variables/GhostInstigatorID.html", ["ghost", "instigator", "i", "d"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionAuxilleryData", "Data that is needed by pending context command. One time this is used is when using inventory items we store the item type here. May be possible to actually remove GhostInstigatorID and make it use this instead", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionAuxilleryData.html", ["pending", "context", "action", "auxillery", "data"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionMoreAuxilleryData", "For inventory item use I store the inventory slot index here (the index the server likes i.e. the index in FInventory::SlotsArray)", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionMoreAuxillery.html", ["pending", "context", "action", "more", "auxillery", "data"], "ARTSPlayerController");
addToContainers_variable("bHasPrimarySelectedChanged", "Whether from the time we made the ability pending the primary selected has changed to something else. I think I have currently coded it so this variable will be set to true if the primary selected is the only selectable selected and it gets removed from Selected", "Docs/Classes/ARTSPlayerController/Variables/bHasPrimarySelectedChanged.html", ["has", "primary", "selected", "changed"], "ARTSPlayerController");
addToContainers_variable("PendingContextActionAuxilleryDataPtr", "Pointer to something that is needed for carrying out the pending context command. Currently this is only used to point to an inventory slot", "Docs/Classes/ARTSPlayerController/Variables/PendingContextActionAuxilleryData_1.html", ["pending", "context", "action", "auxillery", "data", "ptr"], "ARTSPlayerController");
addToContainers_variable("PendingCommanderAbility", "Pointer to the pending commander ability. Will be null if there is none", "Docs/Classes/ARTSPlayerController/Variables/PendingCommanderAbility.html", ["pending", "commander", "ability"], "ARTSPlayerController");
addToContainers_variable("TimeOfLastSelection_Owned", "World time when last selection of an owned selectable was made", "Docs/Classes/ARTSPlayerController/Variables/TimeOfLastSelection_Owned.html", ["time", "of", "last", "selection_", "owned"], "ARTSPlayerController");
addToContainers_variable("", "All selected units/buildings. The selectable whose context menu will be shown in in index 0", "Docs/Classes/ARTSPlayerController/Variables/_20.html", [], "ARTSPlayerController");
addToContainers_variable("", "Selected unit/building whose context menu is showing. This only needs to be updated on the client", "Docs/Classes/ARTSPlayerController/Variables/_21.html", [], "ARTSPlayerController");
addToContainers_variable("", "Set of IDs of each selected selectable. Whenever selection changes this should be updated. Empty if selection is not owned", "Docs/Classes/ARTSPlayerController/Variables/_22.html", [], "ARTSPlayerController");
addToContainers_variable("", "Array of selectable IDs for selectables that were last given orders. Used to reduce size of RPCs for commands by allowing a \'selection has not changed\' signal to be sent instead of sending all the selectables\' IDs", "Docs/Classes/ARTSPlayerController/Variables/_23.html", [], "ARTSPlayerController");
addToContainers_variable("", "This is mainly here to speed up performance in tick. It will be populated when a non-issuedInstantly context button is pressed. It contains all the selectables that are selected and have the PendingContextAction in their context menu. If PendingContextAction is only ment to be issued to the CurrentSelected then it should only contain the CurrentSelected (but that behavior has been depreciated). Haven\'t decided whether we can assume entries are valid or not. Currently this is only updated on a context button click therefore validity of each element will need to be checked whenever accessing them This array is updated on clients (not just remote clients) so sending an RPC across the wire that relies on this being up to date will not work. May decide to get rid of this array. Main implication would be that now whenever we have a 2 click context command pending we will need to iterate the whole of Selected and check which selectables support the action", "Docs/Classes/ARTSPlayerController/Variables/_24.html", [], "ARTSPlayerController");
addToContainers_variable("", "Reference to fog of war manager. On clients this only affects rendering. On server it affects rendering and also calculates which buildings/units can see what", "Docs/Classes/ARTSPlayerController/Variables/_25.html", [], "ARTSPlayerController");
addToContainers_variable("bShowingUIButtonPressedImage", "This variable is for the unified mouse hovered/pressed effects. If true then we a re showing the pressed image over some button", "Docs/Classes/ARTSPlayerController/Variables/bShowingUIButtonPressedImage.html", ["showing", "u", "i", "button", "pressed", "image"], "ARTSPlayerController");
addToContainers_variable("UNKNOWN_PLAYER_NAME", "What player name to use when we can\'t figure out who sent the message", "Docs/Classes/ARTSPlayerController/Variables/UNKNOWN_PLAYER_NAME.html", ["n", "k", "n", "o", "w", "n_", "p", "l", "a", "y", "e", "r_", "n", "a", "m", "e"], "ARTSPlayerController");
addToContainers_variable("LobbySlotIndex", "Slot in lobby this player is in", "Docs/Classes/ARTSPlayerController/Variables/LobbySlotIndex.html", ["lobby", "slot", "index"], "ARTSPlayerController");
addToContainers_variable("CameraMoveSpeed", "Camera move speed when using keyboard. Limited by camera\'s movement component\'s max speed, which I\'ve just set really big", "Docs/Classes/ARTSPlayerController/Variables/CameraMoveSpeed.html", ["camera", "move", "speed"], "ARTSPlayerController");
addToContainers_variable("CameraEdgeMoveSpeed", "Camera move speed when moving mouse to edge of screen. Limited by camera\'s movement component\'s max speed, which I\'ve just set really big", "Docs/Classes/ARTSPlayerController/Variables/CameraEdgeMoveSpeed.html", ["camera", "edge", "move", "speed"], "ARTSPlayerController");
addToContainers_variable("CameraEdgeThreshold", "How close to the edge the mouse has to be to allow movement 0.05 = within 5% of screen edge", "Docs/Classes/ARTSPlayerController/Variables/CameraEdgeThreshold.html", ["camera", "edge", "threshold"], "ARTSPlayerController");
addToContainers_variable("CameraZoomIncrementalAmount", "How much to zoom in/out by when scrolling mouse wheel", "Docs/Classes/ARTSPlayerController/Variables/CameraZoomIncrementalAmount.html", ["camera", "zoom", "incremental", "amount"], "ARTSPlayerController");
addToContainers_variable("", "Curve for zooming camera", "Docs/Classes/ARTSPlayerController/Variables/_26.html", [], "ARTSPlayerController");
addToContainers_variable("CameraZoomSpeed", "Speed camera zooms in/out", "Docs/Classes/ARTSPlayerController/Variables/CameraZoomSpeed.html", ["camera", "zoom", "speed"], "ARTSPlayerController");
addToContainers_variable("NumPendingScrollZooms", "Positive means pending zoom out, negative means pending zoom in. 0 means stop zooming", "Docs/Classes/ARTSPlayerController/Variables/NumPendingScrollZooms.html", ["num", "pending", "scroll", "zooms"], "ARTSPlayerController");
addToContainers_variable("DefaultCameraRotation", "The rotation to set to camera at start of match and also the rotation to return to when pressing a \'return to default rotation\' button", "Docs/Classes/ARTSPlayerController/Variables/DefaultCameraRotation.html", ["default", "camera", "rotation"], "ARTSPlayerController");
addToContainers_variable("DefaultCameraZoomAmount", "The zoom amount to start the match at and also the zoom amount to return to when pressing a \'return to default zoom\' button", "Docs/Classes/ARTSPlayerController/Variables/DefaultCameraZoomAmount.html", ["default", "camera", "zoom", "amount"], "ARTSPlayerController");
addToContainers_variable("ResetCameraCurve", "Curve to use to transition from current camera rotation/zoom to defaults. Can be left null and transition will happen instantly X axis = base time to complete zoom. Will be multiplied by ResetCameraToDefaultRate. Good to make it at least from 0 to 1 and adjust ResetCameraToDefaultRate to get desired time taken Y axis = Lerp amount, range should be from 0 to 1", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraCurve.html", ["reset", "camera", "curve"], "ARTSPlayerController");
addToContainers_variable("ResetCameraToDefaultRate", "Speed camera resets to default rotation/zoom", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraToDefaultRate.html", ["reset", "camera", "to", "default", "rate"], "ARTSPlayerController");
addToContainers_variable("ViewportSize_Y", "Size of viewport in pixels (I think) but as a float", "Docs/Classes/ARTSPlayerController/Variables/ViewportSize_Y.html", ["viewport", "size_", "y"], "ARTSPlayerController");
addToContainers_variable("bIsForwardBackwardCameraMovementKeyPressed", "By default these are the WASD keys but can be changed ", "Docs/Classes/ARTSPlayerController/Variables/bIsForwardBackwardCameraMovementK.html", ["is", "forward", "backward", "camera", "movement", "key", "pressed"], "ARTSPlayerController");
addToContainers_variable("bIsResettingCameraRotation", "True if \'reset camera rotation\' button was pressed recently. Tell mouse movement func to ignore changing control rotation", "Docs/Classes/ARTSPlayerController/Variables/bIsResettingCameraRotation.html", ["is", "resetting", "camera", "rotation"], "ARTSPlayerController");
addToContainers_variable("MouseWheelZoomCurveAccumulatedTime", "Amount of time through CameraMouseWheelZoomCurve", "Docs/Classes/ARTSPlayerController/Variables/MouseWheelZoomCurveAccumulatedTim.html", ["mouse", "wheel", "zoom", "curve", "accumulated", "time"], "ARTSPlayerController");
addToContainers_variable("MouseWheelZoomCurveMax", "X axis values I presume", "Docs/Classes/ARTSPlayerController/Variables/MouseWheelZoomCurveMax.html", ["mouse", "wheel", "zoom", "curve", "max"], "ARTSPlayerController");
addToContainers_variable("bIsResettingCameraZoom", "True if \'reset camera zoom\' button was pressed recently. Tell mouse wheel func to ignore zooming", "Docs/Classes/ARTSPlayerController/Variables/bIsResettingCameraZoom.html", ["is", "resetting", "camera", "zoom"], "ARTSPlayerController");
addToContainers_variable("ResetCameraCurveAccumulatedTime", "Amount of time through ResetCameraCurve", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraCurveAccumulatedTime.html", ["reset", "camera", "curve", "accumulated", "time"], "ARTSPlayerController");
addToContainers_variable("ResetCameraCurveMax", "", "Docs/Classes/ARTSPlayerController/Variables/ResetCameraCurveMax.html", ["reset", "camera", "curve", "max"], "ARTSPlayerController");
addToContainers_variable("StartResetRotation", "Control rotation when request to reset rotation was made so lerp can work", "Docs/Classes/ARTSPlayerController/Variables/StartResetRotation.html", ["start", "reset", "rotation"], "ARTSPlayerController");
addToContainers_variable("TargetResetRotation", "The rotation camera is trying to reset to. If this equals current control rotation then no change needs to be done", "Docs/Classes/ARTSPlayerController/Variables/TargetResetRotation.html", ["target", "reset", "rotation"], "ARTSPlayerController");
addToContainers_variable("StartZoomAmount", "Camera zoom when request to change zoom is initiated. Here os lerp can work", "Docs/Classes/ARTSPlayerController/Variables/StartZoomAmount.html", ["start", "zoom", "amount"], "ARTSPlayerController");
addToContainers_variable("TargetZoomAmount", "Same as above but for camera zoom", "Docs/Classes/ARTSPlayerController/Variables/TargetZoomAmount.html", ["target", "zoom", "amount"], "ARTSPlayerController");
addToContainers_variable("", "Not sure if WITH_EDITOR or WITH_EDITORONLY_DATA is the right thing to use here. Will see whether stuff compiles and works", "Docs/Classes/ARTSPlayerController/Variables/_27.html", [], "ARTSPlayerController");
addToContainers_variable("Development_bIsLMBPressed", "", "Docs/Classes/ARTSPlayerController/Variables/Development_bIsLMBPressed.html", ["development_b", "is", "l", "m", "b", "pressed"], "ARTSPlayerController");
addToContainers_variable("DevelopmentInputIntercept_LMBPress", "", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentInputIntercept_LMBPres.html", ["development", "input", "intercept_", "l", "m", "b", "press"], "ARTSPlayerController");
addToContainers_variable("DevelopmentInputIntercept_LMBRelease", "", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentInputIntercept_LMBRele.html", ["development", "input", "intercept_", "l", "m", "b", "release"], "ARTSPlayerController");
addToContainers_variable("DevelopmentInputIntercept_RMBPress", "", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentInputIntercept_RMBPres.html", ["development", "input", "intercept_", "r", "m", "b", "press"], "ARTSPlayerController");
addToContainers_variable("DevelopmentWidgetAuxilleryData", "Auxillery data that may be needed by the action e.g. an item type if we are giving an item to a selectable", "Docs/Classes/ARTSPlayerController/Variables/DevelopmentWidgetAuxilleryData.html", ["development", "widget", "auxillery", "data"], "ARTSPlayerController");
addToContainers_struct("FUpgradeTypeArray", "Array of EUpgradeType. Where I use this we could replace with a TSet. The only reason it is an array is that the ArePrerequisitesMet func that returns the type of missing prereq would require getting an element from the TSet which I assume reqires iteration of it. In fact I could even use an int32 instead of this struct if the ArePrerequisitesMet that returns the missing upgrade type didn\'t exist.", "Docs/Structs/FUpgradeTypeArray/FUpgradeTypeArray.html", ["upgrade", "type", "array"], "");
addToContainers_function("FUpgradeTypeArray", "", "Docs/Structs/FUpgradeTypeArray/Functions/FUpgradeTypeArray.html", ["upgrade", "type", "array"], "FUpgradeTypeArray");
addToContainers_variable("Array", "", "Docs/Structs/FUpgradeTypeArray/Variables/Array.html", [], "FUpgradeTypeArray");
addToContainers_struct("FBuildingSet", "A simple struct that holds a TSet as a workaround for non-2D TArrays", "Docs/Structs/FBuildingSet/FBuildingSet.html", ["building", "set"], "");
addToContainers_function("GetSet", "", "Docs/Structs/FBuildingSet/Functions/GetSet.html", ["get", "set"], "FBuildingSet");
addToContainers_function("AddBuilding", "", "Docs/Structs/FBuildingSet/Functions/AddBuilding.html", ["add", "building"], "FBuildingSet");
addToContainers_function("RemoveBuilding", "", "Docs/Structs/FBuildingSet/Functions/RemoveBuilding.html", ["remove", "building"], "FBuildingSet");
addToContainers_variable("", "", "Docs/Structs/FBuildingSet/Variables/.html", [], "FBuildingSet");
addToContainers_struct("FBuildingArray", "Array of buildings as aworkaround for non-2D TArrays", "Docs/Structs/FBuildingArray/FBuildingArray.html", ["building", "array"], "");
addToContainers_function("GetArray", "", "Docs/Structs/FBuildingArray/Functions/GetArray.html", ["get", "array"], "FBuildingArray");
addToContainers_function("AddBuilding", "", "Docs/Structs/FBuildingArray/Functions/AddBuilding.html", ["add", "building"], "FBuildingArray");
addToContainers_function("RemoveBuilding", "", "Docs/Structs/FBuildingArray/Functions/RemoveBuilding.html", ["remove", "building"], "FBuildingArray");
addToContainers_variable("", "", "Docs/Structs/FBuildingArray/Variables/.html", [], "FBuildingArray");
addToContainers_class("ARTSPlayerState", "RTS Player state. Used by both human players and CPU players", "Docs/Classes/ARTSPlayerState/ARTSPlayerState.html", ["r", "t", "s", "player", "state"], "");
addToContainers_function("ARTSPlayerState", "", "Docs/Classes/ARTSPlayerState/Functions/ARTSPlayerState.html", ["r", "t", "s", "player", "state"], "ARTSPlayerState");
addToContainers_function("BeginPlay", "", "Docs/Classes/ARTSPlayerState/Functions/BeginPlay.html", ["begin", "play"], "ARTSPlayerState");
addToContainers_function("PreReplication", "-----------------------------------------", "Docs/Classes/ARTSPlayerState/Functions/PreReplication.html", ["pre", "replication"], "ARTSPlayerState");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/ARTSPlayerState/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "ARTSPlayerState");
addToContainers_function("UpdateClosestDepots", "Update each resource spots closest depot for this player. Should be called when a new resource depot is built @param ResourceType - resource type building is a depot for @param Building - The building that just finshed construction @pararm bWasBuilt - true if building was just built, false if it was just destroyed", "Docs/Classes/ARTSPlayerState/Functions/UpdateClosestDepots.html", ["update", "closest", "depots"], "ARTSPlayerState");
addToContainers_function("GetProductionBuilding", "Get building to build from when clicking a HUD persistent tab button like in C&C. @param Button - button that was clicked on @param bShowHUDWarning - whether to try and show a warning message on the HUD if no queue could be found @param OutQueueType - the type of production queue that was chosen, or None if no queue could be found", "Docs/Classes/ARTSPlayerState/Functions/GetProductionBuilding.html", ["get", "production", "building"], "ARTSPlayerState");
addToContainers_function("GetReplicatedResourceVariable", "Since I\'m using a single hardcoded variable for each resource type, get a reference to that variable", "Docs/Classes/ARTSPlayerState/Functions/GetReplicatedResourceVariable.html", ["get", "replicated", "resource", "variable"], "ARTSPlayerState");
addToContainers_function("void", "", "Docs/Classes/ARTSPlayerState/Functions/void.html", [], "ARTSPlayerState");
addToContainers_function("GetReplicatedResourceOnRepFunction_DEPRECIATED", "Return pointer to OnRep function for a replicated resource variable", "Docs/Classes/ARTSPlayerState/Functions/GetReplicatedResourceOnRepFunctio.html", ["get", "replicated", "resource", "on", "rep", "function_", "d", "e", "p", "r", "e", "c", "i", "a", "t", "e", "d"], "ARTSPlayerState");
addToContainers_function("GetReplicatedResourceOnRepFunction", "", "Docs/Classes/ARTSPlayerState/Functions/GetReplicatedResourceOnRepFunctio_1.html", ["get", "replicated", "resource", "on", "rep", "function"], "ARTSPlayerState");
addToContainers_function("ResourceTypeToArrayIndex", "~ Functions to convert between int32 and EResourceType", "Docs/Classes/ARTSPlayerState/Functions/ResourceTypeToArrayIndex.html", ["resource", "type", "to", "array", "index"], "ARTSPlayerState");
addToContainers_function("ArrayIndexToResourceType", "", "Docs/Classes/ARTSPlayerState/Functions/ArrayIndexToResourceType.html", ["array", "index", "to", "resource", "type"], "ARTSPlayerState");
addToContainers_function("OnRep_ResourcesCash", "", "Docs/Classes/ARTSPlayerState/Functions/OnRep_ResourcesCash.html", ["on", "rep_", "resources", "cash"], "ARTSPlayerState");
addToContainers_function("OnRep_ResourcesSand", "", "Docs/Classes/ARTSPlayerState/Functions/OnRep_ResourcesSand.html", ["on", "rep_", "resources", "sand"], "ARTSPlayerState");
addToContainers_function("Server_PostResourceChange_Cash", "These are similar to the OnRep_Resources... functions", "Docs/Classes/ARTSPlayerState/Functions/Server_PostResourceChange_Cash.html", ["server_", "post", "resource", "change_", "cash"], "ARTSPlayerState");
addToContainers_function("Server_PostResourceChange_Sand", "", "Docs/Classes/ARTSPlayerState/Functions/Server_PostResourceChange_Sand.html", ["server_", "post", "resource", "change_", "sand"], "ARTSPlayerState");
addToContainers_function("OnRep_Experience", "", "Docs/Classes/ARTSPlayerState/Functions/OnRep_Experience.html", ["on", "rep_", "experience"], "ARTSPlayerState");
addToContainers_function("OnLevelUp_NotLastForEvent", "Called when the player gains a rank @param LevelGainedsInfo - info struct for the level that was gained", "Docs/Classes/ARTSPlayerState/Functions/OnLevelUp_NotLastForEvent.html", ["on", "level", "up_", "not", "last", "for", "event"], "ARTSPlayerState");
addToContainers_function("OnLevelUp_LastForEvent", "", "Docs/Classes/ARTSPlayerState/Functions/OnLevelUp_LastForEvent.html", ["on", "level", "up_", "last", "for", "event"], "ARTSPlayerState");
addToContainers_function("InitIDQueue", "[Server] Initialize the selectable ID queue", "Docs/Classes/ARTSPlayerState/Functions/InitIDQueue.html", ["init", "i", "d", "queue"], "ARTSPlayerState");
addToContainers_function("Client_ShowHUDNotificationMessage", "Send RPC to show a game message on the HUD", "Docs/Classes/ARTSPlayerState/Functions/Client_ShowHUDNotificationMessage.html", ["client_", "show", "h", "u", "d", "notification", "message"], "ARTSPlayerState");
addToContainers_function("CanShowGameWarning", "Called in OnGameWarningHappened. Return whether a game warning should be shown on the HUD or not. This is here to throttle the number of warnings that appear on HUD and to keep server-to-client bandwidth low", "Docs/Classes/ARTSPlayerState/Functions/CanShowGameWarning.html", ["can", "show", "game", "warning"], "ARTSPlayerState");
addToContainers_function("CanShowGameWarning", "Version for custom ability requirements", "Docs/Classes/ARTSPlayerState/Functions/CanShowGameWarning_1.html", ["can", "show", "game", "warning"], "ARTSPlayerState");
addToContainers_function("Client_OnGameWarningHappened", "Send RPC to client to show game message on HUD", "Docs/Classes/ARTSPlayerState/Functions/Client_OnGameWarningHappened.html", ["client_", "on", "game", "warning", "happened"], "ARTSPlayerState");
addToContainers_function("Client_OnGameWarningHappenedAbility", "", "Docs/Classes/ARTSPlayerState/Functions/Client_OnGameWarningHappenedAbili.html", ["client_", "on", "game", "warning", "happened", "ability"], "ARTSPlayerState");
addToContainers_function("Client_OnGameWarningHappenedMissingResource", "Send RPC to client to show a \"not enough of a resource\" type message", "Docs/Classes/ARTSPlayerState/Functions/Client_OnGameWarningHappenedMissi.html", ["client_", "on", "game", "warning", "happened", "missing", "resource"], "ARTSPlayerState");
addToContainers_function("Client_OnGameWarningHappenedMissingHousingResource", "", "Docs/Classes/ARTSPlayerState/Functions/Client_OnGameWarningHappenedMissi_1.html", ["client_", "on", "game", "warning", "happened", "missing", "housing", "resource"], "ARTSPlayerState");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/ARTSPlayerState/Functions/Delay).html", [], "ARTSPlayerState");
addToContainers_function("DoNothing", "", "Docs/Classes/ARTSPlayerState/Functions/DoNothing.html", ["do", "nothing"], "ARTSPlayerState");
addToContainers_function("StartAbilitysCooldownTimer", "", "Docs/Classes/ARTSPlayerState/Functions/StartAbilitysCooldownTimer.html", ["start", "abilitys", "cooldown", "timer"], "ARTSPlayerState");
addToContainers_function("OnItemAddedToAProductionQueue", "Called when an item is added to any production queue this player owns. Whether it was the 1st or 100th item to be added to the queue this is called. Called by both server and owning client only @param Item - Item that represents the item that was added to the queue", "Docs/Classes/ARTSPlayerState/Functions/OnItemAddedToAProductionQueue.html", ["on", "item", "added", "to", "a", "production", "queue"], "ARTSPlayerState");
addToContainers_function("OnItemRemovedFromAProductionQueue", "Called when an item is removed from any production queue this player owns Called by both server and owning client only @param Item - the item that was removed", "Docs/Classes/ARTSPlayerState/Functions/OnItemRemovedFromAProductionQueue.html", ["on", "item", "removed", "from", "a", "production", "queue"], "ARTSPlayerState");
addToContainers_function("OnBuildingPlaced", "Call from building when placed", "Docs/Classes/ARTSPlayerState/Functions/OnBuildingPlaced.html", ["on", "building", "placed"], "ARTSPlayerState");
addToContainers_function("OnBuildingBuilt", "Call from building when has finished construction. @param Building - building that was just built @param CreationMethod - how the building was created", "Docs/Classes/ARTSPlayerState/Functions/OnBuildingBuilt.html", ["on", "building", "built"], "ARTSPlayerState");
addToContainers_function("OnBuildingZeroHealth", "Call from building when it reaches zero health", "Docs/Classes/ARTSPlayerState/Functions/OnBuildingZeroHealth.html", ["on", "building", "zero", "health"], "ARTSPlayerState");
addToContainers_function("OnBuildingDestroyed", "Call when a building is considered destroyed", "Docs/Classes/ARTSPlayerState/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "ARTSPlayerState");
addToContainers_function("RemoveBuildingFromBuildingsContainer", "", "Docs/Classes/ARTSPlayerState/Functions/RemoveBuildingFromBuildingsContai.html", ["remove", "building", "from", "buildings", "container"], "ARTSPlayerState");
addToContainers_function("OnUnitBuilt", "Call when a unit is built @param Unit - unit that was just built @param UnitType - type of unit just built for convenience @param CreationMethod - way the infantry was spawned", "Docs/Classes/ARTSPlayerState/Functions/OnUnitBuilt.html", ["on", "unit", "built"], "ARTSPlayerState");
addToContainers_function("OnUnitDestroyed", "Call when a unit is destroyed. Removes unit from Units container and frees up their selectable ID", "Docs/Classes/ARTSPlayerState/Functions/OnUnitDestroyed.html", ["on", "unit", "destroyed"], "ARTSPlayerState");
addToContainers_function("Setup_OnUnitDestroyed", "Only called during faction info creation", "Docs/Classes/ARTSPlayerState/Functions/Setup_OnUnitDestroyed.html", ["setup_", "on", "unit", "destroyed"], "ARTSPlayerState");
addToContainers_function("Server_SetInitialValues", "Sets some values", "Docs/Classes/ARTSPlayerState/Functions/Server_SetInitialValues.html", ["server_", "set", "initial", "values"], "ARTSPlayerState");
addToContainers_function("Multicast_SetInitialValues", "Basically the same as Server_SetInitialValues but sends changes to every client. The variables set with the server version are replicated but we need a 100% sure confirmation that they have been received so RPC is used", "Docs/Classes/ARTSPlayerState/Functions/Multicast_SetInitialValues.html", ["multicast_", "set", "initial", "values"], "ARTSPlayerState");
addToContainers_function("SetStartLocation", "Set the world location where the player starts", "Docs/Classes/ARTSPlayerState/Functions/SetStartLocation.html", ["set", "start", "location"], "ARTSPlayerState");
addToContainers_function("Client_FinalSetup", "Before match setup anything that requires all info about all players to be known. Great place to put anything you want to do before match starts", "Docs/Classes/ARTSPlayerState/Functions/Client_FinalSetup.html", ["client_", "final", "setup"], "ARTSPlayerState");
addToContainers_function("BelongsToLocalPlayer", "Returns true if this player state belongs to the local player", "Docs/Classes/ARTSPlayerState/Functions/BelongsToLocalPlayer.html", ["belongs", "to", "local", "player"], "ARTSPlayerState");
addToContainers_function("HasBeenDefeated", "", "Docs/Classes/ARTSPlayerState/Functions/HasBeenDefeated.html", ["has", "been", "defeated"], "ARTSPlayerState");
addToContainers_function("SetupUpgradeManager", "Setup upgrade manager", "Docs/Classes/ARTSPlayerState/Functions/SetupUpgradeManager.html", ["setup", "upgrade", "manager"], "ARTSPlayerState");
addToContainers_function("BusyWaitForSetupToComplete", "Constantly check if setup has fully completed", "Docs/Classes/ARTSPlayerState/Functions/BusyWaitForSetupToComplete.html", ["busy", "wait", "for", "setup", "to", "complete"], "ARTSPlayerState");
addToContainers_function("HasFullySetup", "Return whether this player state has fully setup, everything has repped and is ready to be used in a match", "Docs/Classes/ARTSPlayerState/Functions/HasFullySetup.html", ["has", "fully", "setup"], "ARTSPlayerState");
addToContainers_function("Server_SetInitialResourceAmounts", "[Private] Set the amount of resource to have at the start of the match", "Docs/Classes/ARTSPlayerState/Functions/Server_SetInitialResourceAmounts.html", ["server_", "set", "initial", "resource", "amounts"], "ARTSPlayerState");
addToContainers_function("Server_AckFinalSetupComplete", "Send ack that Client_FinalSetup has completed", "Docs/Classes/ARTSPlayerState/Functions/Server_AckFinalSetupComplete.html", ["server_", "ack", "final", "setup", "complete"], "ARTSPlayerState");
addToContainers_function("Client_SetInitialResourceAmounts", "Setup resource arrays and HUD on client-side", "Docs/Classes/ARTSPlayerState/Functions/Client_SetInitialResourceAmounts.html", ["client_", "set", "initial", "resource", "amounts"], "ARTSPlayerState");
addToContainers_function("GetBuildingResourceCost", "Get resource cost array for a building @return - cost of the building", "Docs/Classes/ARTSPlayerState/Functions/GetBuildingResourceCost.html", ["get", "building", "resource", "cost"], "ARTSPlayerState");
addToContainers_function("GetUnitResourceCost", "Get resource cost array for a unit", "Docs/Classes/ARTSPlayerState/Functions/GetUnitResourceCost.html", ["get", "unit", "resource", "cost"], "ARTSPlayerState");
addToContainers_function("GetNumResources", "Get how much of a resource player has. Added here for CPU player AI controllers @param ArrayIndex - Statics::ResourceTypeToArrayIndex(ResourceType)", "Docs/Classes/ARTSPlayerState/Functions/GetNumResources.html", ["get", "num", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughResources", "Check if player has enough resources to buy something given its cost array. If not then will try to display a message on the HUD letting the player know they do not have enough @param - CostArray - the cost array of something @param bShowHUDMessage - if not enough resources whether we want to try and show a message on the HUD @return - true if player can afford", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughResources.html", ["has", "enough", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughResourcesSpecific", "Check if player has enough resources. If this returns \"None\" then player has enough resources. Otherwise it returns the first resource that the player does not have enough of return - the first missing resource, or \"None\" if the player has enough resources", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughResourcesSpecific.html", ["has", "enough", "resources", "specific"], "ARTSPlayerState");
addToContainers_function("HasEnoughResources", "Check if player has enough resources to build building @param Type - the type of building @return - true if player can afford building", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughResources_1.html", ["has", "enough", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughResources", "Check if player has enough resources to train unit @param Type - the type of unit @return - true if player can afford unit", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughResources_2.html", ["has", "enough", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughResources", "Check if player has enough resources to research upgrade", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughResources_3.html", ["has", "enough", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughResources", "Check if player has enough resources to produce what button requests", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughResources_4.html", ["has", "enough", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughResources", "Check if player has enough resources to produce what the training info requests", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughResources_5.html", ["has", "enough", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughHousingResources", "Check if the player has enough of a housing type resource to produce the item. Housing type resources are resources like the stuff you get when you build a pylon/overlord/depot in starcraft", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughHousingResources.html", ["has", "enough", "housing", "resources"], "ARTSPlayerState");
addToContainers_function("HasEnoughHousingResources", "", "Docs/Classes/ARTSPlayerState/Functions/HasEnoughHousingResources_1.html", ["has", "enough", "housing", "resources"], "ARTSPlayerState");
addToContainers_function("GainExperience", "", "Docs/Classes/ARTSPlayerState/Functions/GainExperience.html", ["gain", "experience"], "ARTSPlayerState");
addToContainers_function("GetTotalExperience", "[Server] [Owning client] Get how much experience in total the player has aquired", "Docs/Classes/ARTSPlayerState/Functions/GetTotalExperience.html", ["get", "total", "experience"], "ARTSPlayerState");
addToContainers_function("GetRank", "[Server] [Owning client]", "Docs/Classes/ARTSPlayerState/Functions/GetRank.html", ["get", "rank"], "ARTSPlayerState");
addToContainers_function("GetNumUnspentSkillPoints", "Return how many commander skill points this player has", "Docs/Classes/ARTSPlayerState/Functions/GetNumUnspentSkillPoints.html", ["get", "num", "unspent", "skill", "points"], "ARTSPlayerState");
addToContainers_function("RegisterCommanderSkillTreeNode", "Setupy type function", "Docs/Classes/ARTSPlayerState/Functions/RegisterCommanderSkillTreeNode.html", ["register", "commander", "skill", "tree", "node"], "ARTSPlayerState");
addToContainers_function("GetCommanderAbilityState", "Get the ability state that belongs to an ability. This is kind of slow - have to do 2 TMap lookups", "Docs/Classes/ARTSPlayerState/Functions/GetCommanderAbilityState.html", ["get", "commander", "ability", "state"], "ARTSPlayerState");
addToContainers_function("GetCommanderSkillTreeNodeType", "Given some commander ability info get which node on the skill tree that ability is on. Will crash if it is not on any node. This function is more suited to be on FI", "Docs/Classes/ARTSPlayerState/Functions/GetCommanderSkillTreeNodeType.html", ["get", "commander", "skill", "tree", "node", "type"], "ARTSPlayerState");
addToContainers_function("GetCommanderAbilityObtainedRank", "Get the rank the player has obtained for a commander ability. -1 means they have not obtained it. The return value is 0 indexed meaning a value of 0 means the first rank has been obtained.", "Docs/Classes/ARTSPlayerState/Functions/GetCommanderAbilityObtainedRank.html", ["get", "commander", "ability", "obtained", "rank"], "ARTSPlayerState");
addToContainers_function("CanAffordCommanderAbilityAquireCost", "Return true if the player can afford to aquire the next rank of a commander ability. If the player already has the max rank of the ability... decide on what to return there", "Docs/Classes/ARTSPlayerState/Functions/CanAffordCommanderAbilityAquireCo.html", ["can", "afford", "commander", "ability", "aquire", "cost"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesForNextCommanderAbilityRankMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesForNextCommanderA.html", ["are", "prerequisites", "for", "next", "commander", "ability", "rank", "met"], "ARTSPlayerState");
addToContainers_function("GetUnaquiredCommanderAbilities", "", "Docs/Classes/ARTSPlayerState/Functions/GetUnaquiredCommanderAbilities.html", ["get", "unaquired", "commander", "abilities"], "ARTSPlayerState");
addToContainers_function("CanAquireCommanderAbility", "@return - None if the ability can be aquired, something different otherwise", "Docs/Classes/ARTSPlayerState/Functions/CanAquireCommanderAbility.html", ["can", "aquire", "commander", "ability"], "ARTSPlayerState");
addToContainers_function("CanAquireCommanderAbility", "This version takes an array index which is the index in the AllCommanderSkillTreeNodes arary", "Docs/Classes/ARTSPlayerState/Functions/CanAquireCommanderAbility_1.html", ["can", "aquire", "commander", "ability"], "ARTSPlayerState");
addToContainers_function("AquireNextRankForCommanderAbility", "This version takes an array index value", "Docs/Classes/ARTSPlayerState/Functions/AquireNextRankForCommanderAbility.html", ["aquire", "next", "rank", "for", "commander", "ability"], "ARTSPlayerState");
addToContainers_function("AquireNextRankForCommanderAbility", "Aquire the next rank of a commander ability. Next rank can mean the first rank. This will also update the HUD, skill tree widget, skill tree node widget and tooltips.", "Docs/Classes/ARTSPlayerState/Functions/AquireNextRankForCommanderAbility_1.html", ["aquire", "next", "rank", "for", "commander", "ability"], "ARTSPlayerState");
addToContainers_function("AquireNextRankForCommanderAbilityInternal", "This function will actually increment rank and stuff", "Docs/Classes/ARTSPlayerState/Functions/AquireNextRankForCommanderAbility_2.html", ["aquire", "next", "rank", "for", "commander", "ability", "internal"], "ARTSPlayerState");
addToContainers_function("Client_AquireNextRankForCommanderAbility", "Intended not to be called for nodes that execute on aquired", "Docs/Classes/ARTSPlayerState/Functions/Client_AquireNextRankForCommander.html", ["client_", "aquire", "next", "rank", "for", "commander", "ability"], "ARTSPlayerState");
addToContainers_function("OnCommanderAbilityUse", "Called when an ability is used by this player", "Docs/Classes/ARTSPlayerState/Functions/OnCommanderAbilityUse.html", ["on", "commander", "ability", "use"], "ARTSPlayerState");
addToContainers_function("OnCommanderAbilityCooledDown", "Called when a commander ability comes off cooldown, either the initial cooldown if it has one or the regular cooldown.", "Docs/Classes/ARTSPlayerState/Functions/OnCommanderAbilityCooledDown.html", ["on", "commander", "ability", "cooled", "down"], "ARTSPlayerState");
addToContainers_function("GetActorToBuildFrom", "Get the actor to build something from when clicking a HUD persistent tab button @param Button - button type on HUD that was clicked @param bShowHUDWarning - if true and the func returns null, then a warning message will try to be shown on the HUD @param OutActor - Out param which will point to non-null if an actor was found. This is always a building right now but may change in future if different actors are allowed to produce stuff too @param QueueType - Out param. The type of queue the selected actor will use", "Docs/Classes/ARTSPlayerState/Functions/GetActorToBuildFrom.html", ["get", "actor", "to", "build", "from"], "ARTSPlayerState");
addToContainers_function("GetBuildsInTabCompleteBuildings", "Get array of buildings that have a queue", "Docs/Classes/ARTSPlayerState/Functions/GetBuildsInTabCompleteBuildings.html", ["get", "builds", "in", "tab", "complete", "buildings"], "ARTSPlayerState");
addToContainers_function("OnBuildsInTabProductionComplete", "When a building completes cosntruction of a BuildsInTab building it should call this. @param ProducerBuilding - the building that has produced the new building", "Docs/Classes/ARTSPlayerState/Functions/OnBuildsInTabProductionComplete.html", ["on", "builds", "in", "tab", "production", "complete"], "ARTSPlayerState");
addToContainers_function("OnGameEventHappened", "Show a game notification on HUD", "Docs/Classes/ARTSPlayerState/Functions/OnGameEventHappened.html", ["on", "game", "event", "happened"], "ARTSPlayerState");
addToContainers_function("OnGameWarningHappened", "Try show a message on the HUD if allowed", "Docs/Classes/ARTSPlayerState/Functions/OnGameWarningHappened.html", ["on", "game", "warning", "happened"], "ARTSPlayerState");
addToContainers_function("OnGameWarningHappened", "Try to show a message on the HUD if allowed. Version that takes a custom ability requirement reason.", "Docs/Classes/ARTSPlayerState/Functions/OnGameWarningHappened_1.html", ["on", "game", "warning", "happened"], "ARTSPlayerState");
addToContainers_function("TryShowGameWarning_NotEnoughResources", "Version for when we do not have enough resources. Will try show a message on the HUD", "Docs/Classes/ARTSPlayerState/Functions/TryShowGameWarning_NotEnoughResou.html", ["try", "show", "game", "warning_", "not", "enough", "resources"], "ARTSPlayerState");
addToContainers_function("OnGameWarningHappened", "Version for when we do not have enough housing resources. Will try show a message on the HUD", "Docs/Classes/ARTSPlayerState/Functions/OnGameWarningHappened_2.html", ["on", "game", "warning", "happened"], "ARTSPlayerState");
addToContainers_function("OnGameWarningHappened", "Version for when player does not have enough of a resource", "Docs/Classes/ARTSPlayerState/Functions/OnGameWarningHappened_3.html", ["on", "game", "warning", "happened"], "ARTSPlayerState");
addToContainers_function("SpendResource", "[Server] Subtract a single resource and make sure HUD gets updated. @param ResourceType - resource type to adjust @param AmountToSpend - amount to subtract @param bClampToWithinLimits - whether to clamp the resource to within limits if the spend amount would otherwise cause it to go outside @return - amount of resource after the change", "Docs/Classes/ARTSPlayerState/Functions/SpendResource.html", ["spend", "resource"], "ARTSPlayerState");
addToContainers_function("GainResource", "[Server] Add a single resource and make sure HUD gets updated. This version of the function will clamp the resource to within its limits if the gain amount would cause it to go outside otherwise. @param ResourceType - resource type to adjust @param AmountToGain - amount to gain @return - amount of resource after the change", "Docs/Classes/ARTSPlayerState/Functions/GainResource.html", ["gain", "resource"], "ARTSPlayerState");
addToContainers_function("SpendResources", "[Server] Spend some of potentially all resource types and make sure HUD gets updated @param CostArray - a cost array to subtract", "Docs/Classes/ARTSPlayerState/Functions/SpendResources.html", ["spend", "resources"], "ARTSPlayerState");
addToContainers_function("GainResources", "[Server] Gain some of potentially all resource types and make sure HUD gets updated @param GainArray - a cost array to gain", "Docs/Classes/ARTSPlayerState/Functions/GainResources.html", ["gain", "resources"], "ARTSPlayerState");
addToContainers_function("GainResources", "", "Docs/Classes/ARTSPlayerState/Functions/GainResources_1.html", ["gain", "resources"], "ARTSPlayerState");
addToContainers_function("GainResources", "[Server] Gain some of potentially all resource types and make sure HUD gets updated. Multiply each amount by a multiplier. @param GainArray - a cost array to gain @param GainMultiplier - how much to multiply each entry in GainArray by", "Docs/Classes/ARTSPlayerState/Functions/GainResources_2.html", ["gain", "resources"], "ARTSPlayerState");
addToContainers_function("AdjustResources", "[Server] Adjust resource amounts. Also stores the resource amounts before the adjustment and after the adjustment. This @param AdjustArray - amount to add to resources @param PreAdjustAmounts - out array param. Will contain how much resources player had before the adjustment. @param PostAdjustAmounts - out array param. Will contain how much resources the player had after the adjustment.", "Docs/Classes/ARTSPlayerState/Functions/AdjustResources.html", ["adjust", "resources"], "ARTSPlayerState");
addToContainers_function("ClampResource", "[Server] Clamps a resource variable to within its limits which usually just means no less than 0.", "Docs/Classes/ARTSPlayerState/Functions/ClampResource.html", ["clamp", "resource"], "ARTSPlayerState");
addToContainers_function("AddHousingResourceConsumption", "Increase how much of housing resources we are using", "Docs/Classes/ARTSPlayerState/Functions/AddHousingResourceConsumption.html", ["add", "housing", "resource", "consumption"], "ARTSPlayerState");
addToContainers_function("AddHousingResourceConsumption", "", "Docs/Classes/ARTSPlayerState/Functions/AddHousingResourceConsumption_1.html", ["add", "housing", "resource", "consumption"], "ARTSPlayerState");
addToContainers_function("RemoveHousingResourceConsumption", "Decrease how much of housing resources we are using.", "Docs/Classes/ARTSPlayerState/Functions/RemoveHousingResourceConsumption.html", ["remove", "housing", "resource", "consumption"], "ARTSPlayerState");
addToContainers_function("RemoveHousingResourceConsumption", "", "Docs/Classes/ARTSPlayerState/Functions/RemoveHousingResourceConsumption_1.html", ["remove", "housing", "resource", "consumption"], "ARTSPlayerState");
addToContainers_function("AddHousingResourcesProvided", "", "Docs/Classes/ARTSPlayerState/Functions/AddHousingResourcesProvided.html", ["add", "housing", "resources", "provided"], "ARTSPlayerState");
addToContainers_function("RemoveHousingResourcesProvided", "", "Docs/Classes/ARTSPlayerState/Functions/RemoveHousingResourcesProvided.html", ["remove", "housing", "resources", "provided"], "ARTSPlayerState");
addToContainers_function("GetNumPersistentQueues", "Return the number of persistent queues this player has built. This returns the number of construction yard type buildings", "Docs/Classes/ARTSPlayerState/Functions/GetNumPersistentQueues.html", ["get", "num", "persistent", "queues"], "ARTSPlayerState");
addToContainers_function("GetNumSupportedProducers", "For a given button get the number of buildings that can produce what it requests", "Docs/Classes/ARTSPlayerState/Functions/GetNumSupportedProducers.html", ["get", "num", "supported", "producers"], "ARTSPlayerState");
addToContainers_function("GetProductionCapableBuildings", "Get all the buildings that can produce what the button requests", "Docs/Classes/ARTSPlayerState/Functions/GetProductionCapableBuildings.html", ["get", "production", "capable", "buildings"], "ARTSPlayerState");
addToContainers_function("GetPersistentQueueSupportingBuildings", "Get reference to the set of built buildings that are construction yards", "Docs/Classes/ARTSPlayerState/Functions/GetPersistentQueueSupportingBuild.html", ["get", "persistent", "queue", "supporting", "buildings"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "Check if the prerequisite buildings are built in order to build a certain building/unit/upgrade. Overloaded for buildings, units and upgrades @param TheFirstParam - what to check prereqs for. Accepts many different types @param bShowHUDMessage - if true and prereqs are not met then a message will try to be displayed on the HUD saying so @return - true if the prerequisites are met", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_1.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_2.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_3.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_4.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_5.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "Versions that will also output the first prerequisite encountered that was not met @param OutFirstMissingPrereq_Building - if returned false the first prereq encountered that was not met. If it\'s an upgrade that is mssing then this will have the value EBuildingType::NotBuilding @param OutFirstMissingPrereq_Upgrade - if returned false and OutFirstMissingPrereq_Building == EBuildingType::NotBuilding then it was an upgrade that was missing and this will contain the missing upgrade\'s type @return - true if all prerequisites are met", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_6.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_7.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Classes/ARTSPlayerState/Functions/ArePrerequisitesMet_8.html", ["are", "prerequisites", "met"], "ARTSPlayerState");
addToContainers_function("HasQueueSupport", "Given a button return whether there exists a building that can produce what is requests. Does not take into account whether the building\'s queues are full or not. More specific: For build building buttons: returns true if at least one persistent queue exists For other buttons: true if at least one building is built that has this button included as a button in its context menu", "Docs/Classes/ARTSPlayerState/Functions/HasQueueSupport.html", ["has", "queue", "support"], "ARTSPlayerState");
addToContainers_function("IsAtSelectableCap", "Return whether this player is at the selectable cap i.e. they should not allowed to produce anymore selectables. This cap is a technical limitation and has nothing to do with population caps like the 200 population limit in SCII @param bIncludeQueuedSelectables - whether to include selectables queued in production queues. This will consider all queues, including the one on this player state plus all building\'s queues @param bTryShowHUDWarning - if this func will return true, whether we should try and show a message on the HUD @return - true if at selectable cap implying we cannot spawn anymore selectables", "Docs/Classes/ARTSPlayerState/Functions/IsAtSelectableCap.html", ["is", "at", "selectable", "cap"], "ARTSPlayerState");
addToContainers_function("GenerateSelectableID", "[Server] Return an ID that hasn\'t been assigned to a selectable. Assumes that there is at least one spare ID available @param Selectable - selectable to generate ID for", "Docs/Classes/ARTSPlayerState/Functions/GenerateSelectableID.html", ["generate", "selectable", "i", "d"], "ARTSPlayerState");
addToContainers_function("FreeUpSelectableID", "[Server] Allow a selectable\'s selectable ID to be used again. @param Selectable - the selectable whose ID we are making available again", "Docs/Classes/ARTSPlayerState/Functions/FreeUpSelectableID.html", ["free", "up", "selectable", "i", "d"], "ARTSPlayerState");
addToContainers_function("Client_RegisterSelectableID", "[Client] Put a selectables ID into the ID map", "Docs/Classes/ARTSPlayerState/Functions/Client_RegisterSelectableID.html", ["client_", "register", "selectable", "i", "d"], "ARTSPlayerState");
addToContainers_function("IsAtUniqueBuildingCap", "Given a building type return whether we have built enough of them that we are not allowed to build anymore @param bIncludeQueuedSelectables - whether to count the selectables that are in production queues.", "Docs/Classes/ARTSPlayerState/Functions/IsAtUniqueBuildingCap.html", ["is", "at", "unique", "building", "cap"], "ARTSPlayerState");
addToContainers_function("IsAtUniqueUnitCap", "", "Docs/Classes/ARTSPlayerState/Functions/IsAtUniqueUnitCap.html", ["is", "at", "unique", "unit", "cap"], "ARTSPlayerState");
addToContainers_function("IsAtUniqueSelectableCap", "Version that takes a training info struct and will then call either IsAtUniqueBuildingCap or IsAtUniqueUnitCap", "Docs/Classes/ARTSPlayerState/Functions/IsAtUniqueSelectableCap.html", ["is", "at", "unique", "selectable", "cap"], "ARTSPlayerState");
addToContainers_function("IsAllied", "Checks if another player state is allied with this one @return - true if they are allied with this player", "Docs/Classes/ARTSPlayerState/Functions/IsAllied.html", ["is", "allied"], "ARTSPlayerState");
addToContainers_function("CanBeTargetedByAbility", "Returns whether this player can be targeted by an ability @param AbilityInfo - the ability info struct of the ability we are trying to target this player with @param AbilityInstigator - player trying to use ability on this @return - None if yes, otherwise a reason why not", "Docs/Classes/ARTSPlayerState/Functions/CanBeTargetedByAbility.html", ["can", "be", "targeted", "by", "ability"], "ARTSPlayerState");
addToContainers_function("GetCommandLocation", "[Server] Command location is a location that could be used if figuring out the direction an aircraft should fly for a commander ability e.g. fuel air bomb in C&C generals", "Docs/Classes/ARTSPlayerState/Functions/GetCommandLocation.html", ["get", "command", "location"], "ARTSPlayerState");
addToContainers_function("SetupProductionCapableBuildingsMap", "", "Docs/Classes/ARTSPlayerState/Functions/SetupProductionCapableBuildingsMa.html", ["setup", "production", "capable", "buildings", "map"], "ARTSPlayerState");
addToContainers_function("GetBuildingGarrisonNetworkInfo", "Get info about all the units garrisoned inside a garrison network for this player @param GarrisonNetworkType - garrison network to get info for", "Docs/Classes/ARTSPlayerState/Functions/GetBuildingGarrisonNetworkInfo.html", ["get", "building", "garrison", "network", "info"], "ARTSPlayerState");
addToContainers_function("ShouldPlayBuildingBuiltSound_ConstructionComplete", "Returns true if a sound should be played for a building that has just been fully constructed @param BuildingInfo - building info struct of the building that was just built @param CreationMethod - whether this is a starting selectable (a selectable the player started the match with) @return - true if a sound should be played", "Docs/Classes/ARTSPlayerState/Functions/ShouldPlayBuildingBuiltSound_Cons.html", ["should", "play", "building", "built", "sound_", "construction", "complete"], "ARTSPlayerState");
addToContainers_function("PlayBuildingBuiltSound", "Plays the \'building just built\' sound through BuildingBuiltSoundComp ", "Docs/Classes/ARTSPlayerState/Functions/PlayBuildingBuiltSound.html", ["play", "building", "built", "sound"], "ARTSPlayerState");
addToContainers_function("ShouldPlayUnitBuiltSound", "Returns true if this player state should play the \'unit just built\' sound for a unit @param UnitJustBuild - the type of unit that was just built @param UnitInfo - unit info struct of UnitJustBuilt for convenience @param bIsStartingSelectable - whether this is a starting selectable (a selectable the player started the match with) @return - true if a sound should be played", "Docs/Classes/ARTSPlayerState/Functions/ShouldPlayUnitBuiltSound.html", ["should", "play", "unit", "built", "sound"], "ARTSPlayerState");
addToContainers_function("PlayUnitBuiltSound", "Plays the \'unit just built\' sound through the UnitBuiltSoundComp", "Docs/Classes/ARTSPlayerState/Functions/PlayUnitBuiltSound.html", ["play", "unit", "built", "sound"], "ARTSPlayerState");
addToContainers_function("OnDefeated", "Called when a notification comes through from server that this player has been defeated", "Docs/Classes/ARTSPlayerState/Functions/OnDefeated.html", ["on", "defeated"], "ARTSPlayerState");
addToContainers_function("GetFI", "------------------------------------------------", "Docs/Classes/ARTSPlayerState/Functions/GetFI.html", ["get", "f", "i"], "ARTSPlayerState");
addToContainers_function("SetFactionInfo", "", "Docs/Classes/ARTSPlayerState/Functions/SetFactionInfo.html", ["set", "faction", "info"], "ARTSPlayerState");
addToContainers_function("GetPC", "", "Docs/Classes/ARTSPlayerState/Functions/GetPC.html", ["get", "p", "c"], "ARTSPlayerState");
addToContainers_function("SetPC", "", "Docs/Classes/ARTSPlayerState/Functions/SetPC.html", ["set", "p", "c"], "ARTSPlayerState");
addToContainers_function("GetAIController", "Returns the CPU player AI controller, or null if this player state belongs to a human player", "Docs/Classes/ARTSPlayerState/Functions/GetAIController.html", ["get", "a", "i", "controller"], "ARTSPlayerState");
addToContainers_function("SetAIController", "", "Docs/Classes/ARTSPlayerState/Functions/SetAIController.html", ["set", "a", "i", "controller"], "ARTSPlayerState");
addToContainers_function("GetGS", "", "Docs/Classes/ARTSPlayerState/Functions/GetGS.html", ["get", "g", "s"], "ARTSPlayerState");
addToContainers_function("SetGS", "", "Docs/Classes/ARTSPlayerState/Functions/SetGS.html", ["set", "g", "s"], "ARTSPlayerState");
addToContainers_function("SetGI", "", "Docs/Classes/ARTSPlayerState/Functions/SetGI.html", ["set", "g", "i"], "ARTSPlayerState");
addToContainers_function("GetBuildingIndex", "", "Docs/Classes/ARTSPlayerState/Functions/GetBuildingIndex.html", ["get", "building", "index"], "ARTSPlayerState");
addToContainers_function("GetPlayerIDAsInt", "", "Docs/Classes/ARTSPlayerState/Functions/GetPlayerIDAsInt.html", ["get", "player", "i", "d", "as", "int"], "ARTSPlayerState");
addToContainers_function("GetPlayerID", "", "Docs/Classes/ARTSPlayerState/Functions/GetPlayerID.html", ["get", "player", "i", "d"], "ARTSPlayerState");
addToContainers_function("GetTeam", "", "Docs/Classes/ARTSPlayerState/Functions/GetTeam.html", ["get", "team"], "ARTSPlayerState");
addToContainers_function("SetTeam", "", "Docs/Classes/ARTSPlayerState/Functions/SetTeam.html", ["set", "team"], "ARTSPlayerState");
addToContainers_function("GetAffiliation", "Affiliation towards local player", "Docs/Classes/ARTSPlayerState/Functions/GetAffiliation.html", ["get", "affiliation"], "ARTSPlayerState");
addToContainers_function("SetAffiliation", "", "Docs/Classes/ARTSPlayerState/Functions/SetAffiliation.html", ["set", "affiliation"], "ARTSPlayerState");
addToContainers_function("GetTeamTag", "", "Docs/Classes/ARTSPlayerState/Functions/GetTeamTag.html", ["get", "team", "tag"], "ARTSPlayerState");
addToContainers_function("SetTeamTag", "", "Docs/Classes/ARTSPlayerState/Functions/SetTeamTag.html", ["set", "team", "tag"], "ARTSPlayerState");
addToContainers_function("GetFaction", "", "Docs/Classes/ARTSPlayerState/Functions/GetFaction.html", ["get", "faction"], "ARTSPlayerState");
addToContainers_function("GetStartingSpot", "Values < 0 imply no spot assigned", "Docs/Classes/ARTSPlayerState/Functions/GetStartingSpot.html", ["get", "starting", "spot"], "ARTSPlayerState");
addToContainers_function("AICon_SetFinalStartingSpot", "CPU player states only", "Docs/Classes/ARTSPlayerState/Functions/AICon_SetFinalStartingSpot.html", ["i", "con_", "set", "final", "starting", "spot"], "ARTSPlayerState");
addToContainers_function("GetBuildings", "", "Docs/Classes/ARTSPlayerState/Functions/GetBuildings.html", ["get", "buildings"], "ARTSPlayerState");
addToContainers_function("GetUnits", "", "Docs/Classes/ARTSPlayerState/Functions/GetUnits.html", ["get", "units"], "ARTSPlayerState");
addToContainers_function("GetPrereqInfo", "", "Docs/Classes/ARTSPlayerState/Functions/GetPrereqInfo.html", ["get", "prereq", "info"], "ARTSPlayerState");
addToContainers_function("GetUpgradeManager", "", "Docs/Classes/ARTSPlayerState/Functions/GetUpgradeManager.html", ["get", "upgrade", "manager"], "ARTSPlayerState");
addToContainers_function("GetSelectableFromID", "Get ID for selectable", "Docs/Classes/ARTSPlayerState/Functions/GetSelectableFromID.html", ["get", "selectable", "from", "i", "d"], "ARTSPlayerState");
addToContainers_function("GetPlayerNormalImage", "Get the image that represents this player TODO create a variable for this and return it here instead of null, and maybe this could belong somewhere different such as on the UPlayer class instead", "Docs/Classes/ARTSPlayerState/Functions/GetPlayerNormalImage.html", ["get", "player", "normal", "image"], "ARTSPlayerState");
addToContainers_function("GetPlayerHoveredImage", "", "Docs/Classes/ARTSPlayerState/Functions/GetPlayerHoveredImage.html", ["get", "player", "hovered", "image"], "ARTSPlayerState");
addToContainers_function("GetPlayerPressedImage", "", "Docs/Classes/ARTSPlayerState/Functions/GetPlayerPressedImage.html", ["get", "player", "pressed", "image"], "ARTSPlayerState");
addToContainers_function("GetHUDWidget", "", "Docs/Classes/ARTSPlayerState/Functions/GetHUDWidget.html", ["get", "h", "u", "d", "widget"], "ARTSPlayerState");
addToContainers_function("AssignPlayerImages", "Assigns a engine image to the player\'s normal, hovered and pressed brushes", "Docs/Classes/ARTSPlayerState/Functions/AssignPlayerImages.html", ["assign", "player", "images"], "ARTSPlayerState");
addToContainers_variable("", "Sound component to play \'building just built\' sound when building has been fully constructed", "Docs/Classes/ARTSPlayerState/Variables/.html", [], "ARTSPlayerState");
addToContainers_variable("", "Sound component to play \'Unit just built\' sound e.g. \"Kirov reporting\", \"My life for Aiur\"", "Docs/Classes/ARTSPlayerState/Variables/_1.html", [], "ARTSPlayerState");
addToContainers_variable("", "Array that holds current resource values. Updated when an OnRep for a resource happens", "Docs/Classes/ARTSPlayerState/Variables/_2.html", [], "ARTSPlayerState");
addToContainers_variable("", "Array that holds previous resource values before a new value was replicated. Updated when an OnRep for a resource happens", "Docs/Classes/ARTSPlayerState/Variables/_3.html", [], "ARTSPlayerState");
addToContainers_variable("", "Resource array for housing resources. Not replicated", "Docs/Classes/ARTSPlayerState/Variables/_4.html", [], "ARTSPlayerState");
addToContainers_variable("", "Amount of cash resource", "Docs/Classes/ARTSPlayerState/Variables/_5.html", [], "ARTSPlayerState");
addToContainers_variable("", "Amount of sand resource", "Docs/Classes/ARTSPlayerState/Variables/_6.html", [], "ARTSPlayerState");
addToContainers_variable("BuildingGarrisonNetworkInfos", "All the information about all building garrison networks for buildings owned by this player", "Docs/Classes/ARTSPlayerState/Variables/BuildingGarrisonNetworkInfos.html", ["building", "garrison", "network", "infos"], "ARTSPlayerState");
addToContainers_variable("", "How much total experience the player has obtained. Does not decrease when the player levels up", "Docs/Classes/ARTSPlayerState/Variables/_7.html", [], "ARTSPlayerState");
addToContainers_variable("NumUnspentSkillPoints", "", "Docs/Classes/ARTSPlayerState/Variables/NumUnspentSkillPoints.html", ["num", "unspent", "skill", "points"], "ARTSPlayerState");
addToContainers_variable("Rank", "The player\'s rank or level. This starts at 0", "Docs/Classes/ARTSPlayerState/Variables/Rank.html", [], "ARTSPlayerState");
addToContainers_variable("AllCommanderSkillTreeNodes", "Ordering is important. It should be the same across server/clients. This container belongs on the faction info really", "Docs/Classes/ARTSPlayerState/Variables/AllCommanderSkillTreeNodes.html", ["all", "commander", "skill", "tree", "nodes"], "ARTSPlayerState");
addToContainers_variable("CommanderAbilityToNodeType", "Maps ability type to which skill tree node it belongs to. This container belongs on the faction info really", "Docs/Classes/ARTSPlayerState/Variables/CommanderAbilityToNodeType.html", ["commander", "ability", "to", "node", "type"], "ARTSPlayerState");
addToContainers_variable("", "Abilities from the commander skill tree the player has not aquired yet.", "Docs/Classes/ARTSPlayerState/Variables/_8.html", [], "ARTSPlayerState");
addToContainers_variable("", "Abilities the player has aquired", "Docs/Classes/ARTSPlayerState/Variables/_9.html", [], "ARTSPlayerState");
addToContainers_variable("AquiredCommanderAbilitiesTMap", "", "Docs/Classes/ARTSPlayerState/Variables/AquiredCommanderAbilitiesTMap.html", ["aquired", "commander", "abilities", "t", "map"], "ARTSPlayerState");
addToContainers_variable("", "The UI image for this player. Maybe this could go on the ULocalPlayer class instead. I don\'t think I actually let the player set this in any way", "Docs/Classes/ARTSPlayerState/Variables/_10.html", [], "ARTSPlayerState");
addToContainers_variable("", "", "Docs/Classes/ARTSPlayerState/Variables/_11.html", [], "ARTSPlayerState");
addToContainers_variable("", "", "Docs/Classes/ARTSPlayerState/Variables/_12.html", [], "ARTSPlayerState");
addToContainers_variable("bBelongsToLocalPlayer", "Whether this player state belongs to the local player", "Docs/Classes/ARTSPlayerState/Variables/bBelongsToLocalPlayer.html", ["belongs", "to", "local", "player"], "ARTSPlayerState");
addToContainers_variable("bHasBeenDefeated", "If true then this player has been defeated", "Docs/Classes/ARTSPlayerState/Variables/bHasBeenDefeated.html", ["has", "been", "defeated"], "ARTSPlayerState");
addToContainers_variable("", "Reference to the players HUD widget", "Docs/Classes/ARTSPlayerState/Variables/_13.html", [], "ARTSPlayerState");
addToContainers_variable("IDAsInt", "ID as a single byte", "Docs/Classes/ARTSPlayerState/Variables/IDAsInt.html", ["d", "as", "int"], "ARTSPlayerState");
addToContainers_variable("", "ID of player who owns this state. Used to determine what can and can\'t be selected. Unique to each player", "Docs/Classes/ARTSPlayerState/Variables/_14.html", [], "ARTSPlayerState");
addToContainers_variable("Team", "", "Docs/Classes/ARTSPlayerState/Variables/Team.html", [], "ARTSPlayerState");
addToContainers_variable("", "Team as FName", "Docs/Classes/ARTSPlayerState/Variables/_15.html", [], "ARTSPlayerState");
addToContainers_variable("Affiliation", "Affiliation towards local player. Not safe to use until Client_FinalSetup() has completed", "Docs/Classes/ARTSPlayerState/Variables/Affiliation.html", [], "ARTSPlayerState");
addToContainers_variable("Faction", "", "Docs/Classes/ARTSPlayerState/Variables/Faction.html", [], "ARTSPlayerState");
addToContainers_variable("StartingSpot", "Unique ID of RTS player start player started match at. Can change and is only final after GI::AssignOptimalStartingSpots has been called. -2 implies was never assigned a spot and was most likely spawned at origin", "Docs/Classes/ARTSPlayerState/Variables/StartingSpot.html", ["starting", "spot"], "ARTSPlayerState");
addToContainers_variable("StartLocation", "The actual world location on the map where the player starts", "Docs/Classes/ARTSPlayerState/Variables/StartLocation.html", ["start", "location"], "ARTSPlayerState");
addToContainers_variable("", "Reference to the faction info of the faction of this player", "Docs/Classes/ARTSPlayerState/Variables/_16.html", [], "ARTSPlayerState");
addToContainers_variable("NumQueuedSelectables", "Number of selectables that are in production queues, so does not include upgrades. This variable was added because of the selectable cap", "Docs/Classes/ARTSPlayerState/Variables/NumQueuedSelectables.html", ["num", "queued", "selectables"], "ARTSPlayerState");
addToContainers_variable("", "Holds all the buildings this player owns. Includes both placed and fully constructed buildings (comment used to say just fully constructed but from inspecting code that looks to be wrong)", "Docs/Classes/ARTSPlayerState/Variables/_17.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps building type to how many of it are in all production queues for this player. This includes building\'s production queues This was added for implementing unique buildings", "Docs/Classes/ARTSPlayerState/Variables/_18.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps building type to how many of that type this unit has placed but not fully constructed. This was added for implementing unique buildings", "Docs/Classes/ARTSPlayerState/Variables/_19.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps building type to how many of that type this player has that are fully constructed. No entry means they have 0. Useful to know what prerequisites are fulfilled My notes: this was called PrerequisitesMet or similar for a long time", "Docs/Classes/ARTSPlayerState/Variables/_20.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps unit type to the quantity that is in a production queue. Considers all production queues this player owns This was added to implement unique units", "Docs/Classes/ARTSPlayerState/Variables/_21.html", [], "ARTSPlayerState");
addToContainers_variable("", "Holds all the infantry this player owns.", "Docs/Classes/ARTSPlayerState/Variables/_22.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps unit type to the quantity of that unit the player has. No key/value pair means the player has 0 of that type. This does not take into account units that are in production queues This was added to implement unique units", "Docs/Classes/ARTSPlayerState/Variables/_23.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to player controller that owns this. Will be null for clients that do not own this. Will be null if player state belongs to CPU player", "Docs/Classes/ARTSPlayerState/Variables/_24.html", [], "ARTSPlayerState");
addToContainers_variable("", "The AI controller who owns this. Will be null if player state belongs to a human player", "Docs/Classes/ARTSPlayerState/Variables/_25.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSPlayerState/Variables/_26.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ARTSPlayerState/Variables/_27.html", [], "ARTSPlayerState");
addToContainers_variable("", "Reference to upgrade manager", "Docs/Classes/ARTSPlayerState/Variables/_28.html", [], "ARTSPlayerState");
addToContainers_variable("BuildingTypeToMissingUpgradePrereqs", "These containers map building/unit/upgrade type to an array of all the upgrades that are prerequisites for it and that have not been researched yet. If a building/unit/upgrade does not have any upgrade prerequisites then it might not get any entry in the map.", "Docs/Classes/ARTSPlayerState/Variables/BuildingTypeToMissingUpgradePrere.html", ["building", "type", "to", "missing", "upgrade", "prereqs"], "ARTSPlayerState");
addToContainers_variable("UnitTypeToMissingUpgradePrereqs", "", "Docs/Classes/ARTSPlayerState/Variables/UnitTypeToMissingUpgradePrereqs.html", ["unit", "type", "to", "missing", "upgrade", "prereqs"], "ARTSPlayerState");
addToContainers_variable("UpgradeTypeToMissingUpgradePrereqs", "", "Docs/Classes/ARTSPlayerState/Variables/UpgradeTypeToMissingUpgradePrereq.html", ["upgrade", "type", "to", "missing", "upgrade", "prereqs"], "ARTSPlayerState");
addToContainers_variable("", "Set of resource depots owned by this player. Used to calculate the closest depot when collectors return from gathering resources", "Docs/Classes/ARTSPlayerState/Variables/_29.html", [], "ARTSPlayerState");
addToContainers_variable("", "Buildings that have at least one persistent build slot, like construction yard type buildings", "Docs/Classes/ARTSPlayerState/Variables/_30.html", [], "ARTSPlayerState");
addToContainers_variable("", "Maps a button type to all the buildings that support producing what that button requests.", "Docs/Classes/ARTSPlayerState/Variables/_31.html", [], "ARTSPlayerState");
addToContainers_variable("", "Array of buildings that have completed construction of a building using the BuildsInTab build method and therefore it should be ready to place when player clicks HUD persistent panel button corrisponding to it. This array contains the constructors, not the constructed", "Docs/Classes/ARTSPlayerState/Variables/_32.html", [], "ARTSPlayerState");
addToContainers_variable("IDQueue", "[Server] A queue that contains IDs that haven\'t been assigned to any selectables. This queue is only ever modified by this class on the server only so Spsc is very fitting It can range from having 0 elements (at selectable cap) to ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER (0 selectables) Side note: after adding this variable to this class a editor restart is required otherise you get massive memory usage which eventually uses all system memory. I also vaguely remember this happening when I tried using this a while back.", "Docs/Classes/ARTSPlayerState/Variables/IDQueue.html", ["d", "queue"], "ARTSPlayerState");
addToContainers_variable("IDQueueNum", "Number of items in IDQueue. Useful when we want to know whether we are at the selectable cap or not. We actually also update on the client to serve as a way for them to know whether they are at the selectable cap or not", "Docs/Classes/ARTSPlayerState/Variables/IDQueueNum.html", ["d", "queue", "num"], "ARTSPlayerState");
addToContainers_variable("", "Maps ID to selectable for issuing commands. Key = selectable\'s ID. Pretty sure we maintain this for all players but really that could be unecessary. Only the server player and the player this player state belongs to need to maintain it.", "Docs/Classes/ARTSPlayerState/Variables/_33.html", [], "ARTSPlayerState");
addToContainers_variable("TimerHandle_GameWarning", "Timer handle for throttling game messages that appear on HUD", "Docs/Classes/ARTSPlayerState/Variables/TimerHandle_GameWarning.html", ["timer", "handle_", "game", "warning"], "ARTSPlayerState");
addToContainers_struct("FSelectableRootComponent2DShapeInfo", "Macro for fatal logging name of function. To be placed inside the base implementation of functions that really should be pure virtual", "Docs/Structs/FSelectableRootComponent2DShapeIn/FSelectableRootComponent2DShapeIn.html", ["selectable", "root", "component2", "d", "shape", "info"], "");
addToContainers_function("FSelectableRootComponent2DShapeInfo", "", "Docs/Structs/FSelectableRootComponent2DShapeIn/Functions/FSelectableRootComponent2DShapeIn.html", ["selectable", "root", "component2", "d", "shape", "info"], "FSelectableRootComponent2DShapeInfo");
addToContainers_function("FSelectableRootComponent2DShapeInfo", "", "Docs/Structs/FSelectableRootComponent2DShapeIn/Functions/FSelectableRootComponent2DShapeIn_1.html", ["selectable", "root", "component2", "d", "shape", "info"], "FSelectableRootComponent2DShapeInfo");
addToContainers_function("GetXAxisHalfDistance", "Given the actor\'s rotation is 0 get the hald length of the collision component\'s X axis half length. This is confusing... basically it\'s the radius of capsule if using capsule. Otherwise it\'s just the half length of the box\'s X axis", "Docs/Structs/FSelectableRootComponent2DShapeIn/Functions/GetXAxisHalfDistance.html", ["get", "x", "axis", "half", "distance"], "FSelectableRootComponent2DShapeInfo");
addToContainers_function("GetYAxisHalfDistance", "Same deal except for Y axis. Returns same value as X axis version if this struct holds data for a capsule/sphere", "Docs/Structs/FSelectableRootComponent2DShapeIn/Functions/GetYAxisHalfDistance.html", ["get", "y", "axis", "half", "distance"], "FSelectableRootComponent2DShapeInfo");
addToContainers_variable("Data", "If Y is negative then X holds radius for a sphere or capsule. Otherwise it holds data for a box, but remember this is 2D not 3D so the Z axis data is not here", "Docs/Structs/FSelectableRootComponent2DShapeIn/Variables/Data.html", [], "FSelectableRootComponent2DShapeInfo");
addToContainers_class("ISelectable", "Any class implementing this interface means they can be selected by the player during a match.", "Docs/Classes/ISelectable/ISelectable.html", [], "");
addToContainers_function("Setup", "", "Docs/Classes/ISelectable/Functions/Setup.html", [], "ISelectable");
addToContainers_function("GetAttributesBase", "Get attribute struct that all selectables are guaranteed to have", "Docs/Classes/ISelectable/Functions/GetAttributesBase.html", ["get", "attributes", "base"], "ISelectable");
addToContainers_function("GetAttributesBase", "", "Docs/Classes/ISelectable/Functions/GetAttributesBase_1.html", ["get", "attributes", "base"], "ISelectable");
addToContainers_function("GetAttributes", "The rest of these attribute structs selectables aren\'t guaranteed to have", "Docs/Classes/ISelectable/Functions/GetAttributes.html", ["get", "attributes"], "ISelectable");
addToContainers_function("GetBuildingAttributes", "", "Docs/Classes/ISelectable/Functions/GetBuildingAttributes.html", ["get", "building", "attributes"], "ISelectable");
addToContainers_function("GetInfantryAttributes", "May want to change this to GetUnitAttributes or something, infantry is too specific", "Docs/Classes/ISelectable/Functions/GetInfantryAttributes.html", ["get", "infantry", "attributes"], "ISelectable");
addToContainers_function("GetAttackAttributes", "", "Docs/Classes/ISelectable/Functions/GetAttackAttributes.html", ["get", "attack", "attributes"], "ISelectable");
addToContainers_function("GetContextMenu", "", "Docs/Classes/ISelectable/Functions/GetContextMenu.html", ["get", "context", "menu"], "ISelectable");
addToContainers_function("GetBuildingAttributesModifiable", "Non-const version", "Docs/Classes/ISelectable/Functions/GetBuildingAttributesModifiable.html", ["get", "building", "attributes", "modifiable"], "ISelectable");
addToContainers_function("GetAttributesModifiable", "", "Docs/Classes/ISelectable/Functions/GetAttributesModifiable.html", ["get", "attributes", "modifiable"], "ISelectable");
addToContainers_function("GetAttackAttributesModifiable", "", "Docs/Classes/ISelectable/Functions/GetAttackAttributesModifiable.html", ["get", "attack", "attributes", "modifiable"], "ISelectable");
addToContainers_function("SetupBuildInfo", "Popualate a FBuildInfo with all the things it needs. Called during faction info creation @param OutInfo - build info to be modified @param FactionInfo - faction info this is being setup for", "Docs/Classes/ISelectable/Functions/SetupBuildInfo.html", ["setup", "build", "info"], "ISelectable");
addToContainers_function("SetupBuildInfo", "Unit\'s version", "Docs/Classes/ISelectable/Functions/SetupBuildInfo_1.html", ["setup", "build", "info"], "ISelectable");
addToContainers_function("CanClassGainExperience", "Given experience is enabled for the project, whether this selectable is capable of gaining experience and ultimately level up. This doesn\'t not take into account any state so is likely to be a simple return true or return false.", "Docs/Classes/ISelectable/Functions/CanClassGainExperience.html", ["can", "class", "gain", "experience"], "ISelectable");
addToContainers_function("GetRank", "Get level/rank. Returns -1 (255) if the selectable does not care about experience and cannot rank up.", "Docs/Classes/ISelectable/Functions/GetRank.html", ["get", "rank"], "ISelectable");
addToContainers_function("GetCurrentRankExperience", "Get experience towards next rank/level, range 0 to FLOAT_MAX", "Docs/Classes/ISelectable/Functions/GetCurrentRankExperience.html", ["get", "current", "rank", "experience"], "ISelectable");
addToContainers_function("GetTotalExperienceRequiredForNextLevel", "Get how much experience must be aquired to reach the next level. This amount is only the amount for going from the current level to the next and does not take into account current expereience", "Docs/Classes/ISelectable/Functions/GetTotalExperienceRequiredForNext.html", ["get", "total", "experience", "required", "for", "next", "level"], "ISelectable");
addToContainers_function("GetTotalExperienceRequiredForLevel", "Get how much experience is required to level up to a level. This amount is similar to GetExperienceRequiredForNextLevel in that it isn\'t asking for total experience and isn\'t affected by current experience if that makes sense", "Docs/Classes/ISelectable/Functions/GetTotalExperienceRequiredForLeve.html", ["get", "total", "experience", "required", "for", "level"], "ISelectable");
addToContainers_function("GainExperience", "Gain experience and possibly level up @param ExperienceBounty - the experience bounty we earned", "Docs/Classes/ISelectable/Functions/GainExperience.html", ["gain", "experience"], "ISelectable");
addToContainers_function("GetBounds", "Get bounds for selecting object", "Docs/Classes/ISelectable/Functions/GetBounds.html", ["get", "bounds"], "ISelectable");
addToContainers_function("GetRootComponent2DCollisionInfo", "", "Docs/Classes/ISelectable/Functions/GetRootComponent2DCollisionInfo.html", ["get", "root", "component2", "d", "collision", "info"], "ISelectable");
addToContainers_function("OnSingleSelect", "Called when selected", "Docs/Classes/ISelectable/Functions/OnSingleSelect.html", ["on", "single", "select"], "ISelectable");
addToContainers_function("OnMarqueeSelect", "Not pure virtual. Also return the units type and puts selectable ID in param @param SelectableID - the selectables ID used for issuing commands @return - the selectables unit type", "Docs/Classes/ISelectable/Functions/OnMarqueeSelect.html", ["on", "marquee", "select"], "ISelectable");
addToContainers_function("OnCtrlGroupSelect", "Called when the selectable is selected using a ctrl group select action", "Docs/Classes/ISelectable/Functions/OnCtrlGroupSelect.html", ["on", "ctrl", "group", "select"], "ISelectable");
addToContainers_function("GetSelectableID", "", "Docs/Classes/ISelectable/Functions/GetSelectableID.html", ["get", "selectable", "i", "d"], "ISelectable");
addToContainers_function("GetOwnersID", "Get the player ID of the player that owns this selectable", "Docs/Classes/ISelectable/Functions/GetOwnersID.html", ["get", "owners", "i", "d"], "ISelectable");
addToContainers_function("OnDeselect", "@return - selectable ID", "Docs/Classes/ISelectable/Functions/OnDeselect.html", ["on", "deselect"], "ISelectable");
addToContainers_function("OnRightClick", "", "Docs/Classes/ISelectable/Functions/OnRightClick.html", ["on", "right", "click"], "ISelectable");
addToContainers_function("OnMouseHover", "Called when hovered over with mouse on tick", "Docs/Classes/ISelectable/Functions/OnMouseHover.html", ["on", "mouse", "hover"], "ISelectable");
addToContainers_function("OnMouseUnhover", "Called when no longer hovered over with mouse on tick. This also isn\'t strictly speaking true. Actually called every tick my marquee HUD whether still inside marquee box or not", "Docs/Classes/ISelectable/Functions/OnMouseUnhover.html", ["on", "mouse", "unhover"], "ISelectable");
addToContainers_function("OnEnterMarqueeBox", "Called when the player\'s pending marquee selection box has this selectable inside it", "Docs/Classes/ISelectable/Functions/OnEnterMarqueeBox.html", ["on", "enter", "marquee", "box"], "ISelectable");
addToContainers_function("OnExitMarqueeBox", "Called when the selectable stops being inside the player\'s marquee selection box", "Docs/Classes/ISelectable/Functions/OnExitMarqueeBox.html", ["on", "exit", "marquee", "box"], "ISelectable");
addToContainers_function("GetHealth", "Not pure virtual", "Docs/Classes/ISelectable/Functions/GetHealth.html", ["get", "health"], "ISelectable");
addToContainers_function("GetHealthRef", "Get a reference to selectables health.", "Docs/Classes/ISelectable/Functions/GetHealthRef.html", ["get", "health", "ref"], "ISelectable");
addToContainers_function("SetHealth", "Not pure virtual", "Docs/Classes/ISelectable/Functions/SetHealth.html", ["set", "health"], "ISelectable");
addToContainers_function("GetTeam", "Not pure virtual", "Docs/Classes/ISelectable/Functions/GetTeam.html", ["get", "team"], "ISelectable");
addToContainers_function("GetTeamIndex", "", "Docs/Classes/ISelectable/Functions/GetTeamIndex.html", ["get", "team", "index"], "ISelectable");
addToContainers_function("GetInfo", "Not pure virtual", "Docs/Classes/ISelectable/Functions/GetInfo.html", ["get", "info"], "ISelectable");
addToContainers_function("GetPrerequisites", "Return array of all prerequisites this needs to be built. TODO: change to return reference (&), remove const and make it pure virtual", "Docs/Classes/ISelectable/Functions/GetPrerequisites.html", ["get", "prerequisites"], "ISelectable");
addToContainers_function("GetCooldownRemaining", "Get cooldown remaining for ability. @return - cooldown remaining. 0 or negative numbers imply there is no cooldown remaining", "Docs/Classes/ISelectable/Functions/GetCooldownRemaining.html", ["get", "cooldown", "remaining"], "ISelectable");
addToContainers_function("GetContextCooldowns", "Get map that has cooldowns remaining for each context action", "Docs/Classes/ISelectable/Functions/GetContextCooldowns.html", ["get", "context", "cooldowns"], "ISelectable");
addToContainers_function("HasEnoughSelectableResources", "Return whether this selectable has enough selectable resources to use an ability. Selectable resources are things like mana or energy.", "Docs/Classes/ISelectable/Functions/HasEnoughSelectableResources.html", ["has", "enough", "selectable", "resources"], "ISelectable");
addToContainers_function("GetAppliedGameTickCount", "Get the game tick count that this selectable is \'up to\'", "Docs/Classes/ISelectable/Functions/GetAppliedGameTickCount.html", ["get", "applied", "game", "tick", "count"], "ISelectable");
addToContainers_function("RegenSelectableResourcesFromGameTicks", "Regenerate selectable resources (e.g. mana) due to time passing @param NumGameTicksWorth - how many custom RTS game ticks worth of resources we should regenerate", "Docs/Classes/ISelectable/Functions/RegenSelectableResourcesFromGameT.html", ["regen", "selectable", "resources", "from", "game", "ticks"], "ISelectable");
addToContainers_function("OnAbilityUse", "Called when an ability is used by this selectable. Will generally spend resources (as in mana type resources) and start the cooldown timer handle. @param AbilityInfo - info struct of the ability that is being used @param ServerTickCountAtTimeOfAbility - server\'s GS::GetGameTickCounter at the time the ability was used on the server. Can ignore this param if we\'re the server TODO rename to something like OnContextMenuAbilityUse", "Docs/Classes/ISelectable/Functions/OnAbilityUse.html", ["on", "ability", "use"], "ISelectable");
addToContainers_function("GetSightRadius", "", "Docs/Classes/ISelectable/Functions/GetSightRadius.html", ["get", "sight", "radius"], "ISelectable");
addToContainers_function("GetVisionInfo", "", "Docs/Classes/ISelectable/Functions/GetVisionInfo.html", ["get", "vision", "info"], "ISelectable");
addToContainers_function("GetBoundsLength", "Used for knowing if in range of something. Just using a simple sphere for range calculations. Buildings that have length and width that are different are not supported well with this implementation", "Docs/Classes/ISelectable/Functions/GetBoundsLength.html", ["get", "bounds", "length"], "ISelectable");
addToContainers_function("UpdateFogStatus", "Called every time fog of war manager ticks regardless of if status has changed or not @param FogStatus - visibility status of tile this selectable is on @return - true if it can be seen", "Docs/Classes/ISelectable/Functions/UpdateFogStatus.html", ["update", "fog", "status"], "ISelectable");
addToContainers_function("Security_CanBeClickedOn", "[Server] Return whether the selectable can be clicked on. This is intended to be called by the server to check whether a player was actually allowed to click on what they say they clicked on. @param ClickersTeam - team of player that is doing the clicking @param ClickersTeamTag - team but in FName form @return - true if they can be clicked on", "Docs/Classes/ISelectable/Functions/Security_CanBeClickedOn.html", ["security_", "can", "be", "clicked", "on"], "ISelectable");
addToContainers_function("IsInStealthMode", "", "Docs/Classes/ISelectable/Functions/IsInStealthMode.html", ["is", "in", "stealth", "mode"], "ISelectable");
addToContainers_function("OnUpgradeComplete", "Called by every owned selectable when an upgrade completes. Does not apply the upgrade but allows the selectable to respond to it. Is not called on initial spawn when all completed upgrades apply @param UpgradeLevel - at what level the upgrade is. Often this will just be 1. e.g. in SCII the 10% damage increase upgrade has 3 levels to it.", "Docs/Classes/ISelectable/Functions/OnUpgradeComplete.html", ["on", "upgrade", "complete"], "ISelectable");
addToContainers_function("GetProjectileBP", "Function only used during faction info creation. Called to setup object pooling manager", "Docs/Classes/ISelectable/Functions/GetProjectileBP.html", ["get", "projectile", "b", "p"], "ISelectable");
addToContainers_function("GetLocalPC", "Get a reference to the player controller you would get with GetWorld()->GetFirstPlayerController()", "Docs/Classes/ISelectable/Functions/GetLocalPC.html", ["get", "local", "p", "c"], "ISelectable");
addToContainers_function("HasAttack", "Return whether this selectable is capable of attacking. Resource depots will likely be an obvious false. Infantry can also return false. Buildings without attack components will likely return false", "Docs/Classes/ISelectable/Functions/HasAttack.html", ["has", "attack"], "ISelectable");
addToContainers_function("SetIsInvulnerable", "Set whether selectable can take damage. For implementing this I will likely use AActor::bCanBeDamaged", "Docs/Classes/ISelectable/Functions/SetIsInvulnerable.html", ["set", "is", "invulnerable"], "ISelectable");
addToContainers_function("GetMuzzleLocation", "Get the world location projectiles should spawn from this selectable. I may be able to make this a non-virtual and put it on FAttackAttributes by having it store the mesh", "Docs/Classes/ISelectable/Functions/GetMuzzleLocation.html", ["get", "muzzle", "location"], "ISelectable");
addToContainers_function("CanAquireTarget", "Return true if the selectable can aquire another selectable as an attack target. Range is not considered unless perhaps this selectable cannot move.", "Docs/Classes/ISelectable/Functions/CanAquireTarget.html", ["can", "aquire", "target"], "ISelectable");
addToContainers_function("GetSpecialRightClickActionTowardsBuildingInfo", "Return whether this selectable has a special action instead of attacking when the player right clicks on a building e.g. in C&C engineers will capture the building, spies reveal what is being produced, etc. Will return null if this selectable does not have any special building targeting ability towards Building @param Building - target building @param BuildingAffiliation - affiliation of building as a convenience @return - pointer to info struct if this selectable has a special ability towards Building. Otherwise will return null.", "Docs/Classes/ISelectable/Functions/GetSpecialRightClickActionTowards.html", ["get", "special", "right", "click", "action", "towards", "building", "info"], "ISelectable");
addToContainers_function("GetSelectedMouseCursor_CanAttackHostileUnit", "Return mouse cursor info that is the cursor that should be displayed when the player hovers their mouse over a hostile unit and this selectable can attack that unit. This can return null meaning \'there isn\'t one\'. In that case probably a cursor on faction info will be used. Might wanna do a ContainsCustomCursor check during this function and if it returns false then return null", "Docs/Classes/ISelectable/Functions/GetSelectedMouseCursor_CanAttackH.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "hostile", "unit"], "ISelectable");
addToContainers_function("GetSelectedMouseCursor_CanAttackFriendlyUnit", "Version for friendly targets", "Docs/Classes/ISelectable/Functions/GetSelectedMouseCursor_CanAttackF.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "friendly", "unit"], "ISelectable");
addToContainers_function("GetSelectedMouseCursor_CanAttackHostileBuilding", "Same deal except for buildings instead", "Docs/Classes/ISelectable/Functions/GetSelectedMouseCursor_CanAttackH_1.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "hostile", "building"], "ISelectable");
addToContainers_function("GetSelectedMouseCursor_CanAttackFriendlyBuilding", "", "Docs/Classes/ISelectable/Functions/GetSelectedMouseCursor_CanAttackF_1.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "friendly", "building"], "ISelectable");
addToContainers_function("OnRightClickCommand", "Called when player orders to move to location @param Location - location player clicked at", "Docs/Classes/ISelectable/Functions/OnRightClickCommand.html", ["on", "right", "click", "command"], "ISelectable");
addToContainers_function("OnRightClickCommand", "Called when player right clicks an another selectable while this one is selected. @param TargetAsSelectable - reference to selectable that was right clicked on as a selectable", "Docs/Classes/ISelectable/Functions/OnRightClickCommand_1.html", ["on", "right", "click", "command"], "ISelectable");
addToContainers_function("IssueCommand_PickUpItem", "Tell selectable to go pick up an inventory item that exists in the world. Assumes that the selectable at least has an inventory", "Docs/Classes/ISelectable/Functions/IssueCommand_PickUpItem.html", ["issue", "command_", "pick", "up", "item"], "ISelectable");
addToContainers_function("IssueCommand_MoveTo", "Recently added this. Pretty much the same as OnRightClickCommand. We\'re basically just saying move to a location. This func name is just more accurate because sometimes we tell selectables to move somewhere but it wasn\'t actually a right click that did it", "Docs/Classes/ISelectable/Functions/IssueCommand_MoveTo.html", ["issue", "command_", "move", "to"], "ISelectable");
addToContainers_function("IssueCommand_RightClickOnResourceSpot", "", "Docs/Classes/ISelectable/Functions/IssueCommand_RightClickOnResource.html", ["issue", "command_", "right", "click", "on", "resource", "spot"], "ISelectable");
addToContainers_function("IssueCommand_SpecialBuildingTargetingAbility", "Issue a command to use a building targeting ability on a building @param TargetBuilding - building to use the ability on @param AbilityInfo - info struct for the ability to use", "Docs/Classes/ISelectable/Functions/IssueCommand_SpecialBuildingTarge.html", ["issue", "command_", "special", "building", "targeting", "ability"], "ISelectable");
addToContainers_function("IssueCommand_EnterGarrison", "Issue a command to get in range of a building and enter it @param TargetBuilding - garrison to enter @param GarrisonAttributes - TargetBuilding\'s garrison attributes as a convenience", "Docs/Classes/ISelectable/Functions/IssueCommand_EnterGarrison.html", ["issue", "command_", "enter", "garrison"], "ISelectable");
addToContainers_function("OnLayFoundationCommand", "Special context command for going to a location and spawning a building as a foundation there", "Docs/Classes/ISelectable/Functions/OnLayFoundationCommand.html", ["on", "lay", "foundation", "command"], "ISelectable");
addToContainers_function("OnContextCommand", "Issue a 2-click context command that requires another selectable as a target. Can assume target is valid. Can assume ability if off cooldown. Basically everything should have been checked by PC. @param Command - the action to carry out @param ClickLoc - the world coords where the mouse was clicked @param Target - the selectable that was clicked on @param TargetInfo - selection info about the target", "Docs/Classes/ISelectable/Functions/OnContextCommand.html", ["on", "context", "command"], "ISelectable");
addToContainers_function("OnContextCommand", "Issue a 2-click context command that requires a location as the target. Can assume ability is off cooldown. @param AbilityInfo - info about the action to carry out @param ClickLoc - the world coords where the mouse was clicked", "Docs/Classes/ISelectable/Functions/OnContextCommand_1.html", ["on", "context", "command"], "ISelectable");
addToContainers_function("OnContextCommand", "Issue a 1-click context command @param AbilityInfo - info about the context command", "Docs/Classes/ISelectable/Functions/OnContextCommand_2.html", ["on", "context", "command"], "ISelectable");
addToContainers_function("IssueCommand_UseInventoryItem", "Issue a use inventory item command. This func will likely just bubble to AI controller. @param InventorySlotIndex - the inventory slot we are using. Server index", "Docs/Classes/ISelectable/Functions/IssueCommand_UseInventoryItem.html", ["issue", "command_", "use", "inventory", "item"], "ISelectable");
addToContainers_function("IssueCommand_UseInventoryItem", "Version for item uses that target a location in the world", "Docs/Classes/ISelectable/Functions/IssueCommand_UseInventoryItem_1.html", ["issue", "command_", "use", "inventory", "item"], "ISelectable");
addToContainers_function("IssueCommand_UseInventoryItem", "Version for item use that targets another selectable", "Docs/Classes/ISelectable/Functions/IssueCommand_UseInventoryItem_2.html", ["issue", "command_", "use", "inventory", "item"], "ISelectable");
addToContainers_function("OnEnemyDestroyed", "[Server] Call when destroying an enemy selectable", "Docs/Classes/ISelectable/Functions/OnEnemyDestroyed.html", ["on", "enemy", "destroyed"], "ISelectable");
addToContainers_function("Client_OnLevelGained", "", "Docs/Classes/ISelectable/Functions/Client_OnLevelGained.html", ["client_", "on", "level", "gained"], "ISelectable");
addToContainers_function("GetProductionQueue", "Get the production queue if a building. Here instead of in Building.h because context menu uses reference to ISelectable", "Docs/Classes/ISelectable/Functions/GetProductionQueue.html", ["get", "production", "queue"], "ISelectable");
addToContainers_function("OnProductionCancelled", "Cancel producing something if building. Here instead of in Building.h because context menu uses reference to ISelectable", "Docs/Classes/ISelectable/Functions/OnProductionCancelled.html", ["on", "production", "cancelled"], "ISelectable");
addToContainers_function("GetBuildingQueuePercentage", "Get how far along the construction queue for a building is in a range from 0 to 1", "Docs/Classes/ISelectable/Functions/GetBuildingQueuePercentage.html", ["get", "building", "queue", "percentage"], "ISelectable");
addToContainers_function("SetOnSpawnValues", "Flag whether this selectable is being spawned as one of the first selectables of the game that players start with @param bStartingSelectable - whether selectable is one that player started game with @param BuilderBuilding - building that built this, or null if none", "Docs/Classes/ISelectable/Functions/SetOnSpawnValues.html", ["set", "on", "spawn", "values"], "ISelectable");
addToContainers_function("SetSelectableIDAndGameTickCount", "Set the selectable ID for this selectable. Also set the value the game tick counter was at when this selectable was created. I guess you could call this on clients but it is ment for the server to set these and have them replicated to clients", "Docs/Classes/ISelectable/Functions/SetSelectableIDAndGameTickCount.html", ["set", "selectable", "i", "d", "and", "game", "tick", "count"], "ISelectable");
addToContainers_function("GetBodyLocationInfo", "Get info about the scene component that corrisponds to a particular body location @param BodyLocationType - the part of the body to get socket name for @return - info that contains the scenecomponent, bone/socket name and attach transform", "Docs/Classes/ISelectable/Functions/GetBodyLocationInfo.html", ["get", "body", "location", "info"], "ISelectable");
addToContainers_function("AttachParticles", "@param ParticleIndex - a value that references a certain particle system of the ability. An ability can attach up to 8 particles to a single target so range: [0, 7]. Actually the ParticleIndex thing can probably be ditched. It\'s really only required for looping particles but no ability will probably put looping particles on something. A buff/debuff that the ability APPLIES might but not the ability in any other way", "Docs/Classes/ISelectable/Functions/AttachParticles.html", ["attach", "particles"], "ISelectable");
addToContainers_function("AttachParticles", "", "Docs/Classes/ISelectable/Functions/AttachParticles_1.html", ["attach", "particles"], "ISelectable");
addToContainers_function("AttachParticles", "", "Docs/Classes/ISelectable/Functions/AttachParticles_2.html", ["attach", "particles"], "ISelectable");
addToContainers_function("RemoveAttachedParticles", "Remove attached particles that were the result of hacing a buff/debuff", "Docs/Classes/ISelectable/Functions/RemoveAttachedParticles.html", ["remove", "attached", "particles"], "ISelectable");
addToContainers_function("RemoveAttachedParticles", "", "Docs/Classes/ISelectable/Functions/RemoveAttachedParticles_1.html", ["remove", "attached", "particles"], "ISelectable");
addToContainers_function("OnContextMenuPlaceBuildingResult", "Called by PC on server when a building is tried to be placed from the context menu. @param PlacedBuilding - building that was placed successfully. Will be null if building could not be placed @param BuildMethod - build method building uses to build", "Docs/Classes/ISelectable/Functions/OnContextMenuPlaceBuildingResult.html", ["on", "context", "menu", "place", "building", "result"], "ISelectable");
addToContainers_function("OnWorkedOnBuildingConstructionComplete", "Called by building on all units working on it to let them know it has finished", "Docs/Classes/ISelectable/Functions/OnWorkedOnBuildingConstructionCom.html", ["on", "worked", "on", "building", "construction", "complete"], "ISelectable");
addToContainers_function("Server_OnOwningPlayerDefeated", "Called by server only when the owning player has been defeated but the match is still going", "Docs/Classes/ISelectable/Functions/Server_OnOwningPlayerDefeated.html", ["server_", "on", "owning", "player", "defeated"], "ISelectable");
addToContainers_function("GetActorLocationSelectable", "Should just call GetActorLocation()", "Docs/Classes/ISelectable/Functions/GetActorLocationSelectable.html", ["get", "actor", "location", "selectable"], "ISelectable");
addToContainers_function("GetDistanceFromAnotherForAbilitySquared", "Get how far the selectable considers itself from another selectable for the purposes of deciding whether it is in range to use an ability. @return - distance squared. This may return negative though which should be ok. This could be the case if say we take our own bounds into account and are overlapping the target.", "Docs/Classes/ISelectable/Functions/GetDistanceFromAnotherForAbilityS.html", ["get", "distance", "from", "another", "for", "ability", "squared"], "ISelectable");
addToContainers_function("GetDistanceFromLocationForAbilitySquared", "Get how far the selectable considers itself from a world location for the purpsoes of deciding whether it is range to use an ability @param Location - world location we are getting the distance from to us @return - distance squared. This may return negative though which is still ok.", "Docs/Classes/ISelectable/Functions/GetDistanceFromLocationForAbility.html", ["get", "distance", "from", "location", "for", "ability", "squared"], "ISelectable");
addToContainers_function("Consume_BuildingTargetingAbilityInstigator", "To consume a selectable means basically to instantly kill it. Examples: - in C&C when an engineer enters a building to either capture or repair it the engineer is basically destroyed", "Docs/Classes/ISelectable/Functions/Consume_BuildingTargetingAbilityI.html", ["consume_", "building", "targeting", "ability", "instigator"], "ISelectable");
addToContainers_function("CanClassAcceptBuffsAndDebuffs", "Returns whether the class is one that can have buffs/debuffs applied to it. This shouldn\'t take any state into account so is likely just to be either a straight \"true\" or \"false\". If this returns false then the selectable will never have any buffs/debuffs applied to it. Selectables such as resource spots may want this to be false (or not)", "Docs/Classes/ISelectable/Functions/CanClassAcceptBuffsAndDebuffs.html", ["can", "class", "accept", "buffs", "and", "debuffs"], "ISelectable");
addToContainers_function("GetStaticBuffArray", "Functions that return pointers to the appropriate arrays. If the selectable does not support having buffs/debuffs applied to it then these should return null", "Docs/Classes/ISelectable/Functions/GetStaticBuffArray.html", ["get", "static", "buff", "array"], "ISelectable");
addToContainers_function("GetTickableBuffArray", "", "Docs/Classes/ISelectable/Functions/GetTickableBuffArray.html", ["get", "tickable", "buff", "array"], "ISelectable");
addToContainers_function("GetStaticDebuffArray", "", "Docs/Classes/ISelectable/Functions/GetStaticDebuffArray.html", ["get", "static", "debuff", "array"], "ISelectable");
addToContainers_function("GetTickableDebuffArray", "", "Docs/Classes/ISelectable/Functions/GetTickableDebuffArray.html", ["get", "tickable", "debuff", "array"], "ISelectable");
addToContainers_function("GetBuffState", "Get the state info for a buff/debuff, or nullptr if selectable does not have the buff/debuff applied to them @param BuffOrDebuffType - buff/deuff to check for @param Type - whether it is a buff or debuff. Passing this in helps speed up function but could be removed if too inconvenient @return - nullptr means does not have debuff, otherwise returns pointer to the state info for the buff/debuff requested", "Docs/Classes/ISelectable/Functions/GetBuffState.html", ["get", "buff", "state"], "ISelectable");
addToContainers_function("GetBuffState", "", "Docs/Classes/ISelectable/Functions/GetBuffState_1.html", ["get", "buff", "state"], "ISelectable");
addToContainers_function("GetDebuffState", "", "Docs/Classes/ISelectable/Functions/GetDebuffState.html", ["get", "debuff", "state"], "ISelectable");
addToContainers_function("GetDebuffState", "", "Docs/Classes/ISelectable/Functions/GetDebuffState_1.html", ["get", "debuff", "state"], "ISelectable");
addToContainers_function("RegisterBuff", "Register that this selectable has a buff/debuff. Also sets the duration to full. Should update widgets too This is local only, not replicated in any way", "Docs/Classes/ISelectable/Functions/RegisterBuff.html", ["register", "buff"], "ISelectable");
addToContainers_function("RegisterDebuff", "", "Docs/Classes/ISelectable/Functions/RegisterDebuff.html", ["register", "debuff"], "ISelectable");
addToContainers_function("RegisterBuff", "", "Docs/Classes/ISelectable/Functions/RegisterBuff_1.html", ["register", "buff"], "ISelectable");
addToContainers_function("RegisterDebuff", "", "Docs/Classes/ISelectable/Functions/RegisterDebuff_1.html", ["register", "debuff"], "ISelectable");
addToContainers_function("RemoveBuff", "Remove a buff/debuff from this selectable. Assumes that we have checked that the buff/debuff is applied. Don\'t know if this will play well with networking though @param BuffType - type of buff to remove @param RemovalInstigator - what is instigating the removal of the buff. Can be null @param InstigatorAsSelectable - Instigator as an ISelectable. Can be null @param RemovalReason - what is causing the buff to be removed", "Docs/Classes/ISelectable/Functions/RemoveBuff.html", ["remove", "buff"], "ISelectable");
addToContainers_function("RemoveDebuff", "", "Docs/Classes/ISelectable/Functions/RemoveDebuff.html", ["remove", "debuff"], "ISelectable");
addToContainers_function("RemoveBuff", "", "Docs/Classes/ISelectable/Functions/RemoveBuff_1.html", ["remove", "buff"], "ISelectable");
addToContainers_function("RemoveDebuff", "", "Docs/Classes/ISelectable/Functions/RemoveDebuff_1.html", ["remove", "debuff"], "ISelectable");
addToContainers_function("Client_RemoveBuffGivenOutcome", "[Client] Remove a buff/debuff given an outcome of it that was calculated by the server", "Docs/Classes/ISelectable/Functions/Client_RemoveBuffGivenOutcome.html", ["client_", "remove", "buff", "given", "outcome"], "ISelectable");
addToContainers_function("Client_RemoveDebuffGivenOutcome", "", "Docs/Classes/ISelectable/Functions/Client_RemoveDebuffGivenOutcome.html", ["client_", "remove", "debuff", "given", "outcome"], "ISelectable");
addToContainers_function("Client_RemoveBuffGivenOutcome", "", "Docs/Classes/ISelectable/Functions/Client_RemoveBuffGivenOutcome_1.html", ["client_", "remove", "buff", "given", "outcome"], "ISelectable");
addToContainers_function("Client_RemoveDebuffGivenOutcome", "", "Docs/Classes/ISelectable/Functions/Client_RemoveDebuffGivenOutcome_1.html", ["client_", "remove", "debuff", "given", "outcome"], "ISelectable");
addToContainers_function("TakeDamageSelectable", "Here in case we only have an ISelectable pointer but want to deal damage to it. Implementation should just call TakeDamage @See AActor::TakeDamage", "Docs/Classes/ISelectable/Functions/TakeDamageSelectable.html", ["take", "damage", "selectable"], "ISelectable");
addToContainers_function("HasZeroHealth", "Return whether the selectable has zero health. The function Statics::HasZeroHealth(AActor *) and this should return the exact same result", "Docs/Classes/ISelectable/Functions/HasZeroHealth.html", ["has", "zero", "health"], "ISelectable");
addToContainers_function("ApplyTempMoveSpeedMultiplier", "[Server] Apply a movespeed modifier that is considered only temporary. It is important when calling this to make sure the buff/debuff that is causing this was not already on the selectable @param Multiplier - amount to multiply current movespeed by @return - move speed after the modifier is applied", "Docs/Classes/ISelectable/Functions/ApplyTempMoveSpeedMultiplier.html", ["apply", "temp", "move", "speed", "multiplier"], "ISelectable");
addToContainers_function("RemoveTempMoveSpeedMultiplier", "[Server] Remove a movespeed modifier that is considered only temporary. It is important when calling this to make sure the buff/debuff that is causing this was already on the selectable @param Multiplier - amount to multiply current movespeed by @return - move speed after the modifier is removed", "Docs/Classes/ISelectable/Functions/RemoveTempMoveSpeedMultiplier.html", ["remove", "temp", "move", "speed", "multiplier"], "ISelectable");
addToContainers_function("ApplyTempStealthModeEffect", "[Server] Make the unit enter stealth mode temporarily @return - whether the unit is in stealth mode after the change, so true every time", "Docs/Classes/ISelectable/Functions/ApplyTempStealthModeEffect.html", ["apply", "temp", "stealth", "mode", "effect"], "ISelectable");
addToContainers_function("RemoveTempStealthModeEffect", "[Server] Remove the effects of a temporary enter stealth mode effect @return - whether the unit is in stealth mode after the change", "Docs/Classes/ISelectable/Functions/RemoveTempStealthModeEffect.html", ["remove", "temp", "stealth", "mode", "effect"], "ISelectable");
addToContainers_function("Selectable_GetGI", "Get pointer to the game instance. Should do exactly what GetGI does", "Docs/Classes/ISelectable/Functions/Selectable_GetGI.html", ["selectable_", "get", "g", "i"], "ISelectable");
addToContainers_function("Selectable_GetPS", "Get a pointer to the player that owns this selectable", "Docs/Classes/ISelectable/Functions/Selectable_GetPS.html", ["selectable_", "get", "p", "s"], "ISelectable");
addToContainers_function("ShowTooltip", "Show the tooltip for this selectable. If the selectable does not want to show a tooltip then make this func do nothing.", "Docs/Classes/ISelectable/Functions/ShowTooltip.html", ["show", "tooltip"], "ISelectable");
addToContainers_function("GetPersistentWorldWidget", "", "Docs/Classes/ISelectable/Functions/GetPersistentWorldWidget.html", ["get", "persistent", "world", "widget"], "ISelectable");
addToContainers_function("GetSelectedWorldWidget", "", "Docs/Classes/ISelectable/Functions/GetSelectedWorldWidget.html", ["get", "selected", "world", "widget"], "ISelectable");
addToContainers_function("AdjustPersistentWorldWidgetForNewCameraZoomAmount", "This one doesn\'t need to be virtual ", "Docs/Classes/ISelectable/Functions/AdjustPersistentWorldWidgetForNew.html", ["adjust", "persistent", "world", "widget", "for", "new", "camera", "zoom", "amount"], "ISelectable");
addToContainers_function("AdjustSelectedWorldWidgetForNewCameraZoomAmount", "", "Docs/Classes/ISelectable/Functions/AdjustSelectedWorldWidgetForNewCa.html", ["adjust", "selected", "world", "widget", "for", "new", "camera", "zoom", "amount"], "ISelectable");
addToContainers_function("GetShopAttributes", "Get the shop attributes for this selectable. Returns null if the selectable does not display or sell items", "Docs/Classes/ISelectable/Functions/GetShopAttributes.html", ["get", "shop", "attributes"], "ISelectable");
addToContainers_function("OnItemPurchasedFromHere", "Called when an item is purchased from this selectable. @param ShopSlotIndex - index in the shop items array that the purchase was made @param ItemRecipient - selectable that purchased the item @param bTryUpdateHUD - if true and the selectable is selected then update the HUD e.g. change the quantity of the item in the shop if it\'s a limited quantity item etc", "Docs/Classes/ISelectable/Functions/OnItemPurchasedFromHere.html", ["on", "item", "purchased", "from", "here"], "ISelectable");
addToContainers_function("IsAShopInRange", "Returns whether a shop the selectable can sell items to is in range.", "Docs/Classes/ISelectable/Functions/IsAShopInRange.html", ["is", "a", "shop", "in", "range"], "ISelectable");
addToContainers_function("GetInventory", "Get a pointer to the selectable\'s inventory. Returns null if they do not have an inventory. Will likely return null if the inventory has a capacity of 0 (effectively meaning they don\'t have an inventory). Actually I think this will return a valid pointer but use FInventory::GetCapacity() to know capacity 0 meaning the selectable cannot carry any items", "Docs/Classes/ISelectable/Functions/GetInventory.html", ["get", "inventory"], "ISelectable");
addToContainers_function("GetInventoryModifiable", "", "Docs/Classes/ISelectable/Functions/GetInventoryModifiable.html", ["get", "inventory", "modifiable"], "ISelectable");
addToContainers_function("OnInventoryItemUse", "Called when the selectable uses an item in their inventory. Should put it on cooldown, reduce number of charges of item if applicable and spend selectable resource cost. Make sure HUD knows about it - it will need to decrement number of charges and display the cooldown remaining. @param ServerInventorySlotIndex - FInventory::SlotsArray index of what was used @param AbilityInfo - info struct for the effect of the use", "Docs/Classes/ISelectable/Functions/OnInventoryItemUse.html", ["on", "inventory", "item", "use"], "ISelectable");
addToContainers_function("StartInventoryItemUseCooldownTimerHandle", "This should just start the timer handle set to call a OnTimerFinished type func that updates the HUD.", "Docs/Classes/ISelectable/Functions/StartInventoryItemUseCooldownTime.html", ["start", "inventory", "item", "use", "cooldown", "timer", "handle"], "ISelectable");
addToContainers_function("PIE_IsForCPUPlayer", "Returns whether the selectable is setup to be used with either a CPU player or human player", "Docs/Classes/ISelectable/Functions/PIE_IsForCPUPlayer.html", ["i", "e_", "is", "for", "c", "p", "u", "player"], "ISelectable");
addToContainers_function("PIE_GetHumanOwnerIndex", "Get the human player owner index for PIE", "Docs/Classes/ISelectable/Functions/PIE_GetHumanOwnerIndex.html", ["i", "e_", "get", "human", "owner", "index"], "ISelectable");
addToContainers_function("PIE_GetCPUOwnerIndex", "Get the CPU player owner index for PIE", "Docs/Classes/ISelectable/Functions/PIE_GetCPUOwnerIndex.html", ["i", "e_", "get", "c", "p", "u", "owner", "index"], "ISelectable");
addToContainers_function("AdjustForUpgrades", "Functions that should be overridden by all that implement this interface but only called by themselves", "Docs/Classes/ISelectable/Functions/AdjustForUpgrades.html", ["adjust", "for", "upgrades"], "ISelectable");
addToContainers_class("ABuffAndDebuffManager", "Buff and debuff manager is where to define the behavior of buffs and debuffs. This file has nothing to do with abilities. All it has is the behavior for each buff/debuff. Assign function pointers in URTSGameInstance::SetupBuffsAndDebuffInfos() Buffs/debuffs also really have nothing to do with upgrades. Buffs and debuffs come in two types: static and tickable. Most of your buffs/debuffs will likely be tickable. Static buffs/debuffs do not have any tick logic and never expire on their own. They require some event to remove them. They give a slight performance increase over tickable buffs/debuffs so you should use them when you can. @See EStaticBuffAndDebuffType and ETickableBuffAndDebuffType About ticking: if a buff ticks 3 times with a 2sec tick interval it will last 6 seconds, and does not tick when first applied but rather 2 secs after. This behavior can easily be changed though in the buffs TryApplyTo function. If you want it to tick straight away then just add its logic in there Stackable buffs/debuffs not implemented Trying this with function pointers instead of virtuals but may switch to virtuals. =========================================================================================== How to create new buffs/debuffs: 1. Close editor if it is open 2. In CommonEnums.h add an entry to either EStaticBuffAndDebuffType or ETickableBuffAndDebuffType. 3. Copy and paste a group of 3 function signatures below. Do not need the DoTick one if you chose to add a static buff/debuff in step 2. 4. Implement the 3 or 2 functions. 5. In URTSGameInstance::SetupBuffsAndDebuffInfos add entry for the newly defined buff/debuff. 6. Compile C++ code. 7. Inside your game instance blueprint there should be an entry for the buff/debuff you just defined. Change the values to suit the behavior of your buff/debuff", "Docs/Classes/ABuffAndDebuffManager/ABuffAndDebuffManager.html", ["buff", "and", "debuff", "manager"], "");
addToContainers_function("ABuffAndDebuffManager", "", "Docs/Classes/ABuffAndDebuffManager/Functions/ABuffAndDebuffManager.html", ["buff", "and", "debuff", "manager"], "ABuffAndDebuffManager");
addToContainers_function("Tick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Tick.html", [], "ABuffAndDebuffManager");
addToContainers_function("TickSingleBuffOrDebuff", "Tick a single buff/debuff. More suited to be a member of FTickableBuffOrDebuffInstanceInfo", "Docs/Classes/ABuffAndDebuffManager/Functions/TickSingleBuffOrDebuff.html", ["tick", "single", "buff", "or", "debuff"], "ABuffAndDebuffManager");
addToContainers_function("Dash_TryApplyTo", "50% move speed increase buff", "Docs/Classes/ABuffAndDebuffManager/Functions/Dash_TryApplyTo.html", ["dash_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("Dash_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Dash_DoTick.html", ["dash_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("Dash_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Dash_OnRemoved.html", ["dash_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("Haste_TryApplyTo", "30% move speed increase buff", "Docs/Classes/ABuffAndDebuffManager/Functions/Haste_TryApplyTo.html", ["haste_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("Haste_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Haste_DoTick.html", ["haste_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("Haste_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Haste_OnRemoved.html", ["haste_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("BasicHealOverTime_TryApplyTo", "Basic heal over time", "Docs/Classes/ABuffAndDebuffManager/Functions/BasicHealOverTime_TryApplyTo.html", ["basic", "heal", "over", "time_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("BasicHealOverTime_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/BasicHealOverTime_DoTick.html", ["basic", "heal", "over", "time_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("BasicHealOverTime_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/BasicHealOverTime_OnRemoved.html", ["basic", "heal", "over", "time_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("IncreasingHealOverTime_TryApplyTo", "Heal over time that increases over time ", "Docs/Classes/ABuffAndDebuffManager/Functions/IncreasingHealOverTime_TryApplyTo.html", ["increasing", "heal", "over", "time_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("IncreasingHealOverTime_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/IncreasingHealOverTime_DoTick.html", ["increasing", "heal", "over", "time_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("IncreasingHealOverTime_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/IncreasingHealOverTime_OnRemoved.html", ["increasing", "heal", "over", "time_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("ThePlague_TryApplyTo", "\'The plague\'. Debuff that never expires on its own and increases damage taken by 20%", "Docs/Classes/ABuffAndDebuffManager/Functions/ThePlague_TryApplyTo.html", ["the", "plague_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("ThePlague_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/ThePlague_OnRemoved.html", ["the", "plague_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("CleansersMightOrWhatever_TryApplyTo", "Buff applied to the unit that cleanses \'the plague\' ", "Docs/Classes/ABuffAndDebuffManager/Functions/CleansersMightOrWhatever_TryApply.html", ["cleansers", "might", "or", "whatever_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("CleansersMightOrWhatever_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/CleansersMightOrWhatever_DoTick.html", ["cleansers", "might", "or", "whatever_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("CleansersMightOrWhatever_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/CleansersMightOrWhatever_OnRemove.html", ["cleansers", "might", "or", "whatever_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("PainOverTime_TryApplyTo", "A debuff that deals damage over time and heals the instigator if it kills the target", "Docs/Classes/ABuffAndDebuffManager/Functions/PainOverTime_TryApplyTo.html", ["pain", "over", "time_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("PainOverTime_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/PainOverTime_DoTick.html", ["pain", "over", "time_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("PainOverTime_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/PainOverTime_OnRemoved.html", ["pain", "over", "time_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("Corruption_TryApplyTo", "A debuff that deals damage over time", "Docs/Classes/ABuffAndDebuffManager/Functions/Corruption_TryApplyTo.html", ["corruption_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("Corruption_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Corruption_DoTick.html", ["corruption_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("Corruption_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Corruption_OnRemoved.html", ["corruption_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("SealFate_TryApplyTo", "A debuff that deals a massive amount of damage after a while", "Docs/Classes/ABuffAndDebuffManager/Functions/SealFate_TryApplyTo.html", ["seal", "fate_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("SealFate_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/SealFate_DoTick.html", ["seal", "fate_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("SealFate_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/SealFate_OnRemoved.html", ["seal", "fate_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("TheCurse_TryApplyTo", "A debuff that deals damage over time and never expires", "Docs/Classes/ABuffAndDebuffManager/Functions/TheCurse_TryApplyTo.html", ["the", "curse_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("TheCurse_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/TheCurse_DoTick.html", ["the", "curse_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("TheCurse_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/TheCurse_OnRemoved.html", ["the", "curse_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("NearInvulnerability_TryApplyTo", "A buff that makes you almost invulnerable", "Docs/Classes/ABuffAndDebuffManager/Functions/NearInvulnerability_TryApplyTo.html", ["near", "invulnerability_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("NearInvulnerability_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/NearInvulnerability_DoTick.html", ["near", "invulnerability_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("NearInvulnerability_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/NearInvulnerability_OnRemoved.html", ["near", "invulnerability_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("TempStealth_TryApplyTo", "Enter stealth mode for 10sec", "Docs/Classes/ABuffAndDebuffManager/Functions/TempStealth_TryApplyTo.html", ["temp", "stealth_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("TempStealth_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/TempStealth_DoTick.html", ["temp", "stealth_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("TempStealth_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/TempStealth_OnRemoved.html", ["temp", "stealth_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("EatPumpkinEffect_TryApplyTo", "Regen 50% of max health over 15 sec", "Docs/Classes/ABuffAndDebuffManager/Functions/EatPumpkinEffect_TryApplyTo.html", ["eat", "pumpkin", "effect_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("EatPumpkinEffect_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/EatPumpkinEffect_DoTick.html", ["eat", "pumpkin", "effect_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("EatPumpkinEffect_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/EatPumpkinEffect_OnRemoved.html", ["eat", "pumpkin", "effect_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_function("Beserk_TryApplyTo", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Beserk_TryApplyTo.html", ["beserk_", "try", "apply", "to"], "ABuffAndDebuffManager");
addToContainers_function("Beserk_DoTick", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Beserk_DoTick.html", ["beserk_", "do", "tick"], "ABuffAndDebuffManager");
addToContainers_function("Beserk_OnRemoved", "", "Docs/Classes/ABuffAndDebuffManager/Functions/Beserk_OnRemoved.html", ["beserk_", "on", "removed"], "ABuffAndDebuffManager");
addToContainers_class("ACPUControllerTickManager", "Tick manager responsible for ticking the CPU player AI controllers. The tick manager is here so at most one CPU player ticks each tick. CPU player tick behavior can range from doing next to nothing to doing many sweeps and large amounts of iteration. By using the tick manager this guarantees at most one AI controller ticks each engine tick. CPU player tick rate is dependent on engine tick rate i.e. at 120fps twice as many AI controller ticks will happen than if at 60fps. This can be easily changed but isn\'t that big of a deal. A good thing to note though is that the number of CPU players in the match does not affect how often they will tick i.e. in a 1 CPU player match, that CPU player ticks just as often as if they were in a 7 CPU player match.", "Docs/Classes/ACPUControllerTickManager/ACPUControllerTickManager.html", ["c", "p", "u", "controller", "tick", "manager"], "");
addToContainers_function("ACPUControllerTickManager", "", "Docs/Classes/ACPUControllerTickManager/Functions/ACPUControllerTickManager.html", ["c", "p", "u", "controller", "tick", "manager"], "ACPUControllerTickManager");
addToContainers_function("Tick", "During this function tick a single CPU player AI controller", "Docs/Classes/ACPUControllerTickManager/Functions/Tick.html", [], "ACPUControllerTickManager");
addToContainers_function("RegisterNewCPUPlayerAIController", "", "Docs/Classes/ACPUControllerTickManager/Functions/RegisterNewCPUPlayerAIController.html", ["register", "new", "c", "p", "u", "player", "a", "i", "controller"], "ACPUControllerTickManager");
addToContainers_variable("NUM_CONTROLLER_ARRAY_ENTRIES", "How many entries to put in AIControllers array", "Docs/Classes/ACPUControllerTickManager/Variables/NUM_CONTROLLER_ARRAY_ENTRIES.html", ["u", "m_", "c", "o", "n", "t", "r", "o", "l", "l", "e", "r_", "a", "r", "r", "a", "y_", "e", "n", "t", "r", "i", "e", "s"], "ACPUControllerTickManager");
addToContainers_variable("Index", "Index for AIControllers", "Docs/Classes/ACPUControllerTickManager/Variables/Index.html", [], "ACPUControllerTickManager");
addToContainers_variable("AIControllers", "CPU Player AI controllers this manager is in charge if ticking", "Docs/Classes/ACPUControllerTickManager/Variables/AIControllers.html", ["i", "controllers"], "ACPUControllerTickManager");
addToContainers_variable("NumAIControllers", "How many CPU AI controllers have been registered", "Docs/Classes/ACPUControllerTickManager/Variables/NumAIControllers.html", ["num", "a", "i", "controllers"], "ACPUControllerTickManager");
addToContainers_struct("FTileArray", "Workaround for non-multidimension TArrays", "Docs/Structs/FTileArray/FTileArray.html", ["tile", "array"], "");
addToContainers_function("GetTiles", "", "Docs/Structs/FTileArray/Functions/GetTiles.html", ["get", "tiles"], "FTileArray");
addToContainers_function("GetTiles", "", "Docs/Structs/FTileArray/Functions/GetTiles_1.html", ["get", "tiles"], "FTileArray");
addToContainers_function("SetTileVisibility", "", "Docs/Structs/FTileArray/Functions/SetTileVisibility.html", ["set", "tile", "visibility"], "FTileArray");
addToContainers_variable("", "", "Docs/Structs/FTileArray/Variables/.html", [], "FTileArray");
addToContainers_struct("FIntegerArray", "Array of FVector2D", "Docs/Structs/FIntegerArray/FIntegerArray.html", ["integer", "array"], "");
addToContainers_function("Reserve", "", "Docs/Structs/FIntegerArray/Functions/Reserve.html", [], "FIntegerArray");
addToContainers_function("Emplace", "", "Docs/Structs/FIntegerArray/Functions/Emplace.html", [], "FIntegerArray");
addToContainers_function("GetArray", "", "Docs/Structs/FIntegerArray/Functions/GetArray.html", ["get", "array"], "FIntegerArray");
addToContainers_function("FIntegerArray", "", "Docs/Structs/FIntegerArray/Functions/FIntegerArray.html", ["integer", "array"], "FIntegerArray");
addToContainers_function("FIntegerArray", "", "Docs/Structs/FIntegerArray/Functions/FIntegerArray_1.html", ["integer", "array"], "FIntegerArray");
addToContainers_variable("", "", "Docs/Structs/FIntegerArray/Variables/.html", [], "FIntegerArray");
addToContainers_class("AFogOfWarManager", "------------------------------------------------------------------------------------------ This class if for single threaded fog of war that runs on the game thread only. Look at MultithreadedFogOfWar.h for an implementation that runs on its own thread. ------------------------------------------------------------------------------------------ On clients: Responsible for deciding what tiles your team can see, hiding/revealing things on those tiles and rendering the fog of war. On server: Responsible for deciding which tiles every team can see and storing this information for 2 reasons: - Knowing what can see what for AI behavior purposes - Stopping replication updates on a per connection basis for some things inside fog Server also hides/reveals the things the local player can/can\'t see and renders its own fog Currently relies on fog of war volume having equal width and length", "Docs/Classes/AFogOfWarManager/AFogOfWarManager.html", ["fog", "of", "war", "manager"], "");
addToContainers_function("AFogOfWarManager", "", "Docs/Classes/AFogOfWarManager/Functions/AFogOfWarManager.html", ["fog", "of", "war", "manager"], "AFogOfWarManager");
addToContainers_function("Initialize", "Setup for match @param FogVolume - fog volume for current map @param NumTeams - number of teams in match @param InLocalPlayersTeam - team of the player that spawned this", "Docs/Classes/AFogOfWarManager/Functions/Initialize.html", [], "AFogOfWarManager");
addToContainers_function("SetupReferences", "", "Docs/Classes/AFogOfWarManager/Functions/SetupReferences.html", ["setup", "references"], "AFogOfWarManager");
addToContainers_function("SetupMapInfo", "Setup information about map @param FogVolume - fog volume for current map", "Docs/Classes/AFogOfWarManager/Functions/SetupMapInfo.html", ["setup", "map", "info"], "AFogOfWarManager");
addToContainers_function("SetupTileInfo", "Setup tile info", "Docs/Classes/AFogOfWarManager/Functions/SetupTileInfo.html", ["setup", "tile", "info"], "AFogOfWarManager");
addToContainers_function("SetupRenderingReferences", "", "Docs/Classes/AFogOfWarManager/Functions/SetupRenderingReferences.html", ["setup", "rendering", "references"], "AFogOfWarManager");
addToContainers_function("SetupTeamTempRevealEffects", "", "Docs/Classes/AFogOfWarManager/Functions/SetupTeamTempRevealEffects.html", ["setup", "team", "temp", "reveal", "effects"], "AFogOfWarManager");
addToContainers_function("Tick", "", "Docs/Classes/AFogOfWarManager/Functions/Tick.html", [], "AFogOfWarManager");
addToContainers_function("BeginDestroy", "", "Docs/Classes/AFogOfWarManager/Functions/BeginDestroy.html", ["begin", "destroy"], "AFogOfWarManager");
addToContainers_function("GetGridCoords", "", "Docs/Classes/AFogOfWarManager/Functions/GetGridCoords.html", ["get", "grid", "coords"], "AFogOfWarManager");
addToContainers_function("GetGridCoords", "", "Docs/Classes/AFogOfWarManager/Functions/GetGridCoords_1.html", ["get", "grid", "coords"], "AFogOfWarManager");
addToContainers_function("GetGridCoords", "", "Docs/Classes/AFogOfWarManager/Functions/GetGridCoords_2.html", ["get", "grid", "coords"], "AFogOfWarManager");
addToContainers_function("GetFogStatusForLocation", "", "Docs/Classes/AFogOfWarManager/Functions/GetFogStatusForLocation.html", ["get", "fog", "status", "for", "location"], "AFogOfWarManager");
addToContainers_function("GetFogStatusForLocation", "", "Docs/Classes/AFogOfWarManager/Functions/GetFogStatusForLocation_1.html", ["get", "fog", "status", "for", "location"], "AFogOfWarManager");
addToContainers_function("GetFogStatusForLocation", "", "Docs/Classes/AFogOfWarManager/Functions/GetFogStatusForLocation_2.html", ["get", "fog", "status", "for", "location"], "AFogOfWarManager");
addToContainers_function("GetTileIndex", "", "Docs/Classes/AFogOfWarManager/Functions/GetTileIndex.html", ["get", "tile", "index"], "AFogOfWarManager");
addToContainers_function("ResetTeamVisibility", "", "Docs/Classes/AFogOfWarManager/Functions/ResetTeamVisibility.html", ["reset", "team", "visibility"], "AFogOfWarManager");
addToContainers_function("ComputeTeamVisibility", "", "Docs/Classes/AFogOfWarManager/Functions/ComputeTeamVisibility.html", ["compute", "team", "visibility"], "AFogOfWarManager");
addToContainers_function("Client_HideAndRevealSelectables", "Check what selectables a team can see", "Docs/Classes/AFogOfWarManager/Functions/Client_HideAndRevealSelectables.html", ["client_", "hide", "and", "reveal", "selectables"], "AFogOfWarManager");
addToContainers_function("Server_HideAndRevealSelectables", "Server version that does what client version does but also stores all visibility info in GS for AI purposes (and eventually to pause replication on a pre connection basis)", "Docs/Classes/AFogOfWarManager/Functions/Server_HideAndRevealSelectables.html", ["server_", "hide", "and", "reveal", "selectables"], "AFogOfWarManager");
addToContainers_function("Server_StoreResourceSpotVisInfo", "For resource spots", "Docs/Classes/AFogOfWarManager/Functions/Server_StoreResourceSpotVisInfo.html", ["server_", "store", "resource", "spot", "vis", "info"], "AFogOfWarManager");
addToContainers_function("HideAndRevealTemporaries", "Check what temporary actors/components spawned into the world such as projectiles or particle effects a team can see", "Docs/Classes/AFogOfWarManager/Functions/HideAndRevealTemporaries.html", ["hide", "and", "reveal", "temporaries"], "AFogOfWarManager");
addToContainers_function("Server_HideAndRevealInventoryItems", "For inventory items in the world", "Docs/Classes/AFogOfWarManager/Functions/Server_HideAndRevealInventoryItem.html", ["server_", "hide", "and", "reveal", "inventory", "items"], "AFogOfWarManager");
addToContainers_function("Server_StoreNonLocalTeamsInventoryItemVisInfo", "", "Docs/Classes/AFogOfWarManager/Functions/Server_StoreNonLocalTeamsInventor.html", ["server_", "store", "non", "local", "teams", "inventory", "item", "vis", "info"], "AFogOfWarManager");
addToContainers_function("Client_HideAndRevealInventoryItems", "", "Docs/Classes/AFogOfWarManager/Functions/Client_HideAndRevealInventoryItem.html", ["client_", "hide", "and", "reveal", "inventory", "items"], "AFogOfWarManager");
addToContainers_function("MuteAndUnmuteAudio", "", "Docs/Classes/AFogOfWarManager/Functions/MuteAndUnmuteAudio.html", ["mute", "and", "unmute", "audio"], "AFogOfWarManager");
addToContainers_function("RevealFogAroundLocation", "Utility function which calculates which tiles should be visible for a location and stores them in the team\'s visibility array @param Tiles - team\'s visibility array", "Docs/Classes/AFogOfWarManager/Functions/RevealFogAroundLocation.html", ["reveal", "fog", "around", "location"], "AFogOfWarManager");
addToContainers_function("StoreTeamVisibility", "", "Docs/Classes/AFogOfWarManager/Functions/StoreTeamVisibility.html", ["store", "team", "visibility"], "AFogOfWarManager");
addToContainers_function("RenderFogOfWar", "", "Docs/Classes/AFogOfWarManager/Functions/RenderFogOfWar.html", ["render", "fog", "of", "war"], "AFogOfWarManager");
addToContainers_function("FillTextureBuffer", "", "Docs/Classes/AFogOfWarManager/Functions/FillTextureBuffer.html", ["fill", "texture", "buffer"], "AFogOfWarManager");
addToContainers_function("UpdateTextureRegions", "Helper function. Actually gives command to render fog", "Docs/Classes/AFogOfWarManager/Functions/UpdateTextureRegions.html", ["update", "texture", "regions"], "AFogOfWarManager");
addToContainers_function("IsTileVisible", "@param TileIndex - index in Tiles @param Team - team to check for @return - non-zero value if the tile is visible i.e. it is either Revealed or StealthRevealed", "Docs/Classes/AFogOfWarManager/Functions/IsTileVisible.html", ["is", "tile", "visible"], "AFogOfWarManager");
addToContainers_function("IsTileVisibleNotChecked", "Return the visibility of a tile for a team. If TileIndex is not a valid index i.e. the location is outside the fog grid then this will return not visible", "Docs/Classes/AFogOfWarManager/Functions/IsTileVisibleNotChecked.html", ["is", "tile", "visible", "not", "checked"], "AFogOfWarManager");
addToContainers_function("BitwiseOrOperator", "", "Docs/Classes/AFogOfWarManager/Functions/BitwiseOrOperator.html", ["bitwise", "or", "operator"], "AFogOfWarManager");
addToContainers_function("BitwiseOrOperator", "", "Docs/Classes/AFogOfWarManager/Functions/BitwiseOrOperator_1.html", ["bitwise", "or", "operator"], "AFogOfWarManager");
addToContainers_function("IsLocationVisible", "Return whether a world location is revealed by fog for a particular team. Assumes the location is one inside the RTS level bounds", "Docs/Classes/AFogOfWarManager/Functions/IsLocationVisible.html", ["is", "location", "visible"], "AFogOfWarManager");
addToContainers_function("IsLocationVisibleNotChecked", "Return whether a world location is revealed by fog of war for a particular team. It is OK to pass in values that are outside the RTS level bounds. Behavior for that case is this will return false", "Docs/Classes/AFogOfWarManager/Functions/IsLocationVisibleNotChecked.html", ["is", "location", "visible", "not", "checked"], "AFogOfWarManager");
addToContainers_function("IsLocationLocallyVisible", "Version that uses the local players team", "Docs/Classes/AFogOfWarManager/Functions/IsLocationLocallyVisible.html", ["is", "location", "locally", "visible"], "AFogOfWarManager");
addToContainers_function("IsLocationLocallyVisibleNotChecked", "Version that uses the local players team. Can handle tiles outside the fog tile grid", "Docs/Classes/AFogOfWarManager/Functions/IsLocationLocallyVisibleNotChecke.html", ["is", "location", "locally", "visible", "not", "checked"], "AFogOfWarManager");
addToContainers_function("GetLocationVisibilityStatus", "", "Docs/Classes/AFogOfWarManager/Functions/GetLocationVisibilityStatus.html", ["get", "location", "visibility", "status"], "AFogOfWarManager");
addToContainers_function("GetLocationVisibilityStatusLocally", "Get the fog status of a location for the local player", "Docs/Classes/AFogOfWarManager/Functions/GetLocationVisibilityStatusLocall.html", ["get", "location", "visibility", "status", "locally"], "AFogOfWarManager");
addToContainers_function("GetLocationVisibilityStatusNotChecked", "", "Docs/Classes/AFogOfWarManager/Functions/GetLocationVisibilityStatusNotChe.html", ["get", "location", "visibility", "status", "not", "checked"], "AFogOfWarManager");
addToContainers_function("GetLocationVisibilityStatusLocallyNotChecked", "Get the fog status of a location for the local player", "Docs/Classes/AFogOfWarManager/Functions/GetLocationVisibilityStatusLocall_1.html", ["get", "location", "visibility", "status", "locally", "not", "checked"], "AFogOfWarManager");
addToContainers_function("IsProjectileVisible", "Return whether a projectile should be visible or not @param Projectile - the projectile to check visibility for @param Team - the team of the player who is checking for visibility", "Docs/Classes/AFogOfWarManager/Functions/IsProjectileVisible.html", ["is", "projectile", "visible"], "AFogOfWarManager");
addToContainers_function("OnBuildingPlaced", "Called by player state when a building is placed", "Docs/Classes/AFogOfWarManager/Functions/OnBuildingPlaced.html", ["on", "building", "placed"], "AFogOfWarManager");
addToContainers_function("OnBuildingDestroyed", "Called by player state when a building is destroyed", "Docs/Classes/AFogOfWarManager/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "AFogOfWarManager");
addToContainers_function("CreateTeamTemporaryRevealEffect", "", "Docs/Classes/AFogOfWarManager/Functions/CreateTeamTemporaryRevealEffect.html", ["create", "team", "temporary", "reveal", "effect"], "AFogOfWarManager");
addToContainers_variable("NumTeams", "Number of teams in match", "Docs/Classes/AFogOfWarManager/Variables/NumTeams.html", ["num", "teams"], "AFogOfWarManager");
addToContainers_variable("LocalPlayersTeam", "The team of the local player", "Docs/Classes/AFogOfWarManager/Variables/LocalPlayersTeam.html", ["local", "players", "team"], "AFogOfWarManager");
addToContainers_variable("", "Reference to player state this is for", "Docs/Classes/AFogOfWarManager/Variables/.html", [], "AFogOfWarManager");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AFogOfWarManager/Variables/_1.html", [], "AFogOfWarManager");
addToContainers_variable("TeamTempRevealEffects", "Temporary reveal effects for teams. Key = Statics::TeamToArrayIndex e.g. command center scans, patch revealed by using nuke at it", "Docs/Classes/AFogOfWarManager/Variables/TeamTempRevealEffects.html", ["team", "temp", "reveal", "effects"], "AFogOfWarManager");
addToContainers_variable("", "Each teams visibility of each tile. On clients only their own teams array will be updated. On server every teams array will be updated", "Docs/Classes/AFogOfWarManager/Variables/_2.html", [], "AFogOfWarManager");
addToContainers_variable("", "Maps building to all the indices in Tiles that their visibility should be checked against", "Docs/Classes/AFogOfWarManager/Variables/_3.html", [], "AFogOfWarManager");
addToContainers_variable("MapCenter", "Map center ignoring Z axis", "Docs/Classes/AFogOfWarManager/Variables/MapCenter.html", ["map", "center"], "AFogOfWarManager");
addToContainers_variable("MapDimensions", "Width and height of map in Unreal Units.", "Docs/Classes/AFogOfWarManager/Variables/MapDimensions.html", ["map", "dimensions"], "AFogOfWarManager");
addToContainers_variable("MapTileDimensions", "Map dimensions in tiles.", "Docs/Classes/AFogOfWarManager/Variables/MapTileDimensions.html", ["map", "tile", "dimensions"], "AFogOfWarManager");
addToContainers_variable("", "Post process fog of war material", "Docs/Classes/AFogOfWarManager/Variables/_4.html", [], "AFogOfWarManager");
addToContainers_variable("", "Renders fog of war", "Docs/Classes/AFogOfWarManager/Variables/_5.html", [], "AFogOfWarManager");
addToContainers_variable("TextureBuffer", "Fog of war buffer for rendering. Array. TODO: try and just use Tiles array instead", "Docs/Classes/AFogOfWarManager/Variables/TextureBuffer.html", ["texture", "buffer"], "AFogOfWarManager");
addToContainers_variable("FogTexture", "Fog of war texture", "Docs/Classes/AFogOfWarManager/Variables/FogTexture.html", ["fog", "texture"], "AFogOfWarManager");
addToContainers_variable("TextureRegions", "For rendering fog of war", "Docs/Classes/AFogOfWarManager/Variables/TextureRegions.html", ["texture", "regions"], "AFogOfWarManager");
addToContainers_variable("MapDimensionsInverse", "1.f / MapDimensions. Used to avoid division", "Docs/Classes/AFogOfWarManager/Variables/MapDimensionsInverse.html", ["map", "dimensions", "inverse"], "AFogOfWarManager");
addToContainers_class("UHeavyTaskManager", "Heavy task manager is ment to carry out computer resource intense tasks as \'spread out\' as possible to avoid any hitching. e.g. every so often a capsule sweep is required to see what units are in range of other units. Well this manager is ment to make it so each frame does approx the same number of sweeps as the last frame.", "Docs/Classes/UHeavyTaskManager/UHeavyTaskManager.html", ["heavy", "task", "manager"], "");
addToContainers_function("Tick", "~ Begin overrides for FTickableGameObject", "Docs/Classes/UHeavyTaskManager/Functions/Tick.html", [], "UHeavyTaskManager");
addToContainers_function("GetStatId", "", "Docs/Classes/UHeavyTaskManager/Functions/GetStatId.html", ["get", "stat", "id"], "UHeavyTaskManager");
addToContainers_function("GetTickableTickType", "", "Docs/Classes/UHeavyTaskManager/Functions/GetTickableTickType.html", ["get", "tickable", "tick", "type"], "UHeavyTaskManager");
addToContainers_function("AsyncCapsuleOverlapTest", "Check all the actors that overlap a capsule at a world location", "Docs/Classes/UHeavyTaskManager/Functions/AsyncCapsuleOverlapTest.html", ["async", "capsule", "overlap", "test"], "UHeavyTaskManager");
addToContainers_function("RegisterBuildingAttackComponent", "Have a building attack component start doing sweeps for targets", "Docs/Classes/UHeavyTaskManager/Functions/RegisterBuildingAttackComponent.html", ["register", "building", "attack", "component"], "UHeavyTaskManager");
addToContainers_function("UnregisterBuildingAttackComponent", "Stop a building attack component from having its sweep done. If the building has reached zero health then that might be a time when you want to call this", "Docs/Classes/UHeavyTaskManager/Functions/UnregisterBuildingAttackComponent.html", ["unregister", "building", "attack", "component"], "UHeavyTaskManager");
addToContainers_function("GetOptimalBucket_BuildingAttackComponent", "Return the which bucket a defense component should be placed into", "Docs/Classes/UHeavyTaskManager/Functions/GetOptimalBucket_BuildingAttackCo.html", ["get", "optimal", "bucket_", "building", "attack", "component"], "UHeavyTaskManager");
addToContainers_variable("NUM_BUILDING_ATTACK_COMP_BUCKETS", "----------------------------------------------------------------", "Docs/Classes/UHeavyTaskManager/Variables/NUM_BUILDING_ATTACK_COMP_BUCKETS.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "a", "t", "t", "a", "c", "k_", "c", "o", "m", "p_", "b", "u", "c", "k", "e", "t", "s"], "UHeavyTaskManager");
addToContainers_variable("CurrentBuildingAttackCompBucketForTick", "", "Docs/Classes/UHeavyTaskManager/Variables/CurrentBuildingAttackCompBucketFo.html", ["current", "building", "attack", "comp", "bucket", "for", "tick"], "UHeavyTaskManager");
addToContainers_variable("BuildingAttackComps[NUM_BUILDING_ATTACK_COMP_BUCKETS]", "Each building attack comp that wants to find targets.", "Docs/Classes/UHeavyTaskManager/Variables/BuildingAttackComps[NUM_BUILDING_.html", ["building", "attack", "comps[", "n", "u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "a", "t", "t", "a", "c", "k_", "c", "o", "m", "p_", "b", "u", "c", "k", "e", "t", "s]"], "UHeavyTaskManager");
addToContainers_struct("BuildingAttackComp_TurretData", "Data to carry out a sweep for a building turret component", "Docs/Structs/BuildingAttackComp_TurretData/BuildingAttackComp_TurretData.html", ["building", "attack", "comp_", "turret", "data"], "");
addToContainers_function("BuildingAttackComp_TurretData", "Constructor for a IBuildingAttackComp_Turret to call", "Docs/Structs/BuildingAttackComp_TurretData/Functions/BuildingAttackComp_TurretData.html", ["building", "attack", "comp_", "turret", "data"], "BuildingAttackComp_TurretData");
addToContainers_function("GetAttackComponent", "Constructor for a IBuildingAttackComp_Turret to call", "Docs/Structs/BuildingAttackComp_TurretData/Functions/GetAttackComponent.html", ["get", "attack", "component"], "BuildingAttackComp_TurretData");
addToContainers_function("GetTraceDelegate", "", "Docs/Structs/BuildingAttackComp_TurretData/Functions/GetTraceDelegate.html", ["get", "trace", "delegate"], "BuildingAttackComp_TurretData");
addToContainers_function("GetQueryParams", "", "Docs/Structs/BuildingAttackComp_TurretData/Functions/GetQueryParams.html", ["get", "query", "params"], "BuildingAttackComp_TurretData");
addToContainers_function("GetLocation", "", "Docs/Structs/BuildingAttackComp_TurretData/Functions/GetLocation.html", ["get", "location"], "BuildingAttackComp_TurretData");
addToContainers_function("GetSweepRadius", "", "Docs/Structs/BuildingAttackComp_TurretData/Functions/GetSweepRadius.html", ["get", "sweep", "radius"], "BuildingAttackComp_TurretData");
addToContainers_variable("AttackComponent", "", "Docs/Structs/BuildingAttackComp_TurretData/Variables/AttackComponent.html", ["attack", "component"], "BuildingAttackComp_TurretData");
addToContainers_variable("TraceDelegate", "", "Docs/Structs/BuildingAttackComp_TurretData/Variables/TraceDelegate.html", ["trace", "delegate"], "BuildingAttackComp_TurretData");
addToContainers_variable("QueryParams", "", "Docs/Structs/BuildingAttackComp_TurretData/Variables/QueryParams.html", ["query", "params"], "BuildingAttackComp_TurretData");
addToContainers_variable("Location", "World location where to do sweep from", "Docs/Structs/BuildingAttackComp_TurretData/Variables/Location.html", [], "BuildingAttackComp_TurretData");
addToContainers_variable("SweepRadius", "Radius of sweep", "Docs/Structs/BuildingAttackComp_TurretData/Variables/SweepRadius.html", ["sweep", "radius"], "BuildingAttackComp_TurretData");
addToContainers_struct("Array_BuildingAttackComp_TurretData", "", "Docs/Structs/Array_BuildingAttackComp_TurretDa/Array_BuildingAttackComp_TurretDa.html", ["array_", "building", "attack", "comp_", "turret", "data"], "");
addToContainers_variable("Array", "", "Docs/Structs/Array_BuildingAttackComp_TurretDa/Variables/Array.html", [], "Array_BuildingAttackComp_TurretData");
addToContainers_struct("FTaskManagerBucketInfo", "All the data required for an object to find itself in O(1)", "Docs/Structs/FTaskManagerBucketInfo/FTaskManagerBucketInfo.html", ["task", "manager", "bucket", "info"], "");
addToContainers_function("FTaskManagerBucketInfo", "", "Docs/Structs/FTaskManagerBucketInfo/Functions/FTaskManagerBucketInfo.html", ["task", "manager", "bucket", "info"], "FTaskManagerBucketInfo");
addToContainers_function("FTaskManagerBucketInfo", "", "Docs/Structs/FTaskManagerBucketInfo/Functions/FTaskManagerBucketInfo_1.html", ["task", "manager", "bucket", "info"], "FTaskManagerBucketInfo");
addToContainers_variable("BucketIndex", "The bucket the object is in", "Docs/Structs/FTaskManagerBucketInfo/Variables/BucketIndex.html", ["bucket", "index"], "FTaskManagerBucketInfo");
addToContainers_variable("ArrayIndex", "Index in bucket the object is in", "Docs/Structs/FTaskManagerBucketInfo/Variables/ArrayIndex.html", ["array", "index"], "FTaskManagerBucketInfo");
addToContainers_class("MultithreadedFogOfWarManager", "TODO: implement the whole acknowledging of selectable IDs becoming freed due to a selectable becoming destroyed. So basically what this is is the fog manager will need to ack that the selectable has been destroyed because otherwise it may send some vision info back to the game thread: it could be a huge reveal radius but the ID has now been assigned to some small radius revealing selectable so it would not look right. TODO: fix up names in this file, and very thouroughly check code", "Docs/Classes/MultithreadedFogOfWarManager/MultithreadedFogOfWarManager.html", ["multithreaded", "fog", "of", "war", "manager"], "");
addToContainers_function("Get", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/Get.html", [], "MultithreadedFogOfWarManager");
addToContainers_function("Setup", "Setup for match. @param InNumTeams - how many teams are in the match @param InLocalPlayersTeamIndex - team index of the local player", "Docs/Classes/MultithreadedFogOfWarManager/Functions/Setup.html", [], "MultithreadedFogOfWarManager");
addToContainers_function("GetNumFogOfWarThreadsToCreate", "Return how many fog of war threads to create", "Docs/Classes/MultithreadedFogOfWarManager/Functions/GetNumFogOfWarThreadsToCreate.html", ["get", "num", "fog", "of", "war", "threads", "to", "create"], "MultithreadedFogOfWarManager");
addToContainers_function("OnGameThreadTick", "This function can be called from any game thread tick. It essentially handles all the behavior required for doing fog of war. @param DeltaTime - AActor::Tick\'s DeltaTime param", "Docs/Classes/MultithreadedFogOfWarManager/Functions/OnGameThreadTick.html", ["on", "game", "thread", "tick"], "MultithreadedFogOfWarManager");
addToContainers_function("OnBuildingDestroyed", "Called by game thread when a building has been destroyed", "Docs/Classes/MultithreadedFogOfWarManager/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "MultithreadedFogOfWarManager");
addToContainers_function("RegisterTeamTemporaryRevealEffect", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/RegisterTeamTemporaryRevealEffect.html", ["register", "team", "temporary", "reveal", "effect"], "MultithreadedFogOfWarManager");
addToContainers_function("RevealTilesAroundLocation", "Utility function just like AFogOfWarManager\'s version @param Location - 2D location to reveal fog around @param SightRadius - radius of fog revealing @param StealthRevealRadius - radius of stealth revealing @param Tiles - the team\'s tiles array", "Docs/Classes/MultithreadedFogOfWarManager/Functions/RevealTilesAroundLocation.html", ["reveal", "tiles", "around", "location"], "MultithreadedFogOfWarManager");
addToContainers_function("GetLocationFogStatus", "Utility function that returns the fog status of a location @param Location - location to query @param Tiles - tiles array belonging to the team you want to query for", "Docs/Classes/MultithreadedFogOfWarManager/Functions/GetLocationFogStatus.html", ["get", "location", "fog", "status"], "MultithreadedFogOfWarManager");
addToContainers_function("OnAllTasksComplete", "@param TeamIndex - team that completed all its tasks", "Docs/Classes/MultithreadedFogOfWarManager/Functions/OnAllTasksComplete.html", ["on", "all", "tasks", "complete"], "MultithreadedFogOfWarManager");
addToContainers_function("AddRecentlyCreatedBuilding", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/AddRecentlyCreatedBuilding.html", ["add", "recently", "created", "building"], "MultithreadedFogOfWarManager");
addToContainers_function("WorldLocationToTilesIndex", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/WorldLocationToTilesIndex.html", ["world", "location", "to", "tiles", "index"], "MultithreadedFogOfWarManager");
addToContainers_function("GetFogGridCoords", "Convert a world location to a fog of war grid location", "Docs/Classes/MultithreadedFogOfWarManager/Functions/GetFogGridCoords.html", ["get", "fog", "grid", "coords"], "MultithreadedFogOfWarManager");
addToContainers_function("GetFogGridCoords", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/GetFogGridCoords_1.html", ["get", "fog", "grid", "coords"], "MultithreadedFogOfWarManager");
addToContainers_function("BitwiseOrOperator", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/BitwiseOrOperator.html", ["bitwise", "or", "operator"], "MultithreadedFogOfWarManager");
addToContainers_function("BitwiseOrOperator", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/BitwiseOrOperator_1.html", ["bitwise", "or", "operator"], "MultithreadedFogOfWarManager");
addToContainers_function("IsLocationLocallyVisible", "Returns true if a world location is visible to the local player @param Location - world location @return - true if the location is outside fog of war for the local player", "Docs/Classes/MultithreadedFogOfWarManager/Functions/IsLocationLocallyVisible.html", ["is", "location", "locally", "visible"], "MultithreadedFogOfWarManager");
addToContainers_function("IsLocationVisibleNotChecked", "Returns true if a world location is visible from the perspective of a team. This function will check if the location is within the fog volume bounds limits and if it is outside then it will return false @param Team - team we\'re checking visibility against", "Docs/Classes/MultithreadedFogOfWarManager/Functions/IsLocationVisibleNotChecked.html", ["is", "location", "visible", "not", "checked"], "MultithreadedFogOfWarManager");
addToContainers_function("IsSelectableOutsideFog", "Return true if a selectable is outside fog of war from the perspective of a team @param Team - team whose perspective we are using when determining whether the selectable is outside fog or not", "Docs/Classes/MultithreadedFogOfWarManager/Functions/IsSelectableOutsideFog.html", ["is", "selectable", "outside", "fog"], "MultithreadedFogOfWarManager");
addToContainers_function("GetTileIndex", "", "Docs/Classes/MultithreadedFogOfWarManager/Functions/GetTileIndex.html", ["get", "tile", "index"], "MultithreadedFogOfWarManager");
addToContainers_variable("FogManager", "Fog of war manager", "Docs/Classes/MultithreadedFogOfWarManager/Variables/FogManager.html", ["fog", "manager"], "MultithreadedFogOfWarManager");
addToContainers_variable("TextureBuffer", "Texture buffer for rendering fog of war. Local player only because we only render fog for them", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TextureBuffer.html", ["texture", "buffer"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyCreatedBuildings[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s buildings that have been recently placed", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyCreatedBuildings[ProjectS.html", ["recently", "created", "buildings[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyModifiedBuildings[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s buildings that have had a modification done to them that fog manager needs to know about e.g. their sight radius is now bigger", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyModifiedBuildings[Project.html", ["recently", "modified", "buildings[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyDestroyedBuildings[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s buildings that were recently destroyed", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyDestroyedBuildings[Projec.html", ["recently", "destroyed", "buildings[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamsInfantry[ProjectSettings::MAX_NUM_TEAMS]", "Holds arrays of all the infantry on a team. Make sure infantry add themselves to this when they start revealing fog and remove themselves when they want to stop revealing fog (usually when they are destroyed)", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamsInfantry[ProjectSettings::MA.html", ["teams", "infantry[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("RecentlyCreatedTemporaryRevealEffects[ProjectSettings::MAX_NUM_TEAMS]", "Each team\'s temporary reveal effects (such as a from placing a superweapon at a location) that were recently created and yet to enter the fog system", "Docs/Classes/MultithreadedFogOfWarManager/Variables/RecentlyCreatedTemporaryRevealEff.html", ["recently", "created", "temporary", "reveal", "effects[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TilesArrays[ProjectSettings::MAX_NUM_TEAMS]", "Visibility of every tile", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TilesArrays[ProjectSettings::MAX_.html", ["tiles", "arrays[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamVisibilityInfo[ProjectSettings::MAX_NUM_TEAMS][ProjectSettings::MAX_NUM_TEAMS]", "[Team we are checking from][Team of selecable we are checking]", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamVisibilityInfo[ProjectSetting.html", ["team", "visibility", "info[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s][", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("1", "Whether machine is server (listen or dedicated)", "Docs/Classes/MultithreadedFogOfWarManager/Variables/1.html", [], "MultithreadedFogOfWarManager");
addToContainers_variable("1", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/1_1.html", [], "MultithreadedFogOfWarManager");
addToContainers_variable("LocalPlayersTeamIndex", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/LocalPlayersTeamIndex.html", ["local", "players", "team", "index"], "MultithreadedFogOfWarManager");
addToContainers_variable("NumTeams", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/NumTeams.html", ["num", "teams"], "MultithreadedFogOfWarManager");
addToContainers_variable("ServerIdleThreads", "Threads that are idle. If on server then the client version will be empty and vice versa", "Docs/Classes/MultithreadedFogOfWarManager/Variables/ServerIdleThreads.html", ["server", "idle", "threads"], "MultithreadedFogOfWarManager");
addToContainers_variable("ClientIdleThreads", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/ClientIdleThreads.html", ["client", "idle", "threads"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamProgress[ProjectSettings::MAX_NUM_TEAMS]", "Array of how far through calculations for each team we are. Key = Statics::TeamToArrayIndex", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamProgress[ProjectSettings::MAX.html", ["team", "progress[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TeamTilesShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TeamTilesShared[ProjectSettings::.html", ["team", "tiles", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("InfantryStatesShared[ProjectSettings::MAX_NUM_TEAMS]", "Array of arrays. Contains each team\'s infantry state info. Key = Statics::TeamToArrayIndex", "Docs/Classes/MultithreadedFogOfWarManager/Variables/InfantryStatesShared[ProjectSetti.html", ["infantry", "states", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("BuildingStatesShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/BuildingStatesShared[ProjectSetti.html", ["building", "states", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("TemporaryRevealEffectsShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TemporaryRevealEffectsShared[Proj.html", ["temporary", "reveal", "effects", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("InfantryStatesBasicShared[ProjectSettings::MAX_NUM_TEAMS]", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/InfantryStatesBasicShared[Project.html", ["infantry", "states", "basic", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("DestroyedBuildingsShared[ProjectSettings::MAX_NUM_TEAMS]", "Contains selectable IDs of buildings that want to be removed from fog calculations (probably because they were destroyed)", "Docs/Classes/MultithreadedFogOfWarManager/Variables/DestroyedBuildingsShared[ProjectS.html", ["destroyed", "buildings", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("VisibilityInfoShared[ProjectSettings::MAX_NUM_TEAMS]", "Contains each team\'s visibility info", "Docs/Classes/MultithreadedFogOfWarManager/Variables/VisibilityInfoShared[ProjectSetti.html", ["visibility", "info", "shared[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "t", "e", "a", "m", "s]"], "MultithreadedFogOfWarManager");
addToContainers_variable("DeltaTime", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/DeltaTime.html", ["delta", "time"], "MultithreadedFogOfWarManager");
addToContainers_variable("DeltaTimeNotThreadSafe", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/DeltaTimeNotThreadSafe.html", ["delta", "time", "not", "thread", "safe"], "MultithreadedFogOfWarManager");
addToContainers_variable("MapTileDimensions", "Map dimensions in tiles.", "Docs/Classes/MultithreadedFogOfWarManager/Variables/MapTileDimensions.html", ["map", "tile", "dimensions"], "MultithreadedFogOfWarManager");
addToContainers_variable("MapCenter", "Map center ignoring Z axis", "Docs/Classes/MultithreadedFogOfWarManager/Variables/MapCenter.html", ["map", "center"], "MultithreadedFogOfWarManager");
addToContainers_variable("MapDimensionsInverse", "1.f / MapDimensions. Used to avoid division", "Docs/Classes/MultithreadedFogOfWarManager/Variables/MapDimensionsInverse.html", ["map", "dimensions", "inverse"], "MultithreadedFogOfWarManager");
addToContainers_variable("FogTexture", "------------------------------------------------------------------", "Docs/Classes/MultithreadedFogOfWarManager/Variables/FogTexture.html", ["fog", "texture"], "MultithreadedFogOfWarManager");
addToContainers_variable("TextureRegions", "", "Docs/Classes/MultithreadedFogOfWarManager/Variables/TextureRegions.html", ["texture", "regions"], "MultithreadedFogOfWarManager");
addToContainers_variable("FogOfWarMaterialInstance", "UPROPERTY() // Hopefully this isn\'t required", "Docs/Classes/MultithreadedFogOfWarManager/Variables/FogOfWarMaterialInstance.html", ["fog", "of", "war", "material", "instance"], "MultithreadedFogOfWarManager");
addToContainers_class("ServerFogOfWarThread", "A fog of war thread that the server player will spawn", "Docs/Classes/ServerFogOfWarThread/ServerFogOfWarThread.html", ["server", "fog", "of", "war", "thread"], "");
addToContainers_function("ServerFogOfWarThread", "Default constructor", "Docs/Classes/ServerFogOfWarThread/Functions/ServerFogOfWarThread.html", ["server", "fog", "of", "war", "thread"], "ServerFogOfWarThread");
addToContainers_function("OnTaskComplete", "Ideas: Iterate backwards along the arrays and check if any of them have not completed. But check the local players team first: check if they have done their buildings, infantry and temp reveal effects. If they have then check if they have done their visibility info. If they have NOW we can iterate backwards and check if other team\'s stuff needs doing. Although we only need to do this if we are the server", "Docs/Classes/ServerFogOfWarThread/Functions/OnTaskComplete.html", ["on", "task", "complete"], "ServerFogOfWarThread");
addToContainers_class("ClientFogOfWarThread", "A fog of war thread that remote clients will spawn", "Docs/Classes/ClientFogOfWarThread/ClientFogOfWarThread.html", ["client", "fog", "of", "war", "thread"], "");
addToContainers_function("ClientFogOfWarThread", "", "Docs/Classes/ClientFogOfWarThread/Functions/ClientFogOfWarThread.html", ["client", "fog", "of", "war", "thread"], "ClientFogOfWarThread");
addToContainers_function("", "", "Docs/Classes/ClientFogOfWarThread/Functions/.html", [], "ClientFogOfWarThread");
addToContainers_function("Init", "Begin FRunnable interface.", "Docs/Classes/ClientFogOfWarThread/Functions/Init.html", [], "ClientFogOfWarThread");
addToContainers_function("Run", "", "Docs/Classes/ClientFogOfWarThread/Functions/Run.html", [], "ClientFogOfWarThread");
addToContainers_function("Stop", "", "Docs/Classes/ClientFogOfWarThread/Functions/Stop.html", [], "ClientFogOfWarThread");
addToContainers_function("Exit", "", "Docs/Classes/ClientFogOfWarThread/Functions/Exit.html", [], "ClientFogOfWarThread");
addToContainers_function("ResetTileInfo", "End FRunnable interface", "Docs/Classes/ClientFogOfWarThread/Functions/ResetTileInfo.html", ["reset", "tile", "info"], "ClientFogOfWarThread");
addToContainers_function("CalculateTeamVisibilityFromBuildings", "", "Docs/Classes/ClientFogOfWarThread/Functions/CalculateTeamVisibilityFromBuildi.html", ["calculate", "team", "visibility", "from", "buildings"], "ClientFogOfWarThread");
addToContainers_function("CalculateTeamVisibilityFromInfantry", "", "Docs/Classes/ClientFogOfWarThread/Functions/CalculateTeamVisibilityFromInfant.html", ["calculate", "team", "visibility", "from", "infantry"], "ClientFogOfWarThread");
addToContainers_function("TickAndCalculateTeamVisibilityFromTemporaryRevealEffects", "", "Docs/Classes/ClientFogOfWarThread/Functions/TickAndCalculateTeamVisibilityFro.html", ["tick", "and", "calculate", "team", "visibility", "from", "temporary", "reveal", "effects"], "ClientFogOfWarThread");
addToContainers_function("StoreTileVisibilityInfo", "", "Docs/Classes/ClientFogOfWarThread/Functions/StoreTileVisibilityInfo.html", ["store", "tile", "visibility", "info"], "ClientFogOfWarThread");
addToContainers_function("QueueRenderFogCommand", "", "Docs/Classes/ClientFogOfWarThread/Functions/QueueRenderFogCommand.html", ["queue", "render", "fog", "command"], "ClientFogOfWarThread");
addToContainers_function("CalculateAndStoreSelectableVisibilityInfo", "@param TeamWithVisionIndex - team the param Tiles belongs to @param OtherTeamIndex - team index of hostile team @param Tiles - the array we are checking visibility against. TeamIndex can belong to one team while Tiles can belong to another", "Docs/Classes/ClientFogOfWarThread/Functions/CalculateAndStoreSelectableVisibi.html", ["calculate", "and", "store", "selectable", "visibility", "info"], "ClientFogOfWarThread");
addToContainers_function("CalculateAndStoreProjectileVisibilityInfo", "", "Docs/Classes/ClientFogOfWarThread/Functions/CalculateAndStoreProjectileVisibi.html", ["calculate", "and", "store", "projectile", "visibility", "info"], "ClientFogOfWarThread");
addToContainers_function("CalculateAndStoreParticleSystemVisibilityInfo", "", "Docs/Classes/ClientFogOfWarThread/Functions/CalculateAndStoreParticleSystemVi.html", ["calculate", "and", "store", "particle", "system", "visibility", "info"], "ClientFogOfWarThread");
addToContainers_function("CalculateAndStoreInventoryItemVisibilityInfo", "", "Docs/Classes/ClientFogOfWarThread/Functions/CalculateAndStoreInventoryItemVis.html", ["calculate", "and", "store", "inventory", "item", "visibility", "info"], "ClientFogOfWarThread");
addToContainers_struct("FogLock", "Wrapper for what I will use as a lock for critical sections", "Docs/Structs/FogLock/FogLock.html", ["fog", "lock"], "");
addToContainers_function("Lock", "", "Docs/Structs/FogLock/Functions/Lock.html", [], "FogLock");
addToContainers_function("TryLock", "", "Docs/Structs/FogLock/Functions/TryLock.html", ["try", "lock"], "FogLock");
addToContainers_function("Unlock", "", "Docs/Structs/FogLock/Functions/Unlock.html", [], "FogLock");
addToContainers_variable("LockObject", "", "Docs/Structs/FogLock/Variables/LockObject.html", ["lock", "object"], "FogLock");
addToContainers_struct("CalculationProgress", "", "Docs/Structs/CalculationProgress/CalculationProgress.html", ["calculation", "progress"], "");
addToContainers_function("CalculationProgress", "", "Docs/Structs/CalculationProgress/Functions/CalculationProgress.html", ["calculation", "progress"], "CalculationProgress");
addToContainers_function("AdvanceNextTask", "@param TeamIndex - team index this task struct belongs to @param NumTeams - number of teams in the match", "Docs/Structs/CalculationProgress/Functions/AdvanceNextTask.html", ["advance", "next", "task"], "CalculationProgress");
addToContainers_function("GetNextTeamIndexForStoringSelectableVisibilityInfo", "", "Docs/Structs/CalculationProgress/Functions/GetNextTeamIndexForStoringSelecta.html", ["get", "next", "team", "index", "for", "storing", "selectable", "visibility", "info"], "CalculationProgress");
addToContainers_function("GetNextTask", "", "Docs/Structs/CalculationProgress/Functions/GetNextTask.html", ["get", "next", "task"], "CalculationProgress");
addToContainers_variable("Lock", "Lock to access the data in this struct", "Docs/Structs/CalculationProgress/Variables/Lock.html", [], "CalculationProgress");
addToContainers_variable("NextTask", "What the next thread to finish its task should work on next", "Docs/Structs/CalculationProgress/Variables/NextTask.html", ["next", "task"], "CalculationProgress");
addToContainers_variable("NextTeamIndexForStoringSelectableVisibilityInfo", "", "Docs/Structs/CalculationProgress/Variables/NextTeamIndexForStoringSelectable.html", ["next", "team", "index", "for", "storing", "selectable", "visibility", "info"], "CalculationProgress");
addToContainers_struct("JobQueue", "", "Docs/Structs/JobQueue/JobQueue.html", ["job", "queue"], "");
addToContainers_function("GetJob", "Will return \"Finished\" if no job in queue", "Docs/Structs/JobQueue/Functions/GetJob.html", ["get", "job"], "JobQueue");
addToContainers_variable("BitField", "A 1 means that job is in the queue", "Docs/Structs/JobQueue/Variables/BitField.html", ["bit", "field"], "JobQueue");
addToContainers_struct("TilesArray_NoLock", "", "Docs/Structs/TilesArray_NoLock/TilesArray_NoLock.html", ["tiles", "array_", "no", "lock"], "");
addToContainers_variable("Array", "", "Docs/Structs/TilesArray_NoLock/Variables/Array.html", [], "TilesArray_NoLock");
addToContainers_struct("ServerThreadArray", "", "Docs/Structs/ServerThreadArray/ServerThreadArray.html", ["server", "thread", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/ServerThreadArray/Variables/Array.html", [], "ServerThreadArray");
addToContainers_variable("Lock", "", "Docs/Structs/ServerThreadArray/Variables/Lock.html", [], "ServerThreadArray");
addToContainers_struct("ClientThreadArray", "", "Docs/Structs/ClientThreadArray/ClientThreadArray.html", ["client", "thread", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/ClientThreadArray/Variables/Array.html", [], "ClientThreadArray");
addToContainers_variable("Lock", "", "Docs/Structs/ClientThreadArray/Variables/Lock.html", [], "ClientThreadArray");
addToContainers_struct("InfantryFogInfo", "", "Docs/Structs/InfantryFogInfo/InfantryFogInfo.html", ["infantry", "fog", "info"], "");
addToContainers_function("InfantryFogInfo", "", "Docs/Structs/InfantryFogInfo/Functions/InfantryFogInfo.html", ["infantry", "fog", "info"], "InfantryFogInfo");
addToContainers_variable("WorldLocation", "The world location of the infantry in 2D coords (fog of war does not care about Z axis)", "Docs/Structs/InfantryFogInfo/Variables/WorldLocation.html", ["world", "location"], "InfantryFogInfo");
addToContainers_variable("SightRadius", "", "Docs/Structs/InfantryFogInfo/Variables/SightRadius.html", ["sight", "radius"], "InfantryFogInfo");
addToContainers_variable("StealthRevealRadius", "", "Docs/Structs/InfantryFogInfo/Variables/StealthRevealRadius.html", ["stealth", "reveal", "radius"], "InfantryFogInfo");
addToContainers_struct("BuildingFogInfo", "", "Docs/Structs/BuildingFogInfo/BuildingFogInfo.html", ["building", "fog", "info"], "");
addToContainers_function("BuildingFogInfo", "", "Docs/Structs/BuildingFogInfo/Functions/BuildingFogInfo.html", ["building", "fog", "info"], "BuildingFogInfo");
addToContainers_variable("WorldLocation", "", "Docs/Structs/BuildingFogInfo/Variables/WorldLocation.html", ["world", "location"], "BuildingFogInfo");
addToContainers_variable("SightRadius", "", "Docs/Structs/BuildingFogInfo/Variables/SightRadius.html", ["sight", "radius"], "BuildingFogInfo");
addToContainers_variable("StealthRevealRadius", "", "Docs/Structs/BuildingFogInfo/Variables/StealthRevealRadius.html", ["stealth", "reveal", "radius"], "BuildingFogInfo");
addToContainers_variable("SelectableID", "", "Docs/Structs/BuildingFogInfo/Variables/SelectableID.html", ["selectable", "i", "d"], "BuildingFogInfo");
addToContainers_variable("FogStatus", "", "Docs/Structs/BuildingFogInfo/Variables/FogStatus.html", ["fog", "status"], "BuildingFogInfo");
addToContainers_variable("FogLocationsIndices", "Indices into tiles array that this building is occupying", "Docs/Structs/BuildingFogInfo/Variables/FogLocationsIndices.html", ["fog", "locations", "indices"], "BuildingFogInfo");
addToContainers_struct("InfantryFogInfoArray", "", "Docs/Structs/InfantryFogInfoArray/InfantryFogInfoArray.html", ["infantry", "fog", "info", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/InfantryFogInfoArray/Variables/Array.html", [], "InfantryFogInfoArray");
addToContainers_variable("ArrayLock", "Lock for accessing Array. Do not read/write to array without first holding this", "Docs/Structs/InfantryFogInfoArray/Variables/ArrayLock.html", ["array", "lock"], "InfantryFogInfoArray");
addToContainers_struct("InfantryFogInfoBasic", "", "Docs/Structs/InfantryFogInfoBasic/InfantryFogInfoBasic.html", ["infantry", "fog", "info", "basic"], "");
addToContainers_function("InfantryFogInfoBasic", "", "Docs/Structs/InfantryFogInfoBasic/Functions/InfantryFogInfoBasic.html", ["infantry", "fog", "info", "basic"], "InfantryFogInfoBasic");
addToContainers_variable("WorldLocation", "", "Docs/Structs/InfantryFogInfoBasic/Variables/WorldLocation.html", ["world", "location"], "InfantryFogInfoBasic");
addToContainers_variable("SelectableID", "Selectable ID of the infantry", "Docs/Structs/InfantryFogInfoBasic/Variables/SelectableID.html", ["selectable", "i", "d"], "InfantryFogInfoBasic");
addToContainers_variable("FogStatus", "Fog status of the tile the infantry is standing on", "Docs/Structs/InfantryFogInfoBasic/Variables/FogStatus.html", ["fog", "status"], "InfantryFogInfoBasic");
addToContainers_struct("InfantryFogInfoFinal", "", "Docs/Structs/InfantryFogInfoFinal/InfantryFogInfoFinal.html", ["infantry", "fog", "info", "final"], "");
addToContainers_variable("TilesFogStatus", "Fog status of the tile the infantry is standing on", "Docs/Structs/InfantryFogInfoFinal/Variables/TilesFogStatus.html", ["tiles", "fog", "status"], "InfantryFogInfoFinal");
addToContainers_struct("InfantryArray", "", "Docs/Structs/InfantryArray/InfantryArray.html", ["infantry", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/InfantryArray/Variables/Array.html", [], "InfantryArray");
addToContainers_struct("InfantryFogInfoBasicArray", "", "Docs/Structs/InfantryFogInfoBasicArray/InfantryFogInfoBasicArray.html", ["infantry", "fog", "info", "basic", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/InfantryFogInfoBasicArray/Variables/Array.html", [], "InfantryFogInfoBasicArray");
addToContainers_variable("ArrayLock", "", "Docs/Structs/InfantryFogInfoBasicArray/Variables/ArrayLock.html", ["array", "lock"], "InfantryFogInfoBasicArray");
addToContainers_struct("BuildingFogInfoArray", "", "Docs/Structs/BuildingFogInfoArray/BuildingFogInfoArray.html", ["building", "fog", "info", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/BuildingFogInfoArray/Variables/Array.html", [], "BuildingFogInfoArray");
addToContainers_variable("ArrayLock", "Lock for accessing Array. Do not read/write to array without first holding this", "Docs/Structs/BuildingFogInfoArray/Variables/ArrayLock.html", ["array", "lock"], "BuildingFogInfoArray");
addToContainers_struct("BuildingFogInfoArrayBasic", "", "Docs/Structs/BuildingFogInfoArrayBasic/BuildingFogInfoArrayBasic.html", ["building", "fog", "info", "array", "basic"], "");
addToContainers_variable("Array", "", "Docs/Structs/BuildingFogInfoArrayBasic/Variables/Array.html", [], "BuildingFogInfoArrayBasic");
addToContainers_struct("SelectableIDArray", "This container will likely be used for checking if a building has been marked as recently destroyed", "Docs/Structs/SelectableIDArray/SelectableIDArray.html", ["selectable", "i", "d", "array"], "");
addToContainers_variable("Array", "Array of selectable IDs", "Docs/Structs/SelectableIDArray/Variables/Array.html", [], "SelectableIDArray");
addToContainers_struct("DestroyedBuildingArray", "", "Docs/Structs/DestroyedBuildingArray/DestroyedBuildingArray.html", ["destroyed", "building", "array"], "");
addToContainers_function("WasRecentlyDestroyed", "Return true if the building has been recently destroyed", "Docs/Structs/DestroyedBuildingArray/Functions/WasRecentlyDestroyed.html", ["was", "recently", "destroyed"], "DestroyedBuildingArray");
addToContainers_function("SetBitToRecentlyDestroyed", "", "Docs/Structs/DestroyedBuildingArray/Functions/SetBitToRecentlyDestroyed.html", ["set", "bit", "to", "recently", "destroyed"], "DestroyedBuildingArray");
addToContainers_function("SetBitToNotRecentlyDestroyed", "", "Docs/Structs/DestroyedBuildingArray/Functions/SetBitToNotRecentlyDestroyed.html", ["set", "bit", "to", "not", "recently", "destroyed"], "DestroyedBuildingArray");
addToContainers_function("AreAllFlagsReset", "For debugging. Verify all the flags in Array are set to false", "Docs/Structs/DestroyedBuildingArray/Functions/AreAllFlagsReset.html", ["are", "all", "flags", "reset"], "DestroyedBuildingArray");
addToContainers_variable("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]", "TODO make this an array of bitfields instead, unless that\'s how TArray<bool> is implemented in the first place...", "Docs/Structs/DestroyedBuildingArray/Variables/Array[ProjectSettings::MAX_NUM_SE.html", ["array[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "s", "e", "l", "e", "c", "t", "a", "b", "l", "e", "s_", "p", "e", "r_", "p", "l", "a", "y", "e", "r]"], "DestroyedBuildingArray");
addToContainers_struct("TempRevealEffectArray", "", "Docs/Structs/TempRevealEffectArray/TempRevealEffectArray.html", ["temp", "reveal", "effect", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/TempRevealEffectArray/Variables/Array.html", [], "TempRevealEffectArray");
addToContainers_variable("ArrayLock", "", "Docs/Structs/TempRevealEffectArray/Variables/ArrayLock.html", ["array", "lock"], "TempRevealEffectArray");
addToContainers_struct("TempRevealEffectArray_NoLock", "", "Docs/Structs/TempRevealEffectArray_NoLock/TempRevealEffectArray_NoLock.html", ["temp", "reveal", "effect", "array_", "no", "lock"], "");
addToContainers_variable("Array", "", "Docs/Structs/TempRevealEffectArray_NoLock/Variables/Array.html", [], "TempRevealEffectArray_NoLock");
addToContainers_struct("TeamVisibilityInfoStruct", "", "Docs/Structs/TeamVisibilityInfoStruct/TeamVisibilityInfoStruct.html", ["team", "visibility", "info", "struct"], "");
addToContainers_variable("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]", "Index = selectable\'s ID", "Docs/Structs/TeamVisibilityInfoStruct/Variables/Array[ProjectSettings::MAX_NUM_SE.html", ["array[", "project", "settings::", "m", "a", "x_", "n", "u", "m_", "s", "e", "l", "e", "c", "t", "a", "b", "l", "e", "s_", "p", "e", "r_", "p", "l", "a", "y", "e", "r]"], "TeamVisibilityInfoStruct");
addToContainers_variable("ArrayLock", "Lock for accessing Array. Do not read/write to array without first holding this", "Docs/Structs/TeamVisibilityInfoStruct/Variables/ArrayLock.html", ["array", "lock"], "TeamVisibilityInfoStruct");
addToContainers_struct("TilesArray", "", "Docs/Structs/TilesArray/TilesArray.html", ["tiles", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/TilesArray/Variables/Array.html", [], "TilesArray");
addToContainers_variable("Lock", "", "Docs/Structs/TilesArray/Variables/Lock.html", [], "TilesArray");
addToContainers_struct("FSuggestProjectileVelocityEntry", "Contains data about the time SuggestProjectileVelocity failed to find a solution", "Docs/Structs/FSuggestProjectileVelocityEntry/FSuggestProjectileVelocityEntry.html", ["suggest", "projectile", "velocity", "entry"], "");
addToContainers_function("FSuggestProjectileVelocityEntry", "", "Docs/Structs/FSuggestProjectileVelocityEntry/Functions/FSuggestProjectileVelocityEntry.html", ["suggest", "projectile", "velocity", "entry"], "FSuggestProjectileVelocityEntry");
addToContainers_function("GetDistance", "Get the distance between start location and target location", "Docs/Structs/FSuggestProjectileVelocityEntry/Functions/GetDistance.html", ["get", "distance"], "FSuggestProjectileVelocityEntry");
addToContainers_function("Elem_2)", "", "Docs/Structs/FSuggestProjectileVelocityEntry/Functions/Elem_2).html", [], "FSuggestProjectileVelocityEntry");
addToContainers_variable("StartLocation", "", "Docs/Structs/FSuggestProjectileVelocityEntry/Variables/StartLocation.html", ["start", "location"], "FSuggestProjectileVelocityEntry");
addToContainers_variable("TargetLocation", "", "Docs/Structs/FSuggestProjectileVelocityEntry/Variables/TargetLocation.html", ["target", "location"], "FSuggestProjectileVelocityEntry");
addToContainers_variable("Distance", "Distance between StartLocation and EndLocation", "Docs/Structs/FSuggestProjectileVelocityEntry/Variables/Distance.html", [], "FSuggestProjectileVelocityEntry");
addToContainers_struct("FSuggestProjectileVelocityEntryContainer", "", "Docs/Structs/FSuggestProjectileVelocityEntryCo/FSuggestProjectileVelocityEntryCo.html", ["suggest", "projectile", "velocity", "entry", "container"], "");
addToContainers_function("FSuggestProjectileVelocityEntryContainer", "", "Docs/Structs/FSuggestProjectileVelocityEntryCo/Functions/FSuggestProjectileVelocityEntryCo.html", ["suggest", "projectile", "velocity", "entry", "container"], "FSuggestProjectileVelocityEntryContainer");
addToContainers_variable("Array", "", "Docs/Structs/FSuggestProjectileVelocityEntryCo/Variables/Array.html", [], "FSuggestProjectileVelocityEntryContainer");
addToContainers_variable("MAX_CONTAINER_ENTRIES", "", "Docs/Structs/FSuggestProjectileVelocityEntryCo/Variables/MAX_CONTAINER_ENTRIES.html", ["a", "x_", "c", "o", "n", "t", "a", "i", "n", "e", "r_", "e", "n", "t", "r", "i", "e", "s"], "FSuggestProjectileVelocityEntryContainer");
addToContainers_struct("FProjectileArray", "Workaround for non 2D TArrays", "Docs/Structs/FProjectileArray/FProjectileArray.html", ["projectile", "array"], "");
addToContainers_function("FProjectileArray", "", "Docs/Structs/FProjectileArray/Functions/FProjectileArray.html", ["projectile", "array"], "FProjectileArray");
addToContainers_function("FProjectileArray", "", "Docs/Structs/FProjectileArray/Functions/FProjectileArray_1.html", ["projectile", "array"], "FProjectileArray");
addToContainers_function("AddToStack", "", "Docs/Structs/FProjectileArray/Functions/AddToStack.html", ["add", "to", "stack"], "FProjectileArray");
addToContainers_function("IsPoolEmpty", "", "Docs/Structs/FProjectileArray/Functions/IsPoolEmpty.html", ["is", "pool", "empty"], "FProjectileArray");
addToContainers_function("Pop", "Remove projectile from container", "Docs/Structs/FProjectileArray/Functions/Pop.html", [], "FProjectileArray");
addToContainers_function("Last", "Return a pointer to a projectile in pool. Does not remove it or anything", "Docs/Structs/FProjectileArray/Functions/Last.html", [], "FProjectileArray");
addToContainers_variable("", "Holds created projectiles. Will be used like a stack", "Docs/Structs/FProjectileArray/Variables/.html", [], "FProjectileArray");
addToContainers_class("AObjectPoolingManager", "Handles requests for adding and removing actors from an object pool. Some things that are pooled: - projectiles - inventory items - ghost buildings (although I don\'t think they\'re handled by this class, PC does it instead) TODO I do not think there is any need for this to be an AActor; a UObject is good enough", "Docs/Classes/AObjectPoolingManager/AObjectPoolingManager.html", ["object", "pooling", "manager"], "");
addToContainers_function("AObjectPoolingManager", "", "Docs/Classes/AObjectPoolingManager/Functions/AObjectPoolingManager.html", ["object", "pooling", "manager"], "AObjectPoolingManager");
addToContainers_function("BeginPlay", "", "Docs/Classes/AObjectPoolingManager/Functions/BeginPlay.html", ["begin", "play"], "AObjectPoolingManager");
addToContainers_function("GetNumForPool", "Get how many projectiles should be in the pool for a certain BP", "Docs/Classes/AObjectPoolingManager/Functions/GetNumForPool.html", ["get", "num", "for", "pool"], "AObjectPoolingManager");
addToContainers_function("GetInventoryItemInitialPoolSize_SM", "Return how many items we should put in the inventory item pool at the start of the match. Make sure to change this to whatever you want. A thing to keep in mind: items that start on the map also enter the object pool when they disappear.", "Docs/Classes/AObjectPoolingManager/Functions/GetInventoryItemInitialPoolSize_S.html", ["get", "inventory", "item", "initial", "pool", "size_", "s", "m"], "AObjectPoolingManager");
addToContainers_function("GetInventoryItemInitialPoolSize_SK", "", "Docs/Classes/AObjectPoolingManager/Functions/GetInventoryItemInitialPoolSize_S_1.html", ["get", "inventory", "item", "initial", "pool", "size_", "s", "k"], "AObjectPoolingManager");
addToContainers_function("IsFitForEnteringPool", "Verify an inventory item actor is fit for entering the object pool i.e. it\'s tick is turned off, it\'s hidden, etc", "Docs/Classes/AObjectPoolingManager/Functions/IsFitForEnteringPool.html", ["is", "fit", "for", "entering", "pool"], "AObjectPoolingManager");
addToContainers_function("IsFitForEnteringPool", "", "Docs/Classes/AObjectPoolingManager/Functions/IsFitForEnteringPool_1.html", ["is", "fit", "for", "entering", "pool"], "AObjectPoolingManager");
addToContainers_function("Server_FireProjectileAtTarget", "Takes an object from pool, and then fires it at target. Call from server only @param Firer - the selectable that fired this projectile @param AttackInfo - information such as projectile damage and blueprint @param AttackRange - attack range of firer. 0 means infinite @param Team - team firer is on @param MuzzleLoc - the muzzle location of the person firing the projectile @param Target - target selectable @param Roll - roll rotation projectile can use", "Docs/Classes/AObjectPoolingManager/Functions/Server_FireProjectileAtTarget.html", ["server_", "fire", "projectile", "at", "target"], "AObjectPoolingManager");
addToContainers_function("Client_FireProjectileAtTarget", "Fires a projectile client-side at target @param ProjectileBP - the blueprint of the projectile @param MuzzleLoc - the muzzle location of the person firing the projectile @param Target - target selectable", "Docs/Classes/AObjectPoolingManager/Functions/Client_FireProjectileAtTarget.html", ["client_", "fire", "projectile", "at", "target"], "AObjectPoolingManager");
addToContainers_function("Server_FireProjectileAtLocation", "Functions for firing a projectile at a location, not a target. @param InInstigator - actor firing projectile for damage reaction purposes @param DamageInfo - attack attributes of actor firing projectile @param Team - team of InInstigator @param StartLoc - where to \"spawn\" projectile @param TargetLoc - where to fire projectile at @param Roll - a roll rotation value the projectile might want to use @param ListeningAbility - ability that will receive a notification when the projectile hits something. @param ListeningAbilityUniqueID - the unique ID for ListeningAbility to identify which instance of that ability it is.", "Docs/Classes/AObjectPoolingManager/Functions/Server_FireProjectileAtLocation.html", ["server_", "fire", "projectile", "at", "location"], "AObjectPoolingManager");
addToContainers_function("Client_FireProjectileAtLocation", "", "Docs/Classes/AObjectPoolingManager/Functions/Client_FireProjectileAtLocation.html", ["client_", "fire", "projectile", "at", "location"], "AObjectPoolingManager");
addToContainers_function("Server_FireProjectileInDirection", "Fires a projectile in a direction. It is very likely I have not implemented FireInDirection in any projectile classes yet so this will likely do nothing", "Docs/Classes/AObjectPoolingManager/Functions/Server_FireProjectileInDirection.html", ["server_", "fire", "projectile", "in", "direction"], "AObjectPoolingManager");
addToContainers_function("Client_FireProjectileInDirection", "", "Docs/Classes/AObjectPoolingManager/Functions/Client_FireProjectileInDirection.html", ["client_", "fire", "projectile", "in", "direction"], "AObjectPoolingManager");
addToContainers_function("AddToPool", "Add projectile back into pool @param Projectile - projectile to add back to pool @param ProjectileBP - BP to know what pool to add to", "Docs/Classes/AObjectPoolingManager/Functions/AddToPool.html", ["add", "to", "pool"], "AObjectPoolingManager");
addToContainers_function("AddProjectileBP", "Add a blueprint to Projectile_BPs if it is not already in there @param ProjectileBP - the BP to add", "Docs/Classes/AObjectPoolingManager/Functions/AddProjectileBP.html", ["add", "projectile", "b", "p"], "AObjectPoolingManager");
addToContainers_function("CreatePools", "Create the pools", "Docs/Classes/AObjectPoolingManager/Functions/CreatePools.html", ["create", "pools"], "AObjectPoolingManager");
addToContainers_function("GetProjectileChecked", "For HUD. Get a reference to a projectile in a pool to display its damage attributes. This will crash if pool is empty", "Docs/Classes/AObjectPoolingManager/Functions/GetProjectileChecked.html", ["get", "projectile", "checked"], "AObjectPoolingManager");
addToContainers_function("GetProjectileReference", "Get pointer to a pooled projectile. Will spawn it if pool is empty", "Docs/Classes/AObjectPoolingManager/Functions/GetProjectileReference.html", ["get", "projectile", "reference"], "AObjectPoolingManager");
addToContainers_function("GetProjectileFromPoolOrSpawnIfNeeded", "Takes a projectile from object pool or if the pools are empty then spawn one", "Docs/Classes/AObjectPoolingManager/Functions/GetProjectileFromPoolOrSpawnIfNee.html", ["get", "projectile", "from", "pool", "or", "spawn", "if", "needed"], "AObjectPoolingManager");
addToContainers_function("NotifyOfSuggestProjectileVelocityFailing", "Not really anything to do with object pooling", "Docs/Classes/AObjectPoolingManager/Functions/NotifyOfSuggestProjectileVelocity.html", ["notify", "of", "suggest", "projectile", "velocity", "failing"], "AObjectPoolingManager");
addToContainers_function("LogWorstProjectileFrame", "Print to log the worst frame the pooling manager had in terms of projectile spawns. If there were a lot of spawns in a single frame the user might want to consider increasing the pool size.", "Docs/Classes/AObjectPoolingManager/Functions/LogWorstProjectileFrame.html", ["log", "worst", "projectile", "frame"], "AObjectPoolingManager");
addToContainers_function("LogSuggestProjectileVelocityFails", "Logs info about the times UGameplayStatics::SuggestProjectileVelocity failed to find a solution", "Docs/Classes/AObjectPoolingManager/Functions/LogSuggestProjectileVelocityFails.html", ["log", "suggest", "projectile", "velocity", "fails"], "AObjectPoolingManager");
addToContainers_function("PutInventoryItemInPool", "------------------------------------------------------------------------", "Docs/Classes/AObjectPoolingManager/Functions/PutInventoryItemInPool.html", ["put", "inventory", "item", "in", "pool"], "AObjectPoolingManager");
addToContainers_function("PutInventoryItemInPool", "", "Docs/Classes/AObjectPoolingManager/Functions/PutInventoryItemInPool_1.html", ["put", "inventory", "item", "in", "pool"], "AObjectPoolingManager");
addToContainers_function("PutItemInWorld", "Puts an inventory item actor at a specific location and rotation. This will take one from the object pool if it\'s not empty, otherwise it will spawn an actor. @param ItemType - the type of item to put in world @param ItemQuantity - how many items are in the stack @param ItemsInfo - info struct of ItemType for convenience @param Location - where to put the item. Note that the mesh settings in FInventoryItemInfo may move it away from this location @param Rotation - world rotation. Note that the mesh settings in FInventoryItemInfo may rotate it some more @return - reference to inventory item actor", "Docs/Classes/AObjectPoolingManager/Functions/PutItemInWorld.html", ["put", "item", "in", "world"], "AObjectPoolingManager");
addToContainers_variable("", "Reference to gamestate for sending RPCs", "Docs/Classes/AObjectPoolingManager/Variables/.html", [], "AObjectPoolingManager");
addToContainers_variable("", "Holds all BP for each projectile used by selectables", "Docs/Classes/AObjectPoolingManager/Variables/_1.html", [], "AObjectPoolingManager");
addToContainers_variable("", "Maps blueprint to struct that holds array of already spawned objects for that blueprint", "Docs/Classes/AObjectPoolingManager/Variables/_2.html", [], "AObjectPoolingManager");
addToContainers_variable("CurrentFrameNumber", "", "Docs/Classes/AObjectPoolingManager/Variables/CurrentFrameNumber.html", ["current", "frame", "number"], "AObjectPoolingManager");
addToContainers_variable("NumProjectilesSpawnedThisFrame", "Maps projectile type to how many of it have been spawned this frame", "Docs/Classes/AObjectPoolingManager/Variables/NumProjectilesSpawnedThisFrame.html", ["num", "projectiles", "spawned", "this", "frame"], "AObjectPoolingManager");
addToContainers_variable("WorstProjectileFrame", "Maps projectile type to how many of it have been spawned this frame. This will contain what is considered the worst frame for performance in terms of projectiles spawned", "Docs/Classes/AObjectPoolingManager/Variables/WorstProjectileFrame.html", ["worst", "projectile", "frame"], "AObjectPoolingManager");
addToContainers_variable("WorstProjectileFrameNumber", "Frame count of the worst frame", "Docs/Classes/AObjectPoolingManager/Variables/WorstProjectileFrameNumber.html", ["worst", "projectile", "frame", "number"], "AObjectPoolingManager");
addToContainers_variable("SuggestProjectileVelocityFails", "Every time SuggestProjectileVelocity fails to find a solution an entry is added here", "Docs/Classes/AObjectPoolingManager/Variables/SuggestProjectileVelocityFails.html", ["suggest", "projectile", "velocity", "fails"], "AObjectPoolingManager");
addToContainers_variable("", "Pool for inventory item actors that use static meshes. If pool is empty and we request an object from it then we will spawn a new actor to fulfill the request as opposed to crashing", "Docs/Classes/AObjectPoolingManager/Variables/_3.html", [], "AObjectPoolingManager");
addToContainers_variable("", "This array is for the ones with skeletal meshes", "Docs/Classes/AObjectPoolingManager/Variables/_4.html", [], "AObjectPoolingManager");
addToContainers_variable("bHasCreatedPools", "To make sure we aren\'t calling SetupPools more than once accidentally", "Docs/Classes/AObjectPoolingManager/Variables/bHasCreatedPools.html", ["has", "created", "pools"], "AObjectPoolingManager");
addToContainers_struct("FUpgradeTypeArrayPtrArray", "Array of pointers to array of upgrade types", "Docs/Structs/FUpgradeTypeArrayPtrArray/FUpgradeTypeArrayPtrArray.html", ["upgrade", "type", "array", "ptr", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/FUpgradeTypeArrayPtrArray/Variables/Array.html", [], "FUpgradeTypeArrayPtrArray");
addToContainers_struct("FUpgradeArray", "Array containing upgrades. Workaround for non 2D TArrays", "Docs/Structs/FUpgradeArray/FUpgradeArray.html", ["upgrade", "array"], "");
addToContainers_function("AddCompletedUpgrade", "", "Docs/Structs/FUpgradeArray/Functions/AddCompletedUpgrade.html", ["add", "completed", "upgrade"], "FUpgradeArray");
addToContainers_function("GetArray", "Getters and setters", "Docs/Structs/FUpgradeArray/Functions/GetArray.html", ["get", "array"], "FUpgradeArray");
addToContainers_variable("", "", "Docs/Structs/FUpgradeArray/Variables/.html", [], "FUpgradeArray");
addToContainers_class("AUpgradeManager", "One exists for each player state, both on server and client. On client-side this is mainly used for instant knowing of whether am upgrade button worked and for showing UI timers.", "Docs/Classes/AUpgradeManager/AUpgradeManager.html", ["upgrade", "manager"], "");
addToContainers_function("AUpgradeManager", "", "Docs/Classes/AUpgradeManager/Functions/AUpgradeManager.html", ["upgrade", "manager"], "AUpgradeManager");
addToContainers_function("BeginPlay", "", "Docs/Classes/AUpgradeManager/Functions/BeginPlay.html", ["begin", "play"], "AUpgradeManager");
addToContainers_function("SetupReferences", "", "Docs/Classes/AUpgradeManager/Functions/SetupReferences.html", ["setup", "references"], "AUpgradeManager");
addToContainers_function("CreateUpgradeClassesAndPopulateUnresearchedArray", "", "Docs/Classes/AUpgradeManager/Functions/CreateUpgradeClassesAndPopulateUn.html", ["create", "upgrade", "classes", "and", "populate", "unresearched", "array"], "AUpgradeManager");
addToContainers_function("SetupUpgradesCompleted", "", "Docs/Classes/AUpgradeManager/Functions/SetupUpgradesCompleted.html", ["setup", "upgrades", "completed"], "AUpgradeManager");
addToContainers_function("SetupHasUpgradePrerequisiteContainers", "", "Docs/Classes/AUpgradeManager/Functions/SetupHasUpgradePrerequisiteContai.html", ["setup", "has", "upgrade", "prerequisite", "containers"], "AUpgradeManager");
addToContainers_function("Delay)", "Call 0 param function after a delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/AUpgradeManager/Functions/Delay).html", [], "AUpgradeManager");
addToContainers_function("Init", "", "Docs/Classes/AUpgradeManager/Functions/Init.html", [], "AUpgradeManager");
addToContainers_function("HasInited", "Return if fully ready to use", "Docs/Classes/AUpgradeManager/Functions/HasInited.html", ["has", "inited"], "AUpgradeManager");
addToContainers_function("OnUpgradePutInProductionQueue", "Called when a production queue gets an upgrade added to it @param UpgradeType - upgrade that was added to queue @param QueueOwner - the actor that owns the queue, usually a building", "Docs/Classes/AUpgradeManager/Functions/OnUpgradePutInProductionQueue.html", ["on", "upgrade", "put", "in", "production", "queue"], "AUpgradeManager");
addToContainers_function("OnUpgradeProductionStarted", "Called when a production queue starts researching an upgrade @param UpgradeType - type of upgrade to research @param ResearchingActor - actor that is researching upgrade (usually building)", "Docs/Classes/AUpgradeManager/Functions/OnUpgradeProductionStarted.html", ["on", "upgrade", "production", "started"], "AUpgradeManager");
addToContainers_function("OnUpgradeCancelledFromProductionQueue", "Called when a production queue removes an upgrade from it not because production completed. Two reasons this could be called: 1. the player cancels production of an upgrade 2. the researching building reaches zero health", "Docs/Classes/AUpgradeManager/Functions/OnUpgradeCancelledFromProductionQ.html", ["on", "upgrade", "cancelled", "from", "production", "queue"], "AUpgradeManager");
addToContainers_function("OnUpgradeComplete", "", "Docs/Classes/AUpgradeManager/Functions/OnUpgradeComplete.html", ["on", "upgrade", "complete"], "AUpgradeManager");
addToContainers_function("OnUpgradeComplete_UpdateSomeContainers", "@param UpgradeType - upgrade that was just completed @return - true if something went from having 1 outstanding upgrade prereq to 0, so there is a possibility it can be produced now", "Docs/Classes/AUpgradeManager/Functions/OnUpgradeComplete_UpdateSomeConta.html", ["on", "upgrade", "complete_", "update", "some", "containers"], "AUpgradeManager");
addToContainers_function("ApplyAllCompletedUpgrades", "Apply all completed upgrades to a freshly spawned selectable", "Docs/Classes/AUpgradeManager/Functions/ApplyAllCompletedUpgrades.html", ["apply", "all", "completed", "upgrades"], "AUpgradeManager");
addToContainers_function("ApplyAllCompletedUpgrades", "", "Docs/Classes/AUpgradeManager/Functions/ApplyAllCompletedUpgrades_1.html", ["apply", "all", "completed", "upgrades"], "AUpgradeManager");
addToContainers_function("HasBeenFullyResearched", "Return true if upgrade cannot be researched anymore", "Docs/Classes/AUpgradeManager/Functions/HasBeenFullyResearched.html", ["has", "been", "fully", "researched"], "AUpgradeManager");
addToContainers_function("IsUpgradeQueued", "Returns true if the upgrade is queued in a buildings production queue", "Docs/Classes/AUpgradeManager/Functions/IsUpgradeQueued.html", ["is", "upgrade", "queued"], "AUpgradeManager");
addToContainers_function("HasResearchedAllUpgrades", "Returns true if the player has researched every upgrade for their faction", "Docs/Classes/AUpgradeManager/Functions/HasResearchedAllUpgrades.html", ["has", "researched", "all", "upgrades"], "AUpgradeManager");
addToContainers_function("Random_GetUnresearchedUpgrade", "Get a random unresearched upgrade. Assumes there is at least one unresearched upgrade.", "Docs/Classes/AUpgradeManager/Functions/Random_GetUnresearchedUpgrade.html", ["random_", "get", "unresearched", "upgrade"], "AUpgradeManager");
addToContainers_variable("", "Reference to player state that owns this", "Docs/Classes/AUpgradeManager/Variables/.html", [], "AUpgradeManager");
addToContainers_variable("", "Reference to faction info of owning player state", "Docs/Classes/AUpgradeManager/Variables/_1.html", [], "AUpgradeManager");
addToContainers_variable("TotalNumUpgradesResearched", "Total number of upgrades this player has researched. This will exclude any upgrades that can be obtained through using commander abilities", "Docs/Classes/AUpgradeManager/Variables/TotalNumUpgradesResearched.html", ["total", "num", "upgrades", "researched"], "AUpgradeManager");
addToContainers_variable("", "Maps upgrade type to how many times it has been researched, which is limited to 0 or 1 at the moment", "Docs/Classes/AUpgradeManager/Variables/_2.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps upgrade type to its effects", "Docs/Classes/AUpgradeManager/Variables/_3.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps building type to array of all upgrades completed for it", "Docs/Classes/AUpgradeManager/Variables/_4.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps unit type to array of all upgrades completed for it", "Docs/Classes/AUpgradeManager/Variables/_5.html", [], "AUpgradeManager");
addToContainers_variable("", "Maps from upgrade type to actor (usually building) that has upgrade queued (not necessarily researching it yet). Updated server-side only", "Docs/Classes/AUpgradeManager/Variables/_6.html", [], "AUpgradeManager");
addToContainers_variable("", "Upgrades that the owner\'s faction has on its roster but have not been researched yet. This was added to enable a quick way to get a random unresearched upgrade. This will not include upgrades that are aquired through commander abilities", "Docs/Classes/AUpgradeManager/Variables/_7.html", [], "AUpgradeManager");
addToContainers_variable("HasUpgradePrerequisite_Buildings", "Maps upgrade type to an array. The array points to arrays in PS. These arrays contain upgrade types that have not yet been obtained but that are a prerequisite for a building/unit/upgrade. If the upgrade isn\'t a prerequisite for anything then it will not have an entry in any of these TMap.", "Docs/Classes/AUpgradeManager/Variables/HasUpgradePrerequisite_Buildings.html", ["has", "upgrade", "prerequisite_", "buildings"], "AUpgradeManager");
addToContainers_variable("HasUpgradePrerequisite_Units", "", "Docs/Classes/AUpgradeManager/Variables/HasUpgradePrerequisite_Units.html", ["has", "upgrade", "prerequisite_", "units"], "AUpgradeManager");
addToContainers_variable("HasUpgradePrerequisite_Upgrades", "", "Docs/Classes/AUpgradeManager/Variables/HasUpgradePrerequisite_Upgrades.html", ["has", "upgrade", "prerequisite_", "upgrades"], "AUpgradeManager");
addToContainers_variable("bHasInited", "", "Docs/Classes/AUpgradeManager/Variables/bHasInited.html", ["has", "inited"], "AUpgradeManager");
addToContainers_struct("FBuildingAnimState", "Stores the animation state of the building", "Docs/Structs/FBuildingAnimState/FBuildingAnimState.html", ["building", "anim", "state"], "");
addToContainers_function("FBuildingAnimState", "Constructor", "Docs/Structs/FBuildingAnimState/Functions/FBuildingAnimState.html", ["building", "anim", "state"], "FBuildingAnimState");
addToContainers_variable("", "World time when animation started", "Docs/Structs/FBuildingAnimState/Variables/.html", [], "FBuildingAnimState");
addToContainers_variable("", "Type of animation", "Docs/Structs/FBuildingAnimState/Variables/_1.html", [], "FBuildingAnimState");
addToContainers_struct("FBuildingAnimPauseInfo", "Information about what/when animation was paused", "Docs/Structs/FBuildingAnimPauseInfo/FBuildingAnimPauseInfo.html", ["building", "anim", "pause", "info"], "");
addToContainers_function("FBuildingAnimPauseInfo", "Constructor", "Docs/Structs/FBuildingAnimPauseInfo/Functions/FBuildingAnimPauseInfo.html", ["building", "anim", "pause", "info"], "FBuildingAnimPauseInfo");
addToContainers_variable("StartTime", "World time when animation started playing", "Docs/Structs/FBuildingAnimPauseInfo/Variables/StartTime.html", ["start", "time"], "FBuildingAnimPauseInfo");
addToContainers_variable("AnimationType", "Type of animation that was paused", "Docs/Structs/FBuildingAnimPauseInfo/Variables/AnimationType.html", ["animation", "type"], "FBuildingAnimPauseInfo");
addToContainers_struct("FConstructionProgressInfo", "A struct that stores the info about this building while it is being constructed. Using the info in this struct it is possible to derive how far along the construction of this building is. If structs do not rep all at once (i.e. if both variables in this struct change but UE is allowed to send only one of the two variables in this struct) then we have problems. This article says they do, it is about 3 years old: https://answers.unrealengine.com/questions/234803/problems-with-the-order-replicated-variables-repli.html If they don\'t both update at once then it *may* be possible, haven\'t thought about it thouroughly", "Docs/Structs/FConstructionProgressInfo/FConstructionProgressInfo.html", ["construction", "progress", "info"], "");
addToContainers_function("FConstructionProgressInfo", "", "Docs/Structs/FConstructionProgressInfo/Functions/FConstructionProgressInfo.html", ["construction", "progress", "info"], "FConstructionProgressInfo");
addToContainers_variable("", "How far along construction was when it was halted. Range: [0, 1]", "Docs/Structs/FConstructionProgressInfo/Variables/.html", [], "FConstructionProgressInfo");
addToContainers_variable("", "The world time when construction resumed. A value less than 0 means that the building is currently not being worked on", "Docs/Structs/FConstructionProgressInfo/Variables/_1.html", [], "FConstructionProgressInfo");
addToContainers_class("ABuilding", "My notes: - some OnRep funcs may need to check if HasBeenFullyDestroyed()", "Docs/Classes/ABuilding/ABuilding.html", [], "");
addToContainers_function("ABuilding", "", "Docs/Classes/ABuilding/Functions/ABuilding.html", [], "ABuilding");
addToContainers_function("PostLoad", "", "Docs/Classes/ABuilding/Functions/PostLoad.html", ["post", "load"], "ABuilding");
addToContainers_function("PreInitializeComponents", "", "Docs/Classes/ABuilding/Functions/PreInitializeComponents.html", ["pre", "initialize", "components"], "ABuilding");
addToContainers_function("PostInitializeComponents", "", "Docs/Classes/ABuilding/Functions/PostInitializeComponents.html", ["post", "initialize", "components"], "ABuilding");
addToContainers_function("RunStartOfBeginPlayLogic", "", "Docs/Classes/ABuilding/Functions/RunStartOfBeginPlayLogic.html", ["run", "start", "of", "begin", "play", "logic"], "ABuilding");
addToContainers_function("BeginPlay", "Called when the game starts or when spawned", "Docs/Classes/ABuilding/Functions/BeginPlay.html", ["begin", "play"], "ABuilding");
addToContainers_function("OnRep_ID", "", "Docs/Classes/ABuilding/Functions/OnRep_ID.html", ["on", "rep_", "i", "d"], "ABuilding");
addToContainers_function("OnRep_CreationMethod", "Even if not a starting selectable this will need to be called so we know for sure", "Docs/Classes/ABuilding/Functions/OnRep_CreationMethod.html", ["on", "rep_", "creation", "method"], "ABuilding");
addToContainers_function("OnRep_Owner", "", "Docs/Classes/ABuilding/Functions/OnRep_Owner.html", ["on", "rep_", "owner"], "ABuilding");
addToContainers_function("OnRep_GameTickCountOnConstructionComplete", "This function being called can also be used as a signal that construction has completed", "Docs/Classes/ABuilding/Functions/OnRep_GameTickCountOnConstruction.html", ["on", "rep_", "game", "tick", "count", "on", "construction", "complete"], "ABuilding");
addToContainers_function("OnRep_AnimationState", "", "Docs/Classes/ABuilding/Functions/OnRep_AnimationState.html", ["on", "rep_", "animation", "state"], "ABuilding");
addToContainers_function("PlayAnimInternal", "", "Docs/Classes/ABuilding/Functions/PlayAnimInternal.html", ["play", "anim", "internal"], "ABuilding");
addToContainers_function("Setup", "~ Begin ISelectable interface", "Docs/Classes/ABuilding/Functions/Setup.html", [], "ABuilding");
addToContainers_function("SetupSelectionInfo", "~ End ISelectable interface", "Docs/Classes/ABuilding/Functions/SetupSelectionInfo.html", ["setup", "selection", "info"], "ABuilding");
addToContainers_function("AdjustForUpgrades", "", "Docs/Classes/ABuilding/Functions/AdjustForUpgrades.html", ["adjust", "for", "upgrades"], "ABuilding");
addToContainers_function("PutAbilitiesOnInitialCooldown", "Put any context buttons that have an initial cooldown on cooldown", "Docs/Classes/ABuilding/Functions/PutAbilitiesOnInitialCooldown.html", ["put", "abilities", "on", "initial", "cooldown"], "ABuilding");
addToContainers_function("SetupSelectionDecal", "", "Docs/Classes/ABuilding/Functions/SetupSelectionDecal.html", ["setup", "selection", "decal"], "ABuilding");
addToContainers_function("SetMeshColors", "Set what color mesh should be given who owner is", "Docs/Classes/ABuilding/Functions/SetMeshColors.html", ["set", "mesh", "colors"], "ABuilding");
addToContainers_function("SetupWidgetComponents", "", "Docs/Classes/ABuilding/Functions/SetupWidgetComponents.html", ["setup", "widget", "components"], "ABuilding");
addToContainers_function("SetupBuildingAttackComponents", "", "Docs/Classes/ABuilding/Functions/SetupBuildingAttackComponents.html", ["setup", "building", "attack", "components"], "ABuilding");
addToContainers_function("SetupInitialConstructionValues", "Set inital values such as health @param BuildingInfo - info struct for this building", "Docs/Classes/ABuilding/Functions/SetupInitialConstructionValues.html", ["setup", "initial", "construction", "values"], "ABuilding");
addToContainers_function("Tick", "Called every frame", "Docs/Classes/ABuilding/Functions/Tick.html", [], "ABuilding");
addToContainers_function("ProgressSinkingIntoGround", "", "Docs/Classes/ABuilding/Functions/ProgressSinkingIntoGround.html", ["progress", "sinking", "into", "ground"], "ABuilding");
addToContainers_function("OnRep_RallyPointLocation", "", "Docs/Classes/ABuilding/Functions/OnRep_RallyPointLocation.html", ["on", "rep_", "rally", "point", "location"], "ABuilding");
addToContainers_function("OnRep_ConstructionProgressInfo", "", "Docs/Classes/ABuilding/Functions/OnRep_ConstructionProgressInfo.html", ["on", "rep_", "construction", "progress", "info"], "ABuilding");
addToContainers_function("ProgressConstruction", "Called every tick. Progresses construction if this is being built", "Docs/Classes/ABuilding/Functions/ProgressConstruction.html", ["progress", "construction"], "ABuilding");
addToContainers_function("Server_OnConstructionComplete", "Called when construction is complete", "Docs/Classes/ABuilding/Functions/Server_OnConstructionComplete.html", ["server_", "on", "construction", "complete"], "ABuilding");
addToContainers_function("Client_SetAppearanceForConstructionComplete", "Some different functions for when construction completes on the client.", "Docs/Classes/ABuilding/Functions/Client_SetAppearanceForConstructi.html", ["client_", "set", "appearance", "for", "construction", "complete"], "ABuilding");
addToContainers_function("Client_FinalizeConstructionComplete", "", "Docs/Classes/ABuilding/Functions/Client_FinalizeConstructionComple.html", ["client_", "finalize", "construction", "complete"], "ABuilding");
addToContainers_function("Client_OnConstructionComplete", "", "Docs/Classes/ABuilding/Functions/Client_OnConstructionComplete.html", ["client_", "on", "construction", "complete"], "ABuilding");
addToContainers_function("SetInitialBuildingVisibility", "", "Docs/Classes/ABuilding/Functions/SetInitialBuildingVisibility.html", ["set", "initial", "building", "visibility"], "ABuilding");
addToContainers_function("SetInitialBuildingVisibilityV2", "", "Docs/Classes/ABuilding/Functions/SetInitialBuildingVisibilityV2.html", ["set", "initial", "building", "visibility", "v2"], "ABuilding");
addToContainers_function("SetBuildingVisibility", "These 2 funcs are probably not good to call anywhere other than during Setup()", "Docs/Classes/ABuilding/Functions/SetBuildingVisibility.html", ["set", "building", "visibility"], "ABuilding");
addToContainers_function("SetBuildingVisibilityV2", "", "Docs/Classes/ABuilding/Functions/SetBuildingVisibilityV2.html", ["set", "building", "visibility", "v2"], "ABuilding");
addToContainers_function("HideBuilding", "", "Docs/Classes/ABuilding/Functions/HideBuilding.html", ["hide", "building"], "ABuilding");
addToContainers_function("OnEnterFogOfWar", "Called when transitioning between in/out fog", "Docs/Classes/ABuilding/Functions/OnEnterFogOfWar.html", ["on", "enter", "fog", "of", "war"], "ABuilding");
addToContainers_function("OnExitFogOfWar", "", "Docs/Classes/ABuilding/Functions/OnExitFogOfWar.html", ["on", "exit", "fog", "of", "war"], "ABuilding");
addToContainers_function("PlayJustPlacedParticles", "Play the particles that should play when this building is placed into the world. They should not be looping", "Docs/Classes/ABuilding/Functions/PlayJustPlacedParticles.html", ["play", "just", "placed", "particles"], "ABuilding");
addToContainers_function("PlayJustPlacedSound", "Play the sound that should be played when the building has just been placed into the world", "Docs/Classes/ABuilding/Functions/PlayJustPlacedSound.html", ["play", "just", "placed", "sound"], "ABuilding");
addToContainers_function("InitProductionQueues", "Set some values for production queues on begin play", "Docs/Classes/ABuilding/Functions/InitProductionQueues.html", ["init", "production", "queues"], "ABuilding");
addToContainers_function("Server_SetBeingBuilt", "Set whether this building is having its construction progressed or not", "Docs/Classes/ABuilding/Functions/Server_SetBeingBuilt.html", ["server_", "set", "being", "built"], "ABuilding");
addToContainers_function("PlayBeingConstructedParticles", "Play the particles that should play when this building is having its construction progress advanced. The particles should be looping", "Docs/Classes/ABuilding/Functions/PlayBeingConstructedParticles.html", ["play", "being", "constructed", "particles"], "ABuilding");
addToContainers_function("StopBeingConstructedParticles", "Stop emitting the particles for when this building is having its construction progress advanced", "Docs/Classes/ABuilding/Functions/StopBeingConstructedParticles.html", ["stop", "being", "constructed", "particles"], "ABuilding");
addToContainers_function("PlayBeingConstructedSound", "Functions for the sound when the building is being worked on", "Docs/Classes/ABuilding/Functions/PlayBeingConstructedSound.html", ["play", "being", "constructed", "sound"], "ABuilding");
addToContainers_function("StopBeingConstructedSound", "", "Docs/Classes/ABuilding/Functions/StopBeingConstructedSound.html", ["stop", "being", "constructed", "sound"], "ABuilding");
addToContainers_function("ActivateAttackComponents", "[Server] If this building has any attack components, make them start their behaviour", "Docs/Classes/ABuilding/Functions/ActivateAttackComponents.html", ["activate", "attack", "components"], "ABuilding");
addToContainers_function("PlayAnimation", "[Server] Play animation unless anims are paused. Either way it will replicate to clients", "Docs/Classes/ABuilding/Functions/PlayAnimation.html", ["play", "animation"], "ABuilding");
addToContainers_function("PauseAnimation", "Pause the animation that is currently playing", "Docs/Classes/ABuilding/Functions/PauseAnimation.html", ["pause", "animation"], "ABuilding");
addToContainers_function("UnpauseAnimation", "", "Docs/Classes/ABuilding/Functions/UnpauseAnimation.html", ["unpause", "animation"], "ABuilding");
addToContainers_function("DoNothing", "", "Docs/Classes/ABuilding/Functions/DoNothing.html", ["do", "nothing"], "ABuilding");
addToContainers_function("IsSelectableSelected", "Return whether this building is selected by local player", "Docs/Classes/ABuilding/Functions/IsSelectableSelected.html", ["is", "selectable", "selected"], "ABuilding");
addToContainers_function("ShowSelectionDecal", "Shows selection decal", "Docs/Classes/ABuilding/Functions/ShowSelectionDecal.html", ["show", "selection", "decal"], "ABuilding");
addToContainers_function("ShowHoverDecal", "", "Docs/Classes/ABuilding/Functions/ShowHoverDecal.html", ["show", "hover", "decal"], "ABuilding");
addToContainers_function("HideSelectionDecal", "Hides selection decal", "Docs/Classes/ABuilding/Functions/HideSelectionDecal.html", ["hide", "selection", "decal"], "ABuilding");
addToContainers_function("IsStartingSelectable", "Return whether this building was a selectable the player started the match with", "Docs/Classes/ABuilding/Functions/IsStartingSelectable.html", ["is", "starting", "selectable"], "ABuilding");
addToContainers_function("IsFullyVisibleLocally", "Whether this building is visible (meaning outside of fog and not stealthed) to the local player", "Docs/Classes/ABuilding/Functions/IsFullyVisibleLocally.html", ["is", "fully", "visible", "locally"], "ABuilding");
addToContainers_function("OnServer", "Returns true if executing code on server, false if on a remote client", "Docs/Classes/ABuilding/Functions/OnServer.html", ["on", "server"], "ABuilding");
addToContainers_function("OnClient", "Returns true if executing code on a remote client, false if on server", "Docs/Classes/ABuilding/Functions/OnClient.html", ["on", "client"], "ABuilding");
addToContainers_function("AreAnimationsPausedLocally", "Return whether for the local player the animations of the building are frozen", "Docs/Classes/ABuilding/Functions/AreAnimationsPausedLocally.html", ["are", "animations", "paused", "locally"], "ABuilding");
addToContainers_function("PreReplication", "", "Docs/Classes/ABuilding/Functions/PreReplication.html", ["pre", "replication"], "ABuilding");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/ABuilding/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "ABuilding");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/ABuilding/Functions/Delay).html", [], "ABuilding");
addToContainers_function("DelayAmount)", "Call function that returns void after delay. Creates a timer handle for this", "Docs/Classes/ABuilding/Functions/DelayAmount).html", ["delay", "amount)"], "ABuilding");
addToContainers_function("PostEditChangeChainProperty", "To change visibility of context button variables on changes in editor", "Docs/Classes/ABuilding/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "ABuilding");
addToContainers_function("GetType", "Use GetAttributesBase().GetBuildingType() in non-editor builds", "Docs/Classes/ABuilding/Functions/GetType.html", ["get", "type"], "ABuilding");
addToContainers_function("GetFaction", "#endif", "Docs/Classes/ABuilding/Functions/GetFaction.html", ["get", "faction"], "ABuilding");
addToContainers_function("IsInsideFogOfWar", "Relevant for local player only", "Docs/Classes/ABuilding/Functions/IsInsideFogOfWar.html", ["is", "inside", "fog", "of", "war"], "ABuilding");
addToContainers_function("GetRemainingBuildTime", "", "Docs/Classes/ABuilding/Functions/GetRemainingBuildTime.html", ["get", "remaining", "build", "time"], "ABuilding");
addToContainers_function("GetFinalLocation", "Get the world location the building should be at when it has been fully constructed", "Docs/Classes/ABuilding/Functions/GetFinalLocation.html", ["get", "final", "location"], "ABuilding");
addToContainers_function("IsConstructionComplete", "Return whether the building is fully constructed", "Docs/Classes/ABuilding/Functions/IsConstructionComplete.html", ["is", "construction", "complete"], "ABuilding");
addToContainers_function("IsBeingBuilt", "Return whether something is constructing this building i.e. it is making progress on its construction", "Docs/Classes/ABuilding/Functions/IsBeingBuilt.html", ["is", "being", "built"], "ABuilding");
addToContainers_function("CanAcceptBuilder", "Whether building can accept a worker to work on it", "Docs/Classes/ABuilding/Functions/CanAcceptBuilder.html", ["can", "accept", "builder"], "ABuilding");
addToContainers_function("CanAcceptBuilderChecked", "Whether building can accept a worker to work on it. Assumes that we know that the build method is a method that needs workers working on it", "Docs/Classes/ABuilding/Functions/CanAcceptBuilderChecked.html", ["can", "accept", "builder", "checked"], "ABuilding");
addToContainers_function("OnWorkerGained", "Called when a builder starts working on this building", "Docs/Classes/ABuilding/Functions/OnWorkerGained.html", ["on", "worker", "gained"], "ABuilding");
addToContainers_function("OnWorkerLost", "Called when a worker stops working on this", "Docs/Classes/ABuilding/Functions/OnWorkerLost.html", ["on", "worker", "lost"], "ABuilding");
addToContainers_function("IsDropPointFor", "Whether this building is a drop point for a resource type", "Docs/Classes/ABuilding/Functions/IsDropPointFor.html", ["is", "drop", "point", "for"], "ABuilding");
addToContainers_function("GetInitialMoveLocation", "Get the world coords for where the units initial move once spawned should be to", "Docs/Classes/ABuilding/Functions/GetInitialMoveLocation.html", ["get", "initial", "move", "location"], "ABuilding");
addToContainers_function("GetRallyPointLocation", "Get the world coords for the unit rally point", "Docs/Classes/ABuilding/Functions/GetRallyPointLocation.html", ["get", "rally", "point", "location"], "ABuilding");
addToContainers_function("GetProducedUnitInitialBehavior", "Get where a unit that has spawned from this building should initially do", "Docs/Classes/ABuilding/Functions/GetProducedUnitInitialBehavior.html", ["get", "produced", "unit", "initial", "behavior"], "ABuilding");
addToContainers_function("CanChangeRallyPoint", "Returns whether the building is in a state where it is ok to set its rally point", "Docs/Classes/ABuilding/Functions/CanChangeRallyPoint.html", ["can", "change", "rally", "point"], "ABuilding");
addToContainers_function("GetClosestResourceSpot", "Get the closest resource spot that a unit can collect from. Considers all the resource types the unit can collect. If either: - A resource spot cannot be found - unit cannot collect any resource types then this will return null Currently this is a relatively slow function. It iterates all resource spots on the map that the unit can gather from.", "Docs/Classes/ABuilding/Functions/GetClosestResourceSpot.html", ["get", "closest", "resource", "spot"], "ABuilding");
addToContainers_function("Server_ChangeRallyPointLocation", "Send message to server to try and change rally point location. Because unreliable it is possible location will not actually change even though audio cue will be given to player straight away. Actually because it\'s starting from client then going to server this can probably be changed to reliable since clients basically do nothing", "Docs/Classes/ABuilding/Functions/Server_ChangeRallyPointLocation.html", ["server_", "change", "rally", "point", "location"], "ABuilding");
addToContainers_function("ChangeRallyPointLocation", "This is a version of the function above to only be called on server. This function is only here as an optimization if calling RPC functions that do not actually go over the wire has overhead as opposed to calling the func directly", "Docs/Classes/ABuilding/Functions/ChangeRallyPointLocation.html", ["change", "rally", "point", "location"], "ABuilding");
addToContainers_function("GetPS", "", "Docs/Classes/ABuilding/Functions/GetPS.html", ["get", "p", "s"], "ABuilding");
addToContainers_function("GetGS", "", "Docs/Classes/ABuilding/Functions/GetGS.html", ["get", "g", "s"], "ABuilding");
addToContainers_function("GetPC", "", "Docs/Classes/ABuilding/Functions/GetPC.html", ["get", "p", "c"], "ABuilding");
addToContainers_function("GetGhostBP", "", "Docs/Classes/ABuilding/Functions/GetGhostBP.html", ["get", "ghost", "b", "p"], "ABuilding");
addToContainers_function("GetBoxComponent", "", "Docs/Classes/ABuilding/Functions/GetBoxComponent.html", ["get", "box", "component"], "ABuilding");
addToContainers_function("GetMesh", "", "Docs/Classes/ABuilding/Functions/GetMesh.html", ["get", "mesh"], "ABuilding");
addToContainers_function("GetFogLocations", "", "Docs/Classes/ABuilding/Functions/GetFogLocations.html", ["get", "fog", "locations"], "ABuilding");
addToContainers_function("CheckAnimationProperties", "", "Docs/Classes/ABuilding/Functions/CheckAnimationProperties.html", ["check", "animation", "properties"], "ABuilding");
addToContainers_function("VerifyAllAnimNotifiesArePresentOnMontage", "", "Docs/Classes/ABuilding/Functions/VerifyAllAnimNotifiesArePresentOn.html", ["verify", "all", "anim", "notifies", "are", "present", "on", "montage"], "ABuilding");
addToContainers_function("GetPersistentProductionQueue", "=====================================================================================", "Docs/Classes/ABuilding/Functions/GetPersistentProductionQueue.html", ["get", "persistent", "production", "queue"], "ABuilding");
addToContainers_function("GetPersistentProductionQueue", "", "Docs/Classes/ABuilding/Functions/GetPersistentProductionQueue_1.html", ["get", "persistent", "production", "queue"], "ABuilding");
addToContainers_function("GetContextProductionQueue", "This added for CPU player behavior", "Docs/Classes/ABuilding/Functions/GetContextProductionQueue.html", ["get", "context", "production", "queue"], "ABuilding");
addToContainers_function("Server_OnProductionRequestBuilding", "Functions to tell server to try and start producing something. Several functions to cut down on bandwidth with params. TODO: param should be able to be removed as a bandwidth optimization and use seperate functions instead. Mainly there right now to avoid declaring like 10 more RPC UFUNCTIONS", "Docs/Classes/ABuilding/Functions/Server_OnProductionRequestBuildin.html", ["server_", "on", "production", "request", "building"], "ABuilding");
addToContainers_function("Server_OnProductionRequestUnit", "", "Docs/Classes/ABuilding/Functions/Server_OnProductionRequestUnit.html", ["server_", "on", "production", "request", "unit"], "ABuilding");
addToContainers_function("Server_OnProductionRequestUpgrade", "", "Docs/Classes/ABuilding/Functions/Server_OnProductionRequestUpgrade.html", ["server_", "on", "production", "request", "upgrade"], "ABuilding");
addToContainers_function("Server_OnProductionRequest", "@param bPerformChecks - whether to check if enough resources etc @param InBuildingWeAreProducing - only relevant if we are fulfilling a request to produce a building that uses the BuildsItself build method", "Docs/Classes/ABuilding/Functions/Server_OnProductionRequest.html", ["server_", "on", "production", "request"], "ABuilding");
addToContainers_function("Client_StartProductionBuilding", "These functions are only called if adding something to the production queue successfully and it was the first item added therefore production on it should start immediately. Several functions to cut down on bandwidth with params", "Docs/Classes/ABuilding/Functions/Client_StartProductionBuilding.html", ["client_", "start", "production", "building"], "ABuilding");
addToContainers_function("Client_StartProductionUnit", "", "Docs/Classes/ABuilding/Functions/Client_StartProductionUnit.html", ["client_", "start", "production", "unit"], "ABuilding");
addToContainers_function("Client_StartProductionUpgrade", "", "Docs/Classes/ABuilding/Functions/Client_StartProductionUpgrade.html", ["client_", "start", "production", "upgrade"], "ABuilding");
addToContainers_function("Client_StartProduction", "", "Docs/Classes/ABuilding/Functions/Client_StartProduction.html", ["client_", "start", "production"], "ABuilding");
addToContainers_function("Client_OnBuildingAddedToProductionQueue", "Functions to tell client item was successfully added to queue but production should not start immediately", "Docs/Classes/ABuilding/Functions/Client_OnBuildingAddedToProductio.html", ["client_", "on", "building", "added", "to", "production", "queue"], "ABuilding");
addToContainers_function("Client_OnUnitAddedToProductionQueue", "", "Docs/Classes/ABuilding/Functions/Client_OnUnitAddedToProductionQue.html", ["client_", "on", "unit", "added", "to", "production", "queue"], "ABuilding");
addToContainers_function("Client_OnUpgradeAddedToProductionQueue", "", "Docs/Classes/ABuilding/Functions/Client_OnUpgradeAddedToProduction.html", ["client_", "on", "upgrade", "added", "to", "production", "queue"], "ABuilding");
addToContainers_function("Client_OnItemAddedToProductionQueue", "", "Docs/Classes/ABuilding/Functions/Client_OnItemAddedToProductionQue.html", ["client_", "on", "item", "added", "to", "production", "queue"], "ABuilding");
addToContainers_function("Server_OnProductionComplete_Context", "Timer handle functions for different production queues", "Docs/Classes/ABuilding/Functions/Server_OnProductionComplete_Conte.html", ["server_", "on", "production", "complete_", "context"], "ABuilding");
addToContainers_function("Server_OnProductionComplete_Persistent", "", "Docs/Classes/ABuilding/Functions/Server_OnProductionComplete_Persi.html", ["server_", "on", "production", "complete_", "persistent"], "ABuilding");
addToContainers_function("Server_OnProductionComplete_Inner", "", "Docs/Classes/ABuilding/Functions/Server_OnProductionComplete_Inner.html", ["server_", "on", "production", "complete_", "inner"], "ABuilding");
addToContainers_function("OnUnitProductionComplete", "[Server] Call from production queue when production for a unit completes @param UnitType - unit that just completed production", "Docs/Classes/ABuilding/Functions/OnUnitProductionComplete.html", ["on", "unit", "production", "complete"], "ABuilding");
addToContainers_function("AnimNotify_OnDoorFullyOpen", "Called by anim instance when the \'open door\' anim reaches the point where the unit should be spawned", "Docs/Classes/ABuilding/Functions/AnimNotify_OnDoorFullyOpen.html", ["anim", "notify_", "on", "door", "fully", "open"], "ABuilding");
addToContainers_function("SpawnUnit", "Create unit", "Docs/Classes/ABuilding/Functions/SpawnUnit.html", ["spawn", "unit"], "ABuilding");
addToContainers_function("Server_OnProductionCompletePart2_Persistent", "", "Docs/Classes/ABuilding/Functions/Server_OnProductionCompletePart2_.html", ["server_", "on", "production", "complete", "part2_", "persistent"], "ABuilding");
addToContainers_function("Server_OnProductionCompletePart2_Context", "", "Docs/Classes/ABuilding/Functions/Server_OnProductionCompletePart2__1.html", ["server_", "on", "production", "complete", "part2_", "context"], "ABuilding");
addToContainers_function("Server_OnProductionCompletePart2_Inner", "", "Docs/Classes/ABuilding/Functions/Server_OnProductionCompletePart2__2.html", ["server_", "on", "production", "complete", "part2_", "inner"], "ABuilding");
addToContainers_function("Client_OnProductionComplete", "This updates the queue with real game state. @param - number of entries to remove from queue", "Docs/Classes/ABuilding/Functions/Client_OnProductionComplete.html", ["client_", "on", "production", "complete"], "ABuilding");
addToContainers_function("Client_OnProductionQueueTimerHandleFinished_Context", "When production \"completes\" on the client nothing should happen - the timer handle is for visuals only, but if this is called before the server says its finished then timers are not running at the same speed on server and client. The behavior here is mark that the timer has completed so the HUD can show 100% complete in the meantime as opposed to 0%. Hopefully the difference between server and client is small and the freeze will not last long", "Docs/Classes/ABuilding/Functions/Client_OnProductionQueueTimerHand.html", ["client_", "on", "production", "queue", "timer", "handle", "finished_", "context"], "ABuilding");
addToContainers_function("Client_OnProductionQueueTimerHandleFinished_Persistent", "", "Docs/Classes/ABuilding/Functions/Client_OnProductionQueueTimerHand_1.html", ["client_", "on", "production", "queue", "timer", "handle", "finished_", "persistent"], "ABuilding");
addToContainers_function("AICon_QueueProduction", "For a CPU player put something into the production queue. Buildings go into the persistent queue while units and upgrades go in the context queue. These functions assume that EVERYTHING has been checked - resources, prereqs, queue capacity, possibly more", "Docs/Classes/ABuilding/Functions/AICon_QueueProduction.html", ["i", "con_", "queue", "production"], "ABuilding");
addToContainers_function("AICon_QueueProduction", "Version for queuing BuildsItself build method buildings @param BuildingWeAreProducing - reference to the spawned building that we are producing using this building", "Docs/Classes/ABuilding/Functions/AICon_QueueProduction_1.html", ["i", "con_", "queue", "production"], "ABuilding");
addToContainers_function("AICon_QueueProductionInner", "", "Docs/Classes/ABuilding/Functions/AICon_QueueProductionInner.html", ["i", "con_", "queue", "production", "inner"], "ABuilding");
addToContainers_function("AICon_OnQueueProductionComplete_Persistent", "", "Docs/Classes/ABuilding/Functions/AICon_OnQueueProductionComplete_P.html", ["i", "con_", "on", "queue", "production", "complete_", "persistent"], "ABuilding");
addToContainers_function("AICon_OnQueueProductionComplete_Context", "", "Docs/Classes/ABuilding/Functions/AICon_OnQueueProductionComplete_C.html", ["i", "con_", "on", "queue", "production", "complete_", "context"], "ABuilding");
addToContainers_function("AICon_OnQueueProductionComplete_Inner", "", "Docs/Classes/ABuilding/Functions/AICon_OnQueueProductionComplete_I.html", ["i", "con_", "on", "queue", "production", "complete_", "inner"], "ABuilding");
addToContainers_function("AICon_OnProductionCompletePart2_Persistent", "", "Docs/Classes/ABuilding/Functions/AICon_OnProductionCompletePart2_P.html", ["i", "con_", "on", "production", "complete", "part2_", "persistent"], "ABuilding");
addToContainers_function("AICon_OnProductionCompletePart2_Context", "", "Docs/Classes/ABuilding/Functions/AICon_OnProductionCompletePart2_C.html", ["i", "con_", "on", "production", "complete", "part2_", "context"], "ABuilding");
addToContainers_function("AICon_OnProductionCompletePart2_Inner", "", "Docs/Classes/ABuilding/Functions/AICon_OnProductionCompletePart2_I.html", ["i", "con_", "on", "production", "complete", "part2_", "inner"], "ABuilding");
addToContainers_function("GetBounds", "==========================================================================================", "Docs/Classes/ABuilding/Functions/GetBounds.html", ["get", "bounds"], "ABuilding");
addToContainers_function("OnSingleSelect", "", "Docs/Classes/ABuilding/Functions/OnSingleSelect.html", ["on", "single", "select"], "ABuilding");
addToContainers_function("OnMarqueeSelect", "", "Docs/Classes/ABuilding/Functions/OnMarqueeSelect.html", ["on", "marquee", "select"], "ABuilding");
addToContainers_function("OnDeselect", "", "Docs/Classes/ABuilding/Functions/OnDeselect.html", ["on", "deselect"], "ABuilding");
addToContainers_function("GetSelectableID", "", "Docs/Classes/ABuilding/Functions/GetSelectableID.html", ["get", "selectable", "i", "d"], "ABuilding");
addToContainers_function("Security_CanBeClickedOn", "", "Docs/Classes/ABuilding/Functions/Security_CanBeClickedOn.html", ["security_", "can", "be", "clicked", "on"], "ABuilding");
addToContainers_function("OnRightClick", "", "Docs/Classes/ABuilding/Functions/OnRightClick.html", ["on", "right", "click"], "ABuilding");
addToContainers_function("OnMouseHover", "", "Docs/Classes/ABuilding/Functions/OnMouseHover.html", ["on", "mouse", "hover"], "ABuilding");
addToContainers_function("OnMouseUnhover", "", "Docs/Classes/ABuilding/Functions/OnMouseUnhover.html", ["on", "mouse", "unhover"], "ABuilding");
addToContainers_function("GetTeam", "", "Docs/Classes/ABuilding/Functions/GetTeam.html", ["get", "team"], "ABuilding");
addToContainers_function("GetTeamIndex", "", "Docs/Classes/ABuilding/Functions/GetTeamIndex.html", ["get", "team", "index"], "ABuilding");
addToContainers_function("GetContextMenu", "", "Docs/Classes/ABuilding/Functions/GetContextMenu.html", ["get", "context", "menu"], "ABuilding");
addToContainers_function("GetInfo", "", "Docs/Classes/ABuilding/Functions/GetInfo.html", ["get", "info"], "ABuilding");
addToContainers_function("GetPrerequisites", "", "Docs/Classes/ABuilding/Functions/GetPrerequisites.html", ["get", "prerequisites"], "ABuilding");
addToContainers_function("GetCooldownRemaining", "", "Docs/Classes/ABuilding/Functions/GetCooldownRemaining.html", ["get", "cooldown", "remaining"], "ABuilding");
addToContainers_function("OnContextCommand", "", "Docs/Classes/ABuilding/Functions/OnContextCommand.html", ["on", "context", "command"], "ABuilding");
addToContainers_function("OnContextCommand", "", "Docs/Classes/ABuilding/Functions/OnContextCommand_1.html", ["on", "context", "command"], "ABuilding");
addToContainers_function("OnAbilityUse", "", "Docs/Classes/ABuilding/Functions/OnAbilityUse.html", ["on", "ability", "use"], "ABuilding");
addToContainers_function("GetBodyLocationInfo", "", "Docs/Classes/ABuilding/Functions/GetBodyLocationInfo.html", ["get", "body", "location", "info"], "ABuilding");
addToContainers_function("UpdateFogStatus", "", "Docs/Classes/ABuilding/Functions/UpdateFogStatus.html", ["update", "fog", "status"], "ABuilding");
addToContainers_function("GetVisionInfo", "", "Docs/Classes/ABuilding/Functions/GetVisionInfo.html", ["get", "vision", "info"], "ABuilding");
addToContainers_function("GetProductionQueue", "", "Docs/Classes/ABuilding/Functions/GetProductionQueue.html", ["get", "production", "queue"], "ABuilding");
addToContainers_function("SetOnSpawnValues", "", "Docs/Classes/ABuilding/Functions/SetOnSpawnValues.html", ["set", "on", "spawn", "values"], "ABuilding");
addToContainers_function("SetSelectableIDAndGameTickCount", "", "Docs/Classes/ABuilding/Functions/SetSelectableIDAndGameTickCount.html", ["set", "selectable", "i", "d", "and", "game", "tick", "count"], "ABuilding");
addToContainers_function("GetAttributesBase", "", "Docs/Classes/ABuilding/Functions/GetAttributesBase.html", ["get", "attributes", "base"], "ABuilding");
addToContainers_function("GetAttributesBase", "", "Docs/Classes/ABuilding/Functions/GetAttributesBase_1.html", ["get", "attributes", "base"], "ABuilding");
addToContainers_function("GetAttributes", "", "Docs/Classes/ABuilding/Functions/GetAttributes.html", ["get", "attributes"], "ABuilding");
addToContainers_function("GetBuildingAttributes", "", "Docs/Classes/ABuilding/Functions/GetBuildingAttributes.html", ["get", "building", "attributes"], "ABuilding");
addToContainers_function("GetBuildingAttributesModifiable", "", "Docs/Classes/ABuilding/Functions/GetBuildingAttributesModifiable.html", ["get", "building", "attributes", "modifiable"], "ABuilding");
addToContainers_function("GetHealth", "", "Docs/Classes/ABuilding/Functions/GetHealth.html", ["get", "health"], "ABuilding");
addToContainers_function("GetBoundsLength", "", "Docs/Classes/ABuilding/Functions/GetBoundsLength.html", ["get", "bounds", "length"], "ABuilding");
addToContainers_function("GetProjectileBP", "This is called during FI creation and will probably be to know which projectiles to pool. Will want to consider defense components but returns null for now", "Docs/Classes/ABuilding/Functions/GetProjectileBP.html", ["get", "projectile", "b", "p"], "ABuilding");
addToContainers_function("HasAttack", "", "Docs/Classes/ABuilding/Functions/HasAttack.html", ["has", "attack"], "ABuilding");
addToContainers_function("CanClassGainExperience", "", "Docs/Classes/ABuilding/Functions/CanClassGainExperience.html", ["can", "class", "gain", "experience"], "ABuilding");
addToContainers_function("GetRank", "", "Docs/Classes/ABuilding/Functions/GetRank.html", ["get", "rank"], "ABuilding");
addToContainers_function("GetCurrentRankExperience", "", "Docs/Classes/ABuilding/Functions/GetCurrentRankExperience.html", ["get", "current", "rank", "experience"], "ABuilding");
addToContainers_function("GetContextCooldowns", "", "Docs/Classes/ABuilding/Functions/GetContextCooldowns.html", ["get", "context", "cooldowns"], "ABuilding");
addToContainers_function("GetShopAttributes", "", "Docs/Classes/ABuilding/Functions/GetShopAttributes.html", ["get", "shop", "attributes"], "ABuilding");
addToContainers_function("GetInventory", "", "Docs/Classes/ABuilding/Functions/GetInventory.html", ["get", "inventory"], "ABuilding");
addToContainers_function("GetTotalExperienceRequiredForNextLevel", "", "Docs/Classes/ABuilding/Functions/GetTotalExperienceRequiredForNext.html", ["get", "total", "experience", "required", "for", "next", "level"], "ABuilding");
addToContainers_function("GetLocalPC", "", "Docs/Classes/ABuilding/Functions/GetLocalPC.html", ["get", "local", "p", "c"], "ABuilding");
addToContainers_function("OnItemPurchasedFromHere", "", "Docs/Classes/ABuilding/Functions/OnItemPurchasedFromHere.html", ["on", "item", "purchased", "from", "here"], "ABuilding");
addToContainers_function("GetOwnersID", "", "Docs/Classes/ABuilding/Functions/GetOwnersID.html", ["get", "owners", "i", "d"], "ABuilding");
addToContainers_function("GetActorLocationSelectable", "", "Docs/Classes/ABuilding/Functions/GetActorLocationSelectable.html", ["get", "actor", "location", "selectable"], "ABuilding");
addToContainers_function("IsInStealthMode", "", "Docs/Classes/ABuilding/Functions/IsInStealthMode.html", ["is", "in", "stealth", "mode"], "ABuilding");
addToContainers_function("HasEnoughSelectableResources", "", "Docs/Classes/ABuilding/Functions/HasEnoughSelectableResources.html", ["has", "enough", "selectable", "resources"], "ABuilding");
addToContainers_function("ShowTooltip", "", "Docs/Classes/ABuilding/Functions/ShowTooltip.html", ["show", "tooltip"], "ABuilding");
addToContainers_function("OnEnemyDestroyed", "", "Docs/Classes/ABuilding/Functions/OnEnemyDestroyed.html", ["on", "enemy", "destroyed"], "ABuilding");
addToContainers_function("AdjustPersistentWorldWidgetForNewCameraZoomAmount", "", "Docs/Classes/ABuilding/Functions/AdjustPersistentWorldWidgetForNew.html", ["adjust", "persistent", "world", "widget", "for", "new", "camera", "zoom", "amount"], "ABuilding");
addToContainers_function("AdjustSelectedWorldWidgetForNewCameraZoomAmount", "", "Docs/Classes/ABuilding/Functions/AdjustSelectedWorldWidgetForNewCa.html", ["adjust", "selected", "world", "widget", "for", "new", "camera", "zoom", "amount"], "ABuilding");
addToContainers_function("Selectable_GetPS", "", "Docs/Classes/ABuilding/Functions/Selectable_GetPS.html", ["selectable_", "get", "p", "s"], "ABuilding");
addToContainers_function("GetSpecialRightClickActionTowardsBuildingInfo", "", "Docs/Classes/ABuilding/Functions/GetSpecialRightClickActionTowards.html", ["get", "special", "right", "click", "action", "towards", "building", "info"], "ABuilding");
addToContainers_function("CanAquireTarget", "", "Docs/Classes/ABuilding/Functions/CanAquireTarget.html", ["can", "aquire", "target"], "ABuilding");
addToContainers_function("Selectable_GetGI", "", "Docs/Classes/ABuilding/Functions/Selectable_GetGI.html", ["selectable_", "get", "g", "i"], "ABuilding");
addToContainers_function("CanClassAcceptBuffsAndDebuffs", "Buffs and debuffs code", "Docs/Classes/ABuilding/Functions/CanClassAcceptBuffsAndDebuffs.html", ["can", "class", "accept", "buffs", "and", "debuffs"], "ABuilding");
addToContainers_function("GetStaticBuffArray", "", "Docs/Classes/ABuilding/Functions/GetStaticBuffArray.html", ["get", "static", "buff", "array"], "ABuilding");
addToContainers_function("GetStaticDebuffArray", "", "Docs/Classes/ABuilding/Functions/GetStaticDebuffArray.html", ["get", "static", "debuff", "array"], "ABuilding");
addToContainers_function("GetTickableBuffArray", "", "Docs/Classes/ABuilding/Functions/GetTickableBuffArray.html", ["get", "tickable", "buff", "array"], "ABuilding");
addToContainers_function("GetTickableDebuffArray", "", "Docs/Classes/ABuilding/Functions/GetTickableDebuffArray.html", ["get", "tickable", "debuff", "array"], "ABuilding");
addToContainers_function("PIE_IsForCPUPlayer", "", "Docs/Classes/ABuilding/Functions/PIE_IsForCPUPlayer.html", ["i", "e_", "is", "for", "c", "p", "u", "player"], "ABuilding");
addToContainers_function("PIE_GetHumanOwnerIndex", "", "Docs/Classes/ABuilding/Functions/PIE_GetHumanOwnerIndex.html", ["i", "e_", "get", "human", "owner", "index"], "ABuilding");
addToContainers_function("PIE_GetCPUOwnerIndex", "", "Docs/Classes/ABuilding/Functions/PIE_GetCPUOwnerIndex.html", ["i", "e_", "get", "c", "p", "u", "owner", "index"], "ABuilding");
addToContainers_function("SetupBuildingInfo", "=========================================================================================", "Docs/Classes/ABuilding/Functions/SetupBuildingInfo.html", ["setup", "building", "info"], "ABuilding");
addToContainers_function("IsOwnedByCPUPlayer", "True: CPU player owns this unit False: human player owns this unit", "Docs/Classes/ABuilding/Functions/IsOwnedByCPUPlayer.html", ["is", "owned", "by", "c", "p", "u", "player"], "ABuilding");
addToContainers_function("TakeDamage", "Overridden from AActor", "Docs/Classes/ABuilding/Functions/TakeDamage.html", ["take", "damage"], "ABuilding");
addToContainers_function("OnZeroHealthAnimFinished", "AnimNotify_OnZeroHealthAnimationFinished", "Docs/Classes/ABuilding/Functions/OnZeroHealthAnimFinished.html", ["on", "zero", "health", "anim", "finished"], "ABuilding");
addToContainers_function("RunOnZeroHealthAnimFinishedLogic", "", "Docs/Classes/ABuilding/Functions/RunOnZeroHealthAnimFinishedLogic.html", ["run", "on", "zero", "health", "anim", "finished", "logic"], "ABuilding");
addToContainers_function("OnSinkingIntoGroundComplete", "", "Docs/Classes/ABuilding/Functions/OnSinkingIntoGroundComplete.html", ["on", "sinking", "into", "ground", "complete"], "ABuilding");
addToContainers_function("HasBeenCompletelyDestroyed", "Return whether the building has been destroyed. By completely destroyed we mean that AActor::Destroy wants to be called on it, but perhaps the building is in fog of war, and we don\'t want to unhide it and reveal the fact it is gone by calling Destroy yet.", "Docs/Classes/ABuilding/Functions/HasBeenCompletelyDestroyed.html", ["has", "been", "completely", "destroyed"], "ABuilding");
addToContainers_function("ServerCleanUp", "[Server] This is a final function to be called when the building has been destroyed", "Docs/Classes/ABuilding/Functions/ServerCleanUp.html", ["server", "clean", "up"], "ABuilding");
addToContainers_function("ClientCleanUp", "[Client] This is a final function to be called when the building has been destroyed", "Docs/Classes/ABuilding/Functions/ClientCleanUp.html", ["client", "clean", "up"], "ABuilding");
addToContainers_function("TornOff", "Networking - called on client when actor is torn off", "Docs/Classes/ABuilding/Functions/TornOff.html", ["torn", "off"], "ABuilding");
addToContainers_function("DestroyBuilding", "", "Docs/Classes/ABuilding/Functions/DestroyBuilding.html", ["destroy", "building"], "ABuilding");
addToContainers_function("CallAbilityPreparationLogicAfterDelay", "Run preparation logic for ability after a delay @param CooldownAmount - the amount of time till the ability comes off cooldown, not the time till preparation anim should play", "Docs/Classes/ABuilding/Functions/CallAbilityPreparationLogicAfterD.html", ["call", "ability", "preparation", "logic", "after", "delay"], "ABuilding");
addToContainers_function("OnAbilityPreparationCooldownFinished", "Called when an ability that wants some preparation logic to run cools down enough that it can run.", "Docs/Classes/ABuilding/Functions/OnAbilityPreparationCooldownFinis.html", ["on", "ability", "preparation", "cooldown", "finished"], "ABuilding");
addToContainers_function("OnAbilityCooldownFinished", "", "Docs/Classes/ABuilding/Functions/OnAbilityCooldownFinished.html", ["on", "ability", "cooldown", "finished"], "ABuilding");
addToContainers_function("OnRep_Health", "", "Docs/Classes/ABuilding/Functions/OnRep_Health.html", ["on", "rep_", "health"], "ABuilding");
addToContainers_function("uint8", "", "Docs/Classes/ABuilding/Functions/uint8.html", [], "ABuilding");
addToContainers_function("OnZeroHealth", "", "Docs/Classes/ABuilding/Functions/OnZeroHealth.html", ["on", "zero", "health"], "ABuilding");
addToContainers_function("ServerInitiateSinkingIntoGround", "[Server] Tells starts sinking into ground locally and also tells clients to by using anim state", "Docs/Classes/ABuilding/Functions/ServerInitiateSinkingIntoGround.html", ["server", "initiate", "sinking", "into", "ground"], "ABuilding");
addToContainers_function("BeginSinkingIntoGround", "", "Docs/Classes/ABuilding/Functions/BeginSinkingIntoGround.html", ["begin", "sinking", "into", "ground"], "ABuilding");
addToContainers_function("OnProducerBuildingZeroHealth", "Called if this building is being produced using BuildsItself build method by another building but that other building reaches zero health", "Docs/Classes/ABuilding/Functions/OnProducerBuildingZeroHealth.html", ["on", "producer", "building", "zero", "health"], "ABuilding");
addToContainers_function("CalculateBoundsHeight", "", "Docs/Classes/ABuilding/Functions/CalculateBoundsHeight.html", ["calculate", "bounds", "height"], "ABuilding");
addToContainers_function("Multicast_OnBuildingAttackComponentAttackMade", "Called when an attack component makes an attack @param AttackCompID - unique ID of the component doing the attack", "Docs/Classes/ABuilding/Functions/Multicast_OnBuildingAttackCompone.html", ["multicast_", "on", "building", "attack", "component", "attack", "made"], "ABuilding");
addToContainers_function("GetBuildingAttackComp_Turret", "Get a building attack comp given a unique ID", "Docs/Classes/ABuilding/Functions/GetBuildingAttackComp_Turret.html", ["get", "building", "attack", "comp_", "turret"], "ABuilding");
addToContainers_variable("TimeToSpendSinking", "How long to spend sinking into the ground when the Destroyed animation finishes or if no destroyed anim is set then from the time it reaches zero health", "Docs/Classes/ABuilding/Variables/TimeToSpendSinking.html", ["time", "to", "spend", "sinking"], "ABuilding");
addToContainers_variable("", "Type of building this is. Each building in a faction info\'s building roster must have a unique type", "Docs/Classes/ABuilding/Variables/.html", [], "ABuilding");
addToContainers_variable("", "Bounds for selecting with mouse.", "Docs/Classes/ABuilding/Variables/_1.html", [], "ABuilding");
addToContainers_variable("", "TODO ghost building needs regular Mesh comp too", "Docs/Classes/ABuilding/Variables/_2.html", [], "ABuilding");
addToContainers_variable("", "Widget to display only when selected and visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/ABuilding/Variables/_3.html", [], "ABuilding");
addToContainers_variable("", "Widget to display all the time when unit is visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/ABuilding/Variables/_4.html", [], "ABuilding");
addToContainers_variable("", "Decal that appears under this when selected", "Docs/Classes/ABuilding/Variables/_5.html", [], "ABuilding");
addToContainers_variable("", "Particles to show when selected or right-clicked", "Docs/Classes/ABuilding/Variables/_6.html", [], "ABuilding");
addToContainers_variable("", "Location where unit spawns", "Docs/Classes/ABuilding/Variables/_7.html", [], "ABuilding");
addToContainers_variable("", "Location unit first moves to after spawning", "Docs/Classes/ABuilding/Variables/_8.html", [], "ABuilding");
addToContainers_variable("", "Location unit moves to after moving to UnitFirstMoveLoc. This can be changed by the player during a match", "Docs/Classes/ABuilding/Variables/_9.html", [], "ABuilding");
addToContainers_variable("", "Arrow component to go on UnitSpawnLoc to help better know transform. Rotation from this will also be used when spawning unit", "Docs/Classes/ABuilding/Variables/_10.html", [], "ABuilding");
addToContainers_variable("", "Sprite to better locate UnitFirstMoveLoc in editor", "Docs/Classes/ABuilding/Variables/_11.html", [], "ABuilding");
addToContainers_variable("", "Sprite to better locate UnitDefaultRallyPoint in editor", "Docs/Classes/ABuilding/Variables/_12.html", [], "ABuilding");
addToContainers_variable("BeingWorkedOnAudioComp", "", "Docs/Classes/ABuilding/Variables/BeingWorkedOnAudioComp.html", ["being", "worked", "on", "audio", "comp"], "ABuilding");
addToContainers_variable("", "BP for the ghost building that appears when choosing where to place this. It should have the exact same mesh properties but its material should be overridden with a translucent one", "Docs/Classes/ABuilding/Variables/_13.html", [], "ABuilding");
addToContainers_variable("", "Core attributes", "Docs/Classes/ABuilding/Variables/_14.html", [], "ABuilding");
addToContainers_variable("1", "This was added for clients cause OnRep_ funcs can come in before BeginPlay is called", "Docs/Classes/ABuilding/Variables/1.html", [], "ABuilding");
addToContainers_variable("1", "If true then actor will not setup and will instead have an outside source set it up. Will only be true if using PIE and unit was placed in world via editor", "Docs/Classes/ABuilding/Variables/1_1.html", [], "ABuilding");
addToContainers_variable(":", "Whether to use human player or CPU player index for PIE", "Docs/Classes/ABuilding/Variables/:.html", [], "ABuilding");
addToContainers_variable("", "For development only. When skipping main menu, this is the index of the player that will own this unit. ARTSDevelopmentSettings defines teams for each player, and is assigned in UMyGameInstance 0 = server, 1 = remote client 1, 2 = remote client 2 and so on. If the index is set higher than the number of players testing with in PIE then building will either be assigned to server player or removed from PIE completely", "Docs/Classes/ABuilding/Variables/_15.html", [], "ABuilding");
addToContainers_variable("", "Same as above but for CPU player", "Docs/Classes/ABuilding/Variables/_16.html", [], "ABuilding");
addToContainers_variable("", "Unique ID for issuing commands efficiently over the wire. If raw pointers are more bandwidth friendly then this variable should be removed", "Docs/Classes/ABuilding/Variables/_17.html", [], "ABuilding");
addToContainers_variable("", "Whether this building was spawned as a starting selectable or not. Important because if it was then clients need to know to construct it instantly. Also an extra copy of this variable is defined in FSelectableAttributes", "Docs/Classes/ABuilding/Variables/_18.html", [], "ABuilding");
addToContainers_variable("", "Struct that hols enough information to derive how far along construction is", "Docs/Classes/ABuilding/Variables/_19.html", [], "ABuilding");
addToContainers_variable("", "The custom RTS game tick count on the server when this unit was created.", "Docs/Classes/ABuilding/Variables/_20.html", [], "ABuilding");
addToContainers_variable("bHasRunOnConstructionCompleteLogic", "[Client] If true then Client_OnConstructionComplete has run. Basically this exists because 2+ OnRep variables can rep through on same frame", "Docs/Classes/ABuilding/Variables/bHasRunOnConstructionCompleteLogi.html", ["has", "run", "on", "construction", "complete", "logic"], "ABuilding");
addToContainers_variable("", "Animation state of building", "Docs/Classes/ABuilding/Variables/_21.html", [], "ABuilding");
addToContainers_variable("PausedAnimInfo", "Holds info about what/when animation was paused", "Docs/Classes/ABuilding/Variables/PausedAnimInfo.html", ["paused", "anim", "info"], "ABuilding");
addToContainers_variable("", "Location of rally point", "Docs/Classes/ABuilding/Variables/_22.html", [], "ABuilding");
addToContainers_variable("", "", "Docs/Classes/ABuilding/Variables/_23.html", [], "ABuilding");
addToContainers_variable("TimeIntoZeroHealthAnimThatAnimNotifyIs", "", "Docs/Classes/ABuilding/Variables/TimeIntoZeroHealthAnimThatAnimNot.html", ["time", "into", "zero", "health", "anim", "that", "anim", "notify", "is"], "ABuilding");
addToContainers_variable("HealthWhileUnderConstruction", "Because while being built health will change rapidly we do not want a ton of updates being sent to clients. Therefore this health value will be used as the buildings health while being built. Whenever damage is taken while being built the var Health will be updated. From there clients can work out how much health the building has and continue updating health on its own while it is being built", "Docs/Classes/ABuilding/Variables/HealthWhileUnderConstruction.html", ["health", "while", "under", "construction"], "ABuilding");
addToContainers_variable("DamageTakenWhileUnderConstruction", "Because of the nature of tick, need this so buildings health is not slightly off when it has finished construction", "Docs/Classes/ABuilding/Variables/DamageTakenWhileUnderConstruction.html", ["damage", "taken", "while", "under", "construction"], "ABuilding");
addToContainers_variable("", "Reference to the player state of the player that controls this", "Docs/Classes/ABuilding/Variables/_24.html", [], "ABuilding");
addToContainers_variable("", "Reference to faction info of player state", "Docs/Classes/ABuilding/Variables/_25.html", [], "ABuilding");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ABuilding/Variables/_26.html", [], "ABuilding");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ABuilding/Variables/_27.html", [], "ABuilding");
addToContainers_variable("", "Reference to local player controller. This is here for the defense structures", "Docs/Classes/ABuilding/Variables/_28.html", [], "ABuilding");
addToContainers_variable("", "Maps button to its timer handle that handles its cooldown", "Docs/Classes/ABuilding/Variables/_29.html", [], "ABuilding");
addToContainers_variable("", "Set of workers working on this building, constructing it. Unsure if multiple builders will work", "Docs/Classes/ABuilding/Variables/_30.html", [], "ABuilding");
addToContainers_variable("HealthGainRate", "Only relevant while being built. Equal to MaxHealth * (1 - PC->GetBuildingStartHealthPercentage()). Used each tick while being built to determine how much health to gain", "Docs/Classes/ABuilding/Variables/HealthGainRate.html", ["health", "gain", "rate"], "ABuilding");
addToContainers_variable("SpawnLocation", "Location when construction was started. Only relevant if not a starting selectable. Needed to know ending location when construction is complete", "Docs/Classes/ABuilding/Variables/SpawnLocation.html", ["spawn", "location"], "ABuilding");
addToContainers_variable("", "The component that plays the \'progressing construction\' particles. Spawned by Statics::SpawnFogParticles", "Docs/Classes/ABuilding/Variables/_31.html", [], "ABuilding");
addToContainers_variable("bIsBeingBuiltParticlesRunning", "This bool is to know whether BeingBuiltParticleComponent is playing or not. I can\'t seem to find one in UParticleSystemComponent so I\'ll use this", "Docs/Classes/ABuilding/Variables/bIsBeingBuiltParticlesRunning.html", ["is", "being", "built", "particles", "running"], "ABuilding");
addToContainers_variable("bRiseFromGround", "If true, while construction is progressing the building will rise from the ground. This will be set true if no construction animation is set", "Docs/Classes/ABuilding/Variables/bRiseFromGround.html", ["rise", "from", "ground"], "ABuilding");
addToContainers_variable("TimeSpentBuilding", "How long this has been building for", "Docs/Classes/ABuilding/Variables/TimeSpentBuilding.html", ["time", "spent", "building"], "ABuilding");
addToContainers_variable("Building2)", "For sorting buildings in arrays", "Docs/Classes/ABuilding/Variables/Building2).html", [], "ABuilding");
addToContainers_variable("1", "Whether the Destroyed anim has finished. If there is no Destroyed anim then this will be false. Could possibly do away with this variable and figure it out some other way", "Docs/Classes/ABuilding/Variables/1_2.html", [], "ABuilding");
addToContainers_variable("1", "Whether CleanUp() has run or not", "Docs/Classes/ABuilding/Variables/1_3.html", [], "ABuilding");
addToContainers_variable("1", "True if the building is sinking into the ground. Can happen when the building reaches zero health", "Docs/Classes/ABuilding/Variables/1_4.html", [], "ABuilding");
addToContainers_variable("1", "True if the building is sinking into ground and the local player can see it happening", "Docs/Classes/ABuilding/Variables/1_5.html", [], "ABuilding");
addToContainers_variable("1", "Whether the local player has seen the building at least once", "Docs/Classes/ABuilding/Variables/1_6.html", [], "ABuilding");
addToContainers_variable("1", "Whether the local player has seen the building in a state that implies it has reached zero health", "Docs/Classes/ABuilding/Variables/1_7.html", [], "ABuilding");
addToContainers_variable("TimeSpentSinking", "How long we have spent sinking into the ground", "Docs/Classes/ABuilding/Variables/TimeSpentSinking.html", ["time", "spent", "sinking"], "ABuilding");
addToContainers_variable("TimerHandle_Destroy", "", "Docs/Classes/ABuilding/Variables/TimerHandle_Destroy.html", ["timer", "handle_", "destroy"], "ABuilding");
addToContainers_variable("BoundsHeight", "Height of bounds. Used when raising building during construction", "Docs/Classes/ABuilding/Variables/BoundsHeight.html", ["bounds", "height"], "ABuilding");
addToContainers_variable("", "The locations that fog manager will check when deciding if this building is visible or not. This array is populated on post edit and needs to have world location and rotation taken into account when spawned during a match", "Docs/Classes/ABuilding/Variables/_32.html", [], "ABuilding");
addToContainers_variable("", "", "Docs/Classes/ABuilding/Variables/_33.html", [], "ABuilding");
addToContainers_variable("", "", "Docs/Classes/ABuilding/Variables/_34.html", [], "ABuilding");
addToContainers_class("AGhostBuilding", "Ghost buildings are the buildings spawned when trying to select a location to build a building. They are only visible to the owning player.", "Docs/Classes/AGhostBuilding/AGhostBuilding.html", ["ghost", "building"], "");
addToContainers_function("AGhostBuilding", "Sets default values for this actor\'s properties", "Docs/Classes/AGhostBuilding/Functions/AGhostBuilding.html", ["ghost", "building"], "AGhostBuilding");
addToContainers_function("BeginPlay", "Called when the game starts or when spawned", "Docs/Classes/AGhostBuilding/Functions/BeginPlay.html", ["begin", "play"], "AGhostBuilding");
addToContainers_function("SetRotationToDefault", "Reset actor rotation to whatever is considered the default", "Docs/Classes/AGhostBuilding/Functions/SetRotationToDefault.html", ["set", "rotation", "to", "default"], "AGhostBuilding");
addToContainers_function("FellOutOfWorld", "Here to prevent destroy", "Docs/Classes/AGhostBuilding/Functions/FellOutOfWorld.html", ["fell", "out", "of", "world"], "AGhostBuilding");
addToContainers_function("SetInitialValues", "", "Docs/Classes/AGhostBuilding/Functions/SetInitialValues.html", ["set", "initial", "values"], "AGhostBuilding");
addToContainers_function("SetDefaultRotation", "Set what is considered the default rotation i.e. the rotation the ghost should have if player has not tried to rotate it", "Docs/Classes/AGhostBuilding/Functions/SetDefaultRotation.html", ["set", "default", "rotation"], "AGhostBuilding");
addToContainers_function("OnEnterPool", "Called when this enters the object pool", "Docs/Classes/AGhostBuilding/Functions/OnEnterPool.html", ["on", "enter", "pool"], "AGhostBuilding");
addToContainers_function("OnExitPool", "Called when this object leaves the pool @param InBuildingType - the type of the building this ghost is being used for", "Docs/Classes/AGhostBuilding/Functions/OnExitPool.html", ["on", "exit", "pool"], "AGhostBuilding");
addToContainers_function("TrySetAppearanceForBuildLocation", "Function to set appearance based on whether at a suitable build location or not @param bIsBuildableLocation -whether the location is buildable or not", "Docs/Classes/AGhostBuilding/Functions/TrySetAppearanceForBuildLocation.html", ["try", "set", "appearance", "for", "build", "location"], "AGhostBuilding");
addToContainers_function("SetRotationUsingOffset", "Set the rotation of ghost given a yaw value", "Docs/Classes/AGhostBuilding/Functions/SetRotationUsingOffset.html", ["set", "rotation", "using", "offset"], "AGhostBuilding");
addToContainers_function("GetType", "Getters and setters", "Docs/Classes/AGhostBuilding/Functions/GetType.html", ["get", "type"], "AGhostBuilding");
addToContainers_function("GetBoxComponent", "", "Docs/Classes/AGhostBuilding/Functions/GetBoxComponent.html", ["get", "box", "component"], "AGhostBuilding");
addToContainers_function("GetMesh", "", "Docs/Classes/AGhostBuilding/Functions/GetMesh.html", ["get", "mesh"], "AGhostBuilding");
addToContainers_variable("", "Used only to get correct positioning of mesh component", "Docs/Classes/AGhostBuilding/Variables/.html", [], "AGhostBuilding");
addToContainers_variable("", "Mesh", "Docs/Classes/AGhostBuilding/Variables/_1.html", [], "AGhostBuilding");
addToContainers_variable("", "A static mesh that will be assigned a default engine shape to make default ghost as good as possible for \'works out of the box\' functionality. If user sets a skeletal mesh then this will be made invisible", "Docs/Classes/AGhostBuilding/Variables/_2.html", [], "AGhostBuilding");
addToContainers_variable("Type", "Type of building this is for. For a long time this was an editor exposed variable but is now set automatically", "Docs/Classes/AGhostBuilding/Variables/Type.html", [], "AGhostBuilding");
addToContainers_variable("bIsAtBuildableLocation", "Whether current location is a buildable location or not", "Docs/Classes/AGhostBuilding/Variables/bIsAtBuildableLocation.html", ["is", "at", "buildable", "location"], "AGhostBuilding");
addToContainers_variable("", "Whether to override the param name specified in game instance", "Docs/Classes/AGhostBuilding/Variables/_3.html", [], "AGhostBuilding");
addToContainers_variable("", "Optional override of name in game instance. The name of the vector param on each of the mesh\'s materials to modify when the ghost is in a suitable/non-suitable build location e.g. in C&C generals the building will change to a red color when not in a suitable build location", "Docs/Classes/AGhostBuilding/Variables/_4.html", [], "AGhostBuilding");
addToContainers_variable("", "Whether to override the value set in game instance to set bad location param to when in a non-suitable build location", "Docs/Classes/AGhostBuilding/Variables/_5.html", [], "AGhostBuilding");
addToContainers_variable("", "Optional override of value set in game instance Value to set param to", "Docs/Classes/AGhostBuilding/Variables/_6.html", [], "AGhostBuilding");
addToContainers_variable("", "Will hold all the mesh\'s materials as dynamic material instances. We will modify these based on whether the ghost is at a suitable build location or not", "Docs/Classes/AGhostBuilding/Variables/_7.html", [], "AGhostBuilding");
addToContainers_variable("", "Original values of the bad location param saved so it can be restored to it\'s original value during gameplay", "Docs/Classes/AGhostBuilding/Variables/_8.html", [], "AGhostBuilding");
addToContainers_variable("PlayersDefaultYawRot", "The default camera yaw rotation of the player so ghost knows what is considered the default rotation", "Docs/Classes/AGhostBuilding/Variables/PlayersDefaultYawRot.html", ["players", "default", "yaw", "rot"], "AGhostBuilding");
addToContainers_struct("FInfantryGarrisonStatus", "Contains all the informantion required to know whether the infantry is garrisoned inside something and if so then what it is garrisoned inside of.", "Docs/Structs/FInfantryGarrisonStatus/FInfantryGarrisonStatus.html", ["infantry", "garrison", "status"], "");
addToContainers_function("FInfantryGarrisonStatus", "Ctor that should se the values such that the infantry is not inside any garrison", "Docs/Structs/FInfantryGarrisonStatus/Functions/FInfantryGarrisonStatus.html", ["infantry", "garrison", "status"], "FInfantryGarrisonStatus");
addToContainers_function("SetEnteredSelectable", "Set what selectable this unit is garrisoned inside of @param EnteredSelectable - selectable this infantry is now garrisoned insdie of", "Docs/Structs/FInfantryGarrisonStatus/Functions/SetEnteredSelectable.html", ["set", "entered", "selectable"], "FInfantryGarrisonStatus");
addToContainers_function("ClearEnteredSelectable", "Signals unit is not inside a building", "Docs/Structs/FInfantryGarrisonStatus/Functions/ClearEnteredSelectable.html", ["clear", "entered", "selectable"], "FInfantryGarrisonStatus");
addToContainers_function("IsInsideGarrison", "Returns true if the unit is inside of a garrison", "Docs/Structs/FInfantryGarrisonStatus/Functions/IsInsideGarrison.html", ["is", "inside", "garrison"], "FInfantryGarrisonStatus");
addToContainers_function("Elem_2)", "", "Docs/Structs/FInfantryGarrisonStatus/Functions/Elem_2).html", [], "FInfantryGarrisonStatus");
addToContainers_function("Elem_2)", "", "Docs/Structs/FInfantryGarrisonStatus/Functions/Elem_2)_1.html", [], "FInfantryGarrisonStatus");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Structs/FInfantryGarrisonStatus/Variables/.html", [], "FInfantryGarrisonStatus");
addToContainers_variable("", "Selectable ID of what this unit is garrisoned inside of", "Docs/Structs/FInfantryGarrisonStatus/Variables/_1.html", [], "FInfantryGarrisonStatus");
addToContainers_class("AInfantry", "Infantry class. Infantry use the UE4 character class as a base. Editing the capsule\'s bGeneratedOverlapEvents in editor will not work - it is always overriden in post edit.", "Docs/Classes/AInfantry/AInfantry.html", [], "");
addToContainers_function("AInfantry", "", "Docs/Classes/AInfantry/Functions/AInfantry.html", [], "AInfantry");
addToContainers_function("PostLoad", "Called when map is loaded and this is a part of it. Used for testing only", "Docs/Classes/AInfantry/Functions/PostLoad.html", ["post", "load"], "AInfantry");
addToContainers_function("PostInitializeComponents", "", "Docs/Classes/AInfantry/Functions/PostInitializeComponents.html", ["post", "initialize", "components"], "AInfantry");
addToContainers_function("BeginPlay", "Called when the game starts or when spawned", "Docs/Classes/AInfantry/Functions/BeginPlay.html", ["begin", "play"], "AInfantry");
addToContainers_function("OnRep_ID", "", "Docs/Classes/AInfantry/Functions/OnRep_ID.html", ["on", "rep_", "i", "d"], "AInfantry");
addToContainers_function("OnRep_CreationMethod", "", "Docs/Classes/AInfantry/Functions/OnRep_CreationMethod.html", ["on", "rep_", "creation", "method"], "AInfantry");
addToContainers_function("OnRep_GameTickCountOnCreation", "", "Docs/Classes/AInfantry/Functions/OnRep_GameTickCountOnCreation.html", ["on", "rep_", "game", "tick", "count", "on", "creation"], "AInfantry");
addToContainers_function("OnRep_Owner", "Use this function to setup a lot of selection info", "Docs/Classes/AInfantry/Functions/OnRep_Owner.html", ["on", "rep_", "owner"], "AInfantry");
addToContainers_function("Setup", "Setup a whole bunch of stuff once owner is known", "Docs/Classes/AInfantry/Functions/Setup.html", [], "AInfantry");
addToContainers_function("Tick", "~ End ISelectable Interface", "Docs/Classes/AInfantry/Functions/Tick.html", [], "AInfantry");
addToContainers_function("SetupSelectionInfo", "", "Docs/Classes/AInfantry/Functions/SetupSelectionInfo.html", ["setup", "selection", "info"], "AInfantry");
addToContainers_function("PossessedBy", "Called when possessed", "Docs/Classes/AInfantry/Functions/PossessedBy.html", ["possessed", "by"], "AInfantry");
addToContainers_function("PreReplication", "", "Docs/Classes/AInfantry/Functions/PreReplication.html", ["pre", "replication"], "AInfantry");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/AInfantry/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "AInfantry");
addToContainers_function("InitContextCooldowns", "Fill ContextCooldowns with default constructed timer handles. So far this is for the HUD. An alternative method if to call call a function which gets the cooldown and adds timer handle to TMap if it is not already there", "Docs/Classes/AInfantry/Functions/InitContextCooldowns.html", ["init", "context", "cooldowns"], "AInfantry");
addToContainers_function("OnCooldownFinished", "Called by context action cooldown timer handles when they complete", "Docs/Classes/AInfantry/Functions/OnCooldownFinished.html", ["on", "cooldown", "finished"], "AInfantry");
addToContainers_function("ShowSelectionDecal", "Show the selection decal under this", "Docs/Classes/AInfantry/Functions/ShowSelectionDecal.html", ["show", "selection", "decal"], "AInfantry");
addToContainers_function("HideSelectionDecal", "Hide selection decal under this", "Docs/Classes/AInfantry/Functions/HideSelectionDecal.html", ["hide", "selection", "decal"], "AInfantry");
addToContainers_function("ShowHoverDecal", "Show a reduced alpha version of the selection decal", "Docs/Classes/AInfantry/Functions/ShowHoverDecal.html", ["show", "hover", "decal"], "AInfantry");
addToContainers_function("PutAbilitiesOnInitialCooldown", "", "Docs/Classes/AInfantry/Functions/PutAbilitiesOnInitialCooldown.html", ["put", "abilities", "on", "initial", "cooldown"], "AInfantry");
addToContainers_function("SetupSelectionDecal", "", "Docs/Classes/AInfantry/Functions/SetupSelectionDecal.html", ["setup", "selection", "decal"], "AInfantry");
addToContainers_function("SetColorOnMaterials", "Set what color this unit should be", "Docs/Classes/AInfantry/Functions/SetColorOnMaterials.html", ["set", "color", "on", "materials"], "AInfantry");
addToContainers_function("OnRep_AnimationState", "", "Docs/Classes/AInfantry/Functions/OnRep_AnimationState.html", ["on", "rep_", "animation", "state"], "AInfantry");
addToContainers_function("OnRep_bInStealthMode", "", "Docs/Classes/AInfantry/Functions/OnRep_bInStealthMode.html", ["on", "rep_b", "in", "stealth", "mode"], "AInfantry");
addToContainers_function("OnRep_GarrisonStatus", "", "Docs/Classes/AInfantry/Functions/OnRep_GarrisonStatus.html", ["on", "rep_", "garrison", "status"], "AInfantry");
addToContainers_function("OnRep_HeldResourceType", "", "Docs/Classes/AInfantry/Functions/OnRep_HeldResourceType.html", ["on", "rep_", "held", "resource", "type"], "AInfantry");
addToContainers_function("OnRep_ExperienceTowardsNextRank", "", "Docs/Classes/AInfantry/Functions/OnRep_ExperienceTowardsNextRank.html", ["on", "rep_", "experience", "towards", "next", "rank"], "AInfantry");
addToContainers_function("ApplyLevelUpBonuses", "Apply bonuses from leveling up", "Docs/Classes/AInfantry/Functions/ApplyLevelUpBonuses.html", ["apply", "level", "up", "bonuses"], "AInfantry");
addToContainers_function("PlayLevelUpParticles", "Play level up particles if any @param RankInfo - info for the level we want to show particles for", "Docs/Classes/AInfantry/Functions/PlayLevelUpParticles.html", ["play", "level", "up", "particles"], "AInfantry");
addToContainers_function("PlayLevelUpSound", "Play sound for leveling up @param RankInfo - info for the level we want to play sound for", "Docs/Classes/AInfantry/Functions/PlayLevelUpSound.html", ["play", "level", "up", "sound"], "AInfantry");
addToContainers_function("EnterStealthMode", "Called by timer handle server-side", "Docs/Classes/AInfantry/Functions/EnterStealthMode.html", ["enter", "stealth", "mode"], "AInfantry");
addToContainers_function("SetUnitInitialVisibility", "Set visibility when first spawned", "Docs/Classes/AInfantry/Functions/SetUnitInitialVisibility.html", ["set", "unit", "initial", "visibility"], "AInfantry");
addToContainers_function("SetUnitVisibility", "", "Docs/Classes/AInfantry/Functions/SetUnitVisibility.html", ["set", "unit", "visibility"], "AInfantry");
addToContainers_function("SetUnitCollisionEnabled", "", "Docs/Classes/AInfantry/Functions/SetUnitCollisionEnabled.html", ["set", "unit", "collision", "enabled"], "AInfantry");
addToContainers_function("OnEnterFogOfWar", "Called when entering/exiting fog of war", "Docs/Classes/AInfantry/Functions/OnEnterFogOfWar.html", ["on", "enter", "fog", "of", "war"], "AInfantry");
addToContainers_function("OnExitFogOfWar", "", "Docs/Classes/AInfantry/Functions/OnExitFogOfWar.html", ["on", "exit", "fog", "of", "war"], "AInfantry");
addToContainers_function("AssignController", "GetController() returns null in BeginPlay with networking", "Docs/Classes/AInfantry/Functions/AssignController.html", ["assign", "controller"], "AInfantry");
addToContainers_function("InitStealthingVariables", "", "Docs/Classes/AInfantry/Functions/InitStealthingVariables.html", ["init", "stealthing", "variables"], "AInfantry");
addToContainers_function("SetupWeaponAttachment", "", "Docs/Classes/AInfantry/Functions/SetupWeaponAttachment.html", ["setup", "weapon", "attachment"], "AInfantry");
addToContainers_function("SetupWidgetComponents", "Setup references if there widgets are used", "Docs/Classes/AInfantry/Functions/SetupWidgetComponents.html", ["setup", "widget", "components"], "AInfantry");
addToContainers_function("OnInventoryItemUseCooldownFinished", "UFUNCTION because we call this from a timer handle using an FName ", "Docs/Classes/AInfantry/Functions/OnInventoryItemUseCooldownFinishe.html", ["on", "inventory", "item", "use", "cooldown", "finished"], "AInfantry");
addToContainers_function("GetNumWeaponMeshMaterials", "", "Docs/Classes/AInfantry/Functions/GetNumWeaponMeshMaterials.html", ["get", "num", "weapon", "mesh", "materials"], "AInfantry");
addToContainers_function("ServerEnterBuildingGarrison", "[Server] Enter a building\'s garrison. Assumes all checks whether the unit can enter have already been made. @param Building - building to enter @param GarrisonAttributes - Building\'s garrison attributes for convenience", "Docs/Classes/AInfantry/Functions/ServerEnterBuildingGarrison.html", ["server", "enter", "building", "garrison"], "AInfantry");
addToContainers_function("GetActorLocationForGarrison", "Return the location we should set for the unit when it enters a garrison", "Docs/Classes/AInfantry/Functions/GetActorLocationForGarrison.html", ["get", "actor", "location", "for", "garrison"], "AInfantry");
addToContainers_function("ServerEvacuateGarrison", "Leave a garrison @param EvacLocation - location of this unit upon evac @param EvacRotation - rotation of this unit upon evac", "Docs/Classes/AInfantry/Functions/ServerEvacuateGarrison.html", ["server", "evacuate", "garrison"], "AInfantry");
addToContainers_function("Delay)", "Call function with no return after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/AInfantry/Functions/Delay).html", [], "AInfantry");
addToContainers_function("Delay)", "Version that will create a timer handle", "Docs/Classes/AInfantry/Functions/Delay)_1.html", [], "AInfantry");
addToContainers_function("InitAnimationsForConstructor", "Fill Animations with structs: one for each animation type. This helps the user fill in the array by not having to select one of each type and try and keep track of what types need to be done", "Docs/Classes/AInfantry/Functions/InitAnimationsForConstructor.html", ["init", "animations", "for", "constructor"], "AInfantry");
addToContainers_function("InitMovementDefaults", "Makes turing smoother and can be adjusted with movement component\'s rotation rate. Also sets up avoidance for units running into each other", "Docs/Classes/AInfantry/Functions/InitMovementDefaults.html", ["init", "movement", "defaults"], "AInfantry");
addToContainers_function("PostEditChangeChainProperty", "To change visibility of context button variables on changes in editor", "Docs/Classes/AInfantry/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AInfantry");
addToContainers_function("SetDamageValues", "Set what our initial damage values are by querying faction info\'s struct about us. This function was added to accomidate allowing damage values on to be defined either on this or on projectiles", "Docs/Classes/AInfantry/Functions/SetDamageValues.html", ["set", "damage", "values"], "AInfantry");
addToContainers_function("AdjustForUpgrades", "Adjust stats/appearance for upgrades on spawn", "Docs/Classes/AInfantry/Functions/AdjustForUpgrades.html", ["adjust", "for", "upgrades"], "AInfantry");
addToContainers_function("GetType", "Use GetAttributesBase().GetUnitType() in non-editor builds", "Docs/Classes/AInfantry/Functions/GetType.html", ["get", "type"], "AInfantry");
addToContainers_function("IsStartingSelectable", "#endif", "Docs/Classes/AInfantry/Functions/IsStartingSelectable.html", ["is", "starting", "selectable"], "AInfantry");
addToContainers_function("CheckAnimationProperties", "", "Docs/Classes/AInfantry/Functions/CheckAnimationProperties.html", ["check", "animation", "properties"], "AInfantry");
addToContainers_function("IsAnimationAssigned", "Check if an animation has been set in editor", "Docs/Classes/AInfantry/Functions/IsAnimationAssigned.html", ["is", "animation", "assigned"], "AInfantry");
addToContainers_function("VerifyAllAnimNotifiesArePresentOnMontage", "Verify that all the anim notifies required for the game to function for a particular animation montage are present on it. @param OutErrorMessage - message that says which anim notifies are missing @return - true if all anim notifies are present", "Docs/Classes/AInfantry/Functions/VerifyAllAnimNotifiesArePresentOn.html", ["verify", "all", "anim", "notifies", "are", "present", "on", "montage"], "AInfantry");
addToContainers_function("PlayAnimation", "Play a random animation montage for the type @param AnimType - the type of animation you want to play @param bAllowReplaySameType - play the same montage again from the start even if it is already playing?", "Docs/Classes/AInfantry/Functions/PlayAnimation.html", ["play", "animation"], "AInfantry");
addToContainers_function("GetAnimPlayRate", "Get the rate an animation should play at", "Docs/Classes/AInfantry/Functions/GetAnimPlayRate.html", ["get", "anim", "play", "rate"], "AInfantry");
addToContainers_function("GetHealthPercentage", "Return health percentage between 0.f and 1.f", "Docs/Classes/AInfantry/Functions/GetHealthPercentage.html", ["get", "health", "percentage"], "AInfantry");
addToContainers_function("IsInsideGarrison", "", "Docs/Classes/AInfantry/Functions/IsInsideGarrison.html", ["is", "inside", "garrison"], "AInfantry");
addToContainers_function("GetBounds", "~ Begin ISelectable interface", "Docs/Classes/AInfantry/Functions/GetBounds.html", ["get", "bounds"], "AInfantry");
addToContainers_function("GetRootComponent2DCollisionInfo", "", "Docs/Classes/AInfantry/Functions/GetRootComponent2DCollisionInfo.html", ["get", "root", "component2", "d", "collision", "info"], "AInfantry");
addToContainers_function("OnRightClickCommand", "", "Docs/Classes/AInfantry/Functions/OnRightClickCommand.html", ["on", "right", "click", "command"], "AInfantry");
addToContainers_function("OnRightClickCommand", "", "Docs/Classes/AInfantry/Functions/OnRightClickCommand_1.html", ["on", "right", "click", "command"], "AInfantry");
addToContainers_function("IssueCommand_MoveTo", "", "Docs/Classes/AInfantry/Functions/IssueCommand_MoveTo.html", ["issue", "command_", "move", "to"], "AInfantry");
addToContainers_function("IssueCommand_PickUpItem", "", "Docs/Classes/AInfantry/Functions/IssueCommand_PickUpItem.html", ["issue", "command_", "pick", "up", "item"], "AInfantry");
addToContainers_function("IssueCommand_RightClickOnResourceSpot", "", "Docs/Classes/AInfantry/Functions/IssueCommand_RightClickOnResource.html", ["issue", "command_", "right", "click", "on", "resource", "spot"], "AInfantry");
addToContainers_function("OnSingleSelect", "", "Docs/Classes/AInfantry/Functions/OnSingleSelect.html", ["on", "single", "select"], "AInfantry");
addToContainers_function("OnMarqueeSelect", "", "Docs/Classes/AInfantry/Functions/OnMarqueeSelect.html", ["on", "marquee", "select"], "AInfantry");
addToContainers_function("OnCtrlGroupSelect", "", "Docs/Classes/AInfantry/Functions/OnCtrlGroupSelect.html", ["on", "ctrl", "group", "select"], "AInfantry");
addToContainers_function("OnDeselect", "", "Docs/Classes/AInfantry/Functions/OnDeselect.html", ["on", "deselect"], "AInfantry");
addToContainers_function("GetSelectableID", "", "Docs/Classes/AInfantry/Functions/GetSelectableID.html", ["get", "selectable", "i", "d"], "AInfantry");
addToContainers_function("Security_CanBeClickedOn", "", "Docs/Classes/AInfantry/Functions/Security_CanBeClickedOn.html", ["security_", "can", "be", "clicked", "on"], "AInfantry");
addToContainers_function("OnRightClick", "", "Docs/Classes/AInfantry/Functions/OnRightClick.html", ["on", "right", "click"], "AInfantry");
addToContainers_function("OnMouseHover", "", "Docs/Classes/AInfantry/Functions/OnMouseHover.html", ["on", "mouse", "hover"], "AInfantry");
addToContainers_function("OnMouseUnhover", "", "Docs/Classes/AInfantry/Functions/OnMouseUnhover.html", ["on", "mouse", "unhover"], "AInfantry");
addToContainers_function("OnEnterMarqueeBox", "", "Docs/Classes/AInfantry/Functions/OnEnterMarqueeBox.html", ["on", "enter", "marquee", "box"], "AInfantry");
addToContainers_function("OnExitMarqueeBox", "", "Docs/Classes/AInfantry/Functions/OnExitMarqueeBox.html", ["on", "exit", "marquee", "box"], "AInfantry");
addToContainers_function("GetTeam", "", "Docs/Classes/AInfantry/Functions/GetTeam.html", ["get", "team"], "AInfantry");
addToContainers_function("GetTeamIndex", "", "Docs/Classes/AInfantry/Functions/GetTeamIndex.html", ["get", "team", "index"], "AInfantry");
addToContainers_function("GetContextMenu", "", "Docs/Classes/AInfantry/Functions/GetContextMenu.html", ["get", "context", "menu"], "AInfantry");
addToContainers_function("GetInfo", "", "Docs/Classes/AInfantry/Functions/GetInfo.html", ["get", "info"], "AInfantry");
addToContainers_function("OnLayFoundationCommand", "", "Docs/Classes/AInfantry/Functions/OnLayFoundationCommand.html", ["on", "lay", "foundation", "command"], "AInfantry");
addToContainers_function("OnContextCommand", "For two-click context commands", "Docs/Classes/AInfantry/Functions/OnContextCommand.html", ["on", "context", "command"], "AInfantry");
addToContainers_function("OnContextCommand", "", "Docs/Classes/AInfantry/Functions/OnContextCommand_1.html", ["on", "context", "command"], "AInfantry");
addToContainers_function("OnContextCommand", "For instant context commands", "Docs/Classes/AInfantry/Functions/OnContextCommand_2.html", ["on", "context", "command"], "AInfantry");
addToContainers_function("IssueCommand_UseInventoryItem", "", "Docs/Classes/AInfantry/Functions/IssueCommand_UseInventoryItem.html", ["issue", "command_", "use", "inventory", "item"], "AInfantry");
addToContainers_function("IssueCommand_UseInventoryItem", "", "Docs/Classes/AInfantry/Functions/IssueCommand_UseInventoryItem_1.html", ["issue", "command_", "use", "inventory", "item"], "AInfantry");
addToContainers_function("IssueCommand_UseInventoryItem", "", "Docs/Classes/AInfantry/Functions/IssueCommand_UseInventoryItem_2.html", ["issue", "command_", "use", "inventory", "item"], "AInfantry");
addToContainers_function("IssueCommand_SpecialBuildingTargetingAbility", "", "Docs/Classes/AInfantry/Functions/IssueCommand_SpecialBuildingTarge.html", ["issue", "command_", "special", "building", "targeting", "ability"], "AInfantry");
addToContainers_function("IssueCommand_EnterGarrison", "", "Docs/Classes/AInfantry/Functions/IssueCommand_EnterGarrison.html", ["issue", "command_", "enter", "garrison"], "AInfantry");
addToContainers_function("OnContextMenuPlaceBuildingResult", "", "Docs/Classes/AInfantry/Functions/OnContextMenuPlaceBuildingResult.html", ["on", "context", "menu", "place", "building", "result"], "AInfantry");
addToContainers_function("OnWorkedOnBuildingConstructionComplete", "", "Docs/Classes/AInfantry/Functions/OnWorkedOnBuildingConstructionCom.html", ["on", "worked", "on", "building", "construction", "complete"], "AInfantry");
addToContainers_function("GetBoundsLength", "", "Docs/Classes/AInfantry/Functions/GetBoundsLength.html", ["get", "bounds", "length"], "AInfantry");
addToContainers_function("GetSightRadius", "", "Docs/Classes/AInfantry/Functions/GetSightRadius.html", ["get", "sight", "radius"], "AInfantry");
addToContainers_function("OnUpgradeComplete", "", "Docs/Classes/AInfantry/Functions/OnUpgradeComplete.html", ["on", "upgrade", "complete"], "AInfantry");
addToContainers_function("OnEnemyDestroyed", "", "Docs/Classes/AInfantry/Functions/OnEnemyDestroyed.html", ["on", "enemy", "destroyed"], "AInfantry");
addToContainers_function("Client_OnLevelGained", "", "Docs/Classes/AInfantry/Functions/Client_OnLevelGained.html", ["client_", "on", "level", "gained"], "AInfantry");
addToContainers_function("GetVisionInfo", "", "Docs/Classes/AInfantry/Functions/GetVisionInfo.html", ["get", "vision", "info"], "AInfantry");
addToContainers_function("UpdateFogStatus", "", "Docs/Classes/AInfantry/Functions/UpdateFogStatus.html", ["update", "fog", "status"], "AInfantry");
addToContainers_function("IsInStealthMode", "", "Docs/Classes/AInfantry/Functions/IsInStealthMode.html", ["is", "in", "stealth", "mode"], "AInfantry");
addToContainers_function("GetProjectileBP", "", "Docs/Classes/AInfantry/Functions/GetProjectileBP.html", ["get", "projectile", "b", "p"], "AInfantry");
addToContainers_function("SetupBuildInfo", "", "Docs/Classes/AInfantry/Functions/SetupBuildInfo.html", ["setup", "build", "info"], "AInfantry");
addToContainers_function("GetHealth", "", "Docs/Classes/AInfantry/Functions/GetHealth.html", ["get", "health"], "AInfantry");
addToContainers_function("GetBodyLocationInfo", "", "Docs/Classes/AInfantry/Functions/GetBodyLocationInfo.html", ["get", "body", "location", "info"], "AInfantry");
addToContainers_function("SetOnSpawnValues", "", "Docs/Classes/AInfantry/Functions/SetOnSpawnValues.html", ["set", "on", "spawn", "values"], "AInfantry");
addToContainers_function("SetSelectableIDAndGameTickCount", "", "Docs/Classes/AInfantry/Functions/SetSelectableIDAndGameTickCount.html", ["set", "selectable", "i", "d", "and", "game", "tick", "count"], "AInfantry");
addToContainers_function("CanClassGainExperience", "", "Docs/Classes/AInfantry/Functions/CanClassGainExperience.html", ["can", "class", "gain", "experience"], "AInfantry");
addToContainers_function("GetCurrentRankExperience", "", "Docs/Classes/AInfantry/Functions/GetCurrentRankExperience.html", ["get", "current", "rank", "experience"], "AInfantry");
addToContainers_function("GetTotalExperienceRequiredForNextLevel", "", "Docs/Classes/AInfantry/Functions/GetTotalExperienceRequiredForNext.html", ["get", "total", "experience", "required", "for", "next", "level"], "AInfantry");
addToContainers_function("GetTotalExperienceRequiredForLevel", "", "Docs/Classes/AInfantry/Functions/GetTotalExperienceRequiredForLeve.html", ["get", "total", "experience", "required", "for", "level"], "AInfantry");
addToContainers_function("GainExperience", "", "Docs/Classes/AInfantry/Functions/GainExperience.html", ["gain", "experience"], "AInfantry");
addToContainers_function("GetOwnersID", "", "Docs/Classes/AInfantry/Functions/GetOwnersID.html", ["get", "owners", "i", "d"], "AInfantry");
addToContainers_function("RegenSelectableResourcesFromGameTicks", "", "Docs/Classes/AInfantry/Functions/RegenSelectableResourcesFromGameT.html", ["regen", "selectable", "resources", "from", "game", "ticks"], "AInfantry");
addToContainers_function("HasEnoughSelectableResources", "", "Docs/Classes/AInfantry/Functions/HasEnoughSelectableResources.html", ["has", "enough", "selectable", "resources"], "AInfantry");
addToContainers_function("GetCooldownRemaining", "Should return cooldown remaining, or -2.f if this does not support that button.", "Docs/Classes/AInfantry/Functions/GetCooldownRemaining.html", ["get", "cooldown", "remaining"], "AInfantry");
addToContainers_function("GetContextCooldowns", "", "Docs/Classes/AInfantry/Functions/GetContextCooldowns.html", ["get", "context", "cooldowns"], "AInfantry");
addToContainers_function("OnAbilityUse", "", "Docs/Classes/AInfantry/Functions/OnAbilityUse.html", ["on", "ability", "use"], "AInfantry");
addToContainers_function("OnInventoryItemUse", "", "Docs/Classes/AInfantry/Functions/OnInventoryItemUse.html", ["on", "inventory", "item", "use"], "AInfantry");
addToContainers_function("StartInventoryItemUseCooldownTimerHandle", "", "Docs/Classes/AInfantry/Functions/StartInventoryItemUseCooldownTime.html", ["start", "inventory", "item", "use", "cooldown", "timer", "handle"], "AInfantry");
addToContainers_function("Selectable_GetGI", "", "Docs/Classes/AInfantry/Functions/Selectable_GetGI.html", ["selectable_", "get", "g", "i"], "AInfantry");
addToContainers_function("Selectable_GetPS", "", "Docs/Classes/AInfantry/Functions/Selectable_GetPS.html", ["selectable_", "get", "p", "s"], "AInfantry");
addToContainers_function("HasZeroHealth", "", "Docs/Classes/AInfantry/Functions/HasZeroHealth.html", ["has", "zero", "health"], "AInfantry");
addToContainers_function("CanClassAcceptBuffsAndDebuffs", "", "Docs/Classes/AInfantry/Functions/CanClassAcceptBuffsAndDebuffs.html", ["can", "class", "accept", "buffs", "and", "debuffs"], "AInfantry");
addToContainers_function("GetStaticBuffArray", "", "Docs/Classes/AInfantry/Functions/GetStaticBuffArray.html", ["get", "static", "buff", "array"], "AInfantry");
addToContainers_function("GetTickableBuffArray", "", "Docs/Classes/AInfantry/Functions/GetTickableBuffArray.html", ["get", "tickable", "buff", "array"], "AInfantry");
addToContainers_function("GetStaticDebuffArray", "", "Docs/Classes/AInfantry/Functions/GetStaticDebuffArray.html", ["get", "static", "debuff", "array"], "AInfantry");
addToContainers_function("GetTickableDebuffArray", "", "Docs/Classes/AInfantry/Functions/GetTickableDebuffArray.html", ["get", "tickable", "debuff", "array"], "AInfantry");
addToContainers_function("GetBuffState", "", "Docs/Classes/AInfantry/Functions/GetBuffState.html", ["get", "buff", "state"], "AInfantry");
addToContainers_function("GetDebuffState", "", "Docs/Classes/AInfantry/Functions/GetDebuffState.html", ["get", "debuff", "state"], "AInfantry");
addToContainers_function("GetBuffState", "", "Docs/Classes/AInfantry/Functions/GetBuffState_1.html", ["get", "buff", "state"], "AInfantry");
addToContainers_function("GetDebuffState", "", "Docs/Classes/AInfantry/Functions/GetDebuffState_1.html", ["get", "debuff", "state"], "AInfantry");
addToContainers_function("RegisterDebuff", "", "Docs/Classes/AInfantry/Functions/RegisterDebuff.html", ["register", "debuff"], "AInfantry");
addToContainers_function("RegisterBuff", "", "Docs/Classes/AInfantry/Functions/RegisterBuff.html", ["register", "buff"], "AInfantry");
addToContainers_function("RegisterDebuff", "", "Docs/Classes/AInfantry/Functions/RegisterDebuff_1.html", ["register", "debuff"], "AInfantry");
addToContainers_function("RemoveBuff", "", "Docs/Classes/AInfantry/Functions/RemoveBuff.html", ["remove", "buff"], "AInfantry");
addToContainers_function("RemoveDebuff", "", "Docs/Classes/AInfantry/Functions/RemoveDebuff.html", ["remove", "debuff"], "AInfantry");
addToContainers_function("RemoveBuff", "", "Docs/Classes/AInfantry/Functions/RemoveBuff_1.html", ["remove", "buff"], "AInfantry");
addToContainers_function("RemoveDebuff", "", "Docs/Classes/AInfantry/Functions/RemoveDebuff_1.html", ["remove", "debuff"], "AInfantry");
addToContainers_function("GetAppliedGameTickCount", "", "Docs/Classes/AInfantry/Functions/GetAppliedGameTickCount.html", ["get", "applied", "game", "tick", "count"], "AInfantry");
addToContainers_function("GetActorLocationSelectable", "", "Docs/Classes/AInfantry/Functions/GetActorLocationSelectable.html", ["get", "actor", "location", "selectable"], "AInfantry");
addToContainers_function("GetDistanceFromAnotherForAbilitySquared", "", "Docs/Classes/AInfantry/Functions/GetDistanceFromAnotherForAbilityS.html", ["get", "distance", "from", "another", "for", "ability", "squared"], "AInfantry");
addToContainers_function("GetDistanceFromLocationForAbilitySquared", "", "Docs/Classes/AInfantry/Functions/GetDistanceFromLocationForAbility.html", ["get", "distance", "from", "location", "for", "ability", "squared"], "AInfantry");
addToContainers_function("GetLocalPC", "", "Docs/Classes/AInfantry/Functions/GetLocalPC.html", ["get", "local", "p", "c"], "AInfantry");
addToContainers_function("HasAttack", "", "Docs/Classes/AInfantry/Functions/HasAttack.html", ["has", "attack"], "AInfantry");
addToContainers_function("GetShopAttributes", "", "Docs/Classes/AInfantry/Functions/GetShopAttributes.html", ["get", "shop", "attributes"], "AInfantry");
addToContainers_function("GetInventory", "", "Docs/Classes/AInfantry/Functions/GetInventory.html", ["get", "inventory"], "AInfantry");
addToContainers_function("GetInventoryModifiable", "", "Docs/Classes/AInfantry/Functions/GetInventoryModifiable.html", ["get", "inventory", "modifiable"], "AInfantry");
addToContainers_function("GetHealthRef", "", "Docs/Classes/AInfantry/Functions/GetHealthRef.html", ["get", "health", "ref"], "AInfantry");
addToContainers_function("ShowTooltip", "", "Docs/Classes/AInfantry/Functions/ShowTooltip.html", ["show", "tooltip"], "AInfantry");
addToContainers_function("GetPersistentWorldWidget", "", "Docs/Classes/AInfantry/Functions/GetPersistentWorldWidget.html", ["get", "persistent", "world", "widget"], "AInfantry");
addToContainers_function("GetSelectedWorldWidget", "", "Docs/Classes/AInfantry/Functions/GetSelectedWorldWidget.html", ["get", "selected", "world", "widget"], "AInfantry");
addToContainers_function("AdjustPersistentWorldWidgetForNewCameraZoomAmount", "", "Docs/Classes/AInfantry/Functions/AdjustPersistentWorldWidgetForNew.html", ["adjust", "persistent", "world", "widget", "for", "new", "camera", "zoom", "amount"], "AInfantry");
addToContainers_function("AdjustSelectedWorldWidgetForNewCameraZoomAmount", "", "Docs/Classes/AInfantry/Functions/AdjustSelectedWorldWidgetForNewCa.html", ["adjust", "selected", "world", "widget", "for", "new", "camera", "zoom", "amount"], "AInfantry");
addToContainers_function("AttachParticles", "", "Docs/Classes/AInfantry/Functions/AttachParticles.html", ["attach", "particles"], "AInfantry");
addToContainers_function("AttachParticles", "", "Docs/Classes/AInfantry/Functions/AttachParticles_1.html", ["attach", "particles"], "AInfantry");
addToContainers_function("AttachParticles", "", "Docs/Classes/AInfantry/Functions/AttachParticles_2.html", ["attach", "particles"], "AInfantry");
addToContainers_function("RemoveAttachedParticles", "", "Docs/Classes/AInfantry/Functions/RemoveAttachedParticles.html", ["remove", "attached", "particles"], "AInfantry");
addToContainers_function("RemoveAttachedParticles", "", "Docs/Classes/AInfantry/Functions/RemoveAttachedParticles_1.html", ["remove", "attached", "particles"], "AInfantry");
addToContainers_function("GetMuzzleLocation", "", "Docs/Classes/AInfantry/Functions/GetMuzzleLocation.html", ["get", "muzzle", "location"], "AInfantry");
addToContainers_function("CanAquireTarget", "", "Docs/Classes/AInfantry/Functions/CanAquireTarget.html", ["can", "aquire", "target"], "AInfantry");
addToContainers_function("GetSpecialRightClickActionTowardsBuildingInfo", "", "Docs/Classes/AInfantry/Functions/GetSpecialRightClickActionTowards.html", ["get", "special", "right", "click", "action", "towards", "building", "info"], "AInfantry");
addToContainers_function("GetSelectedMouseCursor_CanAttackHostileUnit", "", "Docs/Classes/AInfantry/Functions/GetSelectedMouseCursor_CanAttackH.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "hostile", "unit"], "AInfantry");
addToContainers_function("GetSelectedMouseCursor_CanAttackFriendlyUnit", "", "Docs/Classes/AInfantry/Functions/GetSelectedMouseCursor_CanAttackF.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "friendly", "unit"], "AInfantry");
addToContainers_function("GetSelectedMouseCursor_CanAttackHostileBuilding", "", "Docs/Classes/AInfantry/Functions/GetSelectedMouseCursor_CanAttackH_1.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "hostile", "building"], "AInfantry");
addToContainers_function("GetSelectedMouseCursor_CanAttackFriendlyBuilding", "", "Docs/Classes/AInfantry/Functions/GetSelectedMouseCursor_CanAttackF_1.html", ["get", "selected", "mouse", "cursor_", "can", "attack", "friendly", "building"], "AInfantry");
addToContainers_function("PIE_IsForCPUPlayer", "", "Docs/Classes/AInfantry/Functions/PIE_IsForCPUPlayer.html", ["i", "e_", "is", "for", "c", "p", "u", "player"], "AInfantry");
addToContainers_function("PIE_GetHumanOwnerIndex", "", "Docs/Classes/AInfantry/Functions/PIE_GetHumanOwnerIndex.html", ["i", "e_", "get", "human", "owner", "index"], "AInfantry");
addToContainers_function("PIE_GetCPUOwnerIndex", "", "Docs/Classes/AInfantry/Functions/PIE_GetCPUOwnerIndex.html", ["i", "e_", "get", "c", "p", "u", "owner", "index"], "AInfantry");
addToContainers_function("FellOutOfWorld", "Overridden from AActor", "Docs/Classes/AInfantry/Functions/FellOutOfWorld.html", ["fell", "out", "of", "world"], "AInfantry");
addToContainers_function("TakeDamage", "Overridden from AActor", "Docs/Classes/AInfantry/Functions/TakeDamage.html", ["take", "damage"], "AInfantry");
addToContainers_function("TakeDamageSelectable", "Overridden from ISelectable", "Docs/Classes/AInfantry/Functions/TakeDamageSelectable.html", ["take", "damage", "selectable"], "AInfantry");
addToContainers_function("Consume_BuildingTargetingAbilityInstigator", "~ Begin ISelectable interface", "Docs/Classes/AInfantry/Functions/Consume_BuildingTargetingAbilityI.html", ["consume_", "building", "targeting", "ability", "instigator"], "AInfantry");
addToContainers_function("OnRep_Health", "~ End ISelectable interface", "Docs/Classes/AInfantry/Functions/OnRep_Health.html", ["on", "rep_", "health"], "AInfantry");
addToContainers_function("OnZeroHealth", "", "Docs/Classes/AInfantry/Functions/OnZeroHealth.html", ["on", "zero", "health"], "AInfantry");
addToContainers_function("FinalizeDestruction", "", "Docs/Classes/AInfantry/Functions/FinalizeDestruction.html", ["finalize", "destruction"], "AInfantry");
addToContainers_function("AnimNotify_ExitStealthMode", "An anim notify that when called will make this unit exit stealth mode if they are a stealthing unit", "Docs/Classes/AInfantry/Functions/AnimNotify_ExitStealthMode.html", ["anim", "notify_", "exit", "stealth", "mode"], "AInfantry");
addToContainers_function("AnimNotify_PlayAttackPreparationSound", "", "Docs/Classes/AInfantry/Functions/AnimNotify_PlayAttackPreparationS.html", ["anim", "notify_", "play", "attack", "preparation", "sound"], "AInfantry");
addToContainers_function("AnimNotify_FireWeapon", "Called when fire animation fires weapon.", "Docs/Classes/AInfantry/Functions/AnimNotify_FireWeapon.html", ["anim", "notify_", "fire", "weapon"], "AInfantry");
addToContainers_function("AnimNotify_OnAttackAnimationFinished", "Called when weapon firing animation is finished. This signals that the unit can move again", "Docs/Classes/AInfantry/Functions/AnimNotify_OnAttackAnimationFinis.html", ["anim", "notify_", "on", "attack", "animation", "finished"], "AInfantry");
addToContainers_function("AnimNotify_ExecuteContextAction", "Called when a context action animation reaches point where it should carry out the action", "Docs/Classes/AInfantry/Functions/AnimNotify_ExecuteContextAction.html", ["anim", "notify_", "execute", "context", "action"], "AInfantry");
addToContainers_function("AnimNotify_OnContextAnimationFinished", "Called when a context action animation reaches point where behavior will resume", "Docs/Classes/AInfantry/Functions/AnimNotify_OnContextAnimationFini.html", ["anim", "notify_", "on", "context", "animation", "finished"], "AInfantry");
addToContainers_function("AnimNotify_DropOffResources", "Called to signal resources have been dropped off at depot", "Docs/Classes/AInfantry/Functions/AnimNotify_DropOffResources.html", ["anim", "notify_", "drop", "off", "resources"], "AInfantry");
addToContainers_function("AnimNotify_TryPickUpInventoryItemOffGround", "", "Docs/Classes/AInfantry/Functions/AnimNotify_TryPickUpInventoryItem.html", ["anim", "notify_", "try", "pick", "up", "inventory", "item", "off", "ground"], "AInfantry");
addToContainers_function("AnimNotify_OnZeroHealthAnimationFinished", "Called by an anim notify when the zero health animation has finished", "Docs/Classes/AInfantry/Functions/AnimNotify_OnZeroHealthAnimationF.html", ["anim", "notify_", "on", "zero", "health", "animation", "finished"], "AInfantry");
addToContainers_function("CanBuildBuildings", "Whether this unit can construct buildings (but not necessarily repair them)", "Docs/Classes/AInfantry/Functions/CanBuildBuildings.html", ["can", "build", "buildings"], "AInfantry");
addToContainers_function("IsACollector", "Return whether this unit can harvest at least one type of resource", "Docs/Classes/AInfantry/Functions/IsACollector.html", ["is", "a", "collector"], "AInfantry");
addToContainers_function("CanCollectResource", "Return whether this unit can harvest a resource type", "Docs/Classes/AInfantry/Functions/CanCollectResource.html", ["can", "collect", "resource"], "AInfantry");
addToContainers_function("GetAttributesBase", "Getters and setters, even though AIController is a friend anyway. Used for upgrades too though", "Docs/Classes/AInfantry/Functions/GetAttributesBase.html", ["get", "attributes", "base"], "AInfantry");
addToContainers_function("GetAttributesBase", "", "Docs/Classes/AInfantry/Functions/GetAttributesBase_1.html", ["get", "attributes", "base"], "AInfantry");
addToContainers_function("GetAttributes", "", "Docs/Classes/AInfantry/Functions/GetAttributes.html", ["get", "attributes"], "AInfantry");
addToContainers_function("GetInfantryAttributes", "", "Docs/Classes/AInfantry/Functions/GetInfantryAttributes.html", ["get", "infantry", "attributes"], "AInfantry");
addToContainers_function("GetAttackAttributes", "", "Docs/Classes/AInfantry/Functions/GetAttackAttributes.html", ["get", "attack", "attributes"], "AInfantry");
addToContainers_function("GetAttributesModifiable", "Non-const versions. Added here so upgrade effects can modify things", "Docs/Classes/AInfantry/Functions/GetAttributesModifiable.html", ["get", "attributes", "modifiable"], "AInfantry");
addToContainers_function("GetInfantryAttributesModifiable", "", "Docs/Classes/AInfantry/Functions/GetInfantryAttributesModifiable.html", ["get", "infantry", "attributes", "modifiable"], "AInfantry");
addToContainers_function("GetAttackAttributesModifiable", "", "Docs/Classes/AInfantry/Functions/GetAttackAttributesModifiable.html", ["get", "attack", "attributes", "modifiable"], "AInfantry");
addToContainers_function("SetHasAttack", "Set whether this unit has an attack or not", "Docs/Classes/AInfantry/Functions/SetHasAttack.html", ["set", "has", "attack"], "AInfantry");
addToContainers_function("GetRank", "Get the unit\'s rank or level", "Docs/Classes/AInfantry/Functions/GetRank.html", ["get", "rank"], "AInfantry");
addToContainers_function("GetFaction", "Get the faction the player who owns this unit is playing as", "Docs/Classes/AInfantry/Functions/GetFaction.html", ["get", "faction"], "AInfantry");
addToContainers_function("GetTeamTag", "", "Docs/Classes/AInfantry/Functions/GetTeamTag.html", ["get", "team", "tag"], "AInfantry");
addToContainers_function("SetMoveAnimPlayRate", "Set the play rate for the movement animation", "Docs/Classes/AInfantry/Functions/SetMoveAnimPlayRate.html", ["set", "move", "anim", "play", "rate"], "AInfantry");
addToContainers_function("GetMoveSpeed", "[Server] Get the movespeed taking into account any temporary effects too", "Docs/Classes/AInfantry/Functions/GetMoveSpeed.html", ["get", "move", "speed"], "AInfantry");
addToContainers_function("GetDefaultMoveSpeed", "[Server] Get movespeed not taking into account any temporary effects. This value WILL take into account any upgrades or level up bonuses", "Docs/Classes/AInfantry/Functions/GetDefaultMoveSpeed.html", ["get", "default", "move", "speed"], "AInfantry");
addToContainers_function("GetStartingMoveSpeed", "Get the unit\'s default move speed that they started the match with. This never changes", "Docs/Classes/AInfantry/Functions/GetStartingMoveSpeed.html", ["get", "starting", "move", "speed"], "AInfantry");
addToContainers_function("Internal_SetNewDefaultMoveSpeed", "[Server] Set what the new default move speed is but do not apply it", "Docs/Classes/AInfantry/Functions/Internal_SetNewDefaultMoveSpeed.html", ["internal_", "set", "new", "default", "move", "speed"], "AInfantry");
addToContainers_function("SetNewDefaultMoveSpeed", "[Server] Set what the new default movespeed is. This is for a permanent change in movespeed. Call this when applying upgrades or level up bonuses. Also applies it using percentage rules @param NewMoveSpeed - new default move speed @return - the new current movespeed after the default has been change, not the default movespeed", "Docs/Classes/AInfantry/Functions/SetNewDefaultMoveSpeed.html", ["set", "new", "default", "move", "speed"], "AInfantry");
addToContainers_function("SetNewDefaultMoveSpeedViaMultiplier", "[Server] Version of SetNewDefaultMoveSpeed that takes a multiplier instead @param Multiplier - how much to multiply default movespeed by @return - the new current movespeed after the default has been change, not the default movespeed", "Docs/Classes/AInfantry/Functions/SetNewDefaultMoveSpeedViaMultipli.html", ["set", "new", "default", "move", "speed", "via", "multiplier"], "AInfantry");
addToContainers_function("ApplyTempMoveSpeedMultiplier", "[Server] Apply a movespeed modifier that is considered only temporary. @param Multiplier - amount to multiply current movespeed by @return - move speed after the modifier is applied", "Docs/Classes/AInfantry/Functions/ApplyTempMoveSpeedMultiplier.html", ["apply", "temp", "move", "speed", "multiplier"], "AInfantry");
addToContainers_function("RemoveTempMoveSpeedMultiplier", "[Server] Remove a movespeed modifier that is considered only temporary @param Multiplier - amount to multiply current movespeed by @return - move speed after the modifier is removed", "Docs/Classes/AInfantry/Functions/RemoveTempMoveSpeedMultiplier.html", ["remove", "temp", "move", "speed", "multiplier"], "AInfantry");
addToContainers_function("RemoveMoveSpeedEffectOfResources", "[Server] Reset movespeed back to what it should be with no resources being held @return - move speed after dropping resource", "Docs/Classes/AInfantry/Functions/RemoveMoveSpeedEffectOfResources.html", ["remove", "move", "speed", "effect", "of", "resources"], "AInfantry");
addToContainers_function("ApplyTempStealthModeEffect", "[Server] Make the unit enter stealth mode temporarily @return - whether the unit is in stealth mode after the change, so true every time", "Docs/Classes/AInfantry/Functions/ApplyTempStealthModeEffect.html", ["apply", "temp", "stealth", "mode", "effect"], "AInfantry");
addToContainers_function("RemoveTempStealthModeEffect", "[Server] Remove the effects of a temporary enter stealth mode effect @return - whether the unit is in stealth mode after the change", "Docs/Classes/AInfantry/Functions/RemoveTempStealthModeEffect.html", ["remove", "temp", "stealth", "mode", "effect"], "AInfantry");
addToContainers_function("GetResourceGatheringProperties", "", "Docs/Classes/AInfantry/Functions/GetResourceGatheringProperties.html", ["get", "resource", "gathering", "properties"], "AInfantry");
addToContainers_function("GetMoveSpeedMultiplierForHoldingResources", "Get by how much to multiply movement speed by when carrying a resource", "Docs/Classes/AInfantry/Functions/GetMoveSpeedMultiplierForHoldingR.html", ["get", "move", "speed", "multiplier", "for", "holding", "resources"], "AInfantry");
addToContainers_function("IsHoldingResources", "Return whether this unit is holding any resources", "Docs/Classes/AInfantry/Functions/IsHoldingResources.html", ["is", "holding", "resources"], "AInfantry");
addToContainers_function("GetHeldResourceType", "Get the resource this unit is holding. Will return \"None\" if not holding any resource", "Docs/Classes/AInfantry/Functions/GetHeldResourceType.html", ["get", "held", "resource", "type"], "AInfantry");
addToContainers_function("SetHeldResource", "", "Docs/Classes/AInfantry/Functions/SetHeldResource.html", ["set", "held", "resource"], "AInfantry");
addToContainers_function("GetHeldResourceAmount", "", "Docs/Classes/AInfantry/Functions/GetHeldResourceAmount.html", ["get", "held", "resource", "amount"], "AInfantry");
addToContainers_function("GetResourceGatherRate", "", "Docs/Classes/AInfantry/Functions/GetResourceGatherRate.html", ["get", "resource", "gather", "rate"], "AInfantry");
addToContainers_function("GetCapacityForResource", "Get the max amount of a resource type this unit can carry", "Docs/Classes/AInfantry/Functions/GetCapacityForResource.html", ["get", "capacity", "for", "resource"], "AInfantry");
addToContainers_function("GetAIController", "Get the AI controller that controls this unit. Has nothing to do with CPU players", "Docs/Classes/AInfantry/Functions/GetAIController.html", ["get", "a", "i", "controller"], "AInfantry");
addToContainers_function("DisplayAIControllerOnScreenDebugInfo", "", "Docs/Classes/AInfantry/Functions/DisplayAIControllerOnScreenDebugI.html", ["display", "a", "i", "controller", "on", "screen", "debug", "info"], "AInfantry");
addToContainers_function("Multicast_OnAttackMade", "", "Docs/Classes/AInfantry/Functions/Multicast_OnAttackMade.html", ["multicast_", "on", "attack", "made"], "AInfantry");
addToContainers_variable("", "Mesh to show as a piece of gathered resources. Only relevant if this is a resource gathering unit", "Docs/Classes/AInfantry/Variables/.html", [], "AInfantry");
addToContainers_variable("", "Widget to display only when selected and visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/AInfantry/Variables/_1.html", [], "AInfantry");
addToContainers_variable("", "Widget to display all the time when unit is visible. Leave user widget blank, it will be assigned from faction info", "Docs/Classes/AInfantry/Variables/_2.html", [], "AInfantry");
addToContainers_variable("", "Selection decal to appear under unit when selected. Decal material does not need to be set through editor", "Docs/Classes/AInfantry/Variables/_3.html", [], "AInfantry");
addToContainers_variable("", "The particle system to show when the unit is selected. Usually these play around their feet but can be anywhere really", "Docs/Classes/AInfantry/Variables/_4.html", [], "AInfantry");
addToContainers_variable("", "Audio component that plays the \'attack preparation\' sound. Possibly could use this to play all sorts of sounds for this unit", "Docs/Classes/AInfantry/Variables/_5.html", [], "AInfantry");
addToContainers_variable("", "Type this unit is", "Docs/Classes/AInfantry/Variables/_6.html", [], "AInfantry");
addToContainers_variable("bStartedInMap", "If true then actor will not setup and will instead have an outside source set it up. Will only be true if using PIE and unit was placed in world via editor", "Docs/Classes/AInfantry/Variables/bStartedInMap.html", ["started", "in", "map"], "AInfantry");
addToContainers_variable("", "Many core attributes", "Docs/Classes/AInfantry/Variables/_7.html", [], "AInfantry");
addToContainers_variable("", "Whether this unit can attack. Harvester type units are a good example of units that may want this to be false", "Docs/Classes/AInfantry/Variables/_8.html", [], "AInfantry");
addToContainers_variable("", "How much yaw rotation unit can be off by for it to attack. Negative value means unit does not have to face target at all. For yaw only", "Docs/Classes/AInfantry/Variables/_9.html", [], "AInfantry");
addToContainers_variable("", "This is kind of an AIController property. If false then when unit does an attack they will keep the same yaw rotation until the anim notify OnAttackAnimationFinished is called. Issuing them anther order will cause their rotation to change My notes: could use a seperate anim notify", "Docs/Classes/AInfantry/Variables/_10.html", [], "AInfantry");
addToContainers_variable("", "Attack attributes", "Docs/Classes/AInfantry/Variables/_11.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_12.html", [], "AInfantry");
addToContainers_variable("", "For development only. When skipping main menu, this is the index of the player that will own this unit. ARTSDevelopmentSettings defines teams for each player, and is assigned in UMyGameInstance 0 = server, 1 = remote client 1, 2 = remote client 2 and so on", "Docs/Classes/AInfantry/Variables/_13.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_14.html", [], "AInfantry");
addToContainers_variable("", "Unique ID for issuing commands efficiently over the wire", "Docs/Classes/AInfantry/Variables/_15.html", [], "AInfantry");
addToContainers_variable("", "Whether this is a starting selectable or not", "Docs/Classes/AInfantry/Variables/_16.html", [], "AInfantry");
addToContainers_variable("", "The custom RTS game tick count on the server when this unit was created.", "Docs/Classes/AInfantry/Variables/_17.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_18.html", [], "AInfantry");
addToContainers_variable("", "If this is a resource gathering unit, the type of resource this unit is holding", "Docs/Classes/AInfantry/Variables/_19.html", [], "AInfantry");
addToContainers_variable("PreviousHeldResourceType", "The resource the unit was holding before HeldResourceType", "Docs/Classes/AInfantry/Variables/PreviousHeldResourceType.html", ["previous", "held", "resource", "type"], "AInfantry");
addToContainers_variable("HeldResourceAmount", "Amount of HeldResourceType held", "Docs/Classes/AInfantry/Variables/HeldResourceAmount.html", ["held", "resource", "amount"], "AInfantry");
addToContainers_variable("Rank", "Rank or level. Starts at value defined in LevelUpOptions", "Docs/Classes/AInfantry/Variables/Rank.html", [], "AInfantry");
addToContainers_variable("PreviousRank", "Rank before leveling up to know how many levels gained", "Docs/Classes/AInfantry/Variables/PreviousRank.html", ["previous", "rank"], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_20.html", [], "AInfantry");
addToContainers_variable(":", "True if stealthed, but may still be visible due to stealth detectors", "Docs/Classes/AInfantry/Variables/:.html", [], "AInfantry");
addToContainers_variable("TimerHandle_ReenterStealth", "Timer handle to controle when to reenter stealth mode after leaving stealth mode", "Docs/Classes/AInfantry/Variables/TimerHandle_ReenterStealth.html", ["timer", "handle_", "reenter", "stealth"], "AInfantry");
addToContainers_variable("", "What selectable this unit is garrisoned inside of", "Docs/Classes/AInfantry/Variables/_21.html", [], "AInfantry");
addToContainers_variable("ClientPreviousGarrisonStatus", "[Client] What the unit was garrisoned in last time we received the replicated variable. Could also keep this up to date on the server but there\'s no point", "Docs/Classes/AInfantry/Variables/ClientPreviousGarrisonStatus.html", ["client", "previous", "garrison", "status"], "AInfantry");
addToContainers_variable("", "Experience gained towards next rank. Not total experience gained", "Docs/Classes/AInfantry/Variables/_22.html", [], "AInfantry");
addToContainers_variable("RangeSquared", "Range squared * RangeLenience. Used to speed up some calculations", "Docs/Classes/AInfantry/Variables/RangeSquared.html", ["range", "squared"], "AInfantry");
addToContainers_variable("", "Animation montages", "Docs/Classes/AInfantry/Variables/_23.html", [], "AInfantry");
addToContainers_variable("MoveAnimPlayRate", "The rate the move and moving with resources animations play", "Docs/Classes/AInfantry/Variables/MoveAnimPlayRate.html", ["move", "anim", "play", "rate"], "AInfantry");
addToContainers_variable("", "Maps each context button to a timer handle that keeps track of the cooldown for the ability", "Docs/Classes/AInfantry/Variables/_24.html", [], "AInfantry");
addToContainers_variable("", "Reference to AI controller", "Docs/Classes/AInfantry/Variables/_25.html", [], "AInfantry");
addToContainers_variable("", "A reference to local player controller. Not necessarilty the player controller that is controlling this", "Docs/Classes/AInfantry/Variables/_26.html", [], "AInfantry");
addToContainers_variable("", "A reference to the player state of the player that controls this", "Docs/Classes/AInfantry/Variables/_27.html", [], "AInfantry");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AInfantry/Variables/_28.html", [], "AInfantry");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/AInfantry/Variables/_29.html", [], "AInfantry");
addToContainers_variable("", "Faction info of PS", "Docs/Classes/AInfantry/Variables/_30.html", [], "AInfantry");
addToContainers_variable("", "Reference to dynamic material instances created for both main mesh and weapon mesh. Ordering is defined in InitStealthingVariables()", "Docs/Classes/AInfantry/Variables/_31.html", [], "AInfantry");
addToContainers_variable("", "Value to change params to when out of stealth mode", "Docs/Classes/AInfantry/Variables/_32.html", [], "AInfantry");
addToContainers_variable("", "", "Docs/Classes/AInfantry/Variables/_33.html", [], "AInfantry");
addToContainers_variable("BuildingSpawnedFrom", "The building that produced this unit. Will be null if the player started the match with this unit", "Docs/Classes/AInfantry/Variables/BuildingSpawnedFrom.html", ["building", "spawned", "from"], "AInfantry");
addToContainers_variable("BarracksRallyLoc", "The location of the rally point of the building that this unit was produced from", "Docs/Classes/AInfantry/Variables/BarracksRallyLoc.html", ["barracks", "rally", "loc"], "AInfantry");
addToContainers_class("AInventoryItem", "Inventory items are items that can go in the inventory of a selectable. This class is an inventory item that has been placed/dropped/whatever into the world. You can place these into maps to have them start there when the match begins, but they only show as a sprite while during design time. Make sure to set their type in their blueprint. There\'s no shape component used for selection - it\'s up to the mesh. Can\'t you make a custom physics asset that can be like a cube and use that for the mesh\'s collision? There is an expectation that this actor is visible so if you make blueprints of this class do not adjust their visibilities. ----------------------------------------------------------------------------------------------- My notes: can\'t quite get the functionality that I want in regards to meshes. What I want is: - you define the mesh you want to use for an item type in GI blueprint - you can place these actors into the world. They will have that mesh that was set in GI BP. In post edit world and GI are null. Would be able to accomplish this by: - learning how to modify another BP in post edit e.g. we edit this but also modify GI BP - writing the mesh reference to disk meaning in post edit we can access it. Maybe a data table could accomplish this I don\'t know though, I know nothing about data tables. So in the mean time its always the default cube in editor map during design time. -----------------------------------------------------------------------------------------------", "Docs/Classes/AInventoryItem/AInventoryItem.html", ["inventory", "item"], "");
addToContainers_function("AInventoryItem", "", "Docs/Classes/AInventoryItem/Functions/AInventoryItem.html", ["inventory", "item"], "AInventoryItem");
addToContainers_function("BeginPlay", "", "Docs/Classes/AInventoryItem/Functions/BeginPlay.html", ["begin", "play"], "AInventoryItem");
addToContainers_function("Setup", "NOOP currently, SetupStuff() does all stuff", "Docs/Classes/AInventoryItem/Functions/Setup.html", [], "AInventoryItem");
addToContainers_function("SetupStuff", "This function was made for the items that already start on the map", "Docs/Classes/AInventoryItem/Functions/SetupStuff.html", ["setup", "stuff"], "AInventoryItem");
addToContainers_function("SetupSomeStuff", "", "Docs/Classes/AInventoryItem/Functions/SetupSomeStuff.html", ["setup", "some", "stuff"], "AInventoryItem");
addToContainers_function("SetupSelectionDecal", "", "Docs/Classes/AInventoryItem/Functions/SetupSelectionDecal.html", ["setup", "selection", "decal"], "AInventoryItem");
addToContainers_function("SetupParticles", "", "Docs/Classes/AInventoryItem/Functions/SetupParticles.html", ["setup", "particles"], "AInventoryItem");
addToContainers_function("ExitPool_BasicStuff", "", "Docs/Classes/AInventoryItem/Functions/ExitPool_BasicStuff.html", ["exit", "pool_", "basic", "stuff"], "AInventoryItem");
addToContainers_function("ExitPool_FinalStuff", "", "Docs/Classes/AInventoryItem/Functions/ExitPool_FinalStuff.html", ["exit", "pool_", "final", "stuff"], "AInventoryItem");
addToContainers_function("IsBlueprintClass", "Return whether this is a blueprint class", "Docs/Classes/AInventoryItem/Functions/IsBlueprintClass.html", ["is", "blueprint", "class"], "AInventoryItem");
addToContainers_function("SetVis", "Set the visibility of this actor. SetActorHiddenInGame is not an option because AActor::bHidden is replicated. If I eventually edit engine source then this func can just call SetActorHiddenInGame", "Docs/Classes/AInventoryItem/Functions/SetVis.html", ["set", "vis"], "AInventoryItem");
addToContainers_function("GetUniqueID", "", "Docs/Classes/AInventoryItem/Functions/GetUniqueID.html", ["get", "unique", "i", "d"], "AInventoryItem");
addToContainers_function("GetType", "Get the type of item this actor is for", "Docs/Classes/AInventoryItem/Functions/GetType.html", ["get", "type"], "AInventoryItem");
addToContainers_function("GetItemQuantity", "Get how many of the item is in this stack", "Docs/Classes/AInventoryItem/Functions/GetItemQuantity.html", ["get", "item", "quantity"], "AInventoryItem");
addToContainers_function("GetNumItemCharges", "", "Docs/Classes/AInventoryItem/Functions/GetNumItemCharges.html", ["get", "num", "item", "charges"], "AInventoryItem");
addToContainers_function("GetItemInfo", "Get the info struct for the item that this actor is for", "Docs/Classes/AInventoryItem/Functions/GetItemInfo.html", ["get", "item", "info"], "AInventoryItem");
addToContainers_function("IsInObjectPool", "Return whether we think this object is in the object pool. If this returns true we shouldn\'t really be doing anything with it that\'s not object pool related like trying to pick it up with a selectable", "Docs/Classes/AInventoryItem/Functions/IsInObjectPool.html", ["is", "in", "object", "pool"], "AInventoryItem");
addToContainers_function("IsSelectableInRangeToPickUp", "Return whether another selectable is close enough to this item to be able to pick it up. @param Selectable - the selectable we would like to know whether it is close enough", "Docs/Classes/AInventoryItem/Functions/IsSelectableInRangeToPickUp.html", ["is", "selectable", "in", "range", "to", "pick", "up"], "AInventoryItem");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/AInventoryItem/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "AInventoryItem");
addToContainers_function("OnPickedUp", "Called when this item is picked up by a selectable. @param SelectableThatPickedUsUp - selectable that picked this up @param GameState - reference to the game state @param LocalPlayCon - GetWorld()->GetFirstPlayerController()", "Docs/Classes/AInventoryItem/Functions/OnPickedUp.html", ["on", "picked", "up"], "AInventoryItem");
addToContainers_function("IsFitForEnteringObjectPool", "Verify this actor is in a state that it is acceptable to enter the object pool e.g. tick is disabled, is hidden, etc", "Docs/Classes/AInventoryItem/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "AInventoryItem");
addToContainers_function("SetVisibilityFromFogManager", "Set the visibility of this actor. This is called from the fog manager", "Docs/Classes/AInventoryItem/Functions/SetVisibilityFromFogManager.html", ["set", "visibility", "from", "fog", "manager"], "AInventoryItem");
addToContainers_function("GetAttributesBase", "==========================================================================================", "Docs/Classes/AInventoryItem/Functions/GetAttributesBase.html", ["get", "attributes", "base"], "AInventoryItem");
addToContainers_function("GetAttributesBase", "", "Docs/Classes/AInventoryItem/Functions/GetAttributesBase_1.html", ["get", "attributes", "base"], "AInventoryItem");
addToContainers_function("GetAttributes", "", "Docs/Classes/AInventoryItem/Functions/GetAttributes.html", ["get", "attributes"], "AInventoryItem");
addToContainers_function("OnMouseHover", "", "Docs/Classes/AInventoryItem/Functions/OnMouseHover.html", ["on", "mouse", "hover"], "AInventoryItem");
addToContainers_function("OnMouseUnhover", "", "Docs/Classes/AInventoryItem/Functions/OnMouseUnhover.html", ["on", "mouse", "unhover"], "AInventoryItem");
addToContainers_function("OnSingleSelect", "", "Docs/Classes/AInventoryItem/Functions/OnSingleSelect.html", ["on", "single", "select"], "AInventoryItem");
addToContainers_function("OnDeselect", "", "Docs/Classes/AInventoryItem/Functions/OnDeselect.html", ["on", "deselect"], "AInventoryItem");
addToContainers_function("Security_CanBeClickedOn", "", "Docs/Classes/AInventoryItem/Functions/Security_CanBeClickedOn.html", ["security_", "can", "be", "clicked", "on"], "AInventoryItem");
addToContainers_function("OnRightClick", "", "Docs/Classes/AInventoryItem/Functions/OnRightClick.html", ["on", "right", "click"], "AInventoryItem");
addToContainers_function("ShowTooltip", "", "Docs/Classes/AInventoryItem/Functions/ShowTooltip.html", ["show", "tooltip"], "AInventoryItem");
addToContainers_function("HasAttack", "", "Docs/Classes/AInventoryItem/Functions/HasAttack.html", ["has", "attack"], "AInventoryItem");
addToContainers_function("CanClassGainExperience", "", "Docs/Classes/AInventoryItem/Functions/CanClassGainExperience.html", ["can", "class", "gain", "experience"], "AInventoryItem");
addToContainers_function("GetShopAttributes", "", "Docs/Classes/AInventoryItem/Functions/GetShopAttributes.html", ["get", "shop", "attributes"], "AInventoryItem");
addToContainers_function("GetInventory", "", "Docs/Classes/AInventoryItem/Functions/GetInventory.html", ["get", "inventory"], "AInventoryItem");
addToContainers_function("PIE_IsForCPUPlayer", "", "Docs/Classes/AInventoryItem/Functions/PIE_IsForCPUPlayer.html", ["i", "e_", "is", "for", "c", "p", "u", "player"], "AInventoryItem");
addToContainers_function("PIE_GetHumanOwnerIndex", "", "Docs/Classes/AInventoryItem/Functions/PIE_GetHumanOwnerIndex.html", ["i", "e_", "get", "human", "owner", "index"], "AInventoryItem");
addToContainers_function("TakeDamage", "==========================================================================================", "Docs/Classes/AInventoryItem/Functions/TakeDamage.html", ["take", "damage"], "AInventoryItem");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AInventoryItem/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AInventoryItem");
addToContainers_variable("", "Decal that appears under this when hovered/selected", "Docs/Classes/AInventoryItem/Variables/.html", [], "AInventoryItem");
addToContainers_variable("", "Particle system to show when this is selected. Also shows the particles for when this item is right-clicked. Donit use infinite looping templates for this", "Docs/Classes/AInventoryItem/Variables/_1.html", [], "AInventoryItem");
addToContainers_variable("SelectionParticlesTemplate", "Templates for particle systems. Not strictly components but here for cache locality", "Docs/Classes/AInventoryItem/Variables/SelectionParticlesTemplate.html", ["selection", "particles", "template"], "AInventoryItem");
addToContainers_variable("RightClickParticlesTemplate", "", "Docs/Classes/AInventoryItem/Variables/RightClickParticlesTemplate.html", ["right", "click", "particles", "template"], "AInventoryItem");
addToContainers_variable("", "ID. There should never be a situation where two items on the map share the same ID. If there is then we have problems", "Docs/Classes/AInventoryItem/Variables/_2.html", [], "AInventoryItem");
addToContainers_variable("", "The type of item this is for. My notes: this currently will not change the appearance of the item during design time.", "Docs/Classes/AInventoryItem/Variables/_3.html", [], "AInventoryItem");
addToContainers_variable("", "How many of this item there are in this stack OR how many charges the item has. But if you\'re looking at this in editor blueprint then treat it as num in stack.", "Docs/Classes/AInventoryItem/Variables/_4.html", [], "AInventoryItem");
addToContainers_variable("NumItemCharges", "How many charges the item has. Might be irrelevant if the item does not have charges", "Docs/Classes/AInventoryItem/Variables/NumItemCharges.html", ["num", "item", "charges"], "AInventoryItem");
addToContainers_variable("", "Acceptance radius amount for orders to pick this up", "Docs/Classes/AInventoryItem/Variables/_5.html", [], "AInventoryItem");
addToContainers_variable("ItemInfo", "The info struct that this item is for", "Docs/Classes/AInventoryItem/Variables/ItemInfo.html", ["item", "info"], "AInventoryItem");
addToContainers_variable("Attributes", "", "Docs/Classes/AInventoryItem/Variables/Attributes.html", [], "AInventoryItem");
addToContainers_variable("SelectionDecalInfo", "Info about the selection decal we\'re using", "Docs/Classes/AInventoryItem/Variables/SelectionDecalInfo.html", ["selection", "decal", "info"], "AInventoryItem");
addToContainers_class("AInventoryItem_SM", "Inventory item actor class that uses a static mesh", "Docs/Classes/AInventoryItem_SM/AInventoryItem_SM.html", ["inventory", "item_", "s", "m"], "");
addToContainers_function("AInventoryItem_SM", "", "Docs/Classes/AInventoryItem_SM/Functions/AInventoryItem_SM.html", ["inventory", "item_", "s", "m"], "AInventoryItem_SM");
addToContainers_function("SetupStuff", "", "Docs/Classes/AInventoryItem_SM/Functions/SetupStuff.html", ["setup", "stuff"], "AInventoryItem_SM");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/AInventoryItem_SM/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "AInventoryItem_SM");
addToContainers_function("SetVis", "", "Docs/Classes/AInventoryItem_SM/Functions/SetVis.html", ["set", "vis"], "AInventoryItem_SM");
addToContainers_function("ExitPool", "@param InItemType - the item type this actor will represent in the world @param InQuantity - how mnay of InItemType are in this stack. Should be at least 1 @param InItemsInfo - info struct for InItemInfo as a convenience", "Docs/Classes/AInventoryItem_SM/Functions/ExitPool.html", ["exit", "pool"], "AInventoryItem_SM");
addToContainers_function("ExitPool_FreshlySpawnedActor", "Version where we do not set the location/rotation (although we still need to move it based on InItemsInfo mesh variables). This is called when object pooling manager has to spawn a new actor because pool is empty", "Docs/Classes/AInventoryItem_SM/Functions/ExitPool_FreshlySpawnedActor.html", ["exit", "pool_", "freshly", "spawned", "actor"], "AInventoryItem_SM");
addToContainers_function("OnPickedUp", "", "Docs/Classes/AInventoryItem_SM/Functions/OnPickedUp.html", ["on", "picked", "up"], "AInventoryItem_SM");
addToContainers_function("IsFitForEnteringObjectPool", "Verify this actor is in a state that it is acceptable to enter the object pool e.g. tick is disabled, is hidden, etc", "Docs/Classes/AInventoryItem_SM/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "AInventoryItem_SM");
addToContainers_variable("", "Mesh for this item.", "Docs/Classes/AInventoryItem_SM/Variables/.html", [], "AInventoryItem_SM");
addToContainers_class("AInventoryItem_SK", "Inventory item actor class that uses a skeletal mesh. ------------------------------------------------------------------------------------------------- My notes about ticking: Mesh will tick while on map if and only if an OnDropped animation was played -------------------------------------------------------------------------------------------------", "Docs/Classes/AInventoryItem_SK/AInventoryItem_SK.html", ["inventory", "item_", "s", "k"], "");
addToContainers_function("AInventoryItem_SK", "", "Docs/Classes/AInventoryItem_SK/Functions/AInventoryItem_SK.html", ["inventory", "item_", "s", "k"], "AInventoryItem_SK");
addToContainers_function("SetupStuff", "", "Docs/Classes/AInventoryItem_SK/Functions/SetupStuff.html", ["setup", "stuff"], "AInventoryItem_SK");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/AInventoryItem_SK/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "AInventoryItem_SK");
addToContainers_function("SetVis", "", "Docs/Classes/AInventoryItem_SK/Functions/SetVis.html", ["set", "vis"], "AInventoryItem_SK");
addToContainers_function("ExitPool", "@param InItemType - the item type this actor will represent in the world @param InQuantity - how mnay of InItemType are in this stack. Should be at least 1 @param InItemsInfo - info struct for InItemInfo as a convenience", "Docs/Classes/AInventoryItem_SK/Functions/ExitPool.html", ["exit", "pool"], "AInventoryItem_SK");
addToContainers_function("ExitPool_FreshlySpawnedActor", "Version where we do not set the location/rotation (although we still need to move it based on InItemsInfo mesh variables). This is called when object pooling manager has to spawn a new actor because pool is empty", "Docs/Classes/AInventoryItem_SK/Functions/ExitPool_FreshlySpawnedActor.html", ["exit", "pool_", "freshly", "spawned", "actor"], "AInventoryItem_SK");
addToContainers_function("OnPickedUp", "", "Docs/Classes/AInventoryItem_SK/Functions/OnPickedUp.html", ["on", "picked", "up"], "AInventoryItem_SK");
addToContainers_function("IsFitForEnteringObjectPool", "Verify this actor is in a state that it is acceptable to enter the object pool e.g. tick is disabled, is hidden, etc", "Docs/Classes/AInventoryItem_SK/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "AInventoryItem_SK");
addToContainers_variable("", "", "Docs/Classes/AInventoryItem_SK/Variables/.html", [], "AInventoryItem_SK");
addToContainers_class("AResourceSpot", "A resource location. Only one unit can gather from it at a time (similar to minerals in SCII) Some notes: - Selection decal size scales with mesh scale. To change its size change the decal components scale", "Docs/Classes/AResourceSpot/AResourceSpot.html", ["resource", "spot"], "");
addToContainers_function("AResourceSpot", "", "Docs/Classes/AResourceSpot/Functions/AResourceSpot.html", ["resource", "spot"], "AResourceSpot");
addToContainers_function("BeginPlay", "", "Docs/Classes/AResourceSpot/Functions/BeginPlay.html", ["begin", "play"], "AResourceSpot");
addToContainers_function("SetupForLocalPlayer", "Setup stuff for local player", "Docs/Classes/AResourceSpot/Functions/SetupForLocalPlayer.html", ["setup", "for", "local", "player"], "AResourceSpot");
addToContainers_function("Setup", "~ Begin ISelectable interface", "Docs/Classes/AResourceSpot/Functions/Setup.html", [], "AResourceSpot");
addToContainers_function("Init", "Setup references and add to resource location list in game state", "Docs/Classes/AResourceSpot/Functions/Init.html", [], "AResourceSpot");
addToContainers_function("SetupSelectionInfo", "", "Docs/Classes/AResourceSpot/Functions/SetupSelectionInfo.html", ["setup", "selection", "info"], "AResourceSpot");
addToContainers_function("GetQueueFront", "Returns the front of the queue, assuming queue has at least one element", "Docs/Classes/AResourceSpot/Functions/GetQueueFront.html", ["get", "queue", "front"], "AResourceSpot");
addToContainers_function("OnResourcesDepleted", "Called when resources deplete @param GatherersPlayerState - player state of the selectable that took the last of the resources", "Docs/Classes/AResourceSpot/Functions/OnResourcesDepleted.html", ["on", "resources", "depleted"], "AResourceSpot");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/AResourceSpot/Functions/Delay).html", [], "AResourceSpot");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AResourceSpot/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AResourceSpot");
addToContainers_function("GetType", "Get the type of resources this spot is for", "Docs/Classes/AResourceSpot/Functions/GetType.html", ["get", "type"], "AResourceSpot");
addToContainers_function("GetCollectionAcceptanceRadius", "Get how close to spot a collector has to get for them to be able to gather resources", "Docs/Classes/AResourceSpot/Functions/GetCollectionAcceptanceRadius.html", ["get", "collection", "acceptance", "radius"], "AResourceSpot");
addToContainers_function("IsDepleted", "Returns true if there are no more resources at this spot", "Docs/Classes/AResourceSpot/Functions/IsDepleted.html", ["is", "depleted"], "AResourceSpot");
addToContainers_function("GetCurrentResources", "Get the amount of resources left at this spot", "Docs/Classes/AResourceSpot/Functions/GetCurrentResources.html", ["get", "current", "resources"], "AResourceSpot");
addToContainers_function("Enqueue", "Called by a collector when it gets to this spot and wants to collect from it @param Collector - collector to register in queue @return - true if collector was first in queue and can collect straight away", "Docs/Classes/AResourceSpot/Functions/Enqueue.html", [], "AResourceSpot");
addToContainers_function("TakeResourcesFrom", "Take resources from this spot, making sure to not let gatherer take more than there is @param GathererCapacity - how much of this resource the gatherer can hold @param GatherersPlayerState - owning player state of gatherer @return - the amount of resources gathered", "Docs/Classes/AResourceSpot/Functions/TakeResourcesFrom.html", ["take", "resources", "from"], "AResourceSpot");
addToContainers_function("OnCollectorLeaveSpot", "Called by a collector when it leaves the spot, either because it is done collecting resources or it was destroyed or it was commanded to do something else", "Docs/Classes/AResourceSpot/Functions/OnCollectorLeaveSpot.html", ["on", "collector", "leave", "spot"], "AResourceSpot");
addToContainers_function("GetClosestDepot", "Get the closest depot to this for a certain player @param PlayerState - The player state whose depot we want to find is the closest @return - The cloest depot; nullptr if player has 0 depots", "Docs/Classes/AResourceSpot/Functions/GetClosestDepot.html", ["get", "closest", "depot"], "AResourceSpot");
addToContainers_function("SetClosestDepot", "Set the closest depot for a player, overriding the previous closest depot if there was one", "Docs/Classes/AResourceSpot/Functions/SetClosestDepot.html", ["set", "closest", "depot"], "AResourceSpot");
addToContainers_function("AICon_GetBaseBuildRadius", "This is used by CPU players when deciding how close to build their depots to this.", "Docs/Classes/AResourceSpot/Functions/AICon_GetBaseBuildRadius.html", ["i", "con_", "get", "base", "build", "radius"], "AResourceSpot");
addToContainers_function("GetBounds", "~ Begin ISelectable interface", "Docs/Classes/AResourceSpot/Functions/GetBounds.html", ["get", "bounds"], "AResourceSpot");
addToContainers_function("GetBoundsLength", "", "Docs/Classes/AResourceSpot/Functions/GetBoundsLength.html", ["get", "bounds", "length"], "AResourceSpot");
addToContainers_function("OnSingleSelect", "", "Docs/Classes/AResourceSpot/Functions/OnSingleSelect.html", ["on", "single", "select"], "AResourceSpot");
addToContainers_function("GetSelectableID", "", "Docs/Classes/AResourceSpot/Functions/GetSelectableID.html", ["get", "selectable", "i", "d"], "AResourceSpot");
addToContainers_function("OnDeselect", "", "Docs/Classes/AResourceSpot/Functions/OnDeselect.html", ["on", "deselect"], "AResourceSpot");
addToContainers_function("OnRightClick", "", "Docs/Classes/AResourceSpot/Functions/OnRightClick.html", ["on", "right", "click"], "AResourceSpot");
addToContainers_function("ShowTooltip", "", "Docs/Classes/AResourceSpot/Functions/ShowTooltip.html", ["show", "tooltip"], "AResourceSpot");
addToContainers_function("HideSelectionDecal", "~ End ISelectable interface", "Docs/Classes/AResourceSpot/Functions/HideSelectionDecal.html", ["hide", "selection", "decal"], "AResourceSpot");
addToContainers_function("ShowSelectionDecal", "", "Docs/Classes/AResourceSpot/Functions/ShowSelectionDecal.html", ["show", "selection", "decal"], "AResourceSpot");
addToContainers_function("ShowHoverDecal", "", "Docs/Classes/AResourceSpot/Functions/ShowHoverDecal.html", ["show", "hover", "decal"], "AResourceSpot");
addToContainers_function("Security_CanBeClickedOn", "~ Begin ISelectable interface", "Docs/Classes/AResourceSpot/Functions/Security_CanBeClickedOn.html", ["security_", "can", "be", "clicked", "on"], "AResourceSpot");
addToContainers_function("OnMouseHover", "", "Docs/Classes/AResourceSpot/Functions/OnMouseHover.html", ["on", "mouse", "hover"], "AResourceSpot");
addToContainers_function("OnMouseUnhover", "", "Docs/Classes/AResourceSpot/Functions/OnMouseUnhover.html", ["on", "mouse", "unhover"], "AResourceSpot");
addToContainers_function("GetAttributesBase", "", "Docs/Classes/AResourceSpot/Functions/GetAttributesBase.html", ["get", "attributes", "base"], "AResourceSpot");
addToContainers_function("GetAttributesBase", "", "Docs/Classes/AResourceSpot/Functions/GetAttributesBase_1.html", ["get", "attributes", "base"], "AResourceSpot");
addToContainers_function("GetAttributes", "", "Docs/Classes/AResourceSpot/Functions/GetAttributes.html", ["get", "attributes"], "AResourceSpot");
addToContainers_function("HasAttack", "", "Docs/Classes/AResourceSpot/Functions/HasAttack.html", ["has", "attack"], "AResourceSpot");
addToContainers_function("CanClassGainExperience", "", "Docs/Classes/AResourceSpot/Functions/CanClassGainExperience.html", ["can", "class", "gain", "experience"], "AResourceSpot");
addToContainers_function("GetInventory", "", "Docs/Classes/AResourceSpot/Functions/GetInventory.html", ["get", "inventory"], "AResourceSpot");
addToContainers_function("AdjustPersistentWorldWidgetForNewCameraZoomAmount", "", "Docs/Classes/AResourceSpot/Functions/AdjustPersistentWorldWidgetForNew.html", ["adjust", "persistent", "world", "widget", "for", "new", "camera", "zoom", "amount"], "AResourceSpot");
addToContainers_function("AdjustSelectedWorldWidgetForNewCameraZoomAmount", "", "Docs/Classes/AResourceSpot/Functions/AdjustSelectedWorldWidgetForNewCa.html", ["adjust", "selected", "world", "widget", "for", "new", "camera", "zoom", "amount"], "AResourceSpot");
addToContainers_function("PIE_IsForCPUPlayer", "", "Docs/Classes/AResourceSpot/Functions/PIE_IsForCPUPlayer.html", ["i", "e_", "is", "for", "c", "p", "u", "player"], "AResourceSpot");
addToContainers_function("PIE_GetHumanOwnerIndex", "", "Docs/Classes/AResourceSpot/Functions/PIE_GetHumanOwnerIndex.html", ["i", "e_", "get", "human", "owner", "index"], "AResourceSpot");
addToContainers_function("PIE_GetCPUOwnerIndex", "", "Docs/Classes/AResourceSpot/Functions/PIE_GetCPUOwnerIndex.html", ["i", "e_", "get", "c", "p", "u", "owner", "index"], "AResourceSpot");
addToContainers_function("TakeDamage", "~ Begin AActor interface", "Docs/Classes/AResourceSpot/Functions/TakeDamage.html", ["take", "damage"], "AResourceSpot");
addToContainers_variable("", "If adding a shape component as the root then consider changing AICon_GetBaseBuildRadius to use it instead of the mesh", "Docs/Classes/AResourceSpot/Variables/.html", [], "AResourceSpot");
addToContainers_variable("", "Widget to display only when selected and visible.", "Docs/Classes/AResourceSpot/Variables/_1.html", [], "AResourceSpot");
addToContainers_variable("", "Widget to display all the time", "Docs/Classes/AResourceSpot/Variables/_2.html", [], "AResourceSpot");
addToContainers_variable("", "Selection decal to appear under unit when selected. Decal material does not need to be set through editor", "Docs/Classes/AResourceSpot/Variables/_3.html", [], "AResourceSpot");
addToContainers_variable("", "Partciles to appear when resource spot is selected", "Docs/Classes/AResourceSpot/Variables/_4.html", [], "AResourceSpot");
addToContainers_variable("", "Resource type this is for. Cannot be \"None\"", "Docs/Classes/AResourceSpot/Variables/_5.html", [], "AResourceSpot");
addToContainers_variable("", "How many resources this spot starts with", "Docs/Classes/AResourceSpot/Variables/_6.html", [], "AResourceSpot");
addToContainers_variable("", "How close to spot a collector has to get for them to be able to gather resources, measured from this actors GetActorLocation() to something else", "Docs/Classes/AResourceSpot/Variables/_7.html", [], "AResourceSpot");
addToContainers_variable("", "Name of unit to optionally appear in HUDs", "Docs/Classes/AResourceSpot/Variables/_8.html", [], "AResourceSpot");
addToContainers_variable("", "Image to appear on HUDs when selecting this. Can be left null", "Docs/Classes/AResourceSpot/Variables/_9.html", [], "AResourceSpot");
addToContainers_variable("", "An map holding the closest resource depot to this for each player", "Docs/Classes/AResourceSpot/Variables/_10.html", [], "AResourceSpot");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AResourceSpot/Variables/_11.html", [], "AResourceSpot");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/AResourceSpot/Variables/_12.html", [], "AResourceSpot");
addToContainers_variable("", "Reference to local players faction info", "Docs/Classes/AResourceSpot/Variables/_13.html", [], "AResourceSpot");
addToContainers_variable("bIsLocalPlayerObserver", "If true then local player is an observer, not a player", "Docs/Classes/AResourceSpot/Variables/bIsLocalPlayerObserver.html", ["is", "local", "player", "observer"], "AResourceSpot");
addToContainers_variable("bIsMouseHovering", "True if mouse is hovering over this", "Docs/Classes/AResourceSpot/Variables/bIsMouseHovering.html", ["is", "mouse", "hovering"], "AResourceSpot");
addToContainers_variable("CurrentAmount", "How many resources still collectable from spot", "Docs/Classes/AResourceSpot/Variables/CurrentAmount.html", ["current", "amount"], "AResourceSpot");
addToContainers_variable("", "Queue of collectors waiting to collect from this. Last = front of queue = collector collecting from here right now", "Docs/Classes/AResourceSpot/Variables/_14.html", [], "AResourceSpot");
addToContainers_variable("SelectionDecalInfo", "Reference to selection decal info ", "Docs/Classes/AResourceSpot/Variables/SelectionDecalInfo.html", ["selection", "decal", "info"], "AResourceSpot");
addToContainers_variable("", "Dummy attributes to pass to HUD. This struct may have many unneeded variables - could try going one less in the heirarchy", "Docs/Classes/AResourceSpot/Variables/_15.html", [], "AResourceSpot");
addToContainers_class("ARTSPlayerStart", "RTS player start implementation Haven\'t thought about this fully but could probably use the default player start class since it provides a ID tag in the form of an FName", "Docs/Classes/ARTSPlayerStart/ARTSPlayerStart.html", ["r", "t", "s", "player", "start"], "");
addToContainers_function("ARTSPlayerStart", "", "Docs/Classes/ARTSPlayerStart/Functions/ARTSPlayerStart.html", ["r", "t", "s", "player", "start"], "ARTSPlayerStart");
addToContainers_function("BeginPlay", "", "Docs/Classes/ARTSPlayerStart/Functions/BeginPlay.html", ["begin", "play"], "ARTSPlayerStart");
addToContainers_function("OnConstruction", "", "Docs/Classes/ARTSPlayerStart/Functions/OnConstruction.html", ["on", "construction"], "ARTSPlayerStart");
addToContainers_function("PostEditChangeProperty", "", "Docs/Classes/ARTSPlayerStart/Functions/PostEditChangeProperty.html", ["post", "edit", "change", "property"], "ARTSPlayerStart");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/ARTSPlayerStart/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "ARTSPlayerStart");
addToContainers_function("PostEditMove", "", "Docs/Classes/ARTSPlayerStart/Functions/PostEditMove.html", ["post", "edit", "move"], "ARTSPlayerStart");
addToContainers_function("TellLevelVolumeToUpdateMapInfo", "Tell the level volume to update the map info", "Docs/Classes/ARTSPlayerStart/Functions/TellLevelVolumeToUpdateMapInfo.html", ["tell", "level", "volume", "to", "update", "map", "info"], "ARTSPlayerStart");
addToContainers_function("SetUniqueID", "", "Docs/Classes/ARTSPlayerStart/Functions/SetUniqueID.html", ["set", "unique", "i", "d"], "ARTSPlayerStart");
addToContainers_function("GetUniquePlayerStartID", "", "Docs/Classes/ARTSPlayerStart/Functions/GetUniquePlayerStartID.html", ["get", "unique", "player", "start", "i", "d"], "ARTSPlayerStart");
addToContainers_variable("UniqueID", "Unique ID to easily identify", "Docs/Classes/ARTSPlayerStart/Variables/UniqueID.html", ["unique", "i", "d"], "ARTSPlayerStart");
addToContainers_class("AAbilityBase", "This class should be overridden. It is used to create effects of when context buttons are clicked, such as calling down an artillery strike or healing an ally. It is very basic. All functionaility is left to the user to implement. Some notes though: This is a manager/info type class - only one effect actor is spawned for every type of effect. This means using things like GetActorLocation() within a class deriving from this is not useful. Instead a struct for each active effect is used. This stores state for each instance of the effect active. If you need more state info then create a custom struct for your custom effect. See ArtilleryStrike.h for an example. Because of this, no actors are spawned during gameplay. \"Spawn\" behavior should be implemented inside Server_Start/Client_Start. Effects do not replicate. If the effect has random behavior then a random number seed can be passed to clients by saving the return value of Sever_Start. Otherwise you can ignore it =============================================================================================== ----------------------------------------------------------------------------------------------- A non-comprehensive list of things you cannot do with abilities: - put another ability on cooldown (similar to counterspell in WoW) - teleportation effects ----------------------------------------------------------------------------------------------- =============================================================================================== List of things already checked by PC and do not need to be in the IsUsable_ functions: - whether ability is on cooldown - whether target is not null, valid, the right affiliation and whether they are ourself - whether target is the right targeting type - maybe some other stuff TODO inherit from UObject instead of AInfo since not replicated?", "Docs/Classes/AAbilityBase/AAbilityBase.html", ["ability", "base"], "");
addToContainers_function("AAbilityBase", "", "Docs/Classes/AAbilityBase/Functions/AAbilityBase.html", ["ability", "base"], "AAbilityBase");
addToContainers_function("BeginPlay", "Use Server_Start and Client_Start to start behaviour", "Docs/Classes/AAbilityBase/Functions/BeginPlay.html", ["begin", "play"], "AAbilityBase");
addToContainers_function("GenerateInitialRandomSeed", "Generate initial random int to be used for random stream. Note we use a 16 bit integer as the seed to reduce the amount of data sent across the wire", "Docs/Classes/AAbilityBase/Functions/GenerateInitialRandomSeed.html", ["generate", "initial", "random", "seed"], "AAbilityBase");
addToContainers_function("GetRandomFloat", "Generate random float within range", "Docs/Classes/AAbilityBase/Functions/GetRandomFloat.html", ["get", "random", "float"], "AAbilityBase");
addToContainers_function("GetRandomInteger", "Generate random int32 within range, inclusive of Min and Max @param Min - the minimum number possible @param Max - the maximum number possible @return - random number between Min and Max inclusive", "Docs/Classes/AAbilityBase/Functions/GetRandomInteger.html", ["get", "random", "integer"], "AAbilityBase");
addToContainers_function("SeedAs16BitTo32Bit", "Convert the initial seed from 16 bit number to 32 bit number that we can use in the FRandomStream constructor", "Docs/Classes/AAbilityBase/Functions/SeedAs16BitTo32Bit.html", ["seed", "as16", "bit", "to32", "bit"], "AAbilityBase");
addToContainers_function("HasMultipleOutcomes", "", "Docs/Classes/AAbilityBase/Functions/HasMultipleOutcomes.html", ["has", "multiple", "outcomes"], "AAbilityBase");
addToContainers_function("IsAoEAbilityForStart", "Whether the ability has an AoE effect at the time it is used e.g. an ability that will put a debuff on every enemy within 500cm. I have not implemented anything to do with abilities that have AoE effects that happen after their initial time of use e.g. an ability that does 10 damage in a 500cm radius every sec for 6 sec - this is something I have not added any support for yet", "Docs/Classes/AAbilityBase/Functions/IsAoEAbilityForStart.html", ["is", "ao", "e", "ability", "for", "start"], "AAbilityBase");
addToContainers_function("AoEHitsHaveMultipleOutcomes", "", "Docs/Classes/AAbilityBase/Functions/AoEHitsHaveMultipleOutcomes.html", ["ao", "e", "hits", "have", "multiple", "outcomes"], "AAbilityBase");
addToContainers_function("RequiresTargetOtherThanSelf", "Whether to send a target over the wire or not", "Docs/Classes/AAbilityBase/Functions/RequiresTargetOtherThanSelf.html", ["requires", "target", "other", "than", "self"], "AAbilityBase");
addToContainers_function("RequiresLocation", "Whether to send a location over the wire or not", "Docs/Classes/AAbilityBase/Functions/RequiresLocation.html", ["requires", "location"], "AAbilityBase");
addToContainers_function("HasRandomBehavior", "Whether to send a random seed over the wire or not", "Docs/Classes/AAbilityBase/Functions/HasRandomBehavior.html", ["has", "random", "behavior"], "AAbilityBase");
addToContainers_function("RequiresTickCount", "Whether the ability requires knowing what the server\'s RTS tick counter was at the time the ability happened. Currently unless your ability modifies selectable resources (mana) you do not need this", "Docs/Classes/AAbilityBase/Functions/RequiresTickCount.html", ["requires", "tick", "count"], "AAbilityBase");
addToContainers_function("IsUsable_SelfChecks", "This is called for both 1 and 2 click abilities. For 2 click abilities it is called both when the first click is done and when the 2nd is done also (could change this though but I don\'t forsee any abilities that wouldn\'t want this called automatically on the 2nd click aswell - it doesn\'t really make sense for an ability to allow the user to find a target/location for it but then not do those same checks when it comes time to actually activate the ability). Can probably assume instigator is valid. SelfChecks isn\'t a 100% true name. Can check anything like the elapsed time in the match, more accurate is IsUsable_OnButtonClickOrMouseClick This function returns whether the selectable instigating the ability is in a state that allows it to do so. Some things like cooldown are automatically checked and do not need to be included in this check. If your ability has some custom logic like \"only usable when below 40% health\" or \"only usable if the buff \"Haste\" is present then this is where to check that stuff now @param OutMissingRequirement - if function returns false a reason it did so @return - true if all checks passed", "Docs/Classes/AAbilityBase/Functions/IsUsable_SelfChecks.html", ["is", "usable_", "self", "checks"], "AAbilityBase");
addToContainers_function("IsUsable_SelfChecks", "Overloaded version for the times we don\'t care about the reason", "Docs/Classes/AAbilityBase/Functions/IsUsable_SelfChecks_1.html", ["is", "usable_", "self", "checks"], "AAbilityBase");
addToContainers_function("IsUsable_TargetChecks", "This is only for abilities that require 2 mouse clicks. Given a instigator and a target return whether the target is a useable target. Possibly can assume both are valid. Currently some stuff is already done by the player controller such as: - targeting type check - whether target is friendly/hostile - whether we can target self - more stuff @See FContextButtonInfo so these things do not need to appear in this function. TargetChecks isn\'t 100% accurate. Can check other things too. More accurate would be IsUsable_OnTargetAquiredChecks Main purpose of this function is to check things on the target, not yourself @param AbilityInstigator - the actor that instigated the ability, usually a selectable @param Target - the target of the ability, usually a selectable @param OutMissingRequirement - if function returns false a reason it did so @return - true if all checks passed", "Docs/Classes/AAbilityBase/Functions/IsUsable_TargetChecks.html", ["is", "usable_", "target", "checks"], "AAbilityBase");
addToContainers_function("IsUsable_TargetChecks", "Overloaded version for the times when we don\'t care about the reason", "Docs/Classes/AAbilityBase/Functions/IsUsable_TargetChecks_1.html", ["is", "usable_", "target", "checks"], "AAbilityBase");
addToContainers_function("Server_Begin", "Macros to call Super::Server_Begin and Super::Client_Begin", "Docs/Classes/AAbilityBase/Functions/Server_Begin.html", ["server_", "begin"], "AAbilityBase");
addToContainers_function("Client_Begin", "Start behaviour client-side. You can assume every actor passed in as a param is valid. @param EffectInstigator - selectable that instigated this effect @param InstigatorsTeam - team instigator is on @param Location - a world location where we consider the ability was used. Dependent on if bRequiresLocation was set true @param Target - target of ability if any. @param MethodOfUsage - indicates how this ability was instigated e.g. context menu button, inventory item use, etc @param AuxilleryUsageData - one thing this is used for is for knowing what inventory slot was used if this ability is being used as an inventory item use. @param Outcome - the outcome of the ability. If the ability only has one outcome then this can be ignored @param Hits - if the ability can hit multiple actors, the actors plus the outcome of the hit. If the hits don\'t have more than one outcome then the outcome can be ignored @param RandomNumberSeed - seed from server to use for generating random numbers if required @param ServerTickCountAtTimeOfAbility - what GS::GetGameTickCounter() returned on the server when the ability was used on the server. If the ability does not have a selectable resource cost or does not modify anyone\'s mana in any way then this is actually irrelevant.", "Docs/Classes/AAbilityBase/Functions/Client_Begin.html", ["client_", "begin"], "AAbilityBase");
addToContainers_function("OnListenedProjectileHit", "If the ability fires projectiles it can choose to be notified when they hit something. This function is called if the ability chooses to listen on projectiles @param AbilityInstanceUniqueID - the unique ID of the ability", "Docs/Classes/AAbilityBase/Functions/OnListenedProjectileHit.html", ["on", "listened", "projectile", "hit"], "AAbilityBase");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AAbilityBase/Variables/.html", [], "AAbilityBase");
addToContainers_variable("bHasMultipleOutcomes", "Whether the ability has multiple outcomes that we should tell the client about. This excludes hits on AoE abilities False = save 1 byte", "Docs/Classes/AAbilityBase/Variables/bHasMultipleOutcomes.html", ["has", "multiple", "outcomes"], "AAbilityBase");
addToContainers_variable("bCallAoEStartFunction", "Whether this ability has some kind of AoE effect and the result of what is hits would like to be sent across the wire Example of true: ghost EMP Example of false: ghost cloaking, ghost snipe Currently I have not implemented any kind of persistent AoE behavior e.g. an ability that every second deals 500 damage to stuff within 500 range for 6 seconds. For this there will need to be an RPC or something to handle this", "Docs/Classes/AAbilityBase/Variables/bCallAoEStartFunction.html", ["call", "ao", "e", "start", "function"], "AAbilityBase");
addToContainers_variable("bAoEHitsHaveMultipleOutcomes", "This is only relevant if bCallAoEStartFunction is true. Whether there is more than one outcome to each hit selectable", "Docs/Classes/AAbilityBase/Variables/bAoEHitsHaveMultipleOutcomes.html", ["ao", "e", "hits", "have", "multiple", "outcomes"], "AAbilityBase");
addToContainers_variable("bRequiresTargetOtherThanSelf", "If true the server will send a target for the ability. If the user is always the target e.g. it\'s a self heal, self buff, etc type ability then you can turn this off Example of true: ghost snipe Example of false: ghost cloaking, ghost EMP", "Docs/Classes/AAbilityBase/Variables/bRequiresTargetOtherThanSelf.html", ["requires", "target", "other", "than", "self"], "AAbilityBase");
addToContainers_variable("bRequiresLocation", "Whether we need to send the location of the ability. We always send the user, so if the user\'s location is enough then you can turn this off. Example of true: ghost EMP Example of false: ghost cloaking, ghost snipe", "Docs/Classes/AAbilityBase/Variables/bRequiresLocation.html", ["requires", "location"], "AAbilityBase");
addToContainers_variable("bHasRandomBehavior", "Whether this ability has random behavior, excluding random damage amounts. If only damage amounts are random then you can safely turn this off to save some bandwidth.", "Docs/Classes/AAbilityBase/Variables/bHasRandomBehavior.html", ["has", "random", "behavior"], "AAbilityBase");
addToContainers_variable("bRequiresTickCount", "This is currently only needed by abilities that modify selectable resources (mana)", "Docs/Classes/AAbilityBase/Variables/bRequiresTickCount.html", ["requires", "tick", "count"], "AAbilityBase");
addToContainers_class("AAbility_AoEBuffOrDebuff", "Applies a buff or debuff to selectables in an area of effect", "Docs/Classes/AAbility_AoEBuffOrDebuff/AAbility_AoEBuffOrDebuff.html", ["ability_", "ao", "e", "buff", "or", "debuff"], "");
addToContainers_function("AAbility_AoEBuffOrDebuff", "", "Docs/Classes/AAbility_AoEBuffOrDebuff/Functions/AAbility_AoEBuffOrDebuff.html", ["ability_", "ao", "e", "buff", "or", "debuff"], "AAbility_AoEBuffOrDebuff");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_AoEBuffOrDebuff/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_AoEBuffOrDebuff");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_AoEBuffOrDebuff/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether to apply a static type buff/debuff or a tickable type buff/debuff", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_1.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_2.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Area of effect", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_3.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether it affects enemies", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_4.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether it affects friendlies. Note if this and bCanHitEnemies are both false then this ability cannot hit anything!", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_5.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_variable("", "Whether it affects flying units", "Docs/Classes/AAbility_AoEBuffOrDebuff/Variables/_6.html", [], "AAbility_AoEBuffOrDebuff");
addToContainers_class("AAbility_AoEDamage", "Deals damage in an area of effect.", "Docs/Classes/AAbility_AoEDamage/AAbility_AoEDamage.html", ["ability_", "ao", "e", "damage"], "");
addToContainers_function("AAbility_AoEDamage", "", "Docs/Classes/AAbility_AoEDamage/Functions/AAbility_AoEDamage.html", ["ability_", "ao", "e", "damage"], "AAbility_AoEDamage");
addToContainers_function("BeginPlay", "", "Docs/Classes/AAbility_AoEDamage/Functions/BeginPlay.html", ["begin", "play"], "AAbility_AoEDamage");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_AoEDamage/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_AoEDamage");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_AoEDamage/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_AoEDamage");
addToContainers_function("CheckCurves", "Checks the curve assets are usable", "Docs/Classes/AAbility_AoEDamage/Functions/CheckCurves.html", ["check", "curves"], "AAbility_AoEDamage");
addToContainers_function("DealDamage", "", "Docs/Classes/AAbility_AoEDamage/Functions/DealDamage.html", ["deal", "damage"], "AAbility_AoEDamage");
addToContainers_function("DealDamageAfterDelay", "Call DealDamage after a delay", "Docs/Classes/AAbility_AoEDamage/Functions/DealDamageAfterDelay.html", ["deal", "damage", "after", "delay"], "AAbility_AoEDamage");
addToContainers_function("CalculateDamage", "Calculate how much damage to pass into HitTarget->TakeDamage", "Docs/Classes/AAbility_AoEDamage/Functions/CalculateDamage.html", ["calculate", "damage"], "AAbility_AoEDamage");
addToContainers_function("ShowTargetLocationParticles", "Show particle system at location", "Docs/Classes/AAbility_AoEDamage/Functions/ShowTargetLocationParticles.html", ["show", "target", "location", "particles"], "AAbility_AoEDamage");
addToContainers_function("GetTargetLocationParticlesRotation", "", "Docs/Classes/AAbility_AoEDamage/Functions/GetTargetLocationParticlesRotatio.html", ["get", "target", "location", "particles", "rotation"], "AAbility_AoEDamage");
addToContainers_function("PlayTargetLocationSound", "", "Docs/Classes/AAbility_AoEDamage/Functions/PlayTargetLocationSound.html", ["play", "target", "location", "sound"], "AAbility_AoEDamage");
addToContainers_variable("", "Radius", "Docs/Classes/AAbility_AoEDamage/Variables/.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Base amount of damage to deal before taking into account falloff", "Docs/Classes/AAbility_AoEDamage/Variables/_1.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Type of damage to deal", "Docs/Classes/AAbility_AoEDamage/Variables/_2.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_AoEDamage/Variables/_3.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "The curve to use for damage falloff. If no curve is specified then there will be no damage falloff - every selectable hit will take full damage. X axis = range from center. Larger implies further from ability center. Axis range: [0, 1] Y axis = normalized percentage of BaseDamage to deal. Probably want range [0, 1]", "Docs/Classes/AAbility_AoEDamage/Variables/_4.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "The delay from when the ability is used to when the damage happens. 0 = instant", "Docs/Classes/AAbility_AoEDamage/Variables/_5.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Whether it can hit enemies", "Docs/Classes/AAbility_AoEDamage/Variables/_6.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Whether it can hit friendlies. Note if this and bCanHitEnemies are both false then this ability cannot hit anything!", "Docs/Classes/AAbility_AoEDamage/Variables/_7.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Whether it affects flying units", "Docs/Classes/AAbility_AoEDamage/Variables/_8.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Optional particle system to show at target location", "Docs/Classes/AAbility_AoEDamage/Variables/_9.html", [], "AAbility_AoEDamage");
addToContainers_variable("", "Optional sound to play at the target location", "Docs/Classes/AAbility_AoEDamage/Variables/_10.html", [], "AAbility_AoEDamage");
addToContainers_class("AAbility_ApplyBuffDebuffToTarget", "Applys a buff/debuff to a target", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/AAbility_ApplyBuffDebuffToTarget.html", ["ability_", "apply", "buff", "debuff", "to", "target"], "");
addToContainers_function("AAbility_ApplyBuffDebuffToTarget", "", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Functions/AAbility_ApplyBuffDebuffToTarget.html", ["ability_", "apply", "buff", "debuff", "to", "target"], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_variable("", "Whether to apply a static type buff/debuff or a tickable type buff/debuff", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Variables/.html", [], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Variables/_1.html", [], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_ApplyBuffDebuffToTarget/Variables/_2.html", [], "AAbility_ApplyBuffDebuffToTarget");
addToContainers_struct("FArtilleryStrikeInfo", "Info for a single artillery strike instance", "Docs/Structs/FArtilleryStrikeInfo/FArtilleryStrikeInfo.html", ["artillery", "strike", "info"], "");
addToContainers_function("FArtilleryStrikeInfo", "Never call this. Always call param version", "Docs/Structs/FArtilleryStrikeInfo/Functions/FArtilleryStrikeInfo.html", ["artillery", "strike", "info"], "FArtilleryStrikeInfo");
addToContainers_function("FArtilleryStrikeInfo", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/FArtilleryStrikeInfo_1.html", ["artillery", "strike", "info"], "FArtilleryStrikeInfo");
addToContainers_function("GetLocation", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/GetLocation.html", ["get", "location"], "FArtilleryStrikeInfo");
addToContainers_function("GetInstigator", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/GetInstigator.html", ["get", "instigator"], "FArtilleryStrikeInfo");
addToContainers_function("GetInstigatorsTeam", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/GetInstigatorsTeam.html", ["get", "instigators", "team"], "FArtilleryStrikeInfo");
addToContainers_function("GetLastYawRot", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/GetLastYawRot.html", ["get", "last", "yaw", "rot"], "FArtilleryStrikeInfo");
addToContainers_function("SetLastYawRot", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/SetLastYawRot.html", ["set", "last", "yaw", "rot"], "FArtilleryStrikeInfo");
addToContainers_function("GetActionTimerHandle", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/GetActionTimerHandle.html", ["get", "action", "timer", "handle"], "FArtilleryStrikeInfo");
addToContainers_function("GetNumProjectilesRemaining", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/GetNumProjectilesRemaining.html", ["get", "num", "projectiles", "remaining"], "FArtilleryStrikeInfo");
addToContainers_function("DecrementNumProjectiles", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/DecrementNumProjectiles.html", ["decrement", "num", "projectiles"], "FArtilleryStrikeInfo");
addToContainers_function("GetRandomStream", "", "Docs/Structs/FArtilleryStrikeInfo/Functions/GetRandomStream.html", ["get", "random", "stream"], "FArtilleryStrikeInfo");
addToContainers_variable("", "", "Docs/Structs/FArtilleryStrikeInfo/Variables/.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "Number of projectiles remaining to fire", "Docs/Structs/FArtilleryStrikeInfo/Variables/_1.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("Instigator", "The actor that instigated this artillery strike", "Docs/Structs/FArtilleryStrikeInfo/Variables/Instigator.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "The team of the ability\'s user. Here so we know what collision channel to set on the projectiles", "Docs/Structs/FArtilleryStrikeInfo/Variables/_2.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "", "Docs/Structs/FArtilleryStrikeInfo/Variables/_3.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "The yaw rotation of the last projectile spawned", "Docs/Structs/FArtilleryStrikeInfo/Variables/_4.html", [], "FArtilleryStrikeInfo");
addToContainers_variable("", "Timer handle to control actions", "Docs/Structs/FArtilleryStrikeInfo/Variables/_5.html", [], "FArtilleryStrikeInfo");
addToContainers_class("AAbility_ArtilleryStrike", "Optionally fires a projectile at a location. This can be a beacon or something. Then spawns several projectiles in a random fashion. It is very light on bandwidth and is intended to not be something that goes on for ages (more than 30 seconds) as clients will no doubt drift from the state it is on the server.", "Docs/Classes/AAbility_ArtilleryStrike/AAbility_ArtilleryStrike.html", ["ability_", "artillery", "strike"], "");
addToContainers_function("AAbility_ArtilleryStrike", "", "Docs/Classes/AAbility_ArtilleryStrike/Functions/AAbility_ArtilleryStrike.html", ["ability_", "artillery", "strike"], "AAbility_ArtilleryStrike");
addToContainers_function("BeginPlay", "", "Docs/Classes/AAbility_ArtilleryStrike/Functions/BeginPlay.html", ["begin", "play"], "AAbility_ArtilleryStrike");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_ArtilleryStrike/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_ArtilleryStrike");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_ArtilleryStrike/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_ArtilleryStrike");
addToContainers_function("OnListenedProjectileHit", "", "Docs/Classes/AAbility_ArtilleryStrike/Functions/OnListenedProjectileHit.html", ["on", "listened", "projectile", "hit"], "AAbility_ArtilleryStrike");
addToContainers_function("GetRandomSpot", "Return random spot within radius around this, taking into account the constraints of the rotation and distance curves. @return - random spot in radius", "Docs/Classes/AAbility_ArtilleryStrike/Functions/GetRandomSpot.html", ["get", "random", "spot"], "AAbility_ArtilleryStrike");
addToContainers_function("GetRandomDistanceFromCenter", "", "Docs/Classes/AAbility_ArtilleryStrike/Functions/GetRandomDistanceFromCenter.html", ["get", "random", "distance", "from", "center"], "AAbility_ArtilleryStrike");
addToContainers_function("GetRandomYawRotation", "Get random yaw rotation taking into account constraints from rotation curve. @param InYaw - yaw rotation to find new rotation from", "Docs/Classes/AAbility_ArtilleryStrike/Functions/GetRandomYawRotation.html", ["get", "random", "yaw", "rotation"], "AAbility_ArtilleryStrike");
addToContainers_function("SpawnProjectile", "Spawn a projectile", "Docs/Classes/AAbility_ArtilleryStrike/Functions/SpawnProjectile.html", ["spawn", "projectile"], "AAbility_ArtilleryStrike");
addToContainers_function("EndEffect", "What we call when the artillirty strike is finished", "Docs/Classes/AAbility_ArtilleryStrike/Functions/EndEffect.html", ["end", "effect"], "AAbility_ArtilleryStrike");
addToContainers_function("SetupCurveValues", "", "Docs/Classes/AAbility_ArtilleryStrike/Functions/SetupCurveValues.html", ["setup", "curve", "values"], "AAbility_ArtilleryStrike");
addToContainers_function("Delay_SpawnProjectile", "Call SpawnProjectile after delay @param Delay - delay for calling function", "Docs/Classes/AAbility_ArtilleryStrike/Functions/Delay_SpawnProjectile.html", ["delay_", "spawn", "projectile"], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Map from unique ID to state info about each active strike", "Docs/Classes/AAbility_ArtilleryStrike/Variables/.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_1.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Optional projectile to fire at the target location. This was added so something like a smoke beacon could be thrown at the location signalling a strike is coming. Then when this beacon projectile hits the first artillery projectile will be spawned after InitialDelay. If this is kept null then the strike will just happen after InitialDelay.", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_2.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("BeaconProjectileDamageInfo", "Damage attributes to pass in for the beacon. They have been set to do 0 damage", "Docs/Classes/AAbility_ArtilleryStrike/Variables/BeaconProjectileDamageInfo.html", ["beacon", "projectile", "damage", "info"], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Area projectiles can spawn in", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_3.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Projectiles to spawn. Things such as initial speed and friendly fire should be defined in this BP", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_4.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Whether to override the projectiles damage attributes", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_5.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Damage of each projectile", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_6.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "How many projectiles to spawn", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_7.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Delay from when action is executed to when first projectile spawns or if beacon projecitle is set the time from when it arrives at the target location", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_8.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Minimum amount of time between projectile spawn. To eliminate randomness set this equal to MaxInterval. If both are equal then all projectiles spawn at the same time", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_9.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Maximum amount of time between projectile spawn. To eliminate randomness set this equal to MinInterval. If both equal to 0 then all projectiles spawn at the same time", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_10.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "The height above spawn location to spawn projectiles from", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_11.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Optional. A curve to define how yaw rotation is applied to the spawn location of each projectile relative to the last projectile spawned. Without a curve the rotation will be a random float in the range 0 to 360. This means there is a chance projectiles can spawn close to each other which may not be desired behaviour. With a curve you can define the chances of this happening. X axis = arbitrary. A random point will be picked along the X axis and its Y value (normalized to the range 0...180, and given random sign) will be the rotation to apply to the next projectile Y axis = rotation to apply to next projectile. For clarity you may want to set the range for the Y axis to be from 0 to 180", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_12.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("", "Just like the rotation curve but for the distance to spawn the projectile from the center. This one is not relative to the last projectile spawned though. Automatically normalized at runtime. If no curve is specified a linear curve will be used (random value from 0 to Radius, with each value equal probability). X axis = arbitrary. A random point will be picked along the X axis and its Y value (normalized to the range 0...Radius) will be the distance from center next projectile will spawn at Y axis = distance from center (mapped from [YAxisMin, YAxisMax] to [0, Radius])", "Docs/Classes/AAbility_ArtilleryStrike/Variables/_13.html", [], "AAbility_ArtilleryStrike");
addToContainers_variable("RotationCurveMaxY", "Axis values from curves", "Docs/Classes/AAbility_ArtilleryStrike/Variables/RotationCurveMaxY.html", ["rotation", "curve", "max", "y"], "AAbility_ArtilleryStrike");
addToContainers_variable("DistanceCurveMaxY", "", "Docs/Classes/AAbility_ArtilleryStrike/Variables/DistanceCurveMaxY.html", ["distance", "curve", "max", "y"], "AAbility_ArtilleryStrike");
addToContainers_class("AAbility_BasicApplyBuffOrDebuff", "Just applies a buff or debuff to a someone. No particles or anything like that. This only works for applying buffs/debuffs to self, not to anyone else", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/AAbility_BasicApplyBuffOrDebuff.html", ["ability_", "basic", "apply", "buff", "or", "debuff"], "");
addToContainers_function("AAbility_BasicApplyBuffOrDebuff", "", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Functions/AAbility_BasicApplyBuffOrDebuff.html", ["ability_", "basic", "apply", "buff", "or", "debuff"], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_variable("", "Whether to apply a static type buff/debuff or a tickable type buff/debuff", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Variables/.html", [], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Variables/_1.html", [], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_variable("", "The type of buff/debuff to apply", "Docs/Classes/AAbility_BasicApplyBuffOrDebuff/Variables/_2.html", [], "AAbility_BasicApplyBuffOrDebuff");
addToContainers_class("AAbility_BasicSingleTargetDamage", "Deals damage to a target I basically ignored what I had done with UE4.19 and implemented this from scratch. Could look back at that version and see if there\'s anything useful there", "Docs/Classes/AAbility_BasicSingleTargetDamage/AAbility_BasicSingleTargetDamage.html", ["ability_", "basic", "single", "target", "damage"], "");
addToContainers_function("AAbility_BasicSingleTargetDamage", "", "Docs/Classes/AAbility_BasicSingleTargetDamage/Functions/AAbility_BasicSingleTargetDamage.html", ["ability_", "basic", "single", "target", "damage"], "AAbility_BasicSingleTargetDamage");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_BasicSingleTargetDamage/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_BasicSingleTargetDamage");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_BasicSingleTargetDamage/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_BasicSingleTargetDamage");
addToContainers_function("ShowTargetParticles", "~ End AAbilityBase interface", "Docs/Classes/AAbility_BasicSingleTargetDamage/Functions/ShowTargetParticles.html", ["show", "target", "particles"], "AAbility_BasicSingleTargetDamage");
addToContainers_function("PlayTargetSound", "", "Docs/Classes/AAbility_BasicSingleTargetDamage/Functions/PlayTargetSound.html", ["play", "target", "sound"], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "How much damage to deal", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "The type of damage to deal", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_1.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_2.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_3.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_4.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_BasicSingleTargetDamage/Variables/_5.html", [], "AAbility_BasicSingleTargetDamage");
addToContainers_class("AAbility_BuffAndDebuffRemoval", "Removes a buff/debuff", "Docs/Classes/AAbility_BuffAndDebuffRemoval/AAbility_BuffAndDebuffRemoval.html", ["ability_", "buff", "and", "debuff", "removal"], "");
addToContainers_function("AAbility_BuffAndDebuffRemoval", "", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Functions/AAbility_BuffAndDebuffRemoval.html", ["ability_", "buff", "and", "debuff", "removal"], "AAbility_BuffAndDebuffRemoval");
addToContainers_function("IsUsable_TargetChecks", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Functions/IsUsable_TargetChecks.html", ["is", "usable_", "target", "checks"], "AAbility_BuffAndDebuffRemoval");
addToContainers_function("Server_Begin", "", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_BuffAndDebuffRemoval");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_BuffAndDebuffRemoval");
addToContainers_variable("", "The buff/debuff this ability removes", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Variables/.html", [], "AAbility_BuffAndDebuffRemoval");
addToContainers_variable("", "Whether BuffOrDebuffToRemove is a buff or debuff. Important to get this right", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Variables/_1.html", [], "AAbility_BuffAndDebuffRemoval");
addToContainers_variable("", "What we consider the reason the buff/debuff was removed", "Docs/Classes/AAbility_BuffAndDebuffRemoval/Variables/_2.html", [], "AAbility_BuffAndDebuffRemoval");
addToContainers_class("AAbility_CullingBladeClone", "Deals damage to target. Amount varies based on how much health the target has.", "Docs/Classes/AAbility_CullingBladeClone/AAbility_CullingBladeClone.html", ["ability_", "culling", "blade", "clone"], "");
addToContainers_function("AAbility_CullingBladeClone", "", "Docs/Classes/AAbility_CullingBladeClone/Functions/AAbility_CullingBladeClone.html", ["ability_", "culling", "blade", "clone"], "AAbility_CullingBladeClone");
addToContainers_function("Server_Begin", "", "Docs/Classes/AAbility_CullingBladeClone/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_CullingBladeClone");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_CullingBladeClone/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_CullingBladeClone");
addToContainers_function("ShowTargetParticles", "", "Docs/Classes/AAbility_CullingBladeClone/Functions/ShowTargetParticles.html", ["show", "target", "particles"], "AAbility_CullingBladeClone");
addToContainers_function("PlayTargetSound", "", "Docs/Classes/AAbility_CullingBladeClone/Functions/PlayTargetSound.html", ["play", "target", "sound"], "AAbility_CullingBladeClone");
addToContainers_variable("", "Absolute value of health where behavior varies", "Docs/Classes/AAbility_CullingBladeClone/Variables/.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Damage when target is below threshold", "Docs/Classes/AAbility_CullingBladeClone/Variables/_1.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_CullingBladeClone/Variables/_2.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_CullingBladeClone/Variables/_3.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_CullingBladeClone/Variables/_4.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Damage when target is above threshold", "Docs/Classes/AAbility_CullingBladeClone/Variables/_5.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_CullingBladeClone/Variables/_6.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_CullingBladeClone/Variables/_7.html", [], "AAbility_CullingBladeClone");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_CullingBladeClone/Variables/_8.html", [], "AAbility_CullingBladeClone");
addToContainers_class("AAbility_DamageAndRestoreMana", "- Deal damage damage to a single target. - Instigator restores some mana if they kill the target with this ability. Amount restored is based on the resource cost of the target.", "Docs/Classes/AAbility_DamageAndRestoreMana/AAbility_DamageAndRestoreMana.html", ["ability_", "damage", "and", "restore", "mana"], "");
addToContainers_function("AAbility_DamageAndRestoreMana", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/AAbility_DamageAndRestoreMana.html", ["ability_", "damage", "and", "restore", "mana"], "AAbility_DamageAndRestoreMana");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_DamageAndRestoreMana");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_DamageAndRestoreMana");
addToContainers_function("ShowInstigatorParticles", "~ End AAbilityBase interface", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/ShowInstigatorParticles.html", ["show", "instigator", "particles"], "AAbility_DamageAndRestoreMana");
addToContainers_function("ShowTargetParticles", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/ShowTargetParticles.html", ["show", "target", "particles"], "AAbility_DamageAndRestoreMana");
addToContainers_function("PlayTargetSound", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/PlayTargetSound.html", ["play", "target", "sound"], "AAbility_DamageAndRestoreMana");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "The selectable resource that is restored if the target is killed", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "How much to multiply the resource by e.g. if the mineral cost of the destroyed unit is 200 and the mineral entry in here equals 0.5f then 100 mana is restored", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_1.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Populated on post edit. Here because it\'s faster iteration an array instead of a hashmap", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_2.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "How much damage to deal", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_3.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "The type of damage to deal", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_4.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_5.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional particles to spawn on the instigator", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_6.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on the instigator InstigatorParticles_Template should spawn", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_7.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional particle system template to attach to target if they are not killed", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_8.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on the target selectable the particles should try attach to.", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_9.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Particles to show on the instigator only if they successfully kill the target", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_10.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on instigator to spawn the success particles", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_11.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional particle system template to attach to target if they are killed by ability", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_12.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Where on the target selectable the particles should spawn at.", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_13.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional sound to play at target location when the ability does not kill the target", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_14.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "Optional sound to play at target location when the ability kills the target", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_15.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "============================================================================================", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_16.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_17.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_18.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_variable("", "", "Docs/Classes/AAbility_DamageAndRestoreMana/Variables/_19.html", [], "AAbility_DamageAndRestoreMana");
addToContainers_class("AAbility_FinishingBlow", "Only usable on targets with health below a certain percentage Deals damage to a target.", "Docs/Classes/AAbility_FinishingBlow/AAbility_FinishingBlow.html", ["ability_", "finishing", "blow"], "");
addToContainers_function("AAbility_FinishingBlow", "", "Docs/Classes/AAbility_FinishingBlow/Functions/AAbility_FinishingBlow.html", ["ability_", "finishing", "blow"], "AAbility_FinishingBlow");
addToContainers_function("IsUsable_TargetChecks", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_FinishingBlow/Functions/IsUsable_TargetChecks.html", ["is", "usable_", "target", "checks"], "AAbility_FinishingBlow");
addToContainers_function("Server_Begin", "", "Docs/Classes/AAbility_FinishingBlow/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_FinishingBlow");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_FinishingBlow/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_FinishingBlow");
addToContainers_function("GetOutgoingDamage", "~ End AAbilityBase interface", "Docs/Classes/AAbility_FinishingBlow/Functions/GetOutgoingDamage.html", ["get", "outgoing", "damage"], "AAbility_FinishingBlow");
addToContainers_function("ShowTargetParticles", "", "Docs/Classes/AAbility_FinishingBlow/Functions/ShowTargetParticles.html", ["show", "target", "particles"], "AAbility_FinishingBlow");
addToContainers_function("PlayTargetSound", "", "Docs/Classes/AAbility_FinishingBlow/Functions/PlayTargetSound.html", ["play", "target", "sound"], "AAbility_FinishingBlow");
addToContainers_variable("", "Percentage of health target must be below to be able to use ability (normalized to range [0, 1] of course)", "Docs/Classes/AAbility_FinishingBlow/Variables/.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "How much damage to deal to target", "Docs/Classes/AAbility_FinishingBlow/Variables/_1.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Type of damage to deal", "Docs/Classes/AAbility_FinishingBlow/Variables/_2.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_FinishingBlow/Variables/_3.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_FinishingBlow/Variables/_4.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_FinishingBlow/Variables/_5.html", [], "AAbility_FinishingBlow");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_FinishingBlow/Variables/_6.html", [], "AAbility_FinishingBlow");
addToContainers_class("AAbility_ManaBurn", "Single target. Modifies target\'s selectable resource (mana) and optionally deals damage. Amount of damage dealt can be based on the amount of mana burned.", "Docs/Classes/AAbility_ManaBurn/AAbility_ManaBurn.html", ["ability_", "mana", "burn"], "");
addToContainers_function("AAbility_ManaBurn", "", "Docs/Classes/AAbility_ManaBurn/Functions/AAbility_ManaBurn.html", ["ability_", "mana", "burn"], "AAbility_ManaBurn");
addToContainers_function("IsUsable_TargetChecks", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_ManaBurn/Functions/IsUsable_TargetChecks.html", ["is", "usable_", "target", "checks"], "AAbility_ManaBurn");
addToContainers_function("Server_Begin", "", "Docs/Classes/AAbility_ManaBurn/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_ManaBurn");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_ManaBurn/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_ManaBurn");
addToContainers_function("GetOutgoingDamage", "Get how much damage to pass into Target->TakeDamage. @param ResourceAmountDrain - how much of the selectable resource was drained. Negative means it was gained", "Docs/Classes/AAbility_ManaBurn/Functions/GetOutgoingDamage.html", ["get", "outgoing", "damage"], "AAbility_ManaBurn");
addToContainers_function("ShowTargetParticles", "", "Docs/Classes/AAbility_ManaBurn/Functions/ShowTargetParticles.html", ["show", "target", "particles"], "AAbility_ManaBurn");
addToContainers_function("PlayTargetSound", "", "Docs/Classes/AAbility_ManaBurn/Functions/PlayTargetSound.html", ["play", "target", "sound"], "AAbility_ManaBurn");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AAbility_ManaBurn/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AAbility_ManaBurn");
addToContainers_variable("", "The selectable resource to burn", "Docs/Classes/AAbility_ManaBurn/Variables/.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "The type of message to show if the target does not have the selectable resource type we are trying to modify. My notes: maybe this could be defined somewhere where we map ESelectableResourceType to EAbilityRequirement. For now users have to do it manually", "Docs/Classes/AAbility_ManaBurn/Variables/_1.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Amount of selectable resource to burn. Negative values = target gains selectable resource", "Docs/Classes/AAbility_ManaBurn/Variables/_2.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "How damage is calculated", "Docs/Classes/AAbility_ManaBurn/Variables/_3.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Percentage of selectable resource amount drained to deal in damage", "Docs/Classes/AAbility_ManaBurn/Variables/_4.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "If using absolute damage the amount to deal", "Docs/Classes/AAbility_ManaBurn/Variables/_5.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Type of damage to deal", "Docs/Classes/AAbility_ManaBurn/Variables/_6.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_ManaBurn/Variables/_7.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Optional particle system template", "Docs/Classes/AAbility_ManaBurn/Variables/_8.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Where on the selectable the particles should try attach to. EditCondition = (TargetParticles_Template != nullptr)", "Docs/Classes/AAbility_ManaBurn/Variables/_9.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "Optional sound to play at target location", "Docs/Classes/AAbility_ManaBurn/Variables/_10.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "============================================================================================", "Docs/Classes/AAbility_ManaBurn/Variables/_11.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "", "Docs/Classes/AAbility_ManaBurn/Variables/_12.html", [], "AAbility_ManaBurn");
addToContainers_variable("", "", "Docs/Classes/AAbility_ManaBurn/Variables/_13.html", [], "AAbility_ManaBurn");
addToContainers_class("AAbility_Nuke", "- Launches a ALeaveThenComeBackProjectile. - Shows particles at launch site. - Plays sound at launch site. - Notifies players of launch. - Reveals fog at target location. - Spawns decal at target location.", "Docs/Classes/AAbility_Nuke/AAbility_Nuke.html", ["ability_", "nuke"], "");
addToContainers_function("AAbility_Nuke", "", "Docs/Classes/AAbility_Nuke/Functions/AAbility_Nuke.html", ["ability_", "nuke"], "AAbility_Nuke");
addToContainers_function("BeginPlay", "", "Docs/Classes/AAbility_Nuke/Functions/BeginPlay.html", ["begin", "play"], "AAbility_Nuke");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_Nuke/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_Nuke");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_Nuke/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_Nuke");
addToContainers_function("Begin", "~ End AAbilityBase interface", "Docs/Classes/AAbility_Nuke/Functions/Begin.html", [], "AAbility_Nuke");
addToContainers_function("NotifyLocalPlayerOfLaunch", "Tells the local player about the launch so they can show something on their HUD and play a sound or whatever.", "Docs/Classes/AAbility_Nuke/Functions/NotifyLocalPlayerOfLaunch.html", ["notify", "local", "player", "of", "launch"], "AAbility_Nuke");
addToContainers_function("GetLaunchActor", "Return where the projectile should launch from. Both AActor and ISelectable versions", "Docs/Classes/AAbility_Nuke/Functions/GetLaunchActor.html", ["get", "launch", "actor"], "AAbility_Nuke");
addToContainers_function("GetLaunchSelectable", "", "Docs/Classes/AAbility_Nuke/Functions/GetLaunchSelectable.html", ["get", "launch", "selectable"], "AAbility_Nuke");
addToContainers_function("ShowLaunchLocationParticles", "", "Docs/Classes/AAbility_Nuke/Functions/ShowLaunchLocationParticles.html", ["show", "launch", "location", "particles"], "AAbility_Nuke");
addToContainers_function("PlayLaunchLocationSound", "", "Docs/Classes/AAbility_Nuke/Functions/PlayLaunchLocationSound.html", ["play", "launch", "location", "sound"], "AAbility_Nuke");
addToContainers_function("LaunchProjectile", "", "Docs/Classes/AAbility_Nuke/Functions/LaunchProjectile.html", ["launch", "projectile"], "AAbility_Nuke");
addToContainers_function("RevealFogAtTargetLocation", "", "Docs/Classes/AAbility_Nuke/Functions/RevealFogAtTargetLocation.html", ["reveal", "fog", "at", "target", "location"], "AAbility_Nuke");
addToContainers_function("SpawnDecalAtTargetLocation", "", "Docs/Classes/AAbility_Nuke/Functions/SpawnDecalAtTargetLocation.html", ["spawn", "decal", "at", "target", "location"], "AAbility_Nuke");
addToContainers_function("SpawnDecalAtTargetLocationAfterDelay", "", "Docs/Classes/AAbility_Nuke/Functions/SpawnDecalAtTargetLocationAfterDe.html", ["spawn", "decal", "at", "target", "location", "after", "delay"], "AAbility_Nuke");
addToContainers_function("PostEditChangeChainProperty", "What about damage radius and falloff curve overrides too? The function that fires projectiles will need to have them added as params if we want this", "Docs/Classes/AAbility_Nuke/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AAbility_Nuke");
addToContainers_variable("PoolingManager", "Reference to object pooling manager", "Docs/Classes/AAbility_Nuke/Variables/PoolingManager.html", ["pooling", "manager"], "AAbility_Nuke");
addToContainers_variable("", "Socket that missle is launched from", "Docs/Classes/AAbility_Nuke/Variables/.html", [], "AAbility_Nuke");
addToContainers_variable("", "Projectile to use as nuke for when it is launched.", "Docs/Classes/AAbility_Nuke/Variables/_1.html", [], "AAbility_Nuke");
addToContainers_variable("", "Particles to play at launch location e.g. perhaps lots of smoke or something", "Docs/Classes/AAbility_Nuke/Variables/_2.html", [], "AAbility_Nuke");
addToContainers_variable("", "The sound to play in the world at the launch site", "Docs/Classes/AAbility_Nuke/Variables/_3.html", [], "AAbility_Nuke");
addToContainers_variable("", "If true then missle launches from the ability\'s target. If false then the missle launches from the ability instigator. If the button for this ability resides on the silo\'s action bar then this can be false. If the button for this ability resides on a unit similar to terran\'s ghosts then this could be true and you would pass in the silo as the target for the ability to make the projectile launch from that silo.", "Docs/Classes/AAbility_Nuke/Variables/_4.html", [], "AAbility_Nuke");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/AAbility_Nuke/Variables/_5.html", [], "AAbility_Nuke");
addToContainers_variable("", "Whether to override the damage values defined on the projectile", "Docs/Classes/AAbility_Nuke/Variables/_6.html", [], "AAbility_Nuke");
addToContainers_variable("", "AoE damage properties of the projectile if choosing to override them", "Docs/Classes/AAbility_Nuke/Variables/_7.html", [], "AAbility_Nuke");
addToContainers_variable("", "Decal to spawn at the target location", "Docs/Classes/AAbility_Nuke/Variables/_8.html", [], "AAbility_Nuke");
addToContainers_variable("", "The delay from when ability is used to when the target location decal should spawn", "Docs/Classes/AAbility_Nuke/Variables/_9.html", [], "AAbility_Nuke");
addToContainers_struct("FOngoingAoEDamageInstance", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FOngoingAoEDamageInstance/FOngoingAoEDamageInstance.html", ["ongoing", "ao", "e", "damage", "instance"], "");
addToContainers_function("FOngoingAoEDamageInstance", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/FOngoingAoEDamageInstance.html", ["ongoing", "ao", "e", "damage", "instance"], "FOngoingAoEDamageInstance");
addToContainers_function("FOngoingAoEDamageInstance", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/FOngoingAoEDamageInstance_1.html", ["ongoing", "ao", "e", "damage", "instance"], "FOngoingAoEDamageInstance");
addToContainers_function("GetAbilityUseLocation", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/GetAbilityUseLocation.html", ["get", "ability", "use", "location"], "FOngoingAoEDamageInstance");
addToContainers_function("DecrementNumTicksRemaining", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/DecrementNumTicksRemaining.html", ["decrement", "num", "ticks", "remaining"], "FOngoingAoEDamageInstance");
addToContainers_function("GetNumTicksRemaining", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/GetNumTicksRemaining.html", ["get", "num", "ticks", "remaining"], "FOngoingAoEDamageInstance");
addToContainers_function("GetTimerHandle", "", "Docs/Structs/FOngoingAoEDamageInstance/Functions/GetTimerHandle.html", ["get", "timer", "handle"], "FOngoingAoEDamageInstance");
addToContainers_variable("AbilityEpicenter", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/AbilityEpicenter.html", ["ability", "epicenter"], "FOngoingAoEDamageInstance");
addToContainers_variable("AbilityInstigator", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/AbilityInstigator.html", ["ability", "instigator"], "FOngoingAoEDamageInstance");
addToContainers_variable("TimerHandle_DoDamageTick", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/TimerHandle_DoDamageTick.html", ["timer", "handle_", "do", "damage", "tick"], "FOngoingAoEDamageInstance");
addToContainers_variable("NumTicksRemaining", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/NumTicksRemaining.html", ["num", "ticks", "remaining"], "FOngoingAoEDamageInstance");
addToContainers_variable("InstigatorsTeam", "", "Docs/Structs/FOngoingAoEDamageInstance/Variables/InstigatorsTeam.html", ["instigators", "team"], "FOngoingAoEDamageInstance");
addToContainers_class("AAbility_OngoingAoEDamage", "Deals damage over time in an area of effect. By default does not use use a world location so not ideal for an ability that targets a world location.", "Docs/Classes/AAbility_OngoingAoEDamage/AAbility_OngoingAoEDamage.html", ["ability_", "ongoing", "ao", "e", "damage"], "");
addToContainers_function("AAbility_OngoingAoEDamage", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/AAbility_OngoingAoEDamage.html", ["ability_", "ongoing", "ao", "e", "damage"], "AAbility_OngoingAoEDamage");
addToContainers_function("BeginPlay", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/BeginPlay.html", ["begin", "play"], "AAbility_OngoingAoEDamage");
addToContainers_function("CheckCurves", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/CheckCurves.html", ["check", "curves"], "AAbility_OngoingAoEDamage");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_OngoingAoEDamage");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_OngoingAoEDamage");
addToContainers_function("SpawnEpicenterParticles", "~ End AAbilityBase interface", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/SpawnEpicenterParticles.html", ["spawn", "epicenter", "particles"], "AAbility_OngoingAoEDamage");
addToContainers_function("PlayEpicenterSound", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/PlayEpicenterSound.html", ["play", "epicenter", "sound"], "AAbility_OngoingAoEDamage");
addToContainers_function("DoDamageTick", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/DoDamageTick.html", ["do", "damage", "tick"], "AAbility_OngoingAoEDamage");
addToContainers_function("DoInitialDamageTickAfterDelay", "", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/DoInitialDamageTickAfterDelay.html", ["do", "initial", "damage", "tick", "after", "delay"], "AAbility_OngoingAoEDamage");
addToContainers_function("DoDamageTickAfterDelay", "Call DoDamageTick after a delay", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/DoDamageTickAfterDelay.html", ["do", "damage", "tick", "after", "delay"], "AAbility_OngoingAoEDamage");
addToContainers_function("CalculateDamage", "Calculate how much damage to deal to an actor hit by the ability @param Location - where the epicenter of the ability is @param HitActor - actor that was hit by ability @return - final damage amount to pass into HitActor->TakeDamage", "Docs/Classes/AAbility_OngoingAoEDamage/Functions/CalculateDamage.html", ["calculate", "damage"], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Maps unique ID to info about the state of the ability", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether the effect attaches to the instigator. If true the ability \"follows\" its user. If false it will stay in the same spot which is the place it was used at, and if the user moves it will not move with them", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_1.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "The time between when this ability is used and the first damage tick happens. 0 = no delay", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_2.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "How many damage ticks for this ability", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_3.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Time between damage ticks", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_4.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Radius", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_5.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "How much base damage is dealt each tick", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_6.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_7.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_8.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "The curve to use for damage falloff. If no curve is specified then there will be no damage falloff - every selectable hit will take full damage. X axis = range from center. Larger implies further from ability center. Axis range: [0, 1] Y axis = normalized percentage of BaseDamage to deal. Probably want range [0, 1]", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_9.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether it can hit enemies", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_10.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether it can hit friendlies. Note if this and bCanHitEnemies are both false then this ability cannot hit anything!", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_11.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether this ability can damage the instigator", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_12.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Whether it can hit flying units", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_13.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Optional particle system to show at target location", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_14.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "The part of the instigator that the effect\'s particles attaches/spawns at. EditCondition = (TargetLocationParticles != nullptr)", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_15.html", [], "AAbility_OngoingAoEDamage");
addToContainers_variable("", "Optional sound to play at the target location", "Docs/Classes/AAbility_OngoingAoEDamage/Variables/_16.html", [], "AAbility_OngoingAoEDamage");
addToContainers_class("AAbility_Scan", "Reveals some fog of war similar to Terran\'s scan or C&C generals USA scan. Can optionally reveal stealthed units too. Also: - plays a sound - spawns a decal at target location - spawns a particle emitter at target location", "Docs/Classes/AAbility_Scan/AAbility_Scan.html", ["ability_", "scan"], "");
addToContainers_function("AAbility_Scan", "", "Docs/Classes/AAbility_Scan/Functions/AAbility_Scan.html", ["ability_", "scan"], "AAbility_Scan");
addToContainers_function("Server_Begin", "~ Begin AAbilityBase interface", "Docs/Classes/AAbility_Scan/Functions/Server_Begin.html", ["server_", "begin"], "AAbility_Scan");
addToContainers_function("Client_Begin", "", "Docs/Classes/AAbility_Scan/Functions/Client_Begin.html", ["client_", "begin"], "AAbility_Scan");
addToContainers_function("Begin", "~ End AAbilityBase interface", "Docs/Classes/AAbility_Scan/Functions/Begin.html", [], "AAbility_Scan");
addToContainers_function("PlaySound", "", "Docs/Classes/AAbility_Scan/Functions/PlaySound.html", ["play", "sound"], "AAbility_Scan");
addToContainers_function("DrawTargetLocationDecal", "", "Docs/Classes/AAbility_Scan/Functions/DrawTargetLocationDecal.html", ["draw", "target", "location", "decal"], "AAbility_Scan");
addToContainers_function("ShowTargetLocationParticles", "", "Docs/Classes/AAbility_Scan/Functions/ShowTargetLocationParticles.html", ["show", "target", "location", "particles"], "AAbility_Scan");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/AAbility_Scan/Variables/.html", [], "AAbility_Scan");
addToContainers_variable("", "Sound to play at target location", "Docs/Classes/AAbility_Scan/Variables/_1.html", [], "AAbility_Scan");
addToContainers_variable("", "Decal to draw at the location", "Docs/Classes/AAbility_Scan/Variables/_2.html", [], "AAbility_Scan");
addToContainers_variable("", "Particle system to show at the location. Probably don\'t obey fog of war", "Docs/Classes/AAbility_Scan/Variables/_3.html", [], "AAbility_Scan");
addToContainers_variable("", "Worst affiliation that can hear the sound produced by the scan. e.g. Owned = only instigator can hear it Allied = instigator and teammates can hear it Hostile = everyone can hear it", "Docs/Classes/AAbility_Scan/Variables/_4.html", [], "AAbility_Scan");
addToContainers_variable("", "Worst affiliation that can see the decal/particles produced by the scan.", "Docs/Classes/AAbility_Scan/Variables/_5.html", [], "AAbility_Scan");
addToContainers_class("AInfantryController", "Class that controls behavior of infantry. Has many editable properties that will need to change as your pawn changes. Some how tos: Change movement speed: UCharacterMovementComponent::MaxWalkSpeed Enable/disable acceleration: UCharacterMovementComponent::bRequestedMoveUseAcceleration Change movement acceleration: UCharacterMovementComponent::MaxAcceleration Change rate pawn turns: UCharacterMovementComponent::RotationRate.Z for yaw, .Y or .X for pitch can\'t remember which one", "Docs/Classes/AInfantryController/AInfantryController.html", ["infantry", "controller"], "");
addToContainers_function("AInfantryController", "", "Docs/Classes/AInfantryController/Functions/AInfantryController.html", ["infantry", "controller"], "AInfantryController");
addToContainers_function("OnPossess", "4.22: changed this from Possess to OnPossess since Possess is final", "Docs/Classes/AInfantryController/Functions/OnPossess.html", ["on", "possess"], "AInfantryController");
addToContainers_function("SetReferences", "", "Docs/Classes/AInfantryController/Functions/SetReferences.html", ["set", "references"], "AInfantryController");
addToContainers_function("DisplayDebug", "Display debugging info", "Docs/Classes/AInfantryController/Functions/DisplayDebug.html", ["display", "debug"], "AInfantryController");
addToContainers_function("GrabDebugSnapshot", "", "Docs/Classes/AInfantryController/Functions/GrabDebugSnapshot.html", ["grab", "debug", "snapshot"], "AInfantryController");
addToContainers_function("void", "Typedef for function pointer ", "Docs/Classes/AInfantryController/Functions/void.html", [], "AInfantryController");
addToContainers_function("FunctionPtrToString", "", "Docs/Classes/AInfantryController/Functions/FunctionPtrToString.html", ["function", "ptr", "to", "string"], "AInfantryController");
addToContainers_function("StartBehavior", "@param BuildingSpawnedFrom - the building the infantry was produced from", "Docs/Classes/AInfantryController/Functions/StartBehavior.html", ["start", "behavior"], "AInfantryController");
addToContainers_function("Tick", "", "Docs/Classes/AInfantryController/Functions/Tick.html", [], "AInfantryController");
addToContainers_function("UpdateControlRotation", "Update direction AI is looking based on FocalPoint", "Docs/Classes/AInfantryController/Functions/UpdateControlRotation.html", ["update", "control", "rotation"], "AInfantryController");
addToContainers_function("OnMoveCompleted", "", "Docs/Classes/AInfantryController/Functions/OnMoveCompleted.html", ["on", "move", "completed"], "AInfantryController");
addToContainers_function("TickBehavior", "", "Docs/Classes/AInfantryController/Functions/TickBehavior.html", ["tick", "behavior"], "AInfantryController");
addToContainers_function("TickAI_MovingToBarracksInitialPoint", "", "Docs/Classes/AInfantryController/Functions/TickAI_MovingToBarracksInitialPoi.html", ["tick", "a", "i_", "moving", "to", "barracks", "initial", "point"], "AInfantryController");
addToContainers_function("TickAI_MovingToBarracksRallyPoint", "", "Docs/Classes/AInfantryController/Functions/TickAI_MovingToBarracksRallyPoint.html", ["tick", "a", "i_", "moving", "to", "barracks", "rally", "point"], "AInfantryController");
addToContainers_function("TickAI_IdleWithoutTarget", "", "Docs/Classes/AInfantryController/Functions/TickAI_IdleWithoutTarget.html", ["tick", "a", "i_", "idle", "without", "target"], "AInfantryController");
addToContainers_function("TickAI_IdleWithTarget", "", "Docs/Classes/AInfantryController/Functions/TickAI_IdleWithTarget.html", ["tick", "a", "i_", "idle", "with", "target"], "AInfantryController");
addToContainers_function("TickAI_Idle_ReturningToLeashLocation", "", "Docs/Classes/AInfantryController/Functions/TickAI_Idle_ReturningToLeashLocat.html", ["tick", "a", "i_", "idle_", "returning", "to", "leash", "location"], "AInfantryController");
addToContainers_function("TickAI_HoldingPositionWithoutTarget", "", "Docs/Classes/AInfantryController/Functions/TickAI_HoldingPositionWithoutTarg.html", ["tick", "a", "i_", "holding", "position", "without", "target"], "AInfantryController");
addToContainers_function("TickAI_HoldingPositionWithTarget", "", "Docs/Classes/AInfantryController/Functions/TickAI_HoldingPositionWithTarget.html", ["tick", "a", "i_", "holding", "position", "with", "target"], "AInfantryController");
addToContainers_function("TickAI_MovingToRightClickLocation", "", "Docs/Classes/AInfantryController/Functions/TickAI_MovingToRightClickLocation.html", ["tick", "a", "i_", "moving", "to", "right", "click", "location"], "AInfantryController");
addToContainers_function("TickAI_MovingToPointNearStaticSelectable", "", "Docs/Classes/AInfantryController/Functions/TickAI_MovingToPointNearStaticSel.html", ["tick", "a", "i_", "moving", "to", "point", "near", "static", "selectable"], "AInfantryController");
addToContainers_function("TickAI_MoveCommandToFriendlyMobileSelectable", "", "Docs/Classes/AInfantryController/Functions/TickAI_MoveCommandToFriendlyMobil.html", ["tick", "a", "i_", "move", "command", "to", "friendly", "mobile", "selectable"], "AInfantryController");
addToContainers_function("TickAI_RightClickOnEnemy", "", "Docs/Classes/AInfantryController/Functions/TickAI_RightClickOnEnemy.html", ["tick", "a", "i_", "right", "click", "on", "enemy"], "AInfantryController");
addToContainers_function("TickAI_AttackMoveCommandWithNoTargetAquired", "", "Docs/Classes/AInfantryController/Functions/TickAI_AttackMoveCommandWithNoTar.html", ["tick", "a", "i_", "attack", "move", "command", "with", "no", "target", "aquired"], "AInfantryController");
addToContainers_function("TickAI_AttackMoveCommandWithTargetAquired", "", "Docs/Classes/AInfantryController/Functions/TickAI_AttackMoveCommandWithTarge.html", ["tick", "a", "i_", "attack", "move", "command", "with", "target", "aquired"], "AInfantryController");
addToContainers_function("TickAI_AttackMoveCommand_ReturningToLeashLocation", "", "Docs/Classes/AInfantryController/Functions/TickAI_AttackMoveCommand_Returnin.html", ["tick", "a", "i_", "attack", "move", "command_", "returning", "to", "leash", "location"], "AInfantryController");
addToContainers_function("TickAI_HeadingToContextCommandWorldLocation", "", "Docs/Classes/AInfantryController/Functions/TickAI_HeadingToContextCommandWor.html", ["tick", "a", "i_", "heading", "to", "context", "command", "world", "location"], "AInfantryController");
addToContainers_function("TickAI_ChasingTargetToDoContextCommand", "", "Docs/Classes/AInfantryController/Functions/TickAI_ChasingTargetToDoContextCo.html", ["tick", "a", "i_", "chasing", "target", "to", "do", "context", "command"], "AInfantryController");
addToContainers_function("TickAI_HeadingToBuildingToDoBuildingTargetingAbility", "", "Docs/Classes/AInfantryController/Functions/TickAI_HeadingToBuildingToDoBuild.html", ["tick", "a", "i_", "heading", "to", "building", "to", "do", "building", "targeting", "ability"], "AInfantryController");
addToContainers_function("TickAI_HeadingToBuildingToEnterItsGarrison", "", "Docs/Classes/AInfantryController/Functions/TickAI_HeadingToBuildingToEnterIt.html", ["tick", "a", "i_", "heading", "to", "building", "to", "enter", "its", "garrison"], "AInfantryController");
addToContainers_function("TickAI_InsideBuildingGarrison", "", "Docs/Classes/AInfantryController/Functions/TickAI_InsideBuildingGarrison.html", ["tick", "a", "i_", "inside", "building", "garrison"], "AInfantryController");
addToContainers_function("TickAI_HeadingToResourceSpot", "", "Docs/Classes/AInfantryController/Functions/TickAI_HeadingToResourceSpot.html", ["tick", "a", "i_", "heading", "to", "resource", "spot"], "AInfantryController");
addToContainers_function("TickAI_WaitingToGatherResources", "", "Docs/Classes/AInfantryController/Functions/TickAI_WaitingToGatherResources.html", ["tick", "a", "i_", "waiting", "to", "gather", "resources"], "AInfantryController");
addToContainers_function("TickAI_GatheringResources", "", "Docs/Classes/AInfantryController/Functions/TickAI_GatheringResources.html", ["tick", "a", "i_", "gathering", "resources"], "AInfantryController");
addToContainers_function("TickAI_ReturningToResourceDepot", "", "Docs/Classes/AInfantryController/Functions/TickAI_ReturningToResourceDepot.html", ["tick", "a", "i_", "returning", "to", "resource", "depot"], "AInfantryController");
addToContainers_function("TickAI_DroppingOffResources", "", "Docs/Classes/AInfantryController/Functions/TickAI_DroppingOffResources.html", ["tick", "a", "i_", "dropping", "off", "resources"], "AInfantryController");
addToContainers_function("TickAI_HeadingToConstructionSite", "", "Docs/Classes/AInfantryController/Functions/TickAI_HeadingToConstructionSite.html", ["tick", "a", "i_", "heading", "to", "construction", "site"], "AInfantryController");
addToContainers_function("TickAI_HeadingToPotentialConstructionSite", "", "Docs/Classes/AInfantryController/Functions/TickAI_HeadingToPotentialConstruc.html", ["tick", "a", "i_", "heading", "to", "potential", "construction", "site"], "AInfantryController");
addToContainers_function("TickAI_WaitingForFoundationsToBePlaced", "", "Docs/Classes/AInfantryController/Functions/TickAI_WaitingForFoundationsToBeP.html", ["tick", "a", "i_", "waiting", "for", "foundations", "to", "be", "placed"], "AInfantryController");
addToContainers_function("TickAI_ConstructingBuilding", "", "Docs/Classes/AInfantryController/Functions/TickAI_ConstructingBuilding.html", ["tick", "a", "i_", "constructing", "building"], "AInfantryController");
addToContainers_function("TickAI_DoingContextActionAnim", "", "Docs/Classes/AInfantryController/Functions/TickAI_DoingContextActionAnim.html", ["tick", "a", "i_", "doing", "context", "action", "anim"], "AInfantryController");
addToContainers_function("TickAI_DoingSpecialBuildingTargetingAbility", "", "Docs/Classes/AInfantryController/Functions/TickAI_DoingSpecialBuildingTarget.html", ["tick", "a", "i_", "doing", "special", "building", "targeting", "ability"], "AInfantryController");
addToContainers_function("TickAI_GoingToPickUpInventoryItem", "", "Docs/Classes/AInfantryController/Functions/TickAI_GoingToPickUpInventoryItem.html", ["tick", "a", "i_", "going", "to", "pick", "up", "inventory", "item"], "AInfantryController");
addToContainers_function("TickAI_PickingUpInventoryItem", "", "Docs/Classes/AInfantryController/Functions/TickAI_PickingUpInventoryItem.html", ["tick", "a", "i_", "picking", "up", "inventory", "item"], "AInfantryController");
addToContainers_function("OnCommand_ClearResourceGatheringProperties", "Clear the properties related to gathering resources when a command is issued", "Docs/Classes/AInfantryController/Functions/OnCommand_ClearResourceGatheringP.html", ["on", "command_", "clear", "resource", "gathering", "properties"], "AInfantryController");
addToContainers_function("OnCommand_ClearBuildingConstructingProperties", "Clear the properties for constructing buildings when a command is issued", "Docs/Classes/AInfantryController/Functions/OnCommand_ClearBuildingConstructi.html", ["on", "command_", "clear", "building", "constructing", "properties"], "AInfantryController");
addToContainers_function("OnCommand_ClearTargetFocus", "------------------------------------------------------------", "Docs/Classes/AInfantryController/Functions/OnCommand_ClearTargetFocus.html", ["on", "command_", "clear", "target", "focus"], "AInfantryController");
addToContainers_function("OnHoldPositionCommand", "Called when given hold position command", "Docs/Classes/AInfantryController/Functions/OnHoldPositionCommand.html", ["on", "hold", "position", "command"], "AInfantryController");
addToContainers_function("OnAttackMoveCommand", "Called when given attack move command @param Location - world coords of command @param Target - the selectable that was clicked on. Null if something like the ground was clicked on @param TargetInfo - selection info about the target", "Docs/Classes/AInfantryController/Functions/OnAttackMoveCommand.html", ["on", "attack", "move", "command"], "AInfantryController");
addToContainers_function("OnRightClickCommand", "Called when player issues a right-click command and they did not click on another selectable", "Docs/Classes/AInfantryController/Functions/OnRightClickCommand.html", ["on", "right", "click", "command"], "AInfantryController");
addToContainers_function("OnRightClickCommand", "Called by owning unit @param TargetAsSelectable - right-click target as selectable @param TargetInfo - selection info about Target", "Docs/Classes/AInfantryController/Functions/OnRightClickCommand_1.html", ["on", "right", "click", "command"], "AInfantryController");
addToContainers_function("OnRightClickOnResourceSpotCommand", "", "Docs/Classes/AInfantryController/Functions/OnRightClickOnResourceSpotCommand.html", ["on", "right", "click", "on", "resource", "spot", "command"], "AInfantryController");
addToContainers_function("OnInstantContextCommand", "Called by unit when a bIsIssuedInstantly command comes through", "Docs/Classes/AInfantryController/Functions/OnInstantContextCommand.html", ["on", "instant", "context", "command"], "AInfantryController");
addToContainers_function("OnTargetedContextCommand", "Called when given command that requires a location in the world", "Docs/Classes/AInfantryController/Functions/OnTargetedContextCommand.html", ["on", "targeted", "context", "command"], "AInfantryController");
addToContainers_function("OnTargetedContextCommand", "Called when given a command that requires another target", "Docs/Classes/AInfantryController/Functions/OnTargetedContextCommand_1.html", ["on", "targeted", "context", "command"], "AInfantryController");
addToContainers_function("OnInstantUseInventoryItemCommand", "Called when given command to use an item in inventory", "Docs/Classes/AInfantryController/Functions/OnInstantUseInventoryItemCommand.html", ["on", "instant", "use", "inventory", "item", "command"], "AInfantryController");
addToContainers_function("OnLocationTargetingUseInventoryItemCommand", "", "Docs/Classes/AInfantryController/Functions/OnLocationTargetingUseInventoryIt.html", ["on", "location", "targeting", "use", "inventory", "item", "command"], "AInfantryController");
addToContainers_function("OnSelectableTargetingUseInventoryItemCommand", "", "Docs/Classes/AInfantryController/Functions/OnSelectableTargetingUseInventory.html", ["on", "selectable", "targeting", "use", "inventory", "item", "command"], "AInfantryController");
addToContainers_function("OnSpecialBuildingTargetingAbilityCommand", "", "Docs/Classes/AInfantryController/Functions/OnSpecialBuildingTargetingAbility.html", ["on", "special", "building", "targeting", "ability", "command"], "AInfantryController");
addToContainers_function("OnEnterGarrisonCommand", "Called when command is given to enter a building garrison", "Docs/Classes/AInfantryController/Functions/OnEnterGarrisonCommand.html", ["on", "enter", "garrison", "command"], "AInfantryController");
addToContainers_function("OnUnitExitGarrison", "Called when the possessed unit leaves a garrison", "Docs/Classes/AInfantryController/Functions/OnUnitExitGarrison.html", ["on", "unit", "exit", "garrison"], "AInfantryController");
addToContainers_function("OnAbilityCommandInner", "3 functions to try and reduce the amount of code written. These functions are called whenever the selectable is given a command to do something that requires doing an ability effect such as an action bar skill or using an inventory item. @param UsageCase - action bar, inventory item use, etc @param AuxilleryData - when the usage case is a invenrory item use this is the inventory slot index.", "Docs/Classes/AInfantryController/Functions/OnAbilityCommandInner.html", ["on", "ability", "command", "inner"], "AInfantryController");
addToContainers_function("OnAbilityCommandInner", "", "Docs/Classes/AInfantryController/Functions/OnAbilityCommandInner_1.html", ["on", "ability", "command", "inner"], "AInfantryController");
addToContainers_function("OnAbilityCommandInner", "", "Docs/Classes/AInfantryController/Functions/OnAbilityCommandInner_2.html", ["on", "ability", "command", "inner"], "AInfantryController");
addToContainers_function("OnPickUpInventoryItemCommand", "Pick up an inventory item that is on the ground", "Docs/Classes/AInfantryController/Functions/OnPickUpInventoryItemCommand.html", ["on", "pick", "up", "inventory", "item", "command"], "AInfantryController");
addToContainers_function("OnLayFoundationCommand", "Called when given command to go to location and put down a building foundation there. Only applies to build methods LayFoundationsWhenAtLocation and Protoss", "Docs/Classes/AInfantryController/Functions/OnLayFoundationCommand.html", ["on", "lay", "foundation", "command"], "AInfantryController");
addToContainers_function("OnContextMenuPlaceBuildingResult", "Called when a building was successfully placed from the context menu of the unit. Unit should go over and start working on it", "Docs/Classes/AInfantryController/Functions/OnContextMenuPlaceBuildingResult.html", ["on", "context", "menu", "place", "building", "result"], "AInfantryController");
addToContainers_function("OnWorkedOnBuildingConstructionComplete", "Called if unit is working on a building an it completes construction", "Docs/Classes/AInfantryController/Functions/OnWorkedOnBuildingConstructionCom.html", ["on", "worked", "on", "building", "construction", "complete"], "AInfantryController");
addToContainers_function("OnUnitEnterStealthMode", "", "Docs/Classes/AInfantryController/Functions/OnUnitEnterStealthMode.html", ["on", "unit", "enter", "stealth", "mode"], "AInfantryController");
addToContainers_function("OnUnitExitStealthMode", "", "Docs/Classes/AInfantryController/Functions/OnUnitExitStealthMode.html", ["on", "unit", "exit", "stealth", "mode"], "AInfantryController");
addToContainers_function("OnUnitTakeDamage", "Called from Unit when it takes damage @param DamageCauser - selectable that caused the damage @param DamageAmount - amount of damage taken for this event", "Docs/Classes/AInfantryController/Functions/OnUnitTakeDamage.html", ["on", "unit", "take", "damage"], "AInfantryController");
addToContainers_function("OnPossessedUnitDestroyed", "Called when possessed unit reaches zero health", "Docs/Classes/AInfantryController/Functions/OnPossessedUnitDestroyed.html", ["on", "possessed", "unit", "destroyed"], "AInfantryController");
addToContainers_function("OnPossessedUnitConsumed", "Called when possessed unit is consumed", "Docs/Classes/AInfantryController/Functions/OnPossessedUnitConsumed.html", ["on", "possessed", "unit", "consumed"], "AInfantryController");
addToContainers_function("OnControlledPawnKilledSomething", "Called when the unit destroys another selectable", "Docs/Classes/AInfantryController/Functions/OnControlledPawnKilledSomething.html", ["on", "controlled", "pawn", "killed", "something"], "AInfantryController");
addToContainers_function("AnimNotify_OnWeaponFired", "Called when fire animation fires weapon.", "Docs/Classes/AInfantryController/Functions/AnimNotify_OnWeaponFired.html", ["anim", "notify_", "on", "weapon", "fired"], "AInfantryController");
addToContainers_function("AnimNotify_OnAttackAnimationFinished", "Called when weapon firing animation is finished. This signals that the unit can move again", "Docs/Classes/AInfantryController/Functions/AnimNotify_OnAttackAnimationFinis.html", ["anim", "notify_", "on", "attack", "animation", "finished"], "AInfantryController");
addToContainers_function("AnimNotify_OnContextActionExecuted", "Called when a context action animation reaches point where it should carry out the action", "Docs/Classes/AInfantryController/Functions/AnimNotify_OnContextActionExecute.html", ["anim", "notify_", "on", "context", "action", "executed"], "AInfantryController");
addToContainers_function("AnimNotify_OnContextAnimationFinished", "Called when a context animation reaches the point where the unit will resume behavior.", "Docs/Classes/AInfantryController/Functions/AnimNotify_OnContextAnimationFini.html", ["anim", "notify_", "on", "context", "animation", "finished"], "AInfantryController");
addToContainers_function("AnimNotify_OnResourcesDroppedOff", "Called by the optional DropOffResources animation to signal that they have been dropped off", "Docs/Classes/AInfantryController/Functions/AnimNotify_OnResourcesDroppedOff.html", ["anim", "notify_", "on", "resources", "dropped", "off"], "AInfantryController");
addToContainers_function("AnimNotify_TryPickUpInventoryItemOffGround", "", "Docs/Classes/AInfantryController/Functions/AnimNotify_TryPickUpInventoryItem.html", ["anim", "notify_", "try", "pick", "up", "inventory", "item", "off", "ground"], "AInfantryController");
addToContainers_function("PlayIdleAnim", "Play idle anim", "Docs/Classes/AInfantryController/Functions/PlayIdleAnim.html", ["play", "idle", "anim"], "AInfantryController");
addToContainers_function("GoIdle", "Play idle anim and enter idle unit state. Does not stop movement", "Docs/Classes/AInfantryController/Functions/GoIdle.html", ["go", "idle"], "AInfantryController");
addToContainers_function("StopMovementAndGoIdle", "Null DoOnMoveComplete, Stop movement, play idle anim and enter idle unit state", "Docs/Classes/AInfantryController/Functions/StopMovementAndGoIdle.html", ["stop", "movement", "and", "go", "idle"], "AInfantryController");
addToContainers_function("StandStill", "Play idle anim, null DoOnMoveComplete and call StopMovement() but do not change unit state", "Docs/Classes/AInfantryController/Functions/StandStill.html", ["stand", "still"], "AInfantryController");
addToContainers_function("AttackMove_OnReturnedToLeashLoc", "Continue attack move command to click location", "Docs/Classes/AInfantryController/Functions/AttackMove_OnReturnedToLeashLoc.html", ["attack", "move_", "on", "returned", "to", "leash", "loc"], "AInfantryController");
addToContainers_function("MoveToRallyPoint", "Move to rally location of barracks unit was built from", "Docs/Classes/AInfantryController/Functions/MoveToRallyPoint.html", ["move", "to", "rally", "point"], "AInfantryController");
addToContainers_function("GetPickUpItemAcceptanceRadius", "Get the acceptance radius to use when moving to an inventory item on the ground to pick it up", "Docs/Classes/AInfantryController/Functions/GetPickUpItemAcceptanceRadius.html", ["get", "pick", "up", "item", "acceptance", "radius"], "AInfantryController");
addToContainers_function("OnMoveToPickUpInventoryItemComplete", "", "Docs/Classes/AInfantryController/Functions/OnMoveToPickUpInventoryItemComple.html", ["on", "move", "to", "pick", "up", "inventory", "item", "complete"], "AInfantryController");
addToContainers_function("StartResourceGatheringRoute", "Start the routine of going back and forth between depot and resource spot @param ResourcesToGatherFrom - the resource spot to gather from", "Docs/Classes/AInfantryController/Functions/StartResourceGatheringRoute.html", ["start", "resource", "gathering", "route"], "AInfantryController");
addToContainers_function("OnMoveToResourceSpotComplete", "Called when move to resource spot to gather resources completes", "Docs/Classes/AInfantryController/Functions/OnMoveToResourceSpotComplete.html", ["on", "move", "to", "resource", "spot", "complete"], "AInfantryController");
addToContainers_function("TryGatherResources", "Queue and possibly start gathering resources from AssignedResourceSpot. Assumes close enough", "Docs/Classes/AInfantryController/Functions/TryGatherResources.html", ["try", "gather", "resources"], "AInfantryController");
addToContainers_function("IsAtResourceSpot", "Returns true if close enough to a assigned resource spot to gather from it", "Docs/Classes/AInfantryController/Functions/IsAtResourceSpot.html", ["is", "at", "resource", "spot"], "AInfantryController");
addToContainers_function("GetDistanceRequirementForResourceSpot", "Get how close unit has to be to resource spot to be able to collect from it", "Docs/Classes/AInfantryController/Functions/GetDistanceRequirementForResource.html", ["get", "distance", "requirement", "for", "resource", "spot"], "AInfantryController");
addToContainers_function("GetResourceSpotAcceptanceRadius", "Get acceptance radius to use when moving to a resource spot", "Docs/Classes/AInfantryController/Functions/GetResourceSpotAcceptanceRadius.html", ["get", "resource", "spot", "acceptance", "radius"], "AInfantryController");
addToContainers_function("IsWaitingToCollectResources", "Whether the unit is waiting at a resource spot to collect from it", "Docs/Classes/AInfantryController/Functions/IsWaitingToCollectResources.html", ["is", "waiting", "to", "collect", "resources"], "AInfantryController");
addToContainers_function("StartCollectingResources", "Start collecting resources from assigned resource spot", "Docs/Classes/AInfantryController/Functions/StartCollectingResources.html", ["start", "collecting", "resources"], "AInfantryController");
addToContainers_function("OnResourceGatheringComplete", "Called when finished gathering resources from spot. Return to depot now", "Docs/Classes/AInfantryController/Functions/OnResourceGatheringComplete.html", ["on", "resource", "gathering", "complete"], "AInfantryController");
addToContainers_function("ReturnToDepot", "Return to a depot to drop off resources", "Docs/Classes/AInfantryController/Functions/ReturnToDepot.html", ["return", "to", "depot"], "AInfantryController");
addToContainers_function("IsAtDepot", "Returns true if close enough to depot to drop off resources", "Docs/Classes/AInfantryController/Functions/IsAtDepot.html", ["is", "at", "depot"], "AInfantryController");
addToContainers_function("GetDistanceRequirementForDepot", "", "Docs/Classes/AInfantryController/Functions/GetDistanceRequirementForDepot.html", ["get", "distance", "requirement", "for", "depot"], "AInfantryController");
addToContainers_function("GetDepotAcceptanceRadius", "Get the acceptance radius to use when moving to a resource depot", "Docs/Classes/AInfantryController/Functions/GetDepotAcceptanceRadius.html", ["get", "depot", "acceptance", "radius"], "AInfantryController");
addToContainers_function("OnReturnedToDepotMoveComplete", "", "Docs/Classes/AInfantryController/Functions/OnReturnedToDepotMoveComplete.html", ["on", "returned", "to", "depot", "move", "complete"], "AInfantryController");
addToContainers_function("OnReturnedToDepot", "", "Docs/Classes/AInfantryController/Functions/OnReturnedToDepot.html", ["on", "returned", "to", "depot"], "AInfantryController");
addToContainers_function("DropOffResources", "Drop off collected resources at depot", "Docs/Classes/AInfantryController/Functions/DropOffResources.html", ["drop", "off", "resources"], "AInfantryController");
addToContainers_function("ReturnToResourceSpot", "", "Docs/Classes/AInfantryController/Functions/ReturnToResourceSpot.html", ["return", "to", "resource", "spot"], "AInfantryController");
addToContainers_function("IsAtPotentialConstructionSite", "Return true if close enough to the location where a command was given to go place a foundation for a building", "Docs/Classes/AInfantryController/Functions/IsAtPotentialConstructionSite.html", ["is", "at", "potential", "construction", "site"], "AInfantryController");
addToContainers_function("GetDistanceRequirementForPotentialConstructionSite", "", "Docs/Classes/AInfantryController/Functions/GetDistanceRequirementForPotentia.html", ["get", "distance", "requirement", "for", "potential", "construction", "site"], "AInfantryController");
addToContainers_function("GetPotentialConstructionSiteAcceptanceRadius", "", "Docs/Classes/AInfantryController/Functions/GetPotentialConstructionSiteAccep.html", ["get", "potential", "construction", "site", "acceptance", "radius"], "AInfantryController");
addToContainers_function("TryLayFoundations", "Try put down foundations for building cached as FoundationType at location ClickLocation with rotation FoundationRotation", "Docs/Classes/AInfantryController/Functions/TryLayFoundations.html", ["try", "lay", "foundations"], "AInfantryController");
addToContainers_function("IsAtConstructionSite", "Return true if unit is close enough to a building to work on it", "Docs/Classes/AInfantryController/Functions/IsAtConstructionSite.html", ["is", "at", "construction", "site"], "AInfantryController");
addToContainers_function("GetDistanceRequirementForConstructionSite", "Distance unit has to be from construction site to work on it", "Docs/Classes/AInfantryController/Functions/GetDistanceRequirementForConstruc.html", ["get", "distance", "requirement", "for", "construction", "site"], "AInfantryController");
addToContainers_function("GetConstructionSiteAcceptanceRadius", "Accpetance radius to put into MoveToLocation when moving to a construction site", "Docs/Classes/AInfantryController/Functions/GetConstructionSiteAcceptanceRadi.html", ["get", "construction", "site", "acceptance", "radius"], "AInfantryController");
addToContainers_function("OnMoveToConstructionSiteComplete", "", "Docs/Classes/AInfantryController/Functions/OnMoveToConstructionSiteComplete.html", ["on", "move", "to", "construction", "site", "complete"], "AInfantryController");
addToContainers_function("WorkOnBuilding", "Start working on AssignedConstructionSite i.e. constructing it", "Docs/Classes/AInfantryController/Functions/WorkOnBuilding.html", ["work", "on", "building"], "AInfantryController");
addToContainers_function("SetPendingContextActionType", "Set PendingContextActionType", "Docs/Classes/AInfantryController/Functions/SetPendingContextActionType.html", ["set", "pending", "context", "action", "type"], "AInfantryController");
addToContainers_function("SetPendingContextActionType", "", "Docs/Classes/AInfantryController/Functions/SetPendingContextActionType_1.html", ["set", "pending", "context", "action", "type"], "AInfantryController");
addToContainers_function("GetPendingContextActionType", "", "Docs/Classes/AInfantryController/Functions/GetPendingContextActionType.html", ["get", "pending", "context", "action", "type"], "AInfantryController");
addToContainers_function("GetPendingBuildingTargetingAbilityType", "", "Docs/Classes/AInfantryController/Functions/GetPendingBuildingTargetingAbilit.html", ["get", "pending", "building", "targeting", "ability", "type"], "AInfantryController");
addToContainers_function("TryDoInstantContextCommand", "Try do instant context command provided all the requirements such as selectable resource cost etc are fulfilled", "Docs/Classes/AInfantryController/Functions/TryDoInstantContextCommand.html", ["try", "do", "instant", "context", "command"], "AInfantryController");
addToContainers_function("DoInstantContextCommand", "Do the action saved in PendingContextActionType. Instant means a bIsIssuedInstantly type of action", "Docs/Classes/AInfantryController/Functions/DoInstantContextCommand.html", ["do", "instant", "context", "command"], "AInfantryController");
addToContainers_function("GetDistanceFromLocationForAbility", "", "Docs/Classes/AInfantryController/Functions/GetDistanceFromLocationForAbility.html", ["get", "distance", "from", "location", "for", "ability"], "AInfantryController");
addToContainers_function("GetLocationTargetedAcceptanceRadius", "Get the acceptance radius for a world location targeting ability", "Docs/Classes/AInfantryController/Functions/GetLocationTargetedAcceptanceRadi.html", ["get", "location", "targeted", "acceptance", "radius"], "AInfantryController");
addToContainers_function("OnMoveToLocationTargetedContextActionComplete", "Check if in range and start animation for context action that requires world location", "Docs/Classes/AInfantryController/Functions/OnMoveToLocationTargetedContextAc.html", ["on", "move", "to", "location", "targeted", "context", "action", "complete"], "AInfantryController");
addToContainers_function("StartLocationTargetedContextAction", "Play anim for ability or do it straight away if no anim required for ability", "Docs/Classes/AInfantryController/Functions/StartLocationTargetedContextActio.html", ["start", "location", "targeted", "context", "action"], "AInfantryController");
addToContainers_function("TryDoLocationTargetedContextAction", "Try spawn ability that required world location", "Docs/Classes/AInfantryController/Functions/TryDoLocationTargetedContextActio.html", ["try", "do", "location", "targeted", "context", "action"], "AInfantryController");
addToContainers_function("DoLocationTargetedContextAction", "Spawn ability that required world location", "Docs/Classes/AInfantryController/Functions/DoLocationTargetedContextAction.html", ["do", "location", "targeted", "context", "action"], "AInfantryController");
addToContainers_function("OnMoveToBuildingForBuildingTargetingAbilityComplete", "", "Docs/Classes/AInfantryController/Functions/OnMoveToBuildingForBuildingTarget.html", ["on", "move", "to", "building", "for", "building", "targeting", "ability", "complete"], "AInfantryController");
addToContainers_function("StartBuildingTargetingAbility", "Play anim for building targeting ability or do it straight away if no anim. Building targetingabilities are the ones like engineers or spies in C&C", "Docs/Classes/AInfantryController/Functions/StartBuildingTargetingAbility.html", ["start", "building", "targeting", "ability"], "AInfantryController");
addToContainers_function("TryDoBuildingTargetingAbility", "", "Docs/Classes/AInfantryController/Functions/TryDoBuildingTargetingAbility.html", ["try", "do", "building", "targeting", "ability"], "AInfantryController");
addToContainers_function("DoBuildingTargetingAbility", "", "Docs/Classes/AInfantryController/Functions/DoBuildingTargetingAbility.html", ["do", "building", "targeting", "ability"], "AInfantryController");
addToContainers_function("GetDistanceFromAnotherSelectableForAbility", "", "Docs/Classes/AInfantryController/Functions/GetDistanceFromAnotherSelectableF.html", ["get", "distance", "from", "another", "selectable", "for", "ability"], "AInfantryController");
addToContainers_function("GetDistanceFromAnotherSelectableForAbility", "", "Docs/Classes/AInfantryController/Functions/GetDistanceFromAnotherSelectableF_1.html", ["get", "distance", "from", "another", "selectable", "for", "ability"], "AInfantryController");
addToContainers_function("GetDistanceFromBuildingForEnteringItsGarrison", "", "Docs/Classes/AInfantryController/Functions/GetDistanceFromBuildingForEnterin.html", ["get", "distance", "from", "building", "for", "entering", "its", "garrison"], "AInfantryController");
addToContainers_function("GetSelectableTargetingAbilityAcceptanceRadius", "Get the move acceptance radius for an ability that requires another target", "Docs/Classes/AInfantryController/Functions/GetSelectableTargetingAbilityAcce.html", ["get", "selectable", "targeting", "ability", "acceptance", "radius"], "AInfantryController");
addToContainers_function("GetBuildingTargetingAbilityAcceptanceRadius", "Get move acceptance radius for a special building targeting ability", "Docs/Classes/AInfantryController/Functions/GetBuildingTargetingAbilityAccept.html", ["get", "building", "targeting", "ability", "acceptance", "radius"], "AInfantryController");
addToContainers_function("GetBuildingEnterGarrisonAcceptanceRadius", "Get move acceptance radius for a enter garrison command", "Docs/Classes/AInfantryController/Functions/GetBuildingEnterGarrisonAcceptanc.html", ["get", "building", "enter", "garrison", "acceptance", "radius"], "AInfantryController");
addToContainers_function("OnMoveToSingleTargetContextActionTargetComplete", "Check if in range for context action that requires another target and start it if so", "Docs/Classes/AInfantryController/Functions/OnMoveToSingleTargetContextAction.html", ["on", "move", "to", "single", "target", "context", "action", "target", "complete"], "AInfantryController");
addToContainers_function("StartSingleTargetContextAction", "Play anim for ability if it uses one or do ability instantly", "Docs/Classes/AInfantryController/Functions/StartSingleTargetContextAction.html", ["start", "single", "target", "context", "action"], "AInfantryController");
addToContainers_function("TryDoSingleTargetContextAction", "Try do single target ability given every check passes", "Docs/Classes/AInfantryController/Functions/TryDoSingleTargetContextAction.html", ["try", "do", "single", "target", "context", "action"], "AInfantryController");
addToContainers_function("DoSingleTargetContextAction", "Spawn ability that requires another target", "Docs/Classes/AInfantryController/Functions/DoSingleTargetContextAction.html", ["do", "single", "target", "context", "action"], "AInfantryController");
addToContainers_function("MoveTowardsAttackTarget", "Move towards attack target, stopping when in attack range", "Docs/Classes/AInfantryController/Functions/MoveTowardsAttackTarget.html", ["move", "towards", "attack", "target"], "AInfantryController");
addToContainers_function("GetMoveToAttackTargetAcceptanceRadius", "", "Docs/Classes/AInfantryController/Functions/GetMoveToAttackTargetAcceptanceRa.html", ["get", "move", "to", "attack", "target", "acceptance", "radius"], "AInfantryController");
addToContainers_function("GetNonHostileMoveToLocationAcceptanceRadius", "", "Docs/Classes/AInfantryController/Functions/GetNonHostileMoveToLocationAccept.html", ["get", "non", "hostile", "move", "to", "location", "acceptance", "radius"], "AInfantryController");
addToContainers_function("MoveTowardsContextActionTarget", "Move towards context action target", "Docs/Classes/AInfantryController/Functions/MoveTowardsContextActionTarget.html", ["move", "towards", "context", "action", "target"], "AInfantryController");
addToContainers_function("MoveTowardsBuildingTargetingAbilityTarget", "Try move in range of a building to use a building targeting ability", "Docs/Classes/AInfantryController/Functions/MoveTowardsBuildingTargetingAbili.html", ["move", "towards", "building", "targeting", "ability", "target"], "AInfantryController");
addToContainers_function("MoveTowardsBuildingToEnterItsGarrison", "Try move in range of a building to enter it\'s garrison", "Docs/Classes/AInfantryController/Functions/MoveTowardsBuildingToEnterItsGarr.html", ["move", "towards", "building", "to", "enter", "its", "garrison"], "AInfantryController");
addToContainers_function("OnMoveToBuildingToEnterItsGarrisonComplete", "", "Docs/Classes/AInfantryController/Functions/OnMoveToBuildingToEnterItsGarriso.html", ["on", "move", "to", "building", "to", "enter", "its", "garrison", "complete"], "AInfantryController");
addToContainers_function("ShouldChangeTargetOnDamage", "Called when possessed unit takes damage. Given a damage causer check if we should change targets to them", "Docs/Classes/AInfantryController/Functions/ShouldChangeTargetOnDamage.html", ["should", "change", "target", "on", "damage"], "AInfantryController");
addToContainers_function("CanTargetBeAquired", "Can a selectable be aquired as a new target when performing a capsule sweep for nearby targets", "Docs/Classes/AInfantryController/Functions/CanTargetBeAquired.html", ["can", "target", "be", "aquired"], "AInfantryController");
addToContainers_function("HasTarget", "", "Docs/Classes/AInfantryController/Functions/HasTarget.html", ["has", "target"], "AInfantryController");
addToContainers_function("IsTargetAttackable", "", "Docs/Classes/AInfantryController/Functions/IsTargetAttackable.html", ["is", "target", "attackable"], "AInfantryController");
addToContainers_function("IsSelectableAttackable", "Check the dynamic properties of a selectable to see if they can be attacked. Does not check range or if attack timer handle has reset", "Docs/Classes/AInfantryController/Functions/IsSelectableAttackable.html", ["is", "selectable", "attackable"], "AInfantryController");
addToContainers_function("BeginAttackAnim", "Start animation to attack with weapon", "Docs/Classes/AInfantryController/Functions/BeginAttackAnim.html", ["begin", "attack", "anim"], "AInfantryController");
addToContainers_function("OnAttackMade", "Make attack at AttackTarget", "Docs/Classes/AInfantryController/Functions/OnAttackMade.html", ["on", "attack", "made"], "AInfantryController");
addToContainers_function("OnResetFire", "Called when unit can fire again", "Docs/Classes/AInfantryController/Functions/OnResetFire.html", ["on", "reset", "fire"], "AInfantryController");
addToContainers_function("FindClosestValidEnemyInRange", "Returns closest enemy within Radius that can be aquired by this unit. This means checking things like whether we can attack air and whether enemy flies, if they are outside fog of war etc @param Radius - how far to check @param bForceOnTargetChangeCall - if true then if a target is found then OnTargetChanged will be called. If false then it will compare if new target equals current target (AttackTarget) before deciding to call OnTargetChanged. This is here because sometimes AttackTarget isn\'t nulled at times when it should be. Currently I never use this param but when I get confident enough that I could then don\'t need to null AttackTarget on every command, then in states like Idle_WithNoTarget make sure to set this param to true @return - the closest enemy within Radius", "Docs/Classes/AInfantryController/Functions/FindClosestValidEnemyInRange.html", ["find", "closest", "valid", "enemy", "in", "range"], "AInfantryController");
addToContainers_function("IsMoving", "returns true if moving", "Docs/Classes/AInfantryController/Functions/IsMoving.html", ["is", "moving"], "AInfantryController");
addToContainers_function("WillStopMovementGoThrough", "Returns true if AAIController::StopMovement() will actually do something when called. If this returns false then you know that OnMoveComplete will not be called if you call StopMovement", "Docs/Classes/AInfantryController/Functions/WillStopMovementGoThrough.html", ["will", "stop", "movement", "go", "through"], "AInfantryController");
addToContainers_function("CanFire", "Returns true if attack has reset", "Docs/Classes/AInfantryController/Functions/CanFire.html", ["can", "fire"], "AInfantryController");
addToContainers_function("IsTargetInRange", "Returns true if AttackTarget is within attack range", "Docs/Classes/AInfantryController/Functions/IsTargetInRange.html", ["is", "target", "in", "range"], "AInfantryController");
addToContainers_function("IsFacingAttackTarget", "Returns true if facing attack target enough to attack them", "Docs/Classes/AInfantryController/Functions/IsFacingAttackTarget.html", ["is", "facing", "attack", "target"], "AInfantryController");
addToContainers_function("OnTargetChange", "Call whenever AttackTarget changes", "Docs/Classes/AInfantryController/Functions/OnTargetChange.html", ["on", "target", "change"], "AInfantryController");
addToContainers_function("OnContextActionTargetChange", "Call when context action target changes", "Docs/Classes/AInfantryController/Functions/OnContextActionTargetChange.html", ["on", "context", "action", "target", "change"], "AInfantryController");
addToContainers_function("WantsToAttack", "Return true if unit is in a behavior state that wants to make attacks", "Docs/Classes/AInfantryController/Functions/WantsToAttack.html", ["wants", "to", "attack"], "AInfantryController");
addToContainers_function("SetFacing_MovementDirection", "Make unit face the direction they are moving", "Docs/Classes/AInfantryController/Functions/SetFacing_MovementDirection.html", ["set", "facing_", "movement", "direction"], "AInfantryController");
addToContainers_function("SetFacing_Focus", "Make unit face their focus (usually another enemy selectable)", "Docs/Classes/AInfantryController/Functions/SetFacing_Focus.html", ["set", "facing_", "focus"], "AInfantryController");
addToContainers_function("StopBehaviour", "", "Docs/Classes/AInfantryController/Functions/StopBehaviour.html", ["stop", "behaviour"], "AInfantryController");
addToContainers_function("Move", "", "Docs/Classes/AInfantryController/Functions/Move.html", [], "AInfantryController");
addToContainers_function("Delay)", "Call function with no return after delay, or crash if delay is <= 0 @param TimerHandle timer handle to use @param Function function to call @param Delay delay for calling function", "Docs/Classes/AInfantryController/Functions/Delay).html", [], "AInfantryController");
addToContainers_function("Delay)", "Call function only if delay is greater than 0, otherwise do nothing", "Docs/Classes/AInfantryController/Functions/Delay)_1.html", [], "AInfantryController");
addToContainers_function("SetupReferences", "", "Docs/Classes/AInfantryController/Functions/SetupReferences.html", ["setup", "references"], "AInfantryController");
addToContainers_function("SetupTickFunctions", "Setup function pointers", "Docs/Classes/AInfantryController/Functions/SetupTickFunctions.html", ["setup", "tick", "functions"], "AInfantryController");
addToContainers_function("DoNothing", "For timer handles", "Docs/Classes/AInfantryController/Functions/DoNothing.html", ["do", "nothing"], "AInfantryController");
addToContainers_function("OnUnitHasAttackChanged", "Functions to call from unit when its attributes change during a match, possibly because of upgrades", "Docs/Classes/AInfantryController/Functions/OnUnitHasAttackChanged.html", ["on", "unit", "has", "attack", "changed"], "AInfantryController");
addToContainers_function("OnUnitRangeChanged", "", "Docs/Classes/AInfantryController/Functions/OnUnitRangeChanged.html", ["on", "unit", "range", "changed"], "AInfantryController");
addToContainers_function("OnUnitAttackFacingRotationRequiredChanged", "", "Docs/Classes/AInfantryController/Functions/OnUnitAttackFacingRotationRequire.html", ["on", "unit", "attack", "facing", "rotation", "required", "changed"], "AInfantryController");
addToContainers_function("GetUnitState", "These were added for the debug widget", "Docs/Classes/AInfantryController/Functions/GetUnitState.html", ["get", "unit", "state"], "AInfantryController");
addToContainers_function("GetUnitAnimState", "", "Docs/Classes/AInfantryController/Functions/GetUnitAnimState.html", ["get", "unit", "anim", "state"], "AInfantryController");
addToContainers_function("DisplayOnScreenDebugInfo", "", "Docs/Classes/AInfantryController/Functions/DisplayOnScreenDebugInfo.html", ["display", "on", "screen", "debug", "info"], "AInfantryController");
addToContainers_variable("LastCompletedMoveResult", "Path following result of the last move completed", "Docs/Classes/AInfantryController/Variables/LastCompletedMoveResult.html", ["last", "completed", "move", "result"], "AInfantryController");
addToContainers_variable("TickFunctions", "Functions for what to do on AI ticks based on state", "Docs/Classes/AInfantryController/Variables/TickFunctions.html", ["tick", "functions"], "AInfantryController");
addToContainers_variable("", "Once aquired and attacked target at least once, Range * RangeLenience = range this unit can keep attacking enemy from. e.g. RangeLenience = 1.1 means the enemy can walk outside Range by 10% and still be attacked if they were being attacked previously. Prevents very small movements from causing attacks to stop. If changing targets then this lenience doesn\'t apply until the unit has attacked that new target at least once", "Docs/Classes/AInfantryController/Variables/.html", [], "AInfantryController");
addToContainers_variable("", "What to add to acceptance radius when making a move. Want this negative to make unit try and move closer. Problem is if it makes the acceptance radius too small and the move is to another actor and not the ground then the move will not happen at all because pathfinding will not allow it", "Docs/Classes/AInfantryController/Variables/_1.html", [], "AInfantryController");
addToContainers_variable("", "For abilities that require world location", "Docs/Classes/AInfantryController/Variables/_2.html", [], "AInfantryController");
addToContainers_variable("", "For building targeting abilities (e.g. engineers, spies in C&C)", "Docs/Classes/AInfantryController/Variables/_3.html", [], "AInfantryController");
addToContainers_variable("", "For moves to enter building garrisons", "Docs/Classes/AInfantryController/Variables/_4.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to resource spots", "Docs/Classes/AInfantryController/Variables/_5.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to resource depots", "Docs/Classes/AInfantryController/Variables/_6.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to locations where building foundations will be placed", "Docs/Classes/AInfantryController/Variables/_7.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for moves to construction sites", "Docs/Classes/AInfantryController/Variables/_8.html", [], "AInfantryController");
addToContainers_variable("", "--------------------------------------------------------------------------------------", "Docs/Classes/AInfantryController/Variables/_9.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_10.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_11.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_12.html", [], "AInfantryController");
addToContainers_variable("", "", "Docs/Classes/AInfantryController/Variables/_13.html", [], "AInfantryController");
addToContainers_variable("", "How close enemies have to be to get \'picked up\' by this unit when in a state that tries to find enemies. This can be larger than units sight radius but unit will still not pick up any units hidden in fog - they would need a friendly to reveal that fog for them. Also this is the radius of a capsule sweep so you should not make it an uneccessarily large number", "Docs/Classes/AInfantryController/Variables/_14.html", [], "AInfantryController");
addToContainers_variable("", "Same as above but for attack moves", "Docs/Classes/AInfantryController/Variables/_15.html", [], "AInfantryController");
addToContainers_variable("", "How far away from encounter point unit will go before giving up persuing enemy and returning to complete previous command. 0 means will never move", "Docs/Classes/AInfantryController/Variables/_16.html", [], "AInfantryController");
addToContainers_variable("", "How far away from encounter point unit will go before giving up persuing enemy and returning to complete previous command. 0 means will never move", "Docs/Classes/AInfantryController/Variables/_17.html", [], "AInfantryController");
addToContainers_variable("", "If unit is idle, the distance from encounter point unit will go before considering looking for another target. If no closer targets than current target then unit will continue chasing and persuing it. Setting this to 0 basically means that if unit\'s current target is out of range then they will TRY to switch to another target, but if this is positive then they will chase for a bit before trying to find other targets", "Docs/Classes/AInfantryController/Variables/_18.html", [], "AInfantryController");
addToContainers_variable("", "Same as above except for attack moves.", "Docs/Classes/AInfantryController/Variables/_19.html", [], "AInfantryController");
addToContainers_variable("", "When was previously idle and are now returning to leash location, how long to wait before choosing to aquire targets again. 0 means do not wait at all. Less than 0 implies do not aquire any targets until have returned to leash location", "Docs/Classes/AInfantryController/Variables/_20.html", [], "AInfantryController");
addToContainers_variable("", "Same as above except for attack moves", "Docs/Classes/AInfantryController/Variables/_21.html", [], "AInfantryController");
addToContainers_variable("AccumulatedTickBehaviorTime", "Time towards calling TickAI", "Docs/Classes/AInfantryController/Variables/AccumulatedTickBehaviorTime.html", ["accumulated", "tick", "behavior", "time"], "AInfantryController");
addToContainers_variable("TimeTillAttackResets", "Time towards resetting attack. If less than or equal to 0 then unit can attack", "Docs/Classes/AInfantryController/Variables/TimeTillAttackResets.html", ["time", "till", "attack", "resets"], "AInfantryController");
addToContainers_variable("", "The rate at which potentially heavy behavior operations happen", "Docs/Classes/AInfantryController/Variables/_22.html", [], "AInfantryController");
addToContainers_variable("", "Reference to player state that owns unit", "Docs/Classes/AInfantryController/Variables/_23.html", [], "AInfantryController");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AInfantryController/Variables/_24.html", [], "AInfantryController");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/AInfantryController/Variables/_25.html", [], "AInfantryController");
addToContainers_variable("", "Faction info of PS", "Docs/Classes/AInfantryController/Variables/_26.html", [], "AInfantryController");
addToContainers_variable("", "Reference to unit this is controlling", "Docs/Classes/AInfantryController/Variables/_27.html", [], "AInfantryController");
addToContainers_variable("CharacterMovement", "Reference to unit\'s movement component", "Docs/Classes/AInfantryController/Variables/CharacterMovement.html", ["character", "movement"], "AInfantryController");
addToContainers_variable("UnitState", "Unit state", "Docs/Classes/AInfantryController/Variables/UnitState.html", ["unit", "state"], "AInfantryController");
addToContainers_variable("AnimStateForBehavior", "Animation unit is playing for behavior purposes only - may not always be strictly accurate", "Docs/Classes/AInfantryController/Variables/AnimStateForBehavior.html", ["anim", "state", "for", "behavior"], "AInfantryController");
addToContainers_variable("ClickLocation", "Where the player clicked when giving a command if that click was not on a selectable", "Docs/Classes/AInfantryController/Variables/ClickLocation.html", ["click", "location"], "AInfantryController");
addToContainers_variable("LeashLocation", "Location of unit when it encounters an enemy during an attack move command or while standing idle. It is the location the unit will return to at some point when it decides to stop chasing target or there are no more targets nearby", "Docs/Classes/AInfantryController/Variables/LeashLocation.html", ["leash", "location"], "AInfantryController");
addToContainers_variable("EncounterPoint", "Location of unit when another unit was aquired", "Docs/Classes/AInfantryController/Variables/EncounterPoint.html", ["encounter", "point"], "AInfantryController");
addToContainers_variable("TeamVisInfo", "Visibility info for the team this AI controller is on", "Docs/Classes/AInfantryController/Variables/TeamVisInfo.html", ["team", "vis", "info"], "AInfantryController");
addToContainers_variable("", "The selectable this is currently trying to attack", "Docs/Classes/AInfantryController/Variables/_28.html", [], "AInfantryController");
addToContainers_variable("AttackTargetBoundsLength", "The length of the bounds of AttackTarget. Used in distance calculations because we measure from the edge of our bounds to the edge of their bounds to see if we are in range", "Docs/Classes/AInfantryController/Variables/AttackTargetBoundsLength.html", ["attack", "target", "bounds", "length"], "AInfantryController");
addToContainers_variable("", "Selectable who was fired at last. Used to know if range lenience should be used", "Docs/Classes/AInfantryController/Variables/_29.html", [], "AInfantryController");
addToContainers_variable("", "Target of a targeting context action. Also will be used for special building targeting abilities", "Docs/Classes/AInfantryController/Variables/_30.html", [], "AInfantryController");
addToContainers_variable("ContextActionTargetBoundsLength", "Like AttackTargetBoundsLength but for ContextActionTarget", "Docs/Classes/AInfantryController/Variables/ContextActionTargetBoundsLength.html", ["context", "action", "target", "bounds", "length"], "AInfantryController");
addToContainers_variable("bIgnoreLookingAtFocus", "If true then will not rotate to face focus during UpdateControlRotation", "Docs/Classes/AInfantryController/Variables/bIgnoreLookingAtFocus.html", ["ignore", "looking", "at", "focus"], "AInfantryController");
addToContainers_variable("bUnitHasAttack", "Whether the controlled unit has an attack or not. High Templars in SCII are an example of a unit that does not have an attack", "Docs/Classes/AInfantryController/Variables/bUnitHasAttack.html", ["unit", "has", "attack"], "AInfantryController");
addToContainers_variable("bCanUnitBuildBuildings", "Whether the controlled unit has the ability to construct buildings. Does not mean unit can repair them though", "Docs/Classes/AInfantryController/Variables/bCanUnitBuildBuildings.html", ["can", "unit", "build", "buildings"], "AInfantryController");
addToContainers_variable("TimerHandle_TargetAquiring", "Timer handle that if active means we cannot aquire targets", "Docs/Classes/AInfantryController/Variables/TimerHandle_TargetAquiring.html", ["timer", "handle_", "target", "aquiring"], "AInfantryController");
addToContainers_variable("bIsTargetStillInRange", "True if current target was attacked and has not moved out of Range * Leneince", "Docs/Classes/AInfantryController/Variables/bIsTargetStillInRange.html", ["is", "target", "still", "in", "range"], "AInfantryController");
addToContainers_variable("DoOnMoveComplete", "Pointer to function. Called in OnMoveCompleted", "Docs/Classes/AInfantryController/Variables/DoOnMoveComplete.html", ["do", "on", "move", "complete"], "AInfantryController");
addToContainers_variable("PendingContextAction", "Pointer to function. Sets the action to be carried out when context action animation reaches anim notify", "Docs/Classes/AInfantryController/Variables/PendingContextAction.html", ["pending", "context", "action"], "AInfantryController");
addToContainers_variable("PendingContextActionType", "The type of action to carry out when anim notify triggers casted to a uint8. This will either be a EContextButton or EBuildingTargetingAbility", "Docs/Classes/AInfantryController/Variables/PendingContextActionType.html", ["pending", "context", "action", "type"], "AInfantryController");
addToContainers_variable("PendingAbilityUsageCase", "How the pending context action type is being carried out", "Docs/Classes/AInfantryController/Variables/PendingAbilityUsageCase.html", ["pending", "ability", "usage", "case"], "AInfantryController");
addToContainers_variable("PendingAbilityAuxilleryData", "When pending ability usage case is selectable\'s inventory then we store the inventory slot index here", "Docs/Classes/AInfantryController/Variables/PendingAbilityAuxilleryData.html", ["pending", "ability", "auxillery", "data"], "AInfantryController");
addToContainers_variable("PendingAbilityMoreAuxilleryData", "One use for this is to store the inventory item type when a use item type action is pending", "Docs/Classes/AInfantryController/Variables/PendingAbilityMoreAuxilleryData.html", ["pending", "ability", "more", "auxillery", "data"], "AInfantryController");
addToContainers_variable("", "Resource spot this unit is assigned to or null if none", "Docs/Classes/AInfantryController/Variables/_31.html", [], "AInfantryController");
addToContainers_variable("", "Depot that unit is returning to to drop off resources. Will get assigned every time resource collecting from spot completes", "Docs/Classes/AInfantryController/Variables/_32.html", [], "AInfantryController");
addToContainers_variable("TimerHandle_ResourceGathering", "Timer handle to monitor when resource gathering is complete", "Docs/Classes/AInfantryController/Variables/TimerHandle_ResourceGathering.html", ["timer", "handle_", "resource", "gathering"], "AInfantryController");
addToContainers_variable("", "Building to work on", "Docs/Classes/AInfantryController/Variables/_33.html", [], "AInfantryController");
addToContainers_variable("FoundationType", "The type of building unit is going to put foundations down for when it reaches correct location", "Docs/Classes/AInfantryController/Variables/FoundationType.html", ["foundation", "type"], "AInfantryController");
addToContainers_variable("FoundationRotation", "Rotation to place foundation when at site", "Docs/Classes/AInfantryController/Variables/FoundationRotation.html", ["foundation", "rotation"], "AInfantryController");
addToContainers_variable("Range", "", "Docs/Classes/AInfantryController/Variables/Range.html", [], "AInfantryController");
addToContainers_variable("LenienceRange", "", "Docs/Classes/AInfantryController/Variables/LenienceRange.html", ["lenience", "range"], "AInfantryController");
addToContainers_variable("AttackFacingRotationRequirement", "", "Docs/Classes/AInfantryController/Variables/AttackFacingRotationRequirement.html", ["attack", "facing", "rotation", "requirement"], "AInfantryController");
addToContainers_class("UBuildingAnimInstance", "Anim instance to use for buildings", "Docs/Classes/UBuildingAnimInstance/UBuildingAnimInstance.html", ["building", "anim", "instance"], "");
addToContainers_function("NativeBeginPlay", "", "Docs/Classes/UBuildingAnimInstance/Functions/NativeBeginPlay.html", ["native", "begin", "play"], "UBuildingAnimInstance");
addToContainers_function("AnimNotify_OnDoorFullyOpen", "This will spawn a unit", "Docs/Classes/UBuildingAnimInstance/Functions/AnimNotify_OnDoorFullyOpen.html", ["anim", "notify_", "on", "door", "fully", "open"], "UBuildingAnimInstance");
addToContainers_function("AnimNotify_OnZeroHealthAnimationFinished", "", "Docs/Classes/UBuildingAnimInstance/Functions/AnimNotify_OnZeroHealthAnimationF.html", ["anim", "notify_", "on", "zero", "health", "animation", "finished"], "UBuildingAnimInstance");
addToContainers_variable("", "Owner", "Docs/Classes/UBuildingAnimInstance/Variables/.html", [], "UBuildingAnimInstance");
addToContainers_class("UInfantryAnimInstance", "Anim instance infantry should use. Using this class allows use of custom anim notifies. Inside the BP\'s anim graph you will need to make a blueprint of this and add a \"Slot \'Default Slot\'\" node and connect its output to the final animation pose node", "Docs/Classes/UInfantryAnimInstance/UInfantryAnimInstance.html", ["infantry", "anim", "instance"], "");
addToContainers_function("UInfantryAnimInstance", "", "Docs/Classes/UInfantryAnimInstance/Functions/UInfantryAnimInstance.html", ["infantry", "anim", "instance"], "UInfantryAnimInstance");
addToContainers_function("NativeBeginPlay", "", "Docs/Classes/UInfantryAnimInstance/Functions/NativeBeginPlay.html", ["native", "begin", "play"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_ExitStealthMode", "Signals unit should exit stealth mode if they support stealthing", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_ExitStealthMode.html", ["anim", "notify_", "exit", "stealth", "mode"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_PlayAttackPreparationSound", "Starts playing a sound for attack e.g. like how oblisk of light warms up", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_PlayAttackPreparationS.html", ["anim", "notify_", "play", "attack", "preparation", "sound"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_FireWeapon", "Called when fire animation fires weapon.", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_FireWeapon.html", ["anim", "notify_", "fire", "weapon"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_OnAttackAnimationFinished", "Called when weapon firing animation is finished. This signals that the unit can move again", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_OnAttackAnimationFinis.html", ["anim", "notify_", "on", "attack", "animation", "finished"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_ExecuteContextAction", "Called when a context action animation reaches point where it should carry out the action", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_ExecuteContextAction.html", ["anim", "notify_", "execute", "context", "action"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_OnContextAnimationFinished", "Signals that unit can move again from AI ticks", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_OnContextAnimationFini.html", ["anim", "notify_", "on", "context", "animation", "finished"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_DropOffResources", "Signals that resources have been dropped off at depot", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_DropOffResources.html", ["anim", "notify_", "drop", "off", "resources"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_PickUpInventoryItemOffGround", "Signals that we have picked up an inventory item from the ground", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_PickUpInventoryItemOff.html", ["anim", "notify_", "pick", "up", "inventory", "item", "off", "ground"], "UInfantryAnimInstance");
addToContainers_function("AnimNotify_OnZeroHealthAnimationFinished", "Called by an anim notify when the zero health animation has finished", "Docs/Classes/UInfantryAnimInstance/Functions/AnimNotify_OnZeroHealthAnimationF.html", ["anim", "notify_", "on", "zero", "health", "animation", "finished"], "UInfantryAnimInstance");
addToContainers_variable("", "Reference to owning pawn", "Docs/Classes/UInfantryAnimInstance/Variables/.html", [], "UInfantryAnimInstance");
addToContainers_class("UBuildingAttackComponent_SK", "The same as UBuildingAttackComponent_SM except this is for a skeletal mesh instead of a static mesh. Also optionally you can use idle and attack animations. This class is very similar to the SM version except it can have animations.", "Docs/Classes/UBuildingAttackComponent_SK/UBuildingAttackComponent_SK.html", ["building", "attack", "component_", "s", "k"], "");
addToContainers_function("UBuildingAttackComponent_SK", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/UBuildingAttackComponent_SK.html", ["building", "attack", "component_", "s", "k"], "UBuildingAttackComponent_SK");
addToContainers_function("BeginPlay", "a bool bCancelRotationWhilePlayingAttackAnim", "Docs/Classes/UBuildingAttackComponent_SK/Functions/BeginPlay.html", ["begin", "play"], "UBuildingAttackComponent_SK");
addToContainers_function("CheckAnimBlueprint", "@return - true if anim blueprint has no errors", "Docs/Classes/UBuildingAttackComponent_SK/Functions/CheckAnimBlueprint.html", ["check", "anim", "blueprint"], "UBuildingAttackComponent_SK");
addToContainers_function("CheckAnimNotifies", "Check whether the animations have thr required anim notifies on them @return - true if all required anim notifies are present on all the montages for this component", "Docs/Classes/UBuildingAttackComponent_SK/Functions/CheckAnimNotifies.html", ["check", "anim", "notifies"], "UBuildingAttackComponent_SK");
addToContainers_function("TickComponent", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/TickComponent.html", ["tick", "component"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerDoAttack", "Attack Target", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerDoAttack.html", ["server", "do", "attack"], "UBuildingAttackComponent_SK");
addToContainers_function("ClientDoAttack", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ClientDoAttack.html", ["client", "do", "attack"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerAnimNotify_DoAttack", "Called when the anim notify that does attack is reached", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerAnimNotify_DoAttack.html", ["server", "anim", "notify_", "do", "attack"], "UBuildingAttackComponent_SK");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "UBuildingAttackComponent_SK");
addToContainers_function("GetAsMeshComponent", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetAsMeshComponent.html", ["get", "as", "mesh", "component"], "UBuildingAttackComponent_SK");
addToContainers_function("SetupAttackComp", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/SetupAttackComp.html", ["setup", "attack", "comp"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerSetupAttackCompMore", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerSetupAttackCompMore.html", ["server", "setup", "attack", "comp", "more"], "UBuildingAttackComponent_SK");
addToContainers_function("ClientSetupAttackCompMore", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ClientSetupAttackCompMore.html", ["client", "setup", "attack", "comp", "more"], "UBuildingAttackComponent_SK");
addToContainers_function("GetTargetingTraceDelegate", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetTargetingTraceDelegate.html", ["get", "targeting", "trace", "delegate"], "UBuildingAttackComponent_SK");
addToContainers_function("GetTargetingQueryParams", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetTargetingQueryParams.html", ["get", "targeting", "query", "params"], "UBuildingAttackComponent_SK");
addToContainers_function("GetTargetingSweepOrigin", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetTargetingSweepOrigin.html", ["get", "targeting", "sweep", "origin"], "UBuildingAttackComponent_SK");
addToContainers_function("GetTargetingSweepRadius", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetTargetingSweepRadius.html", ["get", "targeting", "sweep", "radius"], "UBuildingAttackComponent_SK");
addToContainers_function("SetTaskManagerBucketIndices", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/SetTaskManagerBucketIndices.html", ["set", "task", "manager", "bucket", "indices"], "UBuildingAttackComponent_SK");
addToContainers_function("SetTaskManagerArrayIndex", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/SetTaskManagerArrayIndex.html", ["set", "task", "manager", "array", "index"], "UBuildingAttackComponent_SK");
addToContainers_function("GrabTaskManagerBucketIndices", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GrabTaskManagerBucketIndices.html", ["grab", "task", "manager", "bucket", "indices"], "UBuildingAttackComponent_SK");
addToContainers_function("OnParentBuildingExitFogOfWar", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/OnParentBuildingExitFogOfWar.html", ["on", "parent", "building", "exit", "fog", "of", "war"], "UBuildingAttackComponent_SK");
addToContainers_function("SetRotatingBase", "Set whether this turret has a parent component that can rotate yaw", "Docs/Classes/UBuildingAttackComponent_SK/Functions/SetRotatingBase.html", ["set", "rotating", "base"], "UBuildingAttackComponent_SK");
addToContainers_function("HasRotatingBase", "True if this turret is attached to a component that rotates yaw for it", "Docs/Classes/UBuildingAttackComponent_SK/Functions/HasRotatingBase.html", ["has", "rotating", "base"], "UBuildingAttackComponent_SK");
addToContainers_function("HasIdleAnimation", "True if the structure uses an idle animation", "Docs/Classes/UBuildingAttackComponent_SK/Functions/HasIdleAnimation.html", ["has", "idle", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("HasAttackAnimationOrAttackWarmupAnimation", "True if the structure uses an animation for it\'s attack or attack warmup - same thing", "Docs/Classes/UBuildingAttackComponent_SK/Functions/HasAttackAnimationOrAttackWarmupA.html", ["has", "attack", "animation", "or", "attack", "warmup", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("HasAttackWarmupAnimation", "True if structure uses an animation for it\'s attack warmup", "Docs/Classes/UBuildingAttackComponent_SK/Functions/HasAttackWarmupAnimation.html", ["has", "attack", "warmup", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("HasAttackAnimation", "True if structure uses an animation for it\'s attack", "Docs/Classes/UBuildingAttackComponent_SK/Functions/HasAttackAnimation.html", ["has", "attack", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("IsPlayingAttackAnimation", "Return true if playing animation for attack", "Docs/Classes/UBuildingAttackComponent_SK/Functions/IsPlayingAttackAnimation.html", ["is", "playing", "attack", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("IsPlayingAttackOrWarmupAnimation", "Return true if playing animation for attack or attack warmup", "Docs/Classes/UBuildingAttackComponent_SK/Functions/IsPlayingAttackOrWarmupAnimation.html", ["is", "playing", "attack", "or", "warmup", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("IsAttackOffCooldown", "If true then attack is ready to use. Warmup may still need to run if attack requres it though", "Docs/Classes/UBuildingAttackComponent_SK/Functions/IsAttackOffCooldown.html", ["is", "attack", "off", "cooldown"], "UBuildingAttackComponent_SK");
addToContainers_function("HasAttackWarmup", "Whether the structure has to warm up before attacking e.g. obelisk of light has like a 4 second warm up.", "Docs/Classes/UBuildingAttackComponent_SK/Functions/HasAttackWarmup.html", ["has", "attack", "warmup"], "UBuildingAttackComponent_SK");
addToContainers_function("HasAttackFullyWarmedUp", "Return whether attack has fully warmed up and therefore can be used if structure has a viable target.", "Docs/Classes/UBuildingAttackComponent_SK/Functions/HasAttackFullyWarmedUp.html", ["has", "attack", "fully", "warmed", "up"], "UBuildingAttackComponent_SK");
addToContainers_function("IsAttackWarmingUp", "Return whether attack is currently warming up but not ready yet", "Docs/Classes/UBuildingAttackComponent_SK/Functions/IsAttackWarmingUp.html", ["is", "attack", "warming", "up"], "UBuildingAttackComponent_SK");
addToContainers_function("OnSweepForTargetsComplete", "Called when a sweep has completed. The sweep gets all actors within range @param TraceData - result of trace", "Docs/Classes/UBuildingAttackComponent_SK/Functions/OnSweepForTargetsComplete.html", ["on", "sweep", "for", "targets", "complete"], "UBuildingAttackComponent_SK");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "Return whether an actor can be aquired as a target. Assumes the actor has been checked to see if it is in range.", "Docs/Classes/UBuildingAttackComponent_SK/Functions/CanSweptActorBeAquiredAsTarget.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UBuildingAttackComponent_SK");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/CanSweptActorBeAquiredAsTarget_1.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UBuildingAttackComponent_SK");
addToContainers_function("IsCurrentTargetStillAquirable", "Returns whether Target is still a valid target. Might not necessarily be able to be attacked right now e.g. structure is not facing them yet", "Docs/Classes/UBuildingAttackComponent_SK/Functions/IsCurrentTargetStillAquirable.html", ["is", "current", "target", "still", "aquirable"], "UBuildingAttackComponent_SK");
addToContainers_function("uint8", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/uint8.html", [], "UBuildingAttackComponent_SK");
addToContainers_function("GetCurrentTargetTargetingStatus", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetCurrentTargetTargetingStatus.html", ["get", "current", "target", "targeting", "status"], "UBuildingAttackComponent_SK");
addToContainers_function("IsActorInRange_NoLenience", "Return whether an actor is in range to be attacked", "Docs/Classes/UBuildingAttackComponent_SK/Functions/IsActorInRange_NoLenience.html", ["is", "actor", "in", "range_", "no", "lenience"], "UBuildingAttackComponent_SK");
addToContainers_function("IsActorInRange_UseLeneince", "Return whether an actor is in range to be attacked. This version will use range lenince", "Docs/Classes/UBuildingAttackComponent_SK/Functions/IsActorInRange_UseLeneince.html", ["is", "actor", "in", "range_", "use", "leneince"], "UBuildingAttackComponent_SK");
addToContainers_function("GetYawToActor", "[Server] Return how much yaw the building would need to rotate to be considered facing the actor. Returns absolute values so range is [0, 180]", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetYawToActor.html", ["get", "yaw", "to", "actor"], "UBuildingAttackComponent_SK");
addToContainers_function("GetYawToActor", "[Server] This version also outputs the look at FRotator", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetYawToActor_1.html", ["get", "yaw", "to", "actor"], "UBuildingAttackComponent_SK");
addToContainers_function("GetEffectiveComponentYawRotation", "Get in world space the component\'s yaw rotation for targeting purposes, but it may not be the actual rotation that GetComponentRotation().Yaw would return.", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetEffectiveComponentYawRotation.html", ["get", "effective", "component", "yaw", "rotation"], "UBuildingAttackComponent_SK");
addToContainers_function("SetTarget", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UBuildingAttackComponent_SK/Functions/SetTarget.html", ["set", "target"], "UBuildingAttackComponent_SK");
addToContainers_function("GetTarget", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/GetTarget.html", ["get", "target"], "UBuildingAttackComponent_SK");
addToContainers_function("StartAttackWarmUp", "Start warming up attack", "Docs/Classes/UBuildingAttackComponent_SK/Functions/StartAttackWarmUp.html", ["start", "attack", "warm", "up"], "UBuildingAttackComponent_SK");
addToContainers_function("PlayAttackWarmupParticlesAndSound", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/PlayAttackWarmupParticlesAndSound.html", ["play", "attack", "warmup", "particles", "and", "sound"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerStopAttackWarmUp", "Stop warming up attack", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerStopAttackWarmUp.html", ["server", "stop", "attack", "warm", "up"], "UBuildingAttackComponent_SK");
addToContainers_function("ClientStopAttackWarmUp", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ClientStopAttackWarmUp.html", ["client", "stop", "attack", "warm", "up"], "UBuildingAttackComponent_SK");
addToContainers_function("StopWarmupParticles", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/StopWarmupParticles.html", ["stop", "warmup", "particles"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerStartAttackWarmupAnimation", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerStartAttackWarmupAnimation.html", ["server", "start", "attack", "warmup", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerStartAttackAnimation", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerStartAttackAnimation.html", ["server", "start", "attack", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerStopAttackOrWarmupAnimation", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerStopAttackOrWarmupAnimation.html", ["server", "stop", "attack", "or", "warmup", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("ServerStopAttackAnimation", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ServerStopAttackAnimation.html", ["server", "stop", "attack", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("ClientPlayAttackWarmupAnimation", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ClientPlayAttackWarmupAnimation.html", ["client", "play", "attack", "warmup", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("ClientPlayAttackAnimation", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ClientPlayAttackAnimation.html", ["client", "play", "attack", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("ClientStopAttackWarmupAnimation", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ClientStopAttackWarmupAnimation.html", ["client", "stop", "attack", "warmup", "animation"], "UBuildingAttackComponent_SK");
addToContainers_function("SetComponentAnimationTickingEnabled", "Enable ticking so animations can play", "Docs/Classes/UBuildingAttackComponent_SK/Functions/SetComponentAnimationTickingEnabl.html", ["set", "component", "animation", "ticking", "enabled"], "UBuildingAttackComponent_SK");
addToContainers_function("ClientOnMontageEnded", "Will likely want to disable ticking in this function", "Docs/Classes/UBuildingAttackComponent_SK/Functions/ClientOnMontageEnded.html", ["client", "on", "montage", "ended"], "UBuildingAttackComponent_SK");
addToContainers_function("OnRep_TimeAttackWarmupOrAnimStarted", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/OnRep_TimeAttackWarmupOrAnimStart.html", ["on", "rep_", "time", "attack", "warmup", "or", "anim", "started"], "UBuildingAttackComponent_SK");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UBuildingAttackComponent_SK/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UBuildingAttackComponent_SK");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Particle system component that shows the attack warmup particles", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_1.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Audio component that plays the attack warmup sound", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_2.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_3.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Multiplies attack range. The result is used to check if an actor that has already been aquired as a target is in range i.e. once a target has been aquired they can go out of range a bit and still be shot at", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_4.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_5.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("TeamVisibilityInfo", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TeamVisibilityInfo.html", ["team", "visibility", "info"], "UBuildingAttackComponent_SK");
addToContainers_variable("Target", "The actor this building has aquired as a target to attack", "Docs/Classes/UBuildingAttackComponent_SK/Variables/Target.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("OwningBuilding", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackComponent_SK");
addToContainers_variable("GS", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/GS.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("PoolingManager", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/PoolingManager.html", ["pooling", "manager"], "UBuildingAttackComponent_SK");
addToContainers_variable("TargetingTraceDelegate", "Delegate that fires when an async sweep for targets within range finishes", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TargetingTraceDelegate.html", ["targeting", "trace", "delegate"], "UBuildingAttackComponent_SK");
addToContainers_variable("TaskManagerBucket", "Where in UHeavyTaskManager::BuildingAttackComps this object is stored at", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TaskManagerBucket.html", ["task", "manager", "bucket"], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Optional idle animation. Should be looping", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_6.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Optional animation for attack. Should have a section at the end of it that loops idle anim but only if you\'re actually want an idle anim. You will probably want to look at the anim notifies on the anim instance class for this structure and may want to put some on this anim", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_7.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "If true then it is assumed AttackAnim includes your attack warmup period if there is one.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_8.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Time it takes to prepare attack. Use 0 to attack as soon as possible. Probably also belongs on FAttackAttributes. e.g. obelisk of light takes like 5 seconds This + FAttackAttributes::AttackRate add up to give the total time between attacks e.g. If FAttackAttributes::AttackRate is 2 and this is 3 then it\'s a total of 5 seconds between attacks. My notes: checks to see if warmup should stop happen every time a sweep result comes in", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_9.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "World time when attack warmup started or when AttackAnim started playing -1.f means not warming up or anim not playing", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_10.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("TimeSpentWarmingUpAttack", "This might only be relevant if the attack warmup does not use an animation", "Docs/Classes/UBuildingAttackComponent_SK/Variables/TimeSpentWarmingUpAttack.html", ["time", "spent", "warming", "up", "attack"], "UBuildingAttackComponent_SK");
addToContainers_variable("Team", "The team this structure is on", "Docs/Classes/UBuildingAttackComponent_SK/Variables/Team.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "How the structure selects it\'s target", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_11.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Whether the structure likes selecting targets closer or further away. Will only be relevant if TargetAquireMethod considers distance.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_12.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "If true then the building will not change targets until it\'s current target becomes untargetable. If false then everytime a sweep result comes in it will reevaluate it\'s target. Better performance if this is true.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_13.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("", "Attack preperation particles. Should not be looping. Probably belong on FAttackAttributes", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_14.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("QueryParams", "Query params this structure will use when sweeping for targets", "Docs/Classes/UBuildingAttackComponent_SK/Variables/QueryParams.html", ["query", "params"], "UBuildingAttackComponent_SK");
addToContainers_variable("", "How much yaw can be off by for structure to fire at target. 180 = can attack at targets at any angle. If this is <180 then the the building will need a rotating base to attack from every angle. If it does not have a rotating base then it will have a blind spot behind it so the rotation of the building when it is placed matters quite a bit.", "Docs/Classes/UBuildingAttackComponent_SK/Variables/_15.html", [], "UBuildingAttackComponent_SK");
addToContainers_variable("AttackCompUniqueID", "", "Docs/Classes/UBuildingAttackComponent_SK/Variables/AttackCompUniqueID.html", ["attack", "comp", "unique", "i", "d"], "UBuildingAttackComponent_SK");
addToContainers_variable("RotatingBase", "The yaw rotating turret base this is a child of. Can be null if not attached to one", "Docs/Classes/UBuildingAttackComponent_SK/Variables/RotatingBase.html", ["rotating", "base"], "UBuildingAttackComponent_SK");
addToContainers_class("UBuildingAttackComponent_SM", "A component that goes on a building. It can attack. This version is for a static mesh and is for components that do not need to rotate their pitch. It can optionally be added as a child of a IBuildingAttackComp_TurretsBase in which case the base will rotate the yaw and this too. Couple examples of what structures could be made with this: - nod obelisk of light - nod turret if you attach this to a rotatable base (UBuildingAttackCompStructBase_SM/SK) If you need animations then use UBuildingAttackComponent_SK If you want a structure that can also change it\'s pitch then use a UPitchChangeBuildingAttackComp_SM/SK", "Docs/Classes/UBuildingAttackComponent_SM/UBuildingAttackComponent_SM.html", ["building", "attack", "component_", "s", "m"], "");
addToContainers_function("UBuildingAttackComponent_SM", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/UBuildingAttackComponent_SM.html", ["building", "attack", "component_", "s", "m"], "UBuildingAttackComponent_SM");
addToContainers_function("BeginPlay", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/BeginPlay.html", ["begin", "play"], "UBuildingAttackComponent_SM");
addToContainers_function("TickComponent", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/TickComponent.html", ["tick", "component"], "UBuildingAttackComponent_SM");
addToContainers_function("ServerDoAttack", "Attack Target", "Docs/Classes/UBuildingAttackComponent_SM/Functions/ServerDoAttack.html", ["server", "do", "attack"], "UBuildingAttackComponent_SM");
addToContainers_function("ClientDoAttack", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UBuildingAttackComponent_SM/Functions/ClientDoAttack.html", ["client", "do", "attack"], "UBuildingAttackComponent_SM");
addToContainers_function("GetLifetimeReplicatedProps", "~ End IBuildingAttackComp_Turret interface", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "UBuildingAttackComponent_SM");
addToContainers_function("GetAsMeshComponent", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetAsMeshComponent.html", ["get", "as", "mesh", "component"], "UBuildingAttackComponent_SM");
addToContainers_function("SetupAttackComp", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/SetupAttackComp.html", ["setup", "attack", "comp"], "UBuildingAttackComponent_SM");
addToContainers_function("ServerSetupAttackCompMore", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/ServerSetupAttackCompMore.html", ["server", "setup", "attack", "comp", "more"], "UBuildingAttackComponent_SM");
addToContainers_function("ClientSetupAttackCompMore", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/ClientSetupAttackCompMore.html", ["client", "setup", "attack", "comp", "more"], "UBuildingAttackComponent_SM");
addToContainers_function("GetTargetingTraceDelegate", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetTargetingTraceDelegate.html", ["get", "targeting", "trace", "delegate"], "UBuildingAttackComponent_SM");
addToContainers_function("GetTargetingQueryParams", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetTargetingQueryParams.html", ["get", "targeting", "query", "params"], "UBuildingAttackComponent_SM");
addToContainers_function("GetTargetingSweepOrigin", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetTargetingSweepOrigin.html", ["get", "targeting", "sweep", "origin"], "UBuildingAttackComponent_SM");
addToContainers_function("GetTargetingSweepRadius", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetTargetingSweepRadius.html", ["get", "targeting", "sweep", "radius"], "UBuildingAttackComponent_SM");
addToContainers_function("SetTaskManagerBucketIndices", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/SetTaskManagerBucketIndices.html", ["set", "task", "manager", "bucket", "indices"], "UBuildingAttackComponent_SM");
addToContainers_function("SetTaskManagerArrayIndex", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/SetTaskManagerArrayIndex.html", ["set", "task", "manager", "array", "index"], "UBuildingAttackComponent_SM");
addToContainers_function("GrabTaskManagerBucketIndices", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GrabTaskManagerBucketIndices.html", ["grab", "task", "manager", "bucket", "indices"], "UBuildingAttackComponent_SM");
addToContainers_function("OnParentBuildingEnterFogOfWar", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/OnParentBuildingEnterFogOfWar.html", ["on", "parent", "building", "enter", "fog", "of", "war"], "UBuildingAttackComponent_SM");
addToContainers_function("OnParentBuildingExitFogOfWar", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/OnParentBuildingExitFogOfWar.html", ["on", "parent", "building", "exit", "fog", "of", "war"], "UBuildingAttackComponent_SM");
addToContainers_function("SetRotatingBase", "Set whether this turret has a parent component that can rotate yaw", "Docs/Classes/UBuildingAttackComponent_SM/Functions/SetRotatingBase.html", ["set", "rotating", "base"], "UBuildingAttackComponent_SM");
addToContainers_function("HasRotatingBase", "True if this turret is attached to a component that rotates yaw for it", "Docs/Classes/UBuildingAttackComponent_SM/Functions/HasRotatingBase.html", ["has", "rotating", "base"], "UBuildingAttackComponent_SM");
addToContainers_function("IsAttackOffCooldown", "If true then attack is ready to use. Warmup may still need to run if attack requres it though", "Docs/Classes/UBuildingAttackComponent_SM/Functions/IsAttackOffCooldown.html", ["is", "attack", "off", "cooldown"], "UBuildingAttackComponent_SM");
addToContainers_function("HasAttackWarmup", "Whether the structure has to warm up before attacking e.g. obelisk of light has like a 4 second warm up.", "Docs/Classes/UBuildingAttackComponent_SM/Functions/HasAttackWarmup.html", ["has", "attack", "warmup"], "UBuildingAttackComponent_SM");
addToContainers_function("HasAttackFullyWarmedUp", "Return whether attack has fully warmed up and therefore can be used if structure has a viable target.", "Docs/Classes/UBuildingAttackComponent_SM/Functions/HasAttackFullyWarmedUp.html", ["has", "attack", "fully", "warmed", "up"], "UBuildingAttackComponent_SM");
addToContainers_function("IsAttackWarmingUp", "Return whether attack is currently warming up but not ready yet", "Docs/Classes/UBuildingAttackComponent_SM/Functions/IsAttackWarmingUp.html", ["is", "attack", "warming", "up"], "UBuildingAttackComponent_SM");
addToContainers_function("OnSweepForTargetsComplete", "Called when a sweep has completed. The sweep gets all actors within range @param TraceData - result of trace", "Docs/Classes/UBuildingAttackComponent_SM/Functions/OnSweepForTargetsComplete.html", ["on", "sweep", "for", "targets", "complete"], "UBuildingAttackComponent_SM");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "Return whether an actor can be aquired as a target. Assumes the actor has been checked to see if it is in range.", "Docs/Classes/UBuildingAttackComponent_SM/Functions/CanSweptActorBeAquiredAsTarget.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UBuildingAttackComponent_SM");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/CanSweptActorBeAquiredAsTarget_1.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UBuildingAttackComponent_SM");
addToContainers_function("IsCurrentTargetStillAquirable", "Returns whether Target is still a valid target. Might not necessarily be able to be attacked right now e.g. structure is not facing them yet", "Docs/Classes/UBuildingAttackComponent_SM/Functions/IsCurrentTargetStillAquirable.html", ["is", "current", "target", "still", "aquirable"], "UBuildingAttackComponent_SM");
addToContainers_function("uint8", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/uint8.html", [], "UBuildingAttackComponent_SM");
addToContainers_function("GetCurrentTargetTargetingStatus", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetCurrentTargetTargetingStatus.html", ["get", "current", "target", "targeting", "status"], "UBuildingAttackComponent_SM");
addToContainers_function("IsActorInRange_NoLenience", "Return whether an actor is in range to be attacked", "Docs/Classes/UBuildingAttackComponent_SM/Functions/IsActorInRange_NoLenience.html", ["is", "actor", "in", "range_", "no", "lenience"], "UBuildingAttackComponent_SM");
addToContainers_function("IsActorInRange_UseLeneince", "Return whether an actor is in range to be attacked. This version will use range lenince", "Docs/Classes/UBuildingAttackComponent_SM/Functions/IsActorInRange_UseLeneince.html", ["is", "actor", "in", "range_", "use", "leneince"], "UBuildingAttackComponent_SM");
addToContainers_function("GetYawToActor", "[Server] Return how much yaw the building would need to rotate to be considered facing the actor. Returns absolute values so range is [0, 180]", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetYawToActor.html", ["get", "yaw", "to", "actor"], "UBuildingAttackComponent_SM");
addToContainers_function("GetYawToActor", "[Server] This version also outputs the look at FRotator", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetYawToActor_1.html", ["get", "yaw", "to", "actor"], "UBuildingAttackComponent_SM");
addToContainers_function("GetEffectiveComponentYawRotation", "Get in world space the component\'s yaw rotation for targeting purposes, but it may not be the actual rotation that GetComponentRotation().Yaw would return.", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetEffectiveComponentYawRotation.html", ["get", "effective", "component", "yaw", "rotation"], "UBuildingAttackComponent_SM");
addToContainers_function("SetTarget", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UBuildingAttackComponent_SM/Functions/SetTarget.html", ["set", "target"], "UBuildingAttackComponent_SM");
addToContainers_function("GetTarget", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/GetTarget.html", ["get", "target"], "UBuildingAttackComponent_SM");
addToContainers_function("StartAttackWarmUp", "Start warming up attack", "Docs/Classes/UBuildingAttackComponent_SM/Functions/StartAttackWarmUp.html", ["start", "attack", "warm", "up"], "UBuildingAttackComponent_SM");
addToContainers_function("ServerStopAttackWarmUp", "Stop warming up attack", "Docs/Classes/UBuildingAttackComponent_SM/Functions/ServerStopAttackWarmUp.html", ["server", "stop", "attack", "warm", "up"], "UBuildingAttackComponent_SM");
addToContainers_function("ClientStopAttackWarmUp", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/ClientStopAttackWarmUp.html", ["client", "stop", "attack", "warm", "up"], "UBuildingAttackComponent_SM");
addToContainers_function("OnRep_TimeAttackWarmupStarted", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/OnRep_TimeAttackWarmupStarted.html", ["on", "rep_", "time", "attack", "warmup", "started"], "UBuildingAttackComponent_SM");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UBuildingAttackComponent_SM/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UBuildingAttackComponent_SM");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Particle system component that shows the attack warmup particles", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_1.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Audio component that plays the attack warmup sound", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_2.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_3.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Multiplies attack range. The result is used to check if an actor that has already been aquired as a target is in range i.e. once a target has been aquired they can go out of range a bit and still be shot at", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_4.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_5.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("TeamVisibilityInfo", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TeamVisibilityInfo.html", ["team", "visibility", "info"], "UBuildingAttackComponent_SM");
addToContainers_variable("Target", "The actor this building has aquired as a target to attack", "Docs/Classes/UBuildingAttackComponent_SM/Variables/Target.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("OwningBuilding", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackComponent_SM");
addToContainers_variable("GS", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/GS.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("PoolingManager", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/PoolingManager.html", ["pooling", "manager"], "UBuildingAttackComponent_SM");
addToContainers_variable("TargetingTraceDelegate", "Delegate that fires when an async sweep for targets within range finishes", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TargetingTraceDelegate.html", ["targeting", "trace", "delegate"], "UBuildingAttackComponent_SM");
addToContainers_variable("TaskManagerBucket", "Where in UHeavyTaskManager::BuildingAttackComps this object is stored at", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TaskManagerBucket.html", ["task", "manager", "bucket"], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Time it takes to prepare attack. Use 0 to attack as soon as possible. Probably also belongs on FAttackAttributes. e.g. obelisk of light takes like 5 seconds This + FAttackAttributes::AttackRate add up to give the total time between attacks e.g. If FAttackAttributes::AttackRate is 2 and this is 3 then it\'s a total of 5 seconds between attacks. My notes: checks to see if warmup should stop happen every time a sweep result comes in", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_6.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "World time when attack warmup started. -1.f means not warming up", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_7.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("TimeSpentWarmingUpAttack", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/TimeSpentWarmingUpAttack.html", ["time", "spent", "warming", "up", "attack"], "UBuildingAttackComponent_SM");
addToContainers_variable("Team", "The team this structure is on", "Docs/Classes/UBuildingAttackComponent_SM/Variables/Team.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "How the structure selects it\'s target", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_8.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Whether the structure likes selecting targets closer or further away. Will only be relevant if TargetAquireMethod considers distance.", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_9.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "If true then the building will not change targets until it\'s current target becomes untargetable. If false then everytime a sweep result comes in it will reevaluate it\'s target. Better performance if this is true.", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_10.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("", "Attack preperation particles. Should not be looping. Probably belong on FAttackAttributes", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_11.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("QueryParams", "Query params this structure will use when sweeping for targets", "Docs/Classes/UBuildingAttackComponent_SM/Variables/QueryParams.html", ["query", "params"], "UBuildingAttackComponent_SM");
addToContainers_variable("", "How much yaw can be off by for structure to fire at target. 180 = can attack at targets at any angle. If this is <180 then the the building will need a rotating base to attack from every angle. If it does not have a rotating base then it will have a blind spot behind it so the rotation of the building when it is placed matters quite a bit.", "Docs/Classes/UBuildingAttackComponent_SM/Variables/_12.html", [], "UBuildingAttackComponent_SM");
addToContainers_variable("AttackCompUniqueID", "", "Docs/Classes/UBuildingAttackComponent_SM/Variables/AttackCompUniqueID.html", ["attack", "comp", "unique", "i", "d"], "UBuildingAttackComponent_SM");
addToContainers_variable("RotatingBase", "The yaw rotating turret base this is a child of. Can be null if not attached to one", "Docs/Classes/UBuildingAttackComponent_SM/Variables/RotatingBase.html", ["rotating", "base"], "UBuildingAttackComponent_SM");
addToContainers_class("UBuildingAttackCompStructBase_SK", "The base of a building attack comp turret. Rotates yaw. Skeletal mesh version", "Docs/Classes/UBuildingAttackCompStructBase_SK/UBuildingAttackCompStructBase_SK.html", ["building", "attack", "comp", "struct", "base_", "s", "k"], "");
addToContainers_function("UBuildingAttackCompStructBase_SK", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/UBuildingAttackCompStructBase_SK.html", ["building", "attack", "comp", "struct", "base_", "s", "k"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("SetupComp", "~ Begin IBuildingAttackComp_TurretsBase overrides", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/SetupComp.html", ["setup", "comp"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("GetEffectiveComponentYawRotation", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/GetEffectiveComponentYawRotation.html", ["get", "effective", "component", "yaw", "rotation"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("OnParentBuildingExitFogOfWar", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/OnParentBuildingExitFogOfWar.html", ["on", "parent", "building", "exit", "fog", "of", "war"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("TickComponent", "~ End IBuildingAttackComp_TurretsBase overrides", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/TickComponent.html", ["tick", "component"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("PreNetReceive", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/PreNetReceive.html", ["pre", "net", "receive"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("OnRep_RelativeYawRotation", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/OnRep_RelativeYawRotation.html", ["on", "rep_", "relative", "yaw", "rotation"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("PostRepNotifies", "Called right after calling all OnRep notifies (called even when there are no notifies)", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/PostRepNotifies.html", ["post", "rep", "notifies"], "UBuildingAttackCompStructBase_SK");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("OwningBuilding", "Building this comp is attached to", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("TurretComp", "Turret comp that is an attach child of this", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/TurretComp.html", ["turret", "comp"], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("", "Relative yaw rotation", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/.html", [], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("1", "", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/1.html", [], "UBuildingAttackCompStructBase_SK");
addToContainers_variable("", "The rate at which this base can rotate yaw", "Docs/Classes/UBuildingAttackCompStructBase_SK/Variables/_1.html", [], "UBuildingAttackCompStructBase_SK");
addToContainers_class("UBuildingAttackCompStructBase_SM", "This is the part of a building attack component that rotates yaw e.g. in C&C this is like the top half of a turret. This component is for a static mesh. It is very likely a IBuildingAttackComp_Turret will be a child of this component.", "Docs/Classes/UBuildingAttackCompStructBase_SM/UBuildingAttackCompStructBase_SM.html", ["building", "attack", "comp", "struct", "base_", "s", "m"], "");
addToContainers_function("UBuildingAttackCompStructBase_SM", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/UBuildingAttackCompStructBase_SM.html", ["building", "attack", "comp", "struct", "base_", "s", "m"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("SetupComp", "~ Begin IBuildingAttackComp_TurretsBase overrides", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/SetupComp.html", ["setup", "comp"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("GetEffectiveComponentYawRotation", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/GetEffectiveComponentYawRotation.html", ["get", "effective", "component", "yaw", "rotation"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("OnParentBuildingExitFogOfWar", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/OnParentBuildingExitFogOfWar.html", ["on", "parent", "building", "exit", "fog", "of", "war"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("TickComponent", "~ End IBuildingAttackComp_TurretsBase overrides", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/TickComponent.html", ["tick", "component"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("PreNetReceive", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/PreNetReceive.html", ["pre", "net", "receive"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("OnRep_RelativeYawRotation", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/OnRep_RelativeYawRotation.html", ["on", "rep_", "relative", "yaw", "rotation"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("PostRepNotifies", "Called right after calling all OnRep notifies (called even when there are no notifies)", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/PostRepNotifies.html", ["post", "rep", "notifies"], "UBuildingAttackCompStructBase_SM");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("OwningBuilding", "Building this comp is attached to", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/OwningBuilding.html", ["owning", "building"], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("TurretComp", "Turret comp that is an attach child of this", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/TurretComp.html", ["turret", "comp"], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("", "Relative yaw rotation", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/.html", [], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("1", "", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/1.html", [], "UBuildingAttackCompStructBase_SM");
addToContainers_variable("", "The rate at which this base can rotate yaw", "Docs/Classes/UBuildingAttackCompStructBase_SM/Variables/_1.html", [], "UBuildingAttackCompStructBase_SM");
addToContainers_class("IBuildingAttackComp_Turret", "USceneComponents implementing this interface can be used to attack. This interface was added for building attack components. It only really exists because I want to allow both static and skeletal meshes to be used for attack components. Turrets can optionally add pitch rotation and can fire projectiles. If they are a child of a IBuildingAttackComp_TurretBase then the base will rotate yaw.", "Docs/Classes/IBuildingAttackComp_Turret/IBuildingAttackComp_Turret.html", ["building", "attack", "comp_", "turret"], "");
addToContainers_function("PURE_VIRTUAL", "", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Set up function. Set whether the turret is a direct child of a rotating base component IBuildingAttackComp_TurretsBase @param InOwningBuilding - the building this component is attached to", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_1.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "[Server] @param InTeam - team the owner of this structure is on @param InTeamsVisibilityInfo - visibility info struct for the team this structure belongs to", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_2.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "[Client]", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_3.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Return a trace delegate. You should make sure this is bound to OnSweepForTargetsComplete", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_4.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Return the query params to use for aquiring targets with sweep", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_5.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Return world location where the sweep should be", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_6.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Return the radius of the sweep", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_7.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Set what bucket in the heavy task manager this comp is placed in", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_8.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Just set the array index", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_9.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Get the heavy task manager indicies info. I called it grab cause calling it Get would make it\'s name only 1 letter different from the setter and I know it\'ll cause a headache in the future.", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_10.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "[Client] Called on clients when an attack is made on server", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_11.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Return the actor this turret is targeting. Can return null if it is not targeting anything", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_12.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Called when the building this component is attached to enters fog of war for the local player @param bOnServer - true if GetWorld()->IsServer() would return true", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_13.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Called when the building this component is attached to exits fog of war for the local player @param bOnServer - true if GetWorld()->IsServer() would return true", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_14.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Return whether an actor hit by the overlap test can be aquired as a target", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_15.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "This version also outputs how much total yaw + pitch rotation is required to face Actor. OutRotationRequiredToFace will only be outputted a value if this func returns true. This version should only be called if the structure takes into account how much rotation is required to face a target when picking a target. @param OutRotationRequiredToFace - how much rotation is required to face the target, taking into account yaw and pitch.", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_16.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_function("PURE_VIRTUAL", "Set the attack target", "Docs/Classes/IBuildingAttackComp_Turret/Functions/PURE_VIRTUAL_17.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_Turret");
addToContainers_class("IBuildingAttackComp_TurretsBase", "The part of a turret that rotates yaw. It will have a UBuildingAttackComp_Turret as it\'s child. Base is all I could think of but perhaps think of a different name cause base is commonly used in C++", "Docs/Classes/IBuildingAttackComp_TurretsBase/IBuildingAttackComp_TurretsBase.html", ["building", "attack", "comp_", "turrets", "base"], "");
addToContainers_function("PURE_VIRTUAL", "", "Docs/Classes/IBuildingAttackComp_TurretsBase/Functions/PURE_VIRTUAL.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_TurretsBase");
addToContainers_function("PURE_VIRTUAL", "Get in world space the component\'s yaw rotation for targeting purposes, but it might not be the actual value returned by GetComponentRotation().Yaw", "Docs/Classes/IBuildingAttackComp_TurretsBase/Functions/PURE_VIRTUAL_1.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_TurretsBase");
addToContainers_function("PURE_VIRTUAL", "Called when the building this component is attached to enters fog of war for the local player @param bOnServer - true if GetWorld()->IsServer() would return true", "Docs/Classes/IBuildingAttackComp_TurretsBase/Functions/PURE_VIRTUAL_2.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_TurretsBase");
addToContainers_function("PURE_VIRTUAL", "Called when the building this component is attached to exits fog of war", "Docs/Classes/IBuildingAttackComp_TurretsBase/Functions/PURE_VIRTUAL_3.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "IBuildingAttackComp_TurretsBase");
addToContainers_class("UMySphereComponent", "Just a USphereComponent expect UPrimitiveComponent::OverlappingComponents has a getter.", "Docs/Classes/UMySphereComponent/UMySphereComponent.html", ["my", "sphere", "component"], "");
addToContainers_function("OnComponentCreated", "", "Docs/Classes/UMySphereComponent/Functions/OnComponentCreated.html", ["on", "component", "created"], "UMySphereComponent");
addToContainers_function("GetOverlaps", "@return - UPrimitiveComponent::OverlappingComponents", "Docs/Classes/UMySphereComponent/Functions/GetOverlaps.html", ["get", "overlaps"], "UMySphereComponent");
addToContainers_class("UPitchChangeBuildingAttackComp_SK", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/UPitchChangeBuildingAttackComp_SK.html", ["pitch", "change", "building", "attack", "comp_", "s", "k"], "");
addToContainers_function("UPitchChangeBuildingAttackComp_SK", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/UPitchChangeBuildingAttackComp_SK.html", ["pitch", "change", "building", "attack", "comp_", "s", "k"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("TickComponent", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/TickComponent.html", ["tick", "component"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("RotatePitchToFaceTarget", "Rotate pitch towards Target", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/RotatePitchToFaceTarget.html", ["rotate", "pitch", "to", "face", "target"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("GetCurrentTargetTargetingStatus", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/GetCurrentTargetTargetingStatus.html", ["get", "current", "target", "targeting", "status"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("GetLifetimeReplicatedProps", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("PreNetReceive", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/PreNetReceive.html", ["pre", "net", "receive"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("OnRep_RelativePitchRotation", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/OnRep_RelativePitchRotation.html", ["on", "rep_", "relative", "pitch", "rotation"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("PostRepNotifies", "Called right after calling all OnRep notifies (called even when there are no notifies)", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/PostRepNotifies.html", ["post", "rep", "notifies"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("OnParentBuildingExitFogOfWar", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/OnParentBuildingExitFogOfWar.html", ["on", "parent", "building", "exit", "fog", "of", "war"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/CanSweptActorBeAquiredAsTarget.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/CanSweptActorBeAquiredAsTarget_1.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("GetEffectiveComponentPitchRotation", "Get in world space the pitch of the component. Note this might not be what GetComponentRotation().Yaw returns", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/GetEffectiveComponentPitchRotatio.html", ["get", "effective", "component", "pitch", "rotation"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("CanPitchBeChangedEnoughToFace", "For a given pitch return whether it is possible for the structure to acheive that pitch", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/CanPitchBeChangedEnoughToFace.html", ["can", "pitch", "be", "changed", "enough", "to", "face"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("GetPitchTargetingStatus", "Return whether the pitch of this structure is good enough to attack an actor @param OurPitch - pitch of this component @param LookAtPitchToTarget - look at pitch of target. This is not a delta. This is whatever UKismetMathLibrary::FindLookAtRotation(OurLoc, TargetsLoc) would return @return - whether we can attack the target, or if we can\'t then whether we should unaquire the target or not", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/GetPitchTargetingStatus.html", ["get", "pitch", "targeting", "status"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_function("RunPostEditLogic", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Functions/RunPostEditLogic.html", ["run", "post", "edit", "logic"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "Relative pitch rotation", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "The rate at which the turret can change it\'s pitch", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_1.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "How much pitch can be off by for structure to fire at target.", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_2.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("MIN_TURRET_PITCH", "Make sure to update the ClampMin below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/MIN_TURRET_PITCH.html", ["i", "n_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "Minimum amount of pitch the turret can have. The closer to 0 this is the less the turret can look down and therefore the less chance it can attack actors below it", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_3.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("MAX_TURRET_PITCH", "Make sure to update the ClampMax below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/MAX_TURRET_PITCH.html", ["a", "x_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("", "Maximum amount of pitch the turret can have. The closer to 0 this is the less the turret can look up and therefore the less chance it can attack actors above it.", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/_4.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable(":", "If true then the turret needs to check whether the pitch required to face an actor before aquiring them is achievable. If MinAllowedPitch, MaxAllowedPitch and PitchFacingRequirement are too restrictive then it\'s possible the target cannot be faced", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/:.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_variable("1", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SK/Variables/1.html", [], "UPitchChangeBuildingAttackComp_SK");
addToContainers_class("UPitchChangeBuildingAttackComp_SM", "A building attack component that can change it\'s pitch rotation. Examples of these: - in C&C generals: top part of a partiot missle system. To get it rotataing yaw make sure to add a IBuildingAttackComp_TurretsBase as it\'s attach parent. If you need animation make sure to choose UPitchChangeBuildingAttackComp_SK instead.", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/UPitchChangeBuildingAttackComp_SM.html", ["pitch", "change", "building", "attack", "comp_", "s", "m"], "");
addToContainers_function("UPitchChangeBuildingAttackComp_SM", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/UPitchChangeBuildingAttackComp_SM.html", ["pitch", "change", "building", "attack", "comp_", "s", "m"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("TickComponent", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/TickComponent.html", ["tick", "component"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("RotatePitchToFaceTarget", "Rotate pitch towards Target", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/RotatePitchToFaceTarget.html", ["rotate", "pitch", "to", "face", "target"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("GetCurrentTargetTargetingStatus", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/GetCurrentTargetTargetingStatus.html", ["get", "current", "target", "targeting", "status"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("GetLifetimeReplicatedProps", "TODO add a OurYaw variable and replicate only it in here", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/GetLifetimeReplicatedProps.html", ["get", "lifetime", "replicated", "props"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("PreNetReceive", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/PreNetReceive.html", ["pre", "net", "receive"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("OnRep_RelativePitchRotation", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/OnRep_RelativePitchRotation.html", ["on", "rep_", "relative", "pitch", "rotation"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("PostRepNotifies", "Called right after calling all OnRep notifies (called even when there are no notifies)", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/PostRepNotifies.html", ["post", "rep", "notifies"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("OnParentBuildingExitFogOfWar", "~ Begin IBuildingAttackComp_Turret interface", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/OnParentBuildingExitFogOfWar.html", ["on", "parent", "building", "exit", "fog", "of", "war"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/CanSweptActorBeAquiredAsTarget.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("CanSweptActorBeAquiredAsTarget", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/CanSweptActorBeAquiredAsTarget_1.html", ["can", "swept", "actor", "be", "aquired", "as", "target"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("GetEffectiveComponentPitchRotation", "Get in world space the pitch of the component. Note this might not be what GetComponentRotation().Yaw returns", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/GetEffectiveComponentPitchRotatio.html", ["get", "effective", "component", "pitch", "rotation"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("CanPitchBeChangedEnoughToFace", "For a given pitch return whether it is possible for the structure to acheive that pitch", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/CanPitchBeChangedEnoughToFace.html", ["can", "pitch", "be", "changed", "enough", "to", "face"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("GetPitchTargetingStatus", "Return whether the pitch of this structure is good enough to attack an actor @param OurPitch - pitch of this component @param LookAtPitchToTarget - look at pitch of target. This is not a delta. This is whatever UKismetMathLibrary::FindLookAtRotation(OurLoc, TargetsLoc) would return @return - whether we can attack the target, or if we can\'t then whether we should unaquire the target or not", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/GetPitchTargetingStatus.html", ["get", "pitch", "targeting", "status"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_function("RunPostEditLogic", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Functions/RunPostEditLogic.html", ["run", "post", "edit", "logic"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "Relative pitch rotation", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "The rate at which the turret can change it\'s pitch", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_1.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "How much pitch can be off by for structure to fire at target.", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_2.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("MIN_TURRET_PITCH", "Make sure to update the ClampMin below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/MIN_TURRET_PITCH.html", ["i", "n_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "Minimum amount of pitch the turret can have. The closer to 0 this is the less the turret can look down and therefore the less chance it can attack actors below it", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_3.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("MAX_TURRET_PITCH", "Make sure to update the ClampMax below if you change this", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/MAX_TURRET_PITCH.html", ["a", "x_", "t", "u", "r", "r", "e", "t_", "p", "i", "t", "c", "h"], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("", "Maximum amount of pitch the turret can have. The closer to 0 this is the less the turret can look up and therefore the less chance it can attack actors above it.", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/_4.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable(":", "If true then the turret needs to check whether the pitch required to face an actor before aquiring them is achievable. If MinAllowedPitch, MaxAllowedPitch and PitchFacingRequirement are too restrictive then it\'s possible the target cannot be faced", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/:.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_variable("1", "", "Docs/Classes/UPitchChangeBuildingAttackComp_SM/Variables/1.html", [], "UPitchChangeBuildingAttackComp_SM");
addToContainers_class("UBuildingTurretCompAnimInstance", "Anim instance for UBuildingAttackComponent_SK and probably the pitch altering one too", "Docs/Classes/UBuildingTurretCompAnimInstance/UBuildingTurretCompAnimInstance.html", ["building", "turret", "comp", "anim", "instance"], "");
addToContainers_function("NativeBeginPlay", "Friend for the anim notify checking function", "Docs/Classes/UBuildingTurretCompAnimInstance/Functions/NativeBeginPlay.html", ["native", "begin", "play"], "UBuildingTurretCompAnimInstance");
addToContainers_function("GetOwningAttackComp", "GetOwningComponent()", "Docs/Classes/UBuildingTurretCompAnimInstance/Functions/GetOwningAttackComp.html", ["get", "owning", "attack", "comp"], "UBuildingTurretCompAnimInstance");
addToContainers_function("AnimNotify_FireWeapon", "Fire a projectile. I named this the same as the anim notify on the infantry anim instance so the user does not need to create another anim montage if they choose to use the skeletal meshes of infantry as their turret", "Docs/Classes/UBuildingTurretCompAnimInstance/Functions/AnimNotify_FireWeapon.html", ["anim", "notify_", "fire", "weapon"], "UBuildingTurretCompAnimInstance");
addToContainers_variable("bIsOnServer", "True if GetWorld()->IsServer() would return true", "Docs/Classes/UBuildingTurretCompAnimInstance/Variables/bIsOnServer.html", ["is", "on", "server"], "UBuildingTurretCompAnimInstance");
addToContainers_class("UBAbility_DealDamage", "Deals damage to the building. Damage is percentage based.", "Docs/Classes/UBAbility_DealDamage/UBAbility_DealDamage.html", ["b", "ability_", "deal", "damage"], "");
addToContainers_function("UBAbility_DealDamage", "", "Docs/Classes/UBAbility_DealDamage/Functions/UBAbility_DealDamage.html", ["b", "ability_", "deal", "damage"], "UBAbility_DealDamage");
addToContainers_function("Server_Execute", "~ Begin UBuildingTargetingAbilityBase interface", "Docs/Classes/UBAbility_DealDamage/Functions/Server_Execute.html", ["server_", "execute"], "UBAbility_DealDamage");
addToContainers_function("Client_Execute", "", "Docs/Classes/UBAbility_DealDamage/Functions/Client_Execute.html", ["client_", "execute"], "UBAbility_DealDamage");
addToContainers_variable("", "Normalized percentage of damage to deal", "Docs/Classes/UBAbility_DealDamage/Variables/.html", [], "UBAbility_DealDamage");
addToContainers_class("UBAbility_StealResources", "Takes some resources from the owner of the building, just like Black Lotus\' cash grab ability in C&C generals", "Docs/Classes/UBAbility_StealResources/UBAbility_StealResources.html", ["b", "ability_", "steal", "resources"], "");
addToContainers_function("UBAbility_StealResources", "", "Docs/Classes/UBAbility_StealResources/Functions/UBAbility_StealResources.html", ["b", "ability_", "steal", "resources"], "UBAbility_StealResources");
addToContainers_function("Server_Execute", "~ Begin UBuildingTargetingAbilityBase interface", "Docs/Classes/UBAbility_StealResources/Functions/Server_Execute.html", ["server_", "execute"], "UBAbility_StealResources");
addToContainers_function("Client_Execute", "", "Docs/Classes/UBAbility_StealResources/Functions/Client_Execute.html", ["client_", "execute"], "UBAbility_StealResources");
addToContainers_function("PlaySound", "Play the ability\'s sound", "Docs/Classes/UBAbility_StealResources/Functions/PlaySound.html", ["play", "sound"], "UBAbility_StealResources");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UBAbility_StealResources/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UBAbility_StealResources");
addToContainers_variable("", "How much resources to steal from player", "Docs/Classes/UBAbility_StealResources/Variables/.html", [], "UBAbility_StealResources");
addToContainers_variable("", "Contents of AmountToDeductFromTarget but it they need to be multiplied by -1", "Docs/Classes/UBAbility_StealResources/Variables/_1.html", [], "UBAbility_StealResources");
addToContainers_variable("", "UI sound to play for the instigator when they use this", "Docs/Classes/UBAbility_StealResources/Variables/_2.html", [], "UBAbility_StealResources");
addToContainers_variable("", "UI sound to play for the target when this is used on them", "Docs/Classes/UBAbility_StealResources/Variables/_3.html", [], "UBAbility_StealResources");
addToContainers_class("UBuildingTargetingAbilityBase", "Contains data about a building targeting ability. Some examples of building targeting abilities: - C&C engineers can capture enemy buildings or repair friendly ones - C&C spies can reveal what enemy buildings are producing", "Docs/Classes/UBuildingTargetingAbilityBase/UBuildingTargetingAbilityBase.html", ["building", "targeting", "ability", "base"], "");
addToContainers_function("InitialSetup", "Called during setup of game instance", "Docs/Classes/UBuildingTargetingAbilityBase/Functions/InitialSetup.html", ["initial", "setup"], "UBuildingTargetingAbilityBase");
addToContainers_function("Server_Execute", "Carries out the ability on the server", "Docs/Classes/UBuildingTargetingAbilityBase/Functions/Server_Execute.html", ["server_", "execute"], "UBuildingTargetingAbilityBase");
addToContainers_function("Client_Execute", "Carries out the ability on the client", "Docs/Classes/UBuildingTargetingAbilityBase/Functions/Client_Execute.html", ["client_", "execute"], "UBuildingTargetingAbilityBase");
addToContainers_function("SeedAs16BitTo32Bit", "Converts the random number seed from 16bits to 32bits", "Docs/Classes/UBuildingTargetingAbilityBase/Functions/SeedAs16BitTo32Bit.html", ["seed", "as16", "bit", "to32", "bit"], "UBuildingTargetingAbilityBase");
addToContainers_class("UAbility_SingleTargetBuffOrDebuff", "Applies a buff or debuff to a selectable", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/UAbility_SingleTargetBuffOrDebuff.html", ["ability_", "single", "target", "buff", "or", "debuff"], "");
addToContainers_function("UAbility_SingleTargetBuffOrDebuff", "", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Functions/UAbility_SingleTargetBuffOrDebuff.html", ["ability_", "single", "target", "buff", "or", "debuff"], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_function("Server_Execute", "~ Begin UCommanderAbilityBase", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Functions/Server_Execute.html", ["server_", "execute"], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_function("Client_Execute", "", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Functions/Client_Execute.html", ["client_", "execute"], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_variable("", "------------------------------------------------------", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Variables/.html", [], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_variable("", "Buff/debuff to apply", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Variables/_1.html", [], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_variable("", "Buff/debuff to apply", "Docs/Classes/UAbility_SingleTargetBuffOrDebuff/Variables/_2.html", [], "UAbility_SingleTargetBuffOrDebuff");
addToContainers_class("UAbility_StealResources", "Steals some resources from a player.", "Docs/Classes/UAbility_StealResources/UAbility_StealResources.html", ["ability_", "steal", "resources"], "");
addToContainers_function("UAbility_StealResources", "", "Docs/Classes/UAbility_StealResources/Functions/UAbility_StealResources.html", ["ability_", "steal", "resources"], "UAbility_StealResources");
addToContainers_function("Server_Execute", "~ Begin UCommanderAbilityBase interface", "Docs/Classes/UAbility_StealResources/Functions/Server_Execute.html", ["server_", "execute"], "UAbility_StealResources");
addToContainers_function("Client_Execute", "", "Docs/Classes/UAbility_StealResources/Functions/Client_Execute.html", ["client_", "execute"], "UAbility_StealResources");
addToContainers_function("PlaySound", "~ End UCommanderAbilityBase interface", "Docs/Classes/UAbility_StealResources/Functions/PlaySound.html", ["play", "sound"], "UAbility_StealResources");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UAbility_StealResources/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UAbility_StealResources");
addToContainers_variable("", "How much resources to steal from player", "Docs/Classes/UAbility_StealResources/Variables/.html", [], "UAbility_StealResources");
addToContainers_variable("", "Contents of AmountToDeductFromTarget but it they need to be multiplied by -1", "Docs/Classes/UAbility_StealResources/Variables/_1.html", [], "UAbility_StealResources");
addToContainers_variable("", "UI sound to play for the instigator when they use this", "Docs/Classes/UAbility_StealResources/Variables/_2.html", [], "UAbility_StealResources");
addToContainers_variable("", "UI sound to play for the target when this is used on them", "Docs/Classes/UAbility_StealResources/Variables/_3.html", [], "UAbility_StealResources");
addToContainers_class("UCAbility_Airstrike", "", "Docs/Classes/UCAbility_Airstrike/UCAbility_Airstrike.html", ["c", "ability_", "airstrike"], "");
addToContainers_function("UCAbility_Airstrike", "", "Docs/Classes/UCAbility_Airstrike/Functions/UCAbility_Airstrike.html", ["c", "ability_", "airstrike"], "UCAbility_Airstrike");
addToContainers_function("FinalSetup", "~ Begin UCommanderAbilityBase interface", "Docs/Classes/UCAbility_Airstrike/Functions/FinalSetup.html", ["final", "setup"], "UCAbility_Airstrike");
addToContainers_function("Server_Execute", "", "Docs/Classes/UCAbility_Airstrike/Functions/Server_Execute.html", ["server_", "execute"], "UCAbility_Airstrike");
addToContainers_function("Client_Execute", "", "Docs/Classes/UCAbility_Airstrike/Functions/Client_Execute.html", ["client_", "execute"], "UCAbility_Airstrike");
addToContainers_function("RevealFogAtTargetLocation", "@param Warthog - warthog that was spawned for this ability @param SpawnLocation - world location where warthog was spawned @param TargetLocation - world location ability was used", "Docs/Classes/UCAbility_Airstrike/Functions/RevealFogAtTargetLocation.html", ["reveal", "fog", "at", "target", "location"], "UCAbility_Airstrike");
addToContainers_variable("", "Warthog to spawn", "Docs/Classes/UCAbility_Airstrike/Variables/.html", [], "UCAbility_Airstrike");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/UCAbility_Airstrike/Variables/_1.html", [], "UCAbility_Airstrike");
addToContainers_variable("", "This overrides TargetLocationTemporaryFogReveal.Duration. This is the time after the warthog has fired it\'s final shot to when the fog should stop being revealed.", "Docs/Classes/UCAbility_Airstrike/Variables/_2.html", [], "UCAbility_Airstrike");
addToContainers_class("UCAbility_AoEDamage", "- Deals damage in an AoE - Shows particles", "Docs/Classes/UCAbility_AoEDamage/UCAbility_AoEDamage.html", ["c", "ability_", "ao", "e", "damage"], "");
addToContainers_function("UCAbility_AoEDamage", "", "Docs/Classes/UCAbility_AoEDamage/Functions/UCAbility_AoEDamage.html", ["c", "ability_", "ao", "e", "damage"], "UCAbility_AoEDamage");
addToContainers_function("FinalSetup", "~ Begin UCommanderAbilityBase", "Docs/Classes/UCAbility_AoEDamage/Functions/FinalSetup.html", ["final", "setup"], "UCAbility_AoEDamage");
addToContainers_function("Server_Execute", "", "Docs/Classes/UCAbility_AoEDamage/Functions/Server_Execute.html", ["server_", "execute"], "UCAbility_AoEDamage");
addToContainers_function("Client_Execute", "", "Docs/Classes/UCAbility_AoEDamage/Functions/Client_Execute.html", ["client_", "execute"], "UCAbility_AoEDamage");
addToContainers_function("DealDamageAfterDelay", "~ End UCommanderAbilityBase", "Docs/Classes/UCAbility_AoEDamage/Functions/DealDamageAfterDelay.html", ["deal", "damage", "after", "delay"], "UCAbility_AoEDamage");
addToContainers_function("DealDamage", "", "Docs/Classes/UCAbility_AoEDamage/Functions/DealDamage.html", ["deal", "damage"], "UCAbility_AoEDamage");
addToContainers_function("CalculateDamage", "Return how much damage a selectable should take from being hit by this ability @param TargetLocation - world location where the ability was used @return - final outgoing damage", "Docs/Classes/UCAbility_AoEDamage/Functions/CalculateDamage.html", ["calculate", "damage"], "UCAbility_AoEDamage");
addToContainers_function("ShowTargetLocationParticles", "", "Docs/Classes/UCAbility_AoEDamage/Functions/ShowTargetLocationParticles.html", ["show", "target", "location", "particles"], "UCAbility_AoEDamage");
addToContainers_function("CheckCurveAssets", "Check the curve assets are usable and if not then null them and log something", "Docs/Classes/UCAbility_AoEDamage/Functions/CheckCurveAssets.html", ["check", "curve", "assets"], "UCAbility_AoEDamage");
addToContainers_function("DelayAmount)", "", "Docs/Classes/UCAbility_AoEDamage/Functions/DelayAmount).html", ["delay", "amount)"], "UCAbility_AoEDamage");
addToContainers_variable("", "AoE radius", "Docs/Classes/UCAbility_AoEDamage/Variables/.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Delay from when ability is used to when damage should be dealt", "Docs/Classes/UCAbility_AoEDamage/Variables/_1.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Damage of AoE", "Docs/Classes/UCAbility_AoEDamage/Variables/_2.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "The curve to use for damage falloff. If no curve is specified then there will be no damage falloff - every selectable hit will take full damage. X axis = range from center. Larger implies further from ability center. Axis range: [0, 1] Y axis = normalized percentage of BaseDamage to deal. Probably want range [0, 1]", "Docs/Classes/UCAbility_AoEDamage/Variables/_3.html", [], "UCAbility_AoEDamage");
addToContainers_variable(":", "", "Docs/Classes/UCAbility_AoEDamage/Variables/:.html", [], "UCAbility_AoEDamage");
addToContainers_variable(":", "", "Docs/Classes/UCAbility_AoEDamage/Variables/:_1.html", [], "UCAbility_AoEDamage");
addToContainers_variable(":", "", "Docs/Classes/UCAbility_AoEDamage/Variables/:_2.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Particle system to spawn at use location", "Docs/Classes/UCAbility_AoEDamage/Variables/_4.html", [], "UCAbility_AoEDamage");
addToContainers_variable("", "Scale of particles. Don\'t usually expose this cause sometimes particles can scale incorrectly. In this case you need to create another particle system asset.", "Docs/Classes/UCAbility_AoEDamage/Variables/_5.html", [], "UCAbility_AoEDamage");
addToContainers_class("UActiveArtilleryStrikeState", "A single instance of an artillery strike", "Docs/Classes/UActiveArtilleryStrikeState/UActiveArtilleryStrikeState.html", ["active", "artillery", "strike", "state"], "");
addToContainers_function("UActiveArtilleryStrikeState", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/UActiveArtilleryStrikeState.html", ["active", "artillery", "strike", "state"], "UActiveArtilleryStrikeState");
addToContainers_function("Init", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/Init.html", [], "UActiveArtilleryStrikeState");
addToContainers_function("Tick", "~ Begin overrides for FTickableGameObject", "Docs/Classes/UActiveArtilleryStrikeState/Functions/Tick.html", [], "UActiveArtilleryStrikeState");
addToContainers_function("GetStatId", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/GetStatId.html", ["get", "stat", "id"], "UActiveArtilleryStrikeState");
addToContainers_function("GetTickableTickType", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/GetTickableTickType.html", ["get", "tickable", "tick", "type"], "UActiveArtilleryStrikeState");
addToContainers_function("GetRandomInt", "Get random integer in range", "Docs/Classes/UActiveArtilleryStrikeState/Functions/GetRandomInt.html", ["get", "random", "int"], "UActiveArtilleryStrikeState");
addToContainers_function("GetRandomFloat", "Get random float in range", "Docs/Classes/UActiveArtilleryStrikeState/Functions/GetRandomFloat.html", ["get", "random", "float"], "UActiveArtilleryStrikeState");
addToContainers_function("SpawnProjectile", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/SpawnProjectile.html", ["spawn", "projectile"], "UActiveArtilleryStrikeState");
addToContainers_function("CalculateProjectileSpawnLocation", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/CalculateProjectileSpawnLocation.html", ["calculate", "projectile", "spawn", "location"], "UActiveArtilleryStrikeState");
addToContainers_function("CalculateTimeBetweenShots", "", "Docs/Classes/UActiveArtilleryStrikeState/Functions/CalculateTimeBetweenShots.html", ["calculate", "time", "between", "shots"], "UActiveArtilleryStrikeState");
addToContainers_function("Stop", "Call when the duration of the strike is up", "Docs/Classes/UActiveArtilleryStrikeState/Functions/Stop.html", [], "UActiveArtilleryStrikeState");
addToContainers_variable("EffectObject", "----------------------------------------------------------", "Docs/Classes/UActiveArtilleryStrikeState/Variables/EffectObject.html", ["effect", "object"], "UActiveArtilleryStrikeState");
addToContainers_variable("PoolingManager", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/PoolingManager.html", ["pooling", "manager"], "UActiveArtilleryStrikeState");
addToContainers_variable("TimeTillStop", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/TimeTillStop.html", ["time", "till", "stop"], "UActiveArtilleryStrikeState");
addToContainers_variable("TimeTillSpawnNextProjectile", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/TimeTillSpawnNextProjectile.html", ["time", "till", "spawn", "next", "projectile"], "UActiveArtilleryStrikeState");
addToContainers_variable("AbilityLocation", "Where the ability was used", "Docs/Classes/UActiveArtilleryStrikeState/Variables/AbilityLocation.html", ["ability", "location"], "UActiveArtilleryStrikeState");
addToContainers_variable("LastYawRot", "How much yaw rotation around the AbilityLocation that was applied to the last projectile that was fired", "Docs/Classes/UActiveArtilleryStrikeState/Variables/LastYawRot.html", ["last", "yaw", "rot"], "UActiveArtilleryStrikeState");
addToContainers_variable("RandomStream", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/RandomStream.html", ["random", "stream"], "UActiveArtilleryStrikeState");
addToContainers_variable("bIsServer", "Whether GetWorld()->IsServer() would return true", "Docs/Classes/UActiveArtilleryStrikeState/Variables/bIsServer.html", ["is", "server"], "UActiveArtilleryStrikeState");
addToContainers_variable("InstigatorsTeam", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/InstigatorsTeam.html", ["instigators", "team"], "UActiveArtilleryStrikeState");
addToContainers_variable("NumProjectilesRemainingInSalvo", "", "Docs/Classes/UActiveArtilleryStrikeState/Variables/NumProjectilesRemainingInSalvo.html", ["num", "projectiles", "remaining", "in", "salvo"], "UActiveArtilleryStrikeState");
addToContainers_class("UCAbility_ArtilleryStrike", "Fires multiple projectiles down towards the ground", "Docs/Classes/UCAbility_ArtilleryStrike/UCAbility_ArtilleryStrike.html", ["c", "ability_", "artillery", "strike"], "");
addToContainers_function("UCAbility_ArtilleryStrike", "", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/UCAbility_ArtilleryStrike.html", ["c", "ability_", "artillery", "strike"], "UCAbility_ArtilleryStrike");
addToContainers_function("FinalSetup", "~ Begin UCommanderAbilityBase interface", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/FinalSetup.html", ["final", "setup"], "UCAbility_ArtilleryStrike");
addToContainers_function("CheckCurveAssets", "~ End UCommanderAbilityBase interface", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/CheckCurveAssets.html", ["check", "curve", "assets"], "UCAbility_ArtilleryStrike");
addToContainers_function("Server_Execute", "~ Begin UCommanderAbilityBase interface", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/Server_Execute.html", ["server_", "execute"], "UCAbility_ArtilleryStrike");
addToContainers_function("Client_Execute", "", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/Client_Execute.html", ["client_", "execute"], "UCAbility_ArtilleryStrike");
addToContainers_function("RevealFogAtUseLocation", "Reveal fog of war at the location this ability was used at @param AbilityLocation - where this ability was used @param bIsServer - whether we are running code on the server", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/RevealFogAtUseLocation.html", ["reveal", "fog", "at", "use", "location"], "UCAbility_ArtilleryStrike");
addToContainers_function("HandleSpawningOfDecal", "", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/HandleSpawningOfDecal.html", ["handle", "spawning", "of", "decal"], "UCAbility_ArtilleryStrike");
addToContainers_function("ShouldSeeDecal", "Return true if the decal that gets burned into the ground should be seen", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/ShouldSeeDecal.html", ["should", "see", "decal"], "UCAbility_ArtilleryStrike");
addToContainers_function("SpawnAtUseLocationAfterDelay", "", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/SpawnAtUseLocationAfterDelay.html", ["spawn", "at", "use", "location", "after", "delay"], "UCAbility_ArtilleryStrike");
addToContainers_function("SpawnDecalAtUseLocation", "", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/SpawnDecalAtUseLocation.html", ["spawn", "decal", "at", "use", "location"], "UCAbility_ArtilleryStrike");
addToContainers_function("OnActiveStrikeExpired", "", "Docs/Classes/UCAbility_ArtilleryStrike/Functions/OnActiveStrikeExpired.html", ["on", "active", "strike", "expired"], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Write this because cbf writting lots of getters", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Area where projectiles are fired at", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_1.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "The height projectiles spawn at above the use location\'s Z axis value", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_2.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Projectile to use.", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_3.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Whether to override the damage values on the projectile", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_4.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Damage values of the projectile", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_5.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_6.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired. Set this equal to MinInitialDelay to avoid randomness", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_7.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "How long to spawn projectiles for. Measured after InitialDelay is up. After this amount of time is up no more projectiles will spawn.", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_8.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "For randomness", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_9.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_10.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_11.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_12.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_13.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_14.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_15.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "The distance from the center that the projectiles should be shot at X axis = a random number. Should start at 0 and end at 1 Y axis = normalized distance from center. Values can be anywhere from 0 to 1 If this is not set then linear will be used", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_16.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "How much different the rotation the next projectile to spawn from the last one in degrees. Set this greater to 0 if you want your projectiles to try not to clump up in one spot.", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_17.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_18.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "Decal to spawn at the target location", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_19.html", [], "UCAbility_ArtilleryStrike");
addToContainers_variable("", "The delay from when ability is used to when the target location decal should spawn", "Docs/Classes/UCAbility_ArtilleryStrike/Variables/_20.html", [], "UCAbility_ArtilleryStrike");
addToContainers_struct("FBarrageProjectileInfo", "All the info about how a projectile is fired during the barrage. A salvo is just projectiles fired in a concentrated area kinda like an airship tends to fire many shots near the same general location before choosing another general location.", "Docs/Structs/FBarrageProjectileInfo/FBarrageProjectileInfo.html", ["barrage", "projectile", "info"], "");
addToContainers_function("FBarrageProjectileInfo", "", "Docs/Structs/FBarrageProjectileInfo/Functions/FBarrageProjectileInfo.html", ["barrage", "projectile", "info"], "FBarrageProjectileInfo");
addToContainers_function("SetDamageValues", "", "Docs/Structs/FBarrageProjectileInfo/Functions/SetDamageValues.html", ["set", "damage", "values"], "FBarrageProjectileInfo");
addToContainers_function("CheckCurveAssets", "", "Docs/Structs/FBarrageProjectileInfo/Functions/CheckCurveAssets.html", ["check", "curve", "assets"], "FBarrageProjectileInfo");
addToContainers_function("GetProjectileBP", "Trivial getters", "Docs/Structs/FBarrageProjectileInfo/Functions/GetProjectileBP.html", ["get", "projectile", "b", "p"], "FBarrageProjectileInfo");
addToContainers_function("GetProjectileDamageValues", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetProjectileDamageValues.html", ["get", "projectile", "damage", "values"], "FBarrageProjectileInfo");
addToContainers_function("GetMinInitialDelay", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMinInitialDelay.html", ["get", "min", "initial", "delay"], "FBarrageProjectileInfo");
addToContainers_function("GetMaxInitialDelay", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMaxInitialDelay.html", ["get", "max", "initial", "delay"], "FBarrageProjectileInfo");
addToContainers_function("GetMinDuration", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMinDuration.html", ["get", "min", "duration"], "FBarrageProjectileInfo");
addToContainers_function("GetMaxDuration", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMaxDuration.html", ["get", "max", "duration"], "FBarrageProjectileInfo");
addToContainers_function("GetMinTimeBetweenSalvos", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMinTimeBetweenSalvos.html", ["get", "min", "time", "between", "salvos"], "FBarrageProjectileInfo");
addToContainers_function("GetMaxTimeBetweenSalvos", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMaxTimeBetweenSalvos.html", ["get", "max", "time", "between", "salvos"], "FBarrageProjectileInfo");
addToContainers_function("GetSalvoRadius", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetSalvoRadius.html", ["get", "salvo", "radius"], "FBarrageProjectileInfo");
addToContainers_function("GetMinShotsPerSalvo", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMinShotsPerSalvo.html", ["get", "min", "shots", "per", "salvo"], "FBarrageProjectileInfo");
addToContainers_function("GetMaxShotsPerSalvo", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMaxShotsPerSalvo.html", ["get", "max", "shots", "per", "salvo"], "FBarrageProjectileInfo");
addToContainers_function("GetMinTimeBetweenShots", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMinTimeBetweenShots.html", ["get", "min", "time", "between", "shots"], "FBarrageProjectileInfo");
addToContainers_function("GetMaxTimeBetweenShots", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetMaxTimeBetweenShots.html", ["get", "max", "time", "between", "shots"], "FBarrageProjectileInfo");
addToContainers_function("GetLocationOffset", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetLocationOffset.html", ["get", "location", "offset"], "FBarrageProjectileInfo");
addToContainers_function("GetDistanceFromCenterCurve_SalvoLocation", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetDistanceFromCenterCurve_SalvoL.html", ["get", "distance", "from", "center", "curve_", "salvo", "location"], "FBarrageProjectileInfo");
addToContainers_function("GetDistanceFromCenterCurve_Projectiles", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetDistanceFromCenterCurve_Projec.html", ["get", "distance", "from", "center", "curve_", "projectiles"], "FBarrageProjectileInfo");
addToContainers_function("GetZAxisOption", "", "Docs/Structs/FBarrageProjectileInfo/Functions/GetZAxisOption.html", ["get", "z", "axis", "option"], "FBarrageProjectileInfo");
addToContainers_variable("", "Projectile to use.", "Docs/Structs/FBarrageProjectileInfo/Variables/.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Whether to override the damage values on the projectile", "Docs/Structs/FBarrageProjectileInfo/Variables/_1.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Damage values of the projectile", "Docs/Structs/FBarrageProjectileInfo/Variables/_2.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired", "Docs/Structs/FBarrageProjectileInfo/Variables/_3.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Time from when the ability is used to when the first projectile is fired. Set this equal to MinInitialDelay to avoid randomness", "Docs/Structs/FBarrageProjectileInfo/Variables/_4.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "How long to spawn projectiles for. Measured after InitialDelay is up. After this amount of time is up no more projectiles will spawn.", "Docs/Structs/FBarrageProjectileInfo/Variables/_5.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "For randomness", "Docs/Structs/FBarrageProjectileInfo/Variables/_6.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_7.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_8.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_9.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_10.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_11.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_12.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "", "Docs/Structs/FBarrageProjectileInfo/Variables/_13.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "This is how far in front or behind the aircraft the projectile should be fired from e.g. on an AC130 the weapons are at different locations along the side of it Positive values mean further up the front of the ship Negative values mean further near the back of the ship My notes: no matter the sign of RotationRate the 2 statements above stay true", "Docs/Structs/FBarrageProjectileInfo/Variables/_14.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Curve for choosing the salvo location, not individual projectile locations. Both axis should be normalized to the range [0, 1]. The X axis must start at 0 and end at 1. X axis = a random number Y axis = the horizontal distance the projectile should spawn from the use location If no curve is used here then linear will be used", "Docs/Structs/FBarrageProjectileInfo/Variables/_15.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "The distance from the salvo location each projectile should be. Just like DistanceFromCenterCurve_Salvo except for locations around the salvo location", "Docs/Structs/FBarrageProjectileInfo/Variables/_16.html", [], "FBarrageProjectileInfo");
addToContainers_variable("", "Whether to raycast so locations chosen are on the ground", "Docs/Structs/FBarrageProjectileInfo/Variables/_17.html", [], "FBarrageProjectileInfo");
addToContainers_class("UActiveBarrageSingleSalvoTypeState", "State for a single projectile type of the barrage. Decided to make this a UCLASS instead of a USTRUCT because I want to call timer handles with it", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/UActiveBarrageSingleSalvoTypeStat.html", ["active", "barrage", "single", "salvo", "type", "state"], "");
addToContainers_function("UActiveBarrageSingleSalvoTypeState", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/UActiveBarrageSingleSalvoTypeStat.html", ["active", "barrage", "single", "salvo", "type", "state"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("Init", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/Init.html", [], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("Tick", "~ Begin overrides for FTickableGameObject", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/Tick.html", [], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("GetStatId", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/GetStatId.html", ["get", "stat", "id"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("GetTickableTickType", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/GetTickableTickType.html", ["get", "tickable", "tick", "type"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("PoolingManager", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/PoolingManager.html", ["pooling", "manager"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("World", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/World.html", [], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("CalculateProjectileSpawnLocation", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/CalculateProjectileSpawnLocation.html", ["calculate", "projectile", "spawn", "location"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("CalculateSalvoLocation", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/CalculateSalvoLocation.html", ["calculate", "salvo", "location"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("CalculateProjectileFireAtLocation", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/CalculateProjectileFireAtLocation.html", ["calculate", "projectile", "fire", "at", "location"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("CalculateTimeBetweenShots", "Calculate how much time should pass between firing a projectile and firing the next projectile", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/CalculateTimeBetweenShots.html", ["calculate", "time", "between", "shots"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("SpawnProjectile", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/SpawnProjectile.html", ["spawn", "projectile"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_function("Stop", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Functions/Stop.html", [], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("BarrageState", "~ End overrides for FTickableGameObject", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/BarrageState.html", ["barrage", "state"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("Info", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/Info.html", [], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("TimeSpentAlive", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/TimeSpentAlive.html", ["time", "spent", "alive"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("TimeTillStop", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/TimeTillStop.html", ["time", "till", "stop"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("TimeTillNextProjectileSpawn", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/TimeTillNextProjectileSpawn.html", ["time", "till", "next", "projectile", "spawn"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("CurrentSalvoLocation", "The location that is the center for the current salvo", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/CurrentSalvoLocation.html", ["current", "salvo", "location"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("NumProjectilesRemainingInSalvo", "", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/NumProjectilesRemainingInSalvo.html", ["num", "projectiles", "remaining", "in", "salvo"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("bNextProjectileIsFirstOfSalvo", "If true then the next projectile we fire is the first in a salvo", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/bNextProjectileIsFirstOfSalvo.html", ["next", "projectile", "is", "first", "of", "salvo"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_variable("ArrayIndex", "The array index in BarrageState->States that this is", "Docs/Classes/UActiveBarrageSingleSalvoTypeStat/Variables/ArrayIndex.html", ["array", "index"], "UActiveBarrageSingleSalvoTypeState");
addToContainers_struct("FActiveBarrageState", "State for a barrage", "Docs/Structs/FActiveBarrageState/FActiveBarrageState.html", ["active", "barrage", "state"], "");
addToContainers_function("FActiveBarrageState", "", "Docs/Structs/FActiveBarrageState/Functions/FActiveBarrageState.html", ["active", "barrage", "state"], "FActiveBarrageState");
addToContainers_function("FActiveBarrageState", "Use this ctor", "Docs/Structs/FActiveBarrageState/Functions/FActiveBarrageState_1.html", ["active", "barrage", "state"], "FActiveBarrageState");
addToContainers_function("MoreSetup", "Calling this after the ctor cause perhaps things are getting messed up doing it in ctor. Yes they were. I spent 8+ hours debugging this. The offending action was passing the \'this\' pointer to another struct while in our ctor", "Docs/Structs/FActiveBarrageState/Functions/MoreSetup.html", ["more", "setup"], "FActiveBarrageState");
addToContainers_function("CalculateFirersOriginalLocation", "", "Docs/Structs/FActiveBarrageState/Functions/CalculateFirersOriginalLocation.html", ["calculate", "firers", "original", "location"], "FActiveBarrageState");
addToContainers_function("GetRandomInt", "Get a random integer between Min and Max", "Docs/Structs/FActiveBarrageState/Functions/GetRandomInt.html", ["get", "random", "int"], "FActiveBarrageState");
addToContainers_function("GetRandomFloat", "Get a random float between Min and Max", "Docs/Structs/FActiveBarrageState/Functions/GetRandomFloat.html", ["get", "random", "float"], "FActiveBarrageState");
addToContainers_function("GetUseLocation", "Get the world location where the ability was used", "Docs/Structs/FActiveBarrageState/Functions/GetUseLocation.html", ["get", "use", "location"], "FActiveBarrageState");
addToContainers_function("GetFirersOriginalLocation", "", "Docs/Structs/FActiveBarrageState/Functions/GetFirersOriginalLocation.html", ["get", "firers", "original", "location"], "FActiveBarrageState");
addToContainers_function("GetRadius", "", "Docs/Structs/FActiveBarrageState/Functions/GetRadius.html", ["get", "radius"], "FActiveBarrageState");
addToContainers_function("GetRotationRate", "", "Docs/Structs/FActiveBarrageState/Functions/GetRotationRate.html", ["get", "rotation", "rate"], "FActiveBarrageState");
addToContainers_function("GetInstigatorsTeam", "", "Docs/Structs/FActiveBarrageState/Functions/GetInstigatorsTeam.html", ["get", "instigators", "team"], "FActiveBarrageState");
addToContainers_function("OnActiveProjectileTypeFinished", "", "Docs/Structs/FActiveBarrageState/Functions/OnActiveProjectileTypeFinished.html", ["on", "active", "projectile", "type", "finished"], "FActiveBarrageState");
addToContainers_function("EffectActor", "", "Docs/Structs/FActiveBarrageState/Functions/EffectActor.html", ["effect", "actor"], "FActiveBarrageState");
addToContainers_function("Elem_2)", "", "Docs/Structs/FActiveBarrageState/Functions/Elem_2).html", [], "FActiveBarrageState");
addToContainers_function("Elem)", "", "Docs/Structs/FActiveBarrageState/Functions/Elem).html", [], "FActiveBarrageState");
addToContainers_variable("RandomStream", "", "Docs/Structs/FActiveBarrageState/Variables/RandomStream.html", ["random", "stream"], "FActiveBarrageState");
addToContainers_variable("TargetLocation", "World location where the ability was used", "Docs/Structs/FActiveBarrageState/Variables/TargetLocation.html", ["target", "location"], "FActiveBarrageState");
addToContainers_variable("FirersOriginalLocation", "Whatever is firing the projectiles: this is its location when the ability was used", "Docs/Structs/FActiveBarrageState/Variables/FirersOriginalLocation.html", ["firers", "original", "location"], "FActiveBarrageState");
addToContainers_variable("Radius", "", "Docs/Structs/FActiveBarrageState/Variables/Radius.html", [], "FActiveBarrageState");
addToContainers_variable("RotationRate", "", "Docs/Structs/FActiveBarrageState/Variables/RotationRate.html", ["rotation", "rate"], "FActiveBarrageState");
addToContainers_variable("UniqueID", "", "Docs/Structs/FActiveBarrageState/Variables/UniqueID.html", ["unique", "i", "d"], "FActiveBarrageState");
addToContainers_variable("InstigatorsTeam", "Team of the player that instigated the ability", "Docs/Structs/FActiveBarrageState/Variables/InstigatorsTeam.html", ["instigators", "team"], "FActiveBarrageState");
addToContainers_variable("", "All the states for each projectile type", "Docs/Structs/FActiveBarrageState/Variables/.html", [], "FActiveBarrageState");
addToContainers_class("UCAbility_Barrage", "Barrage launches projectiles at a location. Many different types of projectiles can be used. It is perfect to simulate an aircraft such as an AC130 firing on a location. There is no mesh for the aircraft though.", "Docs/Classes/UCAbility_Barrage/UCAbility_Barrage.html", ["c", "ability_", "barrage"], "");
addToContainers_function("UCAbility_Barrage", "", "Docs/Classes/UCAbility_Barrage/Functions/UCAbility_Barrage.html", ["c", "ability_", "barrage"], "UCAbility_Barrage");
addToContainers_function("FinalSetup", "~ Begin UCommanderAbilityBase interface", "Docs/Classes/UCAbility_Barrage/Functions/FinalSetup.html", ["final", "setup"], "UCAbility_Barrage");
addToContainers_function("Server_Execute", "", "Docs/Classes/UCAbility_Barrage/Functions/Server_Execute.html", ["server_", "execute"], "UCAbility_Barrage");
addToContainers_function("Client_Execute", "", "Docs/Classes/UCAbility_Barrage/Functions/Client_Execute.html", ["client_", "execute"], "UCAbility_Barrage");
addToContainers_function("RevealFogAtTargetLocation", "~ End UCommanderAbilityBase interface", "Docs/Classes/UCAbility_Barrage/Functions/RevealFogAtTargetLocation.html", ["reveal", "fog", "at", "target", "location"], "UCAbility_Barrage");
addToContainers_function("PlaySound", "", "Docs/Classes/UCAbility_Barrage/Functions/PlaySound.html", ["play", "sound"], "UCAbility_Barrage");
addToContainers_function("OnEffectInstanceExpired", "", "Docs/Classes/UCAbility_Barrage/Functions/OnEffectInstanceExpired.html", ["on", "effect", "instance", "expired"], "UCAbility_Barrage");
addToContainers_function("GetNumProjectileTypes", "", "Docs/Classes/UCAbility_Barrage/Functions/GetNumProjectileTypes.html", ["get", "num", "projectile", "types"], "UCAbility_Barrage");
addToContainers_function("GetProjectileInfo", "", "Docs/Classes/UCAbility_Barrage/Functions/GetProjectileInfo.html", ["get", "projectile", "info"], "UCAbility_Barrage");
addToContainers_function("GetRadius", "", "Docs/Classes/UCAbility_Barrage/Functions/GetRadius.html", ["get", "radius"], "UCAbility_Barrage");
addToContainers_function("GetFirerDistance_Length", "", "Docs/Classes/UCAbility_Barrage/Functions/GetFirerDistance_Length.html", ["get", "firer", "distance_", "length"], "UCAbility_Barrage");
addToContainers_function("GetFirerDistance_Height", "", "Docs/Classes/UCAbility_Barrage/Functions/GetFirerDistance_Height.html", ["get", "firer", "distance_", "height"], "UCAbility_Barrage");
addToContainers_function("GetRotationRate", "", "Docs/Classes/UCAbility_Barrage/Functions/GetRotationRate.html", ["get", "rotation", "rate"], "UCAbility_Barrage");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UCAbility_Barrage/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UCAbility_Barrage");
addToContainers_variable("", "Holds all the active barrage\'s state info", "Docs/Classes/UCAbility_Barrage/Variables/.html", [], "UCAbility_Barrage");
addToContainers_variable("", "The area the ability affects", "Docs/Classes/UCAbility_Barrage/Variables/_1.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Horizontal distance firer is away from target location", "Docs/Classes/UCAbility_Barrage/Variables/_2.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Vertical distance firer is away from target location", "Docs/Classes/UCAbility_Barrage/Variables/_3.html", [], "UCAbility_Barrage");
addToContainers_variable("", "How fast the location the projectiles are being fired from rotates around the target location. I think this is how many degrees per second. Use negative values to move in the opposite direction", "Docs/Classes/UCAbility_Barrage/Variables/_4.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Info about all the projectiles that are fired", "Docs/Classes/UCAbility_Barrage/Variables/_5.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Fog revealing info for target location", "Docs/Classes/UCAbility_Barrage/Variables/_6.html", [], "UCAbility_Barrage");
addToContainers_variable("", "Optional sound to play for the ability instigator", "Docs/Classes/UCAbility_Barrage/Variables/_7.html", [], "UCAbility_Barrage");
addToContainers_class("UCAbility_ResearchUpgrade", "Instantly fully researches an upgrade for the instigator. The upgrade you research you probably don\'t want it to be already researched when you use this ability", "Docs/Classes/UCAbility_ResearchUpgrade/UCAbility_ResearchUpgrade.html", ["c", "ability_", "research", "upgrade"], "");
addToContainers_function("UCAbility_ResearchUpgrade", "", "Docs/Classes/UCAbility_ResearchUpgrade/Functions/UCAbility_ResearchUpgrade.html", ["c", "ability_", "research", "upgrade"], "UCAbility_ResearchUpgrade");
addToContainers_function("FinalSetup", "~ Begin UCommanderAbilityBase interface", "Docs/Classes/UCAbility_ResearchUpgrade/Functions/FinalSetup.html", ["final", "setup"], "UCAbility_ResearchUpgrade");
addToContainers_function("Server_Execute", "", "Docs/Classes/UCAbility_ResearchUpgrade/Functions/Server_Execute.html", ["server_", "execute"], "UCAbility_ResearchUpgrade");
addToContainers_function("Client_Execute", "", "Docs/Classes/UCAbility_ResearchUpgrade/Functions/Client_Execute.html", ["client_", "execute"], "UCAbility_ResearchUpgrade");
addToContainers_variable("", "The upgrade to research.", "Docs/Classes/UCAbility_ResearchUpgrade/Variables/.html", [], "UCAbility_ResearchUpgrade");
addToContainers_class("UCAbility_SingleTargetDamage", "Deals damage to a single target. Very basic ability. Mainly just added this for testing", "Docs/Classes/UCAbility_SingleTargetDamage/UCAbility_SingleTargetDamage.html", ["c", "ability_", "single", "target", "damage"], "");
addToContainers_function("UCAbility_SingleTargetDamage", "", "Docs/Classes/UCAbility_SingleTargetDamage/Functions/UCAbility_SingleTargetDamage.html", ["c", "ability_", "single", "target", "damage"], "UCAbility_SingleTargetDamage");
addToContainers_function("Server_Execute", "~ Begin UCommanderAbilityBase interface", "Docs/Classes/UCAbility_SingleTargetDamage/Functions/Server_Execute.html", ["server_", "execute"], "UCAbility_SingleTargetDamage");
addToContainers_function("Client_Execute", "", "Docs/Classes/UCAbility_SingleTargetDamage/Functions/Client_Execute.html", ["client_", "execute"], "UCAbility_SingleTargetDamage");
addToContainers_variable("", "How much damage to deal", "Docs/Classes/UCAbility_SingleTargetDamage/Variables/.html", [], "UCAbility_SingleTargetDamage");
addToContainers_class("UCommanderAbilityBase", "Base class for all abilities that are instigated by the commander. Examples of these from other games: In C&C Generals: fuel air bomb, artillery strike, any general ability. In Startcraft II: nothing that I know of.", "Docs/Classes/UCommanderAbilityBase/UCommanderAbilityBase.html", ["commander", "ability", "base"], "");
addToContainers_function("UCommanderAbilityBase", "", "Docs/Classes/UCommanderAbilityBase/Functions/UCommanderAbilityBase.html", ["commander", "ability", "base"], "UCommanderAbilityBase");
addToContainers_function("FinalSetup", "Called during ARTSPlayerState::Client_FinalSetup i.e. before match has started", "Docs/Classes/UCommanderAbilityBase/Functions/FinalSetup.html", ["final", "setup"], "UCommanderAbilityBase");
addToContainers_function("Server_Execute", "Just like AAbilityBase::Server_Begin. Make sure to call Super in your overridden implementation of this. @param AbilityTarget - either a ARTSPlayerState if the ability targets a player, or a selectable if it targets a selectable @param OutDirection - the direction of the ability. Abilities like the warthog airstrike use this.", "Docs/Classes/UCommanderAbilityBase/Functions/Server_Execute.html", ["server_", "execute"], "UCommanderAbilityBase");
addToContainers_function("Client_Execute", "Just like AAbilityBase::Client::Begin", "Docs/Classes/UCommanderAbilityBase/Functions/Client_Execute.html", ["client_", "execute"], "UCommanderAbilityBase");
addToContainers_function("GenerateInitialRandomSeed", "Generate initial random int to be used for random stream. Note we use a 16 bit integer as the seed to reduce the amount of data sent across the wire", "Docs/Classes/UCommanderAbilityBase/Functions/GenerateInitialRandomSeed.html", ["generate", "initial", "random", "seed"], "UCommanderAbilityBase");
addToContainers_function("SeedAs16BitTo32Bit", "", "Docs/Classes/UCommanderAbilityBase/Functions/SeedAs16BitTo32Bit.html", ["seed", "as16", "bit", "to32", "bit"], "UCommanderAbilityBase");
addToContainers_variable("GI", "-----------------------------------------------------", "Docs/Classes/UCommanderAbilityBase/Variables/GI.html", [], "UCommanderAbilityBase");
addToContainers_variable("GS", "", "Docs/Classes/UCommanderAbilityBase/Variables/GS.html", [], "UCommanderAbilityBase");
addToContainers_variable("PS", "Player state of the local player", "Docs/Classes/UCommanderAbilityBase/Variables/PS.html", [], "UCommanderAbilityBase");
addToContainers_variable("bHasMultipleOutcomes", "", "Docs/Classes/UCommanderAbilityBase/Variables/bHasMultipleOutcomes.html", ["has", "multiple", "outcomes"], "UCommanderAbilityBase");
addToContainers_variable("bCallAoEStartFunction", "", "Docs/Classes/UCommanderAbilityBase/Variables/bCallAoEStartFunction.html", ["call", "ao", "e", "start", "function"], "UCommanderAbilityBase");
addToContainers_variable("bAoEHitsHaveMultipleOutcomes", "", "Docs/Classes/UCommanderAbilityBase/Variables/bAoEHitsHaveMultipleOutcomes.html", ["ao", "e", "hits", "have", "multiple", "outcomes"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresSelectableTarget", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresSelectableTarget.html", ["requires", "selectable", "target"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresPlayerTarget", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresPlayerTarget.html", ["requires", "player", "target"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresLocation", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresLocation.html", ["requires", "location"], "UCommanderAbilityBase");
addToContainers_variable("bHasRandomBehavior", "", "Docs/Classes/UCommanderAbilityBase/Variables/bHasRandomBehavior.html", ["has", "random", "behavior"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresTickCount", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresTickCount.html", ["requires", "tick", "count"], "UCommanderAbilityBase");
addToContainers_variable("bRequiresDirection", "", "Docs/Classes/UCommanderAbilityBase/Variables/bRequiresDirection.html", ["requires", "direction"], "UCommanderAbilityBase");
addToContainers_struct("FWarthogAttackAttributes", "", "Docs/Structs/FWarthogAttackAttributes/FWarthogAttackAttributes.html", ["warthog", "attack", "attributes"], "");
addToContainers_function("FWarthogAttackAttributes", "", "Docs/Structs/FWarthogAttackAttributes/Functions/FWarthogAttackAttributes.html", ["warthog", "attack", "attributes"], "FWarthogAttackAttributes");
addToContainers_variable("", "1st type of projectile to fire", "Docs/Structs/FWarthogAttackAttributes/Variables/.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FWarthogAttackAttributes/Variables/_1.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Damage values for projectile type 1", "Docs/Structs/FWarthogAttackAttributes/Variables/_2.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "2nd type of projectile to fire. Fired as often or less often than projectile 1", "Docs/Structs/FWarthogAttackAttributes/Variables/_3.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FWarthogAttackAttributes/Variables/_4.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FWarthogAttackAttributes/Variables/_5.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Time between firing projectiles. Never use a Y value of <= 0 at any point on this curve. X axis = how far into phase 3 the warthog is Y axis = time between shot", "Docs/Structs/FWarthogAttackAttributes/Variables/_6.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "For every Projectile2Ratio of projectile type 1 that is fired, a projectile type 2 will be fired. So the higher this value is the more of projectile type 1 that is fired and the less of projectile type 2 that is fired.", "Docs/Structs/FWarthogAttackAttributes/Variables/_7.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Total number of projectiles to fire", "Docs/Structs/FWarthogAttackAttributes/Variables/_8.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Particles for every time a shot is fired", "Docs/Structs/FWarthogAttackAttributes/Variables/_9.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Socket on mesh that projectiles spawn from", "Docs/Structs/FWarthogAttackAttributes/Variables/_10.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Curve for the pitch. X axis = range [0, 1] Y axis = amount of pitch to apply to shot. Higher values = less accurate shots. Only needs to be positive - a random sign will be given to each value", "Docs/Structs/FWarthogAttackAttributes/Variables/_11.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "Curve for the yaw X axis = range [0, 1] Y axis = amount of yaw to apply to shot. Higher values = less accurate shots. Only needs to be positive - a random sign will be given to each value", "Docs/Structs/FWarthogAttackAttributes/Variables/_12.html", [], "FWarthogAttackAttributes");
addToContainers_variable("", "The sound to play while the warthog is firing", "Docs/Structs/FWarthogAttackAttributes/Variables/_13.html", [], "FWarthogAttackAttributes");
addToContainers_class("AWarthog", "Plane that will fly to a location and fire at it - the default values for this class are set up decently for the marketplace warthog model with the muzzle socket added to Skeleton_Gun_End, rotating its yaw by -90 and giving it -5 pitch. - set the sound for the engine as EngineAudioComp::Sound - check the movement component - it may have some variables for you to adjust TODO only the engine anim plays. Implement the firing anim and possibly a pull up anim too.", "Docs/Classes/AWarthog/AWarthog.html", [], "");
addToContainers_function("AWarthog", "", "Docs/Classes/AWarthog/Functions/AWarthog.html", [], "AWarthog");
addToContainers_function("BeginPlay", "", "Docs/Classes/AWarthog/Functions/BeginPlay.html", ["begin", "play"], "AWarthog");
addToContainers_function("CheckCurveAssets", "", "Docs/Classes/AWarthog/Functions/CheckCurveAssets.html", ["check", "curve", "assets"], "AWarthog");
addToContainers_function("InitialSetup", "Call this right after BeginPlay", "Docs/Classes/AWarthog/Functions/InitialSetup.html", ["initial", "setup"], "AWarthog");
addToContainers_function("OnOwningAbilityUsed", "@param TargetLocation - world location where the ability was used", "Docs/Classes/AWarthog/Functions/OnOwningAbilityUsed.html", ["on", "owning", "ability", "used"], "AWarthog");
addToContainers_function("Tick", "", "Docs/Classes/AWarthog/Functions/Tick.html", [], "AWarthog");
addToContainers_function("TakeDamage", "", "Docs/Classes/AWarthog/Functions/TakeDamage.html", ["take", "damage"], "AWarthog");
addToContainers_function("GetAttackAttributes", "", "Docs/Classes/AWarthog/Functions/GetAttackAttributes.html", ["get", "attack", "attributes"], "AWarthog");
addToContainers_function("GetStartingLocation", "[Server] Return where in the world the plane should spawn @param InInstigator - the player using the ability that spawns this warthog @param TargetLocation - world location where the ability was used @param OutYawBearing - the direction from the TargetLocation in which the warthog should spawn. This gets passed on to clients @return - world location where the warthog should spawn", "Docs/Classes/AWarthog/Functions/GetStartingLocation.html", ["get", "starting", "location"], "AWarthog");
addToContainers_function("GetStartingLocation", "[Client] Return starting location", "Docs/Classes/AWarthog/Functions/GetStartingLocation_1.html", ["get", "starting", "location"], "AWarthog");
addToContainers_function("GetStartingRotation", "", "Docs/Classes/AWarthog/Functions/GetStartingRotation.html", ["get", "starting", "rotation"], "AWarthog");
addToContainers_function("FireProjectiles", "Fire a projectile or sometimes many because rate of fire could be quite fast", "Docs/Classes/AWarthog/Functions/FireProjectiles.html", ["fire", "projectiles"], "AWarthog");
addToContainers_function("GetProjectileFireDirection", "Return direction where a projectile should be fired at @param MuzzleTransform - world transform for the muzzle socket", "Docs/Classes/AWarthog/Functions/GetProjectileFireDirection.html", ["get", "projectile", "fire", "direction"], "AWarthog");
addToContainers_function("GetPhase1AndPhase4MoveSpeed", "", "Docs/Classes/AWarthog/Functions/GetPhase1AndPhase4MoveSpeed.html", ["get", "phase1", "and", "phase4", "move", "speed"], "AWarthog");
addToContainers_function("GetPhase2AndPhase3MoveSpeed", "", "Docs/Classes/AWarthog/Functions/GetPhase2AndPhase3MoveSpeed.html", ["get", "phase2", "and", "phase3", "move", "speed"], "AWarthog");
addToContainers_function("GetAttackPhase", "", "Docs/Classes/AWarthog/Functions/GetAttackPhase.html", ["get", "attack", "phase"], "AWarthog");
addToContainers_function("GetPhase2Tilt", "", "Docs/Classes/AWarthog/Functions/GetPhase2Tilt.html", ["get", "phase2", "tilt"], "AWarthog");
addToContainers_function("GetTimeSpentInPhase2AndPhase3", "", "Docs/Classes/AWarthog/Functions/GetTimeSpentInPhase2AndPhase3.html", ["get", "time", "spent", "in", "phase2", "and", "phase3"], "AWarthog");
addToContainers_function("GetPhase4Tilt", "", "Docs/Classes/AWarthog/Functions/GetPhase4Tilt.html", ["get", "phase4", "tilt"], "AWarthog");
addToContainers_function("GetTimeSpentInPhase4", "", "Docs/Classes/AWarthog/Functions/GetTimeSpentInPhase4.html", ["get", "time", "spent", "in", "phase4"], "AWarthog");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AWarthog/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AWarthog");
addToContainers_function("RunPostEditLogic", "", "Docs/Classes/AWarthog/Functions/RunPostEditLogic.html", ["run", "post", "edit", "logic"], "AWarthog");
addToContainers_variable("", "Adding this cause the warthog skeletal mesh is rotated by 90 degrees and I can\'t find any other way of getting it the right rotation. I think rotation can actually be changed when you import the SK into UE but whatever", "Docs/Classes/AWarthog/Variables/.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_1.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_2.html", [], "AWarthog");
addToContainers_variable("", "Audio component to play the sound of the engine", "Docs/Classes/AWarthog/Variables/_3.html", [], "AWarthog");
addToContainers_variable("AbilityUseLocation", "World location where the ability was used", "Docs/Classes/AWarthog/Variables/AbilityUseLocation.html", ["ability", "use", "location"], "AWarthog");
addToContainers_variable("Phase", "", "Docs/Classes/AWarthog/Variables/Phase.html", [], "AWarthog");
addToContainers_variable("InstigatorsTeam", "", "Docs/Classes/AWarthog/Variables/InstigatorsTeam.html", ["instigators", "team"], "AWarthog");
addToContainers_variable("", "Should be looping", "Docs/Classes/AWarthog/Variables/_4.html", [], "AWarthog");
addToContainers_variable("", "Height it which warthog spawns. This is above the use location\'s Z value", "Docs/Classes/AWarthog/Variables/_5.html", [], "AWarthog");
addToContainers_variable("", "How fast the warthog moves during phase1 and phase4", "Docs/Classes/AWarthog/Variables/_6.html", [], "AWarthog");
addToContainers_variable("", "How close to the target location in 2D coordinates that the warthog should transition into phase 2", "Docs/Classes/AWarthog/Variables/_7.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_8.html", [], "AWarthog");
addToContainers_variable("", "How much pitch to apply when about to fire and firing. Usually this is negative so the plane looks downward towards ground", "Docs/Classes/AWarthog/Variables/_9.html", [], "AWarthog");
addToContainers_variable("", "How far the warthog should travel in 2D coordinates during phase2 before it should switch to phase3.", "Docs/Classes/AWarthog/Variables/_10.html", [], "AWarthog");
addToContainers_variable("", "How long after firing the last shot before the warthog should transition to phase4", "Docs/Classes/AWarthog/Variables/_11.html", [], "AWarthog");
addToContainers_variable("", "How much pitch for the plane to go towards for phase4", "Docs/Classes/AWarthog/Variables/_12.html", [], "AWarthog");
addToContainers_variable("GI", "Attack properties", "Docs/Classes/AWarthog/Variables/GI.html", [], "AWarthog");
addToContainers_variable("PoolingManager", "", "Docs/Classes/AWarthog/Variables/PoolingManager.html", ["pooling", "manager"], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_13.html", [], "AWarthog");
addToContainers_variable("RandomStream", "", "Docs/Classes/AWarthog/Variables/RandomStream.html", ["random", "stream"], "AWarthog");
addToContainers_variable("TimeSpentInPhase2AndPhase3", "", "Docs/Classes/AWarthog/Variables/TimeSpentInPhase2AndPhase3.html", ["time", "spent", "in", "phase2", "and", "phase3"], "AWarthog");
addToContainers_variable("TimeBetweenShotsCurveYValue", "", "Docs/Classes/AWarthog/Variables/TimeBetweenShotsCurveYValue.html", ["time", "between", "shots", "curve", "y", "value"], "AWarthog");
addToContainers_variable("TimeTillFireNextProjectile", "", "Docs/Classes/AWarthog/Variables/TimeTillFireNextProjectile.html", ["time", "till", "fire", "next", "projectile"], "AWarthog");
addToContainers_variable("NumProjectilesRemaining", "Number of projectiles this plane still has to fire", "Docs/Classes/AWarthog/Variables/NumProjectilesRemaining.html", ["num", "projectiles", "remaining"], "AWarthog");
addToContainers_variable("TimeSpentInPhase4", "", "Docs/Classes/AWarthog/Variables/TimeSpentInPhase4.html", ["time", "spent", "in", "phase4"], "AWarthog");
addToContainers_variable("", "Other properties", "Docs/Classes/AWarthog/Variables/_14.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_15.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_16.html", [], "AWarthog");
addToContainers_variable("", "", "Docs/Classes/AWarthog/Variables/_17.html", [], "AWarthog");
addToContainers_class("UWarthogMovementComponent", "", "Docs/Classes/UWarthogMovementComponent/UWarthogMovementComponent.html", ["warthog", "movement", "component"], "");
addToContainers_function("UWarthogMovementComponent", "", "Docs/Classes/UWarthogMovementComponent/Functions/UWarthogMovementComponent.html", ["warthog", "movement", "component"], "UWarthogMovementComponent");
addToContainers_function("InitializeComponent", "", "Docs/Classes/UWarthogMovementComponent/Functions/InitializeComponent.html", ["initialize", "component"], "UWarthogMovementComponent");
addToContainers_function("BeginPlay", "", "Docs/Classes/UWarthogMovementComponent/Functions/BeginPlay.html", ["begin", "play"], "UWarthogMovementComponent");
addToContainers_function("TickComponent", "", "Docs/Classes/UWarthogMovementComponent/Functions/TickComponent.html", ["tick", "component"], "UWarthogMovementComponent");
addToContainers_function("GetOwnerAsWarthog", "GetOwner() casted to AWarthog", "Docs/Classes/UWarthogMovementComponent/Functions/GetOwnerAsWarthog.html", ["get", "owner", "as", "warthog"], "UWarthogMovementComponent");
addToContainers_function("OnOwningAbilityUsed", "", "Docs/Classes/UWarthogMovementComponent/Functions/OnOwningAbilityUsed.html", ["on", "owning", "ability", "used"], "UWarthogMovementComponent");
addToContainers_variable("OriginalVelocity", "----------------------------------------------------------------", "Docs/Classes/UWarthogMovementComponent/Variables/OriginalVelocity.html", ["original", "velocity"], "UWarthogMovementComponent");
addToContainers_variable("", "How long it takes to go from flying straight to flying at the decent angle specified on AWarthog.", "Docs/Classes/UWarthogMovementComponent/Variables/.html", [], "UWarthogMovementComponent");
addToContainers_variable("", "", "Docs/Classes/UWarthogMovementComponent/Variables/_1.html", [], "UWarthogMovementComponent");
addToContainers_class("ARTSLevelVolume", "A volume to be placed on the map. It defines: - the area of fog of war that is revealable - the area of the map that should be shown on the minimap - It also stores the locations of RTS player starts placed on map - the area the player\'s camera is allowed to visit", "Docs/Classes/ARTSLevelVolume/ARTSLevelVolume.html", ["r", "t", "s", "level", "volume"], "");
addToContainers_function("ARTSLevelVolume", "", "Docs/Classes/ARTSLevelVolume/Functions/ARTSLevelVolume.html", ["r", "t", "s", "level", "volume"], "ARTSLevelVolume");
addToContainers_function("OnConstruction", "", "Docs/Classes/ARTSLevelVolume/Functions/OnConstruction.html", ["on", "construction"], "ARTSLevelVolume");
addToContainers_function("Destroyed", "", "Docs/Classes/ARTSLevelVolume/Functions/Destroyed.html", [], "ARTSLevelVolume");
addToContainers_function("SetMapWallConstructorValues", "Sets up a map wall box comp in ctor", "Docs/Classes/ARTSLevelVolume/Functions/SetMapWallConstructorValues.html", ["set", "map", "wall", "constructor", "values"], "ARTSLevelVolume");
addToContainers_function("CalcSceneCaptureOrthoWidth", "Return what ortho widget should be set to on minimap scene campture comp", "Docs/Classes/ARTSLevelVolume/Functions/CalcSceneCaptureOrthoWidth.html", ["calc", "scene", "capture", "ortho", "width"], "ARTSLevelVolume");
addToContainers_function("StoreMapInfo", "Create minimap texture and also store transforms of player starts", "Docs/Classes/ARTSLevelVolume/Functions/StoreMapInfo.html", ["store", "map", "info"], "ARTSLevelVolume");
addToContainers_function("GetMinimapTexture", "Get the texture to use as the background of the minimap. Not really 100% necessary to have this, the data is also stored on disk or at least should be stored elsewhere on post edit", "Docs/Classes/ARTSLevelVolume/Functions/GetMinimapTexture.html", ["get", "minimap", "texture"], "ARTSLevelVolume");
addToContainers_function("GetMapBounds", "Get bounds of map", "Docs/Classes/ARTSLevelVolume/Functions/GetMapBounds.html", ["get", "map", "bounds"], "ARTSLevelVolume");
addToContainers_function("GetPlayerStarts", "Get player starts array", "Docs/Classes/ARTSLevelVolume/Functions/GetPlayerStarts.html", ["get", "player", "starts"], "ARTSLevelVolume");
addToContainers_function("CreateMinimapTexture", "If one doesn\'t exist then creates a texture to be used as the minimap for the current map", "Docs/Classes/ARTSLevelVolume/Functions/CreateMinimapTexture.html", ["create", "minimap", "texture"], "ARTSLevelVolume");
addToContainers_function("StorePlayerStartInfo", "Store the transforms of all the player starts", "Docs/Classes/ARTSLevelVolume/Functions/StorePlayerStartInfo.html", ["store", "player", "start", "info"], "ARTSLevelVolume");
addToContainers_function("StoreMapBounds", "Store the bounds for the map", "Docs/Classes/ARTSLevelVolume/Functions/StoreMapBounds.html", ["store", "map", "bounds"], "ARTSLevelVolume");
addToContainers_function("WriteMapInfoToDisk", "Writes all the data about the map to disk so game instance can access it later", "Docs/Classes/ARTSLevelVolume/Functions/WriteMapInfoToDisk.html", ["write", "map", "info", "to", "disk"], "ARTSLevelVolume");
addToContainers_function("AdjustWallDimensions", "Adjusts the dimensions of each of the map wall box comps to whatever they should be now", "Docs/Classes/ARTSLevelVolume/Functions/AdjustWallDimensions.html", ["adjust", "wall", "dimensions"], "ARTSLevelVolume");
addToContainers_function("PostEditChangeProperty", "Don\'t think this is called when user changes proportions with editor scaling tools", "Docs/Classes/ARTSLevelVolume/Functions/PostEditChangeProperty.html", ["post", "edit", "change", "property"], "ARTSLevelVolume");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/ARTSLevelVolume/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "ARTSLevelVolume");
addToContainers_function("PostEditMove", "", "Docs/Classes/ARTSLevelVolume/Functions/PostEditMove.html", ["post", "edit", "move"], "ARTSLevelVolume");
addToContainers_variable("", "Box that defines the area of the map where fog of war can be toggled and the area of the map that should be used as the minimap image", "Docs/Classes/ARTSLevelVolume/Variables/.html", [], "ARTSLevelVolume");
addToContainers_variable("", "The scene capture component that captures an image to use as a texture for minimap", "Docs/Classes/ARTSLevelVolume/Variables/_1.html", [], "ARTSLevelVolume");
addToContainers_variable("MapName", "Name of map this volume was placed on", "Docs/Classes/ARTSLevelVolume/Variables/MapName.html", ["map", "name"], "ARTSLevelVolume");
addToContainers_variable("WALL_THICKNESS", "How thick the walls are ", "Docs/Classes/ARTSLevelVolume/Variables/WALL_THICKNESS.html", ["a", "l", "l_", "t", "h", "i", "c", "k", "n", "e", "s", "s"], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_2.html", [], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_3.html", [], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_4.html", [], "ARTSLevelVolume");
addToContainers_variable("", "", "Docs/Classes/ARTSLevelVolume/Variables/_5.html", [], "ARTSLevelVolume");
addToContainers_variable("", "The minimap texture created while in editor. You can look but cannot touch. Actually for the meanwhile this has been changed from VisibleAnywhere to EditDefaultsOnly (this and PlayerStarts and MapBounds - for \'no edit GI BP\' workaround)", "Docs/Classes/ARTSLevelVolume/Variables/_6.html", [], "ARTSLevelVolume");
addToContainers_variable("", "This is a path reference to the minimap texture. Basically without this the UTexture2D created while in editor will be null although I can\'t get it working with this", "Docs/Classes/ARTSLevelVolume/Variables/_7.html", [], "ARTSLevelVolume");
addToContainers_variable("", "Array of all RTSPlayerStarts on map.", "Docs/Classes/ARTSLevelVolume/Variables/_8.html", [], "ARTSLevelVolume");
addToContainers_variable("", "Bounds of the map this volume was placed in", "Docs/Classes/ARTSLevelVolume/Variables/_9.html", [], "ARTSLevelVolume");
addToContainers_class("UPlayerCameraMovement", "The movement component that decides how the players pawn (which has a camera attached to it) moves. It is pretty much a copy of UFloatingPawnMovement but does a raycast each tick to make sure updated component stays glued to the ground", "Docs/Classes/UPlayerCameraMovement/UPlayerCameraMovement.html", ["player", "camera", "movement"], "");
addToContainers_function("UPlayerCameraMovement", "", "Docs/Classes/UPlayerCameraMovement/Functions/UPlayerCameraMovement.html", ["player", "camera", "movement"], "UPlayerCameraMovement");
addToContainers_function("BeginPlay", "", "Docs/Classes/UPlayerCameraMovement/Functions/BeginPlay.html", ["begin", "play"], "UPlayerCameraMovement");
addToContainers_function("TickComponent", "", "Docs/Classes/UPlayerCameraMovement/Functions/TickComponent.html", ["tick", "component"], "UPlayerCameraMovement");
addToContainers_function("MoveToGround", "This and GlueToGround sound too similar. This moves the component while the other adds to velocity vector (probably same effect anyway) but should maybe change the func names", "Docs/Classes/UPlayerCameraMovement/Functions/MoveToGround.html", ["move", "to", "ground"], "UPlayerCameraMovement");
addToContainers_function("GlueToGround", "Do ray trace against environment so the updated component can be placed on the ground as opposed to ignoring gravity.", "Docs/Classes/UPlayerCameraMovement/Functions/GlueToGround.html", ["glue", "to", "ground"], "UPlayerCameraMovement");
addToContainers_function("GetMaxSpeed", "Overridding this as per UFloatingPawnMovement", "Docs/Classes/UPlayerCameraMovement/Functions/GetMaxSpeed.html", ["get", "max", "speed"], "UPlayerCameraMovement");
addToContainers_function("ResolvePenetrationImpl", "Overridding this as per UFloatingPawnMovement", "Docs/Classes/UPlayerCameraMovement/Functions/ResolvePenetrationImpl.html", ["resolve", "penetration", "impl"], "UPlayerCameraMovement");
addToContainers_function("SetMaxSpeed", "", "Docs/Classes/UPlayerCameraMovement/Functions/SetMaxSpeed.html", ["set", "max", "speed"], "UPlayerCameraMovement");
addToContainers_function("SetAcceleration", "", "Docs/Classes/UPlayerCameraMovement/Functions/SetAcceleration.html", ["set", "acceleration"], "UPlayerCameraMovement");
addToContainers_function("SetDeceleration", "", "Docs/Classes/UPlayerCameraMovement/Functions/SetDeceleration.html", ["set", "deceleration"], "UPlayerCameraMovement");
addToContainers_function("SetTurningBoost", "", "Docs/Classes/UPlayerCameraMovement/Functions/SetTurningBoost.html", ["set", "turning", "boost"], "UPlayerCameraMovement");
addToContainers_variable("MaxSpeed", "Maximum velocity magnitude allowed for the controlled Pawn.", "Docs/Classes/UPlayerCameraMovement/Variables/MaxSpeed.html", ["max", "speed"], "UPlayerCameraMovement");
addToContainers_variable("Acceleration", "Acceleration applied by input (rate of change of velocity)", "Docs/Classes/UPlayerCameraMovement/Variables/Acceleration.html", [], "UPlayerCameraMovement");
addToContainers_variable("Deceleration", "Deceleration applied when there is no input (rate of change of velocity)", "Docs/Classes/UPlayerCameraMovement/Variables/Deceleration.html", [], "UPlayerCameraMovement");
addToContainers_variable("TurningBoost", "Setting affecting extra force applied when changing direction, making turns have less drift and become more responsive. Velocity magnitude is not allowed to increase, that only happens due to normal acceleration. It may decrease with large direction changes. Larger values apply extra force to reach the target direction more quickly, while a zero value disables any extra turn force.", "Docs/Classes/UPlayerCameraMovement/Variables/TurningBoost.html", ["turning", "boost"], "UPlayerCameraMovement");
addToContainers_variable(":", "Set to true when a position correction is applied. Used to avoid recalculating velocity when this occurs.", "Docs/Classes/UPlayerCameraMovement/Variables/:.html", [], "UPlayerCameraMovement");
addToContainers_class("ACollidingProjectile", "A standard non-replicating projectile suitable for straight firing or arcing projectiles such as artillery rounds or arrows", "Docs/Classes/ACollidingProjectile/ACollidingProjectile.html", ["colliding", "projectile"], "");
addToContainers_function("ACollidingProjectile", "", "Docs/Classes/ACollidingProjectile/Functions/ACollidingProjectile.html", ["colliding", "projectile"], "ACollidingProjectile");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/ACollidingProjectile/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "ACollidingProjectile");
addToContainers_function("AddToPool", "Call right before adding to object pool", "Docs/Classes/ACollidingProjectile/Functions/AddToPool.html", ["add", "to", "pool"], "ACollidingProjectile");
addToContainers_function("OnProjectileStop", "", "Docs/Classes/ACollidingProjectile/Functions/OnProjectileStop.html", ["on", "projectile", "stop"], "ACollidingProjectile");
addToContainers_function("Delay)", "", "Docs/Classes/ACollidingProjectile/Functions/Delay).html", [], "ACollidingProjectile");
addToContainers_function("FireAtTarget", "away. ", "Docs/Classes/ACollidingProjectile/Functions/FireAtTarget.html", ["fire", "at", "target"], "ACollidingProjectile");
addToContainers_function("FireAtLocation", "", "Docs/Classes/ACollidingProjectile/Functions/FireAtLocation.html", ["fire", "at", "location"], "ACollidingProjectile");
addToContainers_function("FireInDirection", "", "Docs/Classes/ACollidingProjectile/Functions/FireInDirection.html", ["fire", "in", "direction"], "ACollidingProjectile");
addToContainers_function("IsFitForEnteringObjectPool", "", "Docs/Classes/ACollidingProjectile/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "ACollidingProjectile");
addToContainers_variable("", "", "Docs/Classes/ACollidingProjectile/Variables/.html", [], "ACollidingProjectile");
addToContainers_variable("", "Only relevant if movement components ProjectileGravityScale != 0. This decides whether high arc or low arc will be used when launching projectile. High arc is suitable for say a long range artillery shell while low arc would be more suited for tank rounds", "Docs/Classes/ACollidingProjectile/Variables/_1.html", [], "ACollidingProjectile");
addToContainers_class("ACollidingProjectileBase", "Base class for projectiles that collide with selectables and/or the environment", "Docs/Classes/ACollidingProjectileBase/ACollidingProjectileBase.html", ["colliding", "projectile", "base"], "");
addToContainers_function("ACollidingProjectileBase", "", "Docs/Classes/ACollidingProjectileBase/Functions/ACollidingProjectileBase.html", ["colliding", "projectile", "base"], "ACollidingProjectileBase");
addToContainers_function("BeginPlay", "", "Docs/Classes/ACollidingProjectileBase/Functions/BeginPlay.html", ["begin", "play"], "ACollidingProjectileBase");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/ACollidingProjectileBase/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "ACollidingProjectileBase");
addToContainers_function("AddToPool", "", "Docs/Classes/ACollidingProjectileBase/Functions/AddToPool.html", ["add", "to", "pool"], "ACollidingProjectileBase");
addToContainers_function("ResetTeamCollision", "Reset collision channels for adding back to pool", "Docs/Classes/ACollidingProjectileBase/Functions/ResetTeamCollision.html", ["reset", "team", "collision"], "ACollidingProjectileBase");
addToContainers_function("SetupCollisionChannels", "Setup collision channels for what causes a hit (not for AoE though, see AProjectileBase::SetupAoECollisionChannels)", "Docs/Classes/ACollidingProjectileBase/Functions/SetupCollisionChannels.html", ["setup", "collision", "channels"], "ACollidingProjectileBase");
addToContainers_function("GetStartingRotation", "Returns the rotation to set on the projectile when it is fired at an actor", "Docs/Classes/ACollidingProjectileBase/Functions/GetStartingRotation.html", ["get", "starting", "rotation"], "ACollidingProjectileBase");
addToContainers_function("GetStartingRotation", "Returns the rotation to set on the projectile when it is fired at a world location", "Docs/Classes/ACollidingProjectileBase/Functions/GetStartingRotation_1.html", ["get", "starting", "rotation"], "ACollidingProjectileBase");
addToContainers_function("OnLifetimeExpired", "Call when projectile has not hit anything and times out", "Docs/Classes/ACollidingProjectileBase/Functions/OnLifetimeExpired.html", ["on", "lifetime", "expired"], "ACollidingProjectileBase");
addToContainers_function("Delay)", "", "Docs/Classes/ACollidingProjectileBase/Functions/Delay).html", [], "ACollidingProjectileBase");
addToContainers_function("FireAtTarget", "", "Docs/Classes/ACollidingProjectileBase/Functions/FireAtTarget.html", ["fire", "at", "target"], "ACollidingProjectileBase");
addToContainers_function("FireAtLocation", "", "Docs/Classes/ACollidingProjectileBase/Functions/FireAtLocation.html", ["fire", "at", "location"], "ACollidingProjectileBase");
addToContainers_function("FireInDirection", "", "Docs/Classes/ACollidingProjectileBase/Functions/FireInDirection.html", ["fire", "in", "direction"], "ACollidingProjectileBase");
addToContainers_function("IsFitForEnteringObjectPool", "", "Docs/Classes/ACollidingProjectileBase/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "ACollidingProjectileBase");
addToContainers_function("IsSphereCollisionAcceptableForEnteringObjectPool", "", "Docs/Classes/ACollidingProjectileBase/Functions/IsSphereCollisionAcceptableForEnt.html", ["is", "sphere", "collision", "acceptable", "for", "entering", "object", "pool"], "ACollidingProjectileBase");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/ACollidingProjectileBase/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "ACollidingProjectileBase");
addToContainers_variable("", "Collision comp. Also can be used for projectile mesh positioning", "Docs/Classes/ACollidingProjectileBase/Variables/.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Arrow to no know what way it faces in editor", "Docs/Classes/ACollidingProjectileBase/Variables/_1.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "", "Docs/Classes/ACollidingProjectileBase/Variables/_2.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Can this projectile collide with the world? i.e. non-selectables such as the landscape", "Docs/Classes/ACollidingProjectileBase/Variables/_3.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Will colliding with a enemy trigger a hit?", "Docs/Classes/ACollidingProjectileBase/Variables/_4.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Will colliding with a friendly trigger a hit? Self included. This is important. Make sure the socket if far enough away from the mesh so that it does not collide instantly with the firer", "Docs/Classes/ACollidingProjectileBase/Variables/_5.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "Lifetime of projectile before it pseudo destroys itself and goes back to object pool. This can be low to give projectile a lifetime similar to disruptor shots in starcraft II. It\'s other purpose is a failsafe for stray projectiles that somehow never collide with anything, possibly they were shot up in the air or cannot collide with world, enemy or friendlies. Invisible bounds need to be put in place to stop them and return them to the pool", "Docs/Classes/ACollidingProjectileBase/Variables/_6.html", [], "ACollidingProjectileBase");
addToContainers_variable("", "If time expires does this projectile cause a hit where it is or just go silently? E.g. Starcraft II disruptors would be an example of a true. Area of Effect Radius must be greater than 0 for any damage to be dealt in this case.", "Docs/Classes/ACollidingProjectileBase/Variables/_7.html", [], "ACollidingProjectileBase");
addToContainers_variable("HitResult", "A hit result to pass into some functions to avoid creating temporaries", "Docs/Classes/ACollidingProjectileBase/Variables/HitResult.html", ["hit", "result"], "ACollidingProjectileBase");
addToContainers_variable("", "", "Docs/Classes/ACollidingProjectileBase/Variables/_8.html", [], "ACollidingProjectileBase");
addToContainers_class("AHomingProjectile", "A non-replicating projectile that always finds its target. An example would be a stalker shot in starctaft II. Can also be used for missles that seek their targets.", "Docs/Classes/AHomingProjectile/AHomingProjectile.html", ["homing", "projectile"], "");
addToContainers_function("AHomingProjectile", "", "Docs/Classes/AHomingProjectile/Functions/AHomingProjectile.html", ["homing", "projectile"], "AHomingProjectile");
addToContainers_function("BeginPlay", "", "Docs/Classes/AHomingProjectile/Functions/BeginPlay.html", ["begin", "play"], "AHomingProjectile");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/AHomingProjectile/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "AHomingProjectile");
addToContainers_function("AddToPool", "Call right before adding to object pool", "Docs/Classes/AHomingProjectile/Functions/AddToPool.html", ["add", "to", "pool"], "AHomingProjectile");
addToContainers_function("SetupCollisionChannels", "", "Docs/Classes/AHomingProjectile/Functions/SetupCollisionChannels.html", ["setup", "collision", "channels"], "AHomingProjectile");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AHomingProjectile/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AHomingProjectile");
addToContainers_function("SetupAccelerationCurve", "", "Docs/Classes/AHomingProjectile/Functions/SetupAccelerationCurve.html", ["setup", "acceleration", "curve"], "AHomingProjectile");
addToContainers_function("DoNothing", "Function to call with timer handle. Timer handle needs to run for movement component to get correct acceleration", "Docs/Classes/AHomingProjectile/Functions/DoNothing.html", ["do", "nothing"], "AHomingProjectile");
addToContainers_function("Delay)", "Call function with no return after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/AHomingProjectile/Functions/Delay).html", [], "AHomingProjectile");
addToContainers_function("FireAtTarget", "", "Docs/Classes/AHomingProjectile/Functions/FireAtTarget.html", ["fire", "at", "target"], "AHomingProjectile");
addToContainers_function("OnHit", "", "Docs/Classes/AHomingProjectile/Functions/OnHit.html", ["on", "hit"], "AHomingProjectile");
addToContainers_function("GetTarget", "~ Getters and setters ", "Docs/Classes/AHomingProjectile/Functions/GetTarget.html", ["get", "target"], "AHomingProjectile");
addToContainers_function("GetLifetimeTimerHandle", "", "Docs/Classes/AHomingProjectile/Functions/GetLifetimeTimerHandle.html", ["get", "lifetime", "timer", "handle"], "AHomingProjectile");
addToContainers_function("GetInitialSpeed", "", "Docs/Classes/AHomingProjectile/Functions/GetInitialSpeed.html", ["get", "initial", "speed"], "AHomingProjectile");
addToContainers_function("GetMaxSpeed", "", "Docs/Classes/AHomingProjectile/Functions/GetMaxSpeed.html", ["get", "max", "speed"], "AHomingProjectile");
addToContainers_function("GetAccelerationCurve", "", "Docs/Classes/AHomingProjectile/Functions/GetAccelerationCurve.html", ["get", "acceleration", "curve"], "AHomingProjectile");
addToContainers_function("CanOnlyHitTarget", "", "Docs/Classes/AHomingProjectile/Functions/CanOnlyHitTarget.html", ["can", "only", "hit", "target"], "AHomingProjectile");
addToContainers_function("GetSphere", "", "Docs/Classes/AHomingProjectile/Functions/GetSphere.html", ["get", "sphere"], "AHomingProjectile");
addToContainers_function("RegistersHitOnTimeout", "", "Docs/Classes/AHomingProjectile/Functions/RegistersHitOnTimeout.html", ["registers", "hit", "on", "timeout"], "AHomingProjectile");
addToContainers_function("CanHitDefeatedTargets", "", "Docs/Classes/AHomingProjectile/Functions/CanHitDefeatedTargets.html", ["can", "hit", "defeated", "targets"], "AHomingProjectile");
addToContainers_function("OnTargetNoLongerValid", "To be called by movement component when target is no longer valid", "Docs/Classes/AHomingProjectile/Functions/OnTargetNoLongerValid.html", ["on", "target", "no", "longer", "valid"], "AHomingProjectile");
addToContainers_function("IsFitForEnteringObjectPool", "", "Docs/Classes/AHomingProjectile/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "AHomingProjectile");
addToContainers_variable("", "Movement comp. Some values on this are overridden by properties in this class", "Docs/Classes/AHomingProjectile/Variables/.html", [], "AHomingProjectile");
addToContainers_variable("", "If target falls to zero health should this projectile keep going or just disappear. If true AoE radius needs to be greater than 0 for any damage to happen in this case. If false projectile will just disppear the moment target reaches zero health. Targets that become null will have their last known location hit if this is true", "Docs/Classes/AHomingProjectile/Variables/_1.html", [], "AHomingProjectile");
addToContainers_variable("", "In regards to selectables, will this projectile ignore every other selectable and only collide with target? This overrides bCanHitEnemies and bCanHitFriendlies. bCanHitWorld still has an effect", "Docs/Classes/AHomingProjectile/Variables/_2.html", [], "AHomingProjectile");
addToContainers_variable("", "Initial speed", "Docs/Classes/AHomingProjectile/Variables/_3.html", [], "AHomingProjectile");
addToContainers_variable("", "Max speed if using an acceleration curve. 0 = no limit. Max speed can also kind of be derived from the acceleration curve", "Docs/Classes/AHomingProjectile/Variables/_4.html", [], "AHomingProjectile");
addToContainers_variable("", "Curve for acceleration to apply each frame. If no curve is specified no acceleration will be applied and projectile will be at a constant speed. X axis = time Y axis = (Value + 1) * CurrentSpeed Probably wanna use really small Y axis values in the range of like 0 to 0.01", "Docs/Classes/AHomingProjectile/Variables/_5.html", [], "AHomingProjectile");
addToContainers_class("AInstantHitProjectile", "A projectile without a mesh that will cause damage the moment it is fired. Currently best projectile to use for melee type attacks.", "Docs/Classes/AInstantHitProjectile/AInstantHitProjectile.html", ["instant", "hit", "projectile"], "");
addToContainers_function("AInstantHitProjectile", "", "Docs/Classes/AInstantHitProjectile/Functions/AInstantHitProjectile.html", ["instant", "hit", "projectile"], "AInstantHitProjectile");
addToContainers_function("GetTraceDistance", "", "Docs/Classes/AInstantHitProjectile/Functions/GetTraceDistance.html", ["get", "trace", "distance"], "AInstantHitProjectile");
addToContainers_function("SetTrailParticlesBeamData", "Set the source and target points for TrailParticles", "Docs/Classes/AInstantHitProjectile/Functions/SetTrailParticlesBeamData.html", ["set", "trail", "particles", "beam", "data"], "AInstantHitProjectile");
addToContainers_function("FireAtTarget", "", "Docs/Classes/AInstantHitProjectile/Functions/FireAtTarget.html", ["fire", "at", "target"], "AInstantHitProjectile");
addToContainers_function("FireAtLocation", "", "Docs/Classes/AInstantHitProjectile/Functions/FireAtLocation.html", ["fire", "at", "location"], "AInstantHitProjectile");
addToContainers_function("FireInDirection", "", "Docs/Classes/AInstantHitProjectile/Functions/FireInDirection.html", ["fire", "in", "direction"], "AInstantHitProjectile");
addToContainers_function("GetFogLocations", "", "Docs/Classes/AInstantHitProjectile/Functions/GetFogLocations.html", ["get", "fog", "locations"], "AInstantHitProjectile");
addToContainers_variable("HitResult", "Hit result for passing into AProjectileBase::OnHit(). Declared here to avoid recreating every time fired", "Docs/Classes/AInstantHitProjectile/Variables/HitResult.html", ["hit", "result"], "AInstantHitProjectile");
addToContainers_variable("StartLocation", "Location projectile was fired from. Cached for fog calculations", "Docs/Classes/AInstantHitProjectile/Variables/StartLocation.html", ["start", "location"], "AInstantHitProjectile");
addToContainers_variable("EndLocation", "Location of target when projectile was fired. Cached for fog calculations", "Docs/Classes/AInstantHitProjectile/Variables/EndLocation.html", ["end", "location"], "AInstantHitProjectile");
addToContainers_class("ALeaveThenComeBackProjectile", "A projectile that travels for a while, disappears, then reappears at another location. e.g. - SCII zerg ravager\'s ability - terran nukes Uses a projectile movement component that allows defining the exact position of the projectile. The movement component has two modes: - straight firing mode, which would be something you could use for the zerg ravager ability. - precise mode, where you define the exact location/rotation of the projectile at all times in its flight using curves (if using this mode make sure to specify the curves you want to use on the movement component). FIXME: Think of a different name maybe My notes: quite a bit of unused data on this if choosing MovementMode == CurveAssets.", "Docs/Classes/ALeaveThenComeBackProjectile/ALeaveThenComeBackProjectile.html", ["leave", "then", "come", "back", "projectile"], "");
addToContainers_function("ALeaveThenComeBackProjectile", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/ALeaveThenComeBackProjectile.html", ["leave", "then", "come", "back", "projectile"], "ALeaveThenComeBackProjectile");
addToContainers_function("BeginPlay", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/BeginPlay.html", ["begin", "play"], "ALeaveThenComeBackProjectile");
addToContainers_function("FireAtLocation", "~ Begin AProjectileBase interface", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/FireAtLocation.html", ["fire", "at", "location"], "ALeaveThenComeBackProjectile");
addToContainers_function("SetupCollisionChannels", "~ Begin ACollidingProjectileBase interface", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/SetupCollisionChannels.html", ["setup", "collision", "channels"], "ALeaveThenComeBackProjectile");
addToContainers_function("GetStartingRotation", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/GetStartingRotation.html", ["get", "starting", "rotation"], "ALeaveThenComeBackProjectile");
addToContainers_function("GetInitialVelocity", "Get the velocity the projectile should start its ascent at in local space @param StartLocation - world location the projectile was fired from @param TargetLocation - world location the projectile is being fired at", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/GetInitialVelocity.html", ["get", "initial", "velocity"], "ALeaveThenComeBackProjectile");
addToContainers_function("GetDescentStartRotation", "Get the rotation the projectile should have at the start of its descent @param StartLocation - world location the projectile was fired from @param TargetLocation - world location the projectile is being fired at", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/GetDescentStartRotation.html", ["get", "descent", "start", "rotation"], "ALeaveThenComeBackProjectile");
addToContainers_function("GetDescentStartLocation", "Get the world location the projectile should start its descent at @param StartLocation - world location the projectile was fired from @param TargetLocation - world location the projectile is being fired at", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/GetDescentStartLocation.html", ["get", "descent", "start", "location"], "ALeaveThenComeBackProjectile");
addToContainers_function("OnAscentCompleted", "Called when the ascent portion has completed", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/OnAscentCompleted.html", ["on", "ascent", "completed"], "ALeaveThenComeBackProjectile");
addToContainers_function("SetProjectileVisibility", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/SetProjectileVisibility.html", ["set", "projectile", "visibility"], "ALeaveThenComeBackProjectile");
addToContainers_function("BeginDescent", "Start the descent portion", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/BeginDescent.html", ["begin", "descent"], "ALeaveThenComeBackProjectile");
addToContainers_function("SetupCollisionForDescent", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/SetupCollisionForDescent.html", ["setup", "collision", "for", "descent"], "ALeaveThenComeBackProjectile");
addToContainers_function("OnProjectileStop", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/OnProjectileStop.html", ["on", "projectile", "stop"], "ALeaveThenComeBackProjectile");
addToContainers_function("OnProjectileStopFromMovementComp", "~ Begin AProjectileBase interface", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/OnProjectileStopFromMovementComp.html", ["on", "projectile", "stop", "from", "movement", "comp"], "ALeaveThenComeBackProjectile");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "ALeaveThenComeBackProjectile");
addToContainers_function("AddToPool", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/AddToPool.html", ["add", "to", "pool"], "ALeaveThenComeBackProjectile");
addToContainers_function("IsFitForEnteringObjectPool", "~ End AProjectileBase interface", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "ALeaveThenComeBackProjectile");
addToContainers_function("Delay)", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/Delay).html", [], "ALeaveThenComeBackProjectile");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/ALeaveThenComeBackProjectile/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Movement component", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("DescentStartingRotation", "These will go unused if MovementMode == CurveAssets", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/DescentStartingRotation.html", ["descent", "starting", "rotation"], "ALeaveThenComeBackProjectile");
addToContainers_variable("DescentStartingLocation", "", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/DescentStartingLocation.html", ["descent", "starting", "location"], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "How long the projectile\'s ascent lasts", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_1.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "The time between when the projectile finishes its ascent and when it reappear to do its descent.", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_2.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "If choosing CurveAssets make sure to set the curves on the movement component", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_3.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "How fast projectile moves when ascending", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_4.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Angle to use for ascent. Yaw/Roll are relative to looking towards the target location and pitch is always whatever you set here (unnecessary piece of info). 90 pitch = fires straight into the air. Note to self: large angles may cause projectile to be outside of fog area", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_5.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Height to spawn projectile at for descent. No matter DescentRelativeAngle\'s values the descent always starts this high above the target location.", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_6.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "How fast to move for descent", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_7.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "Angle of projectile to use for decent. This is relative to looking towards the target location (unnecessary piece of info). -90 on pitch = straight down Whatever angle you choose the projectile will always be aimed at (and hit if nothing else gets in the way) the target location. Note to self: large angles may cause projectile to be outside of fog area", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_8.html", [], "ALeaveThenComeBackProjectile");
addToContainers_variable("", "-----------------------------------------------------------------------------------------", "Docs/Classes/ALeaveThenComeBackProjectile/Variables/_9.html", [], "ALeaveThenComeBackProjectile");
addToContainers_class("ANoCollisionTimedProjectile", "A projectile with no collision that is not replicated. This kind of projectile is similar to quad cannons in C&C generals, but can optionally be set to deal damage after a delay instead of instantly. Hits always register at target location. These projectiles can be arcing. They can also pseudo collide by just checking if they are close enough to their target. The movement component has a few extra variables on it that you might want to look at if this is an arcing projectile.", "Docs/Classes/ANoCollisionTimedProjectile/ANoCollisionTimedProjectile.html", ["no", "collision", "timed", "projectile"], "");
addToContainers_function("ANoCollisionTimedProjectile", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/ANoCollisionTimedProjectile.html", ["no", "collision", "timed", "projectile"], "ANoCollisionTimedProjectile");
addToContainers_function("SetupForEnteringObjectPool", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "ANoCollisionTimedProjectile");
addToContainers_function("AddToPool", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/AddToPool.html", ["add", "to", "pool"], "ANoCollisionTimedProjectile");
addToContainers_function("CalculateLifetime", "Return how long before considering target hit @param Distance - distance from firer to target", "Docs/Classes/ANoCollisionTimedProjectile/Functions/CalculateLifetime.html", ["calculate", "lifetime"], "ANoCollisionTimedProjectile");
addToContainers_function("OnFireAtTargetComplete", "Do OnMeshReachedTarget and OnHitTarget", "Docs/Classes/ANoCollisionTimedProjectile/Functions/OnFireAtTargetComplete.html", ["on", "fire", "at", "target", "complete"], "ANoCollisionTimedProjectile");
addToContainers_function("RegisterHitOnTarget", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/RegisterHitOnTarget.html", ["register", "hit", "on", "target"], "ANoCollisionTimedProjectile");
addToContainers_function("OnFireAtLocationComplete", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/OnFireAtLocationComplete.html", ["on", "fire", "at", "location", "complete"], "ANoCollisionTimedProjectile");
addToContainers_function("RegisterHitAtTargetLocation", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/RegisterHitAtTargetLocation.html", ["register", "hit", "at", "target", "location"], "ANoCollisionTimedProjectile");
addToContainers_function("OnMeshReachedTarget", "When to hide the mesh", "Docs/Classes/ANoCollisionTimedProjectile/Functions/OnMeshReachedTarget.html", ["on", "mesh", "reached", "target"], "ANoCollisionTimedProjectile");
addToContainers_function("OnHitTarget", "When to register hit on target", "Docs/Classes/ANoCollisionTimedProjectile/Functions/OnHitTarget.html", ["on", "hit", "target"], "ANoCollisionTimedProjectile");
addToContainers_function("OnMeshReachedTargetLocation", "Called when projectile is fired at a location and the mesh reaches it", "Docs/Classes/ANoCollisionTimedProjectile/Functions/OnMeshReachedTargetLocation.html", ["on", "mesh", "reached", "target", "location"], "ANoCollisionTimedProjectile");
addToContainers_function("OnHitTargetLocation", "Called when projectile is fired at a location and should now register a hit", "Docs/Classes/ANoCollisionTimedProjectile/Functions/OnHitTargetLocation.html", ["on", "hit", "target", "location"], "ANoCollisionTimedProjectile");
addToContainers_function("MakeInactive", "Hide mesh, stop movement", "Docs/Classes/ANoCollisionTimedProjectile/Functions/MakeInactive.html", ["make", "inactive"], "ANoCollisionTimedProjectile");
addToContainers_function("HideTrails", "Hide trail particles", "Docs/Classes/ANoCollisionTimedProjectile/Functions/HideTrails.html", ["hide", "trails"], "ANoCollisionTimedProjectile");
addToContainers_function("Delay)", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/Delay).html", [], "ANoCollisionTimedProjectile");
addToContainers_function("FireAtTarget", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/FireAtTarget.html", ["fire", "at", "target"], "ANoCollisionTimedProjectile");
addToContainers_function("FireAtLocation", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/FireAtLocation.html", ["fire", "at", "location"], "ANoCollisionTimedProjectile");
addToContainers_function("OnTimedOut", "Called when an arcing projectile fired at a location times out likely because it never got close enough to its target location for it to count as being hit", "Docs/Classes/ANoCollisionTimedProjectile/Functions/OnTimedOut.html", ["on", "timed", "out"], "ANoCollisionTimedProjectile");
addToContainers_function("IsFitForEnteringObjectPool", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "ANoCollisionTimedProjectile");
addToContainers_function("AreAllTimerHandlesCleared", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/AreAllTimerHandlesCleared.html", ["are", "all", "timer", "handles", "cleared"], "ANoCollisionTimedProjectile");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "ANoCollisionTimedProjectile");
addToContainers_function("RunPostEditLogic", "", "Docs/Classes/ANoCollisionTimedProjectile/Functions/RunPostEditLogic.html", ["run", "post", "edit", "logic"], "ANoCollisionTimedProjectile");
addToContainers_variable("", "Mesh", "Docs/Classes/ANoCollisionTimedProjectile/Variables/.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "Movement component", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_1.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "A workaround if projectile appears to be disappearing before/after reaching target. If projectiles appear to be disappearing too far before/after target then adjust this. Lower values imply hit happens sooner", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_2.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "Decides how fast a hit is triggered. Only modify this if you want projectiles to deal hits before/after the actual mesh reaches its target, for example like quad cannons in C&C generals. 0 = hit is dealt the moment projectile is fired 0.5 = hit is dealt after projectile travels half the distance between it and the target 1 = hit is dealt when projectile considers itself as reached target 1+ = hit is dealt sometime after projectile considers itself as reached target", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_3.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "If this is greater than 0 then when the projectile reaches its target or target location it will not disappear but will stay there. Then after this delay is will register a hit. This will be ignored if HitSpeedModifier != 1.f I added this so artillery beacons can stay at where they are thrown for a little until disappearing.", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_4.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("", "If projectile is fired and target falls to zero health before hit is registered should this still register a hit i.e. for visuals and AoE damage purposes. If false then projectile still travels full distance but then just disappears", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_5.html", [], "ANoCollisionTimedProjectile");
addToContainers_variable("TimerHandle_Hit", "Timer handle for when to register hit on target", "Docs/Classes/ANoCollisionTimedProjectile/Variables/TimerHandle_Hit.html", ["timer", "handle_", "hit"], "ANoCollisionTimedProjectile");
addToContainers_variable("HitResult", "Hit result for passing into AProjectileBase::OnHit(). Declared here to avoid recreating every time fired", "Docs/Classes/ANoCollisionTimedProjectile/Variables/HitResult.html", ["hit", "result"], "ANoCollisionTimedProjectile");
addToContainers_variable("", "", "Docs/Classes/ANoCollisionTimedProjectile/Variables/_6.html", [], "ANoCollisionTimedProjectile");
addToContainers_struct("FParticleAudioPair", "A particle system and a sound", "Docs/Structs/FParticleAudioPair/FParticleAudioPair.html", ["particle", "audio", "pair"], "");
addToContainers_function("FParticleAudioPair", "", "Docs/Structs/FParticleAudioPair/Functions/FParticleAudioPair.html", ["particle", "audio", "pair"], "FParticleAudioPair");
addToContainers_function("GetImpactParticles", "", "Docs/Structs/FParticleAudioPair/Functions/GetImpactParticles.html", ["get", "impact", "particles"], "FParticleAudioPair");
addToContainers_function("GetImpactSound", "", "Docs/Structs/FParticleAudioPair/Functions/GetImpactSound.html", ["get", "impact", "sound"], "FParticleAudioPair");
addToContainers_variable("", "-----------------------------------------------------------", "Docs/Structs/FParticleAudioPair/Variables/.html", [], "FParticleAudioPair");
addToContainers_variable("", "", "Docs/Structs/FParticleAudioPair/Variables/_1.html", [], "FParticleAudioPair");
addToContainers_class("AProjectileBase", "Base class for all projectiles. FIXME Some things to do: - For performance: AddToPool is sometimes called more than once before adding projectile to pool - first call is with some of the params false, then called again later with some params true. Therefore it repeats the mesh hiding, tick disabling etc logic which is ineffecient. I have created a new function SetupForEnteringObjectPool() to try and help with this but it isn\'t called anywhere yet, so just baby steps towards fixing it.", "Docs/Classes/AProjectileBase/AProjectileBase.html", ["projectile", "base"], "");
addToContainers_function("AProjectileBase", "", "Docs/Classes/AProjectileBase/Functions/AProjectileBase.html", ["projectile", "base"], "AProjectileBase");
addToContainers_function("BeginPlay", "", "Docs/Classes/AProjectileBase/Functions/BeginPlay.html", ["begin", "play"], "AProjectileBase");
addToContainers_function("FellOutOfWorld", "Overridden to prevent projectiles that accidently get shot below world KillZ to be destroyed. Instead they get added back to the object pool and a message is logged", "Docs/Classes/AProjectileBase/Functions/FellOutOfWorld.html", ["fell", "out", "of", "world"], "AProjectileBase");
addToContainers_function("SetupForEnteringObjectPool", "Hide mesh, disable ticks, etc. Note: I do not call this anyway yet. It has been added to transition from AddToPool being called 2+ times", "Docs/Classes/AProjectileBase/Functions/SetupForEnteringObjectPool.html", ["setup", "for", "entering", "object", "pool"], "AProjectileBase");
addToContainers_function("AddToPool", "Call right before adding to object pool @param bSetupForPool - whether to put the projectile into a state that makes it ready for the object pool. Set to false if you have already done this. @param bActuallyAddToPool - for begin play these can\'t actually go in the pool but should call their AddToPool to put them in a state ready for the pool. @param bDisableTrailParticles - disable trail particles", "Docs/Classes/AProjectileBase/Functions/AddToPool.html", ["add", "to", "pool"], "AProjectileBase");
addToContainers_function("DisableTrailParticles", "Disable trail particles and optionally add to pool @param AddToPool - just add to object pool", "Docs/Classes/AProjectileBase/Functions/DisableTrailParticles.html", ["disable", "trail", "particles"], "AProjectileBase");
addToContainers_function("DisableTrailsAndTryAddToPool", "Call DisableTrailParticles then add to object pool", "Docs/Classes/AProjectileBase/Functions/DisableTrailsAndTryAddToPool.html", ["disable", "trails", "and", "try", "add", "to", "pool"], "AProjectileBase");
addToContainers_function("GetTargetsWithinRadius", "Gets all selectables this can damage within AoERadius (measured from param Location to bounds of other selectables in 2D - no Z axis) and stores them in in hit results in the array HitResults", "Docs/Classes/AProjectileBase/Functions/GetTargetsWithinRadius.html", ["get", "targets", "within", "radius"], "AProjectileBase");
addToContainers_function("OnHit", "Simulate the projectile hitting someone/somewhere. Note the hit result passed into this may not always be an actual hit created by the physics system but should at least have the target and impact point set by the caller", "Docs/Classes/AProjectileBase/Functions/OnHit.html", ["on", "hit"], "AProjectileBase");
addToContainers_function("CallDealDamageAfterDelay", "Call DealDamage after DealDamageDelay amount of time, then try add projectile back to pool", "Docs/Classes/AProjectileBase/Functions/CallDealDamageAfterDelay.html", ["call", "deal", "damage", "after", "delay"], "AProjectileBase");
addToContainers_function("DealDamageAndTryAddToPool", "", "Docs/Classes/AProjectileBase/Functions/DealDamageAndTryAddToPool.html", ["deal", "damage", "and", "try", "add", "to", "pool"], "AProjectileBase");
addToContainers_function("DealDamage", "Deal damage; either AoE damage if AoE radius is > 0 or the actor storred in the hit result @param Hit - hit result. Function will use ImpactPoint and Actor from hit result to determine damage", "Docs/Classes/AProjectileBase/Functions/DealDamage.html", ["deal", "damage"], "AProjectileBase");
addToContainers_function("GetDamageDistanceMultiplier", "Return how much damage should be multiplied by because of distance from impact (if projectile has an area of effect)", "Docs/Classes/AProjectileBase/Functions/GetDamageDistanceMultiplier.html", ["get", "damage", "distance", "multiplier"], "AProjectileBase");
addToContainers_function("GetImpactParticles", "Get the particle system to show when the projectile hits something", "Docs/Classes/AProjectileBase/Functions/GetImpactParticles.html", ["get", "impact", "particles"], "AProjectileBase");
addToContainers_function("GetImpactSound", "Get the impact sound to play when the projectile hits something. @param Hit - hit result for where the projectile is considered to have stopped at", "Docs/Classes/AProjectileBase/Functions/GetImpactSound.html", ["get", "impact", "sound"], "AProjectileBase");
addToContainers_function("SetupAoECollisionChannels", "", "Docs/Classes/AProjectileBase/Functions/SetupAoECollisionChannels.html", ["setup", "ao", "e", "collision", "channels"], "AProjectileBase");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AProjectileBase/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AProjectileBase");
addToContainers_function("SetupCurveValues", "", "Docs/Classes/AProjectileBase/Functions/SetupCurveValues.html", ["setup", "curve", "values"], "AProjectileBase");
addToContainers_function("Delay)", "", "Docs/Classes/AProjectileBase/Functions/Delay).html", [], "AProjectileBase");
addToContainers_function("GetImpactDamage", "", "Docs/Classes/AProjectileBase/Functions/GetImpactDamage.html", ["get", "impact", "damage"], "AProjectileBase");
addToContainers_function("GetImpactDamageType", "", "Docs/Classes/AProjectileBase/Functions/GetImpactDamageType.html", ["get", "impact", "damage", "type"], "AProjectileBase");
addToContainers_function("GetImpactRandomDamageFactor", "", "Docs/Classes/AProjectileBase/Functions/GetImpactRandomDamageFactor.html", ["get", "impact", "random", "damage", "factor"], "AProjectileBase");
addToContainers_function("GetAoEDamage", "", "Docs/Classes/AProjectileBase/Functions/GetAoEDamage.html", ["get", "ao", "e", "damage"], "AProjectileBase");
addToContainers_function("GetAoEDamageType", "", "Docs/Classes/AProjectileBase/Functions/GetAoEDamageType.html", ["get", "ao", "e", "damage", "type"], "AProjectileBase");
addToContainers_function("GetAoERandomDamageFactor", "", "Docs/Classes/AProjectileBase/Functions/GetAoERandomDamageFactor.html", ["get", "ao", "e", "random", "damage", "factor"], "AProjectileBase");
addToContainers_function("SetProjectileBP", "", "Docs/Classes/AProjectileBase/Functions/SetProjectileBP.html", ["set", "projectile", "b", "p"], "AProjectileBase");
addToContainers_function("SetPoolingManager", "", "Docs/Classes/AProjectileBase/Functions/SetPoolingManager.html", ["set", "pooling", "manager"], "AProjectileBase");
addToContainers_function("FireAtTarget", "Function for when a unit wants to fire. Must be overridden. @param Firer - the selectable that fired this projectile. To know who dealt damage @param AttackAttributes - attributes of the selectable firing this projectile to know how to deal damage @param AttackRange - range of attacker. Not the distance from X to Y or anything, just the attack range of the firer. 0 or less means infinite range @param Team - team selectable is on to know who to damage @param MuzzleLoc - location of muzzle of selectable firing projectile @param ProjectileTarget - who this projectile is intended for", "Docs/Classes/AProjectileBase/Functions/FireAtTarget.html", ["fire", "at", "target"], "AProjectileBase");
addToContainers_function("FireAtLocation", "Fires projectile at a location @param Firer - actor counted as firing projectile for damage response purposes @param AttackAttributes - attack attributes of firer @param Team - team of firer", "Docs/Classes/AProjectileBase/Functions/FireAtLocation.html", ["fire", "at", "location"], "AProjectileBase");
addToContainers_function("FireInDirection", "Have recently added this. Classes should override it and implement it. I have not implemented it in any child classes yet. Fires the projectile in a direction. Note that I have a function in AObjectPoolingManager that is something like Server/Client_FireProjectileInDirection. I don\'t actually call this func from it. Instead I call FireAtLocation. So perhaps want to eventually change that", "Docs/Classes/AProjectileBase/Functions/FireInDirection.html", ["fire", "in", "direction"], "AProjectileBase");
addToContainers_function("GetFogLocations", "Get the location of the projectile for fog of war. Depending on how big the projectile is or its type there may be more than one location", "Docs/Classes/AProjectileBase/Functions/GetFogLocations.html", ["get", "fog", "locations"], "AProjectileBase");
addToContainers_function("OnProjectileStopFromMovementComp", "Most projectiles hook into UProjectileMovementComponent::OnProjectileStop to handle \'hit\' logic. Alternatively the move comp can call this function instead. Some projectiles may not implement this", "Docs/Classes/AProjectileBase/Functions/OnProjectileStopFromMovementComp.html", ["on", "projectile", "stop", "from", "movement", "comp"], "AProjectileBase");
addToContainers_function("IsFitForEnteringObjectPool", "Returns true if the projectile is in the state it should be in for sitting in the object pool e.g. mesh is hidden, tick is turned off, whatever", "Docs/Classes/AProjectileBase/Functions/IsFitForEnteringObjectPool.html", ["is", "fit", "for", "entering", "object", "pool"], "AProjectileBase");
addToContainers_function("AreAllTimerHandlesCleared", "Return true if all timer handles have been cleared with timer manager", "Docs/Classes/AProjectileBase/Functions/AreAllTimerHandlesCleared.html", ["are", "all", "timer", "handles", "cleared"], "AProjectileBase");
addToContainers_variable("NUM_FOG_LOCATIONS", "Number of inline array elements for fog locations arrays. Saves on performance. Increase this to adjust performance", "Docs/Classes/AProjectileBase/Variables/NUM_FOG_LOCATIONS.html", ["u", "m_", "f", "o", "g_", "l", "o", "c", "a", "t", "i", "o", "n", "s"], "AProjectileBase");
addToContainers_variable("", "Trail particles", "Docs/Classes/AProjectileBase/Variables/.html", [], "AProjectileBase");
addToContainers_variable("", "Hit results from capsule sweep against viable collision channels", "Docs/Classes/AProjectileBase/Variables/_1.html", [], "AProjectileBase");
addToContainers_variable("", "Base damage to deal to what the projectile impacts. Overridable by firer", "Docs/Classes/AProjectileBase/Variables/_2.html", [], "AProjectileBase");
addToContainers_variable("", "Type of damage this projectile deals ot what it impacts. Overridable by firer", "Docs/Classes/AProjectileBase/Variables/_3.html", [], "AProjectileBase");
addToContainers_variable("", "Amount of randomness to impact damage. Overridable by firer. OutgoingDamage = Damage * RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Classes/AProjectileBase/Variables/_4.html", [], "AProjectileBase");
addToContainers_variable("", "Base amount of AoE damage this projectile deals", "Docs/Classes/AProjectileBase/Variables/_5.html", [], "AProjectileBase");
addToContainers_variable("", "Damage type for AoE damage", "Docs/Classes/AProjectileBase/Variables/_6.html", [], "AProjectileBase");
addToContainers_variable("", "Amount of randomness to apply to AoE damage", "Docs/Classes/AProjectileBase/Variables/_7.html", [], "AProjectileBase");
addToContainers_variable("", "Particles and audio to play when projectile hits a surface. The entry for the key \'Default\' will be used if the projectile hits a surface without a physical material", "Docs/Classes/AProjectileBase/Variables/_8.html", [], "AProjectileBase");
addToContainers_variable("", "The contents of ImpactEffectsTMap that gets populated in post edit. Here for performance", "Docs/Classes/AProjectileBase/Variables/_9.html", [], "AProjectileBase");
addToContainers_variable("", "Delay between when a hit happens and when damage is dealt. Usually you want this as 0 but things like nukes may want small delays.", "Docs/Classes/AProjectileBase/Variables/_10.html", [], "AProjectileBase");
addToContainers_variable("", "TRAIL particles: duration to allow trail particles to appear after hit. If 0 then trail particles will disappear the moment hit is registered", "Docs/Classes/AProjectileBase/Variables/_11.html", [], "AProjectileBase");
addToContainers_variable("", "Camera shake to play at projectile impact point. Optional", "Docs/Classes/AProjectileBase/Variables/_12.html", [], "AProjectileBase");
addToContainers_variable("", "Radius of ImpactCameraShake", "Docs/Classes/AProjectileBase/Variables/_13.html", [], "AProjectileBase");
addToContainers_variable("", "Falloff of ImpactCameraShake", "Docs/Classes/AProjectileBase/Variables/_14.html", [], "AProjectileBase");
addToContainers_variable("ListeningForOnHit", "An ability that wants to know when the projectile hits something", "Docs/Classes/AProjectileBase/Variables/ListeningForOnHit.html", ["listening", "for", "on", "hit"], "AProjectileBase");
addToContainers_variable("ListeningForOnHitData", "The unique ID for ListeningForOnHit", "Docs/Classes/AProjectileBase/Variables/ListeningForOnHitData.html", ["listening", "for", "on", "hit", "data"], "AProjectileBase");
addToContainers_variable("", "Reference to selectable that fired this projectile", "Docs/Classes/AProjectileBase/Variables/_15.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to target this projectile is aimed at", "Docs/Classes/AProjectileBase/Variables/_16.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to player controller to play camera shakes", "Docs/Classes/AProjectileBase/Variables/_17.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to game state", "Docs/Classes/AProjectileBase/Variables/_18.html", [], "AProjectileBase");
addToContainers_variable("", "Reference to object pooling manager", "Docs/Classes/AProjectileBase/Variables/_19.html", [], "AProjectileBase");
addToContainers_variable("", "BP to to use as TMap key to know what pool to add self back to when complete", "Docs/Classes/AProjectileBase/Variables/_20.html", [], "AProjectileBase");
addToContainers_variable("TimerManager", "World timer manager", "Docs/Classes/AProjectileBase/Variables/TimerManager.html", ["timer", "manager"], "AProjectileBase");
addToContainers_variable("TimerHandle_Lifetime", "Timer handle for checking how long before we decide projectile will never register a hit so just psuedo destroy it and add it back to pool", "Docs/Classes/AProjectileBase/Variables/TimerHandle_Lifetime.html", ["timer", "handle_", "lifetime"], "AProjectileBase");
addToContainers_variable("TimerHandle_DealDamage", "Timer handle for calling DealDamage", "Docs/Classes/AProjectileBase/Variables/TimerHandle_DealDamage.html", ["timer", "handle_", "deal", "damage"], "AProjectileBase");
addToContainers_variable("TimerHandle_TrailParticles", "Timer handle for duration of trail particles after a hit. Here so trail particles don\'t disappear the moment proejectile hits", "Docs/Classes/AProjectileBase/Variables/TimerHandle_TrailParticles.html", ["timer", "handle_", "trail", "particles"], "AProjectileBase");
addToContainers_variable("", "All actors that have a component overlapping inside this radius will be damaged. 0 = only damage impact target", "Docs/Classes/AProjectileBase/Variables/_21.html", [], "AProjectileBase");
addToContainers_variable("", "Curve to use for the damage falloff of the AoE. If no curve is set then no falloff will happen. X axis = distance from impact point to target Y axis = percentage of damage that will be dealt. Therefore a decreasing curve makes sense (implies as range increases damage decreases) Some notes: This is automatically normalized to whatever range you use. i.e. the values of the axis do not matter, what matters is the overall shape of the curve. For clarity though you may want to have the Y axis in the range [0, 1] and the X axis in the range [0, AoERadius]. A single straight line is currently not supported. If you want to do full damage no matter the range you would need to do a horizontal line and after that have a line that drops very sharply", "Docs/Classes/AProjectileBase/Variables/_22.html", [], "AProjectileBase");
addToContainers_variable("OwningTeam", "Team projectile belongs to. Can change because object pooling", "Docs/Classes/AProjectileBase/Variables/OwningTeam.html", ["owning", "team"], "AProjectileBase");
addToContainers_variable("", "Can the AoE hit/damage enemies?", "Docs/Classes/AProjectileBase/Variables/_23.html", [], "AProjectileBase");
addToContainers_variable("", "Can the AoE hit/damage selectables on our team?", "Docs/Classes/AProjectileBase/Variables/_24.html", [], "AProjectileBase");
addToContainers_variable("", "Whether FCollisionQueryParams::bReturnPhysicalMateral should be set to true for hit results. Could just set it to true always but I feel that perhaps it\'s a little performance intensive to get the physical material for a hit result so hence this variable exists", "Docs/Classes/AProjectileBase/Variables/_25.html", [], "AProjectileBase");
addToContainers_variable("AoEObjectQueryParams", "Holds what object types to check for when checking what is hit by AoE", "Docs/Classes/AProjectileBase/Variables/AoEObjectQueryParams.html", ["ao", "e", "object", "query", "params"], "AProjectileBase");
addToContainers_variable("DamageCurveMaxY", "DamageFalloffCurve values", "Docs/Classes/AProjectileBase/Variables/DamageCurveMaxY.html", ["damage", "curve", "max", "y"], "AProjectileBase");
addToContainers_variable("", "", "Docs/Classes/AProjectileBase/Variables/_26.html", [], "AProjectileBase");
addToContainers_variable("", "", "Docs/Classes/AProjectileBase/Variables/_27.html", [], "AProjectileBase");
addToContainers_class("UHomingProjectileMovement", "Movement component for homing projectiles that never miss their target. Very basic. Just always make updated component face target", "Docs/Classes/UHomingProjectileMovement/UHomingProjectileMovement.html", ["homing", "projectile", "movement"], "");
addToContainers_function("UHomingProjectileMovement", "", "Docs/Classes/UHomingProjectileMovement/Functions/UHomingProjectileMovement.html", ["homing", "projectile", "movement"], "UHomingProjectileMovement");
addToContainers_function("TickComponent", "", "Docs/Classes/UHomingProjectileMovement/Functions/TickComponent.html", ["tick", "component"], "UHomingProjectileMovement");
addToContainers_function("ComputeMoveDelta", "ProjectileMovementComponent.h: \"Compute the distance we should move in the given time, at a given a velocity\"", "Docs/Classes/UHomingProjectileMovement/Functions/ComputeMoveDelta.html", ["compute", "move", "delta"], "UHomingProjectileMovement");
addToContainers_function("ComputeVelocity", "", "Docs/Classes/UHomingProjectileMovement/Functions/ComputeVelocity.html", ["compute", "velocity"], "UHomingProjectileMovement");
addToContainers_function("ClampVelocity", "", "Docs/Classes/UHomingProjectileMovement/Functions/ClampVelocity.html", ["clamp", "velocity"], "UHomingProjectileMovement");
addToContainers_function("ComputeAccelerationAmount", "", "Docs/Classes/UHomingProjectileMovement/Functions/ComputeAccelerationAmount.html", ["compute", "acceleration", "amount"], "UHomingProjectileMovement");
addToContainers_function("IsCloseEnoughToTarget", "If projectiles bCanOnlyHitTarget is true then this is used for \'collision\' with target. Note takes all 3 axis into account since homing projectiles are likely to be used for surface-to-air/air-to-surface projectiles", "Docs/Classes/UHomingProjectileMovement/Functions/IsCloseEnoughToTarget.html", ["is", "close", "enough", "to", "target"], "UHomingProjectileMovement");
addToContainers_function("KeepTrackingTarget", "Check whether we should keep going or stop", "Docs/Classes/UHomingProjectileMovement/Functions/KeepTrackingTarget.html", ["keep", "tracking", "target"], "UHomingProjectileMovement");
addToContainers_function("GetLockOnLocation", "Return the location to be heading towards", "Docs/Classes/UHomingProjectileMovement/Functions/GetLockOnLocation.html", ["get", "lock", "on", "location"], "UHomingProjectileMovement");
addToContainers_function("SetInitialValues", "", "Docs/Classes/UHomingProjectileMovement/Functions/SetInitialValues.html", ["set", "initial", "values"], "UHomingProjectileMovement");
addToContainers_function("OnOwningProjectileFired", "", "Docs/Classes/UHomingProjectileMovement/Functions/OnOwningProjectileFired.html", ["on", "owning", "projectile", "fired"], "UHomingProjectileMovement");
addToContainers_variable("TimeSpentInFlight", "Time projectile has been in flight", "Docs/Classes/UHomingProjectileMovement/Variables/TimeSpentInFlight.html", ["time", "spent", "in", "flight"], "UHomingProjectileMovement");
addToContainers_variable("LastTargetLocation", "Location target was at last tick", "Docs/Classes/UHomingProjectileMovement/Variables/LastTargetLocation.html", ["last", "target", "location"], "UHomingProjectileMovement");
addToContainers_variable("TargetBoundsRadius", "Radius of targets bounds", "Docs/Classes/UHomingProjectileMovement/Variables/TargetBoundsRadius.html", ["target", "bounds", "radius"], "UHomingProjectileMovement");
addToContainers_variable("InitialSpeed", "~ Variables set by owning projectile ", "Docs/Classes/UHomingProjectileMovement/Variables/InitialSpeed.html", ["initial", "speed"], "UHomingProjectileMovement");
addToContainers_variable("MaxSpeed", "", "Docs/Classes/UHomingProjectileMovement/Variables/MaxSpeed.html", ["max", "speed"], "UHomingProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UHomingProjectileMovement/Variables/.html", [], "UHomingProjectileMovement");
addToContainers_variable("", "Reference to owning projectile", "Docs/Classes/UHomingProjectileMovement/Variables/_1.html", [], "UHomingProjectileMovement");
addToContainers_class("UNoCollisionProjectileMovement", "Projectile movement component for ANoCollisionTimedProjectile.", "Docs/Classes/UNoCollisionProjectileMovement/UNoCollisionProjectileMovement.html", ["no", "collision", "projectile", "movement"], "");
addToContainers_function("UNoCollisionProjectileMovement", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/UNoCollisionProjectileMovement.html", ["no", "collision", "projectile", "movement"], "UNoCollisionProjectileMovement");
addToContainers_function("BeginPlay", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/BeginPlay.html", ["begin", "play"], "UNoCollisionProjectileMovement");
addToContainers_function("TickComponent", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/TickComponent.html", ["tick", "component"], "UNoCollisionProjectileMovement");
addToContainers_function("IsCloseEnoughToTargetLocation", "Return true if the projectile is considered close enough to where its being fired that it considers it has hit it.", "Docs/Classes/UNoCollisionProjectileMovement/Functions/IsCloseEnoughToTargetLocation.html", ["is", "close", "enough", "to", "target", "location"], "UNoCollisionProjectileMovement");
addToContainers_function("GetArcCalculationMethod", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/GetArcCalculationMethod.html", ["get", "arc", "calculation", "method"], "UNoCollisionProjectileMovement");
addToContainers_function("GetProjectileLifetime", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/GetProjectileLifetime.html", ["get", "projectile", "lifetime"], "UNoCollisionProjectileMovement");
addToContainers_function("UseHighArc", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/UseHighArc.html", ["use", "high", "arc"], "UNoCollisionProjectileMovement");
addToContainers_function("GetArcValue", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/GetArcValue.html", ["get", "arc", "value"], "UNoCollisionProjectileMovement");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UNoCollisionProjectileMovement/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UNoCollisionProjectileMovement");
addToContainers_variable("Projectile", "Projectile this move comp belongs to", "Docs/Classes/UNoCollisionProjectileMovement/Variables/Projectile.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("TargetLocation", "The world location the projectile is being fired at but only if this projectile also arcs. If it\'s being fired at an actor then this will likely be set to some invalid value", "Docs/Classes/UNoCollisionProjectileMovement/Variables/TargetLocation.html", ["target", "location"], "UNoCollisionProjectileMovement");
addToContainers_variable("TargetType", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/TargetType.html", ["target", "type"], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "Value that gets passed into UGameplayStatics::SuggestProjectileVelocity", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_1.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "The value that gets passed into UGameplayStatics::SuggestProjectileVelocity_CustomArc. Play around with this to get the arc you want.", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_2.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "Only relevant if the projectile is being fired at a location and has non-zero gravity. How close the projectile has to get to the target location for it to be considered hit it", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_3.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "Only relevant if the projectile is being fired at a location and has non-zero gravity. How long the projectile can exist for before it will magically be added to pool. No hit will be registered. Counted from the time it is fired. If the projectile is constantly missing its target then increase HitDistance", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_4.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_5.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_6.html", [], "UNoCollisionProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UNoCollisionProjectileMovement/Variables/_7.html", [], "UNoCollisionProjectileMovement");
addToContainers_class("UPreciseProjectileMovement", "Has two modes: - \'Regular straight shooting\' mode - \'Control exact location and rotation of projectile by using curve assets\' mode, hence the name of this projectile Probably won\'t support sliding (for performance). Probably won\'t support bouncing (for performance). Perhaps deriving from UActorComponent could be possible.", "Docs/Classes/UPreciseProjectileMovement/UPreciseProjectileMovement.html", ["precise", "projectile", "movement"], "");
addToContainers_function("BeginPlay", "", "Docs/Classes/UPreciseProjectileMovement/Functions/BeginPlay.html", ["begin", "play"], "UPreciseProjectileMovement");
addToContainers_function("TickComponent", "", "Docs/Classes/UPreciseProjectileMovement/Functions/TickComponent.html", ["tick", "component"], "UPreciseProjectileMovement");
addToContainers_function("HasStoppedSimulation", "Just copied UProjectileMovementComponent", "Docs/Classes/UPreciseProjectileMovement/Functions/HasStoppedSimulation.html", ["has", "stopped", "simulation"], "UPreciseProjectileMovement");
addToContainers_function("CheckStillInWorld", "", "Docs/Classes/UPreciseProjectileMovement/Functions/CheckStillInWorld.html", ["check", "still", "in", "world"], "UPreciseProjectileMovement");
addToContainers_function("SetMovementMode", "", "Docs/Classes/UPreciseProjectileMovement/Functions/SetMovementMode.html", ["set", "movement", "mode"], "UPreciseProjectileMovement");
addToContainers_function("OnProjectileFired", "Called by the owning projectile when it is fired", "Docs/Classes/UPreciseProjectileMovement/Functions/OnProjectileFired.html", ["on", "projectile", "fired"], "UPreciseProjectileMovement");
addToContainers_function("CurveMode_OnDescentStart", "", "Docs/Classes/UPreciseProjectileMovement/Functions/CurveMode_OnDescentStart.html", ["curve", "mode_", "on", "descent", "start"], "UPreciseProjectileMovement");
addToContainers_function("SoftSetTickEnabled", "Set whether tick does anything or not", "Docs/Classes/UPreciseProjectileMovement/Functions/SoftSetTickEnabled.html", ["soft", "set", "tick", "enabled"], "UPreciseProjectileMovement");
addToContainers_function("HandleBlockingHit", "", "Docs/Classes/UPreciseProjectileMovement/Functions/HandleBlockingHit.html", ["handle", "blocking", "hit"], "UPreciseProjectileMovement");
addToContainers_function("StopSimulating", "Make sure to tell projectile about this", "Docs/Classes/UPreciseProjectileMovement/Functions/StopSimulating.html", ["stop", "simulating"], "UPreciseProjectileMovement");
addToContainers_function("GetProjectile", "Get the projectile that this component is a prt of", "Docs/Classes/UPreciseProjectileMovement/Functions/GetProjectile.html", ["get", "projectile"], "UPreciseProjectileMovement");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UPreciseProjectileMovement/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UPreciseProjectileMovement");
addToContainers_variable("", "Curve that has the position offsets relative to where the projectile was launched. X axis of curve = time Y axis of curve = offset Positions are relative to the launch location. Then at some point they switch to being relative to the target location. The switch happens at ALeaveThenComeBackProjectile::AscentDuration + AscentDelay into the curve. Tip for creating these curves: Make sure the mesh\'s location relative to the sphere comp is how you want it because when you start changing it then these curves will start to look different. Note to self: think of a way to correct for this. A simple \'offset\' FVector might be enough.", "Docs/Classes/UPreciseProjectileMovement/Variables/.html", [], "UPreciseProjectileMovement");
addToContainers_variable("", "Rotation around axis. X curve = roll Y curve = pitch Z curve = yaw X axis = time Y axis = amount of rotation in degrees, range: [0, 360)", "Docs/Classes/UPreciseProjectileMovement/Variables/_1.html", [], "UPreciseProjectileMovement");
addToContainers_variable("ReferenceLocation", "Location/rotation curves are relative to", "Docs/Classes/UPreciseProjectileMovement/Variables/ReferenceLocation.html", ["reference", "location"], "UPreciseProjectileMovement");
addToContainers_variable("ReferenceRotation", "", "Docs/Classes/UPreciseProjectileMovement/Variables/ReferenceRotation.html", ["reference", "rotation"], "UPreciseProjectileMovement");
addToContainers_variable("TimeSpentAlive", "", "Docs/Classes/UPreciseProjectileMovement/Variables/TimeSpentAlive.html", ["time", "spent", "alive"], "UPreciseProjectileMovement");
addToContainers_variable("", "", "Docs/Classes/UPreciseProjectileMovement/Variables/_2.html", [], "UPreciseProjectileMovement");
addToContainers_variable("bTickMostlyPaused", "", "Docs/Classes/UPreciseProjectileMovement/Variables/bTickMostlyPaused.html", ["tick", "mostly", "paused"], "UPreciseProjectileMovement");
addToContainers_class("URTSProjectileMovement", "An exact replica of ProjectileMovementComponent except StopSimulating has been overridden to not call SetUpdatedComponent which is desired behavior with pooled projectiles. This could have easily been done without needing to create another class but performance may be slightly better this way. Slightly is pushing it though.", "Docs/Classes/URTSProjectileMovement/URTSProjectileMovement.html", ["r", "t", "s", "projectile", "movement"], "");
addToContainers_function("StopSimulating", "", "Docs/Classes/URTSProjectileMovement/Functions/StopSimulating.html", ["stop", "simulating"], "URTSProjectileMovement");
addToContainers_struct("FUint8Set", "", "Docs/Structs/FUint8Set/FUint8Set.html", ["uint8", "set"], "");
addToContainers_function("Emplace", "", "Docs/Structs/FUint8Set/Functions/Emplace.html", [], "FUint8Set");
addToContainers_function("Num", "", "Docs/Structs/FUint8Set/Functions/Num.html", [], "FUint8Set");
addToContainers_variable("Container", "", "Docs/Structs/FUint8Set/Variables/Container.html", [], "FUint8Set");
addToContainers_struct("FMacroCommandReason", "Basic struct that holds the reason a macro command is being issued. Contains two parts: info about the command and info about the original command that triggered this command. e.g. if we want to build a battlecruiser to strengthen our army but we don\'t have a starport and we don\'t have and SCV then we will need to train an SCV. The reason that goes along with training that SCV will be: PrimaryReason = EMacroCommandSecondaryType::TrainUnit AuxilleryInfo = SCV OriginalCommand_PrimaryReason = EMacroCommandType::TrainArmyUnit OriginalCommand_AuxilleryInfo = EUnitType::Battlecruiser", "Docs/Structs/FMacroCommandReason/FMacroCommandReason.html", ["macro", "command", "reason"], "");
addToContainers_function("FMacroCommandReason", "Never call this", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Ctor for command that is not a chained command", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_1.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_2.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_3.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_4.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Ctors for calling RecursiveTryBuild inside a decide function", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_5.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_6.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Ctors for auxillery info too", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_7.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_8.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_9.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "Added this ctor after implementing upgrades as prerequisites. Hope it\'s right", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_10.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("FMacroCommandReason", "", "Docs/Structs/FMacroCommandReason/Functions/FMacroCommandReason_11.html", ["macro", "command", "reason"], "FMacroCommandReason");
addToContainers_function("GetActualCommand", "Get the immediate command, not the big picture command", "Docs/Structs/FMacroCommandReason/Functions/GetActualCommand.html", ["get", "actual", "command"], "FMacroCommandReason");
addToContainers_function("GetRawAuxilleryReason", "Get the auxillery reason as a uint8", "Docs/Structs/FMacroCommandReason/Functions/GetRawAuxilleryReason.html", ["get", "raw", "auxillery", "reason"], "FMacroCommandReason");
addToContainers_function("GetBuildingType", "", "Docs/Structs/FMacroCommandReason/Functions/GetBuildingType.html", ["get", "building", "type"], "FMacroCommandReason");
addToContainers_function("GetUnitType", "", "Docs/Structs/FMacroCommandReason/Functions/GetUnitType.html", ["get", "unit", "type"], "FMacroCommandReason");
addToContainers_function("GetUpgradeType", "", "Docs/Structs/FMacroCommandReason/Functions/GetUpgradeType.html", ["get", "upgrade", "type"], "FMacroCommandReason");
addToContainers_function("OriginalCommand_GetResourceType", "Should only call this if reason is to either train collector or build resource depot", "Docs/Structs/FMacroCommandReason/Functions/OriginalCommand_GetResourceType.html", ["original", "command_", "get", "resource", "type"], "FMacroCommandReason");
addToContainers_function("GetOriginalCommandMainReason", "", "Docs/Structs/FMacroCommandReason/Functions/GetOriginalCommandMainReason.html", ["get", "original", "command", "main", "reason"], "FMacroCommandReason");
addToContainers_function("GetOriginalCommandAuxilleryData", "", "Docs/Structs/FMacroCommandReason/Functions/GetOriginalCommandAuxilleryData.html", ["get", "original", "command", "auxillery", "data"], "FMacroCommandReason");
addToContainers_variable("ActualCommand", "What the command will actually do", "Docs/Structs/FMacroCommandReason/Variables/ActualCommand.html", ["actual", "command"], "FMacroCommandReason");
addToContainers_variable("AuxilleryInfo", "Additional info about the reason for the command. Always just use a straight static_cast to assign this value", "Docs/Structs/FMacroCommandReason/Variables/AuxilleryInfo.html", ["auxillery", "info"], "FMacroCommandReason");
addToContainers_variable("OriginalCommand_PrimaryReason", "Original command: primary reason", "Docs/Structs/FMacroCommandReason/Variables/OriginalCommand_PrimaryReason.html", ["original", "command_", "primary", "reason"], "FMacroCommandReason");
addToContainers_variable("OriginalCommand_AuxilleryInfo", "Original command: auxillery info", "Docs/Structs/FMacroCommandReason/Variables/OriginalCommand_AuxilleryInfo.html", ["original", "command_", "auxillery", "info"], "FMacroCommandReason");
addToContainers_struct("FSavingUpForInfo", "Info about whether the player is saving up resources for something and if they are what they are saving for and who will produce it", "Docs/Structs/FSavingUpForInfo/FSavingUpForInfo.html", ["saving", "up", "for", "info"], "");
addToContainers_function("FSavingUpForInfo", "", "Docs/Structs/FSavingUpForInfo/Functions/FSavingUpForInfo.html", ["saving", "up", "for", "info"], "FSavingUpForInfo");
addToContainers_function("SetSavingsTarget", "Set what the player should save up for @param BuildingType - building player should save up for @param InProducerBuilding - the construction yard we have chosen to build the building @param ResourceSpot - resource spot to build resource depot near", "Docs/Structs/FSavingUpForInfo/Functions/SetSavingsTarget.html", ["set", "savings", "target"], "FSavingUpForInfo");
addToContainers_function("SetSavingsTarget", "", "Docs/Structs/FSavingUpForInfo/Functions/SetSavingsTarget_1.html", ["set", "savings", "target"], "FSavingUpForInfo");
addToContainers_function("SetSavingsTarget", "Versions for building non-depot buildings", "Docs/Structs/FSavingUpForInfo/Functions/SetSavingsTarget_2.html", ["set", "savings", "target"], "FSavingUpForInfo");
addToContainers_function("SetSavingsTarget", "", "Docs/Structs/FSavingUpForInfo/Functions/SetSavingsTarget_3.html", ["set", "savings", "target"], "FSavingUpForInfo");
addToContainers_function("SetSavingsTarget", "Version for building units", "Docs/Structs/FSavingUpForInfo/Functions/SetSavingsTarget_4.html", ["set", "savings", "target"], "FSavingUpForInfo");
addToContainers_function("SetSavingsTarget", "Version for building upgrades", "Docs/Structs/FSavingUpForInfo/Functions/SetSavingsTarget_5.html", ["set", "savings", "target"], "FSavingUpForInfo");
addToContainers_function("IsSavingUp", "Return whether the player is saving up for something or not", "Docs/Structs/FSavingUpForInfo/Functions/IsSavingUp.html", ["is", "saving", "up"], "FSavingUpForInfo");
addToContainers_function("IsForBuilding", "Return whether the thing we\'re saving up for is a building or not (can be depot)", "Docs/Structs/FSavingUpForInfo/Functions/IsForBuilding.html", ["is", "for", "building"], "FSavingUpForInfo");
addToContainers_function("IsForUnit", "Return whether what we\'re saving up for is a unit or not", "Docs/Structs/FSavingUpForInfo/Functions/IsForUnit.html", ["is", "for", "unit"], "FSavingUpForInfo");
addToContainers_function("IsForUpgrade", "Return whether what we\'re saving up for is an upgrade or not", "Docs/Structs/FSavingUpForInfo/Functions/IsForUpgrade.html", ["is", "for", "upgrade"], "FSavingUpForInfo");
addToContainers_function("HasEnoughResourcesForIt", "Check if player has enough resources for what they\'re saving up for", "Docs/Structs/FSavingUpForInfo/Functions/HasEnoughResourcesForIt.html", ["has", "enough", "resources", "for", "it"], "FSavingUpForInfo");
addToContainers_function("ArePrerequisitesMetForIt", "Return whether prereqs are met for what we\'re saving for @param AICon - CPU player AI controller that owns this struct @param OutMissingPrereq - if return false then the first prereq we\'re missing @return - true if prereqs are met", "Docs/Structs/FSavingUpForInfo/Functions/ArePrerequisitesMetForIt.html", ["are", "prerequisites", "met", "for", "it"], "FSavingUpForInfo");
addToContainers_function("HasBuilderForIt", "Return whether the thing we\'re saving up has a worker/building that can produce it on the field @param AICon - AI controller that owns this struct @param bTryFindIfNone - if the cached producer is no longer valid/alive whether we should search the player\'s selectables looking for another usuable producer @return - true if a producer can produce what we\'re saving up for", "Docs/Structs/FSavingUpForInfo/Functions/HasBuilderForIt.html", ["has", "builder", "for", "it"], "FSavingUpForInfo");
addToContainers_function("BuildIt", "Build what the player is saving up for. Assumed that if calling this then resources and prereqs are good", "Docs/Structs/FSavingUpForInfo/Functions/BuildIt.html", ["build", "it"], "FSavingUpForInfo");
addToContainers_variable("1", "If false then we\'re not saving up for anything", "Docs/Structs/FSavingUpForInfo/Variables/1.html", [], "FSavingUpForInfo");
addToContainers_variable("1", "True if the building is being built to serve as a resource depot. Only up to date if saving up for a building", "Docs/Structs/FSavingUpForInfo/Variables/1_1.html", [], "FSavingUpForInfo");
addToContainers_variable("", "If saving for a resource depot the resource spot to build depot near", "Docs/Structs/FSavingUpForInfo/Variables/.html", [], "FSavingUpForInfo");
addToContainers_variable("Building", "", "Docs/Structs/FSavingUpForInfo/Variables/Building.html", [], "FSavingUpForInfo");
addToContainers_variable("Unit", "", "Docs/Structs/FSavingUpForInfo/Variables/Unit.html", [], "FSavingUpForInfo");
addToContainers_variable("Upgrade", "", "Docs/Structs/FSavingUpForInfo/Variables/Upgrade.html", [], "FSavingUpForInfo");
addToContainers_variable("", "The thing that will produce what we\'re saving up for. Can be left null at which point we may have to try and find one when the time comes when player has enough resources and wants to build it", "Docs/Structs/FSavingUpForInfo/Variables/_1.html", [], "FSavingUpForInfo");
addToContainers_variable("", "", "Docs/Structs/FSavingUpForInfo/Variables/_2.html", [], "FSavingUpForInfo");
addToContainers_variable("CommandReason", "The reason we want to build what we are saving up for", "Docs/Structs/FSavingUpForInfo/Variables/CommandReason.html", ["command", "reason"], "FSavingUpForInfo");
addToContainers_struct("FQueueWaitingInfo", "Info that says what production queue the player is waiting to become un-full so they can add an item to it. This is kind of similar to FSavingUpForInfo.", "Docs/Structs/FQueueWaitingInfo/FQueueWaitingInfo.html", ["queue", "waiting", "info"], "");
addToContainers_function("IsForBuilding", "", "Docs/Structs/FQueueWaitingInfo/Functions/IsForBuilding.html", ["is", "for", "building"], "FQueueWaitingInfo");
addToContainers_function("IsForUnit", "", "Docs/Structs/FQueueWaitingInfo/Functions/IsForUnit.html", ["is", "for", "unit"], "FQueueWaitingInfo");
addToContainers_function("IsForUpgrade", "", "Docs/Structs/FQueueWaitingInfo/Functions/IsForUpgrade.html", ["is", "for", "upgrade"], "FQueueWaitingInfo");
addToContainers_function("FQueueWaitingInfo", "", "Docs/Structs/FQueueWaitingInfo/Functions/FQueueWaitingInfo.html", ["queue", "waiting", "info"], "FQueueWaitingInfo");
addToContainers_function("WaitForQueue", "Set the queue we are waiting on. Set the item we will build when queue becomes unfull", "Docs/Structs/FQueueWaitingInfo/Functions/WaitForQueue.html", ["wait", "for", "queue"], "FQueueWaitingInfo");
addToContainers_function("WaitForQueue", "", "Docs/Structs/FQueueWaitingInfo/Functions/WaitForQueue_1.html", ["wait", "for", "queue"], "FQueueWaitingInfo");
addToContainers_function("WaitForQueue", "", "Docs/Structs/FQueueWaitingInfo/Functions/WaitForQueue_2.html", ["wait", "for", "queue"], "FQueueWaitingInfo");
addToContainers_function("IsWaiting", "Return whether the player is waiting on a queue", "Docs/Structs/FQueueWaitingInfo/Functions/IsWaiting.html", ["is", "waiting"], "FQueueWaitingInfo");
addToContainers_function("IsQueueOwnerValidAndAlive", "Return whether the queue owner is still valid and alive", "Docs/Structs/FQueueWaitingInfo/Functions/IsQueueOwnerValidAndAlive.html", ["is", "queue", "owner", "valid", "and", "alive"], "FQueueWaitingInfo");
addToContainers_function("IsQueueNowUnFull", "Return whether the queue now has a slot free", "Docs/Structs/FQueueWaitingInfo/Functions/IsQueueNowUnFull.html", ["is", "queue", "now", "un", "full"], "FQueueWaitingInfo");
addToContainers_function("ArePrerequisitesMetForIt", "Return prereqs are met for what player is waiting for. Assumes is waiting for something", "Docs/Structs/FQueueWaitingInfo/Functions/ArePrerequisitesMetForIt.html", ["are", "prerequisites", "met", "for", "it"], "FQueueWaitingInfo");
addToContainers_function("HasEnoughResourcesForIt", "Return whether player has enough resources for what they are waiting for. Assumes is waiting for something", "Docs/Structs/FQueueWaitingInfo/Functions/HasEnoughResourcesForIt.html", ["has", "enough", "resources", "for", "it"], "FQueueWaitingInfo");
addToContainers_function("BuyIt", "", "Docs/Structs/FQueueWaitingInfo/Functions/BuyIt.html", ["buy", "it"], "FQueueWaitingInfo");
addToContainers_function("CancelWaiting", "Stop waiting on queue", "Docs/Structs/FQueueWaitingInfo/Functions/CancelWaiting.html", ["cancel", "waiting"], "FQueueWaitingInfo");
addToContainers_variable("bWaiting", "", "Docs/Structs/FQueueWaitingInfo/Variables/bWaiting.html", [], "FQueueWaitingInfo");
addToContainers_variable("", "Building that owns the queue", "Docs/Structs/FQueueWaitingInfo/Variables/.html", [], "FQueueWaitingInfo");
addToContainers_variable("Queue", "Building\'s queue we\'re waiting on", "Docs/Structs/FQueueWaitingInfo/Variables/Queue.html", [], "FQueueWaitingInfo");
addToContainers_variable("Building", "What we will put in the queue. Will be one of these 3", "Docs/Structs/FQueueWaitingInfo/Variables/Building.html", [], "FQueueWaitingInfo");
addToContainers_variable("Unit", "", "Docs/Structs/FQueueWaitingInfo/Variables/Unit.html", [], "FQueueWaitingInfo");
addToContainers_variable("Upgrade", "", "Docs/Structs/FQueueWaitingInfo/Variables/Upgrade.html", [], "FQueueWaitingInfo");
addToContainers_variable("CommandReason", "Reason why we want to produce what we want to produce", "Docs/Structs/FQueueWaitingInfo/Variables/CommandReason.html", ["command", "reason"], "FQueueWaitingInfo");
addToContainers_struct("FTryingToPlaceBuildingInfo", "Info about status of trying to place a building (depots and non-depots). We limit the number of sweeps the player can do each tick, meaning sometimes it can take multiple ticks to find a suitable location to place a building", "Docs/Structs/FTryingToPlaceBuildingInfo/FTryingToPlaceBuildingInfo.html", ["trying", "to", "place", "building", "info"], "");
addToContainers_function("FTryingToPlaceBuildingInfo", "-------------------------------------------------", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/FTryingToPlaceBuildingInfo.html", ["trying", "to", "place", "building", "info"], "FTryingToPlaceBuildingInfo");
addToContainers_function("BeginForResourceDepot", "Version of BeingForBuilding that is intended to be used to try and place a building intended to be used as a resource depot", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/BeginForResourceDepot.html", ["begin", "for", "resource", "depot"], "FTryingToPlaceBuildingInfo");
addToContainers_function("BeginForResourceDepot", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/BeginForResourceDepot_1.html", ["begin", "for", "resource", "depot"], "FTryingToPlaceBuildingInfo");
addToContainers_function("BeginForBuilding", "Set what the building is that player should try and place. Resets all general area info and starts at blank slate. Building will try to be placed on next behavior tick", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/BeginForBuilding.html", ["begin", "for", "building"], "FTryingToPlaceBuildingInfo");
addToContainers_function("BeginForBuilding", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/BeginForBuilding_1.html", ["begin", "for", "building"], "FTryingToPlaceBuildingInfo");
addToContainers_function("IsPending", "Return true if trying to place a building, either a depot or regular building", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/IsPending.html", ["is", "pending"], "FTryingToPlaceBuildingInfo");
addToContainers_function("GetBuilding", "Assumes actually trying to place a building", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/GetBuilding.html", ["get", "building"], "FTryingToPlaceBuildingInfo");
addToContainers_function("GetResourceDepotBuildLocsIndex", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/GetResourceDepotBuildLocsIndex.html", ["get", "resource", "depot", "build", "locs", "index"], "FTryingToPlaceBuildingInfo");
addToContainers_function("GetBuildLocMultipliersIndex", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/GetBuildLocMultipliersIndex.html", ["get", "build", "loc", "multipliers", "index"], "FTryingToPlaceBuildingInfo");
addToContainers_function("GetNumGeneralAreasExhausted", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/GetNumGeneralAreasExhausted.html", ["get", "num", "general", "areas", "exhausted"], "FTryingToPlaceBuildingInfo");
addToContainers_function("GetCurrentGeneralArea", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/GetCurrentGeneralArea.html", ["get", "current", "general", "area"], "FTryingToPlaceBuildingInfo");
addToContainers_function("GetRotation", "Get the rotation to try when trying to place building", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/GetRotation.html", ["get", "rotation"], "FTryingToPlaceBuildingInfo");
addToContainers_function("TryPlaceForTick", "Continue trying to place building during tick @param AICon - CPU player AI controller that this struct belongs to @return - true if a command is given for a building to be placed", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/TryPlaceForTick.html", ["try", "place", "for", "tick"], "FTryingToPlaceBuildingInfo");
addToContainers_function("IsProducerUsable", "Return whether either ProducerBuilding or ProducerInfantry are able to build what we are trying to place", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/IsProducerUsable.html", ["is", "producer", "usable"], "FTryingToPlaceBuildingInfo");
addToContainers_function("GiveUp", "Give up trying to place building. If it\'s a BuildsInTab build method building then we will need to cancel its production @return - building we gave up trying to place", "Docs/Structs/FTryingToPlaceBuildingInfo/Functions/GiveUp.html", ["give", "up"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("PendingBuilding", "The type of building we\'re trying to build. This will be flagged as EBuildingType::NotBuilding if not trying to place a building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/PendingBuilding.html", ["pending", "building"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("bIsForDepot", "True if we want to place PendingBuilding as a resource depot", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/bIsForDepot.html", ["is", "for", "depot"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("", "If placing a resource depot, the resource spot to place depot near", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/.html", [], "FTryingToPlaceBuildingInfo");
addToContainers_variable("bUsingConstructionYard", "Whether to use ProducerBuilding or ProducerInfantry. True means use building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/bUsingConstructionYard.html", ["using", "construction", "yard"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("", "The construction yard that will build this building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/_1.html", [], "FTryingToPlaceBuildingInfo");
addToContainers_variable("", "The worker unit that will build this building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/_2.html", [], "FTryingToPlaceBuildingInfo");
addToContainers_variable("CommandReason", "The reason why we want to build the building", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/CommandReason.html", ["command", "reason"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumBuildLocationsTriedThisTick", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumBuildLocationsTriedThisTick.html", ["num", "build", "locations", "tried", "this", "tick"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumResourceDepotSpotsTried", "=======================================================================================", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumResourceDepotSpotsTried.html", ["num", "resource", "depot", "spots", "tried"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("ResourceDepotBuildLocsIndex", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/ResourceDepotBuildLocsIndex.html", ["resource", "depot", "build", "locs", "index"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumGeneralAreasExhausted", "=======================================================================================", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumGeneralAreasExhausted.html", ["num", "general", "areas", "exhausted"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("BuildLocMultipliersIndex", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/BuildLocMultipliersIndex.html", ["build", "loc", "multipliers", "index"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("NumLocationsTriedForCurrentGeneralArea", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/NumLocationsTriedForCurrentGenera.html", ["num", "locations", "tried", "for", "current", "general", "area"], "FTryingToPlaceBuildingInfo");
addToContainers_variable("GeneralArea", "", "Docs/Structs/FTryingToPlaceBuildingInfo/Variables/GeneralArea.html", ["general", "area"], "FTryingToPlaceBuildingInfo");
addToContainers_struct("FSingleBuildsInTabInfo", "@See FBuildsInTabBuildingInfo A single entry. There\'s one for each queue producing a building with the BuildsInTab method", "Docs/Structs/FSingleBuildsInTabInfo/FSingleBuildsInTabInfo.html", ["single", "builds", "in", "tab", "info"], "");
addToContainers_function("FSingleBuildsInTabInfo", "Never call this", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FSingleBuildsInTabInfo.html", ["single", "builds", "in", "tab", "info"], "FSingleBuildsInTabInfo");
addToContainers_function("FSingleBuildsInTabInfo", "Resource depot ctor", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FSingleBuildsInTabInfo_1.html", ["single", "builds", "in", "tab", "info"], "FSingleBuildsInTabInfo");
addToContainers_function("FSingleBuildsInTabInfo", "Regular building ctor", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FSingleBuildsInTabInfo_2.html", ["single", "builds", "in", "tab", "info"], "FSingleBuildsInTabInfo");
addToContainers_function("GetConstructionYard", "Get the producer building that this entry is for", "Docs/Structs/FSingleBuildsInTabInfo/Functions/GetConstructionYard.html", ["get", "construction", "yard"], "FSingleBuildsInTabInfo");
addToContainers_function("GetQueue", "", "Docs/Structs/FSingleBuildsInTabInfo/Functions/GetQueue.html", ["get", "queue"], "FSingleBuildsInTabInfo");
addToContainers_function("FlagProductionAsComplete", "Called when production for the queue has complete. The param InQueue is there just to verify the queue is the correct one", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FlagProductionAsComplete.html", ["flag", "production", "as", "complete"], "FSingleBuildsInTabInfo");
addToContainers_function("FlagProductionAsCancelled", "If the construction yard is no longer around or we explicity wanted to cancel production then this should be called", "Docs/Structs/FSingleBuildsInTabInfo/Functions/FlagProductionAsCancelled.html", ["flag", "production", "as", "cancelled"], "FSingleBuildsInTabInfo");
addToContainers_function("IsProductionComplete", "Return whether production has completed and therefore we can try place building", "Docs/Structs/FSingleBuildsInTabInfo/Functions/IsProductionComplete.html", ["is", "production", "complete"], "FSingleBuildsInTabInfo");
addToContainers_function("NowTryPlaceEachTick", "When production has complete now signal that we should try find a buildable location to place building @param AICon - AI controller this struct belongs to @param TryPlaceBuildingInfo - AICon\'s FTryingToPlaceBuildingInfo struct for convenience", "Docs/Structs/FSingleBuildsInTabInfo/Functions/NowTryPlaceEachTick.html", ["now", "try", "place", "each", "tick"], "FSingleBuildsInTabInfo");
addToContainers_variable("Building", "Building we\'re building. NotBuilding if not building anything", "Docs/Structs/FSingleBuildsInTabInfo/Variables/Building.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("bForResourceDepot", "Whether Building is being built to serve as a resource depot or not", "Docs/Structs/FSingleBuildsInTabInfo/Variables/bForResourceDepot.html", ["for", "resource", "depot"], "FSingleBuildsInTabInfo");
addToContainers_variable("", "The building that builds", "Docs/Structs/FSingleBuildsInTabInfo/Variables/.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("", "The resource spot to build depot near if building a depot", "Docs/Structs/FSingleBuildsInTabInfo/Variables/_1.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("Queue", "Queue that is producing building", "Docs/Structs/FSingleBuildsInTabInfo/Variables/Queue.html", [], "FSingleBuildsInTabInfo");
addToContainers_variable("bProductionComplete", "If true then the production has completed and building will be placed on next tick", "Docs/Structs/FSingleBuildsInTabInfo/Variables/bProductionComplete.html", ["production", "complete"], "FSingleBuildsInTabInfo");
addToContainers_variable("CommandReason", "Reason why we want to build this building", "Docs/Structs/FSingleBuildsInTabInfo/Variables/CommandReason.html", ["command", "reason"], "FSingleBuildsInTabInfo");
addToContainers_struct("FBuildsInTabBuildingInfo", "Info about buildings we are building that uses the BuildsInTab build method.", "Docs/Structs/FBuildsInTabBuildingInfo/FBuildsInTabBuildingInfo.html", ["builds", "in", "tab", "building", "info"], "");
addToContainers_function("NoteAsProducing", "Note down that we are building this building in tab. Resource depot version", "Docs/Structs/FBuildsInTabBuildingInfo/Functions/NoteAsProducing.html", ["note", "as", "producing"], "FBuildsInTabBuildingInfo");
addToContainers_function("NoteAsProducing", "Note down that we are building this building in tab. Regular building version", "Docs/Structs/FBuildsInTabBuildingInfo/Functions/NoteAsProducing_1.html", ["note", "as", "producing"], "FBuildsInTabBuildingInfo");
addToContainers_function("IsBuildingSomething", "Return whether player is currently building something with BuildsInTab build method. Either a still in progress or a complete building will return true", "Docs/Structs/FBuildsInTabBuildingInfo/Functions/IsBuildingSomething.html", ["is", "building", "something"], "FBuildsInTabBuildingInfo");
addToContainers_function("FlagProductionAsComplete", "@param InQueue - the queue that completed production", "Docs/Structs/FBuildsInTabBuildingInfo/Functions/FlagProductionAsComplete.html", ["flag", "production", "as", "complete"], "FBuildsInTabBuildingInfo");
addToContainers_function("NowTryPlaceEachTick", "Check if any buildings have completed production and are now ready to try and be placed. Max one building each call. It is assumed that if calling this then the player isn\'t already trying to place a building each tick @return - true if a building is now trying to be placed each tick", "Docs/Structs/FBuildsInTabBuildingInfo/Functions/NowTryPlaceEachTick.html", ["now", "try", "place", "each", "tick"], "FBuildsInTabBuildingInfo");
addToContainers_variable("", "Array of all BuildsInTab production by this player. Both in progress and ready to place info will be in here", "Docs/Structs/FBuildsInTabBuildingInfo/Variables/.html", [], "FBuildsInTabBuildingInfo");
addToContainers_class("ACPUPlayerAIController", "AI controller for a CPU player. This class\'s performance will be more affected by the size of faction info and the number of selectables this player controls than other code Would like to make these more event driven instead of querying state each tick but it is much more work than I thought Perhaps make this a base class and have two different AI controllers: - A general AI controller that isn\'t specific to any type of faction. It is the most general and will be the hardest to program - An AI controller that has a fixed build order defined for each faction", "Docs/Classes/ACPUPlayerAIController/ACPUPlayerAIController.html", ["c", "p", "u", "player", "a", "i", "controller"], "");
addToContainers_function("ACPUPlayerAIController", "", "Docs/Classes/ACPUPlayerAIController/Functions/ACPUPlayerAIController.html", ["c", "p", "u", "player", "a", "i", "controller"], "ACPUPlayerAIController");
addToContainers_function("Setup", "Set values before behavior is started @param InIDAsInt - unique ID of player @param InPlayerID - unique ID of player as FName @param InTeam - the team this player is on @param InFaction - the faction this player will be playing as @param InStartingSpot - the starting spot before GI::AssignOptimalStartinSpots is called. Therefore this can change and is not final @param StartingResources - resources player starts the match with @param InDifficulty - the difficulty of this player", "Docs/Classes/ACPUPlayerAIController/Functions/Setup.html", [], "ACPUPlayerAIController");
addToContainers_function("SetInitialLocAndRot", "Set what the default rotation is for this player given a starting spot @param InStartingSpotID - the startin spot ID of where this player starts the match at", "Docs/Classes/ACPUPlayerAIController/Functions/SetInitialLocAndRot.html", ["set", "initial", "loc", "and", "rot"], "ACPUPlayerAIController");
addToContainers_function("NotifyOfStartingSelectables", "Called right before behavior starts. Notifies the AI controller what the selectables it has started the game with are @param StartingBuildings - the buildings it has started the game with. One entry for each building @param StartingUnits - the units it has started the game with. One entry for each unit", "Docs/Classes/ACPUPlayerAIController/Functions/NotifyOfStartingSelectables.html", ["notify", "of", "starting", "selectables"], "ACPUPlayerAIController");
addToContainers_function("PerformFinalSetup", "Called right after NotifyOfStartingSelectables.", "Docs/Classes/ACPUPlayerAIController/Functions/PerformFinalSetup.html", ["perform", "final", "setup"], "ACPUPlayerAIController");
addToContainers_function("GrabDebugSnapshot", "", "Docs/Classes/ACPUPlayerAIController/Functions/GrabDebugSnapshot.html", ["grab", "debug", "snapshot"], "ACPUPlayerAIController");
addToContainers_function("TickFromManager", "This is this class\'s tick. It is called from a tick manager. This is where all the behavior decisions are made", "Docs/Classes/ACPUPlayerAIController/Functions/TickFromManager.html", ["tick", "from", "manager"], "ACPUPlayerAIController");
addToContainers_function("PreBehaviorPass", "Before deciding commands for tick, iterate over all buildings and units and gather necessary data about them.", "Docs/Classes/ACPUPlayerAIController/Functions/PreBehaviorPass.html", ["pre", "behavior", "pass"], "ACPUPlayerAIController");
addToContainers_function("DoBehavior", "What is called during each AI tick that handles doing a lot of behavior. It handles deciding if player should take an action and will carry out that action", "Docs/Classes/ACPUPlayerAIController/Functions/DoBehavior.html", ["do", "behavior"], "ACPUPlayerAIController");
addToContainers_function("DecideIfShouldBuildCollector", "Decide if should build a resource collector and if yes then take action towards making it happen", "Docs/Classes/ACPUPlayerAIController/Functions/DecideIfShouldBuildCollector.html", ["decide", "if", "should", "build", "collector"], "ACPUPlayerAIController");
addToContainers_function("DecideIfShouldBuildResourceDepot", "", "Docs/Classes/ACPUPlayerAIController/Functions/DecideIfShouldBuildResourceDepot.html", ["decide", "if", "should", "build", "resource", "depot"], "ACPUPlayerAIController");
addToContainers_function("DecideIfShouldBuildInfastructureProducingThing", "Decide if should build either a worker or a construction yard type building.", "Docs/Classes/ACPUPlayerAIController/Functions/DecideIfShouldBuildInfastructureP.html", ["decide", "if", "should", "build", "infastructure", "producing", "thing"], "ACPUPlayerAIController");
addToContainers_function("DecideIfShouldBuildBarracks", "Decide if should build a building that can make army units", "Docs/Classes/ACPUPlayerAIController/Functions/DecideIfShouldBuildBarracks.html", ["decide", "if", "should", "build", "barracks"], "ACPUPlayerAIController");
addToContainers_function("DecideIfShouldResearchUpgrade", "", "Docs/Classes/ACPUPlayerAIController/Functions/DecideIfShouldResearchUpgrade.html", ["decide", "if", "should", "research", "upgrade"], "ACPUPlayerAIController");
addToContainers_function("DecideIfShouldBuildBaseDefense", "Decide if should build a base defense building", "Docs/Classes/ACPUPlayerAIController/Functions/DecideIfShouldBuildBaseDefense.html", ["decide", "if", "should", "build", "base", "defense"], "ACPUPlayerAIController");
addToContainers_function("DecideIfShouldBuildArmyUnit", "Decide if should train a unit to use as an army unit", "Docs/Classes/ACPUPlayerAIController/Functions/DecideIfShouldBuildArmyUnit.html", ["decide", "if", "should", "build", "army", "unit"], "ACPUPlayerAIController");
addToContainers_function("AssignIdleCollectors", "Tell all idle units capable of collecting resources to go collect resources", "Docs/Classes/ACPUPlayerAIController/Functions/AssignIdleCollectors.html", ["assign", "idle", "collectors"], "ACPUPlayerAIController");
addToContainers_function("TryIssueBuildResourceDepotCommand", "Try build a resource depot near a certain resource spot. If not successful initially then try again on next tick @param BuildingType - building to try and place @param ConstructionYard - the construction yard that we have checked has its queue empty and will build the building @param ResourceSpot - the resource spot we want to build depot near", "Docs/Classes/ACPUPlayerAIController/Functions/TryIssueBuildResourceDepotCommand.html", ["try", "issue", "build", "resource", "depot", "command"], "ACPUPlayerAIController");
addToContainers_function("TryIssueBuildResourceDepotCommand", "", "Docs/Classes/ACPUPlayerAIController/Functions/TryIssueBuildResourceDepotCommand_1.html", ["try", "issue", "build", "resource", "depot", "command"], "ACPUPlayerAIController");
addToContainers_function("TryIssueBuildBuildingCommand", "Try and build a building. Assumed all params are legit. The only reason this can fail is if a suitable build location is never found, so make sure to check everything that needs to be checked before calling this like resources, prereqs, queue capacity, etc @param BuildingType - building to try build @param ConstructionYard - building that will build the building of type BuildingType @param CommandType - the reason the building is being built", "Docs/Classes/ACPUPlayerAIController/Functions/TryIssueBuildBuildingCommand.html", ["try", "issue", "build", "building", "command"], "ACPUPlayerAIController");
addToContainers_function("TryIssueBuildBuildingCommand", "", "Docs/Classes/ACPUPlayerAIController/Functions/TryIssueBuildBuildingCommand_1.html", ["try", "issue", "build", "building", "command"], "ACPUPlayerAIController");
addToContainers_function("PreBuildBuildingCommandChecks", "Do all the checks required before doing a build building command", "Docs/Classes/ACPUPlayerAIController/Functions/PreBuildBuildingCommandChecks.html", ["pre", "build", "building", "command", "checks"], "ACPUPlayerAIController");
addToContainers_function("PreBuildBuildingCommandChecks", "", "Docs/Classes/ACPUPlayerAIController/Functions/PreBuildBuildingCommandChecks_1.html", ["pre", "build", "building", "command", "checks"], "ACPUPlayerAIController");
addToContainers_function("PreTrainUnitCommandChecks", "Check everything before issuing a train unit command", "Docs/Classes/ACPUPlayerAIController/Functions/PreTrainUnitCommandChecks.html", ["pre", "train", "unit", "command", "checks"], "ACPUPlayerAIController");
addToContainers_function("PreResearchUpgradeCommandChecks", "Check everything before issuing a research upgrade command", "Docs/Classes/ACPUPlayerAIController/Functions/PreResearchUpgradeCommandChecks.html", ["pre", "research", "upgrade", "command", "checks"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueBuildResourceDepotCommand", "Tell a construction yard to construct a building for the purpose of being used as a resource depot @param BuildingType - type of building to construct @param ConstructionYard - construction yard that will construct the depot @param Location - location to build depot @param Rotation - rotation of depot @param CommandReason - the reason for building depot. This \'main reason\' for this struct should always be the same however the auxillery info should contain the type of resource we are building the depot for", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueBuildResourceDepotCo.html", ["actually", "issue", "build", "resource", "depot", "command"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueBuildResourceDepotCommand", "Version that orders a worker to construct a depot", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueBuildResourceDepotCo_1.html", ["actually", "issue", "build", "resource", "depot", "command"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueBuildBuildingCommand", "Tell a construction yard to construct a building @param BuildingType - type of building to construct @param ConstructionYard - construction yard that will construct the building @param Location - world location where we want to place building @param Rotation - world rotation for building @param CommandReason - the reason we are issuing this command", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueBuildBuildingCommand.html", ["actually", "issue", "build", "building", "command"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueBuildBuildingCommand", "Version that tells a worker to construct a building", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueBuildBuildingCommand_1.html", ["actually", "issue", "build", "building", "command"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueTrainUnitCommand", "Give out a command to train a unit. Assumes that resources, prereqs and barracks are all good @param UnitType - the unit we want to train @param Barracks - the building we will train the unit from @param CommandReason - the reason we are training this unit, for behavior purposes", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueTrainUnitCommand.html", ["actually", "issue", "train", "unit", "command"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueResearchUpgradeCommand", "Give out command to research an upgrade. Assumes that resources, prereqs and the researching building are all good @param UpgradeType - the type of upgrade we want to research @param ResearchingBuilding - the building that will research the upgrade @param CommandType - the reason we are researching this upgrade", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueResearchUpgradeComma.html", ["actually", "issue", "research", "upgrade", "command"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueCollectResourcesCommand", "Tell a unit to collect resources", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueCollectResourcesComm.html", ["actually", "issue", "collect", "resources", "command"], "ACPUPlayerAIController");
addToContainers_function("ActuallyIssueCancelProductionCommand", "", "Docs/Classes/ACPUPlayerAIController/Functions/ActuallyIssueCancelProductionComm.html", ["actually", "issue", "cancel", "production", "command"], "ACPUPlayerAIController");
addToContainers_function("SetSavingsTarget", "Set what we should save up our resources for @param SomethingType - what to save up for @param ConstructionYard - building that will build this. Can pass null which means a suitable construction yard will tried to be found when it comes time that player has enough resources. @param ResourceSpot - if building is going to be placed as a resource depot the spot to place it next to", "Docs/Classes/ACPUPlayerAIController/Functions/SetSavingsTarget.html", ["set", "savings", "target"], "ACPUPlayerAIController");
addToContainers_function("SetSavingsTarget", "", "Docs/Classes/ACPUPlayerAIController/Functions/SetSavingsTarget_1.html", ["set", "savings", "target"], "ACPUPlayerAIController");
addToContainers_function("SetSavingsTarget", "Use these non resource spot param versions for placing regular buildings", "Docs/Classes/ACPUPlayerAIController/Functions/SetSavingsTarget_2.html", ["set", "savings", "target"], "ACPUPlayerAIController");
addToContainers_function("SetSavingsTarget", "", "Docs/Classes/ACPUPlayerAIController/Functions/SetSavingsTarget_3.html", ["set", "savings", "target"], "ACPUPlayerAIController");
addToContainers_function("SetSavingsTarget", "", "Docs/Classes/ACPUPlayerAIController/Functions/SetSavingsTarget_4.html", ["set", "savings", "target"], "ACPUPlayerAIController");
addToContainers_function("SetSavingsTarget", "", "Docs/Classes/ACPUPlayerAIController/Functions/SetSavingsTarget_5.html", ["set", "savings", "target"], "ACPUPlayerAIController");
addToContainers_function("OnSavingsTargetPrereqNotMet", "", "Docs/Classes/ACPUPlayerAIController/Functions/OnSavingsTargetPrereqNotMet.html", ["on", "savings", "target", "prereq", "not", "met"], "ACPUPlayerAIController");
addToContainers_function("OnSavingsTargetPrereqNotMet", "", "Docs/Classes/ACPUPlayerAIController/Functions/OnSavingsTargetPrereqNotMet_1.html", ["on", "savings", "target", "prereq", "not", "met"], "ACPUPlayerAIController");
addToContainers_function("SetQueueWaitTarget", "Note down that we are waiting for a full queue to become unfull so we can place something in it @param InQueueOwner - the building that owns the queue that we will wait on @param TargetQueue - the queue that we will wait on to become unfull @param WhatWeWantToBuild - the building/unit/upgrade we want to produce from queue when it becomes unfull @param CommandReason - the reason we want to produce the building/unit/upgrade", "Docs/Classes/ACPUPlayerAIController/Functions/SetQueueWaitTarget.html", ["set", "queue", "wait", "target"], "ACPUPlayerAIController");
addToContainers_function("SetQueueWaitTarget", "", "Docs/Classes/ACPUPlayerAIController/Functions/SetQueueWaitTarget_1.html", ["set", "queue", "wait", "target"], "ACPUPlayerAIController");
addToContainers_function("SetQueueWaitTarget", "", "Docs/Classes/ACPUPlayerAIController/Functions/SetQueueWaitTarget_2.html", ["set", "queue", "wait", "target"], "ACPUPlayerAIController");
addToContainers_function("IsUnitIdle", "Return whether unit is in a state we consider idle", "Docs/Classes/ACPUPlayerAIController/Functions/IsUnitIdle.html", ["is", "unit", "idle"], "ACPUPlayerAIController");
addToContainers_function("CanUseConstructionYard", "Check to see if a building can be used to produce another building. Assumes that resources and prereqs have been checked and that the building is a construction yard", "Docs/Classes/ACPUPlayerAIController/Functions/CanUseConstructionYard.html", ["can", "use", "construction", "yard"], "ACPUPlayerAIController");
addToContainers_function("CanTrainFromBuilding", "Excluding prerequisites, resources and building\'s validity, check that a building can be used to train a unit @param Barracks - building to test for @param UnitWeWantToBuild - type of unit we want to train @return - true if the building can be used to train the requested unit", "Docs/Classes/ACPUPlayerAIController/Functions/CanTrainFromBuilding.html", ["can", "train", "from", "building"], "ACPUPlayerAIController");
addToContainers_function("CanResearchFromBuilding", "", "Docs/Classes/ACPUPlayerAIController/Functions/CanResearchFromBuilding.html", ["can", "research", "from", "building"], "ACPUPlayerAIController");
addToContainers_function("CanUseIdleWorker", "Excluding prerequisites, resources and validity, check to see if a worker can be used to build a building @param Worker - worker to check @param BuildingType - building we want to build @return - true if worker can be used", "Docs/Classes/ACPUPlayerAIController/Functions/CanUseIdleWorker.html", ["can", "use", "idle", "worker"], "ACPUPlayerAIController");
addToContainers_function("CanUseWorker", "", "Docs/Classes/ACPUPlayerAIController/Functions/CanUseWorker.html", ["can", "use", "worker"], "ACPUPlayerAIController");
addToContainers_function("IsTryingToPlaceBuilding", "Return true if the player is trying to place a building each tick", "Docs/Classes/ACPUPlayerAIController/Functions/IsTryingToPlaceBuilding.html", ["is", "trying", "to", "place", "building"], "ACPUPlayerAIController");
addToContainers_function("IsWaitingForQueueToBecomeUnFull", "Return true if the player is waiting on a production queue to become unfull so it can queue an item up in it", "Docs/Classes/ACPUPlayerAIController/Functions/IsWaitingForQueueToBecomeUnFull.html", ["is", "waiting", "for", "queue", "to", "become", "un", "full"], "ACPUPlayerAIController");
addToContainers_function("IsSavingUp", "Return true if the player is saving up their resources for something", "Docs/Classes/ACPUPlayerAIController/Functions/IsSavingUp.html", ["is", "saving", "up"], "ACPUPlayerAIController");
addToContainers_function("GetNumAquiredResourceSpots", "State queries that get the number of things we currently have.", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumAquiredResourceSpots.html", ["get", "num", "aquired", "resource", "spots"], "ACPUPlayerAIController");
addToContainers_function("GetNumConstructionYards", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumConstructionYards.html", ["get", "num", "construction", "yards"], "ACPUPlayerAIController");
addToContainers_function("GetNumWorkers", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumWorkers.html", ["get", "num", "workers"], "ACPUPlayerAIController");
addToContainers_function("GetNumBarracks", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumBarracks.html", ["get", "num", "barracks"], "ACPUPlayerAIController");
addToContainers_function("GetNumBaseDefenses", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumBaseDefenses.html", ["get", "num", "base", "defenses"], "ACPUPlayerAIController");
addToContainers_function("GetArmyStrength", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetArmyStrength.html", ["get", "army", "strength"], "ACPUPlayerAIController");
addToContainers_function("GetExpectedNumDepots", "Getters that drive when the player should build more of something. They do not take into account any pending commands", "Docs/Classes/ACPUPlayerAIController/Functions/GetExpectedNumDepots.html", ["get", "expected", "num", "depots"], "ACPUPlayerAIController");
addToContainers_function("GetExpectedNumConstructionYards", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetExpectedNumConstructionYards.html", ["get", "expected", "num", "construction", "yards"], "ACPUPlayerAIController");
addToContainers_function("GetExpectedNumWorkers", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetExpectedNumWorkers.html", ["get", "expected", "num", "workers"], "ACPUPlayerAIController");
addToContainers_function("GetExpectedNumBarracks", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetExpectedNumBarracks.html", ["get", "expected", "num", "barracks"], "ACPUPlayerAIController");
addToContainers_function("GetExpectedNumBaseDefenses", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetExpectedNumBaseDefenses.html", ["get", "expected", "num", "base", "defenses"], "ACPUPlayerAIController");
addToContainers_function("GetExpectedArmyStrength", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetExpectedArmyStrength.html", ["get", "expected", "army", "strength"], "ACPUPlayerAIController");
addToContainers_function("InitialRecursiveTryBuildWrapper", "Try and build something. If the thing requested to be built cannot be then the player will build something to work towards building it. e.g. if want to build a viking but have no starport then player will try build starport. If no SCV to build starport then player will try and build an SCV etc hence the recursive part. @return - true if an action was taken to moving closer to building what we want to build. @See comment above RecursiveTryBuild", "Docs/Classes/ACPUPlayerAIController/Functions/InitialRecursiveTryBuildWrapper.html", ["initial", "recursive", "try", "build", "wrapper"], "ACPUPlayerAIController");
addToContainers_function("InitialRecursiveTryBuildWrapper", "", "Docs/Classes/ACPUPlayerAIController/Functions/InitialRecursiveTryBuildWrapper_1.html", ["initial", "recursive", "try", "build", "wrapper"], "ACPUPlayerAIController");
addToContainers_function("InitialRecursiveTryBuildWrapper", "", "Docs/Classes/ACPUPlayerAIController/Functions/InitialRecursiveTryBuildWrapper_2.html", ["initial", "recursive", "try", "build", "wrapper"], "ACPUPlayerAIController");
addToContainers_function("RecursiveTryBuild", "Never call this anywhere other than inside InitialRecursiveTryBuildWrapper Try and issue a command to build this building. If the a prereq is not met then the player will try and build that prereq. If prereq of prereq is not met then player will try and build that etc hence recursive name. If not enough resources for building then player will set it as their savings target. If no building or unit can produce it then they will be built @param ReasonForProducing - the reason why we want to build it @return - true if any of the following happen: - a command is issued to produce what we want - a command is issued to produce something that will work towards producing what we want e.g. a prerequisite, a barracks that trains what we want - what we want to produce is set as our savings target. It will be bought later when we can afford it - what we want to produce is set as a queue waiting target. When a queue becomes unfull we will start producing it For buildings currently this can actually return true even if a command isn\'t given out to produce building, only because we never find a buildable location to place building, so case 1 and 2 above are not 100% true.", "Docs/Classes/ACPUPlayerAIController/Functions/RecursiveTryBuild.html", ["recursive", "try", "build"], "ACPUPlayerAIController");
addToContainers_function("RecursiveTryBuild", "", "Docs/Classes/ACPUPlayerAIController/Functions/RecursiveTryBuild_1.html", ["recursive", "try", "build"], "ACPUPlayerAIController");
addToContainers_function("RecursiveTryBuild", "", "Docs/Classes/ACPUPlayerAIController/Functions/RecursiveTryBuild_2.html", ["recursive", "try", "build"], "ACPUPlayerAIController");
addToContainers_function("GetOptimalNumCollectors", "Given a resource spot return how many collectors should be assigned to it for max resource gathering rate. e.g. in SCII a vespene gyser is 3 but can be larger depending on how far away the closest nexus is. This function cannot really be 100% correct though without taking into account if the collectors have different gathering speeds and the distance from the nearest depot @param ResourceSpot - resource spot we want to know how many collectors is optimal @return - optimal number of collectors", "Docs/Classes/ACPUPlayerAIController/Functions/GetOptimalNumCollectors.html", ["get", "optimal", "num", "collectors"], "ACPUPlayerAIController");
addToContainers_function("GetNumCollectorsAssigned", "Given a resource spot get the number of collectors that have been assigned to it", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumCollectorsAssigned.html", ["get", "num", "collectors", "assigned"], "ACPUPlayerAIController");
addToContainers_function("", "", "Docs/Classes/ACPUPlayerAIController/Functions/.html", [], "ACPUPlayerAIController");
addToContainers_function("TryPlaceResourceDepotInner", "Code common to both overloaded functions of TryPlaceResourceDepot. Do not call this function except inside TryPlaceResourceDepot @param DepotInfo - building info for the depot we want to build @param ResourceSpot - resource spot we want to build depot near @param OutLocation - the location to build building at. Only relevant if successful @param OutRotation - @return - true if successful in finding a location to place building", "Docs/Classes/ACPUPlayerAIController/Functions/TryPlaceResourceDepotInner.html", ["try", "place", "resource", "depot", "inner"], "ACPUPlayerAIController");
addToContainers_function("TryPlaceResourceDepot", "Try place a resource depot near a resource spot by checking lots of areas around it. @param DepotInfo - building info for the depot we\'re trying to build @param ResourceSpot - the resource spot to try and build depot near @param bInitialTry - if this is being called during tick then this should be false @return - true if a command is issued to build the depot", "Docs/Classes/ACPUPlayerAIController/Functions/TryPlaceResourceDepot.html", ["try", "place", "resource", "depot"], "ACPUPlayerAIController");
addToContainers_function("TryPlaceResourceDepot", "", "Docs/Classes/ACPUPlayerAIController/Functions/TryPlaceResourceDepot_1.html", ["try", "place", "resource", "depot"], "ACPUPlayerAIController");
addToContainers_function("GenerateGeneralArea", "Get a general area to try place building near", "Docs/Classes/ACPUPlayerAIController/Functions/GenerateGeneralArea.html", ["generate", "general", "area"], "ACPUPlayerAIController");
addToContainers_function("TryPlaceBuildingInner", "Code common to both overloaded versions of TryPlaceBuilding. Never call this function except inside TryPlaceBuilding @param OutLocation - the location of the building. Only relevant if successful @param OutRotation - the rotation of the building. Only relevant if successful", "Docs/Classes/ACPUPlayerAIController/Functions/TryPlaceBuildingInner.html", ["try", "place", "building", "inner"], "ACPUPlayerAIController");
addToContainers_function("TryPlaceBuilding", "Check if a location is ok to place a building (e.g. no selectables in the way, ground flat etc) and place it there if it is @param BuildingInfo - info for building we\'re trying to place @return - whether building was placed successfully", "Docs/Classes/ACPUPlayerAIController/Functions/TryPlaceBuilding.html", ["try", "place", "building"], "ACPUPlayerAIController");
addToContainers_function("TryPlaceBuilding", "", "Docs/Classes/ACPUPlayerAIController/Functions/TryPlaceBuilding_1.html", ["try", "place", "building"], "ACPUPlayerAIController");
addToContainers_function("GiveUpPlacingBuilding", "Give up trying to place building each tick", "Docs/Classes/ACPUPlayerAIController/Functions/GiveUpPlacingBuilding.html", ["give", "up", "placing", "building"], "ACPUPlayerAIController");
addToContainers_function("OnGiveUpPlacingBuilding", "", "Docs/Classes/ACPUPlayerAIController/Functions/OnGiveUpPlacingBuilding.html", ["on", "give", "up", "placing", "building"], "ACPUPlayerAIController");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay for calling function", "Docs/Classes/ACPUPlayerAIController/Functions/Delay).html", [], "ACPUPlayerAIController");
addToContainers_function("IncrementNumPendingCommands", "Increment/decrement how many commands of a certain type are being carried out", "Docs/Classes/ACPUPlayerAIController/Functions/IncrementNumPendingCommands.html", ["increment", "num", "pending", "commands"], "ACPUPlayerAIController");
addToContainers_function("DecrementNumPendingCommands", "", "Docs/Classes/ACPUPlayerAIController/Functions/DecrementNumPendingCommands.html", ["decrement", "num", "pending", "commands"], "ACPUPlayerAIController");
addToContainers_function("IncrementState", "Increment all the state variables that apply to a building/unit @param BuildingJustCompleted - building type of the building that was just completed @param BuildingInfo - building info of building that was just completed for convenience", "Docs/Classes/ACPUPlayerAIController/Functions/IncrementState.html", ["increment", "state"], "ACPUPlayerAIController");
addToContainers_function("IncrementState", "", "Docs/Classes/ACPUPlayerAIController/Functions/IncrementState_1.html", ["increment", "state"], "ACPUPlayerAIController");
addToContainers_function("GetNumMacroCommandTypes", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumMacroCommandTypes.html", ["get", "num", "macro", "command", "types"], "ACPUPlayerAIController");
addToContainers_function("ArrayIndexToMacroCommandType", "", "Docs/Classes/ACPUPlayerAIController/Functions/ArrayIndexToMacroCommandType.html", ["array", "index", "to", "macro", "command", "type"], "ACPUPlayerAIController");
addToContainers_function("GetNumMacroCommandReasons", "", "Docs/Classes/ACPUPlayerAIController/Functions/GetNumMacroCommandReasons.html", ["get", "num", "macro", "command", "reasons"], "ACPUPlayerAIController");
addToContainers_function("ArrayIndexToMacroCommandReason", "", "Docs/Classes/ACPUPlayerAIController/Functions/ArrayIndexToMacroCommandReason.html", ["array", "index", "to", "macro", "command", "reason"], "ACPUPlayerAIController");
addToContainers_function("OnQueueProductionComplete", "Called by production queues this player owns when they complete an item in the queue. @param Queue - queue that just finished production @param ItemProduced - the item that was completed @param RemovedButNotBuilt - items removed from the queue because they can no longer be produced e.g. because their prereqs are no longer met. They were NOT built", "Docs/Classes/ACPUPlayerAIController/Functions/OnQueueProductionComplete.html", ["on", "queue", "production", "complete"], "ACPUPlayerAIController");
addToContainers_function("GetDifficulty", "===========================================================================================", "Docs/Classes/ACPUPlayerAIController/Functions/GetDifficulty.html", ["get", "difficulty"], "ACPUPlayerAIController");
addToContainers_function("GetPS", "Get this player\'s player state", "Docs/Classes/ACPUPlayerAIController/Functions/GetPS.html", ["get", "p", "s"], "ACPUPlayerAIController");
addToContainers_function("GetFI", "Get faction info for the faction this player is playing as", "Docs/Classes/ACPUPlayerAIController/Functions/GetFI.html", ["get", "f", "i"], "ACPUPlayerAIController");
addToContainers_variable("Difficulty", "Difficulty of this player", "Docs/Classes/ACPUPlayerAIController/Variables/Difficulty.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to player state", "Docs/Classes/ACPUPlayerAIController/Variables/.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to player states faction info", "Docs/Classes/ACPUPlayerAIController/Variables/_1.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to game state", "Docs/Classes/ACPUPlayerAIController/Variables/_2.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ACPUPlayerAIController/Variables/_3.html", [], "ACPUPlayerAIController");
addToContainers_variable("StartingSpotLocation", "The world coords of where we started for match. If this information ever needs to be moved to PS then make sure to remove this variable from here", "Docs/Classes/ACPUPlayerAIController/Variables/StartingSpotLocation.html", ["starting", "spot", "location"], "ACPUPlayerAIController");
addToContainers_variable("StartingViewYaw", "The yaw rotation the player should start the match at. It will use this when trying to place buildings", "Docs/Classes/ACPUPlayerAIController/Variables/StartingViewYaw.html", ["starting", "view", "yaw"], "ACPUPlayerAIController");
addToContainers_variable("BuildsInTabBuildingInfo", "Info about a building we\'re building that uses the BuildsInTab build method", "Docs/Classes/ACPUPlayerAIController/Variables/BuildsInTabBuildingInfo.html", ["builds", "in", "tab", "building", "info"], "ACPUPlayerAIController");
addToContainers_variable("TryingToPlaceBuildingInfo", "Info about the building we\'re trying to place. Only needed because of self-imposed limit on number of sweeps allowed per tick", "Docs/Classes/ACPUPlayerAIController/Variables/TryingToPlaceBuildingInfo.html", ["trying", "to", "place", "building", "info"], "ACPUPlayerAIController");
addToContainers_variable("ThingSavingUpFor", "Info about what we\'re saving up for", "Docs/Classes/ACPUPlayerAIController/Variables/ThingSavingUpFor.html", ["thing", "saving", "up", "for"], "ACPUPlayerAIController");
addToContainers_variable("QueueWereWaitingToFinish", "Holds something we want to build + references a queue we want to build it from. This is for when player wants to build something but the queue is full", "Docs/Classes/ACPUPlayerAIController/Variables/QueueWereWaitingToFinish.html", ["queue", "were", "waiting", "to", "finish"], "ACPUPlayerAIController");
addToContainers_variable("", "", "Docs/Classes/ACPUPlayerAIController/Variables/_4.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "", "Docs/Classes/ACPUPlayerAIController/Variables/_5.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Set of resource spots that are counted as \'aquired\'. Even if the depot is not fully constructed it will add an entry to this", "Docs/Classes/ACPUPlayerAIController/Variables/_6.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps resource type to the number of resource spots that have been aquired for that resource type", "Docs/Classes/ACPUPlayerAIController/Variables/_7.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps each resource spot to the selectable IDs of the collectors that are collecing from it", "Docs/Classes/ACPUPlayerAIController/Variables/_8.html", [], "ACPUPlayerAIController");
addToContainers_variable("TriedRecursiveBuildBuildings", "Sets of what has been tried by the current RecursiveTryBuild functions. These are here to avoid an infinite recursion situation", "Docs/Classes/ACPUPlayerAIController/Variables/TriedRecursiveBuildBuildings.html", ["tried", "recursive", "build", "buildings"], "ACPUPlayerAIController");
addToContainers_variable("TriedRecursiveBuildUnits", "", "Docs/Classes/ACPUPlayerAIController/Variables/TriedRecursiveBuildUnits.html", ["tried", "recursive", "build", "units"], "ACPUPlayerAIController");
addToContainers_variable("NumWorkers", "A worker is a unit that can build at least one building", "Docs/Classes/ACPUPlayerAIController/Variables/NumWorkers.html", ["num", "workers"], "ACPUPlayerAIController");
addToContainers_variable("NumBarracks", "Barracks is a building that can train an attacking type unit. Don\'t know what this counts exactly: either number of barracks or number of buildings built for the purpose of training attacking type units", "Docs/Classes/ACPUPlayerAIController/Variables/NumBarracks.html", ["num", "barracks"], "ACPUPlayerAIController");
addToContainers_variable("NumBaseDefenses", "Number of base defense buildings the player owns", "Docs/Classes/ACPUPlayerAIController/Variables/NumBaseDefenses.html", ["num", "base", "defenses"], "ACPUPlayerAIController");
addToContainers_variable("ArmyStrength", "Strength of army. Units only, not base defenses", "Docs/Classes/ACPUPlayerAIController/Variables/ArmyStrength.html", ["army", "strength"], "ACPUPlayerAIController");
addToContainers_variable("", "I am using this to quickly identify which units are idle during the pretick phase", "Docs/Classes/ACPUPlayerAIController/Variables/_9.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps building type to how many of them are being produced ", "Docs/Classes/ACPUPlayerAIController/Variables/_10.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Maps unit type to how many of them are being produced", "Docs/Classes/ACPUPlayerAIController/Variables/_11.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "If upgrade is in set then it is being researched", "Docs/Classes/ACPUPlayerAIController/Variables/_12.html", [], "ACPUPlayerAIController");
addToContainers_variable("PendingCommands_ArmyStrength", "How much army strength is expected from the pending commands", "Docs/Classes/ACPUPlayerAIController/Variables/PendingCommands_ArmyStrength.html", ["pending", "commands_", "army", "strength"], "ACPUPlayerAIController");
addToContainers_variable("", "Every command will have an entry in pending commands and in command reasons", "Docs/Classes/ACPUPlayerAIController/Variables/_13.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "", "Docs/Classes/ACPUPlayerAIController/Variables/_14.html", [], "ACPUPlayerAIController");
addToContainers_variable("", "Commands that are not build resource depot or train collector", "Docs/Classes/ACPUPlayerAIController/Variables/_15.html", [], "ACPUPlayerAIController");
addToContainers_variable("BUILD_LOC_MULTIPLERS_NUM", "Number of entries in BuildLocMultipliers", "Docs/Classes/ACPUPlayerAIController/Variables/BUILD_LOC_MULTIPLERS_NUM.html", ["u", "i", "l", "d_", "l", "o", "c_", "m", "u", "l", "t", "i", "p", "l", "e", "r", "s_", "n", "u", "m"], "ACPUPlayerAIController");
addToContainers_variable("BuildLocMultipliers[BUILD_LOC_MULTIPLERS_NUM]", "An array of different multipliers to apply to build locations when trying to find a viable build location for a building", "Docs/Classes/ACPUPlayerAIController/Variables/BuildLocMultipliers[BUILD_LOC_MUL.html", ["build", "loc", "multipliers[", "b", "u", "i", "l", "d_", "l", "o", "c_", "m", "u", "l", "t", "i", "p", "l", "e", "r", "s_", "n", "u", "m]"], "ACPUPlayerAIController");
addToContainers_variable("NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY", "Number of spots to try for resource depots. Basically these will be locations in a circle around the resource spot", "Docs/Classes/ACPUPlayerAIController/Variables/NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY.html", ["u", "m_", "p", "o", "t", "e", "n", "t", "i", "a", "l_", "d", "e", "p", "o", "t_", "s", "p", "o", "t", "s_", "t", "o_", "t", "r", "y"], "ACPUPlayerAIController");
addToContainers_variable("CIRCLE_PORTIONS_IN_RADIANS", "", "Docs/Classes/ACPUPlayerAIController/Variables/CIRCLE_PORTIONS_IN_RADIANS.html", ["i", "r", "c", "l", "e_", "p", "o", "r", "t", "i", "o", "n", "s_", "i", "n_", "r", "a", "d", "i", "a", "n", "s"], "ACPUPlayerAIController");
addToContainers_variable("ResourceDepotBuildLocs[NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY]", "Contains unit vectors for different rotations in a circle. Precomputed to perhaps save some time at runtime, but we\'re only really doing a cos and sin calc and approximate would even be acceptable too", "Docs/Classes/ACPUPlayerAIController/Variables/ResourceDepotBuildLocs[NUM_POTENT.html", ["resource", "depot", "build", "locs[", "n", "u", "m_", "p", "o", "t", "e", "n", "t", "i", "a", "l_", "d", "e", "p", "o", "t_", "s", "p", "o", "t", "s_", "t", "o_", "t", "r", "y]"], "ACPUPlayerAIController");
addToContainers_variable("NUM_GENERAL_AREAS_TO_TRY", "This variable is only relevent when placing non-resource depot buildings. NUM_GENERAL_AREAS_TO_TRY * BUILD_LOC_MULTIPLERS_NUM = total areas tried per building. This is how many general areas to try before \'giving up\'. A general area will try BUILD_LOC_MULTIPLERS_NUM many different locations.", "Docs/Classes/ACPUPlayerAIController/Variables/NUM_GENERAL_AREAS_TO_TRY.html", ["u", "m_", "g", "e", "n", "e", "r", "a", "l_", "a", "r", "e", "a", "s_", "t", "o_", "t", "r", "y"], "ACPUPlayerAIController");
addToContainers_variable("MAX_NUM_BUILD_LOC_TRIES_PER_TICK", "The maximum number of build locations that will be tried to be found each tick. This is here to limit the amount of sweeps/raycasts done each tick.", "Docs/Classes/ACPUPlayerAIController/Variables/MAX_NUM_BUILD_LOC_TRIES_PER_TICK.html", ["a", "x_", "n", "u", "m_", "b", "u", "i", "l", "d_", "l", "o", "c_", "t", "r", "i", "e", "s_", "p", "e", "r_", "t", "i", "c", "k"], "ACPUPlayerAIController");
addToContainers_struct("ParsedUINTERFACE", "-----------------------------------------------------------------------------", "Docs/Structs/ParsedUINTERFACE/ParsedUINTERFACE.html", ["parsed", "u", "i", "n", "t", "e", "r", "f", "a", "c", "e"], "");
addToContainers_function("Reset", "", "Docs/Structs/ParsedUINTERFACE/Functions/Reset.html", [], "ParsedUINTERFACE");
addToContainers_variable("DefaultStruct", "Default struct to use for resetting", "Docs/Structs/ParsedUINTERFACE/Variables/DefaultStruct.html", ["default", "struct"], "ParsedUINTERFACE");
addToContainers_variable("Name", "---------------------------------------------------", "Docs/Structs/ParsedUINTERFACE/Variables/Name.html", [], "ParsedUINTERFACE");
addToContainers_struct("ParsedEnumValue", "", "Docs/Structs/ParsedEnumValue/ParsedEnumValue.html", ["parsed", "enum", "value"], "");
addToContainers_function("Reset", "", "Docs/Structs/ParsedEnumValue/Functions/Reset.html", [], "ParsedEnumValue");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedEnumValue/Variables/DefaultStruct.html", ["default", "struct"], "ParsedEnumValue");
addToContainers_variable("Comment", "Comment that goes along with the value", "Docs/Structs/ParsedEnumValue/Variables/Comment.html", [], "ParsedEnumValue");
addToContainers_variable("Name", "", "Docs/Structs/ParsedEnumValue/Variables/Name.html", [], "ParsedEnumValue");
addToContainers_struct("ParsedEnum", "int32 Value ", "Docs/Structs/ParsedEnum/ParsedEnum.html", ["parsed", "enum"], "");
addToContainers_function("Reset", "", "Docs/Structs/ParsedEnum/Functions/Reset.html", [], "ParsedEnum");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedEnum/Variables/DefaultStruct.html", ["default", "struct"], "ParsedEnum");
addToContainers_variable("Comment", "Comment that goes along with the enum", "Docs/Structs/ParsedEnum/Variables/Comment.html", [], "ParsedEnum");
addToContainers_variable("1", "Whether this is a UENUM", "Docs/Structs/ParsedEnum/Variables/1.html", [], "ParsedEnum");
addToContainers_variable("Name", "Name of the enum", "Docs/Structs/ParsedEnum/Variables/Name.html", [], "ParsedEnum");
addToContainers_variable("BackingInteger", "Name of the integer that backs the enum", "Docs/Structs/ParsedEnum/Variables/BackingInteger.html", ["backing", "integer"], "ParsedEnum");
addToContainers_variable("Values", "All the values in the enum", "Docs/Structs/ParsedEnum/Variables/Values.html", [], "ParsedEnum");
addToContainers_struct("ParsedFunctionParamDefaultValue", "", "Docs/Structs/ParsedFunctionParamDefaultValue/ParsedFunctionParamDefaultValue.html", ["parsed", "function", "param", "default", "value"], "");
addToContainers_function("Reset", "", "Docs/Structs/ParsedFunctionParamDefaultValue/Functions/Reset.html", [], "ParsedFunctionParamDefaultValue");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedFunctionParamDefaultValue/Variables/DefaultStruct.html", ["default", "struct"], "ParsedFunctionParamDefaultValue");
addToContainers_variable("Value", "Just a single string but there are no spaces anywhere in it. Examples of what it might look like: - \"5\" - \"FSomeStruct::Value\" - FSomeStruct::SomeOtherStruct::SomeValue", "Docs/Structs/ParsedFunctionParamDefaultValue/Variables/Value.html", [], "ParsedFunctionParamDefaultValue");
addToContainers_struct("ParsedVariableTemplateValue", "Might be able to use this for params, return values and variables. ", "Docs/Structs/ParsedVariableTemplateValue/ParsedVariableTemplateValue.html", ["parsed", "variable", "template", "value"], "");
addToContainers_function("ParsedVariableTemplateValue", "", "Docs/Structs/ParsedVariableTemplateValue/Functions/ParsedVariableTemplateValue.html", ["parsed", "variable", "template", "value"], "ParsedVariableTemplateValue");
addToContainers_variable("Type", "e.g. TArray<UObject *> <---- here Type = UObject", "Docs/Structs/ParsedVariableTemplateValue/Variables/Type.html", [], "ParsedVariableTemplateValue");
addToContainers_variable("Pointers", "e.g. TArray<UObject *> <--- has a pointer asterisk", "Docs/Structs/ParsedVariableTemplateValue/Variables/Pointers.html", [], "ParsedVariableTemplateValue");
addToContainers_variable("NestedTemplateValues", "E.g. TSet<TSubclassOf<UObject>> <---- the nested value is TSubclassOf<UObject>", "Docs/Structs/ParsedVariableTemplateValue/Variables/NestedTemplateValues.html", ["nested", "template", "values"], "ParsedVariableTemplateValue");
addToContainers_struct("ParsedFunctionParameter", "", "Docs/Structs/ParsedFunctionParameter/ParsedFunctionParameter.html", ["parsed", "function", "parameter"], "");
addToContainers_function("ParsedFunctionParameter", "", "Docs/Structs/ParsedFunctionParameter/Functions/ParsedFunctionParameter.html", ["parsed", "function", "parameter"], "ParsedFunctionParameter");
addToContainers_variable("1", "e.g. const int32 MyParam1 <---- In this case const isn\'t really important", "Docs/Structs/ParsedFunctionParameter/Variables/1.html", [], "ParsedFunctionParameter");
addToContainers_variable("VariableTypeName", "The name of the type of variable e.g. \"int32\", \"MyStruct\", etc. Does not take into account pointers or references", "Docs/Structs/ParsedFunctionParameter/Variables/VariableTypeName.html", ["variable", "type", "name"], "ParsedFunctionParameter");
addToContainers_variable("TemplateValues", "e.g. VariableTypeName = \"TSubclassOf\", and TemplateValues = { \"UObject\" } ", "Docs/Structs/ParsedFunctionParameter/Variables/TemplateValues.html", ["template", "values"], "ParsedFunctionParameter");
addToContainers_variable("VariableTypePointers", "Pointers for the variable. ", "Docs/Structs/ParsedFunctionParameter/Variables/VariableTypePointers.html", ["variable", "type", "pointers"], "ParsedFunctionParameter");
addToContainers_variable("Name", "Name of the parameter", "Docs/Structs/ParsedFunctionParameter/Variables/Name.html", [], "ParsedFunctionParameter");
addToContainers_variable("DefaultValue", "Default value if any", "Docs/Structs/ParsedFunctionParameter/Variables/DefaultValue.html", ["default", "value"], "ParsedFunctionParameter");
addToContainers_struct("UFUNCTIONSpecifier", "", "Docs/Structs/UFUNCTIONSpecifier/UFUNCTIONSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifier"], "");
addToContainers_function("UFUNCTIONSpecifier", "", "Docs/Structs/UFUNCTIONSpecifier/Functions/UFUNCTIONSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifier"], "UFUNCTIONSpecifier");
addToContainers_function("UFUNCTIONSpecifier", "", "Docs/Structs/UFUNCTIONSpecifier/Functions/UFUNCTIONSpecifier_1.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifier"], "UFUNCTIONSpecifier");
addToContainers_variable("Type", "e.g. \"BlueprintCallable\", \"NetMulticast\"", "Docs/Structs/UFUNCTIONSpecifier/Variables/Type.html", [], "UFUNCTIONSpecifier");
addToContainers_variable("SecondValue", "e.g. if Type == \"Category\", then this will equal the category", "Docs/Structs/UFUNCTIONSpecifier/Variables/SecondValue.html", ["second", "value"], "UFUNCTIONSpecifier");
addToContainers_struct("UFUNCTIONMetaSpecifier", "", "Docs/Structs/UFUNCTIONMetaSpecifier/UFUNCTIONMetaSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifier"], "");
addToContainers_function("UFUNCTIONMetaSpecifier", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Functions/UFUNCTIONMetaSpecifier.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifier"], "UFUNCTIONMetaSpecifier");
addToContainers_function("UFUNCTIONMetaSpecifier", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Functions/UFUNCTIONMetaSpecifier_1.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifier"], "UFUNCTIONMetaSpecifier");
addToContainers_variable("Type", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Variables/Type.html", [], "UFUNCTIONMetaSpecifier");
addToContainers_variable("SecondValue", "", "Docs/Structs/UFUNCTIONMetaSpecifier/Variables/SecondValue.html", ["second", "value"], "UFUNCTIONMetaSpecifier");
addToContainers_struct("ParsedFunction", "", "Docs/Structs/ParsedFunction/ParsedFunction.html", ["parsed", "function"], "");
addToContainers_function("ParsedFunction", "", "Docs/Structs/ParsedFunction/Functions/ParsedFunction.html", ["parsed", "function"], "ParsedFunction");
addToContainers_function("ParsedFunction", "Constructor for a constructor ", "Docs/Structs/ParsedFunction/Functions/ParsedFunction_1.html", ["parsed", "function"], "ParsedFunction");
addToContainers_function("ParsedFunction", "Constructor for a non-constructor function", "Docs/Structs/ParsedFunction/Functions/ParsedFunction_2.html", ["parsed", "function"], "ParsedFunction");
addToContainers_function("Reset", "Constructor for a non-constructor function", "Docs/Structs/ParsedFunction/Functions/Reset.html", [], "ParsedFunction");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedFunction/Variables/DefaultStruct.html", ["default", "struct"], "ParsedFunction");
addToContainers_variable("AccessSpecifier", "private, protected, public", "Docs/Structs/ParsedFunction/Variables/AccessSpecifier.html", ["access", "specifier"], "ParsedFunction");
addToContainers_variable("Comment", "Comment that goes along with the function", "Docs/Structs/ParsedFunction/Variables/Comment.html", [], "ParsedFunction");
addToContainers_variable("Name", "", "Docs/Structs/ParsedFunction/Variables/Name.html", [], "ParsedFunction");
addToContainers_variable("1", "Whether this function is a UFUNCTION", "Docs/Structs/ParsedFunction/Variables/1.html", [], "ParsedFunction");
addToContainers_variable("UFUNCTIONSpecifiers", "e.g. BlueprintCallable, Category = \"Blah|Blah\"", "Docs/Structs/ParsedFunction/Variables/UFUNCTIONSpecifiers.html", ["f", "u", "n", "c", "t", "i", "o", "n", "specifiers"], "ParsedFunction");
addToContainers_variable("UFUNCTIONMetaSpecifiers", "If this is a UFUNCTION what meta specifiers it has ", "Docs/Structs/ParsedFunction/Variables/UFUNCTIONMetaSpecifiers.html", ["f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifiers"], "ParsedFunction");
addToContainers_variable("1", "Whether this function is a struct/class\'s constructor", "Docs/Structs/ParsedFunction/Variables/1_1.html", [], "ParsedFunction");
addToContainers_variable("1", "", "Docs/Structs/ParsedFunction/Variables/1_2.html", [], "ParsedFunction");
addToContainers_variable("1", "", "Docs/Structs/ParsedFunction/Variables/1_3.html", [], "ParsedFunction");
addToContainers_variable("1", "If true the function is a virtual function", "Docs/Structs/ParsedFunction/Variables/1_4.html", [], "ParsedFunction");
addToContainers_variable("1", "If true the function is const. Note: has nothing to do with return values or parameters", "Docs/Structs/ParsedFunction/Variables/1_5.html", [], "ParsedFunction");
addToContainers_variable("1", "True if the return value is const", "Docs/Structs/ParsedFunction/Variables/1_6.html", [], "ParsedFunction");
addToContainers_variable("ReturnValue", "What this function returns e.g. \"float\", \"void\", \"MyStruct\", etc. Does not take into account const, pointers or references", "Docs/Structs/ParsedFunction/Variables/ReturnValue.html", ["return", "value"], "ParsedFunction");
addToContainers_variable("ReturnValuePointers", "Whether the return value is a pointer/reference/const.pointer/pointer.to.pointer etc", "Docs/Structs/ParsedFunction/Variables/ReturnValuePointers.html", ["return", "value", "pointers"], "ParsedFunction");
addToContainers_variable("ReturnValueTemplateValues", "", "Docs/Structs/ParsedFunction/Variables/ReturnValueTemplateValues.html", ["return", "value", "template", "values"], "ParsedFunction");
addToContainers_variable("Parameters", "Parameters for the function. If empty then the function has none", "Docs/Structs/ParsedFunction/Variables/Parameters.html", [], "ParsedFunction");
addToContainers_variable("TemplateParameters", "e.g. template <typename T, class Blah>", "Docs/Structs/ParsedFunction/Variables/TemplateParameters.html", ["template", "parameters"], "ParsedFunction");
addToContainers_struct("ParsedUPROPERTYSpecifier", "", "Docs/Structs/ParsedUPROPERTYSpecifier/ParsedUPROPERTYSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "specifier"], "");
addToContainers_function("ParsedUPROPERTYSpecifier", "", "Docs/Structs/ParsedUPROPERTYSpecifier/Functions/ParsedUPROPERTYSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "specifier"], "ParsedUPROPERTYSpecifier");
addToContainers_variable("Value", "First value e.g. BlueprintAssignable, BlueprintGetter", "Docs/Structs/ParsedUPROPERTYSpecifier/Variables/Value.html", [], "ParsedUPROPERTYSpecifier");
addToContainers_variable("SecondValue", "Second value which some specifiers need e.g. Category needs a second value, ReplicatedUsing needs a second value", "Docs/Structs/ParsedUPROPERTYSpecifier/Variables/SecondValue.html", ["second", "value"], "ParsedUPROPERTYSpecifier");
addToContainers_struct("ParsedUPROPERTYMetaSpecifier", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/ParsedUPROPERTYMetaSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifier"], "");
addToContainers_function("ParsedUPROPERTYMetaSpecifier", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/Functions/ParsedUPROPERTYMetaSpecifier.html", ["parsed", "u", "p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifier"], "ParsedUPROPERTYMetaSpecifier");
addToContainers_variable("Value", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/Variables/Value.html", [], "ParsedUPROPERTYMetaSpecifier");
addToContainers_variable("SecondValues", "", "Docs/Structs/ParsedUPROPERTYMetaSpecifier/Variables/SecondValues.html", ["second", "values"], "ParsedUPROPERTYMetaSpecifier");
addToContainers_struct("ParsedVariable", "", "Docs/Structs/ParsedVariable/ParsedVariable.html", ["parsed", "variable"], "");
addToContainers_function("ParsedVariable", "", "Docs/Structs/ParsedVariable/Functions/ParsedVariable.html", ["parsed", "variable"], "ParsedVariable");
addToContainers_function("ParsedVariable", "", "Docs/Structs/ParsedVariable/Functions/ParsedVariable_1.html", ["parsed", "variable"], "ParsedVariable");
addToContainers_function("Reset", "", "Docs/Structs/ParsedVariable/Functions/Reset.html", [], "ParsedVariable");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedVariable/Variables/DefaultStruct.html", ["default", "struct"], "ParsedVariable");
addToContainers_variable("AccessSpecifier", "private, protected, public", "Docs/Structs/ParsedVariable/Variables/AccessSpecifier.html", ["access", "specifier"], "ParsedVariable");
addToContainers_variable("Comment", "Comment that goes along with the variable", "Docs/Structs/ParsedVariable/Variables/Comment.html", [], "ParsedVariable");
addToContainers_variable("1", "", "Docs/Structs/ParsedVariable/Variables/1.html", [], "ParsedVariable");
addToContainers_variable("1", "", "Docs/Structs/ParsedVariable/Variables/1_1.html", [], "ParsedVariable");
addToContainers_variable("UPROPERTYSpecifiers", "", "Docs/Structs/ParsedVariable/Variables/UPROPERTYSpecifiers.html", ["p", "r", "o", "p", "e", "r", "t", "y", "specifiers"], "ParsedVariable");
addToContainers_variable("UPROPERTYMetaSpecifiers", "", "Docs/Structs/ParsedVariable/Variables/UPROPERTYMetaSpecifiers.html", ["p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifiers"], "ParsedVariable");
addToContainers_variable("1", "Note: this has nothing to do with pointer constness", "Docs/Structs/ParsedVariable/Variables/1_2.html", [], "ParsedVariable");
addToContainers_variable("TypeName", "e.g. \"int32\", \"MyStruct\"", "Docs/Structs/ParsedVariable/Variables/TypeName.html", ["type", "name"], "ParsedVariable");
addToContainers_variable("TemplateValues", "e.g. if this is a TSubclassOf then this might contain { \"AActor\" }", "Docs/Structs/ParsedVariable/Variables/TemplateValues.html", ["template", "values"], "ParsedVariable");
addToContainers_variable("Pointers", "Whether the variable is a pointer, reference, const pointer, pointer to pointer, etc", "Docs/Structs/ParsedVariable/Variables/Pointers.html", [], "ParsedVariable");
addToContainers_variable("Name", "Name of the variable", "Docs/Structs/ParsedVariable/Variables/Name.html", [], "ParsedVariable");
addToContainers_struct("ParsedUSTRUCTOrUCLASSSpecifier", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSSpecifier/ParsedUSTRUCTOrUCLASSSpecifier.html", ["parsed", "u", "s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "specifier"], "");
addToContainers_variable("Value", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSSpecifier/Variables/Value.html", [], "ParsedUSTRUCTOrUCLASSSpecifier");
addToContainers_variable("SecondValues", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSSpecifier/Variables/SecondValues.html", ["second", "values"], "ParsedUSTRUCTOrUCLASSSpecifier");
addToContainers_struct("ParsedUSTRUCTOrUCLASSMetaSpecifier", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSMetaSpecifie/ParsedUSTRUCTOrUCLASSMetaSpecifie.html", ["parsed", "u", "s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "meta", "specifier"], "");
addToContainers_variable("Value", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSMetaSpecifie/Variables/Value.html", [], "ParsedUSTRUCTOrUCLASSMetaSpecifier");
addToContainers_variable("SecondValues", "", "Docs/Structs/ParsedUSTRUCTOrUCLASSMetaSpecifie/Variables/SecondValues.html", ["second", "values"], "ParsedUSTRUCTOrUCLASSMetaSpecifier");
addToContainers_struct("ParsedStructOrClass", "", "Docs/Structs/ParsedStructOrClass/ParsedStructOrClass.html", ["parsed", "struct", "or", "class"], "");
addToContainers_function("Reset", "", "Docs/Structs/ParsedStructOrClass/Functions/Reset.html", [], "ParsedStructOrClass");
addToContainers_variable("DefaultStruct", "", "Docs/Structs/ParsedStructOrClass/Variables/DefaultStruct.html", ["default", "struct"], "ParsedStructOrClass");
addToContainers_variable("Comment", "Comment that goes along with the struct/class", "Docs/Structs/ParsedStructOrClass/Variables/Comment.html", [], "ParsedStructOrClass");
addToContainers_variable("1", "True = class, false = struct", "Docs/Structs/ParsedStructOrClass/Variables/1.html", [], "ParsedStructOrClass");
addToContainers_variable("1", "", "Docs/Structs/ParsedStructOrClass/Variables/1_1.html", [], "ParsedStructOrClass");
addToContainers_variable("USTRUCTOrUCLASSSpecifiers", "", "Docs/Structs/ParsedStructOrClass/Variables/USTRUCTOrUCLASSSpecifiers.html", ["s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "specifiers"], "ParsedStructOrClass");
addToContainers_variable("USTRUCTOrUCLASSMetaSpecifiers", "", "Docs/Structs/ParsedStructOrClass/Variables/USTRUCTOrUCLASSMetaSpecifiers.html", ["s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "meta", "specifiers"], "ParsedStructOrClass");
addToContainers_variable("1", "Whether this class is the class that contains all the functions for a UINTERFACE", "Docs/Structs/ParsedStructOrClass/Variables/1_2.html", [], "ParsedStructOrClass");
addToContainers_variable("1", "If true the class has been declared final i.e. no class can derive from it", "Docs/Structs/ParsedStructOrClass/Variables/1_3.html", [], "ParsedStructOrClass");
addToContainers_variable("Name", "", "Docs/Structs/ParsedStructOrClass/Variables/Name.html", [], "ParsedStructOrClass");
addToContainers_variable("ParentsNames", "The name of the structs/classes that this struct/class inherits from ", "Docs/Structs/ParsedStructOrClass/Variables/ParentsNames.html", ["parents", "names"], "ParsedStructOrClass");
addToContainers_variable("Functions", "Info about all the functions this struct/class has", "Docs/Structs/ParsedStructOrClass/Variables/Functions.html", [], "ParsedStructOrClass");
addToContainers_variable("Variables", "Info about all the variables this class has", "Docs/Structs/ParsedStructOrClass/Variables/Variables.html", [], "ParsedStructOrClass");
addToContainers_class("DocumentationTool", "-----------------------------------------------------------------------------", "Docs/Classes/DocumentationTool/DocumentationTool.html", ["documentation", "tool"], "");
addToContainers_function("DocumentationTool", "", "Docs/Classes/DocumentationTool/Functions/DocumentationTool.html", ["documentation", "tool"], "DocumentationTool");
addToContainers_function("DoWork", "Parses all relevant project files and creates a file for the website to then parse @param World - a UWorld. You can leave this null and GEditor->GetEditorWorldContext().World() will be used @return - time it takes to complete in seconds", "Docs/Classes/DocumentationTool/Functions/DoWork.html", ["do", "work"], "DocumentationTool");
addToContainers_function("ParseProjectAndCreateDocumentationFile", "Parses all relevant project files and creates a file for the website to then parse @return - time in seconds that it takes to complete", "Docs/Classes/DocumentationTool/Functions/ParseProjectAndCreateDocumentatio.html", ["parse", "project", "and", "create", "documentation", "file"], "DocumentationTool");
addToContainers_function("DoEngineInfoParsing", "Parse engine source and an online engine website to extract info about engine classes/structs", "Docs/Classes/DocumentationTool/Functions/DoEngineInfoParsing.html", ["do", "engine", "info", "parsing"], "DocumentationTool");
addToContainers_function("ReadFileContents", "Get the contents of a file @param Filename - file to get contents for. Expects full path @return - contents of file", "Docs/Classes/DocumentationTool/Functions/ReadFileContents.html", ["read", "file", "contents"], "DocumentationTool");
addToContainers_function("ParseFile", "Parses a file, extracting important information into variables on this class", "Docs/Classes/DocumentationTool/Functions/ParseFile.html", ["parse", "file"], "DocumentationTool");
addToContainers_function("AtStartOfComment", "Returns whether at the start of a comment and what comment type if so @param c - the current character @param c2 - character that comes after c @return - whether at the start of a comment", "Docs/Classes/DocumentationTool/Functions/AtStartOfComment.html", ["at", "start", "of", "comment"], "DocumentationTool");
addToContainers_function("SkipSingleLineComments", "", "Docs/Classes/DocumentationTool/Functions/SkipSingleLineComments.html", ["skip", "single", "line", "comments"], "DocumentationTool");
addToContainers_function("SkipMultiLineComment", "", "Docs/Classes/DocumentationTool/Functions/SkipMultiLineComment.html", ["skip", "multi", "line", "comment"], "DocumentationTool");
addToContainers_function("AtString", "Returns true if at a string. Assumes that Index corrisonds to the 2nd character in TargetString. Will advance Index to the first character after the TargetString only if this returns true. Otherwise it will not touch Index", "Docs/Classes/DocumentationTool/Functions/AtString.html", ["at", "string"], "DocumentationTool");
addToContainers_function("AtString_Test", "For debugging", "Docs/Classes/DocumentationTool/Functions/AtString_Test.html", ["at", "string_", "test"], "DocumentationTool");
addToContainers_function("IsWhitespace", "Should return true for spaces, tabs, newlines, possibly more...", "Docs/Classes/DocumentationTool/Functions/IsWhitespace.html", ["is", "whitespace"], "DocumentationTool");
addToContainers_function("IsNewline", "Returns true if c is a newline character", "Docs/Classes/DocumentationTool/Functions/IsNewline.html", ["is", "newline"], "DocumentationTool");
addToContainers_function("IsAlphaNumeric", "", "Docs/Classes/DocumentationTool/Functions/IsAlphaNumeric.html", ["is", "alpha", "numeric"], "DocumentationTool");
addToContainers_function("AtEndOfFile", "Return whether at the end of the current file being parsed", "Docs/Classes/DocumentationTool/Functions/AtEndOfFile.html", ["at", "end", "of", "file"], "DocumentationTool");
addToContainers_function("AtEndOfFile", "", "Docs/Classes/DocumentationTool/Functions/AtEndOfFile_1.html", ["at", "end", "of", "file"], "DocumentationTool");
addToContainers_function("ParseToken", "", "Docs/Classes/DocumentationTool/Functions/ParseToken.html", ["parse", "token"], "DocumentationTool");
addToContainers_function("ParseToken", "This version will stop parsing when something in ExcludeList is encountered", "Docs/Classes/DocumentationTool/Functions/ParseToken_1.html", ["parse", "token"], "DocumentationTool");
addToContainers_function("ParseTokenLeaveIndexUnchanged", "", "Docs/Classes/DocumentationTool/Functions/ParseTokenLeaveIndexUnchanged.html", ["parse", "token", "leave", "index", "unchanged"], "DocumentationTool");
addToContainers_function("SkipToken", "", "Docs/Classes/DocumentationTool/Functions/SkipToken.html", ["skip", "token"], "DocumentationTool");
addToContainers_function("ParseSingleLineComments", "Parse a comment. Does not includes newlines. Instead replaces them with a space. Also does not include double/triple/etc spaces. Assumes that Index corrisponds to the first character of the comment e.g. //%If this is a comment then the \'%\' is where Index corrisponds to Will advance Index to corrispond to the first character after the comment", "Docs/Classes/DocumentationTool/Functions/ParseSingleLineComments.html", ["parse", "single", "line", "comments"], "DocumentationTool");
addToContainers_function("ParseMultiLineComment", "", "Docs/Classes/DocumentationTool/Functions/ParseMultiLineComment.html", ["parse", "multi", "line", "comment"], "DocumentationTool");
addToContainers_function("GetCurrentComment", "Returns CurrentComment, then blanks it", "Docs/Classes/DocumentationTool/Functions/GetCurrentComment.html", ["get", "current", "comment"], "DocumentationTool");
addToContainers_function("SkipWhitespaceAndComments", "Advances Index to corrispond to the first character not a space or newline", "Docs/Classes/DocumentationTool/Functions/SkipWhitespaceAndComments.html", ["skip", "whitespace", "and", "comments"], "DocumentationTool");
addToContainers_function("SkipWhitespaceAndCommentsButRememberLastComment", "Advances Index to corrispond to the first character not a space or newline. Also along the way if a comment is encountered it will be stored in CurrentComment.", "Docs/Classes/DocumentationTool/Functions/SkipWhitespaceAndCommentsButRemem.html", ["skip", "whitespace", "and", "comments", "but", "remember", "last", "comment"], "DocumentationTool");
addToContainers_function("ParsePreprocessorCommand", "Expects Index to be right after the \'#\'", "Docs/Classes/DocumentationTool/Functions/ParsePreprocessorCommand.html", ["parse", "preprocessor", "command"], "DocumentationTool");
addToContainers_function("SkipPreprocessorCommand", "e.g. #error \"Count not large enough\" <--- in this case it must corrispond to any of \"#error\"", "Docs/Classes/DocumentationTool/Functions/SkipPreprocessorCommand.html", ["skip", "preprocessor", "command"], "DocumentationTool");
addToContainers_function("ParseUINTERFACE", "Expects Index to be right after \"UINTERFACE\"", "Docs/Classes/DocumentationTool/Functions/ParseUINTERFACE.html", ["parse", "u", "i", "n", "t", "e", "r", "f", "a", "c", "e"], "DocumentationTool");
addToContainers_function("ParseStructOrClass", "Expects index to be right after \"class\"/\"struct\"", "Docs/Classes/DocumentationTool/Functions/ParseStructOrClass.html", ["parse", "struct", "or", "class"], "DocumentationTool");
addToContainers_function("ParseUSTRUCTOrUCLASS", "Expects Index to be right after \"UCLASS\"/\"USTRUCT\"", "Docs/Classes/DocumentationTool/Functions/ParseUSTRUCTOrUCLASS.html", ["parse", "u", "s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s"], "DocumentationTool");
addToContainers_function("ParseEnum", "Expects Index to be right after \"enum\"", "Docs/Classes/DocumentationTool/Functions/ParseEnum.html", ["parse", "enum"], "DocumentationTool");
addToContainers_function("ParseUENUM", "Expects Index to be right after \"UENUM\"", "Docs/Classes/DocumentationTool/Functions/ParseUENUM.html", ["parse", "u", "e", "n", "u", "m"], "DocumentationTool");
addToContainers_function("ParseTypedef", "Expects Index to be at the character after \"typedef\"", "Docs/Classes/DocumentationTool/Functions/ParseTypedef.html", ["parse", "typedef"], "DocumentationTool");
addToContainers_function("ParseVariableOrFunctionDeclaration", "Expects Index to corrispond to the first character e.g. void MyFunc(int32 Param1); <--- here it should corrispond to the \'v\' in void", "Docs/Classes/DocumentationTool/Functions/ParseVariableOrFunctionDeclaratio.html", ["parse", "variable", "or", "function", "declaration"], "DocumentationTool");
addToContainers_function("ParseUSTRUCTOrUCLASSStuffInBrackets", "", "Docs/Classes/DocumentationTool/Functions/ParseUSTRUCTOrUCLASSStuffInBracke.html", ["parse", "u", "s", "t", "r", "u", "c", "t", "or", "u", "c", "l", "a", "s", "s", "stuff", "in", "brackets"], "DocumentationTool");
addToContainers_function("ParseUENUMUMETAStuffInBrackets", "", "Docs/Classes/DocumentationTool/Functions/ParseUENUMUMETAStuffInBrackets.html", ["parse", "u", "e", "n", "u", "m", "u", "m", "e", "t", "a", "stuff", "in", "brackets"], "DocumentationTool");
addToContainers_function("ParseUPROPERTYStuffInBrackets", "Expects Index to corrispond to the character after the \'(\'", "Docs/Classes/DocumentationTool/Functions/ParseUPROPERTYStuffInBrackets.html", ["parse", "u", "p", "r", "o", "p", "e", "r", "t", "y", "stuff", "in", "brackets"], "DocumentationTool");
addToContainers_function("ParseUFUNCTIONStuffInBrackets", "Expects Index to corrispond to the character after the \'(\'", "Docs/Classes/DocumentationTool/Functions/ParseUFUNCTIONStuffInBrackets.html", ["parse", "u", "f", "u", "n", "c", "t", "i", "o", "n", "stuff", "in", "brackets"], "DocumentationTool");
addToContainers_function("ParseUPROPERTYVariableDeclaration", "", "Docs/Classes/DocumentationTool/Functions/ParseUPROPERTYVariableDeclaration.html", ["parse", "u", "p", "r", "o", "p", "e", "r", "t", "y", "variable", "declaration"], "DocumentationTool");
addToContainers_function("ParseUFUNCTIONFunctionDeclaration", "", "Docs/Classes/DocumentationTool/Functions/ParseUFUNCTIONFunctionDeclaration.html", ["parse", "u", "f", "u", "n", "c", "t", "i", "o", "n", "function", "declaration"], "DocumentationTool");
addToContainers_function("ParseTemplateParameters", "Expects Index to corrispond to the character after the \'<\'. By the end of it Index will corrispond to the character after the \'>\'", "Docs/Classes/DocumentationTool/Functions/ParseTemplateParameters.html", ["parse", "template", "parameters"], "DocumentationTool");
addToContainers_function("ParseVariableTemplateValues", "Parse the template values for a variable e.g. UPROPERTY() TSubclassOf<...", "Docs/Classes/DocumentationTool/Functions/ParseVariableTemplateValues.html", ["parse", "variable", "template", "values"], "DocumentationTool");
addToContainers_function("ParseFunctionParameters", "Assumes the param Index corrisponds to the first character after the \'(\' in the function declaraction. By the end index will corrispond to the character after the closing curly bracket", "Docs/Classes/DocumentationTool/Functions/ParseFunctionParameters.html", ["parse", "function", "parameters"], "DocumentationTool");
addToContainers_function("ParseParameterTemplateValues", "Start: Index corrisponds to the first character after the \'<\' End: Index corrisponds to the first character after the \'>\'. Results are stored in OutResults", "Docs/Classes/DocumentationTool/Functions/ParseParameterTemplateValues.html", ["parse", "parameter", "template", "values"], "DocumentationTool");
addToContainers_function("ParseFunctionParamDefaultValue", "Start: Index corrisponds to char after the \'=\'", "Docs/Classes/DocumentationTool/Functions/ParseFunctionParamDefaultValue.html", ["parse", "function", "param", "default", "value"], "DocumentationTool");
addToContainers_function("SkipFunctionBody", "Assumes Index corrisponds to the character after the \'{\' signalling the start of the function body", "Docs/Classes/DocumentationTool/Functions/SkipFunctionBody.html", ["skip", "function", "body"], "DocumentationTool");
addToContainers_function("SkipTo", "Skip Index to corrispond to after a character in Chars. Comments encountered along the way are ignored. Also if S kipToChar is inside a comment is is ignored", "Docs/Classes/DocumentationTool/Functions/SkipTo.html", ["skip", "to"], "DocumentationTool");
addToContainers_function("SkipTo", "Skip to a char in Chars. Stores the last comment encountered (if any) into OutLastComment", "Docs/Classes/DocumentationTool/Functions/SkipTo_1.html", ["skip", "to"], "DocumentationTool");
addToContainers_function("SkipToEither", "Skip to either of the characters", "Docs/Classes/DocumentationTool/Functions/SkipToEither.html", ["skip", "to", "either"], "DocumentationTool");
addToContainers_function("SkipTo", "Skip to a string", "Docs/Classes/DocumentationTool/Functions/SkipTo_2.html", ["skip", "to"], "DocumentationTool");
addToContainers_function("SkipToClosingCurlyBracket", "Expects Index to corrispond to the character after the open curly bracket", "Docs/Classes/DocumentationTool/Functions/SkipToClosingCurlyBracket.html", ["skip", "to", "closing", "curly", "bracket"], "DocumentationTool");
addToContainers_function("RememberLastStringBefore", "Starts parsing characters and puts them into OutString. Will stop once it encounters whitespace or anything in EarlyExitList. Index will corrispond to the first character after what made the function stop", "Docs/Classes/DocumentationTool/Functions/RememberLastStringBefore.html", ["remember", "last", "string", "before"], "DocumentationTool");
addToContainers_function("PostProcessParsedData", "", "Docs/Classes/DocumentationTool/Functions/PostProcessParsedData.html", ["post", "process", "parsed", "data"], "DocumentationTool");
addToContainers_function("PostProcessComment", "One thing this will do is add escape characters before quotes so that when the comment is copied into html it\'s all good @return - post processed comment", "Docs/Classes/DocumentationTool/Functions/PostProcessComment.html", ["post", "process", "comment"], "DocumentationTool");
addToContainers_function("GenerateHTMLFiles", "Create the HTML files using data in RAM @return - true if everything went as planned", "Docs/Classes/DocumentationTool/Functions/GenerateHTMLFiles.html", ["generate", "h", "t", "m", "l", "files"], "DocumentationTool");
addToContainers_function("UploadHTMLFilesToGitHub", "", "Docs/Classes/DocumentationTool/Functions/UploadHTMLFilesToGitHub.html", ["upload", "h", "t", "m", "l", "files", "to", "git", "hub"], "DocumentationTool");
addToContainers_function("AddCurrentUINTERFACE", "Adds CurrentUINTERFACE to ParsedUINTERFACEs", "Docs/Classes/DocumentationTool/Functions/AddCurrentUINTERFACE.html", ["add", "current", "u", "i", "n", "t", "e", "r", "f", "a", "c", "e"], "DocumentationTool");
addToContainers_function("AddCurrentEnum", "", "Docs/Classes/DocumentationTool/Functions/AddCurrentEnum.html", ["add", "current", "enum"], "DocumentationTool");
addToContainers_function("GetFileContentsAroundCharNumber", "This is a debugging function. Returns the lines around a index for the current file being parsed", "Docs/Classes/DocumentationTool/Functions/GetFileContentsAroundCharNumber.html", ["get", "file", "contents", "around", "char", "number"], "DocumentationTool");
addToContainers_function("GetAreaAroundIndex", "e.g. the file: class ARTSPlayerController; If AreaRadius = 3 and Index is 7 this should return: s ARTSP", "Docs/Classes/DocumentationTool/Functions/GetAreaAroundIndex.html", ["get", "area", "around", "index"], "DocumentationTool");
addToContainers_function("GetAreaAroundIndex", "", "Docs/Classes/DocumentationTool/Functions/GetAreaAroundIndex_1.html", ["get", "area", "around", "index"], "DocumentationTool");
addToContainers_function("GetHumanReadableChar", "", "Docs/Classes/DocumentationTool/Functions/GetHumanReadableChar.html", ["get", "human", "readable", "char"], "DocumentationTool");
addToContainers_function("CHECK_FOR_ERRORS", "Debugging function. Checks if Index is valid. If not will log something and stop parsing", "Docs/Classes/DocumentationTool/Functions/CHECK_FOR_ERRORS.html", ["h", "e", "c", "k_", "f", "o", "r_", "e", "r", "r", "o", "r", "s"], "DocumentationTool");
addToContainers_function("GetParsedStructsAndClasses", "", "Docs/Classes/DocumentationTool/Functions/GetParsedStructsAndClasses.html", ["get", "parsed", "structs", "and", "classes"], "DocumentationTool");
addToContainers_function("GetParsedEnums", "", "Docs/Classes/DocumentationTool/Functions/GetParsedEnums.html", ["get", "parsed", "enums"], "DocumentationTool");
addToContainers_function("", "--------------------------------------------------------------", "Docs/Classes/DocumentationTool/Functions/.html", [], "DocumentationTool");
addToContainers_function("", "", "Docs/Classes/DocumentationTool/Functions/_1.html", [], "DocumentationTool");
addToContainers_function("GetHumanReadableString", "This function will add things like \"<NULLCHAR> or whatever to make the string easier to read @return - a string that\'s hopfully easier to read", "Docs/Classes/DocumentationTool/Functions/GetHumanReadableString.html", ["get", "human", "readable", "string"], "DocumentationTool");
addToContainers_variable("bParseCppFiles", "Whether to parse .cpp files", "Docs/Classes/DocumentationTool/Variables/bParseCppFiles.html", ["parse", "cpp", "files"], "DocumentationTool");
addToContainers_variable("ExcludeList", "Holds names of files to exclude from being parsed", "Docs/Classes/DocumentationTool/Variables/ExcludeList.html", ["exclude", "list"], "DocumentationTool");
addToContainers_variable("bTesting", "If true then only parse the files on TestList and ignore all else. This is just a debugging variable", "Docs/Classes/DocumentationTool/Variables/bTesting.html", [], "DocumentationTool");
addToContainers_variable("TestList", "List of names of files to parse. Will only be used if bTesting is true. This is just a debugging variable", "Docs/Classes/DocumentationTool/Variables/TestList.html", ["test", "list"], "DocumentationTool");
addToContainers_variable("CurrentParsingFileName", "Name of the file currently being parsed", "Docs/Classes/DocumentationTool/Variables/CurrentParsingFileName.html", ["current", "parsing", "file", "name"], "DocumentationTool");
addToContainers_variable("Chars", "Pointer to array of characters currently being parsed", "Docs/Classes/DocumentationTool/Variables/Chars.html", [], "DocumentationTool");
addToContainers_variable("Index", "Index into Chars parsing is currently at", "Docs/Classes/DocumentationTool/Variables/Index.html", [], "DocumentationTool");
addToContainers_variable("CurrentComment", "A comment", "Docs/Classes/DocumentationTool/Variables/CurrentComment.html", ["current", "comment"], "DocumentationTool");
addToContainers_variable("CurrentAccessSpecifier", "The current access specifier of the CurrentClassOrStruct", "Docs/Classes/DocumentationTool/Variables/CurrentAccessSpecifier.html", ["current", "access", "specifier"], "DocumentationTool");
addToContainers_variable("CurrentClassOrStruct", "", "Docs/Classes/DocumentationTool/Variables/CurrentClassOrStruct.html", ["current", "class", "or", "struct"], "DocumentationTool");
addToContainers_variable("CurrentEnumValue", "", "Docs/Classes/DocumentationTool/Variables/CurrentEnumValue.html", ["current", "enum", "value"], "DocumentationTool");
addToContainers_variable("CurrentEnum", "", "Docs/Classes/DocumentationTool/Variables/CurrentEnum.html", ["current", "enum"], "DocumentationTool");
addToContainers_variable("CurrentUINTERFACE", "", "Docs/Classes/DocumentationTool/Variables/CurrentUINTERFACE.html", ["current", "u", "i", "n", "t", "e", "r", "f", "a", "c", "e"], "DocumentationTool");
addToContainers_variable("CurrentUFUNCTIONUFUNCTIONSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUFUNCTIONUFUNCTIONSpecifie.html", ["current", "u", "f", "u", "n", "c", "t", "i", "o", "n", "u", "f", "u", "n", "c", "t", "i", "o", "n", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentUFUNCTIONUFUNCTIONMetaSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUFUNCTIONUFUNCTIONMetaSpec.html", ["current", "u", "f", "u", "n", "c", "t", "i", "o", "n", "u", "f", "u", "n", "c", "t", "i", "o", "n", "meta", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentFunctionTemplateParameters", "", "Docs/Classes/DocumentationTool/Variables/CurrentFunctionTemplateParameters.html", ["current", "function", "template", "parameters"], "DocumentationTool");
addToContainers_variable("CurrentFunctionParameters", "", "Docs/Classes/DocumentationTool/Variables/CurrentFunctionParameters.html", ["current", "function", "parameters"], "DocumentationTool");
addToContainers_variable("CurrentUPROPERTYSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUPROPERTYSpecifiers.html", ["current", "u", "p", "r", "o", "p", "e", "r", "t", "y", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentUPROPERTYMetaSpecifiers", "", "Docs/Classes/DocumentationTool/Variables/CurrentUPROPERTYMetaSpecifiers.html", ["current", "u", "p", "r", "o", "p", "e", "r", "t", "y", "meta", "specifiers"], "DocumentationTool");
addToContainers_variable("CurrentVariable", "", "Docs/Classes/DocumentationTool/Variables/CurrentVariable.html", ["current", "variable"], "DocumentationTool");
addToContainers_variable("ParsedStructsAndClasses", "Contains all information about all structs and classes that have been parsed so far (includes USTRUCTs and UCLASSes)", "Docs/Classes/DocumentationTool/Variables/ParsedStructsAndClasses.html", ["parsed", "structs", "and", "classes"], "DocumentationTool");
addToContainers_variable("ParsedEnums", "Contains all information about all enum that have been parsed so far (includes UENUMs)", "Docs/Classes/DocumentationTool/Variables/ParsedEnums.html", ["parsed", "enums"], "DocumentationTool");
addToContainers_variable("ParsedUINTERFACEs", "Contains information about all parsed UINTERFACEs", "Docs/Classes/DocumentationTool/Variables/ParsedUINTERFACEs.html", ["parsed", "u", "i", "n", "t", "e", "r", "f", "a", "c", "es"], "DocumentationTool");
addToContainers_variable("", "", "Docs/Classes/DocumentationTool/Variables/.html", [], "DocumentationTool");
addToContainers_variable("ParsedFiles", "Holds the names of files that have been parsed", "Docs/Classes/DocumentationTool/Variables/ParsedFiles.html", ["parsed", "files"], "DocumentationTool");
addToContainers_variable("", "", "Docs/Classes/DocumentationTool/Variables/_1.html", [], "DocumentationTool");
addToContainers_variable("NumFunctionCalls", "Maps function name to how many times it was called", "Docs/Classes/DocumentationTool/Variables/NumFunctionCalls.html", ["num", "function", "calls"], "DocumentationTool");
addToContainers_struct("FunctionReturnType", "These structs are for DocumentationTool_Engine", "Docs/Structs/FunctionReturnType/FunctionReturnType.html", ["function", "return", "type"], "");
addToContainers_function("FunctionReturnType", "", "Docs/Structs/FunctionReturnType/Functions/FunctionReturnType.html", ["function", "return", "type"], "FunctionReturnType");
addToContainers_function("FunctionReturnType", "", "Docs/Structs/FunctionReturnType/Functions/FunctionReturnType_1.html", ["function", "return", "type"], "FunctionReturnType");
addToContainers_function("S2)", "Note const pointer will need to be in here", "Docs/Structs/FunctionReturnType/Functions/S2).html", [], "FunctionReturnType");
addToContainers_variable("bIsConst", "", "Docs/Structs/FunctionReturnType/Variables/bIsConst.html", ["is", "const"], "FunctionReturnType");
addToContainers_variable("Type", "", "Docs/Structs/FunctionReturnType/Variables/Type.html", [], "FunctionReturnType");
addToContainers_variable("Pointers", "", "Docs/Structs/FunctionReturnType/Variables/Pointers.html", [], "FunctionReturnType");
addToContainers_struct("FunctionParameter", "", "Docs/Structs/FunctionParameter/FunctionParameter.html", ["function", "parameter"], "");
addToContainers_function("FunctionParameter", "", "Docs/Structs/FunctionParameter/Functions/FunctionParameter.html", ["function", "parameter"], "FunctionParameter");
addToContainers_function("GetStringForCachedClassInfoFile", "", "Docs/Structs/FunctionParameter/Functions/GetStringForCachedClassInfoFile.html", ["get", "string", "for", "cached", "class", "info", "file"], "FunctionParameter");
addToContainers_function("S2)", "", "Docs/Structs/FunctionParameter/Functions/S2).html", [], "FunctionParameter");
addToContainers_variable("bIsConst", "", "Docs/Structs/FunctionParameter/Variables/bIsConst.html", ["is", "const"], "FunctionParameter");
addToContainers_variable("Type", "", "Docs/Structs/FunctionParameter/Variables/Type.html", [], "FunctionParameter");
addToContainers_variable("VariableTemplateValues", "", "Docs/Structs/FunctionParameter/Variables/VariableTemplateValues.html", ["variable", "template", "values"], "FunctionParameter");
addToContainers_variable("Pointers", "", "Docs/Structs/FunctionParameter/Variables/Pointers.html", [], "FunctionParameter");
addToContainers_variable("Name", "", "Docs/Structs/FunctionParameter/Variables/Name.html", [], "FunctionParameter");
addToContainers_struct("VirtualFunctionSignature", "", "Docs/Structs/VirtualFunctionSignature/VirtualFunctionSignature.html", ["virtual", "function", "signature"], "");
addToContainers_function("VirtualFunctionSignature", "", "Docs/Structs/VirtualFunctionSignature/Functions/VirtualFunctionSignature.html", ["virtual", "function", "signature"], "VirtualFunctionSignature");
addToContainers_function("VirtualFunctionSignature", "", "Docs/Structs/VirtualFunctionSignature/Functions/VirtualFunctionSignature_1.html", ["virtual", "function", "signature"], "VirtualFunctionSignature");
addToContainers_function("GetStringForCachedClassInfoFile", "", "Docs/Structs/VirtualFunctionSignature/Functions/GetStringForCachedClassInfoFile.html", ["get", "string", "for", "cached", "class", "info", "file"], "VirtualFunctionSignature");
addToContainers_function("S2)", "", "Docs/Structs/VirtualFunctionSignature/Functions/S2).html", [], "VirtualFunctionSignature");
addToContainers_variable("ReturnType", "", "Docs/Structs/VirtualFunctionSignature/Variables/ReturnType.html", ["return", "type"], "VirtualFunctionSignature");
addToContainers_variable("Name", "", "Docs/Structs/VirtualFunctionSignature/Variables/Name.html", [], "VirtualFunctionSignature");
addToContainers_variable("Parameters", "", "Docs/Structs/VirtualFunctionSignature/Variables/Parameters.html", [], "VirtualFunctionSignature");
addToContainers_variable("bIsConst", "", "Docs/Structs/VirtualFunctionSignature/Variables/bIsConst.html", ["is", "const"], "VirtualFunctionSignature");
addToContainers_struct("EngineClassInfo", "Actually also struct info", "Docs/Structs/EngineClassInfo/EngineClassInfo.html", ["engine", "class", "info"], "");
addToContainers_function("EngineClassInfo", "", "Docs/Structs/EngineClassInfo/Functions/EngineClassInfo.html", ["engine", "class", "info"], "EngineClassInfo");
addToContainers_function("RecursiveAppendParents", "Append to out param all parents, grandparents, great grandparents, etc", "Docs/Structs/EngineClassInfo/Functions/RecursiveAppendParents.html", ["recursive", "append", "parents"], "EngineClassInfo");
addToContainers_variable("Parents", "Name of parents, including interfaces", "Docs/Structs/EngineClassInfo/Variables/Parents.html", [], "EngineClassInfo");
addToContainers_variable("bHaveVirtualsBeenConfirmed", "If true then VirtualFunctions contains only virtual functions introduced by this class/truct", "Docs/Structs/EngineClassInfo/Variables/bHaveVirtualsBeenConfirmed.html", ["have", "virtuals", "been", "confirmed"], "EngineClassInfo");
addToContainers_variable("VirtualFunctions", "Virtual functions that this class introduced NOT any overridden virtuals", "Docs/Structs/EngineClassInfo/Variables/VirtualFunctions.html", ["virtual", "functions"], "EngineClassInfo");
addToContainers_variable("RelativeDocumentationURL", "Unreal Engine documentation website. Relative to https://docs.unrealengine.com/en-US/API/", "Docs/Structs/EngineClassInfo/Variables/RelativeDocumentationURL.html", ["relative", "documentation", "u", "r", "l"], "EngineClassInfo");
addToContainers_variable("FileDeclaredIn", "Path to file this class was declared in. Will probably not count any forward declarations", "Docs/Structs/EngineClassInfo/Variables/FileDeclaredIn.html", ["file", "declared", "in"], "EngineClassInfo");
addToContainers_class("DocumentationTool_Engine", "The goal of this class is to gather information about the classes/structs native to the engine Info we gather: - inheritance hierarchy - virtual functions and their signatures - website URL to the class\'/struct\'s documentation page How this is done: - inheritance hierarachy and virtual functions: parse the whole engine source code of your project - website URL: download the \'all classes\' doc website source and extract the links from that", "Docs/Classes/DocumentationTool_Engine/DocumentationTool_Engine.html", ["documentation", "tool_", "engine"], "");
addToContainers_function("DocumentationTool_Engine", "@param InWorld - a UWorld. It needs this to run some timer handles and query the time. Any world is probably OK. If in editor and you\'re running this via an editor utility widget you probably want to use the editor world GEditor->GetEditorWorldContext().World()", "Docs/Classes/DocumentationTool_Engine/Functions/DocumentationTool_Engine.html", ["documentation", "tool_", "engine"], "DocumentationTool_Engine");
addToContainers_function("GatherEngineClassAndStructData", "- Figure out the website URL for the documentation page on the unreal engine documentation", "Docs/Classes/DocumentationTool_Engine/Functions/GatherEngineClassAndStructData.html", ["gather", "engine", "class", "and", "struct", "data"], "DocumentationTool_Engine");
addToContainers_function("ParseEngineHeaderFile", "", "Docs/Classes/DocumentationTool_Engine/Functions/ParseEngineHeaderFile.html", ["parse", "engine", "header", "file"], "DocumentationTool_Engine");
addToContainers_function("ParseClassBodyForVirtuals", "", "Docs/Classes/DocumentationTool_Engine/Functions/ParseClassBodyForVirtuals.html", ["parse", "class", "body", "for", "virtuals"], "DocumentationTool_Engine");
addToContainers_function("ParseUnrealDocumentationAllClassesSite", "documentation page", "Docs/Classes/DocumentationTool_Engine/Functions/ParseUnrealDocumentationAllClasse.html", ["parse", "unreal", "documentation", "all", "classes", "site"], "DocumentationTool_Engine");
addToContainers_function("BusyWaitForEngineDocsFileDownloadToComplete", "", "Docs/Classes/DocumentationTool_Engine/Functions/BusyWaitForEngineDocsFileDownload.html", ["busy", "wait", "for", "engine", "docs", "file", "download", "to", "complete"], "DocumentationTool_Engine");
addToContainers_function("ParseUnrealDocumentationAllClassesSite_Part2", "", "Docs/Classes/DocumentationTool_Engine/Functions/ParseUnrealDocumentationAllClasse_1.html", ["parse", "unreal", "documentation", "all", "classes", "site_", "part2"], "DocumentationTool_Engine");
addToContainers_function("GetVirtualFunctions", "", "Docs/Classes/DocumentationTool_Engine/Functions/GetVirtualFunctions.html", ["get", "virtual", "functions"], "DocumentationTool_Engine");
addToContainers_function("RecursiveConfirmVirtualsInner", "", "Docs/Classes/DocumentationTool_Engine/Functions/RecursiveConfirmVirtualsInner.html", ["recursive", "confirm", "virtuals", "inner"], "DocumentationTool_Engine");
addToContainers_function("CreateAndWriteToCachedClassHierarchyFile", "Write contents of ClassNameToInfo to file", "Docs/Classes/DocumentationTool_Engine/Functions/CreateAndWriteToCachedClassHierar.html", ["create", "and", "write", "to", "cached", "class", "hierarchy", "file"], "DocumentationTool_Engine");
addToContainers_function("LoadCachedClassHierarchyFile", "Populate ClassNameToInfo using the file stored on harddrive", "Docs/Classes/DocumentationTool_Engine/Functions/LoadCachedClassHierarchyFile.html", ["load", "cached", "class", "hierarchy", "file"], "DocumentationTool_Engine");
addToContainers_function("SkipWhitespaceAndComments", "them there instead", "Docs/Classes/DocumentationTool_Engine/Functions/SkipWhitespaceAndComments.html", ["skip", "whitespace", "and", "comments"], "DocumentationTool_Engine");
addToContainers_function("AtStartOfComment", "", "Docs/Classes/DocumentationTool_Engine/Functions/AtStartOfComment.html", ["at", "start", "of", "comment"], "DocumentationTool_Engine");
addToContainers_function("SkipSingleLineComments", "", "Docs/Classes/DocumentationTool_Engine/Functions/SkipSingleLineComments.html", ["skip", "single", "line", "comments"], "DocumentationTool_Engine");
addToContainers_function("SkipMultiLineComment", "", "Docs/Classes/DocumentationTool_Engine/Functions/SkipMultiLineComment.html", ["skip", "multi", "line", "comment"], "DocumentationTool_Engine");
addToContainers_function("SkipPreprocessorCommand", "e.g. #error \"Count not large enough\" <--- in this case it must corrispond to any of \"#error\"", "Docs/Classes/DocumentationTool_Engine/Functions/SkipPreprocessorCommand.html", ["skip", "preprocessor", "command"], "DocumentationTool_Engine");
addToContainers_function("SkipTypedef", "", "Docs/Classes/DocumentationTool_Engine/Functions/SkipTypedef.html", ["skip", "typedef"], "DocumentationTool_Engine");
addToContainers_function("SkipFunctionBody", "", "Docs/Classes/DocumentationTool_Engine/Functions/SkipFunctionBody.html", ["skip", "function", "body"], "DocumentationTool_Engine");
addToContainers_function("SkipToClosingCurlyBracket", "", "Docs/Classes/DocumentationTool_Engine/Functions/SkipToClosingCurlyBracket.html", ["skip", "to", "closing", "curly", "bracket"], "DocumentationTool_Engine");
addToContainers_function("ParseVirtualFunctionParameters", "@param OutParameters - out virtual function parameters", "Docs/Classes/DocumentationTool_Engine/Functions/ParseVirtualFunctionParameters.html", ["parse", "virtual", "function", "parameters"], "DocumentationTool_Engine");
addToContainers_function("ParseVirtualFunctionParameterTemplateValues", "", "Docs/Classes/DocumentationTool_Engine/Functions/ParseVirtualFunctionParameterTemp.html", ["parse", "virtual", "function", "parameter", "template", "values"], "DocumentationTool_Engine");
addToContainers_function("AtEOF", "Return true if at end of file", "Docs/Classes/DocumentationTool_Engine/Functions/AtEOF.html", ["at", "e", "o", "f"], "DocumentationTool_Engine");
addToContainers_function("ParseToken", "", "Docs/Classes/DocumentationTool_Engine/Functions/ParseToken.html", ["parse", "token"], "DocumentationTool_Engine");
addToContainers_function("ParseToken", "", "Docs/Classes/DocumentationTool_Engine/Functions/ParseToken_1.html", ["parse", "token"], "DocumentationTool_Engine");
addToContainers_function("ParsePreviousToken", "Goes backwards in file and parses the first token it finds. Does not modify Index.", "Docs/Classes/DocumentationTool_Engine/Functions/ParsePreviousToken.html", ["parse", "previous", "token"], "DocumentationTool_Engine");
addToContainers_function("SkipToken", "", "Docs/Classes/DocumentationTool_Engine/Functions/SkipToken.html", ["skip", "token"], "DocumentationTool_Engine");
addToContainers_function("SkipTo", "", "Docs/Classes/DocumentationTool_Engine/Functions/SkipTo.html", ["skip", "to"], "DocumentationTool_Engine");
addToContainers_function("IsWhitespace", "", "Docs/Classes/DocumentationTool_Engine/Functions/IsWhitespace.html", ["is", "whitespace"], "DocumentationTool_Engine");
addToContainers_function("GetAreaAroundIndex", "", "Docs/Classes/DocumentationTool_Engine/Functions/GetAreaAroundIndex.html", ["get", "area", "around", "index"], "DocumentationTool_Engine");
addToContainers_function("ToHumanReadableChar", "", "Docs/Classes/DocumentationTool_Engine/Functions/ToHumanReadableChar.html", ["to", "human", "readable", "char"], "DocumentationTool_Engine");
addToContainers_function("GetStringForCachedClassInfoFile", "", "Docs/Classes/DocumentationTool_Engine/Functions/GetStringForCachedClassInfoFile.html", ["get", "string", "for", "cached", "class", "info", "file"], "DocumentationTool_Engine");
addToContainers_variable("World", "A world so timers can be set", "Docs/Classes/DocumentationTool_Engine/Variables/World.html", [], "DocumentationTool_Engine");
addToContainers_variable("HeaderFileBeingParsed", "The name of the header file that is being parsed", "Docs/Classes/DocumentationTool_Engine/Variables/HeaderFileBeingParsed.html", ["header", "file", "being", "parsed"], "DocumentationTool_Engine");
addToContainers_variable("TimeBusyWaitForDocsFileDownloadToCompleteStarted", "World->GetRealTimeSeconds() when starting trying to download engine doc file", "Docs/Classes/DocumentationTool_Engine/Variables/TimeBusyWaitForDocsFileDownloadTo.html", ["time", "busy", "wait", "for", "docs", "file", "download", "to", "complete", "started"], "DocumentationTool_Engine");
addToContainers_variable("CachedEngineClassesFilePath", "This is where to store the file that will contain all the info about engine classes. Having this on file will hopefully speed up the process", "Docs/Classes/DocumentationTool_Engine/Variables/CachedEngineClassesFilePath.html", ["cached", "engine", "classes", "file", "path"], "DocumentationTool_Engine");
addToContainers_variable("WebsiteSourceBatchFilePath", "Folder path for batch file that downloads UE doc source", "Docs/Classes/DocumentationTool_Engine/Variables/WebsiteSourceBatchFilePath.html", ["website", "source", "batch", "file", "path"], "DocumentationTool_Engine");
addToContainers_variable("WebsiteSourceFileLocation", "Where on disk to save the UE doc file source", "Docs/Classes/DocumentationTool_Engine/Variables/WebsiteSourceFileLocation.html", ["website", "source", "file", "location"], "DocumentationTool_Engine");
addToContainers_variable("ClassNameToInfo", "Maps the name of the class to info about it", "Docs/Classes/DocumentationTool_Engine/Variables/ClassNameToInfo.html", ["class", "name", "to", "info"], "DocumentationTool_Engine");
addToContainers_variable("bTesting", "Debug variable. If true then you specify which files to parse", "Docs/Classes/DocumentationTool_Engine/Variables/bTesting.html", [], "DocumentationTool_Engine");
addToContainers_class("DocumentationTool_HTML", "This class generates the HTML/CSS/Javascript for the website", "Docs/Classes/DocumentationTool_HTML/DocumentationTool_HTML.html", ["documentation", "tool_", "h", "t", "m", "l"], "");
addToContainers_function("DocumentationTool_HTML", "", "Docs/Classes/DocumentationTool_HTML/Functions/DocumentationTool_HTML.html", ["documentation", "tool_", "h", "t", "m", "l"], "DocumentationTool_HTML");
addToContainers_function("AssignRelativeFolderPath_Class", "Assign a folder path to a class", "Docs/Classes/DocumentationTool_HTML/Functions/AssignRelativeFolderPath_Class.html", ["assign", "relative", "folder", "path_", "class"], "DocumentationTool_HTML");
addToContainers_function("AssignRelativeFolderPath_Struct", "Assign folder path to a struct", "Docs/Classes/DocumentationTool_HTML/Functions/AssignRelativeFolderPath_Struct.html", ["assign", "relative", "folder", "path_", "struct"], "DocumentationTool_HTML");
addToContainers_function("AssignRelativeFolderPath_Enum", "", "Docs/Classes/DocumentationTool_HTML/Functions/AssignRelativeFolderPath_Enum.html", ["assign", "relative", "folder", "path_", "enum"], "DocumentationTool_HTML");
addToContainers_function("AssignRelativeFolderPath_Function", "@param FunctionOwnersRelativePath - the class/struct that this function belongs to. If the function does not belong to a class then this can be left blank", "Docs/Classes/DocumentationTool_HTML/Functions/AssignRelativeFolderPath_Function.html", ["assign", "relative", "folder", "path_", "function"], "DocumentationTool_HTML");
addToContainers_function("AssignRelativeFolderPath_Variable", "", "Docs/Classes/DocumentationTool_HTML/Functions/AssignRelativeFolderPath_Variable.html", ["assign", "relative", "folder", "path_", "variable"], "DocumentationTool_HTML");
addToContainers_function("AssignRelativeFolderPath_EnumValue", "", "Docs/Classes/DocumentationTool_HTML/Functions/AssignRelativeFolderPath_EnumValu.html", ["assign", "relative", "folder", "path_", "enum", "value"], "DocumentationTool_HTML");
addToContainers_function("GetPartialWordsFromClassName", "Get an array of single words that make up a class e.g. \"ABuilding\" will just return an empty array \"AInfantryController\" will return an array with \"Infantry\" and \"Controller\" in it", "Docs/Classes/DocumentationTool_HTML/Functions/GetPartialWordsFromClassName.html", ["get", "partial", "words", "from", "class", "name"], "DocumentationTool_HTML");
addToContainers_function("GetPartialWordsFromStructName", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetPartialWordsFromStructName.html", ["get", "partial", "words", "from", "struct", "name"], "DocumentationTool_HTML");
addToContainers_function("GetPartialWordsFromEnumName", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetPartialWordsFromEnumName.html", ["get", "partial", "words", "from", "enum", "name"], "DocumentationTool_HTML");
addToContainers_function("GetPartialWordsFromFunctionName", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetPartialWordsFromFunctionName.html", ["get", "partial", "words", "from", "function", "name"], "DocumentationTool_HTML");
addToContainers_function("GetPartialWordsFromVariableName", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetPartialWordsFromVariableName.html", ["get", "partial", "words", "from", "variable", "name"], "DocumentationTool_HTML");
addToContainers_function("GetPartialWordsFromEnumValueName", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetPartialWordsFromEnumValueName.html", ["get", "partial", "words", "from", "enum", "value", "name"], "DocumentationTool_HTML");
addToContainers_function("AppendBasicJavascript", "Append to JS the javascript code that is required for displaying search results @param ItemName - e.g. ABuilding, AInfantry, Health, etc @param ItemOwner - the class/struct/enum that the item belongs to. Can be left blank", "Docs/Classes/DocumentationTool_HTML/Functions/AppendBasicJavascript.html", ["append", "basic", "javascript"], "DocumentationTool_HTML");
addToContainers_function("CreateSeperateHTMLFileForClass", "Creates the big HTML file that displays all the info about the class", "Docs/Classes/DocumentationTool_HTML/Functions/CreateSeperateHTMLFileForClass.html", ["create", "seperate", "h", "t", "m", "l", "file", "for", "class"], "DocumentationTool_HTML");
addToContainers_function("CreateSeperateHTMLFileForStruct", "", "Docs/Classes/DocumentationTool_HTML/Functions/CreateSeperateHTMLFileForStruct.html", ["create", "seperate", "h", "t", "m", "l", "file", "for", "struct"], "DocumentationTool_HTML");
addToContainers_function("CreateSeperateHTMLFileForEnum", "", "Docs/Classes/DocumentationTool_HTML/Functions/CreateSeperateHTMLFileForEnum.html", ["create", "seperate", "h", "t", "m", "l", "file", "for", "enum"], "DocumentationTool_HTML");
addToContainers_function("CreateSeperateHTMLFileForFunction", "", "Docs/Classes/DocumentationTool_HTML/Functions/CreateSeperateHTMLFileForFunction.html", ["create", "seperate", "h", "t", "m", "l", "file", "for", "function"], "DocumentationTool_HTML");
addToContainers_function("CreateSeperateHTMLFileForVariable", "", "Docs/Classes/DocumentationTool_HTML/Functions/CreateSeperateHTMLFileForVariable.html", ["create", "seperate", "h", "t", "m", "l", "file", "for", "variable"], "DocumentationTool_HTML");
addToContainers_function("CreateSeperateHTMLFileForEnumValue", "", "Docs/Classes/DocumentationTool_HTML/Functions/CreateSeperateHTMLFileForEnumValu.html", ["create", "seperate", "h", "t", "m", "l", "file", "for", "enum", "value"], "DocumentationTool_HTML");
addToContainers_function("GetSeperateHTMLFileHTMLForClass", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetSeperateHTMLFileHTMLForClass.html", ["get", "seperate", "h", "t", "m", "l", "file", "h", "t", "m", "l", "for", "class"], "DocumentationTool_HTML");
addToContainers_function("GetSeperateHTMLFileHTMLForStruct", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetSeperateHTMLFileHTMLForStruct.html", ["get", "seperate", "h", "t", "m", "l", "file", "h", "t", "m", "l", "for", "struct"], "DocumentationTool_HTML");
addToContainers_function("GetSeperateHTMLFileHTMLForEnum", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetSeperateHTMLFileHTMLForEnum.html", ["get", "seperate", "h", "t", "m", "l", "file", "h", "t", "m", "l", "for", "enum"], "DocumentationTool_HTML");
addToContainers_function("GetSeperateHTMLFileHTMLForFunction", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetSeperateHTMLFileHTMLForFunctio.html", ["get", "seperate", "h", "t", "m", "l", "file", "h", "t", "m", "l", "for", "function"], "DocumentationTool_HTML");
addToContainers_function("GetSeperateHTMLFileHTMLForVariable", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetSeperateHTMLFileHTMLForVariabl.html", ["get", "seperate", "h", "t", "m", "l", "file", "h", "t", "m", "l", "for", "variable"], "DocumentationTool_HTML");
addToContainers_function("GetSeperateHTMLFileHTMLForEnumValue", "", "Docs/Classes/DocumentationTool_HTML/Functions/GetSeperateHTMLFileHTMLForEnumVal.html", ["get", "seperate", "h", "t", "m", "l", "file", "h", "t", "m", "l", "for", "enum", "value"], "DocumentationTool_HTML");
addToContainers_function("UploadDocumentationFilesToGitHub", "", "Docs/Classes/DocumentationTool_HTML/Functions/UploadDocumentationFilesToGitHub.html", ["upload", "documentation", "files", "to", "git", "hub"], "DocumentationTool_HTML");
addToContainers_variable("SearchTokenToPathsContainer", "Names of some variables in javascript", "Docs/Classes/DocumentationTool_HTML/Variables/SearchTokenToPathsContainer.html", ["search", "token", "to", "paths", "container"], "DocumentationTool_HTML");
addToContainers_variable("PathToBasicInfoContainer", "", "Docs/Classes/DocumentationTool_HTML/Variables/PathToBasicInfoContainer.html", ["path", "to", "basic", "info", "container"], "DocumentationTool_HTML");
addToContainers_variable("PATH_TOKEN_CHAR_LIMIT", "How long to limit names of classes/functions etc when generating their folder paths.", "Docs/Classes/DocumentationTool_HTML/Variables/PATH_TOKEN_CHAR_LIMIT.html", ["a", "t", "h_", "t", "o", "k", "e", "n_", "c", "h", "a", "r_", "l", "i", "m", "i", "t"], "DocumentationTool_HTML");
addToContainers_variable("JS", "Code to be appended to a javascript file most likely SearchData.js", "Docs/Classes/DocumentationTool_HTML/Variables/JS.html", [], "DocumentationTool_HTML");
addToContainers_variable("MoreJS", "More javascript code. This contains the code that adds stuff to the trie for the search box", "Docs/Classes/DocumentationTool_HTML/Variables/MoreJS.html", ["more", "j", "s"], "DocumentationTool_HTML");
addToContainers_variable("PathsInUse", "Folder paths that are already taken", "Docs/Classes/DocumentationTool_HTML/Variables/PathsInUse.html", ["paths", "in", "use"], "DocumentationTool_HTML");
addToContainers_class("UDocToolTestUObject", "A test comment blah blah blah", "Docs/Classes/UDocToolTestUObject/UDocToolTestUObject.html", ["doc", "tool", "test", "u", "object"], "");
addToContainers_variable("SomeInt", "An int", "Docs/Classes/UDocToolTestUObject/Variables/SomeInt.html", ["some", "int"], "UDocToolTestUObject");
addToContainers_variable("", "Blah", "Docs/Classes/UDocToolTestUObject/Variables/.html", [], "UDocToolTestUObject");
addToContainers_struct("FSomeTestStruct", "A test struct for documentation", "Docs/Structs/FSomeTestStruct/FSomeTestStruct.html", ["some", "test", "struct"], "");
addToContainers_variable("A64BitInt", "", "Docs/Structs/FSomeTestStruct/Variables/A64BitInt.html", ["a64", "bit", "int"], "FSomeTestStruct");
addToContainers_class("AMyTestClass", "", "Docs/Classes/AMyTestClass/AMyTestClass.html", ["my", "test", "class"], "");
addToContainers_function("MyFunc", "A comment", "Docs/Classes/AMyTestClass/Functions/MyFunc.html", ["my", "func"], "AMyTestClass");
addToContainers_function("Func2", "", "Docs/Classes/AMyTestClass/Functions/Func2.html", [], "AMyTestClass");
addToContainers_class("APlayerCamera", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Classes/APlayerCamera/APlayerCamera.html", ["player", "camera"], "");
addToContainers_function("APlayerCamera", "Sets default values for this pawn\'s properties", "Docs/Classes/APlayerCamera/Functions/APlayerCamera.html", ["player", "camera"], "APlayerCamera");
addToContainers_function("BeginPlay", "Called when the game starts or when spawned", "Docs/Classes/APlayerCamera/Functions/BeginPlay.html", ["begin", "play"], "APlayerCamera");
addToContainers_function("Tick", "Called every frame", "Docs/Classes/APlayerCamera/Functions/Tick.html", [], "APlayerCamera");
addToContainers_function("PossessedBy", "Called when possessed", "Docs/Classes/APlayerCamera/Functions/PossessedBy.html", ["possessed", "by"], "APlayerCamera");
addToContainers_function("OnRep_Controller", "", "Docs/Classes/APlayerCamera/Functions/OnRep_Controller.html", ["on", "rep_", "controller"], "APlayerCamera");
addToContainers_function("DestroyIfNotOurs", "Destroy this camera if it does not belong to the local player controller", "Docs/Classes/APlayerCamera/Functions/DestroyIfNotOurs.html", ["destroy", "if", "not", "ours"], "APlayerCamera");
addToContainers_function("SnapToLocation", "Teleport the camera to a location. @param Location - world location to teleport camera to @param bSnapToFloor - if true then the Z axis value of Location will be ignored and camera will be placed on the landscape", "Docs/Classes/APlayerCamera/Functions/SnapToLocation.html", ["snap", "to", "location"], "APlayerCamera");
addToContainers_function("GetSpringArm", "Getters and setters", "Docs/Classes/APlayerCamera/Functions/GetSpringArm.html", ["get", "spring", "arm"], "APlayerCamera");
addToContainers_variable("", "Needed to use collision with camera", "Docs/Classes/APlayerCamera/Variables/.html", [], "APlayerCamera");
addToContainers_variable("", "", "Docs/Classes/APlayerCamera/Variables/_1.html", [], "APlayerCamera");
addToContainers_variable("", "", "Docs/Classes/APlayerCamera/Variables/_2.html", [], "APlayerCamera");
addToContainers_variable("", "This was a USpectatorPawnMovement component for a long time", "Docs/Classes/APlayerCamera/Variables/_3.html", [], "APlayerCamera");
addToContainers_class("UUpgradeEffect", "An abstract class that decides what effect upgrades have. Derive from this class and override its ApplyEffect_* functions to customize what upgrades do.", "Docs/Classes/UUpgradeEffect/UUpgradeEffect.html", ["upgrade", "effect"], "");
addToContainers_function("ApplyEffect_Building", "Apply effects of upgrade to a building. By the time this function is called we have already filtered out which buildings are affected. You can stil branch on their type though if you would like your upgrade to do different things to different types e.g. if (Building->GetAttributesBase().GetBuildingType() == EBuildingType::PowerPlant) Building->DoSomething(); else Building->DoSomethingDifferent(); -------------------------------------------------------------------------------------------- @param Building - the building to apply the upgrade to @param bIsFreshSpawn - if true then we are applying this upgrade on the building\'s spawn. @param UpgradeLevel - the level of the upgrade. If the upgrade can only be researched once then this will be 1", "Docs/Classes/UUpgradeEffect/Functions/ApplyEffect_Building.html", ["apply", "effect_", "building"], "UUpgradeEffect");
addToContainers_function("ApplyEffect_Infantry", "Apply the effects of this upgrade to an infantry. @param Infantry - the infantry to apply the upgrade to @param bIsFreshSpawn - if true then we are applying this upgrade on the unit\'s spawn @param UpgradeLevel - the level of the upgrade. If the upgrade can only be researched once then this will be 1", "Docs/Classes/UUpgradeEffect/Functions/ApplyEffect_Infantry.html", ["apply", "effect_", "infantry"], "UUpgradeEffect");
addToContainers_class("UUpgrade_DamageAndDefense", "A basic upgrade that can change how much damage a selectable deals and receives", "Docs/Classes/UUpgrade_DamageAndDefense/UUpgrade_DamageAndDefense.html", ["upgrade_", "damage", "and", "defense"], "");
addToContainers_function("UUpgrade_DamageAndDefense", "", "Docs/Classes/UUpgrade_DamageAndDefense/Functions/UUpgrade_DamageAndDefense.html", ["upgrade_", "damage", "and", "defense"], "UUpgrade_DamageAndDefense");
addToContainers_function("ApplyEffect_Building", "", "Docs/Classes/UUpgrade_DamageAndDefense/Functions/ApplyEffect_Building.html", ["apply", "effect_", "building"], "UUpgrade_DamageAndDefense");
addToContainers_function("ApplyEffect_Infantry", "", "Docs/Classes/UUpgrade_DamageAndDefense/Functions/ApplyEffect_Infantry.html", ["apply", "effect_", "infantry"], "UUpgrade_DamageAndDefense");
addToContainers_variable("", "Outgoing damage multiplier multiplier e.g. 1.1 = 10% more damage", "Docs/Classes/UUpgrade_DamageAndDefense/Variables/.html", [], "UUpgrade_DamageAndDefense");
addToContainers_variable("", "Incoming damage multiplier multiplier e.g. 0.9 = 10% less incoming damage", "Docs/Classes/UUpgrade_DamageAndDefense/Variables/_1.html", [], "UUpgrade_DamageAndDefense");
addToContainers_class("UUpgrade_IncreaseResourceCapacity", "An upgrade that increases how much resources a collector can carry", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/UUpgrade_IncreaseResourceCapacity.html", ["upgrade_", "increase", "resource", "capacity"], "");
addToContainers_function("UUpgrade_IncreaseResourceCapacity", "", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Functions/UUpgrade_IncreaseResourceCapacity.html", ["upgrade_", "increase", "resource", "capacity"], "UUpgrade_IncreaseResourceCapacity");
addToContainers_function("ApplyEffect_Infantry", "", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Functions/ApplyEffect_Infantry.html", ["apply", "effect_", "infantry"], "UUpgrade_IncreaseResourceCapacity");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UUpgrade_IncreaseResourceCapacity");
addToContainers_variable("", "Multipliers for resource capacity", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Variables/.html", [], "UUpgrade_IncreaseResourceCapacity");
addToContainers_variable("", "", "Docs/Classes/UUpgrade_IncreaseResourceCapacity/Variables/_1.html", [], "UUpgrade_IncreaseResourceCapacity");
addToContainers_class("UUpgrade_AttackSpeed", "An upgrade that modifies attack speed", "Docs/Classes/UUpgrade_AttackSpeed/UUpgrade_AttackSpeed.html", ["upgrade_", "attack", "speed"], "");
addToContainers_function("UUpgrade_AttackSpeed", "", "Docs/Classes/UUpgrade_AttackSpeed/Functions/UUpgrade_AttackSpeed.html", ["upgrade_", "attack", "speed"], "UUpgrade_AttackSpeed");
addToContainers_function("ApplyEffect_Infantry", "", "Docs/Classes/UUpgrade_AttackSpeed/Functions/ApplyEffect_Infantry.html", ["apply", "effect_", "infantry"], "UUpgrade_AttackSpeed");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UUpgrade_AttackSpeed/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UUpgrade_AttackSpeed");
addToContainers_function("CalculateActualMultiplier", "", "Docs/Classes/UUpgrade_AttackSpeed/Functions/CalculateActualMultiplier.html", ["calculate", "actual", "multiplier"], "UUpgrade_AttackSpeed");
addToContainers_variable("", "Normalized value for how much to increase attack speed by. Use negative values to decrease attack speed. e.g. 0.25 = increase attack speed by 25% -1 = reduce attack speed by 100%", "Docs/Classes/UUpgrade_AttackSpeed/Variables/.html", [], "UUpgrade_AttackSpeed");
addToContainers_variable("", "Actual mutliplier to pass into SetAttackRateViaMultiplier", "Docs/Classes/UUpgrade_AttackSpeed/Variables/_1.html", [], "UUpgrade_AttackSpeed");
addToContainers_class("AStartingGrid", "An actor that only gets spawned at the very start of the match. It defines what buildings/units a faction starts with and how they are layed out. To add buildings/units to what is spawned at the start of match for this faction add StartingGridComponents via editor. Then change their child actor class to whatever you want spawned. Move the StartingGridComponent around the grid to adjust the its spawn location (Z axis will be ignored and objects should be spawned with correct Z axis value, provided the Z values aren\'t insanely large). (0, 0, 0) is where the players camera will start at match start. Assumptions about the terrain below are made such as that it is flat. Also right now no faction checking is done for what is spawned meaning you can have one faction start with buildings/units from another faction. This may cause crashes during gameplay so should not be done.", "Docs/Classes/AStartingGrid/AStartingGrid.html", ["starting", "grid"], "");
addToContainers_function("AStartingGrid", "", "Docs/Classes/AStartingGrid/Functions/AStartingGrid.html", ["starting", "grid"], "AStartingGrid");
addToContainers_function("PostLoad", "", "Docs/Classes/AStartingGrid/Functions/PostLoad.html", ["post", "load"], "AStartingGrid");
addToContainers_function("BeginPlay", "", "Docs/Classes/AStartingGrid/Functions/BeginPlay.html", ["begin", "play"], "AStartingGrid");
addToContainers_function("GetSpawnLocation", "Figure out the spawn transform for a building/unit", "Docs/Classes/AStartingGrid/Functions/GetSpawnLocation.html", ["get", "spawn", "location"], "AStartingGrid");
addToContainers_function("GetSpawnRotation", "", "Docs/Classes/AStartingGrid/Functions/GetSpawnRotation.html", ["get", "spawn", "rotation"], "AStartingGrid");
addToContainers_function("PIE_IsForCPUPlayer", "", "Docs/Classes/AStartingGrid/Functions/PIE_IsForCPUPlayer.html", ["i", "e_", "is", "for", "c", "p", "u", "player"], "AStartingGrid");
addToContainers_function("PIE_GetCPUOwnerIndex", "Get index of owner when testing in PIE", "Docs/Classes/AStartingGrid/Functions/PIE_GetCPUOwnerIndex.html", ["i", "e_", "get", "c", "p", "u", "owner", "index"], "AStartingGrid");
addToContainers_function("PIE_GetHumanOwnerIndex", "", "Docs/Classes/AStartingGrid/Functions/PIE_GetHumanOwnerIndex.html", ["i", "e_", "get", "human", "owner", "index"], "AStartingGrid");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/AStartingGrid/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "AStartingGrid");
addToContainers_function("SpawnStartingBuilding", "Given a transform, figure out where the best place to spawn building is and spawn it there @param DesiredTransform - world coords of where to spawn building. Final spawn location will be chosen by GetSpawnLocation @param - BuildingBP - blueprint of building to spawn @return - reference to spawned building", "Docs/Classes/AStartingGrid/Functions/SpawnStartingBuilding.html", ["spawn", "starting", "building"], "AStartingGrid");
addToContainers_function("SpawnStartingInfantry", "Given a transform, figure out best place to spawn a unit and spawn it there @param DesiredTransform - world coords of where to spawn unit. Final spawn location will be chosen by GetSpawnLocation @param - UnitBP - blueprint of unit to spawn @return - reference to spawned unit", "Docs/Classes/AStartingGrid/Functions/SpawnStartingInfantry.html", ["spawn", "starting", "infantry"], "AStartingGrid");
addToContainers_function("GetSpawnedBuildingTypes", "Get the types of selectables this grid spawned. One for each actor so can have duplicates of the same type. Will likely need to change them to return value not ref because the grid gets destroyed", "Docs/Classes/AStartingGrid/Functions/GetSpawnedBuildingTypes.html", ["get", "spawned", "building", "types"], "AStartingGrid");
addToContainers_function("GetSpawnedUnitTypes", "", "Docs/Classes/AStartingGrid/Functions/GetSpawnedUnitTypes.html", ["get", "spawned", "unit", "types"], "AStartingGrid");
addToContainers_function("RegisterGridComponent", "", "Docs/Classes/AStartingGrid/Functions/RegisterGridComponent.html", ["register", "grid", "component"], "AStartingGrid");
addToContainers_variable("bStartedInMap", "Whether already placed in map", "Docs/Classes/AStartingGrid/Variables/bStartedInMap.html", ["started", "in", "map"], "AStartingGrid");
addToContainers_variable("", "Dummy root component for mesh positioning", "Docs/Classes/AStartingGrid/Variables/.html", [], "AStartingGrid");
addToContainers_variable("", "", "Docs/Classes/AStartingGrid/Variables/_1.html", [], "AStartingGrid");
addToContainers_variable("", "The floor to make visualizing easier", "Docs/Classes/AStartingGrid/Variables/_2.html", [], "AStartingGrid");
addToContainers_variable("", "Reference to player state that wants this stuff spawned", "Docs/Classes/AStartingGrid/Variables/_3.html", [], "AStartingGrid");
addToContainers_variable("", "Maps each custom child actor component to what to spawn there", "Docs/Classes/AStartingGrid/Variables/_4.html", [], "AStartingGrid");
addToContainers_variable("", "Array of all the building types of buildings this grid spawned", "Docs/Classes/AStartingGrid/Variables/_5.html", [], "AStartingGrid");
addToContainers_variable("", "Array of all the unit types of units this grid spawned", "Docs/Classes/AStartingGrid/Variables/_6.html", [], "AStartingGrid");
addToContainers_variable("", "Whether to use human player index or CPU player index", "Docs/Classes/AStartingGrid/Variables/_7.html", [], "AStartingGrid");
addToContainers_variable("", "PIE player to use for each selectable that is a part of this grid. Overrides whatever is set on the actor itself. 0 = server player , 1 = 1st client, 2 = 2nd client, and so on", "Docs/Classes/AStartingGrid/Variables/_8.html", [], "AStartingGrid");
addToContainers_variable("", "Same as above but for CPU players", "Docs/Classes/AStartingGrid/Variables/_9.html", [], "AStartingGrid");
addToContainers_variable("", "", "Docs/Classes/AStartingGrid/Variables/_10.html", [], "AStartingGrid");
addToContainers_class("UStartingGridComponent", "A component to be added to a starting grid that allows an actor to be specified as a \"starting\" selectable", "Docs/Classes/UStartingGridComponent/UStartingGridComponent.html", ["starting", "grid", "component"], "");
addToContainers_function("OnRegister", "", "Docs/Classes/UStartingGridComponent/Functions/OnRegister.html", ["on", "register"], "UStartingGridComponent");
addToContainers_function("GetSelectableBP", "", "Docs/Classes/UStartingGridComponent/Functions/GetSelectableBP.html", ["get", "selectable", "b", "p"], "UStartingGridComponent");
addToContainers_class("SessionOptions", "", "Docs/Classes/SessionOptions/SessionOptions.html", ["session", "options"], "");
addToContainers_function("Map_ToString", "not here like lobby name just uses ToString()", "Docs/Classes/SessionOptions/Functions/Map_ToString.html", ["map_", "to", "string"], "SessionOptions");
addToContainers_function("Map_ToID", "", "Docs/Classes/SessionOptions/Functions/Map_ToID.html", ["map_", "to", "i", "d"], "SessionOptions");
addToContainers_function("IsPasswordProtected_ToString", "", "Docs/Classes/SessionOptions/Functions/IsPasswordProtected_ToString.html", ["is", "password", "protected_", "to", "string"], "SessionOptions");
addToContainers_function("IsPasswordProtected_ToBool", "", "Docs/Classes/SessionOptions/Functions/IsPasswordProtected_ToBool.html", ["is", "password", "protected_", "to", "bool"], "SessionOptions");
addToContainers_function("StartingResources_ToString", "", "Docs/Classes/SessionOptions/Functions/StartingResources_ToString.html", ["starting", "resources_", "to", "string"], "SessionOptions");
addToContainers_function("StartingResources_ToEnumValue", "", "Docs/Classes/SessionOptions/Functions/StartingResources_ToEnumValue.html", ["starting", "resources_", "to", "enum", "value"], "SessionOptions");
addToContainers_function("DefeatCondition_ToString", "", "Docs/Classes/SessionOptions/Functions/DefeatCondition_ToString.html", ["defeat", "condition_", "to", "string"], "SessionOptions");
addToContainers_function("DefeatCondition_ToEnumValue", "", "Docs/Classes/SessionOptions/Functions/DefeatCondition_ToEnumValue.html", ["defeat", "condition_", "to", "enum", "value"], "SessionOptions");
addToContainers_function("IsLANSession", "Not sure if all previous code has been replaced with these yet ", "Docs/Classes/SessionOptions/Functions/IsLANSession.html", ["is", "l", "a", "n", "session"], "SessionOptions");
addToContainers_function("GetLobbyName", "", "Docs/Classes/SessionOptions/Functions/GetLobbyName.html", ["get", "lobby", "name"], "SessionOptions");
addToContainers_function("GetStartingResources", "", "Docs/Classes/SessionOptions/Functions/GetStartingResources.html", ["get", "starting", "resources"], "SessionOptions");
addToContainers_function("GetDefeatCondition", "", "Docs/Classes/SessionOptions/Functions/GetDefeatCondition.html", ["get", "defeat", "condition"], "SessionOptions");
addToContainers_function("GetMapID", "", "Docs/Classes/SessionOptions/Functions/GetMapID.html", ["get", "map", "i", "d"], "SessionOptions");
addToContainers_function("GetNumPublicConnections", "Hopefully returns the number of lobby slots needed in total", "Docs/Classes/SessionOptions/Functions/GetNumPublicConnections.html", ["get", "num", "public", "connections"], "SessionOptions");
addToContainers_function("IsLAN", "=========================================================================================", "Docs/Classes/SessionOptions/Functions/IsLAN.html", ["is", "l", "a", "n"], "SessionOptions");
addToContainers_function("GetHostName", "", "Docs/Classes/SessionOptions/Functions/GetHostName.html", ["get", "host", "name"], "SessionOptions");
addToContainers_function("GetServerName", "", "Docs/Classes/SessionOptions/Functions/GetServerName.html", ["get", "server", "name"], "SessionOptions");
addToContainers_function("GetCurrentNumPlayers", "", "Docs/Classes/SessionOptions/Functions/GetCurrentNumPlayers.html", ["get", "current", "num", "players"], "SessionOptions");
addToContainers_function("GetMaxNumPlayers", "", "Docs/Classes/SessionOptions/Functions/GetMaxNumPlayers.html", ["get", "max", "num", "players"], "SessionOptions");
addToContainers_function("IsPasswordProtected", "", "Docs/Classes/SessionOptions/Functions/IsPasswordProtected.html", ["is", "password", "protected"], "SessionOptions");
addToContainers_function("GetPing", "", "Docs/Classes/SessionOptions/Functions/GetPing.html", ["get", "ping"], "SessionOptions");
addToContainers_function("GetMapID", "", "Docs/Classes/SessionOptions/Functions/GetMapID_1.html", ["get", "map", "i", "d"], "SessionOptions");
addToContainers_function("GetStartingResources", "", "Docs/Classes/SessionOptions/Functions/GetStartingResources_1.html", ["get", "starting", "resources"], "SessionOptions");
addToContainers_function("GetDefeatCondition", "", "Docs/Classes/SessionOptions/Functions/GetDefeatCondition_1.html", ["get", "defeat", "condition"], "SessionOptions");
addToContainers_variable("MAX_NUM_LAN_SEARCH_RESULTS", "Max number of lobbies shown when browsing using online subsystem null", "Docs/Classes/SessionOptions/Variables/MAX_NUM_LAN_SEARCH_RESULTS.html", ["a", "x_", "n", "u", "m_", "l", "a", "n_", "s", "e", "a", "r", "c", "h_", "r", "e", "s", "u", "l", "t", "s"], "SessionOptions");
addToContainers_variable("MAX_NUM_STEAM_SEARCH_RESULTS", "Max number of search results to look for when browsing using steam online subsystem", "Docs/Classes/SessionOptions/Variables/MAX_NUM_STEAM_SEARCH_RESULTS.html", ["a", "x_", "n", "u", "m_", "s", "t", "e", "a", "m_", "s", "e", "a", "r", "c", "h_", "r", "e", "s", "u", "l", "t", "s"], "SessionOptions");
addToContainers_variable("PING_BUCKET_SIZE", "", "Docs/Classes/SessionOptions/Variables/PING_BUCKET_SIZE.html", ["i", "n", "g_", "b", "u", "c", "k", "e", "t_", "s", "i", "z", "e"], "SessionOptions");
addToContainers_variable("LOBBY_NAME_KEY", "The key for FSessionSettings that looks up lobby name", "Docs/Classes/SessionOptions/Variables/LOBBY_NAME_KEY.html", ["o", "b", "b", "y_", "n", "a", "m", "e_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("IS_PASSWORD_PROTECTED_KEY", "Key for FSessionSettings that looks up whether the lobby is password protected or not", "Docs/Classes/SessionOptions/Variables/IS_PASSWORD_PROTECTED_KEY.html", ["s_", "p", "a", "s", "s", "w", "o", "r", "d_", "p", "r", "o", "t", "e", "c", "t", "e", "d_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("MAP_NAME_KEY", "Key for FSessionSettings", "Docs/Classes/SessionOptions/Variables/MAP_NAME_KEY.html", ["a", "p_", "n", "a", "m", "e_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("STARTING_RESOURCES_KEY", "Key for retrieving starting resources amount from session", "Docs/Classes/SessionOptions/Variables/STARTING_RESOURCES_KEY.html", ["t", "a", "r", "t", "i", "n", "g_", "r", "e", "s", "o", "u", "r", "c", "e", "s_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("DEFEAT_CONDITION_KEY", "Key for retrieving defeat condition for session", "Docs/Classes/SessionOptions/Variables/DEFEAT_CONDITION_KEY.html", ["e", "f", "e", "a", "t_", "c", "o", "n", "d", "i", "t", "i", "o", "n_", "k", "e", "y"], "SessionOptions");
addToContainers_variable("UNIQUE_RTS_KEY", "Key for unique setting for RTS games to filter out Space Wars search results when using steam", "Docs/Classes/SessionOptions/Variables/UNIQUE_RTS_KEY.html", ["n", "i", "q", "u", "e_", "r", "t", "s_", "k", "e", "y"], "SessionOptions");
addToContainers_class("ARTSGameSession", "Most of the stuff in this class does not need to be in here; it could go in say game instance instead.", "Docs/Classes/ARTSGameSession/ARTSGameSession.html", ["r", "t", "s", "game", "session"], "");
addToContainers_function("ARTSGameSession", "", "Docs/Classes/ARTSGameSession/Functions/ARTSGameSession.html", ["r", "t", "s", "game", "session"], "ARTSGameSession");
addToContainers_function("PreInitializeComponents", "", "Docs/Classes/ARTSGameSession/Functions/PreInitializeComponents.html", ["pre", "initialize", "components"], "ARTSGameSession");
addToContainers_function("HostSession", "https://wiki.unrealengine.com/How_To_Use_Sessions_In_C%2B%2B Function to host a game! @Param UserID User that started the request @Param NewSessionName Name of the Session @Param bIsLAN Is this is LAN Game? @Param bIsPresence \"Is the Session to create a presence Session\" @Param MaxNumPlayers Number of Maximum allowed players on this \"Session\" (Server) @Return - true if session was created?", "Docs/Classes/ARTSGameSession/Functions/HostSession.html", ["host", "session"], "ARTSGameSession");
addToContainers_function("OnCreateSessionComplete", "Delegate fired when a session create request has completed @param SessionName - the name of the session this callback is for @param bWasSuccessful - true if the async action completed without error, false if there was an error", "Docs/Classes/ARTSGameSession/Functions/OnCreateSessionComplete.html", ["on", "create", "session", "complete"], "ARTSGameSession");
addToContainers_function("FindSessions", "Find an online session @param UserId - user that initiated the request @param bIsLAN - are we searching LAN matches @param bIsPresence - are we searching presence sessions", "Docs/Classes/ARTSGameSession/Functions/FindSessions.html", ["find", "sessions"], "ARTSGameSession");
addToContainers_function("OnFindSessionsComplete", "Delegate fired when a session search query has completed @param bWasSuccessful - true if the async action completed without error, false if there was an error", "Docs/Classes/ARTSGameSession/Functions/OnFindSessionsComplete.html", ["on", "find", "sessions", "complete"], "ARTSGameSession");
addToContainers_function("JoinSession", "Joins a session via a search result @param SessionName - name of session @param SearchResult - Session to join @return bool true if successful, false otherwise", "Docs/Classes/ARTSGameSession/Functions/JoinSession.html", ["join", "session"], "ARTSGameSession");
addToContainers_function("OnJoinSessionComplete", "Delegate fired when a session join request has completed @param SessionName - the name of the session this callback is for @param bWasSuccessful - true if the async action completed without error, false if there was an error", "Docs/Classes/ARTSGameSession/Functions/OnJoinSessionComplete.html", ["on", "join", "session", "complete"], "ARTSGameSession");
addToContainers_function("StartSession", "Start a networked match", "Docs/Classes/ARTSGameSession/Functions/StartSession.html", ["start", "session"], "ARTSGameSession");
addToContainers_function("OnStartOnlineGameComplete", "Delegate fired when a session start request has completed @param SessionName - the name of the session this callback is for @param bWasSuccessful - true if the async action completed without error, false if there was an error", "Docs/Classes/ARTSGameSession/Functions/OnStartOnlineGameComplete.html", ["on", "start", "online", "game", "complete"], "ARTSGameSession");
addToContainers_function("DestroySession", "Destroy session and do action after @param DoOnSessionDestroyed - action to do during OnDestroySessionComplete @param SessionToCreate - info about session to create if DoOnSessionDestroyed was \'create new session\'", "Docs/Classes/ARTSGameSession/Functions/DestroySession.html", ["destroy", "session"], "ARTSGameSession");
addToContainers_function("OnDestroySessionComplete", "Delegate fired when a destroying an online session has completed @param SessionName - the name of the session this callback is for @param bWasSuccessful - true if the async action completed without error, false if there was an error", "Docs/Classes/ARTSGameSession/Functions/OnDestroySessionComplete.html", ["on", "destroy", "session", "complete"], "ARTSGameSession");
addToContainers_function("GetSessionJoinability", "", "Docs/Classes/ARTSGameSession/Functions/GetSessionJoinability.html", ["get", "session", "joinability"], "ARTSGameSession");
addToContainers_function("ApproveLogin", "Function for checking if password is correct", "Docs/Classes/ARTSGameSession/Functions/ApproveLogin.html", ["approve", "login"], "ARTSGameSession");
addToContainers_function("GetSessionSearch", "", "Docs/Classes/ARTSGameSession/Functions/GetSessionSearch.html", ["get", "session", "search"], "ARTSGameSession");
addToContainers_function("GetSessionInterface", "", "Docs/Classes/ARTSGameSession/Functions/GetSessionInterface.html", ["get", "session", "interface"], "ARTSGameSession");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/ARTSGameSession/Variables/.html", [], "ARTSGameSession");
addToContainers_variable("", "Reference to game state ", "Docs/Classes/ARTSGameSession/Variables/_1.html", [], "ARTSGameSession");
addToContainers_variable("DoOnDestroySessionComplete", "What to do in OnDestroySessionComplete", "Docs/Classes/ARTSGameSession/Variables/DoOnDestroySessionComplete.html", ["do", "on", "destroy", "session", "complete"], "ARTSGameSession");
addToContainers_variable("SessionSearch", "Search results when looking for sessions", "Docs/Classes/ARTSGameSession/Variables/SessionSearch.html", ["session", "search"], "ARTSGameSession");
addToContainers_variable("OnCreateSessionCompleteDelegate", "Delegate called when session created", "Docs/Classes/ARTSGameSession/Variables/OnCreateSessionCompleteDelegate.html", ["on", "create", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnStartSessionCompleteDelegate", "Delegate called when session started", "Docs/Classes/ARTSGameSession/Variables/OnStartSessionCompleteDelegate.html", ["on", "start", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnDestroySessionCompleteDelegate", "Delegate for destroying a session", "Docs/Classes/ARTSGameSession/Variables/OnDestroySessionCompleteDelegate.html", ["on", "destroy", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnFindSessionsCompleteDelegate", "Delegate for searching for sessions", "Docs/Classes/ARTSGameSession/Variables/OnFindSessionsCompleteDelegate.html", ["on", "find", "sessions", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("OnJoinSessionCompleteDelegate", "Delegate after joining a session", "Docs/Classes/ARTSGameSession/Variables/OnJoinSessionCompleteDelegate.html", ["on", "join", "session", "complete", "delegate"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnCreateSessionComplete", "Handles to registered delegates for session", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnCreateSessionCom.html", ["delegate", "handle_", "on", "create", "session", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnStartSessionComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnStartSessionComp.html", ["delegate", "handle_", "on", "start", "session", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnDestroySessionComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnDestroySessionCo.html", ["delegate", "handle_", "on", "destroy", "session", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnFindSessionsComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnFindSessionsComp.html", ["delegate", "handle_", "on", "find", "sessions", "complete"], "ARTSGameSession");
addToContainers_variable("DelegateHandle_OnJoinSessionComplete", "", "Docs/Classes/ARTSGameSession/Variables/DelegateHandle_OnJoinSessionCompl.html", ["delegate", "handle_", "on", "join", "session", "complete"], "ARTSGameSession");
addToContainers_struct("FRTSConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FRTSConnectionAlwaysRelevantNodeP/FRTSConnectionAlwaysRelevantNodeP.html", ["r", "t", "s", "connection", "always", "relevant", "node", "pair"], "");
addToContainers_function("FRTSConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FRTSConnectionAlwaysRelevantNodeP/Functions/FRTSConnectionAlwaysRelevantNodeP.html", ["r", "t", "s", "connection", "always", "relevant", "node", "pair"], "FRTSConnectionAlwaysRelevantNodePair");
addToContainers_function("FRTSConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FRTSConnectionAlwaysRelevantNodeP/Functions/FRTSConnectionAlwaysRelevantNodeP_1.html", ["r", "t", "s", "connection", "always", "relevant", "node", "pair"], "FRTSConnectionAlwaysRelevantNodePair");
addToContainers_function("operator=", "", "Docs/Structs/FRTSConnectionAlwaysRelevantNodeP/Functions/operator=.html", [], "FRTSConnectionAlwaysRelevantNodePair");
addToContainers_class("URTSReplicationGraph", "Have used UBasicReplicationGraph as a guide for how to implement this To enable this via ini: [/Script/OnlineSubsystemUtils.IpNetDriver] ReplicationDriverClassName=\"/Script/ReplicationGraph.RTSReplicationGraph\" The function AActor::IsReplicationPausedForConnection can be removed from selectables --------------------------------------------------------------------------------------------- TODO: - the infantry and building nodes: when they suddenly become revealed by fog what is actually happening is a new actor is being spawned. That\'s crazy! But if you add breakpoints in BeginPlay you can see it firing. This is unexpected. I did not know unreal creates a completely new actor when one transitions from being not relevant to relevant. What I actually want is just to stop the updates coming through. So try and make this happen. --------------------------------------------------------------------------------------------- Few things with buildings: - in the time between TearOff and Destroy being called TornOff gets spammed. Have tried UBasicReplicationGraph and it does not happen with that. Oddly if I create an exact replica of UBasicReplicationGraph and use that it still happens. Possibly OnRep functions can spam too - I get a GUID error sometimes when a building is destroyed. Get a massive like 5sec hitch when it happens. Perhaps see if it happens with basic replication graph. Update: UBasicReplicationGraph does not actually load if set in config file. This explains why my replica of basic rep graph was acting differently! So even with basic replication graph I get TornOff spam. So the problem is possibly with the default implementation of replication graph. I was under the impression that tear off is supported by it. Summary: TornOff spam happens even with basic rep graph but the GUID error does not. TornOff spam is probably a problem with engine\'s rep graph implementation while the GUID error could be something to do with my RTS rep graph implementation. ---------------------------------------------------------------------------------------------", "Docs/Classes/URTSReplicationGraph/URTSReplicationGraph.html", ["r", "t", "s", "replication", "graph"], "");
addToContainers_function("URTSReplicationGraph", "", "Docs/Classes/URTSReplicationGraph/Functions/URTSReplicationGraph.html", ["r", "t", "s", "replication", "graph"], "URTSReplicationGraph");
addToContainers_function("InitGlobalActorClassSettings", "Initialize the per-class data for replication", "Docs/Classes/URTSReplicationGraph/Functions/InitGlobalActorClassSettings.html", ["init", "global", "actor", "class", "settings"], "URTSReplicationGraph");
addToContainers_function("InitGlobalGraphNodes", "Init/configure Global Graph", "Docs/Classes/URTSReplicationGraph/Functions/InitGlobalGraphNodes.html", ["init", "global", "graph", "nodes"], "URTSReplicationGraph");
addToContainers_function("InitConnectionGraphNodes", "Init/configure graph for a specific connection. Note they do not all have to be unique: connections can share nodes (e.g, 2 nodes for 2 teams)", "Docs/Classes/URTSReplicationGraph/Functions/InitConnectionGraphNodes.html", ["init", "connection", "graph", "nodes"], "URTSReplicationGraph");
addToContainers_function("NotifyOfNumTeams", "This function is called by the game state once the number of teams for the match is known. Calling it ourselves during InitGlobalGraphNodes() is too early", "Docs/Classes/URTSReplicationGraph/Functions/NotifyOfNumTeams.html", ["notify", "of", "num", "teams"], "URTSReplicationGraph");
addToContainers_function("RouteAddNetworkActorToNodes", "Route actor spawning to the right node. (Or your nodes can gather the actors themselves)", "Docs/Classes/URTSReplicationGraph/Functions/RouteAddNetworkActorToNodes.html", ["route", "add", "network", "actor", "to", "nodes"], "URTSReplicationGraph");
addToContainers_function("RouteRemoveNetworkActorToNodes", "Route actor despawning to the right node. (Or your nodes can gather the actors themselves)", "Docs/Classes/URTSReplicationGraph/Functions/RouteRemoveNetworkActorToNodes.html", ["route", "remove", "network", "actor", "to", "nodes"], "URTSReplicationGraph");
addToContainers_function("ServerReplicateActors", "", "Docs/Classes/URTSReplicationGraph/Functions/ServerReplicateActors.html", ["server", "replicate", "actors"], "URTSReplicationGraph");
addToContainers_function("ReplicateActorListsForConnection_Default", "2 functions only implemented to use the RTSReplicationGraphFrame", "Docs/Classes/URTSReplicationGraph/Functions/ReplicateActorListsForConnection_.html", ["replicate", "actor", "lists", "for", "connection_", "default"], "URTSReplicationGraph");
addToContainers_function("ReplicateActorListsForConnection_FastShared", "", "Docs/Classes/URTSReplicationGraph/Functions/ReplicateActorListsForConnection__1.html", ["replicate", "actor", "lists", "for", "connection_", "fast", "shared"], "URTSReplicationGraph");
addToContainers_function("ReplicateSingleActor", "", "Docs/Classes/URTSReplicationGraph/Functions/ReplicateSingleActor.html", ["replicate", "single", "actor"], "URTSReplicationGraph");
addToContainers_function("ProcessRemoteFunction", "Only implemented to use the RTSReplicationGraphFrame", "Docs/Classes/URTSReplicationGraph/Functions/ProcessRemoteFunction.html", ["process", "remote", "function"], "URTSReplicationGraph");
addToContainers_function("GetMappingPolicy", "4.22: removed const for Class param because ClassRepNodePolicies.Get no longer takes const param", "Docs/Classes/URTSReplicationGraph/Functions/GetMappingPolicy.html", ["get", "mapping", "policy"], "URTSReplicationGraph");
addToContainers_function("GetAlwaysRelevantNodeForConnection", "", "Docs/Classes/URTSReplicationGraph/Functions/GetAlwaysRelevantNodeForConnectio.html", ["get", "always", "relevant", "node", "for", "connection"], "URTSReplicationGraph");
addToContainers_function("GetBuildingsNodeForTeam", "", "Docs/Classes/URTSReplicationGraph/Functions/GetBuildingsNodeForTeam.html", ["get", "buildings", "node", "for", "team"], "URTSReplicationGraph");
addToContainers_function("GetInfantryNodeForTeam", "", "Docs/Classes/URTSReplicationGraph/Functions/GetInfantryNodeForTeam.html", ["get", "infantry", "node", "for", "team"], "URTSReplicationGraph");
addToContainers_function("HasSelectableSetUp", "", "Docs/Classes/URTSReplicationGraph/Functions/HasSelectableSetUp.html", ["has", "selectable", "set", "up"], "URTSReplicationGraph");
addToContainers_function("GetTeamVisibilityInfo", "", "Docs/Classes/URTSReplicationGraph/Functions/GetTeamVisibilityInfo.html", ["get", "team", "visibility", "info"], "URTSReplicationGraph");
addToContainers_function("NotifyOfBuildingDestroyed", "", "Docs/Classes/URTSReplicationGraph/Functions/NotifyOfBuildingDestroyed.html", ["notify", "of", "building", "destroyed"], "URTSReplicationGraph");
addToContainers_function("ForceNetUpdate", "Functions only overridden to change ReplicationGraphFrame to RTSReplicationGraphFrame", "Docs/Classes/URTSReplicationGraph/Functions/ForceNetUpdate.html", ["force", "net", "update"], "URTSReplicationGraph");
addToContainers_function("FlushNetDormancy", "", "Docs/Classes/URTSReplicationGraph/Functions/FlushNetDormancy.html", ["flush", "net", "dormancy"], "URTSReplicationGraph");
addToContainers_variable("", "-------------------------------------------------------------", "Docs/Classes/URTSReplicationGraph/Variables/.html", [], "URTSReplicationGraph");
addToContainers_variable("", "Nodes for a team Key = Statics::TeamToArrayIndex(Team)", "Docs/Classes/URTSReplicationGraph/Variables/_1.html", [], "URTSReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraph/Variables/_2.html", [], "URTSReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraph/Variables/_3.html", [], "URTSReplicationGraph");
addToContainers_variable("TeamVisibilityInfos", "", "Docs/Classes/URTSReplicationGraph/Variables/TeamVisibilityInfos.html", ["team", "visibility", "infos"], "URTSReplicationGraph");
addToContainers_variable("", "Actors that are only supposed to replicate to their owning connection, but that did not have a connection on spawn", "Docs/Classes/URTSReplicationGraph/Variables/_4.html", [], "URTSReplicationGraph");
addToContainers_variable("", "Selectables that did not have a connection on spawn", "Docs/Classes/URTSReplicationGraph/Variables/_5.html", [], "URTSReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraph/Variables/_6.html", [], "URTSReplicationGraph");
addToContainers_variable("ClassRepNodePolicies", "Maps UClass to its mapping policy", "Docs/Classes/URTSReplicationGraph/Variables/ClassRepNodePolicies.html", ["class", "rep", "node", "policies"], "URTSReplicationGraph");
addToContainers_variable("RTSReplicationGraphFrame", "[Workaround] This exists because UReplicationGraph::ReplicationGraphFrame is private. Note I have not modified GetReplicationGraphFrame() to use this but it appears it\'s *only* used for debugging so I won\'t bother with it", "Docs/Classes/URTSReplicationGraph/Variables/RTSReplicationGraphFrame.html", ["t", "s", "replication", "graph", "frame"], "URTSReplicationGraph");
addToContainers_class("URTSReplicationGraphConnection", "This class so far is just an exact copy of UNetReplicationGraphConnection but some of the access specificers have been made usable by URTSReplicationGraph", "Docs/Classes/URTSReplicationGraphConnection/URTSReplicationGraphConnection.html", ["r", "t", "s", "replication", "graph", "connection"], "");
addToContainers_function("PrepareForReplication", "", "Docs/Classes/URTSReplicationGraphConnection/Functions/PrepareForReplication.html", ["prepare", "for", "replication"], "URTSReplicationGraphConnection");
addToContainers_function("NotifyAddDestructionInfo", "", "Docs/Classes/URTSReplicationGraphConnection/Functions/NotifyAddDestructionInfo.html", ["notify", "add", "destruction", "info"], "URTSReplicationGraphConnection");
addToContainers_function("NotifyRemoveDestructionInfo", "", "Docs/Classes/URTSReplicationGraphConnection/Functions/NotifyRemoveDestructionInfo.html", ["notify", "remove", "destruction", "info"], "URTSReplicationGraphConnection");
addToContainers_function("NotifyResetDestructionInfo", "", "Docs/Classes/URTSReplicationGraphConnection/Functions/NotifyResetDestructionInfo.html", ["notify", "reset", "destruction", "info"], "URTSReplicationGraphConnection");
addToContainers_function("ReplicateDestructionInfos", "", "Docs/Classes/URTSReplicationGraphConnection/Functions/ReplicateDestructionInfos.html", ["replicate", "destruction", "infos"], "URTSReplicationGraphConnection");
addToContainers_function("", "DestructionInfo handling. This is how we send \"delete this actor\" to clients when the actor is deleted on the server (placed in map actors)", "Docs/Classes/URTSReplicationGraphConnection/Functions/.html", [], "URTSReplicationGraphConnection");
addToContainers_variable("", "", "Docs/Classes/URTSReplicationGraphConnection/Variables/.html", [], "URTSReplicationGraphConnection");
addToContainers_variable("RTSPendingDestructInfoList", "[Workaround] Here because PendingDestructInfoList is private", "Docs/Classes/URTSReplicationGraphConnection/Variables/RTSPendingDestructInfoList.html", ["t", "s", "pending", "destruct", "info", "list"], "URTSReplicationGraphConnection");
addToContainers_class("URTSReplicationGraphNode_ActorList", "------------------------------------------------------------------------------------------------", "Docs/Classes/URTSReplicationGraphNode_ActorLis/URTSReplicationGraphNode_ActorLis.html", ["r", "t", "s", "replication", "graph", "node_", "actor", "list"], "");
addToContainers_function("URTSReplicationGraphNode_ActorList", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/URTSReplicationGraphNode_ActorLis.html", ["r", "t", "s", "replication", "graph", "node_", "actor", "list"], "URTSReplicationGraphNode_ActorList");
addToContainers_function("SetupNode", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/SetupNode.html", ["setup", "node"], "URTSReplicationGraphNode_ActorList");
addToContainers_function("NotifyAddNetworkActor", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/NotifyAddNetworkActor.html", ["notify", "add", "network", "actor"], "URTSReplicationGraphNode_ActorList");
addToContainers_function("NotifyRemoveNetworkActor", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/NotifyRemoveNetworkActor.html", ["notify", "remove", "network", "actor"], "URTSReplicationGraphNode_ActorList");
addToContainers_function("NotifyResetAllNetworkActors", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/NotifyResetAllNetworkActors.html", ["notify", "reset", "all", "network", "actors"], "URTSReplicationGraphNode_ActorList");
addToContainers_function("GatherActorListsForConnection", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/GatherActorListsForConnection.html", ["gather", "actor", "lists", "for", "connection"], "URTSReplicationGraphNode_ActorList");
addToContainers_function("LogNode", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/LogNode.html", ["log", "node"], "URTSReplicationGraphNode_ActorList");
addToContainers_function("GetAllActorsInNode_Debugging", "", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Functions/GetAllActorsInNode_Debugging.html", ["get", "all", "actors", "in", "node_", "debugging"], "URTSReplicationGraphNode_ActorList");
addToContainers_variable("ReplicationActorList", "The list of actors", "Docs/Classes/URTSReplicationGraphNode_ActorLis/Variables/ReplicationActorList.html", ["replication", "actor", "list"], "URTSReplicationGraphNode_ActorList");
addToContainers_class("URTSReplicationGraphNode_AlwaysRelevant", "Actors that are always relevant to everyone", "Docs/Classes/URTSReplicationGraphNode_AlwaysRe/URTSReplicationGraphNode_AlwaysRe.html", ["r", "t", "s", "replication", "graph", "node_", "always", "relevant"], "");
addToContainers_class("URTSReplicationGraphNode_AlwaysRelevantForConnection", "Actors that are only relevant to a certain connection", "Docs/Classes/URTSReplicationGraphNode_AlwaysRe_1/URTSReplicationGraphNode_AlwaysRe.html", ["r", "t", "s", "replication", "graph", "node_", "always", "relevant", "for", "connection"], "");
addToContainers_class("URTSReplicationGraphNode_TeamBuildings", "One of these exist for each team. Contains the buildings on that team", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/URTSReplicationGraphNode_TeamBuil.html", ["r", "t", "s", "replication", "graph", "node_", "team", "buildings"], "");
addToContainers_function("SetupNode", "", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/Functions/SetupNode.html", ["setup", "node"], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_function("NotifyAddNetworkActor", "", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/Functions/NotifyAddNetworkActor.html", ["notify", "add", "network", "actor"], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_function("NotifyRemoveNetworkActor", "", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/Functions/NotifyRemoveNetworkActor.html", ["notify", "remove", "network", "actor"], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_function("NotifyResetAllNetworkActors", "", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/Functions/NotifyResetAllNetworkActors.html", ["notify", "reset", "all", "network", "actors"], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_function("GatherActorListsForConnection", "", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/Functions/GatherActorListsForConnection.html", ["gather", "actor", "lists", "for", "connection"], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_variable("Buildings", "Kind of odd but during GatherActorListsForConnection only an array of elements can be added, not a single element, so this is the array to add", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/Variables/Buildings.html", [], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_variable("Team", "Team this node is for", "Docs/Classes/URTSReplicationGraphNode_TeamBuil/Variables/Team.html", [], "URTSReplicationGraphNode_TeamBuildings");
addToContainers_class("URTSReplicationGraphNode_TeamInfantry", "One of these exist for each team. Contains the infantry on that team", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/URTSReplicationGraphNode_TeamInfa.html", ["r", "t", "s", "replication", "graph", "node_", "team", "infantry"], "");
addToContainers_function("SetupNode", "", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/Functions/SetupNode.html", ["setup", "node"], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_function("NotifyAddNetworkActor", "", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/Functions/NotifyAddNetworkActor.html", ["notify", "add", "network", "actor"], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_function("NotifyRemoveNetworkActor", "", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/Functions/NotifyRemoveNetworkActor.html", ["notify", "remove", "network", "actor"], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_function("NotifyResetAllNetworkActors", "", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/Functions/NotifyResetAllNetworkActors.html", ["notify", "reset", "all", "network", "actors"], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_function("GatherActorListsForConnection", "", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/Functions/GatherActorListsForConnection.html", ["gather", "actor", "lists", "for", "connection"], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_variable("Infantry", "-------------------------------------------------------------------", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/Variables/Infantry.html", [], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_variable("Team", "Team this node is for", "Docs/Classes/URTSReplicationGraphNode_TeamInfa/Variables/Team.html", [], "URTSReplicationGraphNode_TeamInfantry");
addToContainers_struct("FTestConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FTestConnectionAlwaysRelevantNode/FTestConnectionAlwaysRelevantNode.html", ["test", "connection", "always", "relevant", "node", "pair"], "");
addToContainers_function("FTestConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FTestConnectionAlwaysRelevantNode/Functions/FTestConnectionAlwaysRelevantNode.html", ["test", "connection", "always", "relevant", "node", "pair"], "FTestConnectionAlwaysRelevantNodePair");
addToContainers_function("FTestConnectionAlwaysRelevantNodePair", "", "Docs/Structs/FTestConnectionAlwaysRelevantNode/Functions/FTestConnectionAlwaysRelevantNode_1.html", ["test", "connection", "always", "relevant", "node", "pair"], "FTestConnectionAlwaysRelevantNodePair");
addToContainers_function("operator=", "", "Docs/Structs/FTestConnectionAlwaysRelevantNode/Functions/operator=.html", [], "FTestConnectionAlwaysRelevantNodePair");
addToContainers_class("UTestReplicationGraph", "This replication graph is for testing only. Mainly using this to try and track down problems that are happening with URTSReplicationGraph To enable this via ini: [/Script/OnlineSubsystemUtils.IpNetDriver] ReplicationDriverClassName=\"/Script/ReplicationGraph.TestReplicationGraph\"", "Docs/Classes/UTestReplicationGraph/UTestReplicationGraph.html", ["test", "replication", "graph"], "");
addToContainers_function("UTestReplicationGraph", "", "Docs/Classes/UTestReplicationGraph/Functions/UTestReplicationGraph.html", ["test", "replication", "graph"], "UTestReplicationGraph");
addToContainers_function("InitGlobalActorClassSettings", "", "Docs/Classes/UTestReplicationGraph/Functions/InitGlobalActorClassSettings.html", ["init", "global", "actor", "class", "settings"], "UTestReplicationGraph");
addToContainers_function("InitGlobalGraphNodes", "", "Docs/Classes/UTestReplicationGraph/Functions/InitGlobalGraphNodes.html", ["init", "global", "graph", "nodes"], "UTestReplicationGraph");
addToContainers_function("InitConnectionGraphNodes", "", "Docs/Classes/UTestReplicationGraph/Functions/InitConnectionGraphNodes.html", ["init", "connection", "graph", "nodes"], "UTestReplicationGraph");
addToContainers_function("RouteAddNetworkActorToNodes", "", "Docs/Classes/UTestReplicationGraph/Functions/RouteAddNetworkActorToNodes.html", ["route", "add", "network", "actor", "to", "nodes"], "UTestReplicationGraph");
addToContainers_function("RouteRemoveNetworkActorToNodes", "", "Docs/Classes/UTestReplicationGraph/Functions/RouteRemoveNetworkActorToNodes.html", ["route", "remove", "network", "actor", "to", "nodes"], "UTestReplicationGraph");
addToContainers_function("ServerReplicateActors", "", "Docs/Classes/UTestReplicationGraph/Functions/ServerReplicateActors.html", ["server", "replicate", "actors"], "UTestReplicationGraph");
addToContainers_function("GetAlwaysRelevantNodeForConnection", "", "Docs/Classes/UTestReplicationGraph/Functions/GetAlwaysRelevantNodeForConnectio.html", ["get", "always", "relevant", "node", "for", "connection"], "UTestReplicationGraph");
addToContainers_variable("", "------------------------------------------------", "Docs/Classes/UTestReplicationGraph/Variables/.html", [], "UTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UTestReplicationGraph/Variables/_1.html", [], "UTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UTestReplicationGraph/Variables/_2.html", [], "UTestReplicationGraph");
addToContainers_variable("ClassRepNodePolicies", "Maps UClass to its mapping policy", "Docs/Classes/UTestReplicationGraph/Variables/ClassRepNodePolicies.html", ["class", "rep", "node", "policies"], "UTestReplicationGraph");
addToContainers_class("UTestReplicationGraphNode_ActorList", "---------- Note: ----------- This inherits from UReplicationGraphNode_ActorList which differs from how I did it in URTSReplicationGraph", "Docs/Classes/UTestReplicationGraphNode_ActorLi/UTestReplicationGraphNode_ActorLi.html", ["test", "replication", "graph", "node_", "actor", "list"], "");
addToContainers_function("UTestReplicationGraphNode_ActorList", "", "Docs/Classes/UTestReplicationGraphNode_ActorLi/Functions/UTestReplicationGraphNode_ActorLi.html", ["test", "replication", "graph", "node_", "actor", "list"], "UTestReplicationGraphNode_ActorList");
addToContainers_function("SetupNode", "", "Docs/Classes/UTestReplicationGraphNode_ActorLi/Functions/SetupNode.html", ["setup", "node"], "UTestReplicationGraphNode_ActorList");
addToContainers_function("NotifyAddNetworkActor", "", "Docs/Classes/UTestReplicationGraphNode_ActorLi/Functions/NotifyAddNetworkActor.html", ["notify", "add", "network", "actor"], "UTestReplicationGraphNode_ActorList");
addToContainers_function("NotifyRemoveNetworkActor", "", "Docs/Classes/UTestReplicationGraphNode_ActorLi/Functions/NotifyRemoveNetworkActor.html", ["notify", "remove", "network", "actor"], "UTestReplicationGraphNode_ActorList");
addToContainers_function("NotifyResetAllNetworkActors", "", "Docs/Classes/UTestReplicationGraphNode_ActorLi/Functions/NotifyResetAllNetworkActors.html", ["notify", "reset", "all", "network", "actors"], "UTestReplicationGraphNode_ActorList");
addToContainers_function("GatherActorListsForConnection", "", "Docs/Classes/UTestReplicationGraphNode_ActorLi/Functions/GatherActorListsForConnection.html", ["gather", "actor", "lists", "for", "connection"], "UTestReplicationGraphNode_ActorList");
addToContainers_class("UTestReplicationGraphNode_AlwaysRelevant", "", "Docs/Classes/UTestReplicationGraphNode_AlwaysR/UTestReplicationGraphNode_AlwaysR.html", ["test", "replication", "graph", "node_", "always", "relevant"], "");
addToContainers_class("UTestReplicationGraphNode_AlwaysRelevantForConnection", "", "Docs/Classes/UTestReplicationGraphNode_AlwaysR_1/UTestReplicationGraphNode_AlwaysR.html", ["test", "replication", "graph", "node_", "always", "relevant", "for", "connection"], "");
addToContainers_class("UAnotherTestReplicationGraph", "Another replication graph for testing only. This is an exact replica of UBasicReplicationGraph yet it behaves differently. I think I\'m done with this.", "Docs/Classes/UAnotherTestReplicationGraph/UAnotherTestReplicationGraph.html", ["another", "test", "replication", "graph"], "");
addToContainers_function("UAnotherTestReplicationGraph", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/UAnotherTestReplicationGraph.html", ["another", "test", "replication", "graph"], "UAnotherTestReplicationGraph");
addToContainers_function("InitGlobalActorClassSettings", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/InitGlobalActorClassSettings.html", ["init", "global", "actor", "class", "settings"], "UAnotherTestReplicationGraph");
addToContainers_function("InitGlobalGraphNodes", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/InitGlobalGraphNodes.html", ["init", "global", "graph", "nodes"], "UAnotherTestReplicationGraph");
addToContainers_function("InitConnectionGraphNodes", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/InitConnectionGraphNodes.html", ["init", "connection", "graph", "nodes"], "UAnotherTestReplicationGraph");
addToContainers_function("RouteAddNetworkActorToNodes", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/RouteAddNetworkActorToNodes.html", ["route", "add", "network", "actor", "to", "nodes"], "UAnotherTestReplicationGraph");
addToContainers_function("RouteRemoveNetworkActorToNodes", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/RouteRemoveNetworkActorToNodes.html", ["route", "remove", "network", "actor", "to", "nodes"], "UAnotherTestReplicationGraph");
addToContainers_function("ServerReplicateActors", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/ServerReplicateActors.html", ["server", "replicate", "actors"], "UAnotherTestReplicationGraph");
addToContainers_function("GetAlwaysRelevantNodeForConnection", "", "Docs/Classes/UAnotherTestReplicationGraph/Functions/GetAlwaysRelevantNodeForConnectio.html", ["get", "always", "relevant", "node", "for", "connection"], "UAnotherTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UAnotherTestReplicationGraph/Variables/.html", [], "UAnotherTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UAnotherTestReplicationGraph/Variables/_1.html", [], "UAnotherTestReplicationGraph");
addToContainers_variable("", "", "Docs/Classes/UAnotherTestReplicationGraph/Variables/_2.html", [], "UAnotherTestReplicationGraph");
addToContainers_variable("", "Actors that are only supposed to replicate to their owning connection, but that did not have a connection on spawn", "Docs/Classes/UAnotherTestReplicationGraph/Variables/_3.html", [], "UAnotherTestReplicationGraph");
addToContainers_class("ADevelopmentSettings", "All these settings are for development only and have no effect on shipping build. An alternative to using this class is to use UEditorPlaySettingsWidget", "Docs/Classes/ADevelopmentSettings/ADevelopmentSettings.html", ["development", "settings"], "");
addToContainers_function("ADevelopmentSettings", "", "Docs/Classes/ADevelopmentSettings/Functions/ADevelopmentSettings.html", ["development", "settings"], "ADevelopmentSettings");
addToContainers_function("InitHumanConfiguration", "", "Docs/Classes/ADevelopmentSettings/Functions/InitHumanConfiguration.html", ["init", "human", "configuration"], "ADevelopmentSettings");
addToContainers_function("InitCPUConfiguration", "", "Docs/Classes/ADevelopmentSettings/Functions/InitCPUConfiguration.html", ["init", "c", "p", "u", "configuration"], "ADevelopmentSettings");
addToContainers_function("InitStartingResources", "", "Docs/Classes/ADevelopmentSettings/Functions/InitStartingResources.html", ["init", "starting", "resources"], "ADevelopmentSettings");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/ADevelopmentSettings/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "ADevelopmentSettings");
addToContainers_function("ShouldSkipMainMenu", "", "Docs/Classes/ADevelopmentSettings/Functions/ShouldSkipMainMenu.html", ["should", "skip", "main", "menu"], "ADevelopmentSettings");
addToContainers_function("ShouldSkipOpeningCutscene", "", "Docs/Classes/ADevelopmentSettings/Functions/ShouldSkipOpeningCutscene.html", ["should", "skip", "opening", "cutscene"], "ADevelopmentSettings");
addToContainers_function("GetNumCPUPlayers", "Number of CPU players to try and spawn for PIE", "Docs/Classes/ADevelopmentSettings/Functions/GetNumCPUPlayers.html", ["get", "num", "c", "p", "u", "players"], "ADevelopmentSettings");
addToContainers_function("GetInvalidHumanOwnerRule", "", "Docs/Classes/ADevelopmentSettings/Functions/GetInvalidHumanOwnerRule.html", ["get", "invalid", "human", "owner", "rule"], "ADevelopmentSettings");
addToContainers_function("GetInvalidCPUOwnerRule", "", "Docs/Classes/ADevelopmentSettings/Functions/GetInvalidCPUOwnerRule.html", ["get", "invalid", "c", "p", "u", "owner", "rule"], "ADevelopmentSettings");
addToContainers_function("GetHumanPlayerInfo", "", "Docs/Classes/ADevelopmentSettings/Functions/GetHumanPlayerInfo.html", ["get", "human", "player", "info"], "ADevelopmentSettings");
addToContainers_function("GetCPUPlayerInfo", "", "Docs/Classes/ADevelopmentSettings/Functions/GetCPUPlayerInfo.html", ["get", "c", "p", "u", "player", "info"], "ADevelopmentSettings");
addToContainers_function("GetStartingResourceConfig", "Get how much resources each player starts with. Only for bSkipMainMenu", "Docs/Classes/ADevelopmentSettings/Functions/GetStartingResourceConfig.html", ["get", "starting", "resource", "config"], "ADevelopmentSettings");
addToContainers_function("GetDefeatCondition", "Get the defeat condition to use for PIE match. Only for bSkipMainMenu", "Docs/Classes/ADevelopmentSettings/Functions/GetDefeatCondition.html", ["get", "defeat", "condition"], "ADevelopmentSettings");
addToContainers_function("IsCheatWidgetBPSet", "", "Docs/Classes/ADevelopmentSettings/Functions/IsCheatWidgetBPSet.html", ["is", "cheat", "widget", "b", "p", "set"], "ADevelopmentSettings");
addToContainers_function("GetCheatWidgetBP", "", "Docs/Classes/ADevelopmentSettings/Functions/GetCheatWidgetBP.html", ["get", "cheat", "widget", "b", "p"], "ADevelopmentSettings");
addToContainers_function("ShouldInitiallyShowCheatWidget", "", "Docs/Classes/ADevelopmentSettings/Functions/ShouldInitiallyShowCheatWidget.html", ["should", "initially", "show", "cheat", "widget"], "ADevelopmentSettings");
addToContainers_variable("", "NOTE: after changing the name of this variable make sure to change name in PostEditChangeChainProperty", "Docs/Classes/ADevelopmentSettings/Variables/.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Skip just the opening intro movie/whatever and go straight to main menu", "Docs/Classes/ADevelopmentSettings/Variables/_1.html", [], "ADevelopmentSettings");
addToContainers_variable("", "If bSkipMainMenu is true, array of what team each player should be on. Can set observer here too Index 0 = server Index 1 = client 1 Index 2 = client 2 and so on", "Docs/Classes/ADevelopmentSettings/Variables/_2.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Number of CPU players to use in PIE", "Docs/Classes/ADevelopmentSettings/Variables/_3.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Info for CPU players when playing in PIE/standalone", "Docs/Classes/ADevelopmentSettings/Variables/_4.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Resources all players start with", "Docs/Classes/ADevelopmentSettings/Variables/_5.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Starting resources as a struct. Edited on post edit. Wow, this needed to be a UPROPERTY in order for the post edits to actually save. I did not know that", "Docs/Classes/ADevelopmentSettings/Variables/_6.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Defeat condition to use if skipping main menu to simulate a match. Use NoCondition to make it impossible for match to end without leaving", "Docs/Classes/ADevelopmentSettings/Variables/_7.html", [], "ADevelopmentSettings");
addToContainers_variable("", "What to do with selectables already placed on map that do not have a valid owner index. Couple of points though: - selectables will never be spawned if their final owner is on the wrong faction - selectables will never be spawned if their final owner is a match observer", "Docs/Classes/ADevelopmentSettings/Variables/_8.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Same as above but for selectables placed on map that are trying to be assigned to a CPU player as opposed to a human player", "Docs/Classes/ADevelopmentSettings/Variables/_9.html", [], "ADevelopmentSettings");
addToContainers_variable("", "The widget to use for the cheat widget", "Docs/Classes/ADevelopmentSettings/Variables/_10.html", [], "ADevelopmentSettings");
addToContainers_variable("", "Whether to show the cheat widget by default at the start of the match or not. To toggle the cheat widget in match use the \"=\" button", "Docs/Classes/ADevelopmentSettings/Variables/_11.html", [], "ADevelopmentSettings");
addToContainers_variable("", "", "Docs/Classes/ADevelopmentSettings/Variables/_12.html", [], "ADevelopmentSettings");
addToContainers_variable("", "", "Docs/Classes/ADevelopmentSettings/Variables/_13.html", [], "ADevelopmentSettings");
addToContainers_class("UEnumStringRepresentations", "This class contains mapping from enum to the string form for it so it can be shown on UI. Static variables aren\'t good enough because I want to default fill the containers but I don\'t think UENUM exist yet so it doesn\'t work (thinking about it I thought UHT runs first, generates code, so UENUM info should be available). Anyway I never create this class at anytime - just using the default object you can get the info you want. In the future perhaps I could spawn this class sometime when the editor starts and that way users can edit strings without having to recompile C++. Then you would wanna make sure to not get the default object but get that other one. This class was added because sometimes I need enum string representations but the game instance isn\'t alive e.g. for editor utility widgets Also most of this class is wrapped in EDITOR_ONLY preproc. There\'s nothing stop", "Docs/Classes/UEnumStringRepresentations/UEnumStringRepresentations.html", ["enum", "string", "representations"], "");
addToContainers_function("UEnumStringRepresentations", "", "Docs/Classes/UEnumStringRepresentations/Functions/UEnumStringRepresentations.html", ["enum", "string", "representations"], "UEnumStringRepresentations");
addToContainers_function("Get", "Get the object you can query for strings/enum.values", "Docs/Classes/UEnumStringRepresentations/Functions/Get.html", [], "UEnumStringRepresentations");
addToContainers_function("GetString", "Functions to get a user-defined string representation of an enum value", "Docs/Classes/UEnumStringRepresentations/Functions/GetString.html", ["get", "string"], "UEnumStringRepresentations");
addToContainers_function("GetString", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetString_1.html", ["get", "string"], "UEnumStringRepresentations");
addToContainers_function("GetString", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetString_2.html", ["get", "string"], "UEnumStringRepresentations");
addToContainers_function("GetString", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetString_3.html", ["get", "string"], "UEnumStringRepresentations");
addToContainers_function("GetString", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetString_4.html", ["get", "string"], "UEnumStringRepresentations");
addToContainers_function("GetString", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetString_5.html", ["get", "string"], "UEnumStringRepresentations");
addToContainers_function("GetEnumValueFromStringSlow_EditorPlaySkippingOption", "These functions do the reverse: they take a string and try convert it to an enum value. @return - true if the string corrisponds to an enum value", "Docs/Classes/UEnumStringRepresentations/Functions/GetEnumValueFromStringSlow_Editor.html", ["get", "enum", "value", "from", "string", "slow_", "editor", "play", "skipping", "option"], "UEnumStringRepresentations");
addToContainers_function("GetEnumValueFromStringSlow_DefeatCondition", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetEnumValueFromStringSlow_Defeat.html", ["get", "enum", "value", "from", "string", "slow_", "defeat", "condition"], "UEnumStringRepresentations");
addToContainers_function("GetEnumValueFromStringSlow_PIEPlayInvalidOwnerRule", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetEnumValueFromStringSlow_PIEPla.html", ["get", "enum", "value", "from", "string", "slow_", "p", "i", "e", "play", "invalid", "owner", "rule"], "UEnumStringRepresentations");
addToContainers_function("GetEnumValueFromStringSlow_Faction", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetEnumValueFromStringSlow_Factio.html", ["get", "enum", "value", "from", "string", "slow_", "faction"], "UEnumStringRepresentations");
addToContainers_function("GetEnumValueFromStringSlow_Team", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetEnumValueFromStringSlow_Team.html", ["get", "enum", "value", "from", "string", "slow_", "team"], "UEnumStringRepresentations");
addToContainers_function("GetEnumValueFromStringSlow_CPUDifficulty", "", "Docs/Classes/UEnumStringRepresentations/Functions/GetEnumValueFromStringSlow_CPUDif.html", ["get", "enum", "value", "from", "string", "slow_", "c", "p", "u", "difficulty"], "UEnumStringRepresentations");
addToContainers_function("InitializeEnumToString_EditorPlaySkippingOption", "", "Docs/Classes/UEnumStringRepresentations/Functions/InitializeEnumToString_EditorPlay.html", ["initialize", "enum", "to", "string_", "editor", "play", "skipping", "option"], "UEnumStringRepresentations");
addToContainers_function("InitializeEnumToString_DefeatConditions", "", "Docs/Classes/UEnumStringRepresentations/Functions/InitializeEnumToString_DefeatCond.html", ["initialize", "enum", "to", "string_", "defeat", "conditions"], "UEnumStringRepresentations");
addToContainers_function("InitializeEnumToString_InvalidOwnerIndexAction", "", "Docs/Classes/UEnumStringRepresentations/Functions/InitializeEnumToString_InvalidOwn.html", ["initialize", "enum", "to", "string_", "invalid", "owner", "index", "action"], "UEnumStringRepresentations");
addToContainers_function("InitializeEnumToString_Faction", "", "Docs/Classes/UEnumStringRepresentations/Functions/InitializeEnumToString_Faction.html", ["initialize", "enum", "to", "string_", "faction"], "UEnumStringRepresentations");
addToContainers_function("InitializeEnumToString_Team", "", "Docs/Classes/UEnumStringRepresentations/Functions/InitializeEnumToString_Team.html", ["initialize", "enum", "to", "string_", "team"], "UEnumStringRepresentations");
addToContainers_function("InitializeEnumToString_CPUDifficulty", "", "Docs/Classes/UEnumStringRepresentations/Functions/InitializeEnumToString_CPUDifficu.html", ["initialize", "enum", "to", "string_", "c", "p", "u", "difficulty"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_EditorPlaySkippingOption", "I use CDO of this class and that\'s it. In future if that changes then make these non-const, and only populate them if we\'re NOT the CDO cause the CDO will be ignored. This will save on memory", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_EditorPlaySkippingOp.html", ["enum", "to", "string_", "editor", "play", "skipping", "option"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_DefeatConditions", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_DefeatConditions.html", ["enum", "to", "string_", "defeat", "conditions"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_InvalidOwnerIndexAction", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_InvalidOwnerIndexAct.html", ["enum", "to", "string_", "invalid", "owner", "index", "action"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_Faction", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_Faction.html", ["enum", "to", "string_", "faction"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_Team", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_Team.html", ["enum", "to", "string_", "team"], "UEnumStringRepresentations");
addToContainers_variable("EnumToString_CPUDifficulty", "", "Docs/Classes/UEnumStringRepresentations/Variables/EnumToString_CPUDifficulty.html", ["enum", "to", "string_", "c", "p", "u", "difficulty"], "UEnumStringRepresentations");
addToContainers_struct("FInputInfoBase", "", "Docs/Structs/FInputInfoBase/FInputInfoBase.html", ["input", "info", "base"], "");
addToContainers_function("FInputInfoBase", "", "Docs/Structs/FInputInfoBase/Functions/FInputInfoBase.html", ["input", "info", "base"], "FInputInfoBase");
addToContainers_function("FInputInfoBase", "", "Docs/Structs/FInputInfoBase/Functions/FInputInfoBase_1.html", ["input", "info", "base"], "FInputInfoBase");
addToContainers_function("HasCTRLKeyModifier", "Whether the modifier key has to be pressed as well for the key event to happen", "Docs/Structs/FInputInfoBase/Functions/HasCTRLKeyModifier.html", ["has", "c", "t", "r", "l", "key", "modifier"], "FInputInfoBase");
addToContainers_function("HasALTKeyModifier", "", "Docs/Structs/FInputInfoBase/Functions/HasALTKeyModifier.html", ["has", "a", "l", "t", "key", "modifier"], "FInputInfoBase");
addToContainers_function("HasShiftKeyModifier", "", "Docs/Structs/FInputInfoBase/Functions/HasShiftKeyModifier.html", ["has", "shift", "key", "modifier"], "FInputInfoBase");
addToContainers_variable("DisplayName", "The name to appear in game\'s UI", "Docs/Structs/FInputInfoBase/Variables/DisplayName.html", ["display", "name"], "FInputInfoBase");
addToContainers_variable("ActionName", "The name to appear in the project settings. By default the ctor will use the display name.", "Docs/Structs/FInputInfoBase/Variables/ActionName.html", ["action", "name"], "FInputInfoBase");
addToContainers_variable("KeyWithModifiers", "The default key for this action. This is the key it will be assigned to the first time the player starts the game. Can use EKeys::Invalid to signal it doesn\'t have a key bound to it by default.", "Docs/Structs/FInputInfoBase/Variables/KeyWithModifiers.html", ["key", "with", "modifiers"], "FInputInfoBase");
addToContainers_variable("ActionAsEnum", "What this action is in enum form. Will be \"None\" if this is for an axis mapping", "Docs/Structs/FInputInfoBase/Variables/ActionAsEnum.html", ["action", "as", "enum"], "FInputInfoBase");
addToContainers_variable("AxisAsEnum", "Will be \"None\" if this is for an action mapping", "Docs/Structs/FInputInfoBase/Variables/AxisAsEnum.html", ["axis", "as", "enum"], "FInputInfoBase");
addToContainers_variable("1", "Whether the action needs to be executed when the game is paused", "Docs/Structs/FInputInfoBase/Variables/1.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether the action is even allowed to be remapped from the default value by the player", "Docs/Structs/FInputInfoBase/Variables/1_1.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether the action is for when WITH_EDITOR is true only", "Docs/Structs/FInputInfoBase/Variables/1_2.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether this action is for a player participating in the match", "Docs/Structs/FInputInfoBase/Variables/1_3.html", [], "FInputInfoBase");
addToContainers_variable("1", "Whether this mapping is for a person observing a match", "Docs/Structs/FInputInfoBase/Variables/1_4.html", [], "FInputInfoBase");
addToContainers_struct("FInputActionInfo", "", "Docs/Structs/FInputActionInfo/FInputActionInfo.html", ["input", "action", "info"], "");
addToContainers_function("FInputActionInfo", "", "Docs/Structs/FInputActionInfo/Functions/FInputActionInfo.html", ["input", "action", "info"], "FInputActionInfo");
addToContainers_function("FInputActionInfo", "@param InDisplayName - name that will appear in game UI. Also the name that will appear in project settings in Key Mappings. @param InDefaultKey - the key that will be bound to this action by default. Use EKeys::Invalid to let it have no default key. @param KeyModifierFlags - whether a modifier key has to be held down while key is pressed @param PressedAction - function to call when the key is pressed @param ReleasedAction - the function to call when the button is released. Can be left null @param bShouldExecuteWhenPaused - whether the key event should register while the game is paused @param bIsAllowedToBeRemapped - whether the key is allowed to be remapped by the player", "Docs/Structs/FInputActionInfo/Functions/FInputActionInfo_1.html", ["input", "action", "info"], "FInputActionInfo");
addToContainers_function("HasActionForKeyPress", "", "Docs/Structs/FInputActionInfo/Functions/HasActionForKeyPress.html", ["has", "action", "for", "key", "press"], "FInputActionInfo");
addToContainers_function("HasActionForKeyRelease", "", "Docs/Structs/FInputActionInfo/Functions/HasActionForKeyRelease.html", ["has", "action", "for", "key", "release"], "FInputActionInfo");
addToContainers_variable("OnPressedAction", "Name of function to call for input event", "Docs/Structs/FInputActionInfo/Variables/OnPressedAction.html", ["on", "pressed", "action"], "FInputActionInfo");
addToContainers_variable("OnReleasedAction", "", "Docs/Structs/FInputActionInfo/Variables/OnReleasedAction.html", ["on", "released", "action"], "FInputActionInfo");
addToContainers_class("KeyMappings", "", "Docs/Classes/KeyMappings/KeyMappings.html", ["key", "mappings"], "");
addToContainers_function("CreateDefaultActionInfos", "", "Docs/Classes/KeyMappings/Functions/CreateDefaultActionInfos.html", ["create", "default", "action", "infos"], "KeyMappings");
addToContainers_function("AddActionInfo", "", "Docs/Classes/KeyMappings/Functions/AddActionInfo.html", ["add", "action", "info"], "KeyMappings");
addToContainers_function("AddActionInfo", "This takes a regular C array instead of a TArray", "Docs/Classes/KeyMappings/Functions/AddActionInfo_1.html", ["add", "action", "info"], "KeyMappings");
addToContainers_function("ActionTypeToArrayIndex", "", "Docs/Classes/KeyMappings/Functions/ActionTypeToArrayIndex.html", ["action", "type", "to", "array", "index"], "KeyMappings");
addToContainers_function("ArrayIndexToActionType", "", "Docs/Classes/KeyMappings/Functions/ArrayIndexToActionType.html", ["array", "index", "to", "action", "type"], "KeyMappings");
addToContainers_variable("NUM_ACTIONS", "", "Docs/Classes/KeyMappings/Variables/NUM_ACTIONS.html", ["u", "m_", "a", "c", "t", "i", "o", "n", "s"], "KeyMappings");
addToContainers_variable("ActionInfos", "This can actually be made const and TFixedAllocator<NUM_ACTIONS>. Same with AxisInfos. In fact in order to stop users accidentially modifiying it it should", "Docs/Classes/KeyMappings/Variables/ActionInfos.html", ["action", "infos"], "KeyMappings");
addToContainers_variable("NumArrayEntries", "static FInputActionInfo ActionInfos[NUM_ACTIONS];", "Docs/Classes/KeyMappings/Variables/NumArrayEntries.html", ["num", "array", "entries"], "KeyMappings");
addToContainers_struct("FInputAxisInfo", "", "Docs/Structs/FInputAxisInfo/FInputAxisInfo.html", ["input", "axis", "info"], "");
addToContainers_function("FInputAxisInfo", "", "Docs/Structs/FInputAxisInfo/Functions/FInputAxisInfo.html", ["input", "axis", "info"], "FInputAxisInfo");
addToContainers_function("FInputAxisInfo", "", "Docs/Structs/FInputAxisInfo/Functions/FInputAxisInfo_1.html", ["input", "axis", "info"], "FInputAxisInfo");
addToContainers_variable("FunctionPtr", "Name of function to call for input event", "Docs/Structs/FInputAxisInfo/Variables/FunctionPtr.html", ["function", "ptr"], "FInputAxisInfo");
addToContainers_variable("Scale", "", "Docs/Structs/FInputAxisInfo/Variables/Scale.html", [], "FInputAxisInfo");
addToContainers_class("AxisMappings", "", "Docs/Classes/AxisMappings/AxisMappings.html", ["axis", "mappings"], "");
addToContainers_function("CreateDefaultAxisInfos", "", "Docs/Classes/AxisMappings/Functions/CreateDefaultAxisInfos.html", ["create", "default", "axis", "infos"], "AxisMappings");
addToContainers_function("AddAxisInfo", "", "Docs/Classes/AxisMappings/Functions/AddAxisInfo.html", ["add", "axis", "info"], "AxisMappings");
addToContainers_function("AddAxisInfo", "This takes a regular C array instead of TArray", "Docs/Classes/AxisMappings/Functions/AddAxisInfo_1.html", ["add", "axis", "info"], "AxisMappings");
addToContainers_function("AxisTypeToArrayIndex", "", "Docs/Classes/AxisMappings/Functions/AxisTypeToArrayIndex.html", ["axis", "type", "to", "array", "index"], "AxisMappings");
addToContainers_function("ArrayIndexToAxisType", "", "Docs/Classes/AxisMappings/Functions/ArrayIndexToAxisType.html", ["array", "index", "to", "axis", "type"], "AxisMappings");
addToContainers_variable("NUM_AXIS", "", "Docs/Classes/AxisMappings/Variables/NUM_AXIS.html", ["u", "m_", "a", "x", "i", "s"], "AxisMappings");
addToContainers_variable("AxisInfos", "--------------------------------------------------------", "Docs/Classes/AxisMappings/Variables/AxisInfos.html", ["axis", "infos"], "AxisMappings");
addToContainers_variable("NumArrayEntries", "static FInputAxisInfo AxisInfos[NUM_AXIS];", "Docs/Classes/AxisMappings/Variables/NumArrayEntries.html", ["num", "array", "entries"], "AxisMappings");
addToContainers_class("InputMappings", "Class for input in general (both action mappings and axis mappings)", "Docs/Classes/InputMappings/InputMappings.html", ["input", "mappings"], "");
addToContainers_struct("FControlSettingDependencyInfo", "Struct to hold information about a dependency a setting has on another setting", "Docs/Structs/FControlSettingDependencyInfo/FControlSettingDependencyInfo.html", ["control", "setting", "dependency", "info"], "");
addToContainers_function("FControlSettingDependencyInfo", "Never call this ctor", "Docs/Structs/FControlSettingDependencyInfo/Functions/FControlSettingDependencyInfo.html", ["control", "setting", "dependency", "info"], "FControlSettingDependencyInfo");
addToContainers_function("FControlSettingDependencyInfo", "Ctor for when dependency is a bool @param InDependency - the other setting @param bInRequiredValue - value InDependency must be in order to be editable in UI", "Docs/Structs/FControlSettingDependencyInfo/Functions/FControlSettingDependencyInfo_1.html", ["control", "setting", "dependency", "info"], "FControlSettingDependencyInfo");
addToContainers_function("FControlSettingDependencyInfo", "Ctor for when dependency is a float", "Docs/Structs/FControlSettingDependencyInfo/Functions/FControlSettingDependencyInfo_2.html", ["control", "setting", "dependency", "info"], "FControlSettingDependencyInfo");
addToContainers_variable("Dependency", "", "Docs/Structs/FControlSettingDependencyInfo/Variables/Dependency.html", [], "FControlSettingDependencyInfo");
addToContainers_variable("DependencyFullfilledOperator", "What the dependency must be in relation to required value for it to be fullfilled", "Docs/Structs/FControlSettingDependencyInfo/Variables/DependencyFullfilledOperator.html", ["dependency", "fullfilled", "operator"], "FControlSettingDependencyInfo");
addToContainers_variable("bRequiredValue", "Required value if dependency is a bool", "Docs/Structs/FControlSettingDependencyInfo/Variables/bRequiredValue.html", ["required", "value"], "FControlSettingDependencyInfo");
addToContainers_variable("RequiredValue", "Required value if dependency is a float", "Docs/Structs/FControlSettingDependencyInfo/Variables/RequiredValue.html", ["required", "value"], "FControlSettingDependencyInfo");
addToContainers_struct("FControlSettingInfo", "A struct that stores the default value for a control setting + its min and max and how much to adjust it by by default", "Docs/Structs/FControlSettingInfo/FControlSettingInfo.html", ["control", "setting", "info"], "");
addToContainers_function("void", "", "Docs/Structs/FControlSettingInfo/Functions/void.html", [], "FControlSettingInfo");
addToContainers_function("void", "", "Docs/Structs/FControlSettingInfo/Functions/void_1.html", [], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "Never use this ctor ", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "Only use this constructor @param VariablePtr - reference to the variable that this is for @param InDefaultValue - the default value to write to .ini file when starting game for the first time @param InUIDependencies - this array contains what other variables values must be in order for this setting to be editable in the UI. This applies to UI only. Ensure your func that sets the value also takes its dependencies into account if it needs to", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_1.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "Float constructor that takes only one dependency for readability", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_2.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "Ctors for bools", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_3.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("FControlSettingInfo", "", "Docs/Structs/FControlSettingInfo/Functions/FControlSettingInfo_4.html", ["control", "setting", "info"], "FControlSettingInfo");
addToContainers_function("GetDisplayName", "==========================================================================================", "Docs/Structs/FControlSettingInfo/Functions/GetDisplayName.html", ["get", "display", "name"], "FControlSettingInfo");
addToContainers_function("GetVariableType", "", "Docs/Structs/FControlSettingInfo/Functions/GetVariableType.html", ["get", "variable", "type"], "FControlSettingInfo");
addToContainers_function("GetValue", "Get the current value the variable is set at. Always returns a float even if the variable is a bool, bust casted to a bool the result should be correct", "Docs/Structs/FControlSettingInfo/Functions/GetValue.html", ["get", "value"], "FControlSettingInfo");
addToContainers_function("GetStep", "Get what step the variable is currently at. Will never return -1", "Docs/Structs/FControlSettingInfo/Functions/GetStep.html", ["get", "step"], "FControlSettingInfo");
addToContainers_function("GetNumSteps", "Get the total number of different values this variable can take on -1 if the default value isn\'t contained in Steps", "Docs/Structs/FControlSettingInfo/Functions/GetNumSteps.html", ["get", "num", "steps"], "FControlSettingInfo");
addToContainers_function("SetValue", "", "Docs/Structs/FControlSettingInfo/Functions/SetValue.html", ["set", "value"], "FControlSettingInfo");
addToContainers_function("AdjustValue", "Adjust the current value by another value, making sure the final set value stays within the limits. @param StepAdjustAmount - number of steps to try adjust by @return - actual value the variable was set to", "Docs/Structs/FControlSettingInfo/Functions/AdjustValue.html", ["adjust", "value"], "FControlSettingInfo");
addToContainers_function("ClampValue", "", "Docs/Structs/FControlSettingInfo/Functions/ClampValue.html", ["clamp", "value"], "FControlSettingInfo");
addToContainers_function("ResetToDefault", "Set variable to default value @return - the new value the variable was set to", "Docs/Structs/FControlSettingInfo/Functions/ResetToDefault.html", ["reset", "to", "default"], "FControlSettingInfo");
addToContainers_function("GetDefaultValue", "Should work ok even if variable is a bool", "Docs/Structs/FControlSettingInfo/Functions/GetDefaultValue.html", ["get", "default", "value"], "FControlSettingInfo");
addToContainers_function("ApplyValue", "Does not write to disk", "Docs/Structs/FControlSettingInfo/Functions/ApplyValue.html", ["apply", "value"], "FControlSettingInfo");
addToContainers_variable("DisplayName", "The name it display on the UI", "Docs/Structs/FControlSettingInfo/Variables/DisplayName.html", ["display", "name"], "FControlSettingInfo");
addToContainers_variable("VariablePtr", "Pointer to the variable this struct is for. If *VariablePtr == -1 then it is the default value. However if *VariablePtr == DefaultValueStep then that also means it equals the defaul value. Either is fine", "Docs/Structs/FControlSettingInfo/Variables/VariablePtr.html", ["variable", "ptr"], "FControlSettingInfo");
addToContainers_variable("VariableType", "", "Docs/Structs/FControlSettingInfo/Variables/VariableType.html", ["variable", "type"], "FControlSettingInfo");
addToContainers_variable("", "Default value to use first time starting up game", "Docs/Structs/FControlSettingInfo/Variables/.html", [], "FControlSettingInfo");
addToContainers_variable("DefaultValueStep", "Index in Steps that is where the default value is. If Steps does not contain DefaultValue then DefaultValueStep will be an index in Steps that is close to DefaultValue", "Docs/Structs/FControlSettingInfo/Variables/DefaultValueStep.html", ["default", "value", "step"], "FControlSettingInfo");
addToContainers_variable("Steps", "Values that this variable can take on", "Docs/Structs/FControlSettingInfo/Variables/Steps.html", [], "FControlSettingInfo");
addToContainers_variable("", "Array of other settings that must be certain values for this setting to be editable in UI", "Docs/Structs/FControlSettingInfo/Variables/_1.html", [], "FControlSettingInfo");
addToContainers_class("URTSGameUserSettings", "Custom game user settings for RTS. All settings in this class have the possibility to be modified at run time. Class updates the GameUserSettings.ini file Note: while testing with standalone stuff might not behave exactly how you would expect. I think this is because perhaps in standalone the .ini file never gets written to. Best test with PIE. ------------------------------------------------------------------------------------------- Some terminology: - apply settings means to use the values stored in the config variable on this class (not the ones in the .ini file) and make them take effect e.g. the volume actually changes, or the mouse sensitivity actually changes. Then they will be written to the .ini file. - to restore settings to default means to put default values into the config variables on this class (again NOT the .ini file). Settings still need to be applied for them to take effect. - to revert changes would mean to load from the .ini file into the config variables in this class. This will probably happen when I implement a settings menu and it asks if you would like to keep the changes. ------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- Some notes about UGameUserSettings: - When launching standalone it seems to ignore the ini file - when launching PIE the .ini file is not loaded. Therefore changes to the .ini file must be done before launching the editor for them to take effect. I could probably call LoadSettings some time after PIE starts to load them. It\'s just a matter of whether it causes PIE to take significantly longer to load. ---------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------- Some notes about how this class has been implemented: - If you modify your .ini file and start the editor then the changes will not be applied. You must change the defaults defined in C++ instead. However when the game is packaged then values in the .ini file will be used. You can actually use your .ini file values if you set bUseIniValues to true (must be done before starting the editor). That variable will stay set to true until you set it back to false via your .ini file. While the editor is open you can make changes to the .ini file, save it, and those changes will take effect for the next PIE session. Note the game has to load the ini file right before each PIE session so it\'s advisable to set it back to false once you\'re done fidling with ini file values. And once you do your next play session will use defaults. - In a packaged game you can set GameStartType to HasNotStartedGameBefore to cause all settings to be reset to default. - If you want to modify your key mappings then do it in GameUserSettings.ini in ActionToKey and AxisToKey. Do not modify Input.ini. Changes made there will have no effect. The same goes for modifying the action mappings and axis mappings in project settings in editor. ---------------------------------------------------------------------------------------------- To add a new control setting via C++: 1. Add a config variable declaration below like the other variables 2. In CommonEnums.h under EControlSettingType add a new entry for your variable. Name is arbitrary 3. In ctor add a ControlSettings.Emplace entry with the values you would like 4. In ApplyControlSettings(AMyPlayerController *) add an entry that will update what you want. You will need to implement this function yourself. 5. Compile If you just want to change the default value of a variable defined in this class you need to do it in the ctor Emplace corrisponding to it.", "Docs/Classes/URTSGameUserSettings/URTSGameUserSettings.html", ["r", "t", "s", "game", "user", "settings"], "");
addToContainers_function("URTSGameUserSettings", "==========================================================================================", "Docs/Classes/URTSGameUserSettings/Functions/URTSGameUserSettings.html", ["r", "t", "s", "game", "user", "settings"], "URTSGameUserSettings");
addToContainers_function("PostInitProperties", "Called after the C++ constructor and after the properties have been loaded from .ini file", "Docs/Classes/URTSGameUserSettings/Functions/PostInitProperties.html", ["post", "init", "properties"], "URTSGameUserSettings");
addToContainers_function("SetupControlSettingStepArrays", "", "Docs/Classes/URTSGameUserSettings/Functions/SetupControlSettingStepArrays.html", ["setup", "control", "setting", "step", "arrays"], "URTSGameUserSettings");
addToContainers_function("UseCPlusPlusDefaults", "Whether to use the default values defined in C++", "Docs/Classes/URTSGameUserSettings/Functions/UseCPlusPlusDefaults.html", ["use", "c", "plus", "plus", "defaults"], "URTSGameUserSettings");
addToContainers_function("SetToDefaults", "", "Docs/Classes/URTSGameUserSettings/Functions/SetToDefaults.html", ["set", "to", "defaults"], "URTSGameUserSettings");
addToContainers_function("SetToDefaultsNoFail", "Basically will not check the branch in URTSGameUserSettings::SetToDefaults.", "Docs/Classes/URTSGameUserSettings/Functions/SetToDefaultsNoFail.html", ["set", "to", "defaults", "no", "fail"], "URTSGameUserSettings");
addToContainers_function("LoadSettings", "", "Docs/Classes/URTSGameUserSettings/Functions/LoadSettings.html", ["load", "settings"], "URTSGameUserSettings");
addToContainers_function("LoadSettingsNoFail", "Basically this will not check the branch in URTSGameUserSettings::LoadSettings so it will always load settings", "Docs/Classes/URTSGameUserSettings/Functions/LoadSettingsNoFail.html", ["load", "settings", "no", "fail"], "URTSGameUserSettings");
addToContainers_function("LoadSettingsInner", "", "Docs/Classes/URTSGameUserSettings/Functions/LoadSettingsInner.html", ["load", "settings", "inner"], "URTSGameUserSettings");
addToContainers_function("InitialSetup", "If starting game for very first time then set all config properties to default values", "Docs/Classes/URTSGameUserSettings/Functions/InitialSetup.html", ["initial", "setup"], "URTSGameUserSettings");
addToContainers_function("ApplyAllSettings", "The UGAmeUserSettings::ApplySettings(bool) func must get called early on when engine is intializing and I cannot get a world context or even use a class GI variable set eariler. Anyway, this function will apply all settings and save them to disk", "Docs/Classes/URTSGameUserSettings/Functions/ApplyAllSettings.html", ["apply", "all", "settings"], "URTSGameUserSettings");
addToContainers_function("ApplySettings", "Applies all current user settings to the game and saves to permanent storage (e.g. file)", "Docs/Classes/URTSGameUserSettings/Functions/ApplySettings.html", ["apply", "settings"], "URTSGameUserSettings");
addToContainers_function("HasSeenProfile", "", "Docs/Classes/URTSGameUserSettings/Functions/HasSeenProfile.html", ["has", "seen", "profile"], "URTSGameUserSettings");
addToContainers_function("GetPlayerAlias", "", "Docs/Classes/URTSGameUserSettings/Functions/GetPlayerAlias.html", ["get", "player", "alias"], "URTSGameUserSettings");
addToContainers_function("GetDefaultFaction", "", "Docs/Classes/URTSGameUserSettings/Functions/GetDefaultFaction.html", ["get", "default", "faction"], "URTSGameUserSettings");
addToContainers_function("ChangeHasSeenProfile", "", "Docs/Classes/URTSGameUserSettings/Functions/ChangeHasSeenProfile.html", ["change", "has", "seen", "profile"], "URTSGameUserSettings");
addToContainers_function("ChangePlayerAlias", "", "Docs/Classes/URTSGameUserSettings/Functions/ChangePlayerAlias.html", ["change", "player", "alias"], "URTSGameUserSettings");
addToContainers_function("ChangeDefaultFaction", "", "Docs/Classes/URTSGameUserSettings/Functions/ChangeDefaultFaction.html", ["change", "default", "faction"], "URTSGameUserSettings");
addToContainers_function("ResetProfileSettingsToDefaults", "", "Docs/Classes/URTSGameUserSettings/Functions/ResetProfileSettingsToDefaults.html", ["reset", "profile", "settings", "to", "defaults"], "URTSGameUserSettings");
addToContainers_function("ApplyProfileSettings", "", "Docs/Classes/URTSGameUserSettings/Functions/ApplyProfileSettings.html", ["apply", "profile", "settings"], "URTSGameUserSettings");
addToContainers_function("GetControlSettingInfo", "", "Docs/Classes/URTSGameUserSettings/Functions/GetControlSettingInfo.html", ["get", "control", "setting", "info"], "URTSGameUserSettings");
addToContainers_function("GetControlSettingValue", "", "Docs/Classes/URTSGameUserSettings/Functions/GetControlSettingValue.html", ["get", "control", "setting", "value"], "URTSGameUserSettings");
addToContainers_function("ResetControlSettingsToDefaults", "Resets all control settings to defaults. Does not reset key mappings", "Docs/Classes/URTSGameUserSettings/Functions/ResetControlSettingsToDefaults.html", ["reset", "control", "settings", "to", "defaults"], "URTSGameUserSettings");
addToContainers_function("ApplyControlSettings", "Remember to call this anytime player controller changes. BeginPlay would be a good place. Param is not casted to allow some classes to avoid including MyPlayerController.h", "Docs/Classes/URTSGameUserSettings/Functions/ApplyControlSettings.html", ["apply", "control", "settings"], "URTSGameUserSettings");
addToContainers_function("GetVolume", "Get volume for a sound class", "Docs/Classes/URTSGameUserSettings/Functions/GetVolume.html", ["get", "volume"], "URTSGameUserSettings");
addToContainers_function("GetStepCount", "Get what step count a sound class is at", "Docs/Classes/URTSGameUserSettings/Functions/GetStepCount.html", ["get", "step", "count"], "URTSGameUserSettings");
addToContainers_function("SetVolume", "Adjust the volume of a sound class, making sure it stays within limits. Will apply it instantly but does not write the change to disk", "Docs/Classes/URTSGameUserSettings/Functions/SetVolume.html", ["set", "volume"], "URTSGameUserSettings");
addToContainers_function("AdjustVolume", "Adjust the volume of a sound class, making sure it stays within limits. Will apply it instantly but does not write the change to disk", "Docs/Classes/URTSGameUserSettings/Functions/AdjustVolume.html", ["adjust", "volume"], "URTSGameUserSettings");
addToContainers_function("PopulateSoundClassVolumes", "Populate the container SoundClassVolumes with all sound classes", "Docs/Classes/URTSGameUserSettings/Functions/PopulateSoundClassVolumes.html", ["populate", "sound", "class", "volumes"], "URTSGameUserSettings");
addToContainers_function("ResetAudioSettingsToDefaults", "Note: SoundClassVolumes must be populated with all sound classes for this to work correctly", "Docs/Classes/URTSGameUserSettings/Functions/ResetAudioSettingsToDefaults.html", ["reset", "audio", "settings", "to", "defaults"], "URTSGameUserSettings");
addToContainers_function("ApplySoundSettings", "Applies sound settings", "Docs/Classes/URTSGameUserSettings/Functions/ApplySoundSettings.html", ["apply", "sound", "settings"], "URTSGameUserSettings");
addToContainers_function("ResetKeyMappingsToDefault", "==========================================================================================", "Docs/Classes/URTSGameUserSettings/Functions/ResetKeyMappingsToDefault.html", ["reset", "key", "mappings", "to", "default"], "URTSGameUserSettings");
addToContainers_function("ApplyKeyMappingSettings", "", "Docs/Classes/URTSGameUserSettings/Functions/ApplyKeyMappingSettings.html", ["apply", "key", "mapping", "settings"], "URTSGameUserSettings");
addToContainers_function("RemapKeyBinding", "Changes a key mapping. Will unbind other actions if required if bForce is true. It becomes essentially applied instantly but does not write to disk, although after testing it it appears it is written to disk both the GameUserSettings.ini and the Input.ini. @param ActionToBind - the action to receive a key binding @param Key - the key to bind to ActiontoBind @param bForce - if true then actions will become unbound to bind this action if necessary. If an action that you specify as unremappable would become unbound though it will not happen and this func will return false @param OutResult - will contain entries to what was remapped. If they are all None then nothing was remapped. @return - true if successful. This can return false if the remap would unbind an action that isn\'t allowed to be unbinded", "Docs/Classes/URTSGameUserSettings/Functions/RemapKeyBinding.html", ["remap", "key", "binding"], "URTSGameUserSettings");
addToContainers_function("RemapKeyBinding", "", "Docs/Classes/URTSGameUserSettings/Functions/RemapKeyBinding_1.html", ["remap", "key", "binding"], "URTSGameUserSettings");
addToContainers_function("GetKey", "Get the key assigned to a game action. Is this the applied key? Not necessarily. Just the value stored in this class at the momenet", "Docs/Classes/URTSGameUserSettings/Functions/GetKey.html", ["get", "key"], "URTSGameUserSettings");
addToContainers_function("GetKey", "", "Docs/Classes/URTSGameUserSettings/Functions/GetKey_1.html", ["get", "key"], "URTSGameUserSettings");
addToContainers_function("GetBoundAction", "Returns the action mapping that is bound to a key, or None if no action mapping is bound to the key", "Docs/Classes/URTSGameUserSettings/Functions/GetBoundAction.html", ["get", "bound", "action"], "URTSGameUserSettings");
addToContainers_function("GetBoundActionIgnoringModifiers", "Will return an action bound to the key ignoring modifiers. e.g. if an action is bound to CTRL + K and param Key == K then this can return that action. Will return None if no action is bound to that key", "Docs/Classes/URTSGameUserSettings/Functions/GetBoundActionIgnoringModifiers.html", ["get", "bound", "action", "ignoring", "modifiers"], "URTSGameUserSettings");
addToContainers_function("GetBoundAxis", "Returns the axis mapping that is bound to a key, or None id no axis mapping is bound to the key", "Docs/Classes/URTSGameUserSettings/Functions/GetBoundAxis.html", ["get", "bound", "axis"], "URTSGameUserSettings");
addToContainers_function("GetBoundAxis", "", "Docs/Classes/URTSGameUserSettings/Functions/GetBoundAxis_1.html", ["get", "bound", "axis"], "URTSGameUserSettings");
addToContainers_function("ResetCustomVideoSettingsToDefaults", "=========================================================================================", "Docs/Classes/URTSGameUserSettings/Functions/ResetCustomVideoSettingsToDefault.html", ["reset", "custom", "video", "settings", "to", "defaults"], "URTSGameUserSettings");
addToContainers_function("ApplyCustomVideoSettings", "Tbh I think there\'s a virtual ApplyNonResolutionSettings() which could be better than using this", "Docs/Classes/URTSGameUserSettings/Functions/ApplyCustomVideoSettings.html", ["apply", "custom", "video", "settings"], "URTSGameUserSettings");
addToContainers_function("GetOverallScalabilityLevel", "", "Docs/Classes/URTSGameUserSettings/Functions/GetOverallScalabilityLevel.html", ["get", "overall", "scalability", "level"], "URTSGameUserSettings");
addToContainers_function("SetOverallScalabilityLevel", "", "Docs/Classes/URTSGameUserSettings/Functions/SetOverallScalabilityLevel.html", ["set", "overall", "scalability", "level"], "URTSGameUserSettings");
addToContainers_function("GetAntiAliasingMethod", "Get the type of anti-aliasing that is applied e.g. FXAA, TAA, none", "Docs/Classes/URTSGameUserSettings/Functions/GetAntiAliasingMethod.html", ["get", "anti", "aliasing", "method"], "URTSGameUserSettings");
addToContainers_function("SetAntiAliasingMethod", "Set the anti-aliasing method", "Docs/Classes/URTSGameUserSettings/Functions/SetAntiAliasingMethod.html", ["set", "anti", "aliasing", "method"], "URTSGameUserSettings");
addToContainers_variable("MIN_CAMERA_ZOOM_AMOUNT", "The min and max amounts the camera can be zoomed", "Docs/Classes/URTSGameUserSettings/Variables/MIN_CAMERA_ZOOM_AMOUNT.html", ["i", "n_", "c", "a", "m", "e", "r", "a_", "z", "o", "o", "m_", "a", "m", "o", "u", "n", "t"], "URTSGameUserSettings");
addToContainers_variable("MAX_CAMERA_ZOOM_AMOUNT", "", "Docs/Classes/URTSGameUserSettings/Variables/MAX_CAMERA_ZOOM_AMOUNT.html", ["a", "x_", "c", "a", "m", "e", "r", "a_", "z", "o", "o", "m_", "a", "m", "o", "u", "n", "t"], "URTSGameUserSettings");
addToContainers_variable("MIN_CAMERA_PITCH", "Min/max amount of pitch that can be applied to camera rotation", "Docs/Classes/URTSGameUserSettings/Variables/MIN_CAMERA_PITCH.html", ["i", "n_", "c", "a", "m", "e", "r", "a_", "p", "i", "t", "c", "h"], "URTSGameUserSettings");
addToContainers_variable("MAX_CAMERA_PITCH", "", "Docs/Classes/URTSGameUserSettings/Variables/MAX_CAMERA_PITCH.html", ["a", "x_", "c", "a", "m", "e", "r", "a_", "p", "i", "t", "c", "h"], "URTSGameUserSettings");
addToContainers_variable("MOUSE_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER", "This will only come into effect when player wants to move the camera in a diagonal direction because mouse is in a corner of the screen. By default total movement will be same for diagonal (not sqrt(2) or 41% faster) but it just feels a little slow so use this multiplier to speed it up.", "Docs/Classes/URTSGameUserSettings/Variables/MOUSE_DIAGONAL_MOVEMENT_SPEED_MUL.html", ["o", "u", "s", "e_", "d", "i", "a", "g", "o", "n", "a", "l_", "m", "o", "v", "e", "m", "e", "n", "t_", "s", "p", "e", "e", "d_", "m", "u", "l", "t", "i", "p", "l", "i", "e", "r"], "URTSGameUserSettings");
addToContainers_variable("KEYBOARD_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER", "Same as above except for keyboard WASD movement", "Docs/Classes/URTSGameUserSettings/Variables/KEYBOARD_DIAGONAL_MOVEMENT_SPEED_.html", ["e", "y", "b", "o", "a", "r", "d_", "d", "i", "a", "g", "o", "n", "a", "l_", "m", "o", "v", "e", "m", "e", "n", "t_", "s", "p", "e", "e", "d_", "m", "u", "l", "t", "i", "p", "l", "i", "e", "r"], "URTSGameUserSettings");
addToContainers_variable("", "Whether the game has been started before. Can set this no to force default values to be applied next time starting game", "Docs/Classes/URTSGameUserSettings/Variables/.html", [], "URTSGameUserSettings");
addToContainers_variable("", "While testing with editor the C++ defaults are always used. Set this to true to use what is in your .ini file instead. It will stay true until you change it back to false. While true you the game will reload your ini file every PIE session so make sure to set it back to false when you are done testing values.", "Docs/Classes/URTSGameUserSettings/Variables/_1.html", [], "URTSGameUserSettings");
addToContainers_variable("", "True if has opened profile page. If false then it will be shown before they try to create/join a networked game", "Docs/Classes/URTSGameUserSettings/Variables/_2.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Nickname to use in singleplayer matches", "Docs/Classes/URTSGameUserSettings/Variables/_3.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The default faction to be set to when entering a lobby", "Docs/Classes/URTSGameUserSettings/Variables/_4.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Speed camera pans in match from keyboard input", "Docs/Classes/URTSGameUserSettings/Variables/_5.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Speed camera pans when moving mouse to the edge of the screen", "Docs/Classes/URTSGameUserSettings/Variables/_6.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Max speed of camera. How this is different from CameraPanSpeeds... they are more acceleration properties kinda of. They\'re actually both kind of redundant, just use this instead", "Docs/Classes/URTSGameUserSettings/Variables/_7.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much acceleration to apply to movement input for both keyboard and mouse edge. Must be greater than 0 otherwise camera will not move", "Docs/Classes/URTSGameUserSettings/Variables/_8.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Whether to enable camera movement lag or not via setting var on USpringArmComponent", "Docs/Classes/URTSGameUserSettings/Variables/_9.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much camera should lag behind when you\'re moving it. Just setting USpringArmComponent::CameraLagSpeed. 0 = no lag (instant), low values = more lag (slower). Will only be relevant if bEnableCameraMovementLag is true", "Docs/Classes/URTSGameUserSettings/Variables/_10.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Turning boost... just setting variables on the floating pawn movement component. This makes turns happen quicker", "Docs/Classes/URTSGameUserSettings/Variables/_11.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How fast camera stops. Larger = camera stops faster which is what you will want I think", "Docs/Classes/URTSGameUserSettings/Variables/_12.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How close mouse must be to the edge of the screen for camera panning to happen. 0 = no panning, 0.05 = 5% in from screen edge", "Docs/Classes/URTSGameUserSettings/Variables/_13.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much a scroll of the mouse wheel will change the zoom amount. Change CameraZoomSpeed to set how fast the change occurs", "Docs/Classes/URTSGameUserSettings/Variables/_14.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Speed camera changes to target zoom when scrolling middle mouse button. 0 = instant, increasing = faster", "Docs/Classes/URTSGameUserSettings/Variables/_15.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The sensitivity on X axis when looking around while the MMB is held down", "Docs/Classes/URTSGameUserSettings/Variables/_16.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The sensitivity on Y axis when looking around while the MMB is held down", "Docs/Classes/URTSGameUserSettings/Variables/_17.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Whether to invert the MMB yaw look-around.", "Docs/Classes/URTSGameUserSettings/Variables/_18.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Whether to invert the MMB pitch look-around. 1.f = true, 0.f = false", "Docs/Classes/URTSGameUserSettings/Variables/_19.html", [], "URTSGameUserSettings");
addToContainers_variable("", "When looking around with MMB pressed, whether the camera should lag behind input or update instantly. True = lag behind and less responsive, false = updates instantly", "Docs/Classes/URTSGameUserSettings/Variables/_20.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The amount the camera will lag behind when looking around with MMB pressed. Larger implies more responsive", "Docs/Classes/URTSGameUserSettings/Variables/_21.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The camera pitch to start a match with and to return to when using the \'return to default pitch\' button", "Docs/Classes/URTSGameUserSettings/Variables/_22.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The default camera zoom amount that player will start match with and will be returned to when the \'return to default camera zoom\' button is pressed. Note this has nothing to do with how much you are allowed to zoom in/out during a match - this is just for the default amount to start match at", "Docs/Classes/URTSGameUserSettings/Variables/_23.html", [], "URTSGameUserSettings");
addToContainers_variable("", "The speed at which the camera resets to default rotation/zoom when requested. Larger = faster. 0 will not work", "Docs/Classes/URTSGameUserSettings/Variables/_24.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Relevant to key presses. Amount of time allowed for an input to be considered a double click. Time is measured from when key is released to when key is pressed again. 0 can be used to disable double clicks altogether", "Docs/Classes/URTSGameUserSettings/Variables/_25.html", [], "URTSGameUserSettings");
addToContainers_variable("", "A threshold for how far the mouse can move from the click location before it is no longer considered a click", "Docs/Classes/URTSGameUserSettings/Variables/_26.html", [], "URTSGameUserSettings");
addToContainers_variable("", "When a ghost building is spawned and LMB is pressed: the amount of mouse movement required for the ghost to start being considered for rotation. Setting this as 0 means ghost can sometimes undesirably rotate when you click your LMB when you\'re trying to place it.", "Docs/Classes/URTSGameUserSettings/Variables/_27.html", [], "URTSGameUserSettings");
addToContainers_variable("", "How much ghost building rotates when LMB is pressed. Does not apply to the ghost rotation method \"Snap\"", "Docs/Classes/URTSGameUserSettings/Variables/_28.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Not a config property. Maps control settings to their info which includes a ref to the actual variable + many default values + max and min", "Docs/Classes/URTSGameUserSettings/Variables/_29.html", [], "URTSGameUserSettings");
addToContainers_variable("VOLUME_MIN", "Min/max value volume can be set to. These are kind of irrelevant now that the VOLUME_STEPS array is a thing", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_MIN.html", ["o", "l", "u", "m", "e_", "m", "i", "n"], "URTSGameUserSettings");
addToContainers_variable("VOLUME_MAX", "", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_MAX.html", ["o", "l", "u", "m", "e_", "m", "a", "x"], "URTSGameUserSettings");
addToContainers_variable("VOLUME_DEFAULT_STEP", "The index in VOLUME_STEPS that is considered the default volume", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_DEFAULT_STEP.html", ["o", "l", "u", "m", "e_", "d", "e", "f", "a", "u", "l", "t_", "s", "t", "e", "p"], "URTSGameUserSettings");
addToContainers_variable("NUM_VOLUME_STEPS", "", "Docs/Classes/URTSGameUserSettings/Variables/NUM_VOLUME_STEPS.html", ["u", "m_", "v", "o", "l", "u", "m", "e_", "s", "t", "e", "p", "s"], "URTSGameUserSettings");
addToContainers_variable("VOLUME_STEPS[NUM_VOLUME_STEPS]", "Different volume levels. When the UI wants to adjust volume it goes up or down a certain number of steps", "Docs/Classes/URTSGameUserSettings/Variables/VOLUME_STEPS[NUM_VOLUME_STEPS].html", ["o", "l", "u", "m", "e_", "s", "t", "e", "p", "s[", "n", "u", "m_", "v", "o", "l", "u", "m", "e_", "s", "t", "e", "p", "s]"], "URTSGameUserSettings");
addToContainers_variable("", "Maps sound class GetName() to volume step level. This TMap exists so volumes can be stored on persistent storage. Using FString as key because I assume a pointer will mean nothing when stored in .ini files", "Docs/Classes/URTSGameUserSettings/Variables/_30.html", [], "URTSGameUserSettings");
addToContainers_variable("", "Maps key action to the key assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/_31.html", [], "URTSGameUserSettings");
addToContainers_variable("KeyToAction", "Maps a key to the action assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/KeyToAction.html", ["key", "to", "action"], "URTSGameUserSettings");
addToContainers_variable("", "Maps axis action to the key assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/_32.html", [], "URTSGameUserSettings");
addToContainers_variable("KeyToAxis", "Maps key to the axis action assigned to it. Will change as the user changings their key bindings", "Docs/Classes/URTSGameUserSettings/Variables/KeyToAxis.html", ["key", "to", "axis"], "URTSGameUserSettings");
addToContainers_variable("", "Type of anti-aliasing e.g. FXAA, TAA", "Docs/Classes/URTSGameUserSettings/Variables/_33.html", [], "URTSGameUserSettings");
addToContainers_class("URTSDamageType", "Base class for all user created damage types Implementation notes: if new damage types aren\'t being automatically added to GI BP then this class may need to lose the abstract UCLASS specifier", "Docs/Classes/URTSDamageType/URTSDamageType.html", ["r", "t", "s", "damage", "type"], "");
addToContainers_function("URTSDamageType", "", "Docs/Classes/URTSDamageType/Functions/URTSDamageType.html", ["r", "t", "s", "damage", "type"], "URTSDamageType");
addToContainers_class("UDamageType_Default", "-----------------------------------------------------------------------------------------------", "Docs/Classes/UDamageType_Default/UDamageType_Default.html", ["damage", "type_", "default"], "");
addToContainers_class("UDamageType_Bullet", "", "Docs/Classes/UDamageType_Bullet/UDamageType_Bullet.html", ["damage", "type_", "bullet"], "");
addToContainers_class("UDamageType_SniperRound", "", "Docs/Classes/UDamageType_SniperRound/UDamageType_SniperRound.html", ["damage", "type_", "sniper", "round"], "");
addToContainers_class("UDamageType_Explosive", "", "Docs/Classes/UDamageType_Explosive/UDamageType_Explosive.html", ["damage", "type_", "explosive"], "");
addToContainers_class("UDamageType_BiologicalHeal", "", "Docs/Classes/UDamageType_BiologicalHeal/UDamageType_BiologicalHeal.html", ["damage", "type_", "biological", "heal"], "");
addToContainers_class("UDamageType_Shadow", "", "Docs/Classes/UDamageType_Shadow/UDamageType_Shadow.html", ["damage", "type_", "shadow"], "");
addToContainers_class("UDamageType_Lightning", "", "Docs/Classes/UDamageType_Lightning/UDamageType_Lightning.html", ["damage", "type_", "lightning"], "");
addToContainers_class("UDamageType_Frost", "", "Docs/Classes/UDamageType_Frost/UDamageType_Frost.html", ["damage", "type_", "frost"], "");
addToContainers_class("UDamageType_Nuke", "", "Docs/Classes/UDamageType_Nuke/UDamageType_Nuke.html", ["damage", "type_", "nuke"], "");
addToContainers_class("UDamageType_GAU8ArmourPiercing", "The ammo fired from the warthog", "Docs/Classes/UDamageType_GAU8ArmourPiercing/UDamageType_GAU8ArmourPiercing.html", ["damage", "type_", "g", "a", "u8", "armour", "piercing"], "");
addToContainers_class("UDamageType_GAU8HighExplosive", "The ammo fired from the warthog", "Docs/Classes/UDamageType_GAU8HighExplosive/UDamageType_GAU8HighExplosive.html", ["damage", "type_", "g", "a", "u8", "high", "explosive"], "");
addToContainers_class("DevelopmentStatics", "Functions and variables that are to aid in development and have no effect on a final shipping build", "Docs/Classes/DevelopmentStatics/DevelopmentStatics.html", ["development", "statics"], "");
addToContainers_function("BreakpointMessage", "Show a message colored in blue that says \"***BREAKPOINT REACHED*** or something like that\"", "Docs/Classes/DevelopmentStatics/Functions/BreakpointMessage.html", ["breakpoint", "message"], "DevelopmentStatics");
addToContainers_function("Message", "Print a red debug message on screen for 20 seconds @param Message the message to print", "Docs/Classes/DevelopmentStatics/Functions/Message.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print a character", "Docs/Classes/DevelopmentStatics/Functions/Message_1.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus FString @param Message - the first message @param Message2 - the second message", "Docs/Classes/DevelopmentStatics/Functions/Message_2.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus FText @param Message - the first message @param Value - FText to print", "Docs/Classes/DevelopmentStatics/Functions/Message_3.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus integer value @param Message - the message to print @param Value - the value to print after message", "Docs/Classes/DevelopmentStatics/Functions/Message_4.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus integer value @param Message the message to print @param Value the value to print after message", "Docs/Classes/DevelopmentStatics/Functions/Message_5.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus integer value @param Message - the message to print @param Value - the value to print after message", "Docs/Classes/DevelopmentStatics/Functions/Message_6.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus integer value @param Message - the message to print @param Value - the value to print after message", "Docs/Classes/DevelopmentStatics/Functions/Message_7.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus boolean value @param Message - the message to print @param Value - the boolean value to print", "Docs/Classes/DevelopmentStatics/Functions/Message_8.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus FName @param Message - the message to print @param Value - the FName to print", "Docs/Classes/DevelopmentStatics/Functions/Message_9.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus vector values @param Message - the message to print @param Vector - the vector whose values to print", "Docs/Classes/DevelopmentStatics/Functions/Message_10.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus rotator values @param Message - the message to print @param Rotator - the rotator whose values to print", "Docs/Classes/DevelopmentStatics/Functions/Message_11.html", [], "DevelopmentStatics");
addToContainers_function("Message", "", "Docs/Classes/DevelopmentStatics/Functions/Message_12.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus vector values @param Message - the message to print @param Vector2D - the vector whose values to print", "Docs/Classes/DevelopmentStatics/Functions/Message_13.html", [], "DevelopmentStatics");
addToContainers_function("Message", "Print message plus FIntPoint values @param Message - the message to print @param Vector2D - the vector whose values to print", "Docs/Classes/DevelopmentStatics/Functions/Message_14.html", [], "DevelopmentStatics");
addToContainers_function("Message", "", "Docs/Classes/DevelopmentStatics/Functions/Message_15.html", [], "DevelopmentStatics");
addToContainers_function("IsViewportFocused", "Returns true if the WorldContextObject\'s viewport is the one currently focused by the player", "Docs/Classes/DevelopmentStatics/Functions/IsViewportFocused.html", ["is", "viewport", "focused"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "Print a message only if the current focused PIE window executes it. Useful for debugging PIE multiplayer.", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_1.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_2.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_3.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_4.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_5.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_6.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_7.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_8.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_9.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_10.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_11.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_12.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("CurrentPIEInstanceMessage", "", "Docs/Classes/DevelopmentStatics/Functions/CurrentPIEInstanceMessage_13.html", ["current", "p", "i", "e", "instance", "message"], "DevelopmentStatics");
addToContainers_function("IsValid", "Check if actor is valid. Still runs in packaged game @param Actor the actor to check @return the actor is valid", "Docs/Classes/DevelopmentStatics/Functions/IsValid.html", ["is", "valid"], "DevelopmentStatics");
addToContainers_function("PrintToScreenAndLog", "Print on screen message and to log", "Docs/Classes/DevelopmentStatics/Functions/PrintToScreenAndLog.html", ["print", "to", "screen", "and", "log"], "DevelopmentStatics");
addToContainers_function("LogMessage", "Print something to log", "Docs/Classes/DevelopmentStatics/Functions/LogMessage.html", ["log", "message"], "DevelopmentStatics");
addToContainers_function("EnumToString", "Converts a UEnum value to FString", "Docs/Classes/DevelopmentStatics/Functions/EnumToString.html", ["enum", "to", "string"], "DevelopmentStatics");
addToContainers_class("InventoryItemBehavior", "This class is only here as a place to put functions that define the behavior for inventory items.", "Docs/Classes/InventoryItemBehavior/InventoryItemBehavior.html", ["inventory", "item", "behavior"], "");
addToContainers_function("Shoes_OnAquired", "===========================================================================================", "Docs/Classes/InventoryItemBehavior/Functions/Shoes_OnAquired.html", ["shoes_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("Shoes_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/Shoes_OnRemoved.html", ["shoes_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("Bangle_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/Bangle_OnAquired.html", ["bangle_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("Bangle_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/Bangle_OnRemoved.html", ["bangle_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("RedGem_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/RedGem_OnAquired.html", ["red", "gem_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("RedGem_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/RedGem_OnRemoved.html", ["red", "gem_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("GreenGem_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/GreenGem_OnAquired.html", ["green", "gem_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("GreenGem_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/GreenGem_OnRemoved.html", ["green", "gem_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("GoldenDagger_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/GoldenDagger_OnAquired.html", ["golden", "dagger_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("GoldenDagger_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/GoldenDagger_OnRemoved.html", ["golden", "dagger_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("Necklace_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/Necklace_OnAquired.html", ["necklace_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("Necklace_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/Necklace_OnRemoved.html", ["necklace_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("GoldenCrown_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/GoldenCrown_OnAquired.html", ["golden", "crown_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("GoldenCrown_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/GoldenCrown_OnRemoved.html", ["golden", "crown_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("StrongSniperRifle_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/StrongSniperRifle_OnAquired.html", ["strong", "sniper", "rifle_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("StrongSniperRifle_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/StrongSniperRifle_OnRemoved.html", ["strong", "sniper", "rifle_", "on", "removed"], "InventoryItemBehavior");
addToContainers_function("RottenPumpkin_OnAquired", "", "Docs/Classes/InventoryItemBehavior/Functions/RottenPumpkin_OnAquired.html", ["rotten", "pumpkin_", "on", "aquired"], "InventoryItemBehavior");
addToContainers_function("RottenPumpkin_OnRemoved", "", "Docs/Classes/InventoryItemBehavior/Functions/RottenPumpkin_OnRemoved.html", ["rotten", "pumpkin_", "on", "removed"], "InventoryItemBehavior");
addToContainers_class("Statics", "Selectables channel and ground channel combined into one because line traces can only be against one channel. So basically if something blocks either/both selectables or ground then it should block for this channel too", "Docs/Classes/Statics/Statics.html", [], "");
addToContainers_function("IsValid", "Check if actor is valid", "Docs/Classes/Statics/Functions/IsValid.html", ["is", "valid"], "Statics");
addToContainers_function("IsValid", "", "Docs/Classes/Statics/Functions/IsValid_1.html", ["is", "valid"], "Statics");
addToContainers_function("IsValid", "Check if UObject is valid", "Docs/Classes/Statics/Functions/IsValid_2.html", ["is", "valid"], "Statics");
addToContainers_function("IsValid", "Check if selectable is valid", "Docs/Classes/Statics/Functions/IsValid_3.html", ["is", "valid"], "Statics");
addToContainers_function("IsValid", "", "Docs/Classes/Statics/Functions/IsValid_4.html", ["is", "valid"], "Statics");
addToContainers_function("ToSelectablePtr", "Convert a TScriptInterface to an ISelectable ptr. This is mainly here because I have written many functions to take ISelectable* instead of TScriptInterface and don\'t want to overload them to accomidate TScriptInterface. We assume the object of the TScriptInterface is not null. Tbh this func is not as fast as it could be because it checks for null on the UObject but I don\'t know a way around that without changing engine source", "Docs/Classes/Statics/Functions/ToSelectablePtr.html", ["to", "selectable", "ptr"], "Statics");
addToContainers_function("SpawnBuilding", "Spawn building @param BuildingInfo - info for building to spawn @param Loc - location. On the ground is where you want. Building will rise up from correct position @param Rot - rotation @param Owner - player state that built this building @param World - reference to UWorld @param bIsStartingBuilding - skip construction and spawn as already constructed. Do not play any \'has been built\' sounds or effects. Used for placing buildings at the very start of the match @return - a reference to the building as an ABuilding", "Docs/Classes/Statics/Functions/SpawnBuilding.html", ["spawn", "building"], "Statics");
addToContainers_function("SpawnBuildingForFactionInfo", "Spawn building for faction info but do not run its overridden BeginPlay @return - a reference to the building as an actor", "Docs/Classes/Statics/Functions/SpawnBuildingForFactionInfo.html", ["spawn", "building", "for", "faction", "info"], "Statics");
addToContainers_function("SpawnUnitAsSelectable", "Spawn unit @return - a reference to the unit as a selectable", "Docs/Classes/Statics/Functions/SpawnUnitAsSelectable.html", ["spawn", "unit", "as", "selectable"], "Statics");
addToContainers_function("SpawnUnit", "Spawn unit @param Unit_BP - class to spawn @param - Loc - spawn location @param Rot - spawn rotation @param Owner - player state of player that owns this unit @param World - reference to world @param bIsStartingUnit - true if being spawned as a unit player starts match with @param Builder - the building that built this unit, or null if none @return - a reference to the unit as an actor", "Docs/Classes/Statics/Functions/SpawnUnit.html", ["spawn", "unit"], "Statics");
addToContainers_function("SpawnUnitForFactionInfo", "Spawn unit for the purposes of creating faction info @return - a reference to the unit", "Docs/Classes/Statics/Functions/SpawnUnitForFactionInfo.html", ["spawn", "unit", "for", "faction", "info"], "Statics");
addToContainers_function("SpawnStartingSelectables", "Spawn the starting selectables for a player at start of match @param Owner - player state that will own the spawned selectables @param GridTransform - the location to center the starting grid at @param GameInstance - reference to game instance @param OutSpawnedBuildingTypes - the building types of all the buildings that were spawned by the starting grid @param OutSpawnedUnitTypes - just like OutSpawnedBuildingTypes but for units", "Docs/Classes/Statics/Functions/SpawnStartingSelectables.html", ["spawn", "starting", "selectables"], "Statics");
addToContainers_function("SpawnFogParticles", "Spawn a particle system that obeys fog. Local only, not replicated @param Template - template for particles @param GameState - reference to game state @return - reference to spawned particles", "Docs/Classes/Statics/Functions/SpawnFogParticles.html", ["spawn", "fog", "particles"], "Statics");
addToContainers_function("SpawnFogParticlesAttached", "Spawn partcile system attached to a component. Particles obey fog. Not replicated @param GameState - reference to game state @param EmitterTemplate - template for particles @param WarmUpTime - warm up time to set on particles == how far through simulation they should start at. @return - reference to spawned particles", "Docs/Classes/Statics/Functions/SpawnFogParticlesAttached.html", ["spawn", "fog", "particles", "attached"], "Statics");
addToContainers_function("SpawnParticles", "Spawn particles that do not obey fog of war", "Docs/Classes/Statics/Functions/SpawnParticles.html", ["spawn", "particles"], "Statics");
addToContainers_function("GetMapName", "Given a world get its map name. When in PIE parts will be removed. This may return the blank persistent map instead of the streamable sublevel", "Docs/Classes/Statics/Functions/GetMapName.html", ["get", "map", "name"], "Statics");
addToContainers_function("IsBuildableLocation", "Return whether a location is an acceptable location to build a building at @param World - reference to world @param GameState - reference to game state @param PlayerState - player state of player requesting this @param FactionInfo - faction info for the faction player is playing as @param BuildingType - type of building we\'re trying to place @param Location - world location where we want to place building @param Rotation - rotation of building @param bShowHUDMessage - if location is NOT suitable whether to try and show a message on the requesting player\'s HUD. CPU players should not set this true @return - true if building can be placed at location", "Docs/Classes/Statics/Functions/IsBuildableLocation.html", ["is", "buildable", "location"], "Statics");
addToContainers_function("IsBuildableLocationReturn", "Inner function for IsBuildableLocation. Handles showing message on HUD if desired", "Docs/Classes/Statics/Functions/IsBuildableLocationReturn.html", ["is", "buildable", "location", "return"], "Statics");
addToContainers_function("Server_TryApplyBuffOrDebuff", "[Server] Try and apply a buff or debuff to a target. Assumes validity of target. Instigator probably does not have to be valid This is not replicated @param Type - type of buff/debuff to try and apply @return - the result of the application", "Docs/Classes/Statics/Functions/Server_TryApplyBuffOrDebuff.html", ["server_", "try", "apply", "buff", "or", "debuff"], "Statics");
addToContainers_function("Server_TryApplyBuffOrDebuff", "", "Docs/Classes/Statics/Functions/Server_TryApplyBuffOrDebuff_1.html", ["server_", "try", "apply", "buff", "or", "debuff"], "Statics");
addToContainers_function("Client_ApplyBuffOrDebuffGivenOutcome", "Given an outcome from the server, apply a buff/debuff to a target using that outcome", "Docs/Classes/Statics/Functions/Client_ApplyBuffOrDebuffGivenOutc.html", ["client_", "apply", "buff", "or", "debuff", "given", "outcome"], "Statics");
addToContainers_function("Client_ApplyBuffOrDebuffGivenOutcome", "", "Docs/Classes/Statics/Functions/Client_ApplyBuffOrDebuffGivenOutc_1.html", ["client_", "apply", "buff", "or", "debuff", "given", "outcome"], "Statics");
addToContainers_function("GetPlayerColor", "Given a player get the color their selectables should be colored assuming we are coloring selectables based on their owning player", "Docs/Classes/Statics/Functions/GetPlayerColor.html", ["get", "player", "color"], "Statics");
addToContainers_function("GetTeamColor", "Get the team color for a team. Btw the teams I am assigning for PIE sessions seem to be 1 higher than I expect which is the reason why the colors are not what I expect", "Docs/Classes/Statics/Functions/GetTeamColor.html", ["get", "team", "color"], "Statics");
addToContainers_function("GetActorFromOverlap", "Given an FOverlapInfo get the actor that overlap is for", "Docs/Classes/Statics/Functions/GetActorFromOverlap.html", ["get", "actor", "from", "overlap"], "Statics");
addToContainers_function("PlaySound2D", "Play a sound not anywhere in the world. Not replicated", "Docs/Classes/Statics/Functions/PlaySound2D.html", ["play", "sound2", "d"], "Statics");
addToContainers_function("SpawnSoundAtLocation", "Spawn fog obeying audio comp and play sound at world location. Not replicated. @param SoundOwnersTeam - the team that the sound is coming from @param FogRules - how the sound obeys fog of war @return - An audio component to manipulate the spawned sound", "Docs/Classes/Statics/Functions/SpawnSoundAtLocation.html", ["spawn", "sound", "at", "location"], "Statics");
addToContainers_function("SpawnSoundAttached", "Play a sound attached to a component. Not replicated @param FogRules - how the sound obeys fog of war @return - An audio component to manipulate the spawned sound", "Docs/Classes/Statics/Functions/SpawnSoundAttached.html", ["spawn", "sound", "attached"], "Statics");
addToContainers_function("", "Clone of FAudioDevice::FCreateComponentParams because private access", "Docs/Classes/Statics/Functions/.html", [], "Statics");
addToContainers_function("SpawnDecalAtLocation", "Spawn a decal at a location. Does not obey fog of war", "Docs/Classes/Statics/Functions/SpawnDecalAtLocation.html", ["spawn", "decal", "at", "location"], "Statics");
addToContainers_function("SpawnDecalAtLocation", "Version that takes a FSpawnDecalInfo", "Docs/Classes/Statics/Functions/SpawnDecalAtLocation_1.html", ["spawn", "decal", "at", "location"], "Statics");
addToContainers_function("LineTraceSingleByChannel", "Wrapper for line trace, but I\'m getting problems with regular line trace. It misses the landscape so this function will likely do a very small sphere sweep instead.", "Docs/Classes/Statics/Functions/LineTraceSingleByChannel.html", ["line", "trace", "single", "by", "channel"], "Statics");
addToContainers_function("LineTraceMultiByChannel", "", "Docs/Classes/Statics/Functions/LineTraceMultiByChannel.html", ["line", "trace", "multi", "by", "channel"], "Statics");
addToContainers_function("LineTraceSingleByObjectType", "", "Docs/Classes/Statics/Functions/LineTraceSingleByObjectType.html", ["line", "trace", "single", "by", "object", "type"], "Statics");
addToContainers_function("CapsuleSweep", "Do a SweepMultiByObjectType on one location using a capsule, effectively getting all requested object types within a certain radius. @param World - reference to world @param OutNearbyHits - array of all hit results @param Location - location to center sweep on @param QueryParams - holds the object types to query against @param Radius - radius of the capsule @return - true if any hit is found", "Docs/Classes/Statics/Functions/CapsuleSweep.html", ["capsule", "sweep"], "Statics");
addToContainers_function("GetDistance2D", "Simple function to get distance between 2 points excluding Z axis", "Docs/Classes/Statics/Functions/GetDistance2D.html", ["get", "distance2", "d"], "Statics");
addToContainers_function("GetDistance2DSquared", "Simple function to get the distance squared between two locations excluding the Z axis", "Docs/Classes/Statics/Functions/GetDistance2DSquared.html", ["get", "distance2", "d", "squared"], "Statics");
addToContainers_function("GetPathDistanceSqr", "Calculate distance squared bewteen two actors. Just uses straight line but in future should use path distance i.e. taking into account obstacles", "Docs/Classes/Statics/Functions/GetPathDistanceSqr.html", ["get", "path", "distance", "sqr"], "Statics");
addToContainers_function("IsSelectableInRangeForAbility", "Return whether a selectable is in range of another selectable to use an ability. Assumes validity @param AbilityInfo - info for the ability AbilityUser wants to use @param AbilityUser - the selectable that wants to use the ability @return - true if in range", "Docs/Classes/Statics/Functions/IsSelectableInRangeForAbility.html", ["is", "selectable", "in", "range", "for", "ability"], "Statics");
addToContainers_function("IsSelectableInRangeForAbility", "Version for abilities that require targeting a location in the world @param AbilityInfo - info for the ability AbilityUser wants to use @param AbilityUser - the selectable that wants to use the ability @param Location - the world location where the selectable wants to use the ability @return - true if in range", "Docs/Classes/Statics/Functions/IsSelectableInRangeForAbility_1.html", ["is", "selectable", "in", "range", "for", "ability"], "Statics");
addToContainers_function("GetAbilityRangeSquared", "Return the range of an ability squared. @return - distance squared", "Docs/Classes/Statics/Functions/GetAbilityRangeSquared.html", ["get", "ability", "range", "squared"], "Statics");
addToContainers_function("GetSelectablesDistanceForAbilitySquared", "Functions for returning the distance of a selectable from another selectable or location. @return - distance squared from AbilityUser\'s GetActorLocation() to the Target\'s GetActorLocation() or just the location if it is a location targeting ability", "Docs/Classes/Statics/Functions/GetSelectablesDistanceForAbilityS.html", ["get", "selectables", "distance", "for", "ability", "squared"], "Statics");
addToContainers_function("GetSelectablesDistanceForAbilitySquared", "", "Docs/Classes/Statics/Functions/GetSelectablesDistanceForAbilityS_1.html", ["get", "selectables", "distance", "for", "ability", "squared"], "Statics");
addToContainers_function("GetSelectablesDistanceSquaredFromInventoryItemActor", "Get the distance squared a selectable is from an inventory item actor. Change the AActor param to an AInventoryItem if required", "Docs/Classes/Statics/Functions/GetSelectablesDistanceSquaredFrom.html", ["get", "selectables", "distance", "squared", "from", "inventory", "item", "actor"], "Statics");
addToContainers_function("CanBeSelected", "Returns true if a selectable can be selected by local player", "Docs/Classes/Statics/Functions/CanBeSelected.html", ["can", "be", "selected"], "Statics");
addToContainers_function("IsSelectableVisibleLocally", "Return whether a selectable is visible to the local player i.e. this usually means it\'s outside fog of war and either unstealthed or stealthed but being stealth detected", "Docs/Classes/Statics/Functions/IsSelectableVisibleLocally.html", ["is", "selectable", "visible", "locally"], "Statics");
addToContainers_function("IsSelectableVisible", "Return whether a selectable is visible. Usually means it\'s outside fog of war and either unstealthed or stealthed but being stealth detected", "Docs/Classes/Statics/Functions/IsSelectableVisible.html", ["is", "selectable", "visible"], "Statics");
addToContainers_function("IsOutsideFog", "Return whether a selectable is outside fog for a certain player. I don\'t know if this should ever be used @param Selectable - selectable to check if outside fog @param AsSelectable - Selectable casted to a ISelectable", "Docs/Classes/Statics/Functions/IsOutsideFog.html", ["is", "outside", "fog"], "Statics");
addToContainers_function("IsLocationOutsideFog", "Return whether a world location is outside fog of war for a particular team @param FogManager - game thread fog manager. If using multithreaded fog of war then this can be null", "Docs/Classes/Statics/Functions/IsLocationOutsideFog.html", ["is", "location", "outside", "fog"], "Statics");
addToContainers_function("IsLocationOutsideFogLocally", "Return true if a world location is outside fog of war to the local player @param FogManager - game thread fog manager. If using multithreaded fog of war then this can be null", "Docs/Classes/Statics/Functions/IsLocationOutsideFogLocally.html", ["is", "location", "outside", "fog", "locally"], "Statics");
addToContainers_function("IsLocationOutsideFogLocallyNotChecked", "With this version it\'s OK to pass in Location that is off the fog grid", "Docs/Classes/Statics/Functions/IsLocationOutsideFogLocallyNotChe.html", ["is", "location", "outside", "fog", "locally", "not", "checked"], "Statics");
addToContainers_function("GetLocationVisionStatusLocally", "Returns the vision status of a tile for the local player @param FogManager - game thread fog manager. If using multithreaded fog of war then this can be null", "Docs/Classes/Statics/Functions/GetLocationVisionStatusLocally.html", ["get", "location", "vision", "status", "locally"], "Statics");
addToContainers_function("GetLocationVisionStatusLocallyNotChecked", "Returns the vision status of a tile for the local player or Hidden if Location is outside the grid. @param FogManager - game thread fog manager. If using multithreaded fog of war then this can be null", "Docs/Classes/Statics/Functions/GetLocationVisionStatusLocallyNot.html", ["get", "location", "vision", "status", "locally", "not", "checked"], "Statics");
addToContainers_function("IsShouldBeSetAnim", "Given an animation type return whether it is considered not good if game code says we should play it but it is null. Usually these are animations with anim notifies in them", "Docs/Classes/Statics/Functions/IsShouldBeSetAnim.html", ["is", "should", "be", "set", "anim"], "Statics");
addToContainers_function("GetPlayerIDTagIndex", "Get index in actor\'s Tags array where the owning players ID should be stored", "Docs/Classes/Statics/Functions/GetPlayerIDTagIndex.html", ["get", "player", "i", "d", "tag", "index"], "Statics");
addToContainers_function("GetTeamTagIndex", "Get the index in Tags where the the team tag should be stored", "Docs/Classes/Statics/Functions/GetTeamTagIndex.html", ["get", "team", "tag", "index"], "Statics");
addToContainers_function("GetTargetingTypeTagIndex", "Get the index in the Tags array where the targeting type tag should be", "Docs/Classes/Statics/Functions/GetTargetingTypeTagIndex.html", ["get", "targeting", "type", "tag", "index"], "Statics");
addToContainers_function("GetAirTagIndex", "Get index for whether selectable is an air unit or not", "Docs/Classes/Statics/Functions/GetAirTagIndex.html", ["get", "air", "tag", "index"], "Statics");
addToContainers_function("GetSelectableTypeTagIndex", "Get index for whether selectable is a building or unit", "Docs/Classes/Statics/Functions/GetSelectableTypeTagIndex.html", ["get", "selectable", "type", "tag", "index"], "Statics");
addToContainers_function("GetHasAttackTagIndex", "Get index for whether selectable is capable of attacking or not. This made public to allow selectable to toggle this when it gets upgraded", "Docs/Classes/Statics/Functions/GetHasAttackTagIndex.html", ["get", "has", "attack", "tag", "index"], "Statics");
addToContainers_function("GetZeroHealthTagIndex", "Get index for whether the selectable has more than zero health or not", "Docs/Classes/Statics/Functions/GetZeroHealthTagIndex.html", ["get", "zero", "health", "tag", "index"], "Statics");
addToContainers_function("GetInventoryTagIndex", "Get index for whether selectable has an inventory", "Docs/Classes/Statics/Functions/GetInventoryTagIndex.html", ["get", "inventory", "tag", "index"], "Statics");
addToContainers_function("GenerateTeamTag", "Generates an FName to be used in actor tags that identifies what team they are on. Good to make FNames that will avoid collisions when being hashed @param SomeNum - a number that is different for each call", "Docs/Classes/Statics/Functions/GenerateTeamTag.html", ["generate", "team", "tag"], "Statics");
addToContainers_function("HasZeroHealth", "Return whether a selectable has zero (or less) health @return - true if selectable has zero health", "Docs/Classes/Statics/Functions/HasZeroHealth.html", ["has", "zero", "health"], "Statics");
addToContainers_function("IsABuilding", "Return whether a selectable is a building. If not then it is probably a unit", "Docs/Classes/Statics/Functions/IsABuilding.html", ["is", "a", "building"], "Statics");
addToContainers_function("IsAUnit", "Return whether a selectable is a unit. If not then it probably is a building", "Docs/Classes/Statics/Functions/IsAUnit.html", ["is", "a", "unit"], "Statics");
addToContainers_function("IsOwned", "Return whether a selectable is owned by a player", "Docs/Classes/Statics/Functions/IsOwned.html", ["is", "owned"], "Statics");
addToContainers_function("IsOwned", "", "Docs/Classes/Statics/Functions/IsOwned_1.html", ["is", "owned"], "Statics");
addToContainers_function("IsFriendly", "Return whether a selectable is friendly i.e. either owned by us and/or on our team", "Docs/Classes/Statics/Functions/IsFriendly.html", ["is", "friendly"], "Statics");
addToContainers_function("IsHostile", "Return whether a selectable is hostile towards a team", "Docs/Classes/Statics/Functions/IsHostile.html", ["is", "hostile"], "Statics");
addToContainers_function("CanTypeBeTargeted", "Return whether a type can be targeted", "Docs/Classes/Statics/Functions/CanTypeBeTargeted.html", ["can", "type", "be", "targeted"], "Statics");
addToContainers_function("CanTypeBeTargeted", "", "Docs/Classes/Statics/Functions/CanTypeBeTargeted_1.html", ["can", "type", "be", "targeted"], "Statics");
addToContainers_function("HasAttack", "Return whether a selectable is capable of attacking or not", "Docs/Classes/Statics/Functions/HasAttack.html", ["has", "attack"], "Statics");
addToContainers_function("GetTargetingType", "For a given selectable get its targeting type", "Docs/Classes/Statics/Functions/GetTargetingType.html", ["get", "targeting", "type"], "Statics");
addToContainers_function("GetTargetingType", "Given a targeting type, get the FName corrisponding to it", "Docs/Classes/Statics/Functions/GetTargetingType_1.html", ["get", "targeting", "type"], "Statics");
addToContainers_function("IsAirUnit", "Return whether selectable is a flying selectable or not", "Docs/Classes/Statics/Functions/IsAirUnit.html", ["is", "air", "unit"], "Statics");
addToContainers_function("HasInventory", "Return whether the selectable has an inventory. By has an inventory we mean they have an FInventory struct and that its capacity is at least 1", "Docs/Classes/Statics/Functions/HasInventory.html", ["has", "inventory"], "Statics");
addToContainers_function("IsAShopThatAcceptsRefunds", "Return whether the selectable is a shop that can also have items sold to it", "Docs/Classes/Statics/Functions/IsAShopThatAcceptsRefunds.html", ["is", "a", "shop", "that", "accepts", "refunds"], "Statics");
addToContainers_function("GetSocketName", "Given a body location get the FName of a socket that represents that location", "Docs/Classes/Statics/Functions/GetSocketName.html", ["get", "socket", "name"], "Statics");
addToContainers_function("SocketLocationToArrayIndex", "Convert a ESelectableBodySocket to the index it corrisponds to in SocketNames", "Docs/Classes/Statics/Functions/SocketLocationToArrayIndex.html", ["socket", "location", "to", "array", "index"], "Statics");
addToContainers_function("InitSocketNames", "Setup functions", "Docs/Classes/Statics/Functions/InitSocketNames.html", ["init", "socket", "names"], "Statics");
addToContainers_function("InitTargetTypeFNames", "", "Docs/Classes/Statics/Functions/InitTargetTypeFNames.html", ["init", "target", "type", "f", "names"], "Statics");
addToContainers_function("InitImportantAnims", "", "Docs/Classes/Statics/Functions/InitImportantAnims.html", ["init", "important", "anims"], "Statics");
addToContainers_function("CreateProjectAPIMacroText", "", "Docs/Classes/Statics/Functions/CreateProjectAPIMacroText.html", ["create", "project", "a", "p", "i", "macro", "text"], "Statics");
addToContainers_function("ConcateText", "Return a FText of input text that is the first Length letters of text", "Docs/Classes/Statics/Functions/ConcateText.html", ["concate", "text"], "Statics");
addToContainers_function("TextToInt", "Convert FText to int32", "Docs/Classes/Statics/Functions/TextToInt.html", ["text", "to", "int"], "Statics");
addToContainers_function("IntToText", "Convert int32 to FText", "Docs/Classes/Statics/Functions/IntToText.html", ["int", "to", "text"], "Statics");
addToContainers_function("TeamToStringSlow", "Convert ETeam to FString", "Docs/Classes/Statics/Functions/TeamToStringSlow.html", ["team", "to", "string", "slow"], "Statics");
addToContainers_function("StringToTeamSlow", "Convert FString to ETeam", "Docs/Classes/Statics/Functions/StringToTeamSlow.html", ["string", "to", "team", "slow"], "Statics");
addToContainers_function("StringToCPUDifficultySlow", "Convert string to ECPUDifficulty. Slow", "Docs/Classes/Statics/Functions/StringToCPUDifficultySlow.html", ["string", "to", "c", "p", "u", "difficulty", "slow"], "Statics");
addToContainers_function("FactionToString", "Convert EFaction to FString. Nothing to do with the actual display name of the faction", "Docs/Classes/Statics/Functions/FactionToString.html", ["faction", "to", "string"], "Statics");
addToContainers_function("StringToFaction", "Convert a FString to EFaction", "Docs/Classes/Statics/Functions/StringToFaction.html", ["string", "to", "faction"], "Statics");
addToContainers_function("IsPowerOfTwo", "Returns true if the param is a power of 2, but assumes it is not 0. The FMath version is not constexpr hence why this function exists", "Docs/Classes/Statics/Functions/IsPowerOfTwo.html", ["is", "power", "of", "two"], "Statics");
addToContainers_function("IntToCollisionChannel", "Conversion functions", "Docs/Classes/Statics/Functions/IntToCollisionChannel.html", ["int", "to", "collision", "channel"], "Statics");
addToContainers_function("TeamToArrayIndex", "TODO remove all static_cast from files, and use only conversion functions found here in UStatics instead", "Docs/Classes/Statics/Functions/TeamToArrayIndex.html", ["team", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToTeam", "", "Docs/Classes/Statics/Functions/ArrayIndexToTeam.html", ["array", "index", "to", "team"], "Statics");
addToContainers_function("AnimationToArrayIndex", "", "Docs/Classes/Statics/Functions/AnimationToArrayIndex.html", ["animation", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToAnimation", "", "Docs/Classes/Statics/Functions/ArrayIndexToAnimation.html", ["array", "index", "to", "animation"], "Statics");
addToContainers_function("ContextButtonToArrayIndex", "", "Docs/Classes/Statics/Functions/ContextButtonToArrayIndex.html", ["context", "button", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToContextButton", "", "Docs/Classes/Statics/Functions/ArrayIndexToContextButton.html", ["array", "index", "to", "context", "button"], "Statics");
addToContainers_function("ArmourTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/ArmourTypeToArrayIndex.html", ["armour", "type", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToArmourType", "", "Docs/Classes/Statics/Functions/ArrayIndexToArmourType.html", ["array", "index", "to", "armour", "type"], "Statics");
addToContainers_function("TargetingTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/TargetingTypeToArrayIndex.html", ["targeting", "type", "to", "array", "index"], "Statics");
addToContainers_function("ResourceTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/ResourceTypeToArrayIndex.html", ["resource", "type", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToResourceType", "", "Docs/Classes/Statics/Functions/ArrayIndexToResourceType.html", ["array", "index", "to", "resource", "type"], "Statics");
addToContainers_function("HousingResourceTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/HousingResourceTypeToArrayIndex.html", ["housing", "resource", "type", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToHousingResourceType", "", "Docs/Classes/Statics/Functions/ArrayIndexToHousingResourceType.html", ["array", "index", "to", "housing", "resource", "type"], "Statics");
addToContainers_function("StartingResourceAmountToArrayIndex", "", "Docs/Classes/Statics/Functions/StartingResourceAmountToArrayInde.html", ["starting", "resource", "amount", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToStartingResourceAmount", "", "Docs/Classes/Statics/Functions/ArrayIndexToStartingResourceAmoun.html", ["array", "index", "to", "starting", "resource", "amount"], "Statics");
addToContainers_function("ArrayIndexToGameNotification", "", "Docs/Classes/Statics/Functions/ArrayIndexToGameNotification.html", ["array", "index", "to", "game", "notification"], "Statics");
addToContainers_function("FactionToArrayIndex", "", "Docs/Classes/Statics/Functions/FactionToArrayIndex.html", ["faction", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToFaction", "", "Docs/Classes/Statics/Functions/ArrayIndexToFaction.html", ["array", "index", "to", "faction"], "Statics");
addToContainers_function("ArrayIndexToPersistentTabType", "", "Docs/Classes/Statics/Functions/ArrayIndexToPersistentTabType.html", ["array", "index", "to", "persistent", "tab", "type"], "Statics");
addToContainers_function("ArrayIndexToAffiliation", "", "Docs/Classes/Statics/Functions/ArrayIndexToAffiliation.html", ["array", "index", "to", "affiliation"], "Statics");
addToContainers_function("ArrayIndexToCommandTargetType", "", "Docs/Classes/Statics/Functions/ArrayIndexToCommandTargetType.html", ["array", "index", "to", "command", "target", "type"], "Statics");
addToContainers_function("AffiliationToCommandTargetType", "", "Docs/Classes/Statics/Functions/AffiliationToCommandTargetType.html", ["affiliation", "to", "command", "target", "type"], "Statics");
addToContainers_function("DefeatConditionToArrayIndex", "", "Docs/Classes/Statics/Functions/DefeatConditionToArrayIndex.html", ["defeat", "condition", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToDefeatCondition", "", "Docs/Classes/Statics/Functions/ArrayIndexToDefeatCondition.html", ["array", "index", "to", "defeat", "condition"], "Statics");
addToContainers_function("ArrayIndexToGameWarning", "", "Docs/Classes/Statics/Functions/ArrayIndexToGameWarning.html", ["array", "index", "to", "game", "warning"], "Statics");
addToContainers_function("ArrayIndexToMessageRecipientType", "", "Docs/Classes/Statics/Functions/ArrayIndexToMessageRecipientType.html", ["array", "index", "to", "message", "recipient", "type"], "Statics");
addToContainers_function("ArrayIndexToCPUDifficulty", "", "Docs/Classes/Statics/Functions/ArrayIndexToCPUDifficulty.html", ["array", "index", "to", "c", "p", "u", "difficulty"], "Statics");
addToContainers_function("ArrayIndexToMatchWidgetType", "", "Docs/Classes/Statics/Functions/ArrayIndexToMatchWidgetType.html", ["array", "index", "to", "match", "widget", "type"], "Statics");
addToContainers_function("ArrayIndexToUnitType", "", "Docs/Classes/Statics/Functions/ArrayIndexToUnitType.html", ["array", "index", "to", "unit", "type"], "Statics");
addToContainers_function("UnitTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/UnitTypeToArrayIndex.html", ["unit", "type", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToUpgradeType", "", "Docs/Classes/Statics/Functions/ArrayIndexToUpgradeType.html", ["array", "index", "to", "upgrade", "type"], "Statics");
addToContainers_function("ArrayIndexToStaticBuffOrDebuffType", "", "Docs/Classes/Statics/Functions/ArrayIndexToStaticBuffOrDebuffTyp.html", ["array", "index", "to", "static", "buff", "or", "debuff", "type"], "Statics");
addToContainers_function("ArrayIndexToTickableBuffOrDebuffType", "", "Docs/Classes/Statics/Functions/ArrayIndexToTickableBuffOrDebuffT.html", ["array", "index", "to", "tickable", "buff", "or", "debuff", "type"], "Statics");
addToContainers_function("ArrayIndexToBuffOrDebuffSubType", "", "Docs/Classes/Statics/Functions/ArrayIndexToBuffOrDebuffSubType.html", ["array", "index", "to", "buff", "or", "debuff", "sub", "type"], "Statics");
addToContainers_function("ArrayIndexToAbilityRequirement", "", "Docs/Classes/Statics/Functions/ArrayIndexToAbilityRequirement.html", ["array", "index", "to", "ability", "requirement"], "Statics");
addToContainers_function("ArrayIndexToSelectableResourceType", "", "Docs/Classes/Statics/Functions/ArrayIndexToSelectableResourceTyp.html", ["array", "index", "to", "selectable", "resource", "type"], "Statics");
addToContainers_function("ArrayIndexToInventoryItem", "", "Docs/Classes/Statics/Functions/ArrayIndexToInventoryItem.html", ["array", "index", "to", "inventory", "item"], "Statics");
addToContainers_function("InventoryItemToArrayIndex", "", "Docs/Classes/Statics/Functions/InventoryItemToArrayIndex.html", ["inventory", "item", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToCommanderAbilityType", "", "Docs/Classes/Statics/Functions/ArrayIndexToCommanderAbilityType.html", ["array", "index", "to", "commander", "ability", "type"], "Statics");
addToContainers_function("CommanderAbilityTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/CommanderAbilityTypeToArrayIndex.html", ["commander", "ability", "type", "to", "array", "index"], "Statics");
addToContainers_function("CommanderSkillTreeNodeToArrayIndex", "", "Docs/Classes/Statics/Functions/CommanderSkillTreeNodeToArrayInde.html", ["commander", "skill", "tree", "node", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToControlSettingType", "", "Docs/Classes/Statics/Functions/ArrayIndexToControlSettingType.html", ["array", "index", "to", "control", "setting", "type"], "Statics");
addToContainers_function("PhysicalSurfaceTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/PhysicalSurfaceTypeToArrayIndex.html", ["physical", "surface", "type", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToBuildingNetworkType", "", "Docs/Classes/Statics/Functions/ArrayIndexToBuildingNetworkType.html", ["array", "index", "to", "building", "network", "type"], "Statics");
addToContainers_function("BuildingNetworkTypeToArrayIndex", "", "Docs/Classes/Statics/Functions/BuildingNetworkTypeToArrayIndex.html", ["building", "network", "type", "to", "array", "index"], "Statics");
addToContainers_function("ArrayIndexToEditorPlaySkippingOption", "", "Docs/Classes/Statics/Functions/ArrayIndexToEditorPlaySkippingOpt.html", ["array", "index", "to", "editor", "play", "skipping", "option"], "Statics");
addToContainers_function("ArrayIndexToPIESeshInvalidOwnerRule", "", "Docs/Classes/Statics/Functions/ArrayIndexToPIESeshInvalidOwnerRu.html", ["array", "index", "to", "p", "i", "e", "sesh", "invalid", "owner", "rule"], "Statics");
addToContainers_variable("PROJECT_API_MACRO_TEXT", "The text that the project\'s API macro that appears often in between classes and their names e.g. something like \"RTS_API\"", "Docs/Classes/Statics/Variables/PROJECT_API_MACRO_TEXT.html", ["r", "o", "j", "e", "c", "t_", "a", "p", "i_", "m", "a", "c", "r", "o_", "t", "e", "x", "t"], "Statics");
addToContainers_variable("HARDWARE_CURSOR_PATH", "Path where hardware cursors are located", "Docs/Classes/Statics/Variables/HARDWARE_CURSOR_PATH.html", ["a", "r", "d", "w", "a", "r", "e_", "c", "u", "r", "s", "o", "r_", "p", "a", "t", "h"], "Statics");
addToContainers_variable("POOLED_ACTOR_SPAWN_LOCATION", "A location to spawn lots of things that are pooled. It shouldn\'t have an effect on the game/performance even if it is in the middle of the map but to be safe it should be somewhere away from the play area", "Docs/Classes/Statics/Variables/POOLED_ACTOR_SPAWN_LOCATION.html", ["o", "o", "l", "e", "d_", "a", "c", "t", "o", "r_", "s", "p", "a", "w", "n_", "l", "o", "c", "a", "t", "i", "o", "n"], "Statics");
addToContainers_variable("INFO_ACTOR_SPAWN_LOCATION", "The location in the world where AInfo actors are spawned TODO should be specific to map", "Docs/Classes/Statics/Variables/INFO_ACTOR_SPAWN_LOCATION.html", ["n", "f", "o_", "a", "c", "t", "o", "r_", "s", "p", "a", "w", "n_", "l", "o", "c", "a", "t", "i", "o", "n"], "Statics");
addToContainers_variable("NUM_CUSTOM_MESH_SOCKETS", "Names of sockets that can be added to meshes that represent locations for abilities to attach to or spawn stuff at", "Docs/Classes/Statics/Variables/NUM_CUSTOM_MESH_SOCKETS.html", ["u", "m_", "c", "u", "s", "t", "o", "m_", "m", "e", "s", "h_", "s", "o", "c", "k", "e", "t", "s"], "Statics");
addToContainers_variable("MeshFloorSocket", "", "Docs/Classes/Statics/Variables/MeshFloorSocket.html", ["mesh", "floor", "socket"], "Statics");
addToContainers_variable("MeshMiddleSocket", "", "Docs/Classes/Statics/Variables/MeshMiddleSocket.html", ["mesh", "middle", "socket"], "Statics");
addToContainers_variable("MeshHeadSocket", "", "Docs/Classes/Statics/Variables/MeshHeadSocket.html", ["mesh", "head", "socket"], "Statics");
addToContainers_variable("LOBBY_OBSERVER_COMBO_BOX_OPTION", "Text to appear in lobby team combo box for being an observer", "Docs/Classes/Statics/Variables/LOBBY_OBSERVER_COMBO_BOX_OPTION.html", ["o", "b", "b", "y_", "o", "b", "s", "e", "r", "v", "e", "r_", "c", "o", "m", "b", "o_", "b", "o", "x_", "o", "p", "t", "i", "o", "n"], "Statics");
addToContainers_variable("NUM_FACTIONS", "For knowing how many elements in enums", "Docs/Classes/Statics/Variables/NUM_FACTIONS.html", ["u", "m_", "f", "a", "c", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_MENU_WIDGET_TYPES", "", "Docs/Classes/Statics/Variables/NUM_MENU_WIDGET_TYPES.html", ["u", "m_", "m", "e", "n", "u_", "w", "i", "d", "g", "e", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUILDING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_BUILDING_TYPES.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_UNIT_TYPES", "", "Docs/Classes/Statics/Variables/NUM_UNIT_TYPES.html", ["u", "m_", "u", "n", "i", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CONTEXT_ACTIONS", "", "Docs/Classes/Statics/Variables/NUM_CONTEXT_ACTIONS.html", ["u", "m_", "c", "o", "n", "t", "e", "x", "t_", "a", "c", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_CUSTOM_CONTEXT_ACTIONS", "", "Docs/Classes/Statics/Variables/NUM_CUSTOM_CONTEXT_ACTIONS.html", ["u", "m_", "c", "u", "s", "t", "o", "m_", "c", "o", "n", "t", "e", "x", "t_", "a", "c", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_ANIMATIONS", "", "Docs/Classes/Statics/Variables/NUM_ANIMATIONS.html", ["u", "m_", "a", "n", "i", "m", "a", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_GAME_NOTIFICATION_TYPES", "", "Docs/Classes/Statics/Variables/NUM_GAME_NOTIFICATION_TYPES.html", ["u", "m_", "g", "a", "m", "e_", "n", "o", "t", "i", "f", "i", "c", "a", "t", "i", "o", "n_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_GENERIC_GAME_WARNING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_GENERIC_GAME_WARNING_TYPES.html", ["u", "m_", "g", "e", "n", "e", "r", "i", "c_", "g", "a", "m", "e_", "w", "a", "r", "n", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_ARMOUR_TYPES", "", "Docs/Classes/Statics/Variables/NUM_ARMOUR_TYPES.html", ["u", "m_", "a", "r", "m", "o", "u", "r_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_UPGRADE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_UPGRADE_TYPES.html", ["u", "m_", "u", "p", "g", "r", "a", "d", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CPU_DIFFICULTIES", "", "Docs/Classes/Statics/Variables/NUM_CPU_DIFFICULTIES.html", ["u", "m_", "c", "p", "u_", "d", "i", "f", "f", "i", "c", "u", "l", "t", "i", "e", "s"], "Statics");
addToContainers_variable("NUM_DEFEAT_CONDITIONS", "Excludes DoesNothing", "Docs/Classes/Statics/Variables/NUM_DEFEAT_CONDITIONS.html", ["u", "m_", "d", "e", "f", "e", "a", "t_", "c", "o", "n", "d", "i", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_RESOURCE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_RESOURCE_TYPES.html", ["u", "m_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_HOUSING_RESOURCE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_HOUSING_RESOURCE_TYPES.html", ["u", "m_", "h", "o", "u", "s", "i", "n", "g_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_PERSISTENT_HUD_TAB_TYPES", "", "Docs/Classes/Statics/Variables/NUM_PERSISTENT_HUD_TAB_TYPES.html", ["u", "m_", "p", "e", "r", "s", "i", "s", "t", "e", "n", "t_", "h", "u", "d_", "t", "a", "b_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_MATCH_WIDGET_TYPES", "Includes None", "Docs/Classes/Statics/Variables/NUM_MATCH_WIDGET_TYPES.html", ["u", "m_", "m", "a", "t", "c", "h_", "w", "i", "d", "g", "e", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUILDING_ANIMATIONS", "", "Docs/Classes/Statics/Variables/NUM_BUILDING_ANIMATIONS.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "a", "n", "i", "m", "a", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_TARGETING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_TARGETING_TYPES.html", ["u", "m_", "t", "a", "r", "g", "e", "t", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_COMMAND_TARGET_TYPES", "", "Docs/Classes/Statics/Variables/NUM_COMMAND_TARGET_TYPES.html", ["u", "m_", "c", "o", "m", "m", "a", "n", "d_", "t", "a", "r", "g", "e", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_AFFILIATIONS", "Exclude observer", "Docs/Classes/Statics/Variables/NUM_AFFILIATIONS.html", ["u", "m_", "a", "f", "f", "i", "l", "i", "a", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_MATCH_LOADING_STATUSES", "Exclude observer", "Docs/Classes/Statics/Variables/NUM_MATCH_LOADING_STATUSES.html", ["u", "m_", "m", "a", "t", "c", "h_", "l", "o", "a", "d", "i", "n", "g_", "s", "t", "a", "t", "u", "s", "e", "s"], "Statics");
addToContainers_variable("NUM_STARTING_RESOURCE_AMOUNT_TYPES", "", "Docs/Classes/Statics/Variables/NUM_STARTING_RESOURCE_AMOUNT_TYPE.html", ["u", "m_", "s", "t", "a", "r", "t", "i", "n", "g_", "r", "e", "s", "o", "u", "r", "c", "e_", "a", "m", "o", "u", "n", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_MESSAGE_RECIPIENT_TYPES", "Excludes DevSettings", "Docs/Classes/Statics/Variables/NUM_MESSAGE_RECIPIENT_TYPES.html", ["u", "m_", "m", "e", "s", "s", "a", "g", "e_", "r", "e", "c", "i", "p", "i", "e", "n", "t_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_STATIC_BUFF_AND_DEBUFF_TYPES", "", "Docs/Classes/Statics/Variables/NUM_STATIC_BUFF_AND_DEBUFF_TYPES.html", ["u", "m_", "s", "t", "a", "t", "i", "c_", "b", "u", "f", "f_", "a", "n", "d_", "d", "e", "b", "u", "f", "f_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_TICKABLE_BUFF_AND_DEBUFF_TYPES", "", "Docs/Classes/Statics/Variables/NUM_TICKABLE_BUFF_AND_DEBUFF_TYPE.html", ["u", "m_", "t", "i", "c", "k", "a", "b", "l", "e_", "b", "u", "f", "f_", "a", "n", "d_", "d", "e", "b", "u", "f", "f_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUFF_AND_DEBUFF_SUBTYPES", "", "Docs/Classes/Statics/Variables/NUM_BUFF_AND_DEBUFF_SUBTYPES.html", ["u", "m_", "b", "u", "f", "f_", "a", "n", "d_", "d", "e", "b", "u", "f", "f_", "s", "u", "b", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CUSTOM_ABILITY_CHECK_TYPES", "Exclude Default", "Docs/Classes/Statics/Variables/NUM_CUSTOM_ABILITY_CHECK_TYPES.html", ["u", "m_", "c", "u", "s", "t", "o", "m_", "a", "b", "i", "l", "i", "t", "y_", "c", "h", "e", "c", "k_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_SELECTABLE_RESOURCE_TYPES", "Exclude uninitialized and \"success\"", "Docs/Classes/Statics/Variables/NUM_SELECTABLE_RESOURCE_TYPES.html", ["u", "m_", "s", "e", "l", "e", "c", "t", "a", "b", "l", "e_", "r", "e", "s", "o", "u", "r", "c", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_INVENTORY_ITEM_TYPES", "", "Docs/Classes/Statics/Variables/NUM_INVENTORY_ITEM_TYPES.html", ["u", "m_", "i", "n", "v", "e", "n", "t", "o", "r", "y_", "i", "t", "e", "m_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_COMMANDER_ABILITY_TYPES", "", "Docs/Classes/Statics/Variables/NUM_COMMANDER_ABILITY_TYPES.html", ["u", "m_", "c", "o", "m", "m", "a", "n", "d", "e", "r_", "a", "b", "i", "l", "i", "t", "y_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_COMMANDER_SKILL_TREE_NODE_TYPES", "", "Docs/Classes/Statics/Variables/NUM_COMMANDER_SKILL_TREE_NODE_TYP.html", ["u", "m_", "c", "o", "m", "m", "a", "n", "d", "e", "r_", "s", "k", "i", "l", "l_", "t", "r", "e", "e_", "n", "o", "d", "e_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_CONTROL_SETTING_TYPES", "", "Docs/Classes/Statics/Variables/NUM_CONTROL_SETTING_TYPES.html", ["u", "m_", "c", "o", "n", "t", "r", "o", "l_", "s", "e", "t", "t", "i", "n", "g_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_BUILDING_GARRISON_NETWORK_TYPES", "", "Docs/Classes/Statics/Variables/NUM_BUILDING_GARRISON_NETWORK_TYP.html", ["u", "m_", "b", "u", "i", "l", "d", "i", "n", "g_", "g", "a", "r", "r", "i", "s", "o", "n_", "n", "e", "t", "w", "o", "r", "k_", "t", "y", "p", "e", "s"], "Statics");
addToContainers_variable("NUM_EDITOR_PLAY_SKIP_OPTIONS", "", "Docs/Classes/Statics/Variables/NUM_EDITOR_PLAY_SKIP_OPTIONS.html", ["u", "m_", "e", "d", "i", "t", "o", "r_", "p", "l", "a", "y_", "s", "k", "i", "p_", "o", "p", "t", "i", "o", "n", "s"], "Statics");
addToContainers_variable("NUM_PIE_SESSION_INVALID_OWNER_RULES", "", "Docs/Classes/Statics/Variables/NUM_PIE_SESSION_INVALID_OWNER_RUL.html", ["u", "m_", "p", "i", "e_", "s", "e", "s", "s", "i", "o", "n_", "i", "n", "v", "a", "l", "i", "d_", "o", "w", "n", "e", "r_", "r", "u", "l", "e", "s"], "Statics");
addToContainers_variable("SWEEP_HEIGHT", "How high to check when making capsule sweeps for targets. Depending on how bumpy the map is or how high flying units fly this may need to be adjusted. Maybe used by other things too like line traces", "Docs/Classes/Statics/Variables/SWEEP_HEIGHT.html", ["w", "e", "e", "p_", "h", "e", "i", "g", "h", "t"], "Statics");
addToContainers_variable("", "", "Docs/Classes/Statics/Variables/.html", [], "Statics");
addToContainers_variable("NUM_ACTOR_TAGS", "Number of actor tags I add to selectables when they setup", "Docs/Classes/Statics/Variables/NUM_ACTOR_TAGS.html", ["u", "m_", "a", "c", "t", "o", "r_", "t", "a", "g", "s"], "Statics");
addToContainers_variable("NeutralID", "The player ID for a neutral selectable. This goes in AActor::Tags[0]", "Docs/Classes/Statics/Variables/NeutralID.html", ["neutral", "i", "d"], "Statics");
addToContainers_variable("NEUTRAL_TEAM_TAG", "Team tags for neutral and observer. The neutral tag will probably go on selectables while the observer tag will probably only ever go on the PC and PS", "Docs/Classes/Statics/Variables/NEUTRAL_TEAM_TAG.html", ["e", "u", "t", "r", "a", "l_", "t", "e", "a", "m_", "t", "a", "g"], "Statics");
addToContainers_variable("OBSERVER_TEAM_TAG", "", "Docs/Classes/Statics/Variables/OBSERVER_TEAM_TAG.html", ["b", "s", "e", "r", "v", "e", "r_", "t", "e", "a", "m_", "t", "a", "g"], "Statics");
addToContainers_variable("UNTARGETABLE_TAG", "Tag to say a selectable cannot be targeted by attacks or abilities", "Docs/Classes/Statics/Variables/UNTARGETABLE_TAG.html", ["n", "t", "a", "r", "g", "e", "t", "a", "b", "l", "e_", "t", "a", "g"], "Statics");
addToContainers_variable("BuildingTag", "Tag for is selectable is a building", "Docs/Classes/Statics/Variables/BuildingTag.html", ["building", "tag"], "Statics");
addToContainers_variable("UnitTag", "Tag for if selectable is a unit", "Docs/Classes/Statics/Variables/UnitTag.html", ["unit", "tag"], "Statics");
addToContainers_variable("InventoryItemTag", "Tag for if selectable is an inventory item", "Docs/Classes/Statics/Variables/InventoryItemTag.html", ["inventory", "item", "tag"], "Statics");
addToContainers_variable("AirTag", "Tag to look for on actors to know if they are an air unit or not", "Docs/Classes/Statics/Variables/AirTag.html", ["air", "tag"], "Statics");
addToContainers_variable("NotAirTag", "Tag for selectables that cannot fly. Oppisite of AirTag", "Docs/Classes/Statics/Variables/NotAirTag.html", ["not", "air", "tag"], "Statics");
addToContainers_variable("HasAttackTag", "Tag for whether the selectable has an attack or not", "Docs/Classes/Statics/Variables/HasAttackTag.html", ["has", "attack", "tag"], "Statics");
addToContainers_variable("NotHasAttackTag", "", "Docs/Classes/Statics/Variables/NotHasAttackTag.html", ["not", "has", "attack", "tag"], "Statics");
addToContainers_variable("HasZeroHealthTag", "Tags for whether selectable is above zero health or not", "Docs/Classes/Statics/Variables/HasZeroHealthTag.html", ["has", "zero", "health", "tag"], "Statics");
addToContainers_variable("AboveZeroHealthTag", "", "Docs/Classes/Statics/Variables/AboveZeroHealthTag.html", ["above", "zero", "health", "tag"], "Statics");
addToContainers_variable("NotHasInventoryTag", "Tags about inventory", "Docs/Classes/Statics/Variables/NotHasInventoryTag.html", ["not", "has", "inventory", "tag"], "Statics");
addToContainers_variable("HasZeroCapacityInventoryTag", "", "Docs/Classes/Statics/Variables/HasZeroCapacityInventoryTag.html", ["has", "zero", "capacity", "inventory", "tag"], "Statics");
addToContainers_variable("HasInventoryWithCapacityGreaterThanZeroTag", "", "Docs/Classes/Statics/Variables/HasInventoryWithCapacityGreaterTh.html", ["has", "inventory", "with", "capacity", "greater", "than", "zero", "tag"], "Statics");
addToContainers_variable("IsShopThatAcceptsRefundsTag", "", "Docs/Classes/Statics/Variables/IsShopThatAcceptsRefundsTag.html", ["is", "shop", "that", "accepts", "refunds", "tag"], "Statics");
addToContainers_variable("DamageTypes", "Holds each user defined damage type", "Docs/Classes/Statics/Variables/DamageTypes.html", ["damage", "types"], "Statics");
addToContainers_variable("SocketNames", "", "Docs/Classes/Statics/Variables/SocketNames.html", ["socket", "names"], "Statics");
addToContainers_variable("TargetTypeFNames", "Maps ETargetingType to an arbitrary FName using key as TargetingTypeToArrayIndex()", "Docs/Classes/Statics/Variables/TargetTypeFNames.html", ["target", "type", "f", "names"], "Statics");
addToContainers_variable("ImportantAnims", "Holds which animation types should throw at least a warning when the player tries to play one but no animation is set", "Docs/Classes/Statics/Variables/ImportantAnims.html", ["important", "anims"], "Statics");
addToContainers_struct("FAtLeastOneInt16", "Int16 that must be at least 1. Mainly here because at times I want to impose a min limit for container entries", "Docs/Structs/FAtLeastOneInt16/FAtLeastOneInt16.html", ["at", "least", "one", "int16"], "");
addToContainers_function("FAtLeastOneInt16", "", "Docs/Structs/FAtLeastOneInt16/Functions/FAtLeastOneInt16.html", ["at", "least", "one", "int16"], "FAtLeastOneInt16");
addToContainers_function("GetInteger", "", "Docs/Structs/FAtLeastOneInt16/Functions/GetInteger.html", ["get", "integer"], "FAtLeastOneInt16");
addToContainers_function("FAtLeastOneInt16", "", "Docs/Structs/FAtLeastOneInt16/Functions/FAtLeastOneInt16_1.html", ["at", "least", "one", "int16"], "FAtLeastOneInt16");
addToContainers_function("FAtLeastOneInt16", "", "Docs/Structs/FAtLeastOneInt16/Functions/FAtLeastOneInt16_2.html", ["at", "least", "one", "int16"], "FAtLeastOneInt16");
addToContainers_variable("", "", "Docs/Structs/FAtLeastOneInt16/Variables/.html", [], "FAtLeastOneInt16");
addToContainers_struct("FFactionBuildingTypePair", "EFaction and EBuildingType", "Docs/Structs/FFactionBuildingTypePair/FFactionBuildingTypePair.html", ["faction", "building", "type", "pair"], "");
addToContainers_function("FFactionBuildingTypePair", "", "Docs/Structs/FFactionBuildingTypePair/Functions/FFactionBuildingTypePair.html", ["faction", "building", "type", "pair"], "FFactionBuildingTypePair");
addToContainers_function("FFactionBuildingTypePair", "", "Docs/Structs/FFactionBuildingTypePair/Functions/FFactionBuildingTypePair_1.html", ["faction", "building", "type", "pair"], "FFactionBuildingTypePair");
addToContainers_function("Elem)", "", "Docs/Structs/FFactionBuildingTypePair/Functions/Elem).html", [], "FFactionBuildingTypePair");
addToContainers_function("Elem_2)", "", "Docs/Structs/FFactionBuildingTypePair/Functions/Elem_2).html", [], "FFactionBuildingTypePair");
addToContainers_variable("", "", "Docs/Structs/FFactionBuildingTypePair/Variables/.html", [], "FFactionBuildingTypePair");
addToContainers_variable("", "", "Docs/Structs/FFactionBuildingTypePair/Variables/_1.html", [], "FFactionBuildingTypePair");
addToContainers_struct("FUnifiedImageAndSoundFlags", "Holds what brush/sound assets the player uses", "Docs/Structs/FUnifiedImageAndSoundFlags/FUnifiedImageAndSoundFlags.html", ["unified", "image", "and", "sound", "flags"], "");
addToContainers_variable(":", "Bools for whether or not we\'re using a single image/sound or not", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_1.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_2.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_3.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_variable(":", "", "Docs/Structs/FUnifiedImageAndSoundFlags/Variables/:_4.html", [], "FUnifiedImageAndSoundFlags");
addToContainers_struct("FStaticMeshInfo", "Static mesh and a transform", "Docs/Structs/FStaticMeshInfo/FStaticMeshInfo.html", ["static", "mesh", "info"], "");
addToContainers_function("FStaticMeshInfo", "", "Docs/Structs/FStaticMeshInfo/Functions/FStaticMeshInfo.html", ["static", "mesh", "info"], "FStaticMeshInfo");
addToContainers_function("GetMesh", "", "Docs/Structs/FStaticMeshInfo/Functions/GetMesh.html", ["get", "mesh"], "FStaticMeshInfo");
addToContainers_function("GetTransform", "", "Docs/Structs/FStaticMeshInfo/Functions/GetTransform.html", ["get", "transform"], "FStaticMeshInfo");
addToContainers_variable("", "", "Docs/Structs/FStaticMeshInfo/Variables/.html", [], "FStaticMeshInfo");
addToContainers_variable("", "", "Docs/Structs/FStaticMeshInfo/Variables/_1.html", [], "FStaticMeshInfo");
addToContainers_struct("FMeshInfoBasic", "This struct allows the user to set either a static mesh or skeletal mesh", "Docs/Structs/FMeshInfoBasic/FMeshInfoBasic.html", ["mesh", "info", "basic"], "");
addToContainers_function("FMeshInfoBasic", "", "Docs/Structs/FMeshInfoBasic/Functions/FMeshInfoBasic.html", ["mesh", "info", "basic"], "FMeshInfoBasic");
addToContainers_function("IsMeshSet", "Return whether Mesh is not null", "Docs/Structs/FMeshInfoBasic/Functions/IsMeshSet.html", ["is", "mesh", "set"], "FMeshInfoBasic");
addToContainers_function("IsStaticMesh", "It\'s gonna be either a SM or SK. Make sure to null check before calling these", "Docs/Structs/FMeshInfoBasic/Functions/IsStaticMesh.html", ["is", "static", "mesh"], "FMeshInfoBasic");
addToContainers_function("IsSkeletalMesh", "", "Docs/Structs/FMeshInfoBasic/Functions/IsSkeletalMesh.html", ["is", "skeletal", "mesh"], "FMeshInfoBasic");
addToContainers_function("GetMeshAsStaticMesh", "", "Docs/Structs/FMeshInfoBasic/Functions/GetMeshAsStaticMesh.html", ["get", "mesh", "as", "static", "mesh"], "FMeshInfoBasic");
addToContainers_function("GetMeshAsSkeletalMesh", "", "Docs/Structs/FMeshInfoBasic/Functions/GetMeshAsSkeletalMesh.html", ["get", "mesh", "as", "skeletal", "mesh"], "FMeshInfoBasic");
addToContainers_function("GetLocation", "", "Docs/Structs/FMeshInfoBasic/Functions/GetLocation.html", ["get", "location"], "FMeshInfoBasic");
addToContainers_function("GetRotation", "", "Docs/Structs/FMeshInfoBasic/Functions/GetRotation.html", ["get", "rotation"], "FMeshInfoBasic");
addToContainers_function("GetScale3D", "", "Docs/Structs/FMeshInfoBasic/Functions/GetScale3D.html", ["get", "scale3", "d"], "FMeshInfoBasic");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FMeshInfoBasic/Functions/OnPostEdit.html", ["on", "post", "edit"], "FMeshInfoBasic");
addToContainers_variable("", "Can either be a static mesh or skeletal mesh. My notes: Odd. I cannot set SKs in this project, but in another project I can do fine. I get this message on loading up editor: \"Property MeshInfo of MeshInfo has a struct type mismatch (tag HOTRELOADED_MeshInfo_0 != prop MeshInfo) in package: ../../../../Projects/RTS_Ver2/Content/Framework/RTSGameInstance_BP.uasset. If that struct got renamed, add an entry to ActiveStructRedirects\" - might have something to do with it. Update: I no longer get this warning message and it still doesn\'t work. Named it MeshPtr to try and get around this warning. Tried moving around in struct to get it fixed. This sucks. Can\'t get this working TODO. Once fixed can remove WORKAROUND_MeshPath variable", "Docs/Structs/FMeshInfoBasic/Variables/.html", [], "FMeshInfoBasic");
addToContainers_variable("", "", "Docs/Structs/FMeshInfoBasic/Variables/_1.html", [], "FMeshInfoBasic");
addToContainers_variable("", "", "Docs/Structs/FMeshInfoBasic/Variables/_2.html", [], "FMeshInfoBasic");
addToContainers_variable("", "", "Docs/Structs/FMeshInfoBasic/Variables/_3.html", [], "FMeshInfoBasic");
addToContainers_variable("", "This is a workaround for Mesh not being able to set skeletal meshes (or anything other than static meshes actually). Copy and paste an object path into here to set Mesh to it. (get path by right-clicking on asset and choosing \'Copy Reference\'). The issue probably lies in the fact I used to have a struct called FMeshInfo that only allowed static meshes then I changed it to allow both.", "Docs/Structs/FMeshInfoBasic/Variables/_4.html", [], "FMeshInfoBasic");
addToContainers_struct("FCursorInfo", "Struct for storing data about hardware cursors. Similar to the engine\'s FHardwareCursor, follows similar naming conventions", "Docs/Structs/FCursorInfo/FCursorInfo.html", ["cursor", "info"], "");
addToContainers_function("FCursorInfo", "", "Docs/Structs/FCursorInfo/Functions/FCursorInfo.html", ["cursor", "info"], "FCursorInfo");
addToContainers_function("FCursorInfo", "This constructor was added so development widget actions could set custom cursors.", "Docs/Structs/FCursorInfo/Functions/FCursorInfo_1.html", ["cursor", "info"], "FCursorInfo");
addToContainers_function("GetCursorPath", "Getters and setters", "Docs/Structs/FCursorInfo/Functions/GetCursorPath.html", ["get", "cursor", "path"], "FCursorInfo");
addToContainers_function("GetHotSpot", "", "Docs/Structs/FCursorInfo/Functions/GetHotSpot.html", ["get", "hot", "spot"], "FCursorInfo");
addToContainers_function("GetFullPath", "", "Docs/Structs/FCursorInfo/Functions/GetFullPath.html", ["get", "full", "path"], "FCursorInfo");
addToContainers_function("SetFullPath", "Create the full path to the cursor. This is called during setup to avoid creating FNames on the fly", "Docs/Structs/FCursorInfo/Functions/SetFullPath.html", ["set", "full", "path"], "FCursorInfo");
addToContainers_function("ContainsCustomCursor", "Return whether user decided to use link this to a custom cursor or not", "Docs/Structs/FCursorInfo/Functions/ContainsCustomCursor.html", ["contains", "custom", "cursor"], "FCursorInfo");
addToContainers_variable("", "File path relative to UStatics::HARDWARE_CURSOR_PATH which I think is Slate/HardwareCursors/ but you might want to double check that in Statics.cpp. Leave this varaible blank to indicate you do not want to use a custom mouse cursor in this case (\"None\" may show)", "Docs/Structs/FCursorInfo/Variables/.html", [], "FCursorInfo");
addToContainers_variable("", "Hot spot refers to the part of the cursor image that determines where the click happens. This should be normalized to between 0 and 1, so I assume that (0, 0) would be the top left of the cursor image while (1, 1) is the bottom right", "Docs/Structs/FCursorInfo/Variables/_1.html", [], "FCursorInfo");
addToContainers_variable("", "Full path = UStatics::HARDWARE_CURSOR_PATH + Path. Set during game startup to avoid creating FNames while setting hardware cursor in match", "Docs/Structs/FCursorInfo/Variables/_2.html", [], "FCursorInfo");
addToContainers_variable("", "Whether SetFullPath() has been called", "Docs/Structs/FCursorInfo/Variables/_3.html", [], "FCursorInfo");
addToContainers_struct("FContextCommand", "Struct to be sent from client to server when a command is issued that doesn\'t require a location in world space e.g. a train unit command from a barracks", "Docs/Structs/FContextCommand/FContextCommand.html", ["context", "command"], "");
addToContainers_function("FContextCommand", "", "Docs/Structs/FContextCommand/Functions/FContextCommand.html", ["context", "command"], "FContextCommand");
addToContainers_function("FContextCommand", "", "Docs/Structs/FContextCommand/Functions/FContextCommand_1.html", ["context", "command"], "FContextCommand");
addToContainers_function("FContextCommand", "", "Docs/Structs/FContextCommand/Functions/FContextCommand_2.html", ["context", "command"], "FContextCommand");
addToContainers_function("AddSelectable", "", "Docs/Structs/FContextCommand/Functions/AddSelectable.html", ["add", "selectable"], "FContextCommand");
addToContainers_function("SetupTypes", "", "Docs/Structs/FContextCommand/Functions/SetupTypes.html", ["setup", "types"], "FContextCommand");
addToContainers_function("SetupTypes", "", "Docs/Structs/FContextCommand/Functions/SetupTypes_1.html", ["setup", "types"], "FContextCommand");
addToContainers_variable(":", "If true then the same group as the last order should be used", "Docs/Structs/FContextCommand/Variables/:.html", [], "FContextCommand");
addToContainers_variable("", "Just static_cast<uint8>(EContextAction). Don\'t really need to convert to uint8", "Docs/Structs/FContextCommand/Variables/.html", [], "FContextCommand");
addToContainers_variable("", "", "Docs/Structs/FContextCommand/Variables/_1.html", [], "FContextCommand");
addToContainers_variable("", "", "Docs/Structs/FContextCommand/Variables/_2.html", [], "FContextCommand");
addToContainers_struct("FContextCommandWithLocation", "A context command that requires a location.", "Docs/Structs/FContextCommandWithLocation/FContextCommandWithLocation.html", ["context", "command", "with", "location"], "");
addToContainers_function("FContextCommandWithLocation", "", "Docs/Structs/FContextCommandWithLocation/Functions/FContextCommandWithLocation.html", ["context", "command", "with", "location"], "FContextCommandWithLocation");
addToContainers_function("FContextCommandWithLocation", "", "Docs/Structs/FContextCommandWithLocation/Functions/FContextCommandWithLocation_1.html", ["context", "command", "with", "location"], "FContextCommandWithLocation");
addToContainers_function("GetClickLocation", "", "Docs/Structs/FContextCommandWithLocation/Functions/GetClickLocation.html", ["get", "click", "location"], "FContextCommandWithLocation");
addToContainers_variable("", "", "Docs/Structs/FContextCommandWithLocation/Variables/.html", [], "FContextCommandWithLocation");
addToContainers_struct("FContextCommandWithTarget", "A context command that requires a target to be sent over the wire", "Docs/Structs/FContextCommandWithTarget/FContextCommandWithTarget.html", ["context", "command", "with", "target"], "");
addToContainers_function("FContextCommandWithTarget", "", "Docs/Structs/FContextCommandWithTarget/Functions/FContextCommandWithTarget.html", ["context", "command", "with", "target"], "FContextCommandWithTarget");
addToContainers_function("FContextCommandWithTarget", "Don\'t think this is ever called", "Docs/Structs/FContextCommandWithTarget/Functions/FContextCommandWithTarget_1.html", ["context", "command", "with", "target"], "FContextCommandWithTarget");
addToContainers_variable("", "Keeping this as regular FVector. Does this lose precision by default? I want this to be precise since if the player is placing a building and their machine says it is ok to place there then a I don\'t want the server saying \'actually you can\'t place that there\' because of precision loss", "Docs/Structs/FContextCommandWithTarget/Variables/.html", [], "FContextCommandWithTarget");
addToContainers_variable("", "", "Docs/Structs/FContextCommandWithTarget/Variables/_1.html", [], "FContextCommandWithTarget");
addToContainers_struct("FRightClickCommandBase", "Base struct for all right click commands", "Docs/Structs/FRightClickCommandBase/FRightClickCommandBase.html", ["right", "click", "command", "base"], "");
addToContainers_function("FRightClickCommandBase", "", "Docs/Structs/FRightClickCommandBase/Functions/FRightClickCommandBase.html", ["right", "click", "command", "base"], "FRightClickCommandBase");
addToContainers_function("FRightClickCommandBase", "", "Docs/Structs/FRightClickCommandBase/Functions/FRightClickCommandBase_1.html", ["right", "click", "command", "base"], "FRightClickCommandBase");
addToContainers_function("ReserveAffectedSelectables", "Call AffectedSelectables.Reserve(Num)", "Docs/Structs/FRightClickCommandBase/Functions/ReserveAffectedSelectables.html", ["reserve", "affected", "selectables"], "FRightClickCommandBase");
addToContainers_function("AddSelectable", "Add selectables as those affected by command", "Docs/Structs/FRightClickCommandBase/Functions/AddSelectable.html", ["add", "selectable"], "FRightClickCommandBase");
addToContainers_function("SetUseSameGroup", "", "Docs/Structs/FRightClickCommandBase/Functions/SetUseSameGroup.html", ["set", "use", "same", "group"], "FRightClickCommandBase");
addToContainers_function("UseSameGroup", "Return whether the PC should use the last set of selectable IDs when issuing command", "Docs/Structs/FRightClickCommandBase/Functions/UseSameGroup.html", ["use", "same", "group"], "FRightClickCommandBase");
addToContainers_function("GetAffectedSelectables", "Array of selectable IDs of selectables to be issued with command", "Docs/Structs/FRightClickCommandBase/Functions/GetAffectedSelectables.html", ["get", "affected", "selectables"], "FRightClickCommandBase");
addToContainers_function("GetClickLocation", "Get the click location of command", "Docs/Structs/FRightClickCommandBase/Functions/GetClickLocation.html", ["get", "click", "location"], "FRightClickCommandBase");
addToContainers_variable(":", "If true then the same group as the last order should be used", "Docs/Structs/FRightClickCommandBase/Variables/:.html", [], "FRightClickCommandBase");
addToContainers_variable("", "Selectable IDs for all selectables given the command", "Docs/Structs/FRightClickCommandBase/Variables/.html", [], "FRightClickCommandBase");
addToContainers_variable("", "World space coords of the click location", "Docs/Structs/FRightClickCommandBase/Variables/_1.html", [], "FRightClickCommandBase");
addToContainers_struct("FRightClickCommandWithTarget", "Struct to send over wire when issuing a right-click command", "Docs/Structs/FRightClickCommandWithTarget/FRightClickCommandWithTarget.html", ["right", "click", "command", "with", "target"], "");
addToContainers_function("FRightClickCommandWithTarget", "", "Docs/Structs/FRightClickCommandWithTarget/Functions/FRightClickCommandWithTarget.html", ["right", "click", "command", "with", "target"], "FRightClickCommandWithTarget");
addToContainers_function("FRightClickCommandWithTarget", "", "Docs/Structs/FRightClickCommandWithTarget/Functions/FRightClickCommandWithTarget_1.html", ["right", "click", "command", "with", "target"], "FRightClickCommandWithTarget");
addToContainers_function("GetTarget", "Get the selectable that was clicked on, or null if none", "Docs/Structs/FRightClickCommandWithTarget/Functions/GetTarget.html", ["get", "target"], "FRightClickCommandWithTarget");
addToContainers_variable("", "Target if there was one clicked on. This gets rid of some of the efficiency of using this struct. TODO: make seperate structs: one for no targets and one for targets", "Docs/Structs/FRightClickCommandWithTarget/Variables/.html", [], "FRightClickCommandWithTarget");
addToContainers_struct("FRightClickCommandOnInventoryItem", "Right click command on an inventory item", "Docs/Structs/FRightClickCommandOnInventoryItem/FRightClickCommandOnInventoryItem.html", ["right", "click", "command", "on", "inventory", "item"], "");
addToContainers_function("FRightClickCommandOnInventoryItem", "", "Docs/Structs/FRightClickCommandOnInventoryItem/Functions/FRightClickCommandOnInventoryItem.html", ["right", "click", "command", "on", "inventory", "item"], "FRightClickCommandOnInventoryItem");
addToContainers_function("FRightClickCommandOnInventoryItem", "", "Docs/Structs/FRightClickCommandOnInventoryItem/Functions/FRightClickCommandOnInventoryItem_1.html", ["right", "click", "command", "on", "inventory", "item"], "FRightClickCommandOnInventoryItem");
addToContainers_function("GetClickedInventoryItem", "", "Docs/Structs/FRightClickCommandOnInventoryItem/Functions/GetClickedInventoryItem.html", ["get", "clicked", "inventory", "item"], "FRightClickCommandOnInventoryItem");
addToContainers_function("GetClickedInventoryItemID", "Mainly here for debugging. Should never need to be called normally", "Docs/Structs/FRightClickCommandOnInventoryItem/Functions/GetClickedInventoryItemID.html", ["get", "clicked", "inventory", "item", "i", "d"], "FRightClickCommandOnInventoryItem");
addToContainers_variable("", "Unique ID of the item that was clicked on", "Docs/Structs/FRightClickCommandOnInventoryItem/Variables/.html", [], "FRightClickCommandOnInventoryItem");
addToContainers_struct("FContextButton", "Context buttons for each unit", "Docs/Structs/FContextButton/FContextButton.html", ["context", "button"], "");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_1.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_2.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_3.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_4.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_5.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_6.html", ["context", "button"], "FContextButton");
addToContainers_function("FContextButton", "", "Docs/Structs/FContextButton/Functions/FContextButton_7.html", ["context", "button"], "FContextButton");
addToContainers_function("ToString", "", "Docs/Structs/FContextButton/Functions/ToString.html", ["to", "string"], "FContextButton");
addToContainers_function("UpdateFieldVisibilitys", "Update visibility of fields and their values", "Docs/Structs/FContextButton/Functions/UpdateFieldVisibilitys.html", ["update", "field", "visibilitys"], "FContextButton");
addToContainers_function("Button2)", "For hash function", "Docs/Structs/FContextButton/Functions/Button2).html", [], "FContextButton");
addToContainers_function("Button)", "Hash function for sets and maps", "Docs/Structs/FContextButton/Functions/Button).html", [], "FContextButton");
addToContainers_function("Button2)", "For sorting in FButtonArray", "Docs/Structs/FContextButton/Functions/Button2)_1.html", [], "FContextButton");
addToContainers_function("GetButtonType", "", "Docs/Structs/FContextButton/Functions/GetButtonType.html", ["get", "button", "type"], "FContextButton");
addToContainers_function("GetBuildingType", "", "Docs/Structs/FContextButton/Functions/GetBuildingType.html", ["get", "building", "type"], "FContextButton");
addToContainers_function("GetUnitType", "", "Docs/Structs/FContextButton/Functions/GetUnitType.html", ["get", "unit", "type"], "FContextButton");
addToContainers_function("GetUpgradeType", "", "Docs/Structs/FContextButton/Functions/GetUpgradeType.html", ["get", "upgrade", "type"], "FContextButton");
addToContainers_function("GetBuildInfo", "", "Docs/Structs/FContextButton/Functions/GetBuildInfo.html", ["get", "build", "info"], "FContextButton");
addToContainers_function("GetHUDPersistentTabButtonOrdering", "", "Docs/Structs/FContextButton/Functions/GetHUDPersistentTabButtonOrdering.html", ["get", "h", "u", "d", "persistent", "tab", "button", "ordering"], "FContextButton");
addToContainers_function("SetHUDPersistentTabButtonOrdering", "", "Docs/Structs/FContextButton/Functions/SetHUDPersistentTabButtonOrdering.html", ["set", "h", "u", "d", "persistent", "tab", "button", "ordering"], "FContextButton");
addToContainers_function("SetBuildInfo", "", "Docs/Structs/FContextButton/Functions/SetBuildInfo.html", ["set", "build", "info"], "FContextButton");
addToContainers_function("IsForBuildBuilding", "", "Docs/Structs/FContextButton/Functions/IsForBuildBuilding.html", ["is", "for", "build", "building"], "FContextButton");
addToContainers_function("IsForTrainUnit", "", "Docs/Structs/FContextButton/Functions/IsForTrainUnit.html", ["is", "for", "train", "unit"], "FContextButton");
addToContainers_function("IsForResearchUpgrade", "", "Docs/Structs/FContextButton/Functions/IsForResearchUpgrade.html", ["is", "for", "research", "upgrade"], "FContextButton");
addToContainers_variable("", "What the button does", "Docs/Structs/FContextButton/Variables/.html", [], "FContextButton");
addToContainers_variable("", "If this button is to build a building, the building it will build", "Docs/Structs/FContextButton/Variables/_1.html", [], "FContextButton");
addToContainers_variable("", "If the button trains a unit what unit it trains. Must be set to NotUnit if ButtonType != Train", "Docs/Structs/FContextButton/Variables/_2.html", [], "FContextButton");
addToContainers_variable("", "Upgrade type if this is for upgrades", "Docs/Structs/FContextButton/Variables/_3.html", [], "FContextButton");
addToContainers_variable("", "Relevant only when using a persistent panel in HUD like in C&C. The order to appear on tab. Lower = appear sooner", "Docs/Structs/FContextButton/Variables/_4.html", [], "FContextButton");
addToContainers_variable("BuildInfo", "Build info this button is related to. Probably never use this. Should delete it", "Docs/Structs/FContextButton/Variables/BuildInfo.html", ["build", "info"], "FContextButton");
addToContainers_variable("", "Booleans and function to toggle visibility of variables in editor", "Docs/Structs/FContextButton/Variables/_5.html", [], "FContextButton");
addToContainers_variable("", "", "Docs/Structs/FContextButton/Variables/_6.html", [], "FContextButton");
addToContainers_variable("", "", "Docs/Structs/FContextButton/Variables/_7.html", [], "FContextButton");
addToContainers_struct("FTrainingInfo", "Used in production queues", "Docs/Structs/FTrainingInfo/FTrainingInfo.html", ["training", "info"], "");
addToContainers_function("IsProductionForBuilding", "", "Docs/Structs/FTrainingInfo/Functions/IsProductionForBuilding.html", ["is", "production", "for", "building"], "FTrainingInfo");
addToContainers_function("IsForUnit", "", "Docs/Structs/FTrainingInfo/Functions/IsForUnit.html", ["is", "for", "unit"], "FTrainingInfo");
addToContainers_function("IsForUpgrade", "Returns true if this is for an upgrade, false if this is for a unit or building", "Docs/Structs/FTrainingInfo/Functions/IsForUpgrade.html", ["is", "for", "upgrade"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_1.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_2.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_3.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("FTrainingInfo", "", "Docs/Structs/FTrainingInfo/Functions/FTrainingInfo_4.html", ["training", "info"], "FTrainingInfo");
addToContainers_function("ToString", "For debugging ", "Docs/Structs/FTrainingInfo/Functions/ToString.html", ["to", "string"], "FTrainingInfo");
addToContainers_function("GetBuildingType", "Getters and setters", "Docs/Structs/FTrainingInfo/Functions/GetBuildingType.html", ["get", "building", "type"], "FTrainingInfo");
addToContainers_function("GetUnitType", "", "Docs/Structs/FTrainingInfo/Functions/GetUnitType.html", ["get", "unit", "type"], "FTrainingInfo");
addToContainers_function("GetUpgradeType", "", "Docs/Structs/FTrainingInfo/Functions/GetUpgradeType.html", ["get", "upgrade", "type"], "FTrainingInfo");
addToContainers_variable("", "The building this is for or NotBuilding if not for building", "Docs/Structs/FTrainingInfo/Variables/.html", [], "FTrainingInfo");
addToContainers_variable("", "The unit training or NotUnit if this is for an upgrade", "Docs/Structs/FTrainingInfo/Variables/_1.html", [], "FTrainingInfo");
addToContainers_variable("", "Upgrade type, or None if this is for training a unit", "Docs/Structs/FTrainingInfo/Variables/_2.html", [], "FTrainingInfo");
addToContainers_variable("Info2)", "For TMap", "Docs/Structs/FTrainingInfo/Variables/Info2).html", [], "FTrainingInfo");
addToContainers_variable("Info)", "", "Docs/Structs/FTrainingInfo/Variables/Info).html", [], "FTrainingInfo");
addToContainers_struct("FCPUPlayerTrainingInfo", "Training info that also holds the reason the item is being produced", "Docs/Structs/FCPUPlayerTrainingInfo/FCPUPlayerTrainingInfo.html", ["c", "p", "u", "player", "training", "info"], "");
addToContainers_function("FCPUPlayerTrainingInfo", "Default ctor, never call this ", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("FCPUPlayerTrainingInfo", "Ctors that are all basically the same", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo_1.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("FCPUPlayerTrainingInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo_2.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("FCPUPlayerTrainingInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/FCPUPlayerTrainingInfo_3.html", ["c", "p", "u", "player", "training", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("GetActualCommand", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/GetActualCommand.html", ["get", "actual", "command"], "FCPUPlayerTrainingInfo");
addToContainers_function("GetRawAuxilleryInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/GetRawAuxilleryInfo.html", ["get", "raw", "auxillery", "info"], "FCPUPlayerTrainingInfo");
addToContainers_function("GetOriginalCommandReasonForProduction", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/GetOriginalCommandReasonForProduc.html", ["get", "original", "command", "reason", "for", "production"], "FCPUPlayerTrainingInfo");
addToContainers_function("GetOriginalCommandAuxilleryInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Functions/GetOriginalCommandAuxilleryInfo.html", ["get", "original", "command", "auxillery", "info"], "FCPUPlayerTrainingInfo");
addToContainers_variable("ActualCommandType", "Reason for producing this", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/ActualCommandType.html", ["actual", "command", "type"], "FCPUPlayerTrainingInfo");
addToContainers_variable("AuxilleryInfo", "More info about the reason for production e.g. if it is for building a resource depot then the resource type it is for. Sometimes this can be ignored.", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/AuxilleryInfo.html", ["auxillery", "info"], "FCPUPlayerTrainingInfo");
addToContainers_variable("OriginalCommand_ReasonForProduction", "", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/OriginalCommand_ReasonForProducti.html", ["original", "command_", "reason", "for", "production"], "FCPUPlayerTrainingInfo");
addToContainers_variable("OriginalCommand_AuxilleryInfo", "", "Docs/Structs/FCPUPlayerTrainingInfo/Variables/OriginalCommand_AuxilleryInfo.html", ["original", "command_", "auxillery", "info"], "FCPUPlayerTrainingInfo");
addToContainers_struct("FBasicDecalInfo", "", "Docs/Structs/FBasicDecalInfo/FBasicDecalInfo.html", ["basic", "decal", "info"], "");
addToContainers_function("FBasicDecalInfo", "", "Docs/Structs/FBasicDecalInfo/Functions/FBasicDecalInfo.html", ["basic", "decal", "info"], "FBasicDecalInfo");
addToContainers_function("FBasicDecalInfo", "", "Docs/Structs/FBasicDecalInfo/Functions/FBasicDecalInfo_1.html", ["basic", "decal", "info"], "FBasicDecalInfo");
addToContainers_function("GetDecal", "", "Docs/Structs/FBasicDecalInfo/Functions/GetDecal.html", ["get", "decal"], "FBasicDecalInfo");
addToContainers_function("GetRadius", "", "Docs/Structs/FBasicDecalInfo/Functions/GetRadius.html", ["get", "radius"], "FBasicDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDecalInfo/Variables/.html", [], "FBasicDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDecalInfo/Variables/_1.html", [], "FBasicDecalInfo");
addToContainers_struct("FContextButtonInfo", "Defines basic command params for a context action. Some of the things defined in this struct can be ignored by individual units e.g. MaxRange, cooldown and Effect_BP can be ignored by units", "Docs/Structs/FContextButtonInfo/FContextButtonInfo.html", ["context", "button", "info"], "");
addToContainers_function("FContextButtonInfo", "", "Docs/Structs/FContextButtonInfo/Functions/FContextButtonInfo.html", ["context", "button", "info"], "FContextButtonInfo");
addToContainers_function("FContextButtonInfo", "", "Docs/Structs/FContextButtonInfo/Functions/FContextButtonInfo_1.html", ["context", "button", "info"], "FContextButtonInfo");
addToContainers_function("FContextButtonInfo", "", "Docs/Structs/FContextButtonInfo/Functions/FContextButtonInfo_2.html", ["context", "button", "info"], "FContextButtonInfo");
addToContainers_function("MostlyDefaultValues", "Set everything but ButtonType to default value", "Docs/Structs/FContextButtonInfo/Functions/MostlyDefaultValues.html", ["mostly", "default", "values"], "FContextButtonInfo");
addToContainers_function("SetInitialType", "This should only be called during GI initialization", "Docs/Structs/FContextButtonInfo/Functions/SetInitialType.html", ["set", "initial", "type"], "FContextButtonInfo");
addToContainers_function("AddAcceptableTargetFName", "Add a FName to the AcceptableTargetFNames container. Will probably be called during setup", "Docs/Structs/FContextButtonInfo/Functions/AddAcceptableTargetFName.html", ["add", "acceptable", "target", "f", "name"], "FContextButtonInfo");
addToContainers_function("SetupHardwareCursors", "Create the full path names for each hardware cursor", "Docs/Structs/FContextButtonInfo/Functions/SetupHardwareCursors.html", ["setup", "hardware", "cursors"], "FContextButtonInfo");
addToContainers_function("GetButtonType", "Getters and setters", "Docs/Structs/FContextButtonInfo/Functions/GetButtonType.html", ["get", "button", "type"], "FContextButtonInfo");
addToContainers_function("GetName", "", "Docs/Structs/FContextButtonInfo/Functions/GetName.html", ["get", "name"], "FContextButtonInfo");
addToContainers_function("GetImage", "", "Docs/Structs/FContextButtonInfo/Functions/GetImage.html", ["get", "image"], "FContextButtonInfo");
addToContainers_function("GetHoveredImage", "", "Docs/Structs/FContextButtonInfo/Functions/GetHoveredImage.html", ["get", "hovered", "image"], "FContextButtonInfo");
addToContainers_function("GetPressedImage", "", "Docs/Structs/FContextButtonInfo/Functions/GetPressedImage.html", ["get", "pressed", "image"], "FContextButtonInfo");
addToContainers_function("GetHighlightedImage", "", "Docs/Structs/FContextButtonInfo/Functions/GetHighlightedImage.html", ["get", "highlighted", "image"], "FContextButtonInfo");
addToContainers_function("GetHoveredSound", "", "Docs/Structs/FContextButtonInfo/Functions/GetHoveredSound.html", ["get", "hovered", "sound"], "FContextButtonInfo");
addToContainers_function("GetPressedByLMBSound", "", "Docs/Structs/FContextButtonInfo/Functions/GetPressedByLMBSound.html", ["get", "pressed", "by", "l", "m", "b", "sound"], "FContextButtonInfo");
addToContainers_function("GetPressedByRMBSound", "", "Docs/Structs/FContextButtonInfo/Functions/GetPressedByRMBSound.html", ["get", "pressed", "by", "r", "m", "b", "sound"], "FContextButtonInfo");
addToContainers_function("GetDescription", "", "Docs/Structs/FContextButtonInfo/Functions/GetDescription.html", ["get", "description"], "FContextButtonInfo");
addToContainers_function("IsInstant", "", "Docs/Structs/FContextButtonInfo/Functions/IsInstant.html", ["is", "instant"], "FContextButtonInfo");
addToContainers_function("IsIssuedToAllSelected", "", "Docs/Structs/FContextButtonInfo/Functions/IsIssuedToAllSelected.html", ["is", "issued", "to", "all", "selected"], "FContextButtonInfo");
addToContainers_function("ShouldCheckRangeAtCommandIssueTime", "Could get rid of the MaxRange > 0.f check by flagging bIsRangeRequirementStrict to true on any post edits when MaxRange is 0 or less", "Docs/Structs/FContextButtonInfo/Functions/ShouldCheckRangeAtCommandIssueTim.html", ["should", "check", "range", "at", "command", "issue", "time"], "FContextButtonInfo");
addToContainers_function("PassesCommandTimeRangeCheck", "These two funcs make ShouldCheckRangeAtCommandIssueTime obsolete. Remove it", "Docs/Structs/FContextButtonInfo/Functions/PassesCommandTimeRangeCheck.html", ["passes", "command", "time", "range", "check"], "FContextButtonInfo");
addToContainers_function("PassesCommandTimeRangeCheck", "", "Docs/Structs/FContextButtonInfo/Functions/PassesCommandTimeRangeCheck_1.html", ["passes", "command", "time", "range", "check"], "FContextButtonInfo");
addToContainers_function("PassesAnimNotifyTargetVisibilityCheck", "Only relevant if the ability uses an animation and targets another selectable At time anim notify to use ability happens is the target considered visible?", "Docs/Structs/FContextButtonInfo/Functions/PassesAnimNotifyTargetVisibilityC.html", ["passes", "anim", "notify", "target", "visibility", "check"], "FContextButtonInfo");
addToContainers_function("PassesAnimNotifyRangeCheck", "Check if in range at time of anim notify. Only relevant if ability uses an anim and targets another selectable. @param Instigator - selectable instigating the ability use. @param AIController - Instigator\'s behavior AI controller. Nothing to do with CPU players. @param Target - ability target", "Docs/Structs/FContextButtonInfo/Functions/PassesAnimNotifyRangeCheck.html", ["passes", "anim", "notify", "range", "check"], "FContextButtonInfo");
addToContainers_function("DoesCommandStopMovement", "", "Docs/Structs/FContextButtonInfo/Functions/DoesCommandStopMovement.html", ["does", "command", "stop", "movement"], "FContextButtonInfo");
addToContainers_function("UsesAnimation", "", "Docs/Structs/FContextButtonInfo/Functions/UsesAnimation.html", ["uses", "animation"], "FContextButtonInfo");
addToContainers_function("UsesPreparationAnimation", "", "Docs/Structs/FContextButtonInfo/Functions/UsesPreparationAnimation.html", ["uses", "preparation", "animation"], "FContextButtonInfo");
addToContainers_function("GetAnimationType", "", "Docs/Structs/FContextButtonInfo/Functions/GetAnimationType.html", ["get", "animation", "type"], "FContextButtonInfo");
addToContainers_function("GetBuildingPreparationAnimationType", "", "Docs/Structs/FContextButtonInfo/Functions/GetBuildingPreparationAnimationTy.html", ["get", "building", "preparation", "animation", "type"], "FContextButtonInfo");
addToContainers_function("GetBuildingAnimationType", "", "Docs/Structs/FContextButtonInfo/Functions/GetBuildingAnimationType.html", ["get", "building", "animation", "type"], "FContextButtonInfo");
addToContainers_function("DoesAnimationBlockCommands", "", "Docs/Structs/FContextButtonInfo/Functions/DoesAnimationBlockCommands.html", ["does", "animation", "block", "commands"], "FContextButtonInfo");
addToContainers_function("GetMouseAppearanceOption", "", "Docs/Structs/FContextButtonInfo/Functions/GetMouseAppearanceOption.html", ["get", "mouse", "appearance", "option"], "FContextButtonInfo");
addToContainers_function("RequiresSelectableTarget", "", "Docs/Structs/FContextButtonInfo/Functions/RequiresSelectableTarget.html", ["requires", "selectable", "target"], "FContextButtonInfo");
addToContainers_function("CanLocationBeInsideFog", "", "Docs/Structs/FContextButtonInfo/Functions/CanLocationBeInsideFog.html", ["can", "location", "be", "inside", "fog"], "FContextButtonInfo");
addToContainers_function("CanTargetEnemies", "", "Docs/Structs/FContextButtonInfo/Functions/CanTargetEnemies.html", ["can", "target", "enemies"], "FContextButtonInfo");
addToContainers_function("CanTargetFriendlies", "", "Docs/Structs/FContextButtonInfo/Functions/CanTargetFriendlies.html", ["can", "target", "friendlies"], "FContextButtonInfo");
addToContainers_function("CanTargetSelf", "", "Docs/Structs/FContextButtonInfo/Functions/CanTargetSelf.html", ["can", "target", "self"], "FContextButtonInfo");
addToContainers_function("GetAcceptableTargets", "", "Docs/Structs/FContextButtonInfo/Functions/GetAcceptableTargets.html", ["get", "acceptable", "targets"], "FContextButtonInfo");
addToContainers_function("GetAcceptableTargetFNames", "", "Docs/Structs/FContextButtonInfo/Functions/GetAcceptableTargetFNames.html", ["get", "acceptable", "target", "f", "names"], "FContextButtonInfo");
addToContainers_function("GetDefaultCursorInfo", "", "Docs/Structs/FContextButtonInfo/Functions/GetDefaultCursorInfo.html", ["get", "default", "cursor", "info"], "FContextButtonInfo");
addToContainers_function("GetAcceptableTargetCursorInfo", "", "Docs/Structs/FContextButtonInfo/Functions/GetAcceptableTargetCursorInfo.html", ["get", "acceptable", "target", "cursor", "info"], "FContextButtonInfo");
addToContainers_function("GetUnacceptableTargetCursorInfo", "", "Docs/Structs/FContextButtonInfo/Functions/GetUnacceptableTargetCursorInfo.html", ["get", "unacceptable", "target", "cursor", "info"], "FContextButtonInfo");
addToContainers_function("GetAcceptableLocationDecal", "", "Docs/Structs/FContextButtonInfo/Functions/GetAcceptableLocationDecal.html", ["get", "acceptable", "location", "decal"], "FContextButtonInfo");
addToContainers_function("GetUnusableLocationDecal", "", "Docs/Structs/FContextButtonInfo/Functions/GetUnusableLocationDecal.html", ["get", "unusable", "location", "decal"], "FContextButtonInfo");
addToContainers_function("GetCooldown", "", "Docs/Structs/FContextButtonInfo/Functions/GetCooldown.html", ["get", "cooldown"], "FContextButtonInfo");
addToContainers_function("GetInitialCooldown", "", "Docs/Structs/FContextButtonInfo/Functions/GetInitialCooldown.html", ["get", "initial", "cooldown"], "FContextButtonInfo");
addToContainers_function("GetPreparationAnimPlayPoint", "", "Docs/Structs/FContextButtonInfo/Functions/GetPreparationAnimPlayPoint.html", ["get", "preparation", "anim", "play", "point"], "FContextButtonInfo");
addToContainers_function("GetSelectableResourceCost_1", "", "Docs/Structs/FContextButtonInfo/Functions/GetSelectableResourceCost_1.html", ["get", "selectable", "resource", "cost_1"], "FContextButtonInfo");
addToContainers_function("GetMaxRange", "", "Docs/Structs/FContextButtonInfo/Functions/GetMaxRange.html", ["get", "max", "range"], "FContextButtonInfo");
addToContainers_function("GetEffectBP", "", "Docs/Structs/FContextButtonInfo/Functions/GetEffectBP.html", ["get", "effect", "b", "p"], "FContextButtonInfo");
addToContainers_function("GetEffectActor", "Get a pointer to the spawned effect info actor for this ability", "Docs/Structs/FContextButtonInfo/Functions/GetEffectActor.html", ["get", "effect", "actor"], "FContextButtonInfo");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FContextButtonInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FContextButtonInfo");
addToContainers_variable("", "Name of action to appear on HUD. Only applicable if a non BuildBuilding/Train/Upgrade action", "Docs/Structs/FContextButtonInfo/Variables/.html", [], "FContextButtonInfo");
addToContainers_variable("", "Image to appear in HUD. Only applicable if a non BuildBuilding/Train/Upgrade action", "Docs/Structs/FContextButtonInfo/Variables/_1.html", [], "FContextButtonInfo");
addToContainers_variable("", "The image for when the mouse is over a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FContextButtonInfo/Variables/_2.html", [], "FContextButtonInfo");
addToContainers_variable("", "The image for when the mouse is pressed on a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FContextButtonInfo/Variables/_3.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_4.html", [], "FContextButtonInfo");
addToContainers_variable("", "The sound to play when the mouse is hovered over a button on a action bar for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FContextButtonInfo/Variables/_5.html", [], "FContextButtonInfo");
addToContainers_variable("", "The sound to play the moment the left mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FContextButtonInfo/Variables/_6.html", [], "FContextButtonInfo");
addToContainers_variable("", "The sound to play at the moment the right mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FContextButtonInfo/Variables/_7.html", [], "FContextButtonInfo");
addToContainers_variable("", "A description of the ability. Will likely be ignored if this button is for BuildBuilding/Train/Upgrade", "Docs/Structs/FContextButtonInfo/Variables/_8.html", [], "FContextButtonInfo");
addToContainers_variable("", "Type of button this is", "Docs/Structs/FContextButtonInfo/Variables/_9.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Does this action happen instantly or is another mouse click required? e.g. true = Zerg burrow command in Starcraft II false = High Templar Psionic Storm in SCII. This requires another click to select the location before the command is issued. False basically means the action requires targeting someone/somewhere", "Docs/Structs/FContextButtonInfo/Variables/:.html", [], "FContextButtonInfo");
addToContainers_variable(":", "If true this command will be issued to every unit selected (if they support the action). If false then only a single unit will be issued with the command and it will be the unit whose context menu is showing. e.g. True = Zerg burrow - all selected units will do it False = High Templar Psionic Storms - no matter how many High Templar are selected only one will do it", "Docs/Structs/FContextButtonInfo/Variables/:_1.html", [], "FContextButtonInfo");
addToContainers_variable(":", "If true then a command for this ability can only be issued if the unit is in range of the target selectable/location. If false then the unit can always be issued the command and if they are not in range at the time of receiving the command then they will move in range and then use it. Strict is a bad name. Something better might be bMustUnitBeInRangeAtTimeOfIssue", "Docs/Structs/FContextButtonInfo/Variables/:_2.html", [], "FContextButtonInfo");
addToContainers_variable(":", "If this is true then a unit receiving this command will stop movement when they receive the command and after it has executed they will go idle where they are. If false unit will not stop moving while they execute the command (if bUseAnimation is true then they will play anim as they keep moving) and will continue carrying out previous command. If you want your unit to use this ability while they move then set this to false. Not 100% this has been implemented fully. For now it is not possible to have this as false and use an animation", "Docs/Structs/FContextButtonInfo/Variables/:_3.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether to use an animation for this ability. If false then no animation will be played and ability will take effect instantly. Currently if true then bCommandStopsMovement will be automatically flagged as true", "Docs/Structs/FContextButtonInfo/Variables/:_4.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether to use a preparation animation. Currently this is only used by buildings. Make sure to adjust the variable PreparationAnimPlayPoint to suit when this anim should play", "Docs/Structs/FContextButtonInfo/Variables/:_5.html", [], "FContextButtonInfo");
addToContainers_variable("", "The animation type to use for this ability. You should not use animation types that are common such as attack or move animations since these will have anim notifies that will cause crashes if used here. It is best to stick to animation types you have defined yourself or the ContextAction_1/2/3 types", "Docs/Structs/FContextButtonInfo/Variables/_10.html", [], "FContextButtonInfo");
addToContainers_variable("", "This animation plays at a certain point in the ability cooling down. e.g. in C&C generals: at approx 10 secs before your nuke becomes ready an animation plays that opens the silo and points the nuke upwards.", "Docs/Structs/FContextButtonInfo/Variables/_11.html", [], "FContextButtonInfo");
addToContainers_variable("", "Animation to use if a building is using the ability", "Docs/Structs/FContextButtonInfo/Variables/_12.html", [], "FContextButtonInfo");
addToContainers_variable("", "If true then once the animation for this ability starts you will not be able to stop the animation with new commands until anim notify OnContextAnimationFinished is executed.", "Docs/Structs/FContextButtonInfo/Variables/_13.html", [], "FContextButtonInfo");
addToContainers_variable("", "Whether to use a custom mouse cursor or a decal when choosing where to use ability. If using CustomMouseCursor it is assumed at least DefaultMouseCursor has a valid path to a cursor. If using HideAndShowDecal it is assumed Decal is set", "Docs/Structs/FContextButtonInfo/Variables/_14.html", [], "FContextButtonInfo");
addToContainers_variable(":", "True = ability requires another selectable as a target False = any location in the world is good enough. E.g. True = Starcraft II Ghosts snipe ability False = Starcraft II Ghosts EMP ability", "Docs/Structs/FContextButtonInfo/Variables/:_6.html", [], "FContextButtonInfo");
addToContainers_variable(":", "This is only relevant if the ability does not require a selectable as a target but requires a location in the world as a target. Whether we are allowed to use this ability on locations that are inside fog of war", "Docs/Structs/FContextButtonInfo/Variables/:_7.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether ability can use an enemy as a target", "Docs/Structs/FContextButtonInfo/Variables/:_8.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether ability can use a selectable on your team as a target. Note if this and bCanTargetEnemies is false then your ability will not be able to target anything", "Docs/Structs/FContextButtonInfo/Variables/:_9.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether can target self. bCanTargetFriendlies must be true for this to be relevant. If your ability wants to only target self then you can set bIsIssuedInstantly to false", "Docs/Structs/FContextButtonInfo/Variables/:_10.html", [], "FContextButtonInfo");
addToContainers_variable(":", "Whether to check if in range at time anim notify to use ability happens. Only relevant for abilities that target another selectable. True = right before ability is done a range check happens False = once anim starts ability will be considered always in range no matter how far away the target moves", "Docs/Structs/FContextButtonInfo/Variables/:_11.html", [], "FContextButtonInfo");
addToContainers_variable("", "The types of selectables this ability can target. E.g. a High Templars feedback can only target energy users. This is only for targeting purposes. Once the ability has been used it is possible its effect causes an AoE effect which hits types that are not this type. That is all up to how the ability has been implemented. You must add at least one type for your ability to be usable", "Docs/Structs/FContextButtonInfo/Variables/_15.html", [], "FContextButtonInfo");
addToContainers_variable("", "AcceptableTargets as FNames", "Docs/Structs/FContextButtonInfo/Variables/_16.html", [], "FContextButtonInfo");
addToContainers_variable("", "Default mouse cursor for ability to show when not hovering over a selectable", "Docs/Structs/FContextButtonInfo/Variables/_17.html", [], "FContextButtonInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is an acceptable target for this ability", "Docs/Structs/FContextButtonInfo/Variables/_18.html", [], "FContextButtonInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is not an acceptable target for this ability", "Docs/Structs/FContextButtonInfo/Variables/_19.html", [], "FContextButtonInfo");
addToContainers_variable("DefaultMouseCursor_Info", "", "Docs/Structs/FContextButtonInfo/Variables/DefaultMouseCursor_Info.html", ["default", "mouse", "cursor_", "info"], "FContextButtonInfo");
addToContainers_variable("AcceptableTargetMouseCursor_Info", "", "Docs/Structs/FContextButtonInfo/Variables/AcceptableTargetMouseCursor_Info.html", ["acceptable", "target", "mouse", "cursor_", "info"], "FContextButtonInfo");
addToContainers_variable("UnacceptableTargetMouseCursor_Info", "", "Docs/Structs/FContextButtonInfo/Variables/UnacceptableTargetMouseCursor_Inf.html", ["unacceptable", "target", "mouse", "cursor_", "info"], "FContextButtonInfo");
addToContainers_variable("", "If bIsIssuedInstantly is false, the decal to draw under the mouse for when the location under the mouse is at a location where a command can be issued. Note about Radius: this is for visuals only. To change the actual area of effect of a action would need to be done in each implementation of the action ability (can also be done on a per-unit basis although this is not exposed to editor).", "Docs/Structs/FContextButtonInfo/Variables/_20.html", [], "FContextButtonInfo");
addToContainers_variable("", "If bIsIssuedInstantly is false, the decal to draw under the mouse when it is at a position where a command cannot be issued because perhaps it is inside fog, out of range etc. This decal is optional. If not set then the AcceptableLocationDecal will always be shown. UE4 tip: If all you want to do is change the color of this material then it is a good idea to add a parameter to your AcceptableLocationDecal asset, make a material instance from it in editor and adjust that param value.", "Docs/Structs/FContextButtonInfo/Variables/_21.html", [], "FContextButtonInfo");
addToContainers_variable("", "Cooldown 0 = no cooldown. Could remove this and have each unit set its own cooldown", "Docs/Structs/FContextButtonInfo/Variables/_22.html", [], "FContextButtonInfo");
addToContainers_variable("", "The cooldown this ability starts with. e.g. in C&C generals when you build a nuke silo you have to wait 6 minutes before you can use it. 0 = starts off cooldown", "Docs/Structs/FContextButtonInfo/Variables/_23.html", [], "FContextButtonInfo");
addToContainers_variable("", "How much time remaining for ability coming off cooldown when we should play the preparation animation. Makes sense for this to be no larger than Cooldown. e.g. if this is 10 then when the ability has 10 secs left before coming off cooldown then the preparation anim will play.", "Docs/Structs/FContextButtonInfo/Variables/_24.html", [], "FContextButtonInfo");
addToContainers_variable("", "The selectable resource cost of this ability. Selectable resources are things like mana or energy. Currently each selectable is only allowed a maximum of 1 selectable resource so you cannot have costs like \"50 mana and 25 energy\".", "Docs/Structs/FContextButtonInfo/Variables/_25.html", [], "FContextButtonInfo");
addToContainers_variable("", "Max range of action. 0 = unlimited range", "Docs/Structs/FContextButtonInfo/Variables/_26.html", [], "FContextButtonInfo");
addToContainers_variable("", "Blueprint for the effect of this button. This is pretty important", "Docs/Structs/FContextButtonInfo/Variables/_27.html", [], "FContextButtonInfo");
addToContainers_variable("Info2)", "For sorting", "Docs/Structs/FContextButtonInfo/Variables/Info2).html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_28.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_29.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_30.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_31.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_32.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_33.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_34.html", [], "FContextButtonInfo");
addToContainers_variable("", "", "Docs/Structs/FContextButtonInfo/Variables/_35.html", [], "FContextButtonInfo");
addToContainers_struct("FCommanderAbilityInfo", "Similar to FContextButtonInfo but for abilities instigated by the commander (commander = player)", "Docs/Structs/FCommanderAbilityInfo/FCommanderAbilityInfo.html", ["commander", "ability", "info"], "");
addToContainers_function("FCommanderAbilityInfo", "Make sure at some point Type is set to the key of the TMap this info resides in", "Docs/Structs/FCommanderAbilityInfo/Functions/FCommanderAbilityInfo.html", ["commander", "ability", "info"], "FCommanderAbilityInfo");
addToContainers_function("SetType", "", "Docs/Structs/FCommanderAbilityInfo/Functions/SetType.html", ["set", "type"], "FCommanderAbilityInfo");
addToContainers_function("PopulateAcceptableTargetFNames", "", "Docs/Structs/FCommanderAbilityInfo/Functions/PopulateAcceptableTargetFNames.html", ["populate", "acceptable", "target", "f", "names"], "FCommanderAbilityInfo");
addToContainers_function("SetupHardwareCursors", "This func can just return if the ability cannot target selectables ", "Docs/Structs/FCommanderAbilityInfo/Functions/SetupHardwareCursors.html", ["setup", "hardware", "cursors"], "FCommanderAbilityInfo");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FCommanderAbilityInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FCommanderAbilityInfo");
addToContainers_function("GetName", "----------------------------------------------------------", "Docs/Structs/FCommanderAbilityInfo/Functions/GetName.html", ["get", "name"], "FCommanderAbilityInfo");
addToContainers_function("GetNormalImage", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetNormalImage.html", ["get", "normal", "image"], "FCommanderAbilityInfo");
addToContainers_function("GetHoveredImage", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetHoveredImage.html", ["get", "hovered", "image"], "FCommanderAbilityInfo");
addToContainers_function("GetPressedImage", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetPressedImage.html", ["get", "pressed", "image"], "FCommanderAbilityInfo");
addToContainers_function("GetHighlightedImage", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetHighlightedImage.html", ["get", "highlighted", "image"], "FCommanderAbilityInfo");
addToContainers_function("GetHoveredSound", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetHoveredSound.html", ["get", "hovered", "sound"], "FCommanderAbilityInfo");
addToContainers_function("GetPressedByLMBSound", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetPressedByLMBSound.html", ["get", "pressed", "by", "l", "m", "b", "sound"], "FCommanderAbilityInfo");
addToContainers_function("GetPressedByRMBSound", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetPressedByRMBSound.html", ["get", "pressed", "by", "r", "m", "b", "sound"], "FCommanderAbilityInfo");
addToContainers_function("GetDescription", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetDescription.html", ["get", "description"], "FCommanderAbilityInfo");
addToContainers_function("GetType", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetType.html", ["get", "type"], "FCommanderAbilityInfo");
addToContainers_function("GetTargetingMethod", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetTargetingMethod.html", ["get", "targeting", "method"], "FCommanderAbilityInfo");
addToContainers_function("CanTargetInsideFog", "", "Docs/Structs/FCommanderAbilityInfo/Functions/CanTargetInsideFog.html", ["can", "target", "inside", "fog"], "FCommanderAbilityInfo");
addToContainers_function("CanTargetEnemies", "", "Docs/Structs/FCommanderAbilityInfo/Functions/CanTargetEnemies.html", ["can", "target", "enemies"], "FCommanderAbilityInfo");
addToContainers_function("CanTargetFriendlies", "", "Docs/Structs/FCommanderAbilityInfo/Functions/CanTargetFriendlies.html", ["can", "target", "friendlies"], "FCommanderAbilityInfo");
addToContainers_function("CanTargetSelf", "", "Docs/Structs/FCommanderAbilityInfo/Functions/CanTargetSelf.html", ["can", "target", "self"], "FCommanderAbilityInfo");
addToContainers_function("GetAcceptableSelectableTargetFNames", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetAcceptableSelectableTargetFNam.html", ["get", "acceptable", "selectable", "target", "f", "names"], "FCommanderAbilityInfo");
addToContainers_function("GetCooldown", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetCooldown.html", ["get", "cooldown"], "FCommanderAbilityInfo");
addToContainers_function("GetInitialCooldown", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetInitialCooldown.html", ["get", "initial", "cooldown"], "FCommanderAbilityInfo");
addToContainers_function("HasUnlimitedUses", "", "Docs/Structs/FCommanderAbilityInfo/Functions/HasUnlimitedUses.html", ["has", "unlimited", "uses"], "FCommanderAbilityInfo");
addToContainers_function("GetNumUses", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetNumUses.html", ["get", "num", "uses"], "FCommanderAbilityInfo");
addToContainers_function("GetEffectBP", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetEffectBP.html", ["get", "effect", "b", "p"], "FCommanderAbilityInfo");
addToContainers_function("GetAbilityObject", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetAbilityObject.html", ["get", "ability", "object"], "FCommanderAbilityInfo");
addToContainers_function("GetMouseAppearance", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetMouseAppearance.html", ["get", "mouse", "appearance"], "FCommanderAbilityInfo");
addToContainers_function("GetDefaultMouseCursorInfo", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetDefaultMouseCursorInfo.html", ["get", "default", "mouse", "cursor", "info"], "FCommanderAbilityInfo");
addToContainers_function("GetAcceptableTargetMouseCursorInfo", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetAcceptableTargetMouseCursorInf.html", ["get", "acceptable", "target", "mouse", "cursor", "info"], "FCommanderAbilityInfo");
addToContainers_function("GetUnacceptableTargetMouseCursorInfo", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetUnacceptableTargetMouseCursorI.html", ["get", "unacceptable", "target", "mouse", "cursor", "info"], "FCommanderAbilityInfo");
addToContainers_function("GetAcceptableLocationDecalInfo", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetAcceptableLocationDecalInfo.html", ["get", "acceptable", "location", "decal", "info"], "FCommanderAbilityInfo");
addToContainers_function("GetUnusableLocationDecalInfo", "", "Docs/Structs/FCommanderAbilityInfo/Functions/GetUnusableLocationDecalInfo.html", ["get", "unusable", "location", "decal", "info"], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_1.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_2.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_3.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_4.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Name of action to appear on HUD", "Docs/Structs/FCommanderAbilityInfo/Variables/_5.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Image to appear in HUD", "Docs/Structs/FCommanderAbilityInfo/Variables/_6.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The image for when the mouse is over a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FCommanderAbilityInfo/Variables/_7.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The image for when the mouse is pressed on a button for this ability. This will be ignored if you use a unified image for the HUD element this appears on.", "Docs/Structs/FCommanderAbilityInfo/Variables/_8.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The image for when button should be highlighted", "Docs/Structs/FCommanderAbilityInfo/Variables/_9.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The sound to play when the mouse is hovered over a button on a action bar for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FCommanderAbilityInfo/Variables/_10.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The sound to play the moment the left mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FCommanderAbilityInfo/Variables/_11.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The sound to play at the moment the right mouse button is pressed on an action bar button for this ability. This will be ignored if you use a unified sound set in game instance BP", "Docs/Structs/FCommanderAbilityInfo/Variables/_12.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "A description of the ability", "Docs/Structs/FCommanderAbilityInfo/Variables/_13.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Type of button this is", "Docs/Structs/FCommanderAbilityInfo/Variables/_14.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "What this ability targets", "Docs/Structs/FCommanderAbilityInfo/Variables/_15.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "This is only relevant if the ability can target a location in the world. Whether we are allowed to use this ability on locations that are inside fog of war.", "Docs/Structs/FCommanderAbilityInfo/Variables/:.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "Whether ability can use an enemy as a target", "Docs/Structs/FCommanderAbilityInfo/Variables/:_1.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "Whether ability can use a selectable on your team as a target. Note if this and bCanTargetEnemies is false then your ability will not be able to target anything", "Docs/Structs/FCommanderAbilityInfo/Variables/:_2.html", [], "FCommanderAbilityInfo");
addToContainers_variable(":", "Whether can target self. bCanTargetFriendlies must be true for this to be relevant.", "Docs/Structs/FCommanderAbilityInfo/Variables/:_3.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The types of selectables this ability can target. You must add at least one type for your ability to be usable", "Docs/Structs/FCommanderAbilityInfo/Variables/_16.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityInfo/Variables/_17.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Cooldown 0 = no cooldown.", "Docs/Structs/FCommanderAbilityInfo/Variables/_18.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The cooldown when this ability is aquired. e.g. in C&C generals imagine when you aquire fuel air bomb you have to wait 1 min before you can use it. That is what this is. 0 = starts off cooldown This may be ignored if this ability is the 2nd/3rd/etc rank of an ability on a single commander skill tree node i.e. only the 1st rank ability matters when it comes to this variable.", "Docs/Structs/FCommanderAbilityInfo/Variables/_19.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Number of times this ability can be used. -1 = infinite", "Docs/Structs/FCommanderAbilityInfo/Variables/_20.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Blueprint for the effect of this button. This is pretty important", "Docs/Structs/FCommanderAbilityInfo/Variables/_21.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Whether to use a custom mouse cursor or a decal when choosing where to use ability. If using CustomMouseCursor it is assumed at least DefaultMouseCursor has a valid path to a cursor. If using HideAndShowDecal it is assumed Decal is set. My notes: perhaps if the ability targets a selectable then do not allow decal here?", "Docs/Structs/FCommanderAbilityInfo/Variables/_22.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Default mouse cursor for ability to show when not hovering over a selectable", "Docs/Structs/FCommanderAbilityInfo/Variables/_23.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is an acceptable target for this ability", "Docs/Structs/FCommanderAbilityInfo/Variables/_24.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "Mouse cursor to appear when hovering over a selectable that is not an acceptable target for this ability", "Docs/Structs/FCommanderAbilityInfo/Variables/_25.html", [], "FCommanderAbilityInfo");
addToContainers_variable("DefaultMouseCursor_Info", "", "Docs/Structs/FCommanderAbilityInfo/Variables/DefaultMouseCursor_Info.html", ["default", "mouse", "cursor_", "info"], "FCommanderAbilityInfo");
addToContainers_variable("AcceptableTargetMouseCursor_Info", "", "Docs/Structs/FCommanderAbilityInfo/Variables/AcceptableTargetMouseCursor_Info.html", ["acceptable", "target", "mouse", "cursor_", "info"], "FCommanderAbilityInfo");
addToContainers_variable("UnacceptableTargetMouseCursor_Info", "", "Docs/Structs/FCommanderAbilityInfo/Variables/UnacceptableTargetMouseCursor_Inf.html", ["unacceptable", "target", "mouse", "cursor_", "info"], "FCommanderAbilityInfo");
addToContainers_variable("", "The decal to draw at the mouse location when the location is one where it is acceptable to use the ability.", "Docs/Structs/FCommanderAbilityInfo/Variables/_26.html", [], "FCommanderAbilityInfo");
addToContainers_variable("", "The decal to draw at the mouse location when the location is one where it is not acceptable to use the ability.", "Docs/Structs/FCommanderAbilityInfo/Variables/_27.html", [], "FCommanderAbilityInfo");
addToContainers_struct("FCommanderSkillTreePrerequisiteArrayEntry", "A prerequisite for a commander skill", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/FCommanderSkillTreePrerequisiteAr.html", ["commander", "skill", "tree", "prerequisite", "array", "entry"], "");
addToContainers_function("FCommanderSkillTreePrerequisiteArrayEntry", "", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Functions/FCommanderSkillTreePrerequisiteAr.html", ["commander", "skill", "tree", "prerequisite", "array", "entry"], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_function("FCommanderSkillTreePrerequisiteArrayEntry", "This ctor is here for checking if array contains entry, but it\'s probably better to use that FindBYPRedicate func or whatever and do away with this", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Functions/FCommanderSkillTreePrerequisiteAr_1.html", ["commander", "skill", "tree", "prerequisite", "array", "entry"], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_function("Elem_2)", "", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Functions/Elem_2).html", [], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_function("Elem_1)", "", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Functions/Elem_1).html", [], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_function("GetPrerequisiteType", "", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Functions/GetPrerequisiteType.html", ["get", "prerequisite", "type"], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_function("GetPrerequisiteRank", "", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Functions/GetPrerequisiteRank.html", ["get", "prerequisite", "rank"], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_function("ToString", "", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Functions/ToString.html", ["to", "string"], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_variable("", "The skill that needs to be aquired", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Variables/.html", [], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_variable("", "The rank of PrerequisiteType that needs to be aquired. This is not 0 indexed so 1 means the first rank of the ability. Just thought I would say that because under the hood I treat a 0 as rank 1.", "Docs/Structs/FCommanderSkillTreePrerequisiteAr/Variables/_1.html", [], "FCommanderSkillTreePrerequisiteArrayEntry");
addToContainers_struct("FCommanderAbilityTreeNodeSingleRankInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/FCommanderAbilityTreeNodeSingleRa.html", ["commander", "ability", "tree", "node", "single", "rank", "info"], "");
addToContainers_function("FCommanderAbilityTreeNodeSingleRankInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Functions/FCommanderAbilityTreeNodeSingleRa.html", ["commander", "ability", "tree", "node", "single", "rank", "info"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_function("GetAbilityType", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Functions/GetAbilityType.html", ["get", "ability", "type"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_function("GetUnlockRank", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Functions/GetUnlockRank.html", ["get", "unlock", "rank"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_function("GetCost", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Functions/GetCost.html", ["get", "cost"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_function("GetAbilityInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Functions/GetAbilityInfo.html", ["get", "ability", "info"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_function("SetAbilityInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Functions/SetAbilityInfo.html", ["set", "ability", "info"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("", "", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Variables/.html", [], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("", "Get the rank this ability unlocks at", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Variables/_1.html", [], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("", "How many skill points it takes to unlock this", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Variables/_2.html", [], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_variable("AbilityInfo", "Pointer to info struct for ability", "Docs/Structs/FCommanderAbilityTreeNodeSingleRa/Variables/AbilityInfo.html", ["ability", "info"], "FCommanderAbilityTreeNodeSingleRankInfo");
addToContainers_struct("FCommanderAbilityTreeNodeInfo", "A single node on the commander\'s (commander == player) skill tree", "Docs/Structs/FCommanderAbilityTreeNodeInfo/FCommanderAbilityTreeNodeInfo.html", ["commander", "ability", "tree", "node", "info"], "");
addToContainers_function("FCommanderAbilityTreeNodeInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/FCommanderAbilityTreeNodeInfo.html", ["commander", "ability", "tree", "node", "info"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("SetupInfo", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/SetupInfo.html", ["setup", "info"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetName", "@param AbilityIndex - index in Abilities", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetName.html", ["get", "name"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetNormalImage", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetNormalImage.html", ["get", "normal", "image"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetHoveredImage", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetHoveredImage.html", ["get", "hovered", "image"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetPressedImage", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetPressedImage.html", ["get", "pressed", "image"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetHoveredSound", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetHoveredSound.html", ["get", "hovered", "sound"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetPressedByLMBSound", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetPressedByLMBSound.html", ["get", "pressed", "by", "l", "m", "b", "sound"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetPressedByRMBSound", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetPressedByRMBSound.html", ["get", "pressed", "by", "r", "m", "b", "sound"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetDescription", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetDescription.html", ["get", "description"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetNodeType", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetNodeType.html", ["get", "node", "type"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("OnlyExecuteOnAquired", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/OnlyExecuteOnAquired.html", ["only", "execute", "on", "aquired"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("IsRankValid", "0 indexed", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/IsRankValid.html", ["is", "rank", "valid"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetAbilityInfo", "AbilityIndex is 0 indexed so 0 is the first rank", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetAbilityInfo.html", ["get", "ability", "info"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetPrerequisites", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetPrerequisites.html", ["get", "prerequisites"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetUnlockRank", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetUnlockRank.html", ["get", "unlock", "rank"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetCost", "", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetCost.html", ["get", "cost"], "FCommanderAbilityTreeNodeInfo");
addToContainers_function("GetNumRanks", "Get how many ranks of abilities are on this node", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Functions/GetNumRanks.html", ["get", "num", "ranks"], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "------------------------------------------------------------", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "If true then all abilities on this node are executed when they are aquired. Also they aren\'t added to the global skills panel and it is implied that they only have 1 use and no cooldown. A good example of a true here would be an ability that unlocks being able to build something e.g. in C&C generals: pathfinders, nuke cannons", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/_1.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "Prerequisite abilities: abilities that must be aquired before this one can be", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/_2.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_variable("", "The abilities. Add multiple entries for multiple ranks. Index 0 = 1st rank Index 1 = 2nd rank etc. If you want the ability to have multiple ranks then add multiple entries e.g. C&C generals china artillery strike. If you want each rank of an ability to be on seperate nodes then just add one entry to this array.", "Docs/Structs/FCommanderAbilityTreeNodeInfo/Variables/_3.html", [], "FCommanderAbilityTreeNodeInfo");
addToContainers_struct("FCommanderLevelUpInfo", "Info about what happens when the player reaches a rank", "Docs/Structs/FCommanderLevelUpInfo/FCommanderLevelUpInfo.html", ["commander", "level", "up", "info"], "");
addToContainers_function("FCommanderLevelUpInfo", "For a GET_MEMBER_NAME_CHECKED", "Docs/Structs/FCommanderLevelUpInfo/Functions/FCommanderLevelUpInfo.html", ["commander", "level", "up", "info"], "FCommanderLevelUpInfo");
addToContainers_function("GetSound", "", "Docs/Structs/FCommanderLevelUpInfo/Functions/GetSound.html", ["get", "sound"], "FCommanderLevelUpInfo");
addToContainers_function("GetSkillPointGain", "", "Docs/Structs/FCommanderLevelUpInfo/Functions/GetSkillPointGain.html", ["get", "skill", "point", "gain"], "FCommanderLevelUpInfo");
addToContainers_function("GetExperienceRequired", "", "Docs/Structs/FCommanderLevelUpInfo/Functions/GetExperienceRequired.html", ["get", "experience", "required"], "FCommanderLevelUpInfo");
addToContainers_function("GetCumulativeExperienceRequired", "", "Docs/Structs/FCommanderLevelUpInfo/Functions/GetCumulativeExperienceRequired.html", ["get", "cumulative", "experience", "required"], "FCommanderLevelUpInfo");
addToContainers_function("SetCumulativeExperienceRequired", "", "Docs/Structs/FCommanderLevelUpInfo/Functions/SetCumulativeExperienceRequired.html", ["set", "cumulative", "experience", "required"], "FCommanderLevelUpInfo");
addToContainers_variable("", "UI sound to play", "Docs/Structs/FCommanderLevelUpInfo/Variables/.html", [], "FCommanderLevelUpInfo");
addToContainers_variable("", "How many skill points the player gains for reaching this level", "Docs/Structs/FCommanderLevelUpInfo/Variables/_1.html", [], "FCommanderLevelUpInfo");
addToContainers_variable("", "How much experience is required to get to this level from the one below. Not cumulative", "Docs/Structs/FCommanderLevelUpInfo/Variables/_2.html", [], "FCommanderLevelUpInfo");
addToContainers_variable("", "How much experience is required to reach this level taking into account the amounts required to reach all the previous levels. This can be assigned its value in post edit", "Docs/Structs/FCommanderLevelUpInfo/Variables/_3.html", [], "FCommanderLevelUpInfo");
addToContainers_struct("FUnaquiredCommanderAbilityState", "", "Docs/Structs/FUnaquiredCommanderAbilityState/FUnaquiredCommanderAbilityState.html", ["unaquired", "commander", "ability", "state"], "");
addToContainers_function("FUnaquiredCommanderAbilityState", "Here so compile. Never use this", "Docs/Structs/FUnaquiredCommanderAbilityState/Functions/FUnaquiredCommanderAbilityState.html", ["unaquired", "commander", "ability", "state"], "FUnaquiredCommanderAbilityState");
addToContainers_function("FUnaquiredCommanderAbilityState", "Constructor to use", "Docs/Structs/FUnaquiredCommanderAbilityState/Functions/FUnaquiredCommanderAbilityState_1.html", ["unaquired", "commander", "ability", "state"], "FUnaquiredCommanderAbilityState");
addToContainers_function("OnAnotherAbilityAquired", "To update prerequisites", "Docs/Structs/FUnaquiredCommanderAbilityState/Functions/OnAnotherAbilityAquired.html", ["on", "another", "ability", "aquired"], "FUnaquiredCommanderAbilityState");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Structs/FUnaquiredCommanderAbilityState/Functions/ArePrerequisitesMet.html", ["are", "prerequisites", "met"], "FUnaquiredCommanderAbilityState");
addToContainers_variable("NodeInfo", "Pointer to the node info struct", "Docs/Structs/FUnaquiredCommanderAbilityState/Variables/NodeInfo.html", ["node", "info"], "FUnaquiredCommanderAbilityState");
addToContainers_variable("MissingPrerequisites", "Missing prerequisites", "Docs/Structs/FUnaquiredCommanderAbilityState/Variables/MissingPrerequisites.html", ["missing", "prerequisites"], "FUnaquiredCommanderAbilityState");
addToContainers_struct("FAquiredCommanderAbilityState", "", "Docs/Structs/FAquiredCommanderAbilityState/FAquiredCommanderAbilityState.html", ["aquired", "commander", "ability", "state"], "");
addToContainers_function("FAquiredCommanderAbilityState", "Do not use this ctor", "Docs/Structs/FAquiredCommanderAbilityState/Functions/FAquiredCommanderAbilityState.html", ["aquired", "commander", "ability", "state"], "FAquiredCommanderAbilityState");
addToContainers_function("FAquiredCommanderAbilityState", "This is the ctor you should use", "Docs/Structs/FAquiredCommanderAbilityState/Functions/FAquiredCommanderAbilityState_1.html", ["aquired", "commander", "ability", "state"], "FAquiredCommanderAbilityState");
addToContainers_function("GetAbilityInfo", "", "Docs/Structs/FAquiredCommanderAbilityState/Functions/GetAbilityInfo.html", ["get", "ability", "info"], "FAquiredCommanderAbilityState");
addToContainers_function("GetAquiredRank", "", "Docs/Structs/FAquiredCommanderAbilityState/Functions/GetAquiredRank.html", ["get", "aquired", "rank"], "FAquiredCommanderAbilityState");
addToContainers_function("OnAnotherRankAquired", "", "Docs/Structs/FAquiredCommanderAbilityState/Functions/OnAnotherRankAquired.html", ["on", "another", "rank", "aquired"], "FAquiredCommanderAbilityState");
addToContainers_function("GetCooldownRemaining", "", "Docs/Structs/FAquiredCommanderAbilityState/Functions/GetCooldownRemaining.html", ["get", "cooldown", "remaining"], "FAquiredCommanderAbilityState");
addToContainers_function("GetCooldownPercent", "Normalized in range 0 to 1. 0 means off cooldown, 1 means max cooldown remaining", "Docs/Structs/FAquiredCommanderAbilityState/Functions/GetCooldownPercent.html", ["get", "cooldown", "percent"], "FAquiredCommanderAbilityState");
addToContainers_function("GetNumTimesUsed", "", "Docs/Structs/FAquiredCommanderAbilityState/Functions/GetNumTimesUsed.html", ["get", "num", "times", "used"], "FAquiredCommanderAbilityState");
addToContainers_function("GetGlobalSkillsPanelButtonIndex", "", "Docs/Structs/FAquiredCommanderAbilityState/Functions/GetGlobalSkillsPanelButtonIndex.html", ["get", "global", "skills", "panel", "button", "index"], "FAquiredCommanderAbilityState");
addToContainers_function("SetGlobalSkillsPanelButtonIndex", "", "Docs/Structs/FAquiredCommanderAbilityState/Functions/SetGlobalSkillsPanelButtonIndex.html", ["set", "global", "skills", "panel", "button", "index"], "FAquiredCommanderAbilityState");
addToContainers_function("OnAbilityUsed", "@param AbilityInstigator - the player that used the ability @param ThisAbilityInfo - this will AbilityInfo. It\'s probably better performance to use this param instead.", "Docs/Structs/FAquiredCommanderAbilityState/Functions/OnAbilityUsed.html", ["on", "ability", "used"], "FAquiredCommanderAbilityState");
addToContainers_variable("AbilityInfo", "Pointer to info struct this struct is for", "Docs/Structs/FAquiredCommanderAbilityState/Variables/AbilityInfo.html", ["ability", "info"], "FAquiredCommanderAbilityState");
addToContainers_variable("TimerHandle_CooldownRemaining", "", "Docs/Structs/FAquiredCommanderAbilityState/Variables/TimerHandle_CooldownRemaining.html", ["timer", "handle_", "cooldown", "remaining"], "FAquiredCommanderAbilityState");
addToContainers_variable("RankAquired", "To what rank the ability has been aquired. 0 indexed so a value of 0 means rank 1.", "Docs/Structs/FAquiredCommanderAbilityState/Variables/RankAquired.html", ["rank", "aquired"], "FAquiredCommanderAbilityState");
addToContainers_variable("NumTimesUsed", "Number of times the ability has been used for the current aquired rank of the ability only", "Docs/Structs/FAquiredCommanderAbilityState/Variables/NumTimesUsed.html", ["num", "times", "used"], "FAquiredCommanderAbilityState");
addToContainers_variable("GlobalSkillsPanelButtonIndex", "Where on the global skills panel widget this ability is", "Docs/Structs/FAquiredCommanderAbilityState/Variables/GlobalSkillsPanelButtonIndex.html", ["global", "skills", "panel", "button", "index"], "FAquiredCommanderAbilityState");
addToContainers_struct("FBuildingTargetingAbilityStaticInfo", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/FBuildingTargetingAbilityStaticIn.html", ["building", "targeting", "ability", "static", "info"], "");
addToContainers_function("FBuildingTargetingAbilityStaticInfo", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/FBuildingTargetingAbilityStaticIn.html", ["building", "targeting", "ability", "static", "info"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("InitialSetup", "Do initial setup @param InType - the type of ability this struct holds info for", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/InitialSetup.html", ["initial", "setup"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("SetupMouseCursors", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/SetupMouseCursors.html", ["setup", "mouse", "cursors"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("GetAbilityType", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/GetAbilityType.html", ["get", "ability", "type"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("GetEffectObject", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/GetEffectObject.html", ["get", "effect", "object"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("GetAcceptableTargetMouseCursor", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/GetAcceptableTargetMouseCursor.html", ["get", "acceptable", "target", "mouse", "cursor"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("HasUnlimitedRange", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/HasUnlimitedRange.html", ["has", "unlimited", "range"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("GetRange", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/GetRange.html", ["get", "range"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("HasAnimation", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/HasAnimation.html", ["has", "animation"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("GetAnimation", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/GetAnimation.html", ["get", "animation"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_function("ConsumesInstigator", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Functions/ConsumesInstigator.html", ["consumes", "instigator"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/_1.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Mouse cursor to use when the player hovers the mouse over a building which is an acceptable target for the ability.", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/_2.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("AcceptableTargetMouseCursor_Info", "", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/AcceptableTargetMouseCursor_Info.html", ["acceptable", "target", "mouse", "cursor_", "info"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Range of the ability. 0 = unlimited", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/_3.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("AbilityType", "Type of ability this struct holds info for", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/AbilityType.html", ["ability", "type"], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Whether to use an animation", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/_4.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "Animation to play", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/_5.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_variable("", "If true then the instigator is \'consumed\' the moment the ability is used Examples of true: - C&C engineers - C&C spies Examples of false: - C&C commando putting bombs on buildings", "Docs/Structs/FBuildingTargetingAbilityStaticIn/Variables/_6.html", [], "FBuildingTargetingAbilityStaticInfo");
addToContainers_struct("FBuildingTargetingAbilityPerSelectableInfo", "Info struct for an ability that is used against buildings only", "Docs/Structs/FBuildingTargetingAbilityPerSelec/FBuildingTargetingAbilityPerSelec.html", ["building", "targeting", "ability", "per", "selectable", "info"], "");
addToContainers_function("FBuildingTargetingAbilityPerSelectableInfo", "", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Functions/FBuildingTargetingAbilityPerSelec.html", ["building", "targeting", "ability", "per", "selectable", "info"], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_function("GetAbilityType", "", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Functions/GetAbilityType.html", ["get", "ability", "type"], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_function("GetAcceptableTargetMouseCursor", "", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Functions/GetAcceptableTargetMouseCursor.html", ["get", "acceptable", "target", "mouse", "cursor"], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_function("IsAffiliationTargetable", "Return true if the buildings affiliation is an acceptable type for this ability", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Functions/IsAffiliationTargetable.html", ["is", "affiliation", "targetable"], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Variables/.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable(":", "If true the ability is usable against buildings that are owned by the player. Note the building\'s type must also be acceptable too for the ability to be usable", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Variables/:.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable(":", "If true the ability is usable against buildings that are owned by allies Note the building\'s type must also be acceptable too for the ability to be usable", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Variables/:_1.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_variable(":", "If true the ability is usable against buildings that are owned by enemies. Note the building\'s type must also be acceptable too for the ability to be usable", "Docs/Structs/FBuildingTargetingAbilityPerSelec/Variables/:_2.html", [], "FBuildingTargetingAbilityPerSelectableInfo");
addToContainers_struct("FBuildingTargetingAbilitiesAttributes", "Attributes for abilities that target buildings", "Docs/Structs/FBuildingTargetingAbilitiesAttrib/FBuildingTargetingAbilitiesAttrib.html", ["building", "targeting", "abilities", "attributes"], "");
addToContainers_function("GetAbilityInfo", "Will return null if there is no ability that can target the building", "Docs/Structs/FBuildingTargetingAbilitiesAttrib/Functions/GetAbilityInfo.html", ["get", "ability", "info"], "FBuildingTargetingAbilitiesAttributes");
addToContainers_variable("", "Abilities to be used against buildings if the player right-clicked on it e.g. in C&C engineers capture buildings, spies let you see what is being produced, etc. If you want the ability to be usable against ALL buildings then set building type for the key to NotBuilding, although I think I haven\'t exposed that enum value to editor so I should probably do that simple as pie TODO", "Docs/Structs/FBuildingTargetingAbilitiesAttrib/Variables/.html", [], "FBuildingTargetingAbilitiesAttributes");
addToContainers_struct("FProductionQueue", "A queue that produces buildings/units/upgrades. Found on buildings mostly but there is also one the player state. A single queue cannot produce in parallel. My implementation of queues: Production orders come in 3 types: build building, train unit and research upgrade. Queues come in 2 types: - A \"persistent\" queue which is used only for building buildings when clicking on a button in the HUD persistent panel (like in C&C). However if clicking a unit/upgrade in the HUD persistent panel then the production will be put into a \"context\" queue (described below). - A \"context\" queue which handles every other case. This includes producing units/upgrades from the HUD persistent panel, or producing anything by clicking on the building and pressing a button on its context menu. Buildings have one of each queue type. This means you can have a construction yard type building that will construct buildings in its \"persistent\" queue while at the same time it is possible to click on that construction yard building and build units/upgrades/buildings (buildings is kind of unexpected behavior here but can be done) in its \"context\" queue. Or you can produce units/upgrades from it by clicking a unit/upgrade button in the HUD persistent panel. So you can have a construction yard that constructs a building while at the same time trains a unit or researches an upgrade.", "Docs/Structs/FProductionQueue/FProductionQueue.html", ["production", "queue"], "");
addToContainers_function("FProductionQueue", "", "Docs/Structs/FProductionQueue/Functions/FProductionQueue.html", ["production", "queue"], "FProductionQueue");
addToContainers_function("SetupForHumanOwner", "Setup some values critical for the queue to function", "Docs/Structs/FProductionQueue/Functions/SetupForHumanOwner.html", ["setup", "for", "human", "owner"], "FProductionQueue");
addToContainers_function("SetupForCPUOwner", "Constructor for queues that belong to CPU players", "Docs/Structs/FProductionQueue/Functions/SetupForCPUOwner.html", ["setup", "for", "c", "p", "u", "owner"], "FProductionQueue");
addToContainers_function("HasRoom", "Return true if the queue has room for more @param bShowHUDWarning - if return false, whether to try and show a message on the HUD @return - true if the queue has room for another item", "Docs/Structs/FProductionQueue/Functions/HasRoom.html", ["has", "room"], "FProductionQueue");
addToContainers_function("GetCapacity", "Get the max number of items that can be in the queue at once", "Docs/Structs/FProductionQueue/Functions/GetCapacity.html", ["get", "capacity"], "FProductionQueue");
addToContainers_function("Peek", "Get training info at front of queue. Assumes there is at least one item in queue", "Docs/Structs/FProductionQueue/Functions/Peek.html", [], "FProductionQueue");
addToContainers_function("Client_OnProductionComplete", "To adjust timer handle for visuals only", "Docs/Structs/FProductionQueue/Functions/Client_OnProductionComplete.html", ["client_", "on", "production", "complete"], "FProductionQueue");
addToContainers_function("AddToQueue", "Add to back of queue", "Docs/Structs/FProductionQueue/Functions/AddToQueue.html", ["add", "to", "queue"], "FProductionQueue");
addToContainers_function("SetBuildingBeingProduced", "Set BuildingBeingProduced - the building that we are producing using this queue. The building will have the build method BuildsItself", "Docs/Structs/FProductionQueue/Functions/SetBuildingBeingProduced.html", ["set", "building", "being", "produced"], "FProductionQueue");
addToContainers_function("GetTimerHandle", "Get timer handle for front of queue", "Docs/Structs/FProductionQueue/Functions/GetTimerHandle.html", ["get", "timer", "handle"], "FProductionQueue");
addToContainers_function("GetTimerHandle", "", "Docs/Structs/FProductionQueue/Functions/GetTimerHandle_1.html", ["get", "timer", "handle"], "FProductionQueue");
addToContainers_function("GetPercentageCompleteForUI", "Get the value to display on HUD for progress of production", "Docs/Structs/FProductionQueue/Functions/GetPercentageCompleteForUI.html", ["get", "percentage", "complete", "for", "u", "i"], "FProductionQueue");
addToContainers_function("GetUnitAtFront", "Get the unit at the front of the queue. This assumes that it is indeed a unit at the front and not something like a building or upgrade", "Docs/Structs/FProductionQueue/Functions/GetUnitAtFront.html", ["get", "unit", "at", "front"], "FProductionQueue");
addToContainers_function("GetBuildingBeingProduced", "Possibly only useful if on server", "Docs/Structs/FProductionQueue/Functions/GetBuildingBeingProduced.html", ["get", "building", "being", "produced"], "FProductionQueue");
addToContainers_function("Num", "Get how many items are in the queue", "Docs/Structs/FProductionQueue/Functions/Num.html", [], "FProductionQueue");
addToContainers_function("Pop", "", "Docs/Structs/FProductionQueue/Functions/Pop.html", [], "FProductionQueue");
addToContainers_function("Insert", "", "Docs/Structs/FProductionQueue/Functions/Insert.html", [], "FProductionQueue");
addToContainers_function("operator[]", "", "Docs/Structs/FProductionQueue/Functions/operator[].html", [], "FProductionQueue");
addToContainers_function("SetHasCompletedEarly", "Call on remote client only", "Docs/Structs/FProductionQueue/Functions/SetHasCompletedEarly.html", ["set", "has", "completed", "early"], "FProductionQueue");
addToContainers_function("SetHasCompletedBuildsInTab", "", "Docs/Structs/FProductionQueue/Functions/SetHasCompletedBuildsInTab.html", ["set", "has", "completed", "builds", "in", "tab"], "FProductionQueue");
addToContainers_function("HasCompletedBuildsInTab", "Whether the queue has finished BuildsInTab production", "Docs/Structs/FProductionQueue/Functions/HasCompletedBuildsInTab.html", ["has", "completed", "builds", "in", "tab"], "FProductionQueue");
addToContainers_function("OnBuildsInTabBuildingPlaced", "Call when player places building from front into world that was built using BuildsInTab", "Docs/Structs/FProductionQueue/Functions/OnBuildsInTabBuildingPlaced.html", ["on", "builds", "in", "tab", "building", "placed"], "FProductionQueue");
addToContainers_function("GetType", "", "Docs/Structs/FProductionQueue/Functions/GetType.html", ["get", "type"], "FProductionQueue");
addToContainers_function("Server_CancelProductionOfFrontItem", "Not implemented", "Docs/Structs/FProductionQueue/Functions/Server_CancelProductionOfFrontIte.html", ["server_", "cancel", "production", "of", "front", "item"], "FProductionQueue");
addToContainers_function("OnPostEdit", "@param NewMax - the new size limit of queue", "Docs/Structs/FProductionQueue/Functions/OnPostEdit.html", ["on", "post", "edit"], "FProductionQueue");
addToContainers_function("AICon_Num", "Return whether queue has enough room", "Docs/Structs/FProductionQueue/Functions/AICon_Num.html", ["i", "con_", "num"], "FProductionQueue");
addToContainers_function("AICon_Pop", "", "Docs/Structs/FProductionQueue/Functions/AICon_Pop.html", ["i", "con_", "pop"], "FProductionQueue");
addToContainers_function("AICon_HasRoom", "", "Docs/Structs/FProductionQueue/Functions/AICon_HasRoom.html", ["i", "con_", "has", "room"], "FProductionQueue");
addToContainers_function("AICon_Insert", "", "Docs/Structs/FProductionQueue/Functions/AICon_Insert.html", ["i", "con_", "insert"], "FProductionQueue");
addToContainers_function("AICon_Last", "", "Docs/Structs/FProductionQueue/Functions/AICon_Last.html", ["i", "con_", "last"], "FProductionQueue");
addToContainers_function("AICon_BracketOperator", "Brack operator for AICon_Queue", "Docs/Structs/FProductionQueue/Functions/AICon_BracketOperator.html", ["i", "con_", "bracket", "operator"], "FProductionQueue");
addToContainers_variable("", "Reversed queue of units being built. Last element is the front of queue. Could use std::deque. Some performance figures: - Add unit to queue: O(n) - Remove from front of queue when production complete: O(1) - Remove from middle when cancel training: O(n)", "Docs/Structs/FProductionQueue/Variables/.html", [], "FProductionQueue");
addToContainers_variable("", "This is the queue used by CPU player AI controllers", "Docs/Structs/FProductionQueue/Variables/_1.html", [], "FProductionQueue");
addToContainers_variable("", "Whether this is a HUD persistent queue or a context menu queue. Persistent queues will only be used for building buildings from the HUD persistent panel, similar to a construction yard in C&C. Persistent panel commands to produce units or upgrades will go to the context queue", "Docs/Structs/FProductionQueue/Variables/_2.html", [], "FProductionQueue");
addToContainers_variable("", "The max number of items in the queue at once", "Docs/Structs/FProductionQueue/Variables/_3.html", [], "FProductionQueue");
addToContainers_variable("", "Timer handle to track progress of front of queue", "Docs/Structs/FProductionQueue/Variables/_4.html", [], "FProductionQueue");
addToContainers_variable("", "For remote clients only. If their timer handle completes before the server\'s completes then record this so UI will show 100% while we wait for the server confirmation", "Docs/Structs/FProductionQueue/Variables/_5.html", [], "FProductionQueue");
addToContainers_variable("", "True if the item at the front of the queue is for a building, its build method is BuildsInTab and it has completed production and is therefore ready to be placed in world", "Docs/Structs/FProductionQueue/Variables/_6.html", [], "FProductionQueue");
addToContainers_variable("", "If this queue is producing a building using the BuildsItself build method the build it is producing. Currently I only use this for CPU players but it will probably need to be used for human players too. Also this is a persistent queue only variable and is one more reason to make seperate context and persistent queue structs. This is possibly only maintained server-side", "Docs/Structs/FProductionQueue/Variables/_7.html", [], "FProductionQueue");
addToContainers_struct("FContextMenuButtons", "Holds what buttons a context menu has", "Docs/Structs/FContextMenuButtons/FContextMenuButtons.html", ["context", "menu", "buttons"], "");
addToContainers_function("HasButton", "Return true if Buttons contains param", "Docs/Structs/FContextMenuButtons/Functions/HasButton.html", ["has", "button"], "FContextMenuButtons");
addToContainers_function("GetButtons", "Trivial getters and setters", "Docs/Structs/FContextMenuButtons/Functions/GetButtons.html", ["get", "buttons"], "FContextMenuButtons");
addToContainers_function("GetButtons", "", "Docs/Structs/FContextMenuButtons/Functions/GetButtons_1.html", ["get", "buttons"], "FContextMenuButtons");
addToContainers_function("GetButtonsArray", "", "Docs/Structs/FContextMenuButtons/Functions/GetButtonsArray.html", ["get", "buttons", "array"], "FContextMenuButtons");
addToContainers_function("GetButtonsArray", "", "Docs/Structs/FContextMenuButtons/Functions/GetButtonsArray_1.html", ["get", "buttons", "array"], "FContextMenuButtons");
addToContainers_variable("", "Put context buttons in here", "Docs/Structs/FContextMenuButtons/Variables/.html", [], "FContextMenuButtons");
addToContainers_variable("", "Array of buttons for HUD ordering purposes", "Docs/Structs/FContextMenuButtons/Variables/_1.html", [], "FContextMenuButtons");
addToContainers_struct("FDisplayInfoBase", "Struct that is used for info on buildings, units and upgrades. Contains base data needed to display info on the HUD. FBuildInfo and FUpgradeInfo derive from it", "Docs/Structs/FDisplayInfoBase/FDisplayInfoBase.html", ["display", "info", "base"], "");
addToContainers_function("FDisplayInfoBase", "", "Docs/Structs/FDisplayInfoBase/Functions/FDisplayInfoBase.html", ["display", "info", "base"], "FDisplayInfoBase");
addToContainers_function("", "", "Docs/Structs/FDisplayInfoBase/Functions/.html", [], "FDisplayInfoBase");
addToContainers_function("GetCosts", "", "Docs/Structs/FDisplayInfoBase/Functions/GetCosts.html", ["get", "costs"], "FDisplayInfoBase");
addToContainers_function("GetTrainTime", "", "Docs/Structs/FDisplayInfoBase/Functions/GetTrainTime.html", ["get", "train", "time"], "FDisplayInfoBase");
addToContainers_function("GetPrerequisites", "", "Docs/Structs/FDisplayInfoBase/Functions/GetPrerequisites.html", ["get", "prerequisites"], "FDisplayInfoBase");
addToContainers_function("GetUpgradePrerequisites", "", "Docs/Structs/FDisplayInfoBase/Functions/GetUpgradePrerequisites.html", ["get", "upgrade", "prerequisites"], "FDisplayInfoBase");
addToContainers_function("GetPrerequisitesText", "", "Docs/Structs/FDisplayInfoBase/Functions/GetPrerequisitesText.html", ["get", "prerequisites", "text"], "FDisplayInfoBase");
addToContainers_function("GetName", "", "Docs/Structs/FDisplayInfoBase/Functions/GetName.html", ["get", "name"], "FDisplayInfoBase");
addToContainers_function("GetHUDImage", "", "Docs/Structs/FDisplayInfoBase/Functions/GetHUDImage.html", ["get", "h", "u", "d", "image"], "FDisplayInfoBase");
addToContainers_function("GetHoveredHUDImage", "", "Docs/Structs/FDisplayInfoBase/Functions/GetHoveredHUDImage.html", ["get", "hovered", "h", "u", "d", "image"], "FDisplayInfoBase");
addToContainers_function("GetPressedHUDImage", "", "Docs/Structs/FDisplayInfoBase/Functions/GetPressedHUDImage.html", ["get", "pressed", "h", "u", "d", "image"], "FDisplayInfoBase");
addToContainers_function("GetHoveredButtonSound", "", "Docs/Structs/FDisplayInfoBase/Functions/GetHoveredButtonSound.html", ["get", "hovered", "button", "sound"], "FDisplayInfoBase");
addToContainers_function("GetPressedByLMBSound", "", "Docs/Structs/FDisplayInfoBase/Functions/GetPressedByLMBSound.html", ["get", "pressed", "by", "l", "m", "b", "sound"], "FDisplayInfoBase");
addToContainers_function("GetPressedByRMBSound", "", "Docs/Structs/FDisplayInfoBase/Functions/GetPressedByRMBSound.html", ["get", "pressed", "by", "r", "m", "b", "sound"], "FDisplayInfoBase");
addToContainers_function("GetDescription", "", "Docs/Structs/FDisplayInfoBase/Functions/GetDescription.html", ["get", "description"], "FDisplayInfoBase");
addToContainers_function("GetJustBuiltSound", "", "Docs/Structs/FDisplayInfoBase/Functions/GetJustBuiltSound.html", ["get", "just", "built", "sound"], "FDisplayInfoBase");
addToContainers_function("GetHUDPersistentTabCategory", "", "Docs/Structs/FDisplayInfoBase/Functions/GetHUDPersistentTabCategory.html", ["get", "h", "u", "d", "persistent", "tab", "category"], "FDisplayInfoBase");
addToContainers_function("GetHUDPersistentTabOrdering", "", "Docs/Structs/FDisplayInfoBase/Functions/GetHUDPersistentTabOrdering.html", ["get", "h", "u", "d", "persistent", "tab", "ordering"], "FDisplayInfoBase");
addToContainers_function("GetContextMenu", "", "Docs/Structs/FDisplayInfoBase/Functions/GetContextMenu.html", ["get", "context", "menu"], "FDisplayInfoBase");
addToContainers_function("SetupCostsArray", "", "Docs/Structs/FDisplayInfoBase/Functions/SetupCostsArray.html", ["setup", "costs", "array"], "FDisplayInfoBase");
addToContainers_function("SetTrainTime", "", "Docs/Structs/FDisplayInfoBase/Functions/SetTrainTime.html", ["set", "train", "time"], "FDisplayInfoBase");
addToContainers_function("SetPrerequisites", "", "Docs/Structs/FDisplayInfoBase/Functions/SetPrerequisites.html", ["set", "prerequisites"], "FDisplayInfoBase");
addToContainers_function("SetName", "", "Docs/Structs/FDisplayInfoBase/Functions/SetName.html", ["set", "name"], "FDisplayInfoBase");
addToContainers_function("SetHUDImage", "", "Docs/Structs/FDisplayInfoBase/Functions/SetHUDImage.html", ["set", "h", "u", "d", "image"], "FDisplayInfoBase");
addToContainers_function("SetHUDHoveredImage", "", "Docs/Structs/FDisplayInfoBase/Functions/SetHUDHoveredImage.html", ["set", "h", "u", "d", "hovered", "image"], "FDisplayInfoBase");
addToContainers_function("SetHUDPressedImage", "", "Docs/Structs/FDisplayInfoBase/Functions/SetHUDPressedImage.html", ["set", "h", "u", "d", "pressed", "image"], "FDisplayInfoBase");
addToContainers_function("SetDescription", "", "Docs/Structs/FDisplayInfoBase/Functions/SetDescription.html", ["set", "description"], "FDisplayInfoBase");
addToContainers_function("SetJustBuiltSound", "", "Docs/Structs/FDisplayInfoBase/Functions/SetJustBuiltSound.html", ["set", "just", "built", "sound"], "FDisplayInfoBase");
addToContainers_function("SetHUDPersistentTabType", "", "Docs/Structs/FDisplayInfoBase/Functions/SetHUDPersistentTabType.html", ["set", "h", "u", "d", "persistent", "tab", "type"], "FDisplayInfoBase");
addToContainers_function("SetHUDPersistentTabOrdering", "", "Docs/Structs/FDisplayInfoBase/Functions/SetHUDPersistentTabOrdering.html", ["set", "h", "u", "d", "persistent", "tab", "ordering"], "FDisplayInfoBase");
addToContainers_function("SetContextMenu", "", "Docs/Structs/FDisplayInfoBase/Functions/SetContextMenu.html", ["set", "context", "menu"], "FDisplayInfoBase");
addToContainers_function("CreatePrerequisitesText", "From the prerequisites array creates a text version of it", "Docs/Structs/FDisplayInfoBase/Functions/CreatePrerequisitesText.html", ["create", "prerequisites", "text"], "FDisplayInfoBase");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FDisplayInfoBase/Functions/OnPostEdit.html", ["on", "post", "edit"], "FDisplayInfoBase");
addToContainers_variable("", "Name to appear on HUDs", "Docs/Structs/FDisplayInfoBase/Variables/.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Image to appear on HUD", "Docs/Structs/FDisplayInfoBase/Variables/_1.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Image when a button for this is hovered. This will be ignored if you use a unified image as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_2.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Image when a button for this is pressed. This will be ignored if you use a unified image as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_3.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound for when a UI button for this is hovered. This will be ignored if you choose to use a unified sound as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_4.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound for when a UI button for this is pressed with left mouse button. This will be ignored if you choose to use a unified sound as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_5.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound for when a UI button for this is pressed with right mouse button. This will be ignored if you choose to use a unified sound as set in GI", "Docs/Structs/FDisplayInfoBase/Variables/_6.html", [], "FDisplayInfoBase");
addToContainers_variable("", "A description of this", "Docs/Structs/FDisplayInfoBase/Variables/_7.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Sound to try and play when just built", "Docs/Structs/FDisplayInfoBase/Variables/_8.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Cost to build/train. Use function ResourceTypeToArrayIndex to get correct index for a resource type", "Docs/Structs/FDisplayInfoBase/Variables/_9.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Time to build/train/research", "Docs/Structs/FDisplayInfoBase/Variables/_10.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Prerequisite buildings that must be built before this can be researched. Adding duplicates of the same building will have no additional effect. You do not need to add the building that builds/trains/researches this.", "Docs/Structs/FDisplayInfoBase/Variables/_11.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Upgrades that must be researched before this can be built/trained/researched. No point adding duplicates. My notes: TODO add duplicate protection for this array in post edit by removing them. Actually I think I need to add protection for the buildings prereqs array too.", "Docs/Structs/FDisplayInfoBase/Variables/_12.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Text of prerequisites so it can be shown on the HUD", "Docs/Structs/FDisplayInfoBase/Variables/_13.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Tab type if using a persistent HUD panel like C&C", "Docs/Structs/FDisplayInfoBase/Variables/_14.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Ordering number for tab is using a persistent HUD panel like C&C", "Docs/Structs/FDisplayInfoBase/Variables/_15.html", [], "FDisplayInfoBase");
addToContainers_variable("", "Context menu if this is for a selectable", "Docs/Structs/FDisplayInfoBase/Variables/_16.html", [], "FDisplayInfoBase");
addToContainers_struct("FUpgradeInfo", "Info for upgrades. They only affect selectables you control. You can affect types of units/buildings and/or damage and armour types", "Docs/Structs/FUpgradeInfo/FUpgradeInfo.html", ["upgrade", "info"], "");
addToContainers_function("FUpgradeInfo", "", "Docs/Structs/FUpgradeInfo/Functions/FUpgradeInfo.html", ["upgrade", "info"], "FUpgradeInfo");
addToContainers_function("", "", "Docs/Structs/FUpgradeInfo/Functions/.html", [], "FUpgradeInfo");
addToContainers_function("AffectsUnitType", "Does this upgrade affect a certain unit type?", "Docs/Structs/FUpgradeInfo/Functions/AffectsUnitType.html", ["affects", "unit", "type"], "FUpgradeInfo");
addToContainers_function("AffectsBuildingType", "Does this upgrade affect a certain building type?", "Docs/Structs/FUpgradeInfo/Functions/AffectsBuildingType.html", ["affects", "building", "type"], "FUpgradeInfo");
addToContainers_function("AddTechTreeParent", "Add an entry to TechTreeParents @param BuildingType - the type of building that can research this upgrade", "Docs/Structs/FUpgradeInfo/Functions/AddTechTreeParent.html", ["add", "tech", "tree", "parent"], "FUpgradeInfo");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FUpgradeInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FUpgradeInfo");
addToContainers_function("AffectsAllUnits", "Getters and setters", "Docs/Structs/FUpgradeInfo/Functions/AffectsAllUnits.html", ["affects", "all", "units"], "FUpgradeInfo");
addToContainers_function("AffectsAllBuildings", "", "Docs/Structs/FUpgradeInfo/Functions/AffectsAllBuildings.html", ["affects", "all", "buildings"], "FUpgradeInfo");
addToContainers_function("GetUnitTypesAffected", "", "Docs/Structs/FUpgradeInfo/Functions/GetUnitTypesAffected.html", ["get", "unit", "types", "affected"], "FUpgradeInfo");
addToContainers_function("GetBuildingTypesAffected", "", "Docs/Structs/FUpgradeInfo/Functions/GetBuildingTypesAffected.html", ["get", "building", "types", "affected"], "FUpgradeInfo");
addToContainers_function("GetEffectBP", "", "Docs/Structs/FUpgradeInfo/Functions/GetEffectBP.html", ["get", "effect", "b", "p"], "FUpgradeInfo");
addToContainers_function("Random_GetTechTreeParent", "Return a random building that can build this. Returns EBuildingType::NotBuilding if no building can research this upgrade", "Docs/Structs/FUpgradeInfo/Functions/Random_GetTechTreeParent.html", ["random_", "get", "tech", "tree", "parent"], "FUpgradeInfo");
addToContainers_variable("", "How much this upgrade costs. Any resource types without entries implies 0", "Docs/Structs/FUpgradeInfo/Variables/.html", [], "FUpgradeInfo");
addToContainers_variable("", "If true this upgrade is applied to all units under your control. If false you can specify which types are affected", "Docs/Structs/FUpgradeInfo/Variables/_1.html", [], "FUpgradeInfo");
addToContainers_variable("", "If true this upgrade is applied to all buildings under your control. If false you can specify which types are affected", "Docs/Structs/FUpgradeInfo/Variables/_2.html", [], "FUpgradeInfo");
addToContainers_variable("", "If bAffectsAllUnitTypes is false, the unit types affected by this upgrade", "Docs/Structs/FUpgradeInfo/Variables/_3.html", [], "FUpgradeInfo");
addToContainers_variable("", "If bAffectsAllBuildingTypes is false, the building types affected by this upgrade", "Docs/Structs/FUpgradeInfo/Variables/_4.html", [], "FUpgradeInfo");
addToContainers_variable("", "Effect of upgrade. This decides what the upgrade does to those affected by it. You can leave this null to let the upgrade have no effect (but perhaps you just had the upgrade as a prerequisite for something so there was still a point in obtaining it). See UpgradeEffect.h for info on how to implement these", "Docs/Structs/FUpgradeInfo/Variables/_5.html", [], "FUpgradeInfo");
addToContainers_variable("", "Array of which buildings can research this upgrade", "Docs/Structs/FUpgradeInfo/Variables/_6.html", [], "FUpgradeInfo");
addToContainers_variable("", "Field for toggling visibility of other fields in editor", "Docs/Structs/FUpgradeInfo/Variables/_7.html", [], "FUpgradeInfo");
addToContainers_variable("", "", "Docs/Structs/FUpgradeInfo/Variables/_8.html", [], "FUpgradeInfo");
addToContainers_struct("FBuildInfo", "Base for selectables info", "Docs/Structs/FBuildInfo/FBuildInfo.html", ["build", "info"], "");
addToContainers_function("GetSelectableBP", "", "Docs/Structs/FBuildInfo/Functions/GetSelectableBP.html", ["get", "selectable", "b", "p"], "FBuildInfo");
addToContainers_function("GetSelectableType", "", "Docs/Structs/FBuildInfo/Functions/GetSelectableType.html", ["get", "selectable", "type"], "FBuildInfo");
addToContainers_function("GetBuildingType", "", "Docs/Structs/FBuildInfo/Functions/GetBuildingType.html", ["get", "building", "type"], "FBuildInfo");
addToContainers_function("GetUnitType", "", "Docs/Structs/FBuildInfo/Functions/GetUnitType.html", ["get", "unit", "type"], "FBuildInfo");
addToContainers_function("AnnounceToAllWhenBuilt", "", "Docs/Structs/FBuildInfo/Functions/AnnounceToAllWhenBuilt.html", ["announce", "to", "all", "when", "built"], "FBuildInfo");
addToContainers_function("ConstructBuildButton", "Get the button that would build this. Should be called after everything has been setup", "Docs/Structs/FBuildInfo/Functions/ConstructBuildButton.html", ["construct", "build", "button"], "FBuildInfo");
addToContainers_function("SetSelectableBP", "", "Docs/Structs/FBuildInfo/Functions/SetSelectableBP.html", ["set", "selectable", "b", "p"], "FBuildInfo");
addToContainers_function("SetBuildingType", "", "Docs/Structs/FBuildInfo/Functions/SetBuildingType.html", ["set", "building", "type"], "FBuildInfo");
addToContainers_function("SetUnitType", "", "Docs/Structs/FBuildInfo/Functions/SetUnitType.html", ["set", "unit", "type"], "FBuildInfo");
addToContainers_function("SetSelectableType", "", "Docs/Structs/FBuildInfo/Functions/SetSelectableType.html", ["set", "selectable", "type"], "FBuildInfo");
addToContainers_function("SetAnnounceToAllWhenBuilt", "", "Docs/Structs/FBuildInfo/Functions/SetAnnounceToAllWhenBuilt.html", ["set", "announce", "to", "all", "when", "built"], "FBuildInfo");
addToContainers_variable("", "Reference to blueprint to spawn selectable this is for", "Docs/Structs/FBuildInfo/Variables/.html", [], "FBuildInfo");
addToContainers_variable("", "Type of selectable this struct holds data for", "Docs/Structs/FBuildInfo/Variables/_1.html", [], "FBuildInfo");
addToContainers_variable("", "The type of building this struct is for. Should be set to NotBuilding if not for a building", "Docs/Structs/FBuildInfo/Variables/_2.html", [], "FBuildInfo");
addToContainers_variable("", "The type of unit this struct is for. Should be set to NotUnit if not for a unit", "Docs/Structs/FBuildInfo/Variables/_3.html", [], "FBuildInfo");
addToContainers_variable("", "Whether to announce to all players when built", "Docs/Structs/FBuildInfo/Variables/_4.html", [], "FBuildInfo");
addToContainers_variable("Info2)", "For sorting. Just sorts on EBuildingType or EUnitType but does some checks to make sure the selectable type is the same", "Docs/Structs/FBuildInfo/Variables/Info2).html", [], "FBuildInfo");
addToContainers_struct("FBuildingInfo", "Struct to store info necessary to spawn buildings.", "Docs/Structs/FBuildingInfo/FBuildingInfo.html", ["building", "info"], "");
addToContainers_function("FBuildingInfo", "", "Docs/Structs/FBuildingInfo/Functions/FBuildingInfo.html", ["building", "info"], "FBuildingInfo");
addToContainers_function("AddTechTreeParent", "", "Docs/Structs/FBuildingInfo/Functions/AddTechTreeParent.html", ["add", "tech", "tree", "parent"], "FBuildingInfo");
addToContainers_function("AddTechTreeParent", "", "Docs/Structs/FBuildingInfo/Functions/AddTechTreeParent_1.html", ["add", "tech", "tree", "parent"], "FBuildingInfo");
addToContainers_function("IsAConstructionYardType", "True if persistent queue\'s capacity is at least 1", "Docs/Structs/FBuildingInfo/Functions/IsAConstructionYardType.html", ["is", "a", "construction", "yard", "type"], "FBuildingInfo");
addToContainers_function("IsABarracksType", "True if can train at least one unit that is an army type unit", "Docs/Structs/FBuildingInfo/Functions/IsABarracksType.html", ["is", "a", "barracks", "type"], "FBuildingInfo");
addToContainers_function("IsABaseDefenseType", "", "Docs/Structs/FBuildingInfo/Functions/IsABaseDefenseType.html", ["is", "a", "base", "defense", "type"], "FBuildingInfo");
addToContainers_function("GetHighlightedHUDImage", "Getters and setters", "Docs/Structs/FBuildingInfo/Functions/GetHighlightedHUDImage.html", ["get", "highlighted", "h", "u", "d", "image"], "FBuildingInfo");
addToContainers_function("GetGhostBuildingBP", "", "Docs/Structs/FBuildingInfo/Functions/GetGhostBuildingBP.html", ["get", "ghost", "building", "b", "p"], "FBuildingInfo");
addToContainers_function("GetBoundsHeight", "", "Docs/Structs/FBuildingInfo/Functions/GetBoundsHeight.html", ["get", "bounds", "height"], "FBuildingInfo");
addToContainers_function("GetScaledBoundsExtent", "This is for figuring out what collides with ghost when placing it", "Docs/Structs/FBuildingInfo/Functions/GetScaledBoundsExtent.html", ["get", "scaled", "bounds", "extent"], "FBuildingInfo");
addToContainers_function("GetBuildingBuildMethod", "", "Docs/Structs/FBuildingInfo/Functions/GetBuildingBuildMethod.html", ["get", "building", "build", "method"], "FBuildingInfo");
addToContainers_function("ShouldBuildingRiseFromGround", "", "Docs/Structs/FBuildingInfo/Functions/ShouldBuildingRiseFromGround.html", ["should", "building", "rise", "from", "ground"], "FBuildingInfo");
addToContainers_function("GetBuildProximityRange", "", "Docs/Structs/FBuildingInfo/Functions/GetBuildProximityRange.html", ["get", "build", "proximity", "range"], "FBuildingInfo");
addToContainers_function("GetFoundationRadius", "", "Docs/Structs/FBuildingInfo/Functions/GetFoundationRadius.html", ["get", "foundation", "radius"], "FBuildingInfo");
addToContainers_function("GetNumPersistentQueues", "", "Docs/Structs/FBuildingInfo/Functions/GetNumPersistentQueues.html", ["get", "num", "persistent", "queues"], "FBuildingInfo");
addToContainers_function("GetTimeIntoZeroHealthAnimThatAnimNotifyIs", "", "Docs/Structs/FBuildingInfo/Functions/GetTimeIntoZeroHealthAnimThatAnim.html", ["get", "time", "into", "zero", "health", "anim", "that", "anim", "notify", "is"], "FBuildingInfo");
addToContainers_function("SetHUDHighlightedImage", "", "Docs/Structs/FBuildingInfo/Functions/SetHUDHighlightedImage.html", ["set", "h", "u", "d", "highlighted", "image"], "FBuildingInfo");
addToContainers_function("SetGhostBuildingBP", "", "Docs/Structs/FBuildingInfo/Functions/SetGhostBuildingBP.html", ["set", "ghost", "building", "b", "p"], "FBuildingInfo");
addToContainers_function("SetBoundsHeight", "", "Docs/Structs/FBuildingInfo/Functions/SetBoundsHeight.html", ["set", "bounds", "height"], "FBuildingInfo");
addToContainers_function("SetScaledBoxExtent", "", "Docs/Structs/FBuildingInfo/Functions/SetScaledBoxExtent.html", ["set", "scaled", "box", "extent"], "FBuildingInfo");
addToContainers_function("SetBuildingBuildMethod", "", "Docs/Structs/FBuildingInfo/Functions/SetBuildingBuildMethod.html", ["set", "building", "build", "method"], "FBuildingInfo");
addToContainers_function("SetBuildingRisesFromGround", "", "Docs/Structs/FBuildingInfo/Functions/SetBuildingRisesFromGround.html", ["set", "building", "rises", "from", "ground"], "FBuildingInfo");
addToContainers_function("SetBuildProximityDistance", "", "Docs/Structs/FBuildingInfo/Functions/SetBuildProximityDistance.html", ["set", "build", "proximity", "distance"], "FBuildingInfo");
addToContainers_function("SetFoundationRadius", "", "Docs/Structs/FBuildingInfo/Functions/SetFoundationRadius.html", ["set", "foundation", "radius"], "FBuildingInfo");
addToContainers_function("SetNumPersistentQueues", "", "Docs/Structs/FBuildingInfo/Functions/SetNumPersistentQueues.html", ["set", "num", "persistent", "queues"], "FBuildingInfo");
addToContainers_function("SetIsBarracksType", "", "Docs/Structs/FBuildingInfo/Functions/SetIsBarracksType.html", ["set", "is", "barracks", "type"], "FBuildingInfo");
addToContainers_function("SetIsBaseDefenseType", "", "Docs/Structs/FBuildingInfo/Functions/SetIsBaseDefenseType.html", ["set", "is", "base", "defense", "type"], "FBuildingInfo");
addToContainers_function("SetTimeIntoZeroHealthAnimThatAnimNotifyIs", "", "Docs/Structs/FBuildingInfo/Functions/SetTimeIntoZeroHealthAnimThatAnim.html", ["set", "time", "into", "zero", "health", "anim", "that", "anim", "notify", "is"], "FBuildingInfo");
addToContainers_function("CanBeBuiltByConstructionYard", "Return whether any construction yard buildings can build this (or if any are on faction\'s building roster). Also checks that the build method is an acceptable construction yard build method (either BuildsInTab or BuildsItself)", "Docs/Structs/FBuildingInfo/Functions/CanBeBuiltByConstructionYard.html", ["can", "be", "built", "by", "construction", "yard"], "FBuildingInfo");
addToContainers_function("IsBuildMethodSupportedByConstructionYards", "", "Docs/Structs/FBuildingInfo/Functions/IsBuildMethodSupportedByConstruct.html", ["is", "build", "method", "supported", "by", "construction", "yards"], "FBuildingInfo");
addToContainers_function("CanBeBuiltByWorkers", "Return whether at least one unit on the faction\'s unit roster can build this. Also checks that the build method is supported for unit building", "Docs/Structs/FBuildingInfo/Functions/CanBeBuiltByWorkers.html", ["can", "be", "built", "by", "workers"], "FBuildingInfo");
addToContainers_function("IsBuildMethodSupportedByUnits", "", "Docs/Structs/FBuildingInfo/Functions/IsBuildMethodSupportedByUnits.html", ["is", "build", "method", "supported", "by", "units"], "FBuildingInfo");
addToContainers_function("GetTechTreeParentBuildings", "Returns a list of all buildings that can build this building i.e. construction yard type buildings", "Docs/Structs/FBuildingInfo/Functions/GetTechTreeParentBuildings.html", ["get", "tech", "tree", "parent", "buildings"], "FBuildingInfo");
addToContainers_function("GetTechTreeParentUnits", "Returns a list of all the units can can build this building", "Docs/Structs/FBuildingInfo/Functions/GetTechTreeParentUnits.html", ["get", "tech", "tree", "parent", "units"], "FBuildingInfo");
addToContainers_function("Random_GetTechTreeParentBuilding", "Returns a random building that can build this i.e. a construction yard. Returns EBuildingType::NotBuilding if no construction yards for faction", "Docs/Structs/FBuildingInfo/Functions/Random_GetTechTreeParentBuilding.html", ["random_", "get", "tech", "tree", "parent", "building"], "FBuildingInfo");
addToContainers_function("Random_GetTechTreeParentUnit", "Returns a random unit that can build this. Returns None if no unit can build this", "Docs/Structs/FBuildingInfo/Functions/Random_GetTechTreeParentUnit.html", ["random_", "get", "tech", "tree", "parent", "unit"], "FBuildingInfo");
addToContainers_variable("", "Out of buildings/units/upgrades currently only buildings might need the highlighted image so here it is", "Docs/Structs/FBuildingInfo/Variables/.html", [], "FBuildingInfo");
addToContainers_variable("", "Reference to ghost building BP. Can leave null for units", "Docs/Structs/FBuildingInfo/Variables/_1.html", [], "FBuildingInfo");
addToContainers_variable("", "Half height of bounds.", "Docs/Structs/FBuildingInfo/Variables/_2.html", [], "FBuildingInfo");
addToContainers_variable("", "The scaled box extent of the root component that is a box component. This isn\'t affected by rotation and because it is scaled it will be the actual size", "Docs/Structs/FBuildingInfo/Variables/_3.html", [], "FBuildingInfo");
addToContainers_variable("", "Building build method", "Docs/Structs/FBuildingInfo/Variables/_4.html", [], "FBuildingInfo");
addToContainers_variable("", "Whether building should rise from the ground when it is being built", "Docs/Structs/FBuildingInfo/Variables/_5.html", [], "FBuildingInfo");
addToContainers_variable("", "The how close to other buildings this building must be to be built @See AFactionInfo::BuildingProximityRange", "Docs/Structs/FBuildingInfo/Variables/_6.html", [], "FBuildingInfo");
addToContainers_variable("", "@See FBuildingAttributes::FoundationRadius", "Docs/Structs/FBuildingInfo/Variables/_7.html", [], "FBuildingInfo");
addToContainers_variable("", "How far into the Destroyed animation the anim notify OnZeroHealthAnimationFinished is. This can be 0 if the anim notify is not present", "Docs/Structs/FBuildingInfo/Variables/_8.html", [], "FBuildingInfo");
addToContainers_variable("", "How many persistent queues this building has (currently limited to 1.) If greater than 0 then this building is a construction yard type building", "Docs/Structs/FBuildingInfo/Variables/_9.html", [], "FBuildingInfo");
addToContainers_variable("", "Buildings that can build this building. Does not take into account prereqs", "Docs/Structs/FBuildingInfo/Variables/_10.html", [], "FBuildingInfo");
addToContainers_variable("", "Units that can build this building. Does not take into account prereqs", "Docs/Structs/FBuildingInfo/Variables/_11.html", [], "FBuildingInfo");
addToContainers_variable("1", "If true then this building can train at least one unit that is an army/attacking type unit. If this building only trains collectors/workers then it is not considered a barracks", "Docs/Structs/FBuildingInfo/Variables/1.html", [], "FBuildingInfo");
addToContainers_variable("1", "", "Docs/Structs/FBuildingInfo/Variables/1_1.html", [], "FBuildingInfo");
addToContainers_struct("FUnitInfo", "Info about a unit", "Docs/Structs/FUnitInfo/FUnitInfo.html", ["unit", "info"], "");
addToContainers_function("SetupHousingCostsArray", "", "Docs/Structs/FUnitInfo/Functions/SetupHousingCostsArray.html", ["setup", "housing", "costs", "array"], "FUnitInfo");
addToContainers_function("GetHousingCosts", "", "Docs/Structs/FUnitInfo/Functions/GetHousingCosts.html", ["get", "housing", "costs"], "FUnitInfo");
addToContainers_function("GetImpactDamage", "", "Docs/Structs/FUnitInfo/Functions/GetImpactDamage.html", ["get", "impact", "damage"], "FUnitInfo");
addToContainers_function("GetImpactDamageType", "", "Docs/Structs/FUnitInfo/Functions/GetImpactDamageType.html", ["get", "impact", "damage", "type"], "FUnitInfo");
addToContainers_function("GetImpactRandomDamageFactor", "", "Docs/Structs/FUnitInfo/Functions/GetImpactRandomDamageFactor.html", ["get", "impact", "random", "damage", "factor"], "FUnitInfo");
addToContainers_function("GetAoEDamage", "", "Docs/Structs/FUnitInfo/Functions/GetAoEDamage.html", ["get", "ao", "e", "damage"], "FUnitInfo");
addToContainers_function("GetAoEDamageType", "", "Docs/Structs/FUnitInfo/Functions/GetAoEDamageType.html", ["get", "ao", "e", "damage", "type"], "FUnitInfo");
addToContainers_function("GetAoERandomDamageFactor", "", "Docs/Structs/FUnitInfo/Functions/GetAoERandomDamageFactor.html", ["get", "ao", "e", "random", "damage", "factor"], "FUnitInfo");
addToContainers_function("SetDamageValues", "Set what the damage values are", "Docs/Structs/FUnitInfo/Functions/SetDamageValues.html", ["set", "damage", "values"], "FUnitInfo");
addToContainers_function("AddTechTreeParent", "", "Docs/Structs/FUnitInfo/Functions/AddTechTreeParent.html", ["add", "tech", "tree", "parent"], "FUnitInfo");
addToContainers_function("SetIsACollectorType", "", "Docs/Structs/FUnitInfo/Functions/SetIsACollectorType.html", ["set", "is", "a", "collector", "type"], "FUnitInfo");
addToContainers_function("SetIsAWorkerType", "", "Docs/Structs/FUnitInfo/Functions/SetIsAWorkerType.html", ["set", "is", "a", "worker", "type"], "FUnitInfo");
addToContainers_function("SetIsAAttackingType", "", "Docs/Structs/FUnitInfo/Functions/SetIsAAttackingType.html", ["set", "is", "a", "attacking", "type"], "FUnitInfo");
addToContainers_function("IsTrainable", "Return whether the faction can actually train this unit. A false could mean the unit is only available as a starting selectable", "Docs/Structs/FUnitInfo/Functions/IsTrainable.html", ["is", "trainable"], "FUnitInfo");
addToContainers_function("IsACollectorType", "Returns true if unit can gather at least one type of resource", "Docs/Structs/FUnitInfo/Functions/IsACollectorType.html", ["is", "a", "collector", "type"], "FUnitInfo");
addToContainers_function("IsAWorkerType", "Returns true if unit can build at least one building", "Docs/Structs/FUnitInfo/Functions/IsAWorkerType.html", ["is", "a", "worker", "type"], "FUnitInfo");
addToContainers_function("IsAArmyUnitType", "Returns true if unit is neither a collector type or a worker type", "Docs/Structs/FUnitInfo/Functions/IsAArmyUnitType.html", ["is", "a", "army", "unit", "type"], "FUnitInfo");
addToContainers_function("GetTechTreeParents", "Get the buildings that are capable of building this (given prereqs are fulfilled too)", "Docs/Structs/FUnitInfo/Functions/GetTechTreeParents.html", ["get", "tech", "tree", "parents"], "FUnitInfo");
addToContainers_function("Random_GetTechTreeParent", "Get a random building that can build this unit. Returns EBuildingType::NotBuilding if no building can build this unit.", "Docs/Structs/FUnitInfo/Functions/Random_GetTechTreeParent.html", ["random_", "get", "tech", "tree", "parent"], "FUnitInfo");
addToContainers_variable("", "Should definently be moved closer to the regular costs array for better CPU cache locality", "Docs/Structs/FUnitInfo/Variables/.html", [], "FUnitInfo");
addToContainers_variable("ImpactDamage", "Damage dealt to what the projectile impacts", "Docs/Structs/FUnitInfo/Variables/ImpactDamage.html", ["impact", "damage"], "FUnitInfo");
addToContainers_variable("ImpactDamageType", "", "Docs/Structs/FUnitInfo/Variables/ImpactDamageType.html", ["impact", "damage", "type"], "FUnitInfo");
addToContainers_variable("ImpactRandomDamageFactor", "", "Docs/Structs/FUnitInfo/Variables/ImpactRandomDamageFactor.html", ["impact", "random", "damage", "factor"], "FUnitInfo");
addToContainers_variable("AoEDamage", "AoE damage the projectile deals", "Docs/Structs/FUnitInfo/Variables/AoEDamage.html", ["ao", "e", "damage"], "FUnitInfo");
addToContainers_variable("AoEDamageType", "", "Docs/Structs/FUnitInfo/Variables/AoEDamageType.html", ["ao", "e", "damage", "type"], "FUnitInfo");
addToContainers_variable("AoERandomDamageFactor", "", "Docs/Structs/FUnitInfo/Variables/AoERandomDamageFactor.html", ["ao", "e", "random", "damage", "factor"], "FUnitInfo");
addToContainers_variable("", "Buildings that can train this unit. Does not consider prereqs", "Docs/Structs/FUnitInfo/Variables/_1.html", [], "FUnitInfo");
addToContainers_variable("1", "", "Docs/Structs/FUnitInfo/Variables/1.html", [], "FUnitInfo");
addToContainers_variable("1", "", "Docs/Structs/FUnitInfo/Variables/1_1.html", [], "FUnitInfo");
addToContainers_variable("1", "", "Docs/Structs/FUnitInfo/Variables/1_2.html", [], "FUnitInfo");
addToContainers_struct("FStaticBuffOrDebuffInstanceInfo", "Struct that holds the state of a buff/debuff that does not tick, so just the instigator", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/FStaticBuffOrDebuffInstanceInfo.html", ["static", "buff", "or", "debuff", "instance", "info"], "");
addToContainers_function("FStaticBuffOrDebuffInstanceInfo", "Only here for compile. Never call this", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/FStaticBuffOrDebuffInstanceInfo.html", ["static", "buff", "or", "debuff", "instance", "info"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("FStaticBuffOrDebuffInstanceInfo", "", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/FStaticBuffOrDebuffInstanceInfo_1.html", ["static", "buff", "or", "debuff", "instance", "info"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("GetInstigator", "Get the actor that instigated the buff/debuff", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/GetInstigator.html", ["get", "instigator"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("GetInstigatorAsSelectable", "Shouldn\'t call this without first checking if Instigator is valid", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/GetInstigatorAsSelectable.html", ["get", "instigator", "as", "selectable"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("GetInfoStruct", "Get the info struct that this buff/debuff instance is for", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/GetInfoStruct.html", ["get", "info", "struct"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("GetSpecificType", "Get the type of buff/debuff this struct is for", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/GetSpecificType.html", ["get", "specific", "type"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("Info2)", "For TSet", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/Info2).html", [], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_function("Info)", "Hash function for TSet", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Functions/Info).html", [], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("Info", "Pointer to the info struct this buff/debuff is for", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/Info.html", [], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("SpecificType", "Type of buff/debuff this is for. Should always be a copy of Info->GetSpecificType(). Could move this variable off of here and just query the info struct instead", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/SpecificType.html", ["specific", "type"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("Instigator", "The actor that applied the buff/debuff to us. Depending on how buff/deuff logic goes this could be anything but is usually a selectable. Can also be null", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/Instigator.html", [], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_variable("InstigatorAsSelectable", "Instigator as an ISelectable. Can be null", "Docs/Structs/FStaticBuffOrDebuffInstanceInfo/Variables/InstigatorAsSelectable.html", ["instigator", "as", "selectable"], "FStaticBuffOrDebuffInstanceInfo");
addToContainers_struct("FTickableBuffOrDebuffInstanceInfo", "Struct that holds the state of a buff/debuff that ticks", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/FTickableBuffOrDebuffInstanceInfo.html", ["tickable", "buff", "or", "debuff", "instance", "info"], "");
addToContainers_function("FTickableBuffOrDebuffInstanceInfo", "Only here for compile. Never call this", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/FTickableBuffOrDebuffInstanceInfo.html", ["tickable", "buff", "or", "debuff", "instance", "info"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("FTickableBuffOrDebuffInstanceInfo", "Ctor will act as if buff/debuff is being freshly applied. Should set NumTicks to 0 and set TimeRemainingTillNextTick to proper value", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/FTickableBuffOrDebuffInstanceInfo_1.html", ["tickable", "buff", "or", "debuff", "instance", "info"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("ResetDuration", "Reset the duration back to full", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/ResetDuration.html", ["reset", "duration"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("GetTickCount", "Get how many ticks have happened. Calling this during the DoTick function will return 1 more than how many tick effects have actually been applied i.e. it will be at least 1", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/GetTickCount.html", ["get", "tick", "count"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("GetInstigator", "", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/GetInstigator.html", ["get", "instigator"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("GetInstigatorAsSelectable", "Shouldn\'t call this without first checking if Instigator is valid", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/GetInstigatorAsSelectable.html", ["get", "instigator", "as", "selectable"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("GetInfoStruct", "Get the info struct that this buff/debuff instance is for", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/GetInfoStruct.html", ["get", "info", "struct"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("GetSpecificType", "", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/GetSpecificType.html", ["get", "specific", "type"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("DecrementDeltaTime", "Functions for tick", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/DecrementDeltaTime.html", ["decrement", "delta", "time"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("GetTimeRemainingTillNextTick", "", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/GetTimeRemainingTillNextTick.html", ["get", "time", "remaining", "till", "next", "tick"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("IncreaseTimeRemainingTillNextTick", "", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/IncreaseTimeRemainingTillNextTick.html", ["increase", "time", "remaining", "till", "next", "tick"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("IncrementTickCount", "", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/IncrementTickCount.html", ["increment", "tick", "count"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_function("CalculateDurationRemaining", "Get how long the buff/debuff has left before it will fall off", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Functions/CalculateDurationRemaining.html", ["calculate", "duration", "remaining"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("Info", "Pointer to the info struct this buff/debuff is for", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/Info.html", [], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("SpecificType", "Type of buff/debuff this is for. Should always be a copy of Info->GetSpecificType(). Could move this variable off of here and just query the info struct instead", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/SpecificType.html", ["specific", "type"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("TickCount", "How many ticks have happened. If this is a buff/debuff that never expires then this isn\'t reliable due to overflow (255 max)", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/TickCount.html", ["tick", "count"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("TimeRemainingTillNextTick", "", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/TimeRemainingTillNextTick.html", ["time", "remaining", "till", "next", "tick"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("Instigator", "The actor that applied the buff/debuff to us. Depending on how buff/deuff logic goes this could be anything but is usually a selectable. Can also be null", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/Instigator.html", [], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_variable("InstigatorAsSelectable", "Instigator as an ISelectable. Can be null", "Docs/Structs/FTickableBuffOrDebuffInstanceInfo/Variables/InstigatorAsSelectable.html", ["instigator", "as", "selectable"], "FTickableBuffOrDebuffInstanceInfo");
addToContainers_struct("FPlayerStateArray", "Work around for TArrays not being able to be 2 dimensional", "Docs/Structs/FPlayerStateArray/FPlayerStateArray.html", ["player", "state", "array"], "");
addToContainers_function("AddToArray", "", "Docs/Structs/FPlayerStateArray/Functions/AddToArray.html", ["add", "to", "array"], "FPlayerStateArray");
addToContainers_function("GetPlayerStates", "Getters and setters", "Docs/Structs/FPlayerStateArray/Functions/GetPlayerStates.html", ["get", "player", "states"], "FPlayerStateArray");
addToContainers_variable("", "", "Docs/Structs/FPlayerStateArray/Variables/.html", [], "FPlayerStateArray");
addToContainers_struct("FVaryingSizeParticleArray", "Array of different information about particle systems to spawn on selectables", "Docs/Structs/FVaryingSizeParticleArray/FVaryingSizeParticleArray.html", ["varying", "size", "particle", "array"], "");
addToContainers_function("FVaryingSizeParticleArray", "", "Docs/Structs/FVaryingSizeParticleArray/Functions/FVaryingSizeParticleArray.html", ["varying", "size", "particle", "array"], "FVaryingSizeParticleArray");
addToContainers_function("GetTemplate", "Given a selectable\'s size get the right template for it", "Docs/Structs/FVaryingSizeParticleArray/Functions/GetTemplate.html", ["get", "template"], "FVaryingSizeParticleArray");
addToContainers_variable("", "Array of different templates to use for different size selectables. @See FSelectableAttributes::ParticleSize to set which template a selectable will use", "Docs/Structs/FVaryingSizeParticleArray/Variables/.html", [], "FVaryingSizeParticleArray");
addToContainers_struct("FParticleInfo", "Info required to spawn a particle system", "Docs/Structs/FParticleInfo/FParticleInfo.html", ["particle", "info"], "");
addToContainers_function("FParticleInfo", "", "Docs/Structs/FParticleInfo/Functions/FParticleInfo.html", ["particle", "info"], "FParticleInfo");
addToContainers_function("GetTemplate", "", "Docs/Structs/FParticleInfo/Functions/GetTemplate.html", ["get", "template"], "FParticleInfo");
addToContainers_function("GetTransform", "", "Docs/Structs/FParticleInfo/Functions/GetTransform.html", ["get", "transform"], "FParticleInfo");
addToContainers_variable("", "Template", "Docs/Structs/FParticleInfo/Variables/.html", [], "FParticleInfo");
addToContainers_variable("", "Optional transform adjustment TODO make it a FVector, FRotator and a float to reduce byte requirement. The float is the scale", "Docs/Structs/FParticleInfo/Variables/_1.html", [], "FParticleInfo");
addToContainers_struct("FParticleInfo_Attach", "Info for a particle system that attaches to a bone", "Docs/Structs/FParticleInfo_Attach/FParticleInfo_Attach.html", ["particle", "info_", "attach"], "");
addToContainers_function("FParticleInfo_Attach", "", "Docs/Structs/FParticleInfo_Attach/Functions/FParticleInfo_Attach.html", ["particle", "info_", "attach"], "FParticleInfo_Attach");
addToContainers_function("GetParticles", "", "Docs/Structs/FParticleInfo_Attach/Functions/GetParticles.html", ["get", "particles"], "FParticleInfo_Attach");
addToContainers_function("GetAttachPoint", "", "Docs/Structs/FParticleInfo_Attach/Functions/GetAttachPoint.html", ["get", "attach", "point"], "FParticleInfo_Attach");
addToContainers_variable("", "Template", "Docs/Structs/FParticleInfo_Attach/Variables/.html", [], "FParticleInfo_Attach");
addToContainers_variable("", "Where on the selectable the particles should try attach to", "Docs/Structs/FParticleInfo_Attach/Variables/_1.html", [], "FParticleInfo_Attach");
addToContainers_struct("FAttachedParticleInfo", "Entry in array of particles that are attached to an actor", "Docs/Structs/FAttachedParticleInfo/FAttachedParticleInfo.html", ["attached", "particle", "info"], "");
addToContainers_function("FAttachedParticleInfo", "Default constructor. Never call this", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_1.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_2.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_3.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "These constructors are here for when we need to find the entry in the array. This is bad though. I should use perhaps TArray::FindByPredicate(uint32) or something instead of needlessly creating a pointer that will never be used (compiler might optimize it out anyway)", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_4.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_5.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("FAttachedParticleInfo", "", "Docs/Structs/FAttachedParticleInfo/Functions/FAttachedParticleInfo_6.html", ["attached", "particle", "info"], "FAttachedParticleInfo");
addToContainers_function("GetPSC", "", "Docs/Structs/FAttachedParticleInfo/Functions/GetPSC.html", ["get", "p", "s", "c"], "FAttachedParticleInfo");
addToContainers_function("GenerateUniqueID", "Generate a ID so when the buff/debuff/ability wants to remove its particles from the array we know which entry it is", "Docs/Structs/FAttachedParticleInfo/Functions/GenerateUniqueID.html", ["generate", "unique", "i", "d"], "FAttachedParticleInfo");
addToContainers_function("GenerateUniqueID", "", "Docs/Structs/FAttachedParticleInfo/Functions/GenerateUniqueID_1.html", ["generate", "unique", "i", "d"], "FAttachedParticleInfo");
addToContainers_function("GenerateUniqueID", "@param Index - some abilities might have more than 1 particle effect that attaches to the target. Pass in different values for each one e.g. 0 for the \"flash\" particle effect, 1 for something different. But there are a maximum of 8 particles that can attach to target, so range: [0, 7]", "Docs/Structs/FAttachedParticleInfo/Functions/GenerateUniqueID_2.html", ["generate", "unique", "i", "d"], "FAttachedParticleInfo");
addToContainers_function("Info_2)", "", "Docs/Structs/FAttachedParticleInfo/Functions/Info_2).html", [], "FAttachedParticleInfo");
addToContainers_variable("PSC", "", "Docs/Structs/FAttachedParticleInfo/Variables/PSC.html", ["s", "c"], "FAttachedParticleInfo");
addToContainers_variable("UniqueID", "", "Docs/Structs/FAttachedParticleInfo/Variables/UniqueID.html", ["unique", "i", "d"], "FAttachedParticleInfo");
addToContainers_struct("FDecalInfo", "Info required to spawn a decal that fades out over time", "Docs/Structs/FDecalInfo/FDecalInfo.html", ["decal", "info"], "");
addToContainers_function("FDecalInfo", "", "Docs/Structs/FDecalInfo/Functions/FDecalInfo.html", ["decal", "info"], "FDecalInfo");
addToContainers_function("GetDecal", "", "Docs/Structs/FDecalInfo/Functions/GetDecal.html", ["get", "decal"], "FDecalInfo");
addToContainers_function("GetInitialDuration", "", "Docs/Structs/FDecalInfo/Functions/GetInitialDuration.html", ["get", "initial", "duration"], "FDecalInfo");
addToContainers_function("GetFadeDuration", "", "Docs/Structs/FDecalInfo/Functions/GetFadeDuration.html", ["get", "fade", "duration"], "FDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FDecalInfo/Variables/.html", [], "FDecalInfo");
addToContainers_variable("", "How long decal should appear for. This should probably not be specific to each decal", "Docs/Structs/FDecalInfo/Variables/_1.html", [], "FDecalInfo");
addToContainers_variable("", "How long fade lasts for", "Docs/Structs/FDecalInfo/Variables/_2.html", [], "FDecalInfo");
addToContainers_struct("FAttachInfo", "Information about scene components to attach to when using abilities. The references to the components are set in post edit", "Docs/Structs/FAttachInfo/FAttachInfo.html", ["attach", "info"], "");
addToContainers_function("FAttachInfo", "", "Docs/Structs/FAttachInfo/Functions/FAttachInfo.html", ["attach", "info"], "FAttachInfo");
addToContainers_function("GetComponent", "", "Docs/Structs/FAttachInfo/Functions/GetComponent.html", ["get", "component"], "FAttachInfo");
addToContainers_function("GetSocketName", "", "Docs/Structs/FAttachInfo/Functions/GetSocketName.html", ["get", "socket", "name"], "FAttachInfo");
addToContainers_function("GetAttachTransform", "", "Docs/Structs/FAttachInfo/Functions/GetAttachTransform.html", ["get", "attach", "transform"], "FAttachInfo");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FAttachInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FAttachInfo");
addToContainers_variable("", "Contains a field to type in the FName of the component to use. From my experience testing this the FName is usually the name you see in the editor in the components tab minus the (inherited) part. If the name does not match then the root component will be used. If effects should not rotate when the target rotates then the component should have bAbsoluteRotation = true. Since rotation is more specific to the ability being used you may need to define extra ESelectableBodySocket like \"FloorNoRotate\" and set different components. The selection decals components are good to use for an absolute rotation component", "Docs/Structs/FAttachInfo/Variables/.html", [], "FAttachInfo");
addToContainers_variable("", "Component as a UPROPERTY pointer and not a TWeakObjectPtr because the latter will be null in PIE", "Docs/Structs/FAttachInfo/Variables/_1.html", [], "FAttachInfo");
addToContainers_variable("", "Optional socket/bone name on component to attach to", "Docs/Structs/FAttachInfo/Variables/_2.html", [], "FAttachInfo");
addToContainers_variable("", "Attach transform if required", "Docs/Structs/FAttachInfo/Variables/_3.html", [], "FAttachInfo");
addToContainers_struct("FAnimationRepVariable", "Struct sent over wire for updating animation state", "Docs/Structs/FAnimationRepVariable/FAnimationRepVariable.html", ["animation", "rep", "variable"], "");
addToContainers_variable("", "Type of animation", "Docs/Structs/FAnimationRepVariable/Variables/.html", [], "FAnimationRepVariable");
addToContainers_variable("", "World time when the animation started", "Docs/Structs/FAnimationRepVariable/Variables/_1.html", [], "FAnimationRepVariable");
addToContainers_struct("FInventoryItemInfo", "Information about an item that goes in an inventory. My notes: we cannot allow usable items to stack. I *think* I have taken care of that in post edit. Ok I\'m going to relax that a bit and see how it goes. We\'ll allow stackable items to be usable as long as they only have 1 use AND they are destroyed when they are used, just like clarity potions. I\'m not too sure if how I have setup EditConditions gets what I want, but the goal is - if an item is usable and it can stack then it should only have 1 charge I\'m doing a lot of uint8, int16 and int32 conversions in this struct. Try and change this", "Docs/Structs/FInventoryItemInfo/FInventoryItemInfo.html", ["inventory", "item", "info"], "");
addToContainers_function("void", "Some function pointer typedefs ", "Docs/Structs/FInventoryItemInfo/Functions/void.html", [], "FInventoryItemInfo");
addToContainers_function("void", "", "Docs/Structs/FInventoryItemInfo/Functions/void_1.html", [], "FInventoryItemInfo");
addToContainers_function("void", "@param int16 - how many charges the slot changed by. Can be positive or negative", "Docs/Structs/FInventoryItemInfo/Functions/void_2.html", [], "FInventoryItemInfo");
addToContainers_function("FInventoryItemInfo", "=========================================================================================", "Docs/Structs/FInventoryItemInfo/Functions/FInventoryItemInfo.html", ["inventory", "item", "info"], "FInventoryItemInfo");
addToContainers_function("FInventoryItemInfo", "This ctor sets the display name. It is intended to be called only during the setup process. Because of how the EditConditions are set up it is no advisable to change values in this ctor.", "Docs/Structs/FInventoryItemInfo/Functions/FInventoryItemInfo_1.html", ["inventory", "item", "info"], "FInventoryItemInfo");
addToContainers_function("SetItemType", "", "Docs/Structs/FInventoryItemInfo/Functions/SetItemType.html", ["set", "item", "type"], "FInventoryItemInfo");
addToContainers_function("ClearIngredients", "Called by GI during setup if the Ingredients TMap is not usable. Removes all entries from Ingredients", "Docs/Structs/FInventoryItemInfo/Functions/ClearIngredients.html", ["clear", "ingredients"], "FInventoryItemInfo");
addToContainers_function("AddCombinationResult", "Say what this item is an ingredient of", "Docs/Structs/FInventoryItemInfo/Functions/AddCombinationResult.html", ["add", "combination", "result"], "FInventoryItemInfo");
addToContainers_function("SetBehaviorFunctionPointers", "Sets what the behavior is for when the item is aquired, removed and optionally when it reaches zero charges. @param OnAquiredPtr - function that is called when the item is aquired. @param OnRemovedPtr - function that is called when the item is removed. @param OnZeroChargesReachedPtr - function that is called when the item reaches zero charges if it is an item that has charges and the user has specified that they want custom behavior for when it reaches zero charges by setting FInventoryItemInfo::ZeroChargeBehavior to \"CustomBehavior\".", "Docs/Structs/FInventoryItemInfo/Functions/SetBehaviorFunctionPointers.html", ["set", "behavior", "function", "pointers"], "FInventoryItemInfo");
addToContainers_function("SetUseAbilityInfo", "", "Docs/Structs/FInventoryItemInfo/Functions/SetUseAbilityInfo.html", ["set", "use", "ability", "info"], "FInventoryItemInfo");
addToContainers_function("RunOnAquiredLogic", "Run the logic for when the item is aquired. Often this will adjust stats and stuff. @param Owner - the selectable that is aquiring this item @param Quantity - number of times to run logic @param AquireReason - the way this item was aquired", "Docs/Structs/FInventoryItemInfo/Functions/RunOnAquiredLogic.html", ["run", "on", "aquired", "logic"], "FInventoryItemInfo");
addToContainers_function("RunOnRemovedLogic", "Run the logic for when the item is removed from inventory. Often this will reverse the changes that were made when it was added to inventory. @param Owner - selectable that is losing the item @param Quantity - how many of the item the selectable is losing @param RemovalReason - how the item(s) is being removed", "Docs/Structs/FInventoryItemInfo/Functions/RunOnRemovedLogic.html", ["run", "on", "removed", "logic"], "FInventoryItemInfo");
addToContainers_function("RunCustomOnNumChargesChangedLogic", "Run the logic for what should happen when the item\'s number of charges changes. @param Owner - selectable that owns the item @param Inventory - inventory of Owner as a convenience @param InvSlot - inventory slot that changed @param ChangeReason - why the number of charges changed My notes: have implemented this but currently do not call it anywhere", "Docs/Structs/FInventoryItemInfo/Functions/RunCustomOnNumChargesChangedLogic.html", ["run", "custom", "on", "num", "charges", "changed", "logic"], "FInventoryItemInfo");
addToContainers_function("GetItemType", "Get the item type this struct holds data for", "Docs/Structs/FInventoryItemInfo/Functions/GetItemType.html", ["get", "item", "type"], "FInventoryItemInfo");
addToContainers_function("GetDisplayName", "", "Docs/Structs/FInventoryItemInfo/Functions/GetDisplayName.html", ["get", "display", "name"], "FInventoryItemInfo");
addToContainers_function("GetDescription", "", "Docs/Structs/FInventoryItemInfo/Functions/GetDescription.html", ["get", "description"], "FInventoryItemInfo");
addToContainers_function("GetStatChangeText", "", "Docs/Structs/FInventoryItemInfo/Functions/GetStatChangeText.html", ["get", "stat", "change", "text"], "FInventoryItemInfo");
addToContainers_function("GetFlavorText", "", "Docs/Structs/FInventoryItemInfo/Functions/GetFlavorText.html", ["get", "flavor", "text"], "FInventoryItemInfo");
addToContainers_function("GetDisplayImage", "", "Docs/Structs/FInventoryItemInfo/Functions/GetDisplayImage.html", ["get", "display", "image"], "FInventoryItemInfo");
addToContainers_function("GetDisplayImage_Hovered", "", "Docs/Structs/FInventoryItemInfo/Functions/GetDisplayImage_Hovered.html", ["get", "display", "image_", "hovered"], "FInventoryItemInfo");
addToContainers_function("GetDisplayImage_Pressed", "", "Docs/Structs/FInventoryItemInfo/Functions/GetDisplayImage_Pressed.html", ["get", "display", "image_", "pressed"], "FInventoryItemInfo");
addToContainers_function("GetDisplayImage_Highlighted", "", "Docs/Structs/FInventoryItemInfo/Functions/GetDisplayImage_Highlighted.html", ["get", "display", "image_", "highlighted"], "FInventoryItemInfo");
addToContainers_function("GetUISound_Hovered", "", "Docs/Structs/FInventoryItemInfo/Functions/GetUISound_Hovered.html", ["get", "u", "i", "sound_", "hovered"], "FInventoryItemInfo");
addToContainers_function("GetUISound_PressedByLMB", "", "Docs/Structs/FInventoryItemInfo/Functions/GetUISound_PressedByLMB.html", ["get", "u", "i", "sound_", "pressed", "by", "l", "m", "b"], "FInventoryItemInfo");
addToContainers_function("GetUISound_PressedByRMB", "", "Docs/Structs/FInventoryItemInfo/Functions/GetUISound_PressedByRMB.html", ["get", "u", "i", "sound_", "pressed", "by", "r", "m", "b"], "FInventoryItemInfo");
addToContainers_function("GetAquireSound", "", "Docs/Structs/FInventoryItemInfo/Functions/GetAquireSound.html", ["get", "aquire", "sound"], "FInventoryItemInfo");
addToContainers_function("GetAquireParticles", "", "Docs/Structs/FInventoryItemInfo/Functions/GetAquireParticles.html", ["get", "aquire", "particles"], "FInventoryItemInfo");
addToContainers_function("GetOnDroppedAnim", "", "Docs/Structs/FInventoryItemInfo/Functions/GetOnDroppedAnim.html", ["get", "on", "dropped", "anim"], "FInventoryItemInfo");
addToContainers_function("GetMeshInfo", "", "Docs/Structs/FInventoryItemInfo/Functions/GetMeshInfo.html", ["get", "mesh", "info"], "FInventoryItemInfo");
addToContainers_function("GetDefaultCost", "", "Docs/Structs/FInventoryItemInfo/Functions/GetDefaultCost.html", ["get", "default", "cost"], "FInventoryItemInfo");
addToContainers_function("IsSelectablesTypeAcceptable", "Return \"None\" if the selectable\'s type if allowed to pick up the item", "Docs/Structs/FInventoryItemInfo/Functions/IsSelectablesTypeAcceptable.html", ["is", "selectables", "type", "acceptable"], "FInventoryItemInfo");
addToContainers_function("CanStack", "Return whether multiple of this item can be stacked on top of each other in inventory", "Docs/Structs/FInventoryItemInfo/Functions/CanStack.html", ["can", "stack"], "FInventoryItemInfo");
addToContainers_function("GetNumStacksLimit", "Get how many stacks of this item we are allowed", "Docs/Structs/FInventoryItemInfo/Functions/GetNumStacksLimit.html", ["get", "num", "stacks", "limit"], "FInventoryItemInfo");
addToContainers_function("GetStackSize", "Get how many of this item can be in a stack", "Docs/Structs/FInventoryItemInfo/Functions/GetStackSize.html", ["get", "stack", "size"], "FInventoryItemInfo");
addToContainers_function("HasNumberOfStacksLimit", "", "Docs/Structs/FInventoryItemInfo/Functions/HasNumberOfStacksLimit.html", ["has", "number", "of", "stacks", "limit"], "FInventoryItemInfo");
addToContainers_function("HasNumberInStackLimit", "", "Docs/Structs/FInventoryItemInfo/Functions/HasNumberInStackLimit.html", ["has", "number", "in", "stack", "limit"], "FInventoryItemInfo");
addToContainers_function("DropsOnDeath", "", "Docs/Structs/FInventoryItemInfo/Functions/DropsOnDeath.html", ["drops", "on", "death"], "FInventoryItemInfo");
addToContainers_function("CanBeSold", "", "Docs/Structs/FInventoryItemInfo/Functions/CanBeSold.html", ["can", "be", "sold"], "FInventoryItemInfo");
addToContainers_function("GetNumChargesChangedBehavior", "", "Docs/Structs/FInventoryItemInfo/Functions/GetNumChargesChangedBehavior.html", ["get", "num", "charges", "changed", "behavior"], "FInventoryItemInfo");
addToContainers_function("IsUsable", "Whether this item can be used", "Docs/Structs/FInventoryItemInfo/Functions/IsUsable.html", ["is", "usable"], "FInventoryItemInfo");
addToContainers_function("GetUseAbilityType", "This func is sometimes used at times to get the FContextButtonInfo ptr. Now that I have added the UseAbilityInfo variable we can just call that instead", "Docs/Structs/FInventoryItemInfo/Functions/GetUseAbilityType.html", ["get", "use", "ability", "type"], "FInventoryItemInfo");
addToContainers_function("GetUseAbilityInfo", "", "Docs/Structs/FInventoryItemInfo/Functions/GetUseAbilityInfo.html", ["get", "use", "ability", "info"], "FInventoryItemInfo");
addToContainers_function("GetNumCharges", "How many charges this item starts with e.g. diffusal blade = 10.", "Docs/Structs/FInventoryItemInfo/Functions/GetNumCharges.html", ["get", "num", "charges"], "FInventoryItemInfo");
addToContainers_function("HasUnlimitedNumberOfUsesChecked", "Return whether the item can be used as many times as wanted. Assumes that you have checked that the item is usable in the first place", "Docs/Structs/FInventoryItemInfo/Functions/HasUnlimitedNumberOfUsesChecked.html", ["has", "unlimited", "number", "of", "uses", "checked"], "FInventoryItemInfo");
addToContainers_function("HasUnlimitedNumberOfUses", "", "Docs/Structs/FInventoryItemInfo/Functions/HasUnlimitedNumberOfUses.html", ["has", "unlimited", "number", "of", "uses"], "FInventoryItemInfo");
addToContainers_function("GetIngredients", "Return reference to what is required to make this item.", "Docs/Structs/FInventoryItemInfo/Functions/GetIngredients.html", ["get", "ingredients"], "FInventoryItemInfo");
addToContainers_function("GetIngredientsByValue", "Return what is required to make this item, but return by value", "Docs/Structs/FInventoryItemInfo/Functions/GetIngredientsByValue.html", ["get", "ingredients", "by", "value"], "FInventoryItemInfo");
addToContainers_function("GetItemsMadeFromThis", "Get all the items that can be created from this. e.g. if this is a claymore then something like, lothar\'s edge, divine rapier, etc would be what this returns.", "Docs/Structs/FInventoryItemInfo/Functions/GetItemsMadeFromThis.html", ["get", "items", "made", "from", "this"], "FInventoryItemInfo");
addToContainers_function("OnPostEdit", "@param ThisItemsType - what this items type is. It is the key in the GI TMap", "Docs/Structs/FInventoryItemInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FInventoryItemInfo");
addToContainers_variable("", "The name to display for this item", "Docs/Structs/FInventoryItemInfo/Variables/.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The image to display for this item", "Docs/Structs/FInventoryItemInfo/Variables/_1.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Image to display when a button for this item is hovered", "Docs/Structs/FInventoryItemInfo/Variables/_2.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Image to display when a button for this when item is pressed", "Docs/Structs/FInventoryItemInfo/Variables/_3.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Image to display when a button for this when item is highlighted. An example of when this might happen is if the item has a use ability that requires selecting a target. While selecting the target the button will be highlighted", "Docs/Structs/FInventoryItemInfo/Variables/_4.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Sound to play when a button for this item is hovered", "Docs/Structs/FInventoryItemInfo/Variables/_5.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Sound to play when a button for this item is pressed by LMB", "Docs/Structs/FInventoryItemInfo/Variables/_6.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Sound to play when a button for this item is pressed by RMB", "Docs/Structs/FInventoryItemInfo/Variables/_7.html", [], "FInventoryItemInfo");
addToContainers_variable("", "A description of this item", "Docs/Structs/FInventoryItemInfo/Variables/_8.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Some more text that can be used to say what the stat effects of the item are.", "Docs/Structs/FInventoryItemInfo/Variables/_9.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Flavour text. Kept seperate from the description because some people like this text to be in italics, different color, etc.", "Docs/Structs/FInventoryItemInfo/Variables/_10.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The sound to play when this item enters an inventory", "Docs/Structs/FInventoryItemInfo/Variables/_11.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Particles to play when item is aquired. They will most likely be attached to the unit that aquires the item.", "Docs/Structs/FInventoryItemInfo/Variables/_12.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Optional animation to play when the item is dropped. Montage should have a section at the end that loops idle, and blend in time should be set to 0. Quick note: the gun in the first person shooter example doesn\'t have any animations and it doesn\'t have a T-pose from the looks of it. Perhaps looping idle at the end isn\'t required. This is only relevant if MeshInfo\'s mesh is a skeletal mesh.", "Docs/Structs/FInventoryItemInfo/Variables/_13.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The mesh to use to display this item when it has a presence in the world. I *think* setting location to != ZeroVector will actually change the item actor\'s GetActorLocation(), which is not really what I want. Solution would be to use a shape comp as AInventoryItem\'s root comp just like I have done with infantry/buildings. This is all assuming though that moving the root component implies moving the actor. If there\'s a way to not do that then I do not need the shape comp as root. But I do not think there is. So bottom line if users use an offset here then the actor location will not be on the ground. For small offsets this doesn\'t matter too much I guess, just IsInRangeOfItem calcs will be slightly off", "Docs/Structs/FInventoryItemInfo/Variables/_14.html", [], "FInventoryItemInfo");
addToContainers_variable("", "How much this item costs. This can be overridden on a per shop basis... if I actually implement it", "Docs/Structs/FInventoryItemInfo/Variables/_15.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Elements of TMap transfered to an array for performance", "Docs/Structs/FInventoryItemInfo/Variables/_16.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The maximum number of stacks of this item we can have in our inventory. 0 = unlimited. If you would like a unique type of item then you would set this to 1.", "Docs/Structs/FInventoryItemInfo/Variables/_17.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The maximum amount of this item there can be in a stack e.g. in dota clarity potions can stack like I don\'t know perhaps 99 times, but a claymore you can only have 1 of in a stack. So if you pickup another claymore it will be in its own inventory slot. 0 = unlimited.", "Docs/Structs/FInventoryItemInfo/Variables/_18.html", [], "FInventoryItemInfo");
addToContainers_variable("OnAquiredFunctionPtr", "Function pointer for behavior when item is aquired. This can be left null in which case it is assumed \"do nothing\" is the desired behavior. A good place to assign this pointer is in URTSGameInstance::InitInventoryItemInfo()", "Docs/Structs/FInventoryItemInfo/Variables/OnAquiredFunctionPtr.html", ["on", "aquired", "function", "ptr"], "FInventoryItemInfo");
addToContainers_variable("OnRemovedFunctionPtr", "Function pointer for behavior when item is removed. Just like OnAquired this can be left null and it will be assumed \"do nothing\" is the desired behavior A good place to assign this pointer is in URTSGameInstance::InitInventoryItemInfo()", "Docs/Structs/FInventoryItemInfo/Variables/OnRemovedFunctionPtr.html", ["on", "removed", "function", "ptr"], "FInventoryItemInfo");
addToContainers_variable("ItemType", "The item type this info struct is for. For a long time I kept this off this struct, so there may be parts of code getting the type in a less efficient way than just querying this struct. Lots of functions have params that are both the item type + this struct so they can get rid of the item type param", "Docs/Structs/FInventoryItemInfo/Variables/ItemType.html", ["item", "type"], "FInventoryItemInfo");
addToContainers_variable(":", "If true then this item drops onto the world when the unit carrying it reaches zero health. True = divine rapier, gem of true sight False = most other items in dota", "Docs/Structs/FInventoryItemInfo/Variables/:.html", [], "FInventoryItemInfo");
addToContainers_variable(":", "Whether the item can be explicity dropped. True = most items in dota False = divine rapier I think", "Docs/Structs/FInventoryItemInfo/Variables/:_1.html", [], "FInventoryItemInfo");
addToContainers_variable(":", "Whether the item can be sold back to a shop or something. True = most items in dota False = divine rapier I think", "Docs/Structs/FInventoryItemInfo/Variables/:_2.html", [], "FInventoryItemInfo");
addToContainers_variable(":", "If true then only a certain list of unit types are allowed to: - pick up this item off the ground - purchase this item It may still be possible for the item to enter their inventory in other ways. Also this will not be checked when creating combination items.", "Docs/Structs/FInventoryItemInfo/Variables/:_3.html", [], "FInventoryItemInfo");
addToContainers_variable("", "What unit types are allowed to pick up this item. Ignored if bRestrictedToCertainTypes is false.", "Docs/Structs/FInventoryItemInfo/Variables/_19.html", [], "FInventoryItemInfo");
addToContainers_variable("", "If all these items in this array are present in an inventory then this item will be created. Key = ingredient, value = quantity of it required. Note that it takes at least two items in this TMap for it to be valid. You could either have two of the same item or 2 different items but if there is only one key/value pair and its value is 1 then this TMap will be cleared during setup. @See URTSGameInstance::InitInventoryItemInfo e.g. if this struct is for divine rapier then claymore, demon edge and sacred relic would go in this map, and their values would each be 1.", "Docs/Structs/FInventoryItemInfo/Variables/_20.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The oppisite of Ingredients. This array holds what this item can be used to make.", "Docs/Structs/FInventoryItemInfo/Variables/_21.html", [], "FInventoryItemInfo");
addToContainers_variable("", "Whether this item is usable. True = Diffusal blade, clarity potion False = claymore", "Docs/Structs/FInventoryItemInfo/Variables/_22.html", [], "FInventoryItemInfo");
addToContainers_variable("", "The ability to use", "Docs/Structs/FInventoryItemInfo/Variables/_23.html", [], "FInventoryItemInfo");
addToContainers_variable("UseAbilityInfo", "Pointer to the use ability info struct. If this item has no use ability then it will be null", "Docs/Structs/FInventoryItemInfo/Variables/UseAbilityInfo.html", ["use", "ability", "info"], "FInventoryItemInfo");
addToContainers_variable("", "How many times this item can be used. -1 = unlimited.", "Docs/Structs/FInventoryItemInfo/Variables/_24.html", [], "FInventoryItemInfo");
addToContainers_variable("", "What happens when this item changes its number of charges. If you choose CustomBehavior then make sure to set the function pointer, which is done in GI::InitInventoryItemInfo. Otherwise behavior will default to Remove.", "Docs/Structs/FInventoryItemInfo/Variables/_25.html", [], "FInventoryItemInfo");
addToContainers_variable("OnNumChargesChangedFunctionPtr", "Optional behavior when number of charges in a slot with this item changes. Will only be called if ZeroChargeBehavior == CustomBehavior", "Docs/Structs/FInventoryItemInfo/Variables/OnNumChargesChangedFunctionPtr.html", ["on", "num", "charges", "changed", "function", "ptr"], "FInventoryItemInfo");
addToContainers_variable("", "===========================================================================================", "Docs/Structs/FInventoryItemInfo/Variables/_26.html", [], "FInventoryItemInfo");
addToContainers_variable("", "", "Docs/Structs/FInventoryItemInfo/Variables/_27.html", [], "FInventoryItemInfo");
addToContainers_variable("", "", "Docs/Structs/FInventoryItemInfo/Variables/_28.html", [], "FInventoryItemInfo");
addToContainers_struct("FItemOnDisplayInShopSlot", "Struct of a slot in a shop", "Docs/Structs/FItemOnDisplayInShopSlot/FItemOnDisplayInShopSlot.html", ["item", "on", "display", "in", "shop", "slot"], "");
addToContainers_function("FItemOnDisplayInShopSlot", "", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/FItemOnDisplayInShopSlot.html", ["item", "on", "display", "in", "shop", "slot"], "FItemOnDisplayInShopSlot");
addToContainers_function("GetItemType", "", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/GetItemType.html", ["get", "item", "type"], "FItemOnDisplayInShopSlot");
addToContainers_function("IsForSale", "Return whether this item is for sale or just for browsing @return - true if it is possible to purchase the item, false if it is not", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/IsForSale.html", ["is", "for", "sale"], "FItemOnDisplayInShopSlot");
addToContainers_function("GetQuantityBoughtPerPurchase", "", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/GetQuantityBoughtPerPurchase.html", ["get", "quantity", "bought", "per", "purchase"], "FItemOnDisplayInShopSlot");
addToContainers_function("GetPurchasesRemaining", "", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/GetPurchasesRemaining.html", ["get", "purchases", "remaining"], "FItemOnDisplayInShopSlot");
addToContainers_function("HasUnlimitedPurchases", "If true then there is no limit on how many purchases from this slot can happen", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/HasUnlimitedPurchases.html", ["has", "unlimited", "purchases"], "FItemOnDisplayInShopSlot");
addToContainers_function("OnPurchase", "", "Docs/Structs/FItemOnDisplayInShopSlot/Functions/OnPurchase.html", ["on", "purchase"], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "The item this slot is selling", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/.html", [], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "Whether the item is for sale. If not for sale then users cannot buy it but they can look", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/_1.html", [], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "How many purchases of this item are remaining in the store. -1 means unlimited quantity. Set this to != -1 to only allow a finite number of purchases of this item.", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/_2.html", [], "FItemOnDisplayInShopSlot");
addToContainers_variable("", "How many of this item are bought everytime you purchase this. e.g. if you want this shop to sell clarity potions in lots of 3 then this would be 3. My notes: currently limited to being only 1, but can probably change this in future. I have actually written the TryPutItemInInventory code to be ok if quantity is greater than 1, so it should be all good to remove that ClampMax of 1", "Docs/Structs/FItemOnDisplayInShopSlot/Variables/_3.html", [], "FItemOnDisplayInShopSlot");
addToContainers_struct("FShopInfo", "Info about what inventory items a selectable can display and sell", "Docs/Structs/FShopInfo/FShopInfo.html", ["shop", "info"], "");
addToContainers_function("FShopInfo", "", "Docs/Structs/FShopInfo/Functions/FShopInfo.html", ["shop", "info"], "FShopInfo");
addToContainers_function("GetItems", "Get the items we display and optionally sell", "Docs/Structs/FShopInfo/Functions/GetItems.html", ["get", "items"], "FShopInfo");
addToContainers_function("SellsAtLeastOneItem", "Whether at least one item that is for display is also sold", "Docs/Structs/FShopInfo/Functions/SellsAtLeastOneItem.html", ["sells", "at", "least", "one", "item"], "FShopInfo");
addToContainers_function("AcceptsRefunds", "Whether items can be sold to this shop. Doesn\'t matter whether they were bought from here or not", "Docs/Structs/FShopInfo/Functions/AcceptsRefunds.html", ["accepts", "refunds"], "FShopInfo");
addToContainers_function("GetSlotInfo", "Get item on display and/or for sale at a particular index", "Docs/Structs/FShopInfo/Functions/GetSlotInfo.html", ["get", "slot", "info"], "FShopInfo");
addToContainers_function("CanShopHere", "Given an affiliation return whether they are allowed to shop here", "Docs/Structs/FShopInfo/Functions/CanShopHere.html", ["can", "shop", "here"], "FShopInfo");
addToContainers_function("GetSelectablesInRangeOfShopOnTeam", "Get all selectables in range of shop on a particular team.", "Docs/Structs/FShopInfo/Functions/GetSelectablesInRangeOfShopOnTeam.html", ["get", "selectables", "in", "range", "of", "shop", "on", "team"], "FShopInfo");
addToContainers_function("GetShopLocation", "Get the location we consider the shop at. Use when checking what is in range to shop from here. @param Owner - the selectable that this shop info belongs to", "Docs/Structs/FShopInfo/Functions/GetShopLocation.html", ["get", "shop", "location"], "FShopInfo");
addToContainers_function("OnPurchase", "Called when an item is purchased from this shop @param SlotIndex - index of slot that purchase was made", "Docs/Structs/FShopInfo/Functions/OnPurchase.html", ["on", "purchase"], "FShopInfo");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FShopInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FShopInfo");
addToContainers_variable("", "The items this selectable displays and optionally sells. Limit 256", "Docs/Structs/FShopInfo/Variables/.html", [], "FShopInfo");
addToContainers_variable("", "The worst affiliation of who can see the items and shop here e.g. Owned = only we can shop here Allied = ourselves and people on our team can shop here Hostile = ourselves and people on our team and enemies can shop here Things like Observer or Neutral may cause undesirable behavior. Who knows.", "Docs/Structs/FShopInfo/Variables/_1.html", [], "FShopInfo");
addToContainers_variable("", "Whether items can be sold to this shop. Does not matter whether they were bought from here or not. This is irrelevant if the shop does not sell anything in the first place, but can be easily changed. @See FShopInfo::AcceptsRefunds()", "Docs/Structs/FShopInfo/Variables/_2.html", [], "FShopInfo");
addToContainers_variable("", "Whether this shop actually sells at least one of the items it has on display. Here as an optimization but can be derived from iterating ItemsOnDisplay and checking if at least one item is for sale. I think there were some \"shops\" in dota that only had items for show but you could not buy from them.", "Docs/Structs/FShopInfo/Variables/_3.html", [], "FShopInfo");
addToContainers_variable("", "How close a selectable has to be to this shop to be able to shop from it. Measured by doing a capsule sweep from GetActorLocation of shop.", "Docs/Structs/FShopInfo/Variables/_4.html", [], "FShopInfo");
addToContainers_variable("", "", "Docs/Structs/FShopInfo/Variables/_5.html", [], "FShopInfo");
addToContainers_struct("FInventorySlotState", "Information about a single slot in a selectable\'s inventory", "Docs/Structs/FInventorySlotState/FInventorySlotState.html", ["inventory", "slot", "state"], "");
addToContainers_function("FInventorySlotState", "Never call this ctor", "Docs/Structs/FInventorySlotState/Functions/FInventorySlotState.html", ["inventory", "slot", "state"], "FInventorySlotState");
addToContainers_function("FInventorySlotState", "DEPRECIATED. Param is useless right now. Can use paramless version", "Docs/Structs/FInventorySlotState/Functions/FInventorySlotState_1.html", ["inventory", "slot", "state"], "FInventorySlotState");
addToContainers_function("GetItemType", "Get the item that is in this slot, or None if there isn\'t an item in this slot", "Docs/Structs/FInventorySlotState/Functions/GetItemType.html", ["get", "item", "type"], "FInventorySlotState");
addToContainers_function("HasItem", "Return true if there is an item in this slot", "Docs/Structs/FInventorySlotState/Functions/HasItem.html", ["has", "item"], "FInventorySlotState");
addToContainers_function("CanItemStack", "", "Docs/Structs/FInventorySlotState/Functions/CanItemStack.html", ["can", "item", "stack"], "FInventorySlotState");
addToContainers_function("DropsOnZeroHealth", "", "Docs/Structs/FInventorySlotState/Functions/DropsOnZeroHealth.html", ["drops", "on", "zero", "health"], "FInventorySlotState");
addToContainers_function("IsItemUsable", "", "Docs/Structs/FInventorySlotState/Functions/IsItemUsable.html", ["is", "item", "usable"], "FInventorySlotState");
addToContainers_function("HasUnlimitedCharges", "", "Docs/Structs/FInventorySlotState/Functions/HasUnlimitedCharges.html", ["has", "unlimited", "charges"], "FInventorySlotState");
addToContainers_function("GetNumInStack", "Get how many of the item is in the stack", "Docs/Structs/FInventorySlotState/Functions/GetNumInStack.html", ["get", "num", "in", "stack"], "FInventorySlotState");
addToContainers_function("GetNumCharges", "Get how many charges the item has. I don\'t know if this is what it actually does, but I want this to return the total number of charges the stack has e.g. if it\'s a stack of 10 clarity potions then it will return 10.", "Docs/Structs/FInventorySlotState/Functions/GetNumCharges.html", ["get", "num", "charges"], "FInventorySlotState");
addToContainers_function("PutItemIn", "This version also sets the flags and is what you should call most of the time", "Docs/Structs/FInventorySlotState/Functions/PutItemIn.html", ["put", "item", "in"], "FInventorySlotState");
addToContainers_function("PutItemInForReversal", "Put Quantity of InItem into slot. This assumes that the slot was empty previously. Does not modify any of the item flags", "Docs/Structs/FInventorySlotState/Functions/PutItemInForReversal.html", ["put", "item", "in", "for", "reversal"], "FInventorySlotState");
addToContainers_function("AdjustAmount", "Assumes the stack is not emptied as a result of this", "Docs/Structs/FInventorySlotState/Functions/AdjustAmount.html", ["adjust", "amount"], "FInventorySlotState");
addToContainers_function("RemoveAmount", "Assumes that it is possible stack will be emptied as a result of this", "Docs/Structs/FInventorySlotState/Functions/RemoveAmount.html", ["remove", "amount"], "FInventorySlotState");
addToContainers_function("RemoveCharge", "Remove a charge from the item in this slot", "Docs/Structs/FInventorySlotState/Functions/RemoveCharge.html", ["remove", "charge"], "FInventorySlotState");
addToContainers_function("SetItemTypeToNone", "", "Docs/Structs/FInventorySlotState/Functions/SetItemTypeToNone.html", ["set", "item", "type", "to", "none"], "FInventorySlotState");
addToContainers_function("ReduceQuantityToZero", "", "Docs/Structs/FInventorySlotState/Functions/ReduceQuantityToZero.html", ["reduce", "quantity", "to", "zero"], "FInventorySlotState");
addToContainers_function("GetItemUseCooldownTimerHandle", "", "Docs/Structs/FInventorySlotState/Functions/GetItemUseCooldownTimerHandle.html", ["get", "item", "use", "cooldown", "timer", "handle"], "FInventorySlotState");
addToContainers_function("IsOnCooldown", "Whether the \'use\' for the item in this slot is on cooldown. Probably need to add a FTimerHandle to this struct to accomidate this", "Docs/Structs/FInventorySlotState/Functions/IsOnCooldown.html", ["is", "on", "cooldown"], "FInventorySlotState");
addToContainers_function("GetUseCooldownRemaining", "Get the cooldown remaining on the item use ability", "Docs/Structs/FInventorySlotState/Functions/GetUseCooldownRemaining.html", ["get", "use", "cooldown", "remaining"], "FInventorySlotState");
addToContainers_function("GetUseCooldownRemainingChecked", "Get cooldown remaining. Assumes we know the timer handle is pending", "Docs/Structs/FInventorySlotState/Functions/GetUseCooldownRemainingChecked.html", ["get", "use", "cooldown", "remaining", "checked"], "FInventorySlotState");
addToContainers_function("ToString", "", "Docs/Structs/FInventorySlotState/Functions/ToString.html", ["to", "string"], "FInventorySlotState");
addToContainers_variable("ItemType", "The item in this slot. If \"None\" then there is no item in this slot", "Docs/Structs/FInventorySlotState/Variables/ItemType.html", ["item", "type"], "FInventorySlotState");
addToContainers_variable("1", "Flags about the item. Horay we crammed this whole struct into 4 bytes... well until I needed to add a timer handle In future I may want to add more bools here", "Docs/Structs/FInventorySlotState/Variables/1.html", [], "FInventorySlotState");
addToContainers_variable("1", "", "Docs/Structs/FInventorySlotState/Variables/1_1.html", [], "FInventorySlotState");
addToContainers_variable("1", "", "Docs/Structs/FInventorySlotState/Variables/1_2.html", [], "FInventorySlotState");
addToContainers_variable("1", "", "Docs/Structs/FInventorySlotState/Variables/1_3.html", [], "FInventorySlotState");
addToContainers_variable("NumInStackOrNumCharges", "This is the number of this item in this stack. Or the number of charges of this item. Because we do not allow an item that has more than 1 charge to stack we can do this. Probably should make sure that if effects reduce the number of charges on the item in this slot then we make sure to never let this go lower than 0 if it was previously equal to or greater than 0, since we use -1 to mean \'unlimited number of charges\'", "Docs/Structs/FInventorySlotState/Variables/NumInStackOrNumCharges.html", ["num", "in", "stack", "or", "num", "charges"], "FInventorySlotState");
addToContainers_variable("TimerHandle_ItemUseCooldown", "Timer that keeps track of the cooldown of the item\'s use ability", "Docs/Structs/FInventorySlotState/Variables/TimerHandle_ItemUseCooldown.html", ["timer", "handle_", "item", "use", "cooldown"], "FInventorySlotState");
addToContainers_struct("FInventoryItemQuantity", "Simple struct that records how much of an item type is in inventory", "Docs/Structs/FInventoryItemQuantity/FInventoryItemQuantity.html", ["inventory", "item", "quantity"], "");
addToContainers_function("FInventoryItemQuantity", "Here for code generation", "Docs/Structs/FInventoryItemQuantity/Functions/FInventoryItemQuantity.html", ["inventory", "item", "quantity"], "FInventoryItemQuantity");
addToContainers_function("FInventoryItemQuantity", "", "Docs/Structs/FInventoryItemQuantity/Functions/FInventoryItemQuantity_1.html", ["inventory", "item", "quantity"], "FInventoryItemQuantity");
addToContainers_function("GetNumStacks", "Get how many stacks of item are in inventory. Stacks do not have to be full", "Docs/Structs/FInventoryItemQuantity/Functions/GetNumStacks.html", ["get", "num", "stacks"], "FInventoryItemQuantity");
addToContainers_function("GetTotalNum", "Get how many of the item are in inventory", "Docs/Structs/FInventoryItemQuantity/Functions/GetTotalNum.html", ["get", "total", "num"], "FInventoryItemQuantity");
addToContainers_function("IncrementNumStacksAndAdjustNum", "", "Docs/Structs/FInventoryItemQuantity/Functions/IncrementNumStacksAndAdjustNum.html", ["increment", "num", "stacks", "and", "adjust", "num"], "FInventoryItemQuantity");
addToContainers_function("AdjustAmount", "Function assumes a stack was not created/deleted", "Docs/Structs/FInventoryItemQuantity/Functions/AdjustAmount.html", ["adjust", "amount"], "FInventoryItemQuantity");
addToContainers_function("DecrementNumStacksAndAdjustNum", "Called when a certain amount is removed and a stack is lost. @param AdjustAmount - amount lost i.e. the amount that was in the stack", "Docs/Structs/FInventoryItemQuantity/Functions/DecrementNumStacksAndAdjustNum.html", ["decrement", "num", "stacks", "and", "adjust", "num"], "FInventoryItemQuantity");
addToContainers_variable("NumStacks", "How many stacks, both partial and full, of this item are in inventory", "Docs/Structs/FInventoryItemQuantity/Variables/NumStacks.html", ["num", "stacks"], "FInventoryItemQuantity");
addToContainers_variable("Num", "How many of this item are in inventory", "Docs/Structs/FInventoryItemQuantity/Variables/Num.html", [], "FInventoryItemQuantity");
addToContainers_struct("FInventoryItemQuantityPair", "Simple struct that contains item type and how many of it", "Docs/Structs/FInventoryItemQuantityPair/FInventoryItemQuantityPair.html", ["inventory", "item", "quantity", "pair"], "");
addToContainers_function("FInventoryItemQuantityPair", "Never call this ctor", "Docs/Structs/FInventoryItemQuantityPair/Functions/FInventoryItemQuantityPair.html", ["inventory", "item", "quantity", "pair"], "FInventoryItemQuantityPair");
addToContainers_function("FInventoryItemQuantityPair", "", "Docs/Structs/FInventoryItemQuantityPair/Functions/FInventoryItemQuantityPair_1.html", ["inventory", "item", "quantity", "pair"], "FInventoryItemQuantityPair");
addToContainers_variable("ItemType", "", "Docs/Structs/FInventoryItemQuantityPair/Variables/ItemType.html", ["item", "type"], "FInventoryItemQuantityPair");
addToContainers_variable("Quantity", "", "Docs/Structs/FInventoryItemQuantityPair/Variables/Quantity.html", [], "FInventoryItemQuantityPair");
addToContainers_struct("FInventory", "Holds information about a selectable\'s inventory. ServerIndex == SlotsArrayIndex LocalIndex == DisplayIndex ------------------------------------------------------------------------------------------------ Some info about how inventories behave: Short explanation: Very similar to dota I think Longer explanation: - when a stackable item is added to inventory it will try and be placed on an already existing stack of the same type if one exists. Otherwise it will go into an empty slot. - in regards to items combining to create other items: The initial item must be added to a slot first before combination item creation can happen. So if your inventory is full and you know that aquiring an item will cause items to combine and your inventory to stay at/below capacity then you cannot aqurie that item, unless it can go in an empty slot or on top of another. - Usable items with more than 1 charge are not allowed to stack. e.g. you could not let diffusal blades stack. If you want to do similar behavour to tengu\'s you could just allow the shop that sells them to sell them in lots of 3. ------------------------------------------------------------------------------------------------", "Docs/Structs/FInventory/FInventory.html", [], "");
addToContainers_function("AtNumStacksLimit", "Returns true if this inventory cannot hold anymore stacks of an item type. Note though if the item can stack then we may be able to put it onto an already existing stack of its type. My notes: this was previously named AtQuantityLimit for a long time. @param ItemType - item to check whether we are at its quantity limit or not @param Item - ItemType\'s info struct for convenience", "Docs/Structs/FInventory/Functions/AtNumStacksLimit.html", ["at", "num", "stacks", "limit"], "FInventory");
addToContainers_function("AtTotalNumLimit", "For a item type check whether we cannot put anymore of it into inventory. Works for both stackable and non-stackable item types, although it is more efficient to call AtNumStacksLimit if we know the item is not stackable. @param ItemType - the item we\'re trying to add to inventory @param Quantity - how many of the item we\'re trying to add to inventory @param Item - ItemType\'s info struct for convenience @return - true if we cannot put anymore of Item into this inventory. May be possible for this to return true only to find later we could not add item to inventory.", "Docs/Structs/FInventory/Functions/AtTotalNumLimit.html", ["at", "total", "num", "limit"], "FInventory");
addToContainers_function("RunOnItemAquiredLogic", "Run the logic for aquiring an item. This will include doing stuff like adjusting attributes if that\'s what the item does. @param ItemAquired - the item aquired. @param Quantity - how many of the item was aquired. @param ItemsInfo - info struct of ItemAquired for convenience.", "Docs/Structs/FInventory/Functions/RunOnItemAquiredLogic.html", ["run", "on", "item", "aquired", "logic"], "FInventory");
addToContainers_function("RunOnItemRemovedLogic", "Same as above but for when the item is removed. @param Quantity - how many of the item was removed. @param RemovalReason - reason for why the item is being removed. @param ItemsInfo - info struct for ItemRemoved as a convenience.", "Docs/Structs/FInventory/Functions/RunOnItemRemovedLogic.html", ["run", "on", "item", "removed", "logic"], "FInventory");
addToContainers_function("RunOnNumChargesChangedLogic", "Run the logic for when the number of charges of an item changes @param ChargeChangeAmount - how much charges changed by. Can be positive or negative", "Docs/Structs/FInventory/Functions/RunOnNumChargesChangedLogic.html", ["run", "on", "num", "charges", "changed", "logic"], "FInventory");
addToContainers_function("FInventory", "", "Docs/Structs/FInventory/Functions/FInventory.html", [], "FInventory");
addToContainers_function("IsSlotIndexValid", "", "Docs/Structs/FInventory/Functions/IsSlotIndexValid.html", ["is", "slot", "index", "valid"], "FInventory");
addToContainers_function("GetLocalIndexFromServerIndex", "", "Docs/Structs/FInventory/Functions/GetLocalIndexFromServerIndex.html", ["get", "local", "index", "from", "server", "index"], "FInventory");
addToContainers_function("GetSlotGivenServerIndex", "", "Docs/Structs/FInventory/Functions/GetSlotGivenServerIndex.html", ["get", "slot", "given", "server", "index"], "FInventory");
addToContainers_function("GetSlotForDisplayAtIndex", "Get the slot at a raw index e.g. if RawIndex = 1 but the player has moved around what positions their buttons are at then this could return an entry in SlotsArray that is not index 1", "Docs/Structs/FInventory/Functions/GetSlotForDisplayAtIndex.html", ["get", "slot", "for", "display", "at", "index"], "FInventory");
addToContainers_function("GetCapacity", "Get the maximum number of items we can hold", "Docs/Structs/FInventory/Functions/GetCapacity.html", ["get", "capacity"], "FInventory");
addToContainers_function("GetNumSlotsOccupied", "Get how many slots have an item in them", "Docs/Structs/FInventory/Functions/GetNumSlotsOccupied.html", ["get", "num", "slots", "occupied"], "FInventory");
addToContainers_function("AreAllSlotsOccupied", "Return whether every slot in the inventory is occupied. It may still be possible to receive more items though if they stack", "Docs/Structs/FInventory/Functions/AreAllSlotsOccupied.html", ["are", "all", "slots", "occupied"], "FInventory");
addToContainers_function("", "Struct returned by TryPutItemInInventory", "Docs/Structs/FInventory/Functions/.html", [], "FInventory");
addToContainers_function("TryPutItemInInventory", "This function essentially does everything CanEnterInventory, PutNonUsableItemInSlotChecked/PutUsableItemInSlotChecked and CreateCombinationItems does. You should just use this if you\'re the server and you\'re trying to put an item into the inventory. If the full quantity of the item cannot be added then this will return as unsuccessful. My notes: because this function exists the extra param version of CanEnterInventory and CreateCombinationItems can probably both be removed. @param InventoryOwner - the selectable this inventory belongs to @param Item - item we\'re trying to add to inventory @param Quantity - how many of Item we\'re trying to add @param ItemsInfo - info struct of item for convenience @param ReasonForAquiring - reason for trying to aquire item @param GameInst - reference to game instance", "Docs/Structs/FInventory/Functions/TryPutItemInInventory.html", ["try", "put", "item", "in", "inventory"], "FInventory");
addToContainers_function("TryCreateCombinationItem", "Will try to create a combination item. If successful then recusively calls itself to try and create more. Returns the last item that was created as a result of adding ItemJustAdded. If no combination items are created as a result of adding ItemJustAdded then ItemJustAdded will be returned. @param InventoryOwner - the selectable this inventory belongs to @param ItemJustAdded - the item we just added to inventory @param ItemsInfo - info struct of ItemJustAdded for convenience @param GameInst - game instance", "Docs/Structs/FInventory/Functions/TryCreateCombinationItem.html", ["try", "create", "combination", "item"], "FInventory");
addToContainers_function("AreAllIngredientsPresent", "Return whether all the ingredients for an item are present in the inventory, which means we can create it provided we will have enough space for it. @param Item - item we want to know whether we have all the ingredients for @param ItemsInfo - info struct for Item as a convenience @return - true if all the ingredients are present in the inventory", "Docs/Structs/FInventory/Functions/AreAllIngredientsPresent.html", ["are", "all", "ingredients", "present"], "FInventory");
addToContainers_function("SwapJustCreatedCombinationItemIntoLowestDisplayIndex", "This only exists because whenever we change item position in inventory we only do it locally. Basically when an item is created it is put in the lowest array index of SlotsArray, but if we\'ve swapped positions around then it\'s actually possible it will be not in the lowest display index. So we swap display indices so that it does appear at the lowest display index", "Docs/Structs/FInventory/Functions/SwapJustCreatedCombinationItemInt.html", ["swap", "just", "created", "combination", "item", "into", "lowest", "display", "index"], "FInventory");
addToContainers_function("SwapSlotPositions_ServerIndicies", "Swap the positions of two slots in inventory. Does it in a way that does not require sending an RPC to the server. Does not update HUD. This should be good to go for swapping positions with mouse.", "Docs/Structs/FInventory/Functions/SwapSlotPositions_ServerIndicies.html", ["swap", "slot", "positions_", "server", "indicies"], "FInventory");
addToContainers_function("SwapSlotPositions_LocalIndicies", "Version that takes local/display indices. The ServerIndices version and this both do the same thing.", "Docs/Structs/FInventory/Functions/SwapSlotPositions_LocalIndicies.html", ["swap", "slot", "positions_", "local", "indicies"], "FInventory");
addToContainers_function("CanItemEnterInventory", "Get whether we can add a quantity of an item to inventory. Usually this is called by client before deciding whether to send RPC to server. If you want to actually add the item to inventory then use TryPutItemInInventory. @param Item - item we want to add @param Qunatity - how many of the item we want to add @param ItemsInfo - info struct about item for convenience @param InventoryOwner - selectable that owns this inventory @return - struct with info about whether we can add the item or not. None means we can", "Docs/Structs/FInventory/Functions/CanItemEnterInventory.html", ["can", "item", "enter", "inventory"], "FInventory");
addToContainers_function("CanItemEnterInventory", "Version that takes a pointer to a AInventoryItem", "Docs/Structs/FInventory/Functions/CanItemEnterInventory_1.html", ["can", "item", "enter", "inventory"], "FInventory");
addToContainers_function("PutItemInSlotChecked", "Put an item into a slot. Assumes it is valid to put item there. Updates HUD if requested", "Docs/Structs/FInventory/Functions/PutItemInSlotChecked.html", ["put", "item", "in", "slot", "checked"], "FInventory");
addToContainers_function("OnItemUsed", "Called when a slot is used. Puts it on cooldown, decrements a charge and updates HUD @param Owner - selectable that owns this inventory @param ServerSlotIndex - index in SlotsArray that was used @param AbilityInfo - ability info struct for the slot that was used", "Docs/Structs/FInventory/Functions/OnItemUsed.html", ["on", "item", "used"], "FInventory");
addToContainers_function("OnItemSold", "Called when an item is sold to a shop or something @param Owner - selectable that owns this inventory @param AmountSold - how many of the items in the stack were sold", "Docs/Structs/FInventory/Functions/OnItemSold.html", ["on", "item", "sold"], "FInventory");
addToContainers_function("OnOwnerZeroHealth", "Called when the owner of this inventory reaches zero health. Drop items that are ment to be dropped when reaching zero health e.g. divine rapier @return - number of items dropped", "Docs/Structs/FInventory/Functions/OnOwnerZeroHealth.html", ["on", "owner", "zero", "health"], "FInventory");
addToContainers_function("OnOwnerZeroHealth_IsLocationConsideredACliff", "Return whether a location is considered to be on a cliff. Intended to be called during OnOwnerZeroHealth", "Docs/Structs/FInventory/Functions/OnOwnerZeroHealth_IsLocationConsi.html", ["on", "owner", "zero", "health_", "is", "location", "considered", "a", "cliff"], "FInventory");
addToContainers_function("OnPostEdit", "==========================================================================================", "Docs/Structs/FInventory/Functions/OnPostEdit.html", ["on", "post", "edit"], "FInventory");
addToContainers_variable("", "The max number of slots in the inventory e.g. in dota this is 6", "Docs/Structs/FInventory/Variables/.html", [], "FInventory");
addToContainers_variable("", "How many items this inventory is holding", "Docs/Structs/FInventory/Variables/_1.html", [], "FInventory");
addToContainers_variable("", "Array of all the items in the inventory. The server keeps a copy of this and so do clients. The server and client versions are always exactly the same (after RPCs arrive of course). Reordering your inventory is achieved using the two arrays ServerIndexToLocalIndex and LocalIndexToServerIndex. My notes: It may be possible to expose this to editor to allow users to have units start with items. We would need to make sure that the bonuses are applied on spawn but there\'s lots of other stuff that needs checking: - checking that we didn\'t already start with a recipe item e.g. if the user puts a claymore, demon edge and scared relic in our inventory then we\'ve basically started with a divine rapier and we would need to make sure the 3 items are turned into it. - checking uniquess is obeyed - checking stack size limit is obeyed", "Docs/Structs/FInventory/Variables/_2.html", [], "FInventory");
addToContainers_variable("", "Key = index in SlotsArray, value = server index. I think this is the array to query when showing stuff in HUD ", "Docs/Structs/FInventory/Variables/_3.html", [], "FInventory");
addToContainers_variable("", "", "Docs/Structs/FInventory/Variables/_4.html", [], "FInventory");
addToContainers_variable("", "Maps item type to how many stacks of it there are in the inventory. Possibly no key/value pair means there are 0 stacks of that item.", "Docs/Structs/FInventory/Variables/_5.html", [], "FInventory");
addToContainers_variable("", "", "Docs/Structs/FInventory/Variables/_6.html", [], "FInventory");
addToContainers_struct("FSelectableResourceInfo", "A struct that holds information about a selectable resource. A selectable resource is something like mana or energy. My notes: we could ditch using NumTicksAhead and instead just use CurrentNumTicks which would be the game tick that it is up to date with currently. Using NumTicksAhead is actually more cumbersome. But the only reason I use it is because I want to avoid a mass branch prediction miss in a single frame when the game tick count is incremented to 255 which then means it has to be changed to 0.", "Docs/Structs/FSelectableResourceInfo/FSelectableResourceInfo.html", ["selectable", "resource", "info"], "");
addToContainers_function("AmountUndividedToAmount", "Given AmountUndivided return the value to use for Amount", "Docs/Structs/FSelectableResourceInfo/Functions/AmountUndividedToAmount.html", ["amount", "undivided", "to", "amount"], "FSelectableResourceInfo");
addToContainers_function("CalculateRegenRatePerGameTick", "Convert regen rate from per minute to per custom RTS game tick", "Docs/Structs/FSelectableResourceInfo/Functions/CalculateRegenRatePerGameTick.html", ["calculate", "regen", "rate", "per", "game", "tick"], "FSelectableResourceInfo");
addToContainers_function("FSelectableResourceInfo", "Set some sensible defaults", "Docs/Structs/FSelectableResourceInfo/Functions/FSelectableResourceInfo.html", ["selectable", "resource", "info"], "FSelectableResourceInfo");
addToContainers_function("GetType", "Get what type of resource this struct is for. Returns None if this struct is not being used", "Docs/Structs/FSelectableResourceInfo/Functions/GetType.html", ["get", "type"], "FSelectableResourceInfo");
addToContainers_function("SetNumTicksAhead", "Will only be used by clients. Set how many ticks ahead of GS::TickCounter this selectable\'s resource regen is. Negative values mean behind", "Docs/Structs/FSelectableResourceInfo/Functions/SetNumTicksAhead.html", ["set", "num", "ticks", "ahead"], "FSelectableResourceInfo");
addToContainers_function("SetNumTicksAheadGivenStuff", "Set the value of NumTicksAhead given some stuff. @param GameTickCount - local value of ARTSGameState::TickCounter @param InstigatingEffectTickCount - the tick count on the server when the effect was instigated", "Docs/Structs/FSelectableResourceInfo/Functions/SetNumTicksAheadGivenStuff.html", ["set", "num", "ticks", "ahead", "given", "stuff"], "FSelectableResourceInfo");
addToContainers_function("SetAmountInternal", "By using this function we get a little more accuracy when users want to multiply Amount", "Docs/Structs/FSelectableResourceInfo/Functions/SetAmountInternal.html", ["set", "amount", "internal"], "FSelectableResourceInfo");
addToContainers_function("SetAmount", "Set how much of this resource we have. Stays within limits", "Docs/Structs/FSelectableResourceInfo/Functions/SetAmount.html", ["set", "amount"], "FSelectableResourceInfo");
addToContainers_function("SetAmountViaMultiplier", "Multiply how much of this resource we have. Stays within limits", "Docs/Structs/FSelectableResourceInfo/Functions/SetAmountViaMultiplier.html", ["set", "amount", "via", "multiplier"], "FSelectableResourceInfo");
addToContainers_function("AdjustAmount", "Adjust the current amount. Stays within limits. @param AdjustAmount - how much to add to Amount @param HUDWidget - reference to the local player\'s HUD widget @param bIsSelected - whether the selectable these attributes belong to is selected by the player @param bIsCurrentSelected - whether the selectable is the player\'s CurrentSelected", "Docs/Structs/FSelectableResourceInfo/Functions/AdjustAmount.html", ["adjust", "amount"], "FSelectableResourceInfo");
addToContainers_function("AdjustAmount", "Version that takes a lot less params", "Docs/Structs/FSelectableResourceInfo/Functions/AdjustAmount_1.html", ["adjust", "amount"], "FSelectableResourceInfo");
addToContainers_function("SetMaxAmount", "Functions to set what the new max amount should be. These are for permanent changes such as upgrades and level up bonuses. Will not allow max amount to go lower than 1. @return - new max amount", "Docs/Structs/FSelectableResourceInfo/Functions/SetMaxAmount.html", ["set", "max", "amount"], "FSelectableResourceInfo");
addToContainers_function("SetMaxAmountViaMultiplier", "", "Docs/Structs/FSelectableResourceInfo/Functions/SetMaxAmountViaMultiplier.html", ["set", "max", "amount", "via", "multiplier"], "FSelectableResourceInfo");
addToContainers_function("AdjustMaxAmount", "If AdjustAmount = 50 and we currently have 200 max mana then after this function we will have 250", "Docs/Structs/FSelectableResourceInfo/Functions/AdjustMaxAmount.html", ["adjust", "max", "amount"], "FSelectableResourceInfo");
addToContainers_function("AdjustRegenRate", "Add a value to the regen rate per second. This is for permanent changes such as upgrades and level up bonuses. @param AdjustAmount - how much to adjust regeneration rate by. This is in units per second. @return - the regen rate per second after the change is applied", "Docs/Structs/FSelectableResourceInfo/Functions/AdjustRegenRate.html", ["adjust", "regen", "rate"], "FSelectableResourceInfo");
addToContainers_function("SetRegenRate", "Set what the regeneration rate per minute should now be. This is for permanent changes such as upgrades and level up bonuses. @return - the regen rate per second after the change is applied", "Docs/Structs/FSelectableResourceInfo/Functions/SetRegenRate.html", ["set", "regen", "rate"], "FSelectableResourceInfo");
addToContainers_function("SetRegenRateViaMultiplier", "Multiply the current regeneration rate. This is for permanent changes such as upgrades and level up bonuses @param Multiplier - what to multiply the current regeneration rate by e.g. 1.2f means we\'re increasing the regeneration rate by 20% @return - the regen rate per second after the change is applied", "Docs/Structs/FSelectableResourceInfo/Functions/SetRegenRateViaMultiplier.html", ["set", "regen", "rate", "via", "multiplier"], "FSelectableResourceInfo");
addToContainers_function("SetStartingAmount", "Functions to change the starting amount. @param CurrentAmountAdjustmentRule - how to adjust current amount. If we are applying this upgrade as one of the initial on spawn upgrades then this will likely want to be Absolute. Haven\'t really tested this though", "Docs/Structs/FSelectableResourceInfo/Functions/SetStartingAmount.html", ["set", "starting", "amount"], "FSelectableResourceInfo");
addToContainers_function("SetStartingAmountViaMultiplier", "", "Docs/Structs/FSelectableResourceInfo/Functions/SetStartingAmountViaMultiplier.html", ["set", "starting", "amount", "via", "multiplier"], "FSelectableResourceInfo");
addToContainers_function("AdjustStartingAmount", "", "Docs/Structs/FSelectableResourceInfo/Functions/AdjustStartingAmount.html", ["adjust", "starting", "amount"], "FSelectableResourceInfo");
addToContainers_function("RegenFromGameTicks", "Regenerate some of this resource based on how many game ticks have passed", "Docs/Structs/FSelectableResourceInfo/Functions/RegenFromGameTicks.html", ["regen", "from", "game", "ticks"], "FSelectableResourceInfo");
addToContainers_function("GetAmount", "Get how much of this resource we have as an integer", "Docs/Structs/FSelectableResourceInfo/Functions/GetAmount.html", ["get", "amount"], "FSelectableResourceInfo");
addToContainers_function("GetAmountAsFloatForDisplay", "Get how much of this resource we have as a float for display purposes only", "Docs/Structs/FSelectableResourceInfo/Functions/GetAmountAsFloatForDisplay.html", ["get", "amount", "as", "float", "for", "display"], "FSelectableResourceInfo");
addToContainers_function("GetRegenRatePerSecond", "Get how much of this resource regenerates each second", "Docs/Structs/FSelectableResourceInfo/Functions/GetRegenRatePerSecond.html", ["get", "regen", "rate", "per", "second"], "FSelectableResourceInfo");
addToContainers_function("GetRegenRatePerSecondForDisplay", "Returns the regen rate per second and as a float. This is for display purposes only", "Docs/Structs/FSelectableResourceInfo/Functions/GetRegenRatePerSecondForDisplay.html", ["get", "regen", "rate", "per", "second", "for", "display"], "FSelectableResourceInfo");
addToContainers_function("GetMaxAmount", "Get the maximum amount of this resource we are allowed", "Docs/Structs/FSelectableResourceInfo/Functions/GetMaxAmount.html", ["get", "max", "amount"], "FSelectableResourceInfo");
addToContainers_function("RegensOverTime", "Return whether this resource regenerates over time.", "Docs/Structs/FSelectableResourceInfo/Functions/RegensOverTime.html", ["regens", "over", "time"], "FSelectableResourceInfo");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FSelectableResourceInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FSelectableResourceInfo");
addToContainers_variable("MULTIPLIER", "A multiplier that determines how accurate Amount is. Larger means more accurate. But means we should be careful about not allowing MaxAmount to be too high i.e. INT32_MAX / MULTIPLIER is actually roughly the max amount. Because we divide and multiply by this often you will get best performance if this is a power of two. In fact I static_assert it.", "Docs/Structs/FSelectableResourceInfo/Variables/MULTIPLIER.html", ["u", "l", "t", "i", "p", "l", "i", "e", "r"], "FSelectableResourceInfo");
addToContainers_variable("", "The type of resource this is. Use None if you do not want a resource This doesn\'t affect much. One thing it will affect is the color of the progress bar on the UI. Really minor.", "Docs/Structs/FSelectableResourceInfo/Variables/.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "[Client] How many ticks ahead of GS::TickCounter this resource is in regards to its regen. Negative means this resource is behind", "Docs/Structs/FSelectableResourceInfo/Variables/_1.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "Amount * MULTIPLIER. Range: [0, MaxAmount * MULTIPLIER]", "Docs/Structs/FSelectableResourceInfo/Variables/_2.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "Range: [0, MaxAmount]. This is the value you want to show in the UI. This is the value to query whenever we want to know whether we have enough of this resource", "Docs/Structs/FSelectableResourceInfo/Variables/_3.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "How much of this resource is regenerated every minute. Can be negative.", "Docs/Structs/FSelectableResourceInfo/Variables/_4.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "", "Docs/Structs/FSelectableResourceInfo/Variables/_5.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "How much of this resource we should regenerate each custom RTS game tick except it\'s MULTIPLIER times too big.", "Docs/Structs/FSelectableResourceInfo/Variables/_6.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "The maximum amount of this resource we are allowed e.g. for high templars it is 200. The max value of this is dependent on FSelectableResourceInfo::NUM_DECIMAL_PLACES. By default this is 4. INT32_MAX / 10^4 = INT32_MAX / 10000 = ~214 000. By default this number should stay below 214 000. If you decide to use 5 decimal places then you will need to then stay below 21 400, and so on. It\'s probably good to stay a little more below that even. Good way to remove this restriction: just make AmountUndivided an int64", "Docs/Structs/FSelectableResourceInfo/Variables/_7.html", [], "FSelectableResourceInfo");
addToContainers_variable("", "How much we start with. My notes: couldn\'t this possibly be an editor only variable?", "Docs/Structs/FSelectableResourceInfo/Variables/_8.html", [], "FSelectableResourceInfo");
addToContainers_struct("FGatheredResourceMeshInfo", "Information about the mesh to show when a unit gathers a resource", "Docs/Structs/FGatheredResourceMeshInfo/FGatheredResourceMeshInfo.html", ["gathered", "resource", "mesh", "info"], "");
addToContainers_function("FGatheredResourceMeshInfo", "", "Docs/Structs/FGatheredResourceMeshInfo/Functions/FGatheredResourceMeshInfo.html", ["gathered", "resource", "mesh", "info"], "FGatheredResourceMeshInfo");
addToContainers_function("GetMesh", "", "Docs/Structs/FGatheredResourceMeshInfo/Functions/GetMesh.html", ["get", "mesh"], "FGatheredResourceMeshInfo");
addToContainers_function("GetSocketName", "", "Docs/Structs/FGatheredResourceMeshInfo/Functions/GetSocketName.html", ["get", "socket", "name"], "FGatheredResourceMeshInfo");
addToContainers_function("GetAttachmentRule", "", "Docs/Structs/FGatheredResourceMeshInfo/Functions/GetAttachmentRule.html", ["get", "attachment", "rule"], "FGatheredResourceMeshInfo");
addToContainers_function("GetAttachTransform", "", "Docs/Structs/FGatheredResourceMeshInfo/Functions/GetAttachTransform.html", ["get", "attach", "transform"], "FGatheredResourceMeshInfo");
addToContainers_variable("", "The mesh to show", "Docs/Structs/FGatheredResourceMeshInfo/Variables/.html", [], "FGatheredResourceMeshInfo");
addToContainers_variable("", "Name of bone on main body mesh to attach to", "Docs/Structs/FGatheredResourceMeshInfo/Variables/_1.html", [], "FGatheredResourceMeshInfo");
addToContainers_variable("", "Attachment rule", "Docs/Structs/FGatheredResourceMeshInfo/Variables/_2.html", [], "FGatheredResourceMeshInfo");
addToContainers_variable("", "Location/rotation offset + scale of mesh", "Docs/Structs/FGatheredResourceMeshInfo/Variables/_3.html", [], "FGatheredResourceMeshInfo");
addToContainers_struct("FResourceCollectionAttribute", "Info about about gathering resources", "Docs/Structs/FResourceCollectionAttribute/FResourceCollectionAttribute.html", ["resource", "collection", "attribute"], "");
addToContainers_function("FResourceCollectionAttribute", "", "Docs/Structs/FResourceCollectionAttribute/Functions/FResourceCollectionAttribute.html", ["resource", "collection", "attribute"], "FResourceCollectionAttribute");
addToContainers_function("GetGatherTime", "", "Docs/Structs/FResourceCollectionAttribute/Functions/GetGatherTime.html", ["get", "gather", "time"], "FResourceCollectionAttribute");
addToContainers_function("GetCapacity", "", "Docs/Structs/FResourceCollectionAttribute/Functions/GetCapacity.html", ["get", "capacity"], "FResourceCollectionAttribute");
addToContainers_function("SetCapacity", "", "Docs/Structs/FResourceCollectionAttribute/Functions/SetCapacity.html", ["set", "capacity"], "FResourceCollectionAttribute");
addToContainers_function("GetMeshInfo", "", "Docs/Structs/FResourceCollectionAttribute/Functions/GetMeshInfo.html", ["get", "mesh", "info"], "FResourceCollectionAttribute");
addToContainers_variable("", "Time it takes to gather resource. Lower = gather faster. 0 = instant", "Docs/Structs/FResourceCollectionAttribute/Variables/.html", [], "FResourceCollectionAttribute");
addToContainers_variable("", "Amount of resources this unit can hold", "Docs/Structs/FResourceCollectionAttribute/Variables/_1.html", [], "FResourceCollectionAttribute");
addToContainers_variable("", "The info about the mesh to show when this resource is gathered", "Docs/Structs/FResourceCollectionAttribute/Variables/_2.html", [], "FResourceCollectionAttribute");
addToContainers_struct("FResourceGatheringProperties", "Struct for holding all the resource collecting properties of a selectable", "Docs/Structs/FResourceGatheringProperties/FResourceGatheringProperties.html", ["resource", "gathering", "properties"], "");
addToContainers_function("FResourceGatheringProperties", "", "Docs/Structs/FResourceGatheringProperties/Functions/FResourceGatheringProperties.html", ["resource", "gathering", "properties"], "FResourceGatheringProperties");
addToContainers_function("GetMoveSpeedPenaltyForHoldingResources", "Get how much movement speed should be multiplied by when holding resources", "Docs/Structs/FResourceGatheringProperties/Functions/GetMoveSpeedPenaltyForHoldingReso.html", ["get", "move", "speed", "penalty", "for", "holding", "resources"], "FResourceGatheringProperties");
addToContainers_function("IsCollector", "Return whether this selectable can gather at least one resource", "Docs/Structs/FResourceGatheringProperties/Functions/IsCollector.html", ["is", "collector"], "FResourceGatheringProperties");
addToContainers_function("CanGatherResource", "Return whether selecable can harvest a resource", "Docs/Structs/FResourceGatheringProperties/Functions/CanGatherResource.html", ["can", "gather", "resource"], "FResourceGatheringProperties");
addToContainers_function("GetGatherTime", "Get the time it takes to gather resource", "Docs/Structs/FResourceGatheringProperties/Functions/GetGatherTime.html", ["get", "gather", "time"], "FResourceGatheringProperties");
addToContainers_function("GetCapacity", "Get how much of a resource this selectable can carry", "Docs/Structs/FResourceGatheringProperties/Functions/GetCapacity.html", ["get", "capacity"], "FResourceGatheringProperties");
addToContainers_function("GetGatheredMeshProperties", "Get the properties for the mesh to show when a resource is gathered", "Docs/Structs/FResourceGatheringProperties/Functions/GetGatheredMeshProperties.html", ["get", "gathered", "mesh", "properties"], "FResourceGatheringProperties");
addToContainers_function("GetTMap", "Just get the whole TMap", "Docs/Structs/FResourceGatheringProperties/Functions/GetTMap.html", ["get", "t", "map"], "FResourceGatheringProperties");
addToContainers_function("GetAllAttributesModifiable", "Just get the whole TMap", "Docs/Structs/FResourceGatheringProperties/Functions/GetAllAttributesModifiable.html", ["get", "all", "attributes", "modifiable"], "FResourceGatheringProperties");
addToContainers_variable("", "How much movement speed is multiplied by for carrying resources. Range of between 0 and 1 seems sensible. This could probably be made resource type specific", "Docs/Structs/FResourceGatheringProperties/Variables/.html", [], "FResourceGatheringProperties");
addToContainers_variable("", "An entry in here inplies this unit can gather this type of resource", "Docs/Structs/FResourceGatheringProperties/Variables/_1.html", [], "FResourceGatheringProperties");
addToContainers_struct("FSelectableAttributesBase", "Attributes common to ALL selectables", "Docs/Structs/FSelectableAttributesBase/FSelectableAttributesBase.html", ["selectable", "attributes", "base"], "");
addToContainers_function("FSelectableAttributesBase", "===============================================================================", "Docs/Structs/FSelectableAttributesBase/Functions/FSelectableAttributesBase.html", ["selectable", "attributes", "base"], "FSelectableAttributesBase");
addToContainers_function("", "If this isn\'t declared virtual then project will crash on load at approx 91%", "Docs/Structs/FSelectableAttributesBase/Functions/.html", [], "FSelectableAttributesBase");
addToContainers_function("GetName", "===============================================================================", "Docs/Structs/FSelectableAttributesBase/Functions/GetName.html", ["get", "name"], "FSelectableAttributesBase");
addToContainers_function("SetName", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetName.html", ["set", "name"], "FSelectableAttributesBase");
addToContainers_function("GetDescription", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetDescription.html", ["get", "description"], "FSelectableAttributesBase");
addToContainers_function("GetSelectionSound", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetSelectionSound.html", ["get", "selection", "sound"], "FSelectableAttributesBase");
addToContainers_function("GetContextMenu", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetContextMenu.html", ["get", "context", "menu"], "FSelectableAttributesBase");
addToContainers_function("IsSelected", "", "Docs/Structs/FSelectableAttributesBase/Functions/IsSelected.html", ["is", "selected"], "FSelectableAttributesBase");
addToContainers_function("SetIsSelected", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetIsSelected.html", ["set", "is", "selected"], "FSelectableAttributesBase");
addToContainers_function("IsPrimarySelected", "", "Docs/Structs/FSelectableAttributesBase/Functions/IsPrimarySelected.html", ["is", "primary", "selected"], "FSelectableAttributesBase");
addToContainers_function("SetIsPrimarySelected", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetIsPrimarySelected.html", ["set", "is", "primary", "selected"], "FSelectableAttributesBase");
addToContainers_function("GetTeam", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetTeam.html", ["get", "team"], "FSelectableAttributesBase");
addToContainers_function("SetTeam", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetTeam.html", ["set", "team"], "FSelectableAttributesBase");
addToContainers_function("GetAffiliation", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetAffiliation.html", ["get", "affiliation"], "FSelectableAttributesBase");
addToContainers_function("SetAffiliation", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetAffiliation.html", ["set", "affiliation"], "FSelectableAttributesBase");
addToContainers_function("GetOwnerID", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetOwnerID.html", ["get", "owner", "i", "d"], "FSelectableAttributesBase");
addToContainers_function("GetSelectableType", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetSelectableType.html", ["get", "selectable", "type"], "FSelectableAttributesBase");
addToContainers_function("GetBuildingType", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetBuildingType.html", ["get", "building", "type"], "FSelectableAttributesBase");
addToContainers_function("GetUnitType", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetUnitType.html", ["get", "unit", "type"], "FSelectableAttributesBase");
addToContainers_function("GetVisionState", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetVisionState.html", ["get", "vision", "state"], "FSelectableAttributesBase");
addToContainers_function("SetupBasicTypeInfo", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetupBasicTypeInfo.html", ["setup", "basic", "type", "info"], "FSelectableAttributesBase");
addToContainers_function("SetupSelectionInfo", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetupSelectionInfo.html", ["setup", "selection", "info"], "FSelectableAttributesBase");
addToContainers_function("SetVisionState", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetVisionState.html", ["set", "vision", "state"], "FSelectableAttributesBase");
addToContainers_function("GetSelectionDecalSetup", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetSelectionDecalSetup.html", ["get", "selection", "decal", "setup"], "FSelectableAttributesBase");
addToContainers_function("SetSelectionDecalSetup", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetSelectionDecalSetup.html", ["set", "selection", "decal", "setup"], "FSelectableAttributesBase");
addToContainers_function("GetSelectionDecalMID", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetSelectionDecalMID.html", ["get", "selection", "decal", "m", "i", "d"], "FSelectableAttributesBase");
addToContainers_function("SetSelectionDecalMaterial", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetSelectionDecalMaterial.html", ["set", "selection", "decal", "material"], "FSelectableAttributesBase");
addToContainers_function("GetHUDImage_Normal", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetHUDImage_Normal.html", ["get", "h", "u", "d", "image_", "normal"], "FSelectableAttributesBase");
addToContainers_function("GetHUDImage_Hovered", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetHUDImage_Hovered.html", ["get", "h", "u", "d", "image_", "hovered"], "FSelectableAttributesBase");
addToContainers_function("GetHUDImage_Pressed", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetHUDImage_Pressed.html", ["get", "h", "u", "d", "image_", "pressed"], "FSelectableAttributesBase");
addToContainers_function("SetHUDImage_Normal", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetHUDImage_Normal.html", ["set", "h", "u", "d", "image_", "normal"], "FSelectableAttributesBase");
addToContainers_function("SetHUDImage_Hovered", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetHUDImage_Hovered.html", ["set", "h", "u", "d", "image_", "hovered"], "FSelectableAttributesBase");
addToContainers_function("SetHUDImage_Pressed", "", "Docs/Structs/FSelectableAttributesBase/Functions/SetHUDImage_Pressed.html", ["set", "h", "u", "d", "image_", "pressed"], "FSelectableAttributesBase");
addToContainers_function("GetParticleSize", "", "Docs/Structs/FSelectableAttributesBase/Functions/GetParticleSize.html", ["get", "particle", "size"], "FSelectableAttributesBase");
addToContainers_variable("", "The display name of the selectable to optionally appear in UI", "Docs/Structs/FSelectableAttributesBase/Variables/.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Description of this", "Docs/Structs/FSelectableAttributesBase/Variables/_1.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Sound to try play when owning player selects this", "Docs/Structs/FSelectableAttributesBase/Variables/_2.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "The context menu buttons for this selectable", "Docs/Structs/FSelectableAttributesBase/Variables/_3.html", [], "FSelectableAttributesBase");
addToContainers_variable(":", "Whether selectable is selected by the local player", "Docs/Structs/FSelectableAttributesBase/Variables/:.html", [], "FSelectableAttributesBase");
addToContainers_variable(":", "Primary selected means this is the selectable whose context menu is showing in the HUD. If this is true it implies that the selectable is selected i.e. bIsSelected will be true aswell. For a long time I called this \"CurrentSelected\" instead", "Docs/Structs/FSelectableAttributesBase/Variables/:_1.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_4.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_5.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "ID of player who is controlling this", "Docs/Structs/FSelectableAttributesBase/Variables/_6.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_7.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Can be something like NotBuilding if the selectable is not a building. I think we double up on this variable because I have it in ABuilding. Solution is to make the ABuilding::Type variable editor only and on post edit set this variable to it. Do same with UnitType and AInfatry", "Docs/Structs/FSelectableAttributesBase/Variables/_8.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Can be something like NotUnit if the selectable is not a unit", "Docs/Structs/FSelectableAttributesBase/Variables/_9.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBase/Variables/_10.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "How the selection decal has been setup", "Docs/Structs/FSelectableAttributesBase/Variables/_11.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Material instance dynamic for selection decal. Can be null. Can tell from SelectionDecalSetup", "Docs/Structs/FSelectableAttributesBase/Variables/_12.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Image to appear on HUDs when selecting or producing this", "Docs/Structs/FSelectableAttributesBase/Variables/_13.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Image to appear on HUDs when mouse is hovered over a button for this", "Docs/Structs/FSelectableAttributesBase/Variables/_14.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "Image to appear on HUDs when mouse is pressed on a button for this", "Docs/Structs/FSelectableAttributesBase/Variables/_15.html", [], "FSelectableAttributesBase");
addToContainers_variable("", "The index from owning faction info this selectable gets its selection and right-click particles from. This is here so different particle system templates can be used for different size selectables instead of scaling particle system which can sometimes not turn out right", "Docs/Structs/FSelectableAttributesBase/Variables/_16.html", [], "FSelectableAttributesBase");
addToContainers_struct("FSelectableAttributesBasic", "Not 100% sure what this struct represents, but I derive building attributes and infantry attributes from it, so it\'s stuff common to both of them", "Docs/Structs/FSelectableAttributesBasic/FSelectableAttributesBasic.html", ["selectable", "attributes", "basic"], "");
addToContainers_function("FSelectableAttributesBasic", "", "Docs/Structs/FSelectableAttributesBasic/Functions/FSelectableAttributesBasic.html", ["selectable", "attributes", "basic"], "FSelectableAttributesBasic");
addToContainers_function("", "", "Docs/Structs/FSelectableAttributesBasic/Functions/.html", [], "FSelectableAttributesBasic");
addToContainers_function("GetCosts", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetCosts.html", ["get", "costs"], "FSelectableAttributesBasic");
addToContainers_function("GetBuildTime", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetBuildTime.html", ["get", "build", "time"], "FSelectableAttributesBasic");
addToContainers_function("GetMaxHealth", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetMaxHealth.html", ["get", "max", "health"], "FSelectableAttributesBasic");
addToContainers_function("GetTargetingType", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetTargetingType.html", ["get", "targeting", "type"], "FSelectableAttributesBasic");
addToContainers_function("GetArmourType", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetArmourType.html", ["get", "armour", "type"], "FSelectableAttributesBasic");
addToContainers_function("GetSightRange", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetSightRange.html", ["get", "sight", "range"], "FSelectableAttributesBasic");
addToContainers_function("GetStealthRevealRange", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetStealthRevealRange.html", ["get", "stealth", "reveal", "range"], "FSelectableAttributesBasic");
addToContainers_function("GetExperienceBounty", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetExperienceBounty.html", ["get", "experience", "bounty"], "FSelectableAttributesBasic");
addToContainers_function("SetExperienceBounty", "", "Docs/Structs/FSelectableAttributesBasic/Functions/SetExperienceBounty.html", ["set", "experience", "bounty"], "FSelectableAttributesBasic");
addToContainers_function("GetSelectableResource_1", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetSelectableResource_1.html", ["get", "selectable", "resource_1"], "FSelectableAttributesBasic");
addToContainers_function("GetSelectableResource_1", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetSelectableResource_1_1.html", ["get", "selectable", "resource_1"], "FSelectableAttributesBasic");
addToContainers_function("AnnounceToAllWhenBuilt", "", "Docs/Structs/FSelectableAttributesBasic/Functions/AnnounceToAllWhenBuilt.html", ["announce", "to", "all", "when", "built"], "FSelectableAttributesBasic");
addToContainers_function("GetJustBuiltSound", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetJustBuiltSound.html", ["get", "just", "built", "sound"], "FSelectableAttributesBasic");
addToContainers_function("GetZeroHealthSound", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetZeroHealthSound.html", ["get", "zero", "health", "sound"], "FSelectableAttributesBasic");
addToContainers_function("GetCommandSound", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetCommandSound.html", ["get", "command", "sound"], "FSelectableAttributesBasic");
addToContainers_function("GetPrerequisites", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetPrerequisites.html", ["get", "prerequisites"], "FSelectableAttributesBasic");
addToContainers_function("GetUpgradePrerequisites", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetUpgradePrerequisites.html", ["get", "upgrade", "prerequisites"], "FSelectableAttributesBasic");
addToContainers_function("GetBodyAttachPointInfo", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetBodyAttachPointInfo.html", ["get", "body", "attach", "point", "info"], "FSelectableAttributesBasic");
addToContainers_function("GetHUDPersistentTabCategory", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetHUDPersistentTabCategory.html", ["get", "h", "u", "d", "persistent", "tab", "category"], "FSelectableAttributesBasic");
addToContainers_function("GetHUDPersistentTabButtonOrdering", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetHUDPersistentTabButtonOrdering.html", ["get", "h", "u", "d", "persistent", "tab", "button", "ordering"], "FSelectableAttributesBasic");
addToContainers_function("IsAStartingSelectable", "Return whether this is a selectable we started the match with", "Docs/Structs/FSelectableAttributesBasic/Functions/IsAStartingSelectable.html", ["is", "a", "starting", "selectable"], "FSelectableAttributesBasic");
addToContainers_function("GetCreationMethod", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetCreationMethod.html", ["get", "creation", "method"], "FSelectableAttributesBasic");
addToContainers_function("SetCreationMethod", "", "Docs/Structs/FSelectableAttributesBasic/Functions/SetCreationMethod.html", ["set", "creation", "method"], "FSelectableAttributesBasic");
addToContainers_function("SetNumCustomGameTicksAhead", "Set how far ahead of GS::TickCounter this selectable is. This is only really used by the selectable resource so the variable lies on that struct. But if more things need to use it then it would be a good idea to move it off there onto this struct", "Docs/Structs/FSelectableAttributesBasic/Functions/SetNumCustomGameTicksAhead.html", ["set", "num", "custom", "game", "ticks", "ahead"], "FSelectableAttributesBasic");
addToContainers_function("HasASelectableResource", "Return whether this selectable has a selectable resource. Selectable resources are things like mana or energy", "Docs/Structs/FSelectableAttributesBasic/Functions/HasASelectableResource.html", ["has", "a", "selectable", "resource"], "FSelectableAttributesBasic");
addToContainers_function("HasASelectableResourceThatRegens", "Returns whether this selectable has a selectable resource that also regenerates over time", "Docs/Structs/FSelectableAttributesBasic/Functions/HasASelectableResourceThatRegens.html", ["has", "a", "selectable", "resource", "that", "regens"], "FSelectableAttributesBasic");
addToContainers_function("GetSelectableResourceType", "Get the type of selectable resource the selectable uses. Will return None if they do not use one", "Docs/Structs/FSelectableAttributesBasic/Functions/GetSelectableResourceType.html", ["get", "selectable", "resource", "type"], "FSelectableAttributesBasic");
addToContainers_function("AdjustCurrentHealthAfterMaxHealthChange", "Possibly change current health in response to a max health change. Will also try update the HUD @param Owner - the selectable this struct resides on @param PreviousMaxHealth - max health (not default max health) before the change happened @param CurrentHealthAdjustmentRule - rule that decides how to change current health", "Docs/Structs/FSelectableAttributesBasic/Functions/AdjustCurrentHealthAfterMaxHealth.html", ["adjust", "current", "health", "after", "max", "health", "change"], "FSelectableAttributesBasic");
addToContainers_function("TellHUDAboutChange_MaxHealth", "=========================================================================================", "Docs/Structs/FSelectableAttributesBasic/Functions/TellHUDAboutChange_MaxHealth.html", ["tell", "h", "u", "d", "about", "change_", "max", "health"], "FSelectableAttributesBasic");
addToContainers_function("TellHUDAboutChange_MaxHealthAndCurrentHealth", "", "Docs/Structs/FSelectableAttributesBasic/Functions/TellHUDAboutChange_MaxHealthAndCu.html", ["tell", "h", "u", "d", "about", "change_", "max", "health", "and", "current", "health"], "FSelectableAttributesBasic");
addToContainers_function("TellHUDAboutChange_DefenseMultiplier", "", "Docs/Structs/FSelectableAttributesBasic/Functions/TellHUDAboutChange_DefenseMultipl.html", ["tell", "h", "u", "d", "about", "change_", "defense", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("GetDefaultMaxHealth", "", "Docs/Structs/FSelectableAttributesBasic/Functions/GetDefaultMaxHealth.html", ["get", "default", "max", "health"], "FSelectableAttributesBasic");
addToContainers_function("SetMaxHealth", "These functions will also optionally adjust the current health too @param CurrentHealth - reference to the current health for whatever selectable we are adjusting this max health for @param CurrentHealthAdjustmentRule - rule that decides how to adjust current health", "Docs/Structs/FSelectableAttributesBasic/Functions/SetMaxHealth.html", ["set", "max", "health"], "FSelectableAttributesBasic");
addToContainers_function("SetMaxHealthViaMultiplier", "", "Docs/Structs/FSelectableAttributesBasic/Functions/SetMaxHealthViaMultiplier.html", ["set", "max", "health", "via", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("ApplyTempMaxHealthModifierViaMultiplier", "", "Docs/Structs/FSelectableAttributesBasic/Functions/ApplyTempMaxHealthModifierViaMult.html", ["apply", "temp", "max", "health", "modifier", "via", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("RemoveTempMaxHealthModifierViaMultiplier", "", "Docs/Structs/FSelectableAttributesBasic/Functions/RemoveTempMaxHealthModifierViaMul.html", ["remove", "temp", "max", "health", "modifier", "via", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("GetDefenseMultiplier", "Get the defense multiplier right now", "Docs/Structs/FSelectableAttributesBasic/Functions/GetDefenseMultiplier.html", ["get", "defense", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("GetDefaultDefenseMultiplier", "Get the default defense multiplier. This is what our defense multiplier would be without any temporary effects like buffs/debuffs, but does include permanent changes such as upgrades and level up bonuses", "Docs/Structs/FSelectableAttributesBasic/Functions/GetDefaultDefenseMultiplier.html", ["get", "default", "defense", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("SetDefenseMultiplier", "Set what the defense multiplier is. The current multiplier will also be changed based on percentage. Use this function for any permanent changes such as for upgrades or level up bonuses", "Docs/Structs/FSelectableAttributesBasic/Functions/SetDefenseMultiplier.html", ["set", "defense", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("SetDefenseMultiplierViaMultiplier", "Same as SetDefenseMultiplier but instead multiplies the the multiplier by another multiplier", "Docs/Structs/FSelectableAttributesBasic/Functions/SetDefenseMultiplierViaMultiplier.html", ["set", "defense", "multiplier", "via", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("ApplyTempDefenseMultiplierViaMultiplier", "@return - defense multiplier after the change has been applied", "Docs/Structs/FSelectableAttributesBasic/Functions/ApplyTempDefenseMultiplierViaMult.html", ["apply", "temp", "defense", "multiplier", "via", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("RemoveTempDefenseMultiplierViaMultiplier", "@return - defense multiplier after the change has been applied", "Docs/Structs/FSelectableAttributesBasic/Functions/RemoveTempDefenseMultiplierViaMul.html", ["remove", "temp", "defense", "multiplier", "via", "multiplier"], "FSelectableAttributesBasic");
addToContainers_function("IncrementNumReppedVariablesReceived", "Add 1 to the tally of replicated variables needed to call Setup()", "Docs/Structs/FSelectableAttributesBasic/Functions/IncrementNumReppedVariablesReceiv.html", ["increment", "num", "repped", "variables", "received"], "FSelectableAttributesBasic");
addToContainers_function("CanSetup", "Return whether we can call ISelectable::Setup()", "Docs/Structs/FSelectableAttributesBasic/Functions/CanSetup.html", ["can", "setup"], "FSelectableAttributesBasic");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FSelectableAttributesBasic/Functions/OnPostEdit.html", ["on", "post", "edit"], "FSelectableAttributesBasic");
addToContainers_variable("", "Sound to try play when built. For buildings this is when construction has completed", "Docs/Structs/FSelectableAttributesBasic/Variables/.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Sound to try play when this selectable reaches zero health", "Docs/Structs/FSelectableAttributesBasic/Variables/_1.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Cost to build/train. Maps resource type to cost", "Docs/Structs/FSelectableAttributesBasic/Variables/_2.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "For a building this is the time it takes to be constructed. For a unit this is the time from when production starts to when the \'open door\' animation of the barracks is triggered if using open door anim", "Docs/Structs/FSelectableAttributesBasic/Variables/_3.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "", "Docs/Structs/FSelectableAttributesBasic/Variables/_4.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "For targeting purposes. The type of selectable this is", "Docs/Structs/FSelectableAttributesBasic/Variables/_5.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "The selectables armour. Armour affects how much damage is taken from different kinds of damage sources", "Docs/Structs/FSelectableAttributesBasic/Variables/_6.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "How much incoming damage is multiplied by", "Docs/Structs/FSelectableAttributesBasic/Variables/_7.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Fog of war reveal radius", "Docs/Structs/FSelectableAttributesBasic/Variables/_8.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Radius stealth enemies will be revealed (given you can also see that far). 0 = cannot reveal stealth. Can be larger than SightRange but still requires vision from another friendly in order to see the stealth unit.", "Docs/Structs/FSelectableAttributesBasic/Variables/_9.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "How much experience is awarded to an enemy when it destroys this unit. Can be modified as the match progresses. One time it can increase is when this selectable levels up", "Docs/Structs/FSelectableAttributesBasic/Variables/_10.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "A resource like mana, energy, etc. Set this to \"None\" to not have one", "Docs/Structs/FSelectableAttributesBasic/Variables/_11.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Buildings that must be built before building this. Adding the building that trains this unit is not required. Duplicates will have no additional effect and will be removed in post edit", "Docs/Structs/FSelectableAttributesBasic/Variables/_12.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Upgrades that must be researched before this selectable can be built. Do not add duplicates. My notes: TODO remove duplicates in post edit", "Docs/Structs/FSelectableAttributesBasic/Variables/_13.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Maps body location to the component + bone/socket name on the main mesh. Any blank entries will default to NAME_None and the root component", "Docs/Structs/FSelectableAttributesBasic/Variables/_14.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Default attach info when no info about a particular location is specified", "Docs/Structs/FSelectableAttributesBasic/Variables/_15.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "If using a persistent panel like in C&C in HUD, the tab to appear in. Use \"None\" to exclude this from appearing on the HUD persistent panel", "Docs/Structs/FSelectableAttributesBasic/Variables/_16.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "If using a persistent panel like in C&C in HUD, the ordering of button. Lower = appears as one of the first buttons in tab (In C&C weaker buildings are usually first like power plants)", "Docs/Structs/FSelectableAttributesBasic/Variables/_17.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "If true then every player (ally and enemy) will be aware that this selectable is built. Currently only used for deciding whether to play \'just built\' sound. e.g. true = Kirovs in RA2", "Docs/Structs/FSelectableAttributesBasic/Variables/_18.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Sounds to play when given a context command. If any entries are left blank or null then the move command sound will be used if infantry", "Docs/Structs/FSelectableAttributesBasic/Variables/_19.html", [], "FSelectableAttributesBasic");
addToContainers_variable("NumTempMaxHealthModifiers", "------------------------------------------------------------------------------------------", "Docs/Structs/FSelectableAttributesBasic/Variables/NumTempMaxHealthModifiers.html", ["num", "temp", "max", "health", "modifiers"], "FSelectableAttributesBasic");
addToContainers_variable("", "What our max health is without any temporary buffs/debuffs", "Docs/Structs/FSelectableAttributesBasic/Variables/_20.html", [], "FSelectableAttributesBasic");
addToContainers_variable("NumTempDefenseMultiplierModifiers", "Number of temporary defense multipliers applied (one reason would be because of a buff or debuff)", "Docs/Structs/FSelectableAttributesBasic/Variables/NumTempDefenseMultiplierModifiers.html", ["num", "temp", "defense", "multiplier", "modifiers"], "FSelectableAttributesBasic");
addToContainers_variable("", "What our defense multiplier is without any temporary buffs/debuffs", "Docs/Structs/FSelectableAttributesBasic/Variables/_21.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Number of variables that need to be repped in order for client to call Setup(). Default is 3: a unique ID for commands, bIsStartingSelectable and AActor::Owner", "Docs/Structs/FSelectableAttributesBasic/Variables/_22.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "Current tally towards NumRequiredReppedVariablesForSetup", "Docs/Structs/FSelectableAttributesBasic/Variables/_23.html", [], "FSelectableAttributesBasic");
addToContainers_variable("", "How the selectable was spawned", "Docs/Structs/FSelectableAttributesBasic/Variables/_24.html", [], "FSelectableAttributesBasic");
addToContainers_struct("FGarrisonEvacHistory_UnloadAllAtOnce_Grid", "Contains a record of where units have been successfully evacced to and locations where their overlap tests failed. This is for unloading all units at once using the grid method.", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/FGarrisonEvacHistory_UnloadAllAtO.html", ["garrison", "evac", "history_", "unload", "all", "at", "once_", "grid"], "");
addToContainers_function("FGarrisonEvacHistory_UnloadAllAtOnce_Grid", "@param GarrisonedUnits - array of garrisoned units in building", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/FGarrisonEvacHistory_UnloadAllAtO.html", ["garrison", "evac", "history_", "unload", "all", "at", "once_", "grid"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("GetInitialTransformToTry", "Return the next location to try. The idea here is to return locations that hopefully aren\'t colliding with anything in the first place so minimal overlap tests fail @param UnitsCollisionInfo - some collision info for EvacingSelectable as a convenience", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/GetInitialTransformToTry.html", ["get", "initial", "transform", "to", "try"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("PutLocationOnGround", "@return - the param Location but it\'s Z axis is on the ground", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/PutLocationOnGround.html", ["put", "location", "on", "ground"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("uint8", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/uint8.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("uint8", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/uint8_1.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("", "Copy of FSelectableRootComponent2DShapeInfo", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/_1.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/_2.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("NotifyOfFailedOverlapTest", "Get notified about trying a location rotation and the overlap test failing. This function will then inform the caller whether to try again or not @param InOutState - where along the process the caller is. Also this is used to tell the caller what to do next @param InOutLocation - location overlap test failed at. Also an out param - this func will put another location into it to try if this returns true @param InOutRotation - same deal as Location except for rotation", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/NotifyOfFailedOverlapTest.html", ["notify", "of", "failed", "overlap", "test"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("NotifyOfSuccessfulOverlapTest", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/NotifyOfSuccessfulOverlapTest.html", ["notify", "of", "successful", "overlap", "test"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("OnAllAdjustmentsTriedForLocation", "Call when all the adjustments from an overlap test have been tried and none of them have worked. Either try another location or just give up trying to find loc for the unit.", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/OnAllAdjustmentsTriedForLocation.html", ["on", "all", "adjustments", "tried", "for", "location"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_function("TryResolveOverlapsWithPreviousLocations", "Will return LOCATION_INVALID to if it cannot find any suitable location @return - a location that has a decent chance at not colliding with anything else previously placed, or LOCATION_INVALID if could not find one", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Functions/TryResolveOverlapsWithPreviousLoc.html", ["try", "resolve", "overlaps", "with", "previous", "locations"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("LOCATION_INVALID", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/LOCATION_INVALID.html", ["o", "c", "a", "t", "i", "o", "n_", "i", "n", "v", "a", "l", "i", "d"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/_1.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/_2.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/_3.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/_4.html", [], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("FoursSidesInfo[4]", "Holds information about the 4 sides of a building", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/FoursSidesInfo[4].html", ["fours", "sides", "info[4]"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("CurrentFoursSidesInfoIndex", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/CurrentFoursSidesInfoIndex.html", ["current", "fours", "sides", "info", "index"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("NumUnitsEvacced", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/NumUnitsEvacced.html", ["num", "units", "evacced"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_variable("bHasGivenOutFirstLocation", "", "Docs/Structs/FGarrisonEvacHistory_UnloadAllAtO/Variables/bHasGivenOutFirstLocation.html", ["has", "given", "out", "first", "location"], "FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
addToContainers_struct("FBuildingNetworkAttributes", "Static attributes for building garrison networks", "Docs/Structs/FBuildingNetworkAttributes/FBuildingNetworkAttributes.html", ["building", "network", "attributes"], "");
addToContainers_function("FBuildingNetworkAttributes", "", "Docs/Structs/FBuildingNetworkAttributes/Functions/FBuildingNetworkAttributes.html", ["building", "network", "attributes"], "FBuildingNetworkAttributes");
addToContainers_function("GetNumGarrisonSlots", "", "Docs/Structs/FBuildingNetworkAttributes/Functions/GetNumGarrisonSlots.html", ["get", "num", "garrison", "slots"], "FBuildingNetworkAttributes");
addToContainers_variable("", "How many \'slots\' the network has for units to be garrisoned in it.", "Docs/Structs/FBuildingNetworkAttributes/Variables/.html", [], "FBuildingNetworkAttributes");
addToContainers_struct("FBuildingNetworkState", "State for a single building garrison network for a single player", "Docs/Structs/FBuildingNetworkState/FBuildingNetworkState.html", ["building", "network", "state"], "");
addToContainers_function("FBuildingNetworkState", "", "Docs/Structs/FBuildingNetworkState/Functions/FBuildingNetworkState.html", ["building", "network", "state"], "FBuildingNetworkState");
addToContainers_function("SetupStruct", "Call a function \"Setup\" and intellisense takes forever to find it", "Docs/Structs/FBuildingNetworkState/Functions/SetupStruct.html", ["setup", "struct"], "FBuildingNetworkState");
addToContainers_function("GetGarrisonedUnits", "", "Docs/Structs/FBuildingNetworkState/Functions/GetGarrisonedUnits.html", ["get", "garrisoned", "units"], "FBuildingNetworkState");
addToContainers_function("GetGarrisonedUnits", "", "Docs/Structs/FBuildingNetworkState/Functions/GetGarrisonedUnits_1.html", ["get", "garrisoned", "units"], "FBuildingNetworkState");
addToContainers_function("HasEnoughCapacityToAcceptUnit", "", "Docs/Structs/FBuildingNetworkState/Functions/HasEnoughCapacityToAcceptUnit.html", ["has", "enough", "capacity", "to", "accept", "unit"], "FBuildingNetworkState");
addToContainers_function("ServerOnUnitEntered", "@return - index inside the garrisoned units container that Unit was placed at", "Docs/Structs/FBuildingNetworkState/Functions/ServerOnUnitEntered.html", ["server", "on", "unit", "entered"], "FBuildingNetworkState");
addToContainers_function("ClientOnUnitEntered", "@return - index inside the garrisoned units container that Unit was placed at", "Docs/Structs/FBuildingNetworkState/Functions/ClientOnUnitEntered.html", ["client", "on", "unit", "entered"], "FBuildingNetworkState");
addToContainers_function("ServerOnUnitExited", "@return - index inside the garrisoned units container that Unit was removed from", "Docs/Structs/FBuildingNetworkState/Functions/ServerOnUnitExited.html", ["server", "on", "unit", "exited"], "FBuildingNetworkState");
addToContainers_function("ClientOnUnitExited", "@return - index inside the garrisoned units container that Unit was removed from", "Docs/Structs/FBuildingNetworkState/Functions/ClientOnUnitExited.html", ["client", "on", "unit", "exited"], "FBuildingNetworkState");
addToContainers_function("OnGarrisonedUnitZeroHealth", "@return - index inside the garrisoned units container that Unit was removed from", "Docs/Structs/FBuildingNetworkState/Functions/OnGarrisonedUnitZeroHealth.html", ["on", "garrisoned", "unit", "zero", "health"], "FBuildingNetworkState");
addToContainers_function("OnUnitAdded_UpdateSlotUsage", "", "Docs/Structs/FBuildingNetworkState/Functions/OnUnitAdded_UpdateSlotUsage.html", ["on", "unit", "added_", "update", "slot", "usage"], "FBuildingNetworkState");
addToContainers_function("OnUnitRemoved_UpdateSlotUsage", "", "Docs/Structs/FBuildingNetworkState/Functions/OnUnitRemoved_UpdateSlotUsage.html", ["on", "unit", "removed_", "update", "slot", "usage"], "FBuildingNetworkState");
addToContainers_variable("GarrisonedUnits", "TArray of all the units inside this garrison. Not auto memory managed i.e. not UPROPERTY or TWeakObjectPtr - unit\'s are responsible to update the container when they reach zero health so invalids should not be an issue.", "Docs/Structs/FBuildingNetworkState/Variables/GarrisonedUnits.html", ["garrisoned", "units"], "FBuildingNetworkState");
addToContainers_variable("SlotCapacity", "Number of slots this garrison has", "Docs/Structs/FBuildingNetworkState/Variables/SlotCapacity.html", ["slot", "capacity"], "FBuildingNetworkState");
addToContainers_variable("SlotUsage", "Number of slots that are being used. Will change as selectables enter and exit", "Docs/Structs/FBuildingNetworkState/Variables/SlotUsage.html", ["slot", "usage"], "FBuildingNetworkState");
addToContainers_struct("FPlayersBuildingNetworksState", "For a single player this struct contains all the information about all building garrison networks for that player", "Docs/Structs/FPlayersBuildingNetworksState/FPlayersBuildingNetworksState.html", ["players", "building", "networks", "state"], "");
addToContainers_function("FPlayersBuildingNetworksState", "", "Docs/Structs/FPlayersBuildingNetworksState/Functions/FPlayersBuildingNetworksState.html", ["players", "building", "networks", "state"], "FPlayersBuildingNetworksState");
addToContainers_function("GetNetworkInfo", "Just do Statics::BuildingNetworkTypeToArrayIndex and that\'s the index in NetworksContainer", "Docs/Structs/FPlayersBuildingNetworksState/Functions/GetNetworkInfo.html", ["get", "network", "info"], "FPlayersBuildingNetworksState");
addToContainers_function("]", "This array contains state for each network type. Use Statics::BuildingNetworkTypeToArrayIndex(EBuildingNetworkType) to get the right index for your network type. Even if a faction does not use a network type (e.g. I\'m playing terran so I will never have my units enter the \'nydus\' network) an entry is still there in case I make building/unit possession a thing (e.g. I gain control of a nydus worm - now I DO need to keep track of what is in that network). /End verbose comment C++ does not like zero sized arrays, so if the player has not defined any custom networks then to get around this it is given a size of 1", "Docs/Structs/FPlayersBuildingNetworksState/Functions/].html", [], "FPlayersBuildingNetworksState");
addToContainers_struct("FBuildingGarrisonAttributes", "Attributes that say how many units can be garrisoned inside a building", "Docs/Structs/FBuildingGarrisonAttributes/FBuildingGarrisonAttributes.html", ["building", "garrison", "attributes"], "");
addToContainers_function("FBuildingGarrisonAttributes", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/FBuildingGarrisonAttributes.html", ["building", "garrison", "attributes"], "FBuildingGarrisonAttributes");
addToContainers_function("OnOwningBuildingSetup", "Called when the building that owns this does its setup", "Docs/Structs/FBuildingGarrisonAttributes/Functions/OnOwningBuildingSetup.html", ["on", "owning", "building", "setup"], "FBuildingGarrisonAttributes");
addToContainers_function("ServerOnUnitEntered", "[Server] Call when a infantry enters this garrison @param ThisBuilding - the building these attributes belong to @param Infantry - infantry that entered this garrison", "Docs/Structs/FBuildingGarrisonAttributes/Functions/ServerOnUnitEntered.html", ["server", "on", "unit", "entered"], "FBuildingGarrisonAttributes");
addToContainers_function("ClientOnUnitEntered", "[Client] Call when an infantry enters this garrison", "Docs/Structs/FBuildingGarrisonAttributes/Functions/ClientOnUnitEntered.html", ["client", "on", "unit", "entered"], "FBuildingGarrisonAttributes");
addToContainers_function("ServerUnloadSingleUnit", "[Server] Unload asingle unit from garrison", "Docs/Structs/FBuildingGarrisonAttributes/Functions/ServerUnloadSingleUnit.html", ["server", "unload", "single", "unit"], "FBuildingGarrisonAttributes");
addToContainers_function("ServerUnloadAll", "[Server] Unload all units from the garrison", "Docs/Structs/FBuildingGarrisonAttributes/Functions/ServerUnloadAll.html", ["server", "unload", "all"], "FBuildingGarrisonAttributes");
addToContainers_function("ClientOnUnitExited", "[Client] Call when the unit has exited the garrison", "Docs/Structs/FBuildingGarrisonAttributes/Functions/ClientOnUnitExited.html", ["client", "on", "unit", "exited"], "FBuildingGarrisonAttributes");
addToContainers_function("OnGarrisonedUnitZeroHealth", "Call when a unit inside the garrison reaches zero health. @return - the index inside GarrisonedUnits that Unit was at. Will probably never be INDEX_NONE", "Docs/Structs/FBuildingGarrisonAttributes/Functions/OnGarrisonedUnitZeroHealth.html", ["on", "garrisoned", "unit", "zero", "health"], "FBuildingGarrisonAttributes");
addToContainers_function("GetSuitableEvacuationTransform", "Get where to place a unit that is leaving the garrison @param EvacingUnit - unit that is leaving the garrison @param EvacHistory - info about evacuations previously completed possibly this frame or maybe over the last few frames. I idea is to query this for the next possible location to put the next unit, cause you can\'t just put them all in the same spot. Make sure that whoever calls this func adds info to this array if it does indeed evac the unit there @param OutLocation - world location where to put evacing unit @param OutRotation - rotation to set for evacing unit @return - true if a location and rotation were found", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetSuitableEvacuationTransform.html", ["get", "suitable", "evacuation", "transform"], "FBuildingGarrisonAttributes");
addToContainers_function("ComponentEncroachesBlockingGeometry_WithAdjustment", "Basically I\'m going to make this similar to the UWorld version but I will remove some stuff I don\'t need. TBH this function belongs more in Statics class or something MY GUESS AT PARAMS: @param OutProposedAdjustment - a vector that says which way to adjust the TestWorldTransform if the test fails @return - true if the component is encroaching something so it\'s colliding with something", "Docs/Structs/FBuildingGarrisonAttributes/Functions/ComponentEncroachesBlockingGeomet.html", ["component", "encroaches", "blocking", "geometry_", "with", "adjustment"], "FBuildingGarrisonAttributes");
addToContainers_function("ComponentEncroachesBlockingGeometry_NoAdjustment", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/ComponentEncroachesBlockingGeomet_1.html", ["component", "encroaches", "blocking", "geometry_", "no", "adjustment"], "FBuildingGarrisonAttributes");
addToContainers_function("OnUnitAdded_UpdateSlotUsage", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/OnUnitAdded_UpdateSlotUsage.html", ["on", "unit", "added_", "update", "slot", "usage"], "FBuildingGarrisonAttributes");
addToContainers_function("OnUnitRemoved_UpdateSlotUsage", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/OnUnitRemoved_UpdateSlotUsage.html", ["on", "unit", "removed_", "update", "slot", "usage"], "FBuildingGarrisonAttributes");
addToContainers_function("OnUnitRemoved_UpdateSightAndStealthRadius", "This will update the building\'s sight and stealth reveal radiuses when a unit is removed from the garrison. 2 reasons for removing unit: player ordered it to leave, it died.", "Docs/Structs/FBuildingGarrisonAttributes/Functions/OnUnitRemoved_UpdateSightAndSteal.html", ["on", "unit", "removed_", "update", "sight", "and", "stealth", "radius"], "FBuildingGarrisonAttributes");
addToContainers_function("PlayEvacSound", "Play sound for when a unit or possibly units leave", "Docs/Structs/FBuildingGarrisonAttributes/Functions/PlayEvacSound.html", ["play", "evac", "sound"], "FBuildingGarrisonAttributes");
addToContainers_function("IsGarrison", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/IsGarrison.html", ["is", "garrison"], "FBuildingGarrisonAttributes");
addToContainers_function("GetGarrisonNetworkInfo", "This will likely return null if not part of a network", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetGarrisonNetworkInfo.html", ["get", "garrison", "network", "info"], "FBuildingGarrisonAttributes");
addToContainers_function("IsPartOfGarrisonNetwork", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/IsPartOfGarrisonNetwork.html", ["is", "part", "of", "garrison", "network"], "FBuildingGarrisonAttributes");
addToContainers_function("GetTotalNumGarrisonSlots", "Get the total number of slots this garrison has", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetTotalNumGarrisonSlots.html", ["get", "total", "num", "garrison", "slots"], "FBuildingGarrisonAttributes");
addToContainers_function("GetSlotUsage", "Get how many slots are currently being used. Will likely be not helpful if this garrison is part of a garrison network", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetSlotUsage.html", ["get", "slot", "usage"], "FBuildingGarrisonAttributes");
addToContainers_function("GetNumUnitsInGarrison", "Get how many units are in the garrison", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetNumUnitsInGarrison.html", ["get", "num", "units", "in", "garrison"], "FBuildingGarrisonAttributes");
addToContainers_function("GetGarrisonedUnitsContainerTakingIntoAccountNetworkType", "Container of all units garrisoned inside building", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetGarrisonedUnitsContainerTaking.html", ["get", "garrisoned", "units", "container", "taking", "into", "account", "network", "type"], "FBuildingGarrisonAttributes");
addToContainers_function("GetCanEnterMouseCursor", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetCanEnterMouseCursor.html", ["get", "can", "enter", "mouse", "cursor"], "FBuildingGarrisonAttributes");
addToContainers_function("GetEnterRange", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetEnterRange.html", ["get", "enter", "range"], "FBuildingGarrisonAttributes");
addToContainers_function("HasEnoughCapacityToAcceptUnit", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/HasEnoughCapacityToAcceptUnit.html", ["has", "enough", "capacity", "to", "accept", "unit"], "FBuildingGarrisonAttributes");
addToContainers_function("GetUnloadAllMethod", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetUnloadAllMethod.html", ["get", "unload", "all", "method"], "FBuildingGarrisonAttributes");
addToContainers_function("GetGarrisonNetworkType", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/GetGarrisonNetworkType.html", ["get", "garrison", "network", "type"], "FBuildingGarrisonAttributes");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FBuildingGarrisonAttributes/Functions/OnPostEdit.html", ["on", "post", "edit"], "FBuildingGarrisonAttributes");
addToContainers_variable("GarrisonNetworkInfo", "Pointer to the garrison network info struct on the player state that owns the building. If this garrison is not part of a garrison network then this will be null", "Docs/Structs/FBuildingGarrisonAttributes/Variables/GarrisonNetworkInfo.html", ["garrison", "network", "info"], "FBuildingGarrisonAttributes");
addToContainers_variable("GarrisonedUnits", "TArray of all the units inside this garrison. Not auto memory managed i.e. not UPROPERTY or TWeakObjectPtr - unit\'s are responsible to update the container when they reach zero health so invalids should not be an issue.", "Docs/Structs/FBuildingGarrisonAttributes/Variables/GarrisonedUnits.html", ["garrisoned", "units"], "FBuildingGarrisonAttributes");
addToContainers_variable("", "How many \'slots\' the building has for units to be garrisoned in it. If this building is part of a garrison network then this is not used. If you\'re wondering where to edit the capacity of network it\'s URTSGameInstance::BuildingNetworkInfo", "Docs/Structs/FBuildingGarrisonAttributes/Variables/.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("SlotUsage", "Number of slots that are being used. Will change as selectables enter and exit. Not kept up to date if this building is part of a garrison network.", "Docs/Structs/FBuildingGarrisonAttributes/Variables/SlotUsage.html", ["slot", "usage"], "FBuildingGarrisonAttributes");
addToContainers_variable("HightestSightRadiusContainerContributor", "The unit that is contributing to the sight radius i.e. the unit with a sight radius larger than any other unit garrisoned in the building AND larger than the building\'s sight radius too If null then the building is the contributor", "Docs/Structs/FBuildingGarrisonAttributes/Variables/HightestSightRadiusContainerContr.html", ["hightest", "sight", "radius", "container", "contributor"], "FBuildingGarrisonAttributes");
addToContainers_variable("HighestStealthRevealRadiusContainerContributor", "", "Docs/Structs/FBuildingGarrisonAttributes/Variables/HighestStealthRevealRadiusContain.html", ["highest", "stealth", "reveal", "radius", "container", "contributor"], "FBuildingGarrisonAttributes");
addToContainers_variable("", "The mouse cursor to show for this garrison to say a unit can enter it", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_1.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "Range when units can enter garrison", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_2.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "A sound that can be played when a unit enters the garrison", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_3.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "A sound that can be played when a unit leaves the garrison", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_4.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "How all the units leave when given a command to all exit", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_5.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable(":", "If true then units that enter this garrison can see out of it i.e. their vision radius and stealth reveal radius still matter.", "Docs/Structs/FBuildingGarrisonAttributes/Variables/:.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "The building garrison network this is part of. Building garrison networks mean that units are shared across buildings e.g. - in C&C generals tunnel networks - in SCII nydus worms Use None if you do not want the building to be part of any network", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_6.html", [], "FBuildingGarrisonAttributes");
addToContainers_variable("", "bool bCanUnitsAttackFromInside;", "Docs/Structs/FBuildingGarrisonAttributes/Variables/_7.html", [], "FBuildingGarrisonAttributes");
addToContainers_struct("FBuildingAttributes", "", "Docs/Structs/FBuildingAttributes/FBuildingAttributes.html", ["building", "attributes"], "");
addToContainers_function("FBuildingAttributes", "", "Docs/Structs/FBuildingAttributes/Functions/FBuildingAttributes.html", ["building", "attributes"], "FBuildingAttributes");
addToContainers_function("GetHUDImage_Highlighted", "", "Docs/Structs/FBuildingAttributes/Functions/GetHUDImage_Highlighted.html", ["get", "h", "u", "d", "image_", "highlighted"], "FBuildingAttributes");
addToContainers_function("GetEffectiveSightRange", "", "Docs/Structs/FBuildingAttributes/Functions/GetEffectiveSightRange.html", ["get", "effective", "sight", "range"], "FBuildingAttributes");
addToContainers_function("GetEffectiveStealthRevealRange", "", "Docs/Structs/FBuildingAttributes/Functions/GetEffectiveStealthRevealRange.html", ["get", "effective", "stealth", "reveal", "range"], "FBuildingAttributes");
addToContainers_function("SetEffectiveSightRange", "@param Contributor - the actor that NewValue belongs to", "Docs/Structs/FBuildingAttributes/Functions/SetEffectiveSightRange.html", ["set", "effective", "sight", "range"], "FBuildingAttributes");
addToContainers_function("SetEffectiveStealthRevealRange", "", "Docs/Structs/FBuildingAttributes/Functions/SetEffectiveStealthRevealRange.html", ["set", "effective", "stealth", "reveal", "range"], "FBuildingAttributes");
addToContainers_function("GetProductionQueueLimit", "Capacity of context production queue", "Docs/Structs/FBuildingAttributes/Functions/GetProductionQueueLimit.html", ["get", "production", "queue", "limit"], "FBuildingAttributes");
addToContainers_function("GetNumPersistentBuildSlots", "Capacity of persistent build queue", "Docs/Structs/FBuildingAttributes/Functions/GetNumPersistentBuildSlots.html", ["get", "num", "persistent", "build", "slots"], "FBuildingAttributes");
addToContainers_function("GetProducedUnitInitialBehavior", "", "Docs/Structs/FBuildingAttributes/Functions/GetProducedUnitInitialBehavior.html", ["get", "produced", "unit", "initial", "behavior"], "FBuildingAttributes");
addToContainers_function("CanProduce", "TODO does it take into account persistent queues? DO they need to be taken into account?", "Docs/Structs/FBuildingAttributes/Functions/CanProduce.html", ["can", "produce"], "FBuildingAttributes");
addToContainers_function("IsAnimationValid", "", "Docs/Structs/FBuildingAttributes/Functions/IsAnimationValid.html", ["is", "animation", "valid"], "FBuildingAttributes");
addToContainers_function("GetAllAnimations", "", "Docs/Structs/FBuildingAttributes/Functions/GetAllAnimations.html", ["get", "all", "animations"], "FBuildingAttributes");
addToContainers_function("GetAnimation", "", "Docs/Structs/FBuildingAttributes/Functions/GetAnimation.html", ["get", "animation"], "FBuildingAttributes");
addToContainers_function("GetJustPlacedSound", "", "Docs/Structs/FBuildingAttributes/Functions/GetJustPlacedSound.html", ["get", "just", "placed", "sound"], "FBuildingAttributes");
addToContainers_function("GetBeingWorkedOnSound", "", "Docs/Structs/FBuildingAttributes/Functions/GetBeingWorkedOnSound.html", ["get", "being", "worked", "on", "sound"], "FBuildingAttributes");
addToContainers_function("OverridesFactionBuildMethod", "", "Docs/Structs/FBuildingAttributes/Functions/OverridesFactionBuildMethod.html", ["overrides", "faction", "build", "method"], "FBuildingAttributes");
addToContainers_function("GetBuildMethod", "", "Docs/Structs/FBuildingAttributes/Functions/GetBuildMethod.html", ["get", "build", "method"], "FBuildingAttributes");
addToContainers_function("SetBuildMethod", "", "Docs/Structs/FBuildingAttributes/Functions/SetBuildMethod.html", ["set", "build", "method"], "FBuildingAttributes");
addToContainers_function("OverrideFactionBuildProximity", "", "Docs/Structs/FBuildingAttributes/Functions/OverrideFactionBuildProximity.html", ["override", "faction", "build", "proximity"], "FBuildingAttributes");
addToContainers_function("GetBuildProximityRange", "", "Docs/Structs/FBuildingAttributes/Functions/GetBuildProximityRange.html", ["get", "build", "proximity", "range"], "FBuildingAttributes");
addToContainers_function("GetConstructTime", "", "Docs/Structs/FBuildingAttributes/Functions/GetConstructTime.html", ["get", "construct", "time"], "FBuildingAttributes");
addToContainers_function("GetResourceCollectionTypes", "", "Docs/Structs/FBuildingAttributes/Functions/GetResourceCollectionTypes.html", ["get", "resource", "collection", "types"], "FBuildingAttributes");
addToContainers_function("GetResourceDropRadius", "", "Docs/Structs/FBuildingAttributes/Functions/GetResourceDropRadius.html", ["get", "resource", "drop", "radius"], "FBuildingAttributes");
addToContainers_function("GetFoundationsRadius", "", "Docs/Structs/FBuildingAttributes/Functions/GetFoundationsRadius.html", ["get", "foundations", "radius"], "FBuildingAttributes");
addToContainers_function("GetHousingResourcesProvidedArray", "", "Docs/Structs/FBuildingAttributes/Functions/GetHousingResourcesProvidedArray.html", ["get", "housing", "resources", "provided", "array"], "FBuildingAttributes");
addToContainers_function("IsDefenseBuilding", "", "Docs/Structs/FBuildingAttributes/Functions/IsDefenseBuilding.html", ["is", "defense", "building"], "FBuildingAttributes");
addToContainers_function("GetPlacedParticles", "", "Docs/Structs/FBuildingAttributes/Functions/GetPlacedParticles.html", ["get", "placed", "particles"], "FBuildingAttributes");
addToContainers_function("GetAdvancingConstructionParticles", "", "Docs/Structs/FBuildingAttributes/Functions/GetAdvancingConstructionParticles.html", ["get", "advancing", "construction", "particles"], "FBuildingAttributes");
addToContainers_function("GetShoppingInfo", "", "Docs/Structs/FBuildingAttributes/Functions/GetShoppingInfo.html", ["get", "shopping", "info"], "FBuildingAttributes");
addToContainers_function("GetShoppingInfo", "", "Docs/Structs/FBuildingAttributes/Functions/GetShoppingInfo_1.html", ["get", "shopping", "info"], "FBuildingAttributes");
addToContainers_function("GetTimeIntoZeroHealthAnimThatAnimNotifyIsSlow", "", "Docs/Structs/FBuildingAttributes/Functions/GetTimeIntoZeroHealthAnimThatAnim.html", ["get", "time", "into", "zero", "health", "anim", "that", "anim", "notify", "is", "slow"], "FBuildingAttributes");
addToContainers_function("GetGarrisonAttributes", "", "Docs/Structs/FBuildingAttributes/Functions/GetGarrisonAttributes.html", ["get", "garrison", "attributes"], "FBuildingAttributes");
addToContainers_function("GetGarrisonAttributes", "", "Docs/Structs/FBuildingAttributes/Functions/GetGarrisonAttributes_1.html", ["get", "garrison", "attributes"], "FBuildingAttributes");
addToContainers_function("GetStaticBuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetStaticBuffs.html", ["get", "static", "buffs"], "FBuildingAttributes");
addToContainers_function("GetStaticBuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetStaticBuffs_1.html", ["get", "static", "buffs"], "FBuildingAttributes");
addToContainers_function("GetStaticDebuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetStaticDebuffs.html", ["get", "static", "debuffs"], "FBuildingAttributes");
addToContainers_function("GetStaticDebuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetStaticDebuffs_1.html", ["get", "static", "debuffs"], "FBuildingAttributes");
addToContainers_function("GetTickableBuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetTickableBuffs.html", ["get", "tickable", "buffs"], "FBuildingAttributes");
addToContainers_function("GetTickableBuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetTickableBuffs_1.html", ["get", "tickable", "buffs"], "FBuildingAttributes");
addToContainers_function("GetTickableDebuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetTickableDebuffs.html", ["get", "tickable", "debuffs"], "FBuildingAttributes");
addToContainers_function("GetTickableDebuffs", "", "Docs/Structs/FBuildingAttributes/Functions/GetTickableDebuffs_1.html", ["get", "tickable", "debuffs"], "FBuildingAttributes");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FBuildingAttributes/Functions/OnPostEdit.html", ["on", "post", "edit"], "FBuildingAttributes");
addToContainers_variable("", "", "Docs/Structs/FBuildingAttributes/Variables/.html", [], "FBuildingAttributes");
addToContainers_variable("", "Effective sight radius is the final sight radius to use for this building after taking into account all the units garrisoned inside of it", "Docs/Structs/FBuildingAttributes/Variables/_1.html", [], "FBuildingAttributes");
addToContainers_variable("", "Same except for stealth reveal radius instead", "Docs/Structs/FBuildingAttributes/Variables/_2.html", [], "FBuildingAttributes");
addToContainers_variable("", "The maximum amount of units/upgrades that can be queued in the training queue at once. Only one unit is trained at a time no matter the queue size. If this building is not a unit-producing building then setting this as 0 is a good way to save on memory. Cancelling an item in production or adding an item to production is O(n)", "Docs/Structs/FBuildingAttributes/Variables/_3.html", [], "FBuildingAttributes");
addToContainers_variable("", "What a unit that is produced from this building does after it has spawned", "Docs/Structs/FBuildingAttributes/Variables/_4.html", [], "FBuildingAttributes");
addToContainers_variable("", "Queue that handles production. This queue handles producing units and upgrades", "Docs/Structs/FBuildingAttributes/Variables/_5.html", [], "FBuildingAttributes");
addToContainers_variable("", "Another queue that handles production of buildings and upgrades when producing them from the HUD persistent panel. This is kept seperate from the other queue to allow players to build from the HUD persistent panel and use the context menu to produce stuff at the same time. Not something that a lot of people would probably use though", "Docs/Structs/FBuildingAttributes/Variables/_6.html", [], "FBuildingAttributes");
addToContainers_variable("", "True if the building has a production queue limit of at least 1 and has a \"Train\" or \"Upgrade\" command as one of its context commands. Edited by PostEditProperty", "Docs/Structs/FBuildingAttributes/Variables/_7.html", [], "FBuildingAttributes");
addToContainers_variable("", "Whether this building is a construction yard type building or not. This slot will be used to build buildings only and will use the persistent production queue Currently limited to 1", "Docs/Structs/FBuildingAttributes/Variables/_8.html", [], "FBuildingAttributes");
addToContainers_variable("", "Whether to override how the building is built defined in faction info", "Docs/Structs/FBuildingAttributes/Variables/_9.html", [], "FBuildingAttributes");
addToContainers_variable("", "The build method to use for this if choosing to override the faction default build method", "Docs/Structs/FBuildingAttributes/Variables/_10.html", [], "FBuildingAttributes");
addToContainers_variable("", "Whether to override AFactionInfo::BuildingProximityRange", "Docs/Structs/FBuildingAttributes/Variables/_11.html", [], "FBuildingAttributes");
addToContainers_variable("", "@See AFactionInfo::BuildingProximityRange", "Docs/Structs/FBuildingAttributes/Variables/_12.html", [], "FBuildingAttributes");
addToContainers_variable("", "Only applicable if: - this building uses the BuildsInTab build method. - this building does not have a \"construction\" animation The time it takes building to go from being placed to being fully constructed e.g. in Red Alert 3 and Allies power plant takes about 10secs to build, then you place it somewhere and it takes about another 2 seconds to construct. This variable refers to that 2nd time I mentioned Side note: If using a construct anim then make sure an anim notfy has been placed at the end of the animation to signal construction finished", "Docs/Structs/FBuildingAttributes/Variables/_13.html", [], "FBuildingAttributes");
addToContainers_variable("", "Animations to play", "Docs/Structs/FBuildingAttributes/Variables/_14.html", [], "FBuildingAttributes");
addToContainers_variable("", "Sound to play in the world when the building is placed into the world", "Docs/Structs/FBuildingAttributes/Variables/_15.html", [], "FBuildingAttributes");
addToContainers_variable("", "Sound to play while the building is being worked on. It should be looping. I think this will play even if your build method is one the 3 that builds itself", "Docs/Structs/FBuildingAttributes/Variables/_16.html", [], "FBuildingAttributes");
addToContainers_variable("", "Array of resources that can be dropped off at this building by resource gatherers e.g. in Starcraft II a nexus is a drop point for minerals and vespene gas", "Docs/Structs/FBuildingAttributes/Variables/_17.html", [], "FBuildingAttributes");
addToContainers_variable("", "How close collector has to get to depot for it to be able to drop off resources. Measured from building\'s GetActorLocation() to dunno", "Docs/Structs/FBuildingAttributes/Variables/_18.html", [], "FBuildingAttributes");
addToContainers_variable("", "Radius for how close unit has to get to building before it can lay down its foundations, measured from building\'s GetActorLocation() to dunno", "Docs/Structs/FBuildingAttributes/Variables/_19.html", [], "FBuildingAttributes");
addToContainers_variable("", "How much of the housing resources this building provides", "Docs/Structs/FBuildingAttributes/Variables/_20.html", [], "FBuildingAttributes");
addToContainers_variable("", "This array contains the values in HousingResourcesProvided and is updated on post edit. It exists for performance only", "Docs/Structs/FBuildingAttributes/Variables/_21.html", [], "FBuildingAttributes");
addToContainers_variable("", "The items this shop has on display and optionally sells", "Docs/Structs/FBuildingAttributes/Variables/_22.html", [], "FBuildingAttributes");
addToContainers_variable("", "", "Docs/Structs/FBuildingAttributes/Variables/_23.html", [], "FBuildingAttributes");
addToContainers_variable("", "The particles to play when the building is placed into the world. Will not show if building is a starting selectable. They do not move as the building rises This particle system will not be stopped so it should not be looping", "Docs/Structs/FBuildingAttributes/Variables/_24.html", [], "FBuildingAttributes");
addToContainers_variable("", "The particles to play while the building\'s construction progress is being advanced. They do not move as the building rises These particles should be looping.", "Docs/Structs/FBuildingAttributes/Variables/_25.html", [], "FBuildingAttributes");
addToContainers_variable("StaticBuffs", "Array for static buffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/StaticBuffs.html", ["static", "buffs"], "FBuildingAttributes");
addToContainers_variable("StaticDebuffs", "Array of static debuffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/StaticDebuffs.html", ["static", "debuffs"], "FBuildingAttributes");
addToContainers_variable("TickableBuffs", "Array of tickable buffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/TickableBuffs.html", ["tickable", "buffs"], "FBuildingAttributes");
addToContainers_variable("TickableDebuffs", "Array of tickable debuffs applied to this building", "Docs/Structs/FBuildingAttributes/Variables/TickableDebuffs.html", ["tickable", "debuffs"], "FBuildingAttributes");
addToContainers_variable("", "Whether this building is a base defense type building", "Docs/Structs/FBuildingAttributes/Variables/_26.html", [], "FBuildingAttributes");
addToContainers_variable("", "Array of all attack components on this building", "Docs/Structs/FBuildingAttributes/Variables/_27.html", [], "FBuildingAttributes");
addToContainers_variable("", "Rotatable bases of the turrets", "Docs/Structs/FBuildingAttributes/Variables/_28.html", [], "FBuildingAttributes");
addToContainers_variable("", "How far above the building\'s mesh its persistent world widget should appear. The axis are probably slightly misleading. The X is left and right and the Y is up and down", "Docs/Structs/FBuildingAttributes/Variables/_29.html", [], "FBuildingAttributes");
addToContainers_variable("", "How far above the building\'s mesh its selection world widget should appear The axis are probably slightly misleading. The X is left and right and the Y is up and down", "Docs/Structs/FBuildingAttributes/Variables/_30.html", [], "FBuildingAttributes");
addToContainers_variable("", "", "Docs/Structs/FBuildingAttributes/Variables/_31.html", [], "FBuildingAttributes");
addToContainers_struct("FEnteringGarrisonAttributes", "", "Docs/Structs/FEnteringGarrisonAttributes/FEnteringGarrisonAttributes.html", ["entering", "garrison", "attributes"], "");
addToContainers_function("FEnteringGarrisonAttributes", "", "Docs/Structs/FEnteringGarrisonAttributes/Functions/FEnteringGarrisonAttributes.html", ["entering", "garrison", "attributes"], "FEnteringGarrisonAttributes");
addToContainers_function("GetBuildingGarrisonSlotUsage", "", "Docs/Structs/FEnteringGarrisonAttributes/Functions/GetBuildingGarrisonSlotUsage.html", ["get", "building", "garrison", "slot", "usage"], "FEnteringGarrisonAttributes");
addToContainers_variable("", "How many garrison slots this unit uses inside building garrisons", "Docs/Structs/FEnteringGarrisonAttributes/Variables/.html", [], "FEnteringGarrisonAttributes");
addToContainers_struct("FInfantryAttributes", "Attributes common to all infantry", "Docs/Structs/FInfantryAttributes/FInfantryAttributes.html", ["infantry", "attributes"], "");
addToContainers_function("FInfantryAttributes", "", "Docs/Structs/FInfantryAttributes/Functions/FInfantryAttributes.html", ["infantry", "attributes"], "FInfantryAttributes");
addToContainers_function("TellHUDAboutChange_ExperienceGainMultiplier", "", "Docs/Structs/FInfantryAttributes/Functions/TellHUDAboutChange_ExperienceGain.html", ["tell", "h", "u", "d", "about", "change_", "experience", "gain", "multiplier"], "FInfantryAttributes");
addToContainers_function("ShouldSpawnStealthed", "", "Docs/Structs/FInfantryAttributes/Functions/ShouldSpawnStealthed.html", ["should", "spawn", "stealthed"], "FInfantryAttributes");
addToContainers_function("GetInStealthParamValue", "Get the value to set on the param of a material", "Docs/Structs/FInfantryAttributes/Functions/GetInStealthParamValue.html", ["get", "in", "stealth", "param", "value"], "FInfantryAttributes");
addToContainers_function("GetHousingCosts", "", "Docs/Structs/FInfantryAttributes/Functions/GetHousingCosts.html", ["get", "housing", "costs"], "FInfantryAttributes");
addToContainers_function("GetMoveCommandSound", "", "Docs/Structs/FInfantryAttributes/Functions/GetMoveCommandSound.html", ["get", "move", "command", "sound"], "FInfantryAttributes");
addToContainers_function("GetCommandSound", "", "Docs/Structs/FInfantryAttributes/Functions/GetCommandSound.html", ["get", "command", "sound"], "FInfantryAttributes");
addToContainers_function("GetInventory", "", "Docs/Structs/FInfantryAttributes/Functions/GetInventory.html", ["get", "inventory"], "FInfantryAttributes");
addToContainers_function("GetInventory", "", "Docs/Structs/FInfantryAttributes/Functions/GetInventory_1.html", ["get", "inventory"], "FInfantryAttributes");
addToContainers_function("LevelToArrayIndex", "Converts a level to the index in ExperienceRequirementsArray it should be", "Docs/Structs/FInfantryAttributes/Functions/LevelToArrayIndex.html", ["level", "to", "array", "index"], "FInfantryAttributes");
addToContainers_function("GetTotalExperienceRequirementForLevel", "Get how much total experience is required to reach a level when on the previous level", "Docs/Structs/FInfantryAttributes/Functions/GetTotalExperienceRequirementForL.html", ["get", "total", "experience", "requirement", "for", "level"], "FInfantryAttributes");
addToContainers_function("CanEverGainExperience", "", "Docs/Structs/FInfantryAttributes/Functions/CanEverGainExperience.html", ["can", "ever", "gain", "experience"], "FInfantryAttributes");
addToContainers_function("GetStaticBuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetStaticBuffs.html", ["get", "static", "buffs"], "FInfantryAttributes");
addToContainers_function("GetStaticBuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetStaticBuffs_1.html", ["get", "static", "buffs"], "FInfantryAttributes");
addToContainers_function("GetStaticDebuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetStaticDebuffs.html", ["get", "static", "debuffs"], "FInfantryAttributes");
addToContainers_function("GetStaticDebuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetStaticDebuffs_1.html", ["get", "static", "debuffs"], "FInfantryAttributes");
addToContainers_function("GetTickableBuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetTickableBuffs.html", ["get", "tickable", "buffs"], "FInfantryAttributes");
addToContainers_function("GetTickableBuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetTickableBuffs_1.html", ["get", "tickable", "buffs"], "FInfantryAttributes");
addToContainers_function("GetTickableDebuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetTickableDebuffs.html", ["get", "tickable", "debuffs"], "FInfantryAttributes");
addToContainers_function("GetTickableDebuffs", "", "Docs/Structs/FInfantryAttributes/Functions/GetTickableDebuffs_1.html", ["get", "tickable", "debuffs"], "FInfantryAttributes");
addToContainers_function("GetNumTempMoveSpeedModifiers", "Get how many move temporary move speed modifiers have been applied to this unit", "Docs/Structs/FInfantryAttributes/Functions/GetNumTempMoveSpeedModifiers.html", ["get", "num", "temp", "move", "speed", "modifiers"], "FInfantryAttributes");
addToContainers_function("GetExperienceGainMultiplier", "Get the current experience gain multiplier", "Docs/Structs/FInfantryAttributes/Functions/GetExperienceGainMultiplier.html", ["get", "experience", "gain", "multiplier"], "FInfantryAttributes");
addToContainers_function("GetDefaultExperienceGainMultiplier", "Get the experience gain multiplier excluding any temporary effects", "Docs/Structs/FInfantryAttributes/Functions/GetDefaultExperienceGainMultiplie.html", ["get", "default", "experience", "gain", "multiplier"], "FInfantryAttributes");
addToContainers_function("SetExperienceGainMultiplier", "Permanently change the experience gain multiplier", "Docs/Structs/FInfantryAttributes/Functions/SetExperienceGainMultiplier.html", ["set", "experience", "gain", "multiplier"], "FInfantryAttributes");
addToContainers_function("SetExperienceGainMultiplierViaMultiplier", "", "Docs/Structs/FInfantryAttributes/Functions/SetExperienceGainMultiplierViaMul.html", ["set", "experience", "gain", "multiplier", "via", "multiplier"], "FInfantryAttributes");
addToContainers_function("ApplyTempExperienceGainMultiplierViaMultiplier", "@return - experience gain multiplier after the change has been applied", "Docs/Structs/FInfantryAttributes/Functions/ApplyTempExperienceGainMultiplier.html", ["apply", "temp", "experience", "gain", "multiplier", "via", "multiplier"], "FInfantryAttributes");
addToContainers_function("RemoveTempExperienceGainMultiplierViaMultiplier", "", "Docs/Structs/FInfantryAttributes/Functions/RemoveTempExperienceGainMultiplie.html", ["remove", "temp", "experience", "gain", "multiplier", "via", "multiplier"], "FInfantryAttributes");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FInfantryAttributes/Functions/OnPostEdit.html", ["on", "post", "edit"], "FInfantryAttributes");
addToContainers_variable("", "How much of the housing resource this unit costs", "Docs/Structs/FInfantryAttributes/Variables/.html", [], "FInfantryAttributes");
addToContainers_variable("", "This is a contract variable. Setting this to true means it is possible for this unit to enter stealth at some point. Setting this to false can be an optimization", "Docs/Structs/FInfantryAttributes/Variables/_1.html", [], "FInfantryAttributes");
addToContainers_variable("", "If true unit will spawn stealthed. Optionally you can have this unit reveal itself when it does something by adding the anim notify \'OnExitStealthMode\' to the Attack/GatherResources/whatever animations. My notes: I think this variable basically means the unit is a stealth unit e.g. jarmen kell, dark templars. If an upgrade now wants to make a unit stealth then this is the variable to set.", "Docs/Structs/FInfantryAttributes/Variables/_2.html", [], "FInfantryAttributes");
addToContainers_variable("", "If true then the unit is in a state where if it decides to break its stealth then it will re-enter it after a StealthRevealTime delay. False basically means we won\'t try re-enter stealth This will rarely change during gameplay. I don\'t even know but this variable might be redundant. Anytime this is used bSpawnStealthed could possibly replace it", "Docs/Structs/FInfantryAttributes/Variables/_3.html", [], "FInfantryAttributes");
addToContainers_variable("", "Time from when the unit breaks stealth to when it should re-enter stealth. \"Breaks stealth\" means you executed an action that should remove your stealth, and has nothing to do with being detected by an enemy. Some special values for this: - Setting this to 0 and/or not setting the \'OnExitStealthMode\' anim notifies means unit will not reveal self ever (similar to ghosts or dark templars in SCII) unless given an explicit command to do so (e.g. using unclock for ghosts). - Setting this to less than 0 means unit will never re-enter stealth after notify and will require an explicit command to re-enter stealth", "Docs/Structs/FInfantryAttributes/Variables/_4.html", [], "FInfantryAttributes");
addToContainers_variable("", "Name of param in dynamic material instance that controls the stealth effect", "Docs/Structs/FInfantryAttributes/Variables/_5.html", [], "FInfantryAttributes");
addToContainers_variable("", "Value to set on stealth material instance when in stealth mode. If the param is controlling alpha then this will likely want to be something less than 1", "Docs/Structs/FInfantryAttributes/Variables/_6.html", [], "FInfantryAttributes");
addToContainers_variable("", "Whether the unit can ever gain experience", "Docs/Structs/FInfantryAttributes/Variables/_7.html", [], "FInfantryAttributes");
addToContainers_variable("", "How much experience is required to reach the level. Non-cumulative so these values are how much to go from the current level to the next. If this is greyed out check LevelingUpOptions::EXPERIENCE_ENABLED_GAME in ProjectSettings.h", "Docs/Structs/FInfantryAttributes/Variables/_8.html", [], "FInfantryAttributes");
addToContainers_variable("", "Values from TMap. Gets populated in post edit. Index 0 = first gainable level, index 1 = second gainable level, and so on e.g. If you start on level 1 and can level up to 3: index 0 = EXP requirement for level 2 index 1 = EXP requirement for level 3", "Docs/Structs/FInfantryAttributes/Variables/_9.html", [], "FInfantryAttributes");
addToContainers_variable("", "Multiplies experience earned. Higher = level up faster", "Docs/Structs/FInfantryAttributes/Variables/_10.html", [], "FInfantryAttributes");
addToContainers_variable("", "Whether the unit can build buildings. This is set automatically during post edit, usually if the context menu has at least one button for building a building", "Docs/Structs/FInfantryAttributes/Variables/_11.html", [], "FInfantryAttributes");
addToContainers_variable("", "Whether unit can repair buildings. Repairs only, not construction", "Docs/Structs/FInfantryAttributes/Variables/_12.html", [], "FInfantryAttributes");
addToContainers_variable("", "Resource collection properties. The game wide rules for resource collection are as follows: ----- It\'s basically the same as SCII. To be more specific: ------ - Each resource spot (similar to a mineral patch in SCII) can provide only one type of resource. - Each resource drop point (similar to a nexus in SCII) is allowed to take in multiple resource types. - A collector (like probes in SCII) must stay its full duration at a resource spot uninterrupted for it to gain its capacity in resources. If interrupted it must restart the timer for gathering resource (same behavior as SCII I believe). - If a collector holding resources chooses to gather from another resource spot of a different resource type it will lose the resources it has already gathered upon successfully gathering the new resource type (same behavior as SCII I believe)", "Docs/Structs/FInfantryAttributes/Variables/_13.html", [], "FInfantryAttributes");
addToContainers_variable("", "The items this unit has", "Docs/Structs/FInfantryAttributes/Variables/_14.html", [], "FInfantryAttributes");
addToContainers_variable("", "", "Docs/Structs/FInfantryAttributes/Variables/_15.html", [], "FInfantryAttributes");
addToContainers_variable("", "The mouse cursor to show when player hovers their mouse over a hostile selectable that this unit can attack", "Docs/Structs/FInfantryAttributes/Variables/_16.html", [], "FInfantryAttributes");
addToContainers_variable("", "The mouse cursor to show when player hovers their mouse over a friendly selectable that this unit can attack", "Docs/Structs/FInfantryAttributes/Variables/_17.html", [], "FInfantryAttributes");
addToContainers_variable("", "", "Docs/Structs/FInfantryAttributes/Variables/_18.html", [], "FInfantryAttributes");
addToContainers_variable("StaticBuffs", "Buffs applied to this infantry that do not expire on their own and have no tick logic. Using an array because it helps with displaying them on UI", "Docs/Structs/FInfantryAttributes/Variables/StaticBuffs.html", ["static", "buffs"], "FInfantryAttributes");
addToContainers_variable("StaticDebuffs", "Debuffs applied to this infantry that do not expire on their own and have no tick logic. Using an array because it helps with displaying them on UI", "Docs/Structs/FInfantryAttributes/Variables/StaticDebuffs.html", ["static", "debuffs"], "FInfantryAttributes");
addToContainers_variable("TickableBuffs", "Buffs applied to this infantry that can expire on their own and/or have tick logic. Advantages of using array: - faster iteration during tick Advantages of set: - faster containment checks for knowing if buff/debuff is applied which could be commonly used for abilities and/or applying buffs/debuffs", "Docs/Structs/FInfantryAttributes/Variables/TickableBuffs.html", ["tickable", "buffs"], "FInfantryAttributes");
addToContainers_variable("TickableDebuffs", "Just like TickableBuffs but for debuffs", "Docs/Structs/FInfantryAttributes/Variables/TickableDebuffs.html", ["tickable", "debuffs"], "FInfantryAttributes");
addToContainers_variable("AttachedParticles", "Particles that are attached to the unit", "Docs/Structs/FInfantryAttributes/Variables/AttachedParticles.html", ["attached", "particles"], "FInfantryAttributes");
addToContainers_variable("NumTempMoveSpeedModifiers", "How many move speed multipliers have been applied to this unit. Counts both speed ups and slow downs. This is here to correct for gradual floating point number drift", "Docs/Structs/FInfantryAttributes/Variables/NumTempMoveSpeedModifiers.html", ["num", "temp", "move", "speed", "modifiers"], "FInfantryAttributes");
addToContainers_variable("NumTempExperienceGainModifiers", "", "Docs/Structs/FInfantryAttributes/Variables/NumTempExperienceGainModifiers.html", ["num", "temp", "experience", "gain", "modifiers"], "FInfantryAttributes");
addToContainers_variable("DefaultExperienceGainMultiplier", "", "Docs/Structs/FInfantryAttributes/Variables/DefaultExperienceGainMultiplier.html", ["default", "experience", "gain", "multiplier"], "FInfantryAttributes");
addToContainers_variable("NumTempStealthModeEffects", "How many temporary effects (such as those from buffs/debuffs) are on us that give us stealth mode", "Docs/Structs/FInfantryAttributes/Variables/NumTempStealthModeEffects.html", ["num", "temp", "stealth", "mode", "effects"], "FInfantryAttributes");
addToContainers_variable("", "The sound to try play when given a move command", "Docs/Structs/FInfantryAttributes/Variables/_19.html", [], "FInfantryAttributes");
addToContainers_variable("", "", "Docs/Structs/FInfantryAttributes/Variables/_20.html", [], "FInfantryAttributes");
addToContainers_struct("FStartingSelectables", "The selectables a player starts the match with. Kind of a game mode struct", "Docs/Structs/FStartingSelectables/FStartingSelectables.html", ["starting", "selectables"], "");
addToContainers_function("AddStartingSelectable", "", "Docs/Structs/FStartingSelectables/Functions/AddStartingSelectable.html", ["add", "starting", "selectable"], "FStartingSelectables");
addToContainers_function("AddStartingSelectable", "", "Docs/Structs/FStartingSelectables/Functions/AddStartingSelectable_1.html", ["add", "starting", "selectable"], "FStartingSelectables");
addToContainers_function("SetStartingBuildings", "", "Docs/Structs/FStartingSelectables/Functions/SetStartingBuildings.html", ["set", "starting", "buildings"], "FStartingSelectables");
addToContainers_function("SetStartingUnits", "", "Docs/Structs/FStartingSelectables/Functions/SetStartingUnits.html", ["set", "starting", "units"], "FStartingSelectables");
addToContainers_function("GetBuildings", "", "Docs/Structs/FStartingSelectables/Functions/GetBuildings.html", ["get", "buildings"], "FStartingSelectables");
addToContainers_function("GetUnits", "", "Docs/Structs/FStartingSelectables/Functions/GetUnits.html", ["get", "units"], "FStartingSelectables");
addToContainers_variable("Buildings", "", "Docs/Structs/FStartingSelectables/Variables/Buildings.html", [], "FStartingSelectables");
addToContainers_variable("Units", "", "Docs/Structs/FStartingSelectables/Variables/Units.html", [], "FStartingSelectables");
addToContainers_struct("FGameNotificationInfo", "Image + sound cue for a game notification", "Docs/Structs/FGameNotificationInfo/FGameNotificationInfo.html", ["game", "notification", "info"], "");
addToContainers_function("FGameNotificationInfo", "", "Docs/Structs/FGameNotificationInfo/Functions/FGameNotificationInfo.html", ["game", "notification", "info"], "FGameNotificationInfo");
addToContainers_function("FGameNotificationInfo", "", "Docs/Structs/FGameNotificationInfo/Functions/FGameNotificationInfo_1.html", ["game", "notification", "info"], "FGameNotificationInfo");
addToContainers_function("GetMessage", "", "Docs/Structs/FGameNotificationInfo/Functions/GetMessage.html", ["get", "message"], "FGameNotificationInfo");
addToContainers_function("GetSound", "", "Docs/Structs/FGameNotificationInfo/Functions/GetSound.html", ["get", "sound"], "FGameNotificationInfo");
addToContainers_function("SetMessage", "", "Docs/Structs/FGameNotificationInfo/Functions/SetMessage.html", ["set", "message"], "FGameNotificationInfo");
addToContainers_function("SetSound", "", "Docs/Structs/FGameNotificationInfo/Functions/SetSound.html", ["set", "sound"], "FGameNotificationInfo");
addToContainers_variable("", "Message to show on the HUD", "Docs/Structs/FGameNotificationInfo/Variables/.html", [], "FGameNotificationInfo");
addToContainers_variable("", "UI sound to play", "Docs/Structs/FGameNotificationInfo/Variables/_1.html", [], "FGameNotificationInfo");
addToContainers_struct("FGameWarningInfo", "Image + sound cue for a game warning", "Docs/Structs/FGameWarningInfo/FGameWarningInfo.html", ["game", "warning", "info"], "");
addToContainers_function("FGameWarningInfo", "", "Docs/Structs/FGameWarningInfo/Functions/FGameWarningInfo.html", ["game", "warning", "info"], "FGameWarningInfo");
addToContainers_function("FGameWarningInfo", "", "Docs/Structs/FGameWarningInfo/Functions/FGameWarningInfo_1.html", ["game", "warning", "info"], "FGameWarningInfo");
addToContainers_function("GetMessage", "", "Docs/Structs/FGameWarningInfo/Functions/GetMessage.html", ["get", "message"], "FGameWarningInfo");
addToContainers_function("GetSound", "", "Docs/Structs/FGameWarningInfo/Functions/GetSound.html", ["get", "sound"], "FGameWarningInfo");
addToContainers_function("SetMessage", "", "Docs/Structs/FGameWarningInfo/Functions/SetMessage.html", ["set", "message"], "FGameWarningInfo");
addToContainers_function("SetSound", "", "Docs/Structs/FGameWarningInfo/Functions/SetSound.html", ["set", "sound"], "FGameWarningInfo");
addToContainers_variable("", "Message to show on the HUD", "Docs/Structs/FGameWarningInfo/Variables/.html", [], "FGameWarningInfo");
addToContainers_variable("", "UI sound to play", "Docs/Structs/FGameWarningInfo/Variables/_1.html", [], "FGameWarningInfo");
addToContainers_struct("FUnifiedMouseFocusImage", "Holds info about how the image to draw overtop of a button when it is being hovered/pressed", "Docs/Structs/FUnifiedMouseFocusImage/FUnifiedMouseFocusImage.html", ["unified", "mouse", "focus", "image"], "");
addToContainers_function("FUnifiedMouseFocusImage", "", "Docs/Structs/FUnifiedMouseFocusImage/Functions/FUnifiedMouseFocusImage.html", ["unified", "mouse", "focus", "image"], "FUnifiedMouseFocusImage");
addToContainers_function("UsingImage", "", "Docs/Structs/FUnifiedMouseFocusImage/Functions/UsingImage.html", ["using", "image"], "FUnifiedMouseFocusImage");
addToContainers_function("GetBrush", "", "Docs/Structs/FUnifiedMouseFocusImage/Functions/GetBrush.html", ["get", "brush"], "FUnifiedMouseFocusImage");
addToContainers_variable("", "", "Docs/Structs/FUnifiedMouseFocusImage/Variables/.html", [], "FUnifiedMouseFocusImage");
addToContainers_variable("", "My notes on FSlateBrush: could probably create my own struct for images. It could do away with some of the extras on FSlateBrush that I don\'t need", "Docs/Structs/FUnifiedMouseFocusImage/Variables/_1.html", [], "FUnifiedMouseFocusImage");
addToContainers_struct("FUnifiedUIButtonSound", "Info about a sound", "Docs/Structs/FUnifiedUIButtonSound/FUnifiedUIButtonSound.html", ["unified", "u", "i", "button", "sound"], "");
addToContainers_function("FUnifiedUIButtonSound", "", "Docs/Structs/FUnifiedUIButtonSound/Functions/FUnifiedUIButtonSound.html", ["unified", "u", "i", "button", "sound"], "FUnifiedUIButtonSound");
addToContainers_function("UsingSound", "", "Docs/Structs/FUnifiedUIButtonSound/Functions/UsingSound.html", ["using", "sound"], "FUnifiedUIButtonSound");
addToContainers_function("GetSound", "", "Docs/Structs/FUnifiedUIButtonSound/Functions/GetSound.html", ["get", "sound"], "FUnifiedUIButtonSound");
addToContainers_variable("", "Whether to use the sound for every button type this struct is for.", "Docs/Structs/FUnifiedUIButtonSound/Variables/.html", [], "FUnifiedUIButtonSound");
addToContainers_variable("", "", "Docs/Structs/FUnifiedUIButtonSound/Variables/_1.html", [], "FUnifiedUIButtonSound");
addToContainers_struct("FUnifiedImageAndSoundAssets", "Contains images and sounds", "Docs/Structs/FUnifiedImageAndSoundAssets/FUnifiedImageAndSoundAssets.html", ["unified", "image", "and", "sound", "assets"], "");
addToContainers_function("GetUnifiedMouseHoverImage", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Functions/GetUnifiedMouseHoverImage.html", ["get", "unified", "mouse", "hover", "image"], "FUnifiedImageAndSoundAssets");
addToContainers_function("GetUnifiedMousePressImage", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Functions/GetUnifiedMousePressImage.html", ["get", "unified", "mouse", "press", "image"], "FUnifiedImageAndSoundAssets");
addToContainers_function("GetUnifiedMouseHoverSound", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Functions/GetUnifiedMouseHoverSound.html", ["get", "unified", "mouse", "hover", "sound"], "FUnifiedImageAndSoundAssets");
addToContainers_function("GetUnifiedPressedByLMBSound", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Functions/GetUnifiedPressedByLMBSound.html", ["get", "unified", "pressed", "by", "l", "m", "b", "sound"], "FUnifiedImageAndSoundAssets");
addToContainers_function("GetUnifiedPressedByRMBSound", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Functions/GetUnifiedPressedByRMBSound.html", ["get", "unified", "pressed", "by", "r", "m", "b", "sound"], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_1.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_2.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_3.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_variable("", "", "Docs/Structs/FUnifiedImageAndSoundAssets/Variables/_4.html", [], "FUnifiedImageAndSoundAssets");
addToContainers_struct("FVisibilityInfo", "Holds a TMap that maps each unit to whether it is currently visible or hidden.", "Docs/Structs/FVisibilityInfo/FVisibilityInfo.html", ["visibility", "info"], "");
addToContainers_function("AddToMap", "Add to map and set visibility info false", "Docs/Structs/FVisibilityInfo/Functions/AddToMap.html", ["add", "to", "map"], "FVisibilityInfo");
addToContainers_function("RemoveFromMap", "", "Docs/Structs/FVisibilityInfo/Functions/RemoveFromMap.html", ["remove", "from", "map"], "FVisibilityInfo");
addToContainers_function("IsVisible", "Returns true if an actor is currently visible", "Docs/Structs/FVisibilityInfo/Functions/IsVisible.html", ["is", "visible"], "FVisibilityInfo");
addToContainers_function("SetVisibility", "", "Docs/Structs/FVisibilityInfo/Functions/SetVisibility.html", ["set", "visibility"], "FVisibilityInfo");
addToContainers_variable("", "", "Docs/Structs/FVisibilityInfo/Variables/.html", [], "FVisibilityInfo");
addToContainers_struct("FUint64Array", "Holds array of uint64. Workaround for non multidimension TArrays", "Docs/Structs/FUint64Array/FUint64Array.html", ["uint64", "array"], "");
addToContainers_function("AddToArray", "", "Docs/Structs/FUint64Array/Functions/AddToArray.html", ["add", "to", "array"], "FUint64Array");
addToContainers_function("GetArray", "Getters and setters", "Docs/Structs/FUint64Array/Functions/GetArray.html", ["get", "array"], "FUint64Array");
addToContainers_variable("", "", "Docs/Structs/FUint64Array/Variables/.html", [], "FUint64Array");
addToContainers_struct("FAttackAttributes", "Attributes common to anything that attacks", "Docs/Structs/FAttackAttributes/FAttackAttributes.html", ["attack", "attributes"], "");
addToContainers_function("TellHUDAboutChange_ImpactDamage", "========================================================================================", "Docs/Structs/FAttackAttributes/Functions/TellHUDAboutChange_ImpactDamage.html", ["tell", "h", "u", "d", "about", "change_", "impact", "damage"], "FAttackAttributes");
addToContainers_function("TellHUDAboutChange_ImpactDamageType", "", "Docs/Structs/FAttackAttributes/Functions/TellHUDAboutChange_ImpactDamageTy.html", ["tell", "h", "u", "d", "about", "change_", "impact", "damage", "type"], "FAttackAttributes");
addToContainers_function("TellHUDAboutChange_AttackRate", "", "Docs/Structs/FAttackAttributes/Functions/TellHUDAboutChange_AttackRate.html", ["tell", "h", "u", "d", "about", "change_", "attack", "rate"], "FAttackAttributes");
addToContainers_function("TellHUDAboutChange_AttackRange", "", "Docs/Structs/FAttackAttributes/Functions/TellHUDAboutChange_AttackRange.html", ["tell", "h", "u", "d", "about", "change_", "attack", "range"], "FAttackAttributes");
addToContainers_function("FAttackAttributes", "", "Docs/Structs/FAttackAttributes/Functions/FAttackAttributes.html", ["attack", "attributes"], "FAttackAttributes");
addToContainers_function("SetValues", "This function was added for artillery strike ability", "Docs/Structs/FAttackAttributes/Functions/SetValues.html", ["set", "values"], "FAttackAttributes");
addToContainers_function("SetValues", "", "Docs/Structs/FAttackAttributes/Functions/SetValues_1.html", ["set", "values"], "FAttackAttributes");
addToContainers_function("SetDamageValues", "Given some unit info set what the damage values should be on this struct. This will set the values of this struct without any upgrades considered", "Docs/Structs/FAttackAttributes/Functions/SetDamageValues.html", ["set", "damage", "values"], "FAttackAttributes");
addToContainers_function("GetAcceptableTargetTypes", "", "Docs/Structs/FAttackAttributes/Functions/GetAcceptableTargetTypes.html", ["get", "acceptable", "target", "types"], "FAttackAttributes");
addToContainers_function("GetMuzzleParticles", "", "Docs/Structs/FAttackAttributes/Functions/GetMuzzleParticles.html", ["get", "muzzle", "particles"], "FAttackAttributes");
addToContainers_function("GetProjectileBP", "", "Docs/Structs/FAttackAttributes/Functions/GetProjectileBP.html", ["get", "projectile", "b", "p"], "FAttackAttributes");
addToContainers_function("GetDamageInfo", "", "Docs/Structs/FAttackAttributes/Functions/GetDamageInfo.html", ["get", "damage", "info"], "FAttackAttributes");
addToContainers_function("ShouldOverrideProjectileDamageValues", "", "Docs/Structs/FAttackAttributes/Functions/ShouldOverrideProjectileDamageVal.html", ["should", "override", "projectile", "damage", "values"], "FAttackAttributes");
addToContainers_function("GetMuzzleSocket", "", "Docs/Structs/FAttackAttributes/Functions/GetMuzzleSocket.html", ["get", "muzzle", "socket"], "FAttackAttributes");
addToContainers_function("GetMuzzleCameraShakeBP", "", "Docs/Structs/FAttackAttributes/Functions/GetMuzzleCameraShakeBP.html", ["get", "muzzle", "camera", "shake", "b", "p"], "FAttackAttributes");
addToContainers_function("GetMuzzleShakeRadius", "", "Docs/Structs/FAttackAttributes/Functions/GetMuzzleShakeRadius.html", ["get", "muzzle", "shake", "radius"], "FAttackAttributes");
addToContainers_function("GetMuzzleShakeFalloff", "", "Docs/Structs/FAttackAttributes/Functions/GetMuzzleShakeFalloff.html", ["get", "muzzle", "shake", "falloff"], "FAttackAttributes");
addToContainers_function("GetPreparationSound", "", "Docs/Structs/FAttackAttributes/Functions/GetPreparationSound.html", ["get", "preparation", "sound"], "FAttackAttributes");
addToContainers_function("GetAttackMadeSound", "", "Docs/Structs/FAttackAttributes/Functions/GetAttackMadeSound.html", ["get", "attack", "made", "sound"], "FAttackAttributes");
addToContainers_function("GetImpactDamage", "", "Docs/Structs/FAttackAttributes/Functions/GetImpactDamage.html", ["get", "impact", "damage"], "FAttackAttributes");
addToContainers_function("GetDefaultImpactDamage", "Get how much damage we deal when no temporary effects like buffs/debuffs are applied", "Docs/Structs/FAttackAttributes/Functions/GetDefaultImpactDamage.html", ["get", "default", "impact", "damage"], "FAttackAttributes");
addToContainers_function("SetImpactDamage", "Functions to change how much damage we deal. Suitable to call for permanent type effects such as upgrades or level up bonuses", "Docs/Structs/FAttackAttributes/Functions/SetImpactDamage.html", ["set", "impact", "damage"], "FAttackAttributes");
addToContainers_function("SetImpactDamageViaMultiplier", "", "Docs/Structs/FAttackAttributes/Functions/SetImpactDamageViaMultiplier.html", ["set", "impact", "damage", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("ApplyTempImpactDamageModifierViaMultiplier", "Functions to change how much damage we deal. Suitable to call for temporary effects such as buffs/debuffs and inventory items", "Docs/Structs/FAttackAttributes/Functions/ApplyTempImpactDamageModifierViaM.html", ["apply", "temp", "impact", "damage", "modifier", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("RemoveTempImpactDamageModifierViaMultiplier", "", "Docs/Structs/FAttackAttributes/Functions/RemoveTempImpactDamageModifierVia.html", ["remove", "temp", "impact", "damage", "modifier", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("GetImpactDamageType", "", "Docs/Structs/FAttackAttributes/Functions/GetImpactDamageType.html", ["get", "impact", "damage", "type"], "FAttackAttributes");
addToContainers_function("SetImpactDamageType", "Set what the new damage type is. Suitable to call for permanent type effects like upgrades or level up bonuses", "Docs/Structs/FAttackAttributes/Functions/SetImpactDamageType.html", ["set", "impact", "damage", "type"], "FAttackAttributes");
addToContainers_function("GetImpactRandomDamageFactor", "", "Docs/Structs/FAttackAttributes/Functions/GetImpactRandomDamageFactor.html", ["get", "impact", "random", "damage", "factor"], "FAttackAttributes");
addToContainers_function("GetAoEDamage", "", "Docs/Structs/FAttackAttributes/Functions/GetAoEDamage.html", ["get", "ao", "e", "damage"], "FAttackAttributes");
addToContainers_function("GetAoEDamageType", "", "Docs/Structs/FAttackAttributes/Functions/GetAoEDamageType.html", ["get", "ao", "e", "damage", "type"], "FAttackAttributes");
addToContainers_function("GetAoERandomDamageFactor", "", "Docs/Structs/FAttackAttributes/Functions/GetAoERandomDamageFactor.html", ["get", "ao", "e", "random", "damage", "factor"], "FAttackAttributes");
addToContainers_function("CanAttackAir", "I should change them", "Docs/Structs/FAttackAttributes/Functions/CanAttackAir.html", ["can", "attack", "air"], "FAttackAttributes");
addToContainers_function("SetCanAttackAir", "Set whether we can attack air selectables. Suitable to call for permanent type effects like upgrades or level up bonuses", "Docs/Structs/FAttackAttributes/Functions/SetCanAttackAir.html", ["set", "can", "attack", "air"], "FAttackAttributes");
addToContainers_function("GetAttackRate", "", "Docs/Structs/FAttackAttributes/Functions/GetAttackRate.html", ["get", "attack", "rate"], "FAttackAttributes");
addToContainers_function("GetDefaultAttackRate", "Get the attack rate not taking into account any temporary effects like buffs/debuffs, so not necessarily our current attack rate", "Docs/Structs/FAttackAttributes/Functions/GetDefaultAttackRate.html", ["get", "default", "attack", "rate"], "FAttackAttributes");
addToContainers_function("SetAttackRate", "Set what the default attack rate is. Also updates current attack rate based on percentage @param Owner - the selectable these attributes belong to", "Docs/Structs/FAttackAttributes/Functions/SetAttackRate.html", ["set", "attack", "rate"], "FAttackAttributes");
addToContainers_function("SetAttackRateViaMultiplier", "Set what the default attack rate is by multiplying it by a multiplier. Also updates current attack rate", "Docs/Structs/FAttackAttributes/Functions/SetAttackRateViaMultiplier.html", ["set", "attack", "rate", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("ApplyTempAttackRateModifierViaMultiplier", "Multiply the attack rate by a multiplier @return - attack rate after change", "Docs/Structs/FAttackAttributes/Functions/ApplyTempAttackRateModifierViaMul.html", ["apply", "temp", "attack", "rate", "modifier", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("RemoveTempAttackRateModifierViaMultiplier", "Multiply the attack rate by a multiplier. Expects Multiplier to be in (1.f / Num) form where Num is what you passed into ApplyTempAttackRateModifierViaMultiplier @return - attack rate after change", "Docs/Structs/FAttackAttributes/Functions/RemoveTempAttackRateModifierViaMu.html", ["remove", "temp", "attack", "rate", "modifier", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("GetAttackRange", "", "Docs/Structs/FAttackAttributes/Functions/GetAttackRange.html", ["get", "attack", "range"], "FAttackAttributes");
addToContainers_function("GetDefaultAttackRange", "Get default attack range. Not necessarily the current attack range. Takes into account upgrades", "Docs/Structs/FAttackAttributes/Functions/GetDefaultAttackRange.html", ["get", "default", "attack", "range"], "FAttackAttributes");
addToContainers_function("SetAttackRange", "Set what the default attack range should be. The current arrack range will also be changed based on percentage", "Docs/Structs/FAttackAttributes/Functions/SetAttackRange.html", ["set", "attack", "range"], "FAttackAttributes");
addToContainers_function("SetAttackRangeViaMultiplier", "Set Set what the default attack range should be by multiplying it by a multiplier", "Docs/Structs/FAttackAttributes/Functions/SetAttackRangeViaMultiplier.html", ["set", "attack", "range", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("ApplyTempAttackRangeModifierViaMultiplier", "Multiply the attack range by a multiplier @return - attack range after change", "Docs/Structs/FAttackAttributes/Functions/ApplyTempAttackRangeModifierViaMu.html", ["apply", "temp", "attack", "range", "modifier", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("RemoveTempAttackRangeModifierViaMultiplier", "Multiply the attack range by a multiplier. Expects Multiplier to be in (1.f / Num) form where Num is what you passed into ApplyTempAttackRangeModifierViaMultiplier @return - attack range after change", "Docs/Structs/FAttackAttributes/Functions/RemoveTempAttackRangeModifierViaM.html", ["remove", "temp", "attack", "range", "modifier", "via", "multiplier"], "FAttackAttributes");
addToContainers_function("OnPostEdit", "", "Docs/Structs/FAttackAttributes/Functions/OnPostEdit.html", ["on", "post", "edit"], "FAttackAttributes");
addToContainers_variable("", "Projectile blueprint", "Docs/Structs/FAttackAttributes/Variables/.html", [], "FAttackAttributes");
addToContainers_variable("", "Whether to override the damage attributes of the projectile class. Useful if you want to reuse the same projectile for visual purposes but just want different damage values, or if you like having your damage values defined on your units instead of on your projectiles. Of course you can always create a seperate projectile and give it seperate damage values and never have to use this", "Docs/Structs/FAttackAttributes/Variables/_1.html", [], "FAttackAttributes");
addToContainers_variable("", "", "Docs/Structs/FAttackAttributes/Variables/_2.html", [], "FAttackAttributes");
addToContainers_variable("", "Amount of time between point when attack animation fires projectile to the time when the attack animation can start again. Lower = attack faster", "Docs/Structs/FAttackAttributes/Variables/_3.html", [], "FAttackAttributes");
addToContainers_variable("", "Attack range. Ignores Z axis - all range calculations are 2D", "Docs/Structs/FAttackAttributes/Variables/_4.html", [], "FAttackAttributes");
addToContainers_variable("", "Whether we can attack air units", "Docs/Structs/FAttackAttributes/Variables/_5.html", [], "FAttackAttributes");
addToContainers_variable("", "The types of selectables we are allowed to attack", "Docs/Structs/FAttackAttributes/Variables/_6.html", [], "FAttackAttributes");
addToContainers_variable("", "Acceptable target types as FNames", "Docs/Structs/FAttackAttributes/Variables/_7.html", [], "FAttackAttributes");
addToContainers_variable("", "Name of muzzle socket on mesh. The location projectile spawns at", "Docs/Structs/FAttackAttributes/Variables/_8.html", [], "FAttackAttributes");
addToContainers_variable("", "Particle effect to play at muzzle on attack. Optional", "Docs/Structs/FAttackAttributes/Variables/_9.html", [], "FAttackAttributes");
addToContainers_variable("", "Camera shake to play at muzzle location when firing. Optional", "Docs/Structs/FAttackAttributes/Variables/_10.html", [], "FAttackAttributes");
addToContainers_variable("", "Radius of MuzzleCameraShake if MuzzleCameraShake_BP is set", "Docs/Structs/FAttackAttributes/Variables/_11.html", [], "FAttackAttributes");
addToContainers_variable("", "Falloff of MuzzleCameraShake if MuzzleCameraShake_BP is set", "Docs/Structs/FAttackAttributes/Variables/_12.html", [], "FAttackAttributes");
addToContainers_variable("", "Sound to play when the unit is \'preparing\' its attack e.g. oblisk of light. To play this sound add the anim notify \'PlayAttackPreparationSound\' to anim montage. This sound is stopped if the attack animation stops.", "Docs/Structs/FAttackAttributes/Variables/_13.html", [], "FAttackAttributes");
addToContainers_variable("", "Sound to play when attack is made", "Docs/Structs/FAttackAttributes/Variables/_14.html", [], "FAttackAttributes");
addToContainers_variable("NumTempImpactDamageModifiers", "----------------------------------------------------------------------------------------", "Docs/Structs/FAttackAttributes/Variables/NumTempImpactDamageModifiers.html", ["num", "temp", "impact", "damage", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultImpactDamage", "What our damage is without any buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultImpactDamage.html", ["default", "impact", "damage"], "FAttackAttributes");
addToContainers_variable("NumTempAoEDamageModifiers", "", "Docs/Structs/FAttackAttributes/Variables/NumTempAoEDamageModifiers.html", ["num", "temp", "ao", "e", "damage", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultAoEDamage", "What AoE damage is without any buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultAoEDamage.html", ["default", "ao", "e", "damage"], "FAttackAttributes");
addToContainers_variable("NumTempAttackRateModifiers", "", "Docs/Structs/FAttackAttributes/Variables/NumTempAttackRateModifiers.html", ["num", "temp", "attack", "rate", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultAttackRate", "What our attack rate is without any temporary buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultAttackRate.html", ["default", "attack", "rate"], "FAttackAttributes");
addToContainers_variable("NumTempAttackRangeModifiers", "", "Docs/Structs/FAttackAttributes/Variables/NumTempAttackRangeModifiers.html", ["num", "temp", "attack", "range", "modifiers"], "FAttackAttributes");
addToContainers_variable("DefaultAttackRange", "What our attack range is without any temporary buffs/debuffs", "Docs/Structs/FAttackAttributes/Variables/DefaultAttackRange.html", ["default", "attack", "range"], "FAttackAttributes");
addToContainers_variable("Default", "Static to prevent creating temporaries", "Docs/Structs/FAttackAttributes/Variables/Default.html", [], "FAttackAttributes");
addToContainers_variable("", "Bool to control editability of camera shake options", "Docs/Structs/FAttackAttributes/Variables/_15.html", [], "FAttackAttributes");
addToContainers_struct("FDamageMultipliers", "TMap that maps armour type to its damage multiplier", "Docs/Structs/FDamageMultipliers/FDamageMultipliers.html", ["damage", "multipliers"], "");
addToContainers_function("FDamageMultipliers", "", "Docs/Structs/FDamageMultipliers/Functions/FDamageMultipliers.html", ["damage", "multipliers"], "FDamageMultipliers");
addToContainers_function("GetMultiplier", "Getters and setters", "Docs/Structs/FDamageMultipliers/Functions/GetMultiplier.html", ["get", "multiplier"], "FDamageMultipliers");
addToContainers_variable("", "Multiplier for how much damage this damage type will do against this armour type before any upgrades are considered.", "Docs/Structs/FDamageMultipliers/Variables/.html", [], "FDamageMultipliers");
addToContainers_struct("FSelectionDecalInfo", "Get info about a decal that appears under a selectable when it is selected or hovered over or inside marquee box", "Docs/Structs/FSelectionDecalInfo/FSelectionDecalInfo.html", ["selection", "decal", "info"], "");
addToContainers_function("FSelectionDecalInfo", "Could be a good idea to check if (MouseoverParamValue == OriginalParamValue). If so then we don\'t actually need to create a material instance dynamic which could save some performance", "Docs/Structs/FSelectionDecalInfo/Functions/FSelectionDecalInfo.html", ["selection", "decal", "info"], "FSelectionDecalInfo");
addToContainers_function("GetDecal", "", "Docs/Structs/FSelectionDecalInfo/Functions/GetDecal.html", ["get", "decal"], "FSelectionDecalInfo");
addToContainers_function("GetParamName", "", "Docs/Structs/FSelectionDecalInfo/Functions/GetParamName.html", ["get", "param", "name"], "FSelectionDecalInfo");
addToContainers_function("IsParamNameValid", "", "Docs/Structs/FSelectionDecalInfo/Functions/IsParamNameValid.html", ["is", "param", "name", "valid"], "FSelectionDecalInfo");
addToContainers_function("SetIsParamNameValid", "", "Docs/Structs/FSelectionDecalInfo/Functions/SetIsParamNameValid.html", ["set", "is", "param", "name", "valid"], "FSelectionDecalInfo");
addToContainers_function("GetMouseoverParamValue", "", "Docs/Structs/FSelectionDecalInfo/Functions/GetMouseoverParamValue.html", ["get", "mouseover", "param", "value"], "FSelectionDecalInfo");
addToContainers_function("GetOriginalParamValue", "", "Docs/Structs/FSelectionDecalInfo/Functions/GetOriginalParamValue.html", ["get", "original", "param", "value"], "FSelectionDecalInfo");
addToContainers_function("SetOriginalParamValue", "", "Docs/Structs/FSelectionDecalInfo/Functions/SetOriginalParamValue.html", ["set", "original", "param", "value"], "FSelectionDecalInfo");
addToContainers_function("RequiresCreatingMaterialInstanceDynamic", "Return whether we need to create a material instance dynamic in order to show what this decal wants to show. If false then we can get by without creating one.", "Docs/Structs/FSelectionDecalInfo/Functions/RequiresCreatingMaterialInstanceD.html", ["requires", "creating", "material", "instance", "dynamic"], "FSelectionDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FSelectionDecalInfo/Variables/.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "Optional scalar parameter in the material to adjust when either selected or hovered over", "Docs/Structs/FSelectionDecalInfo/Variables/_1.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "Whether the param name is valid or not to know whether to try changing value or not. Actually not needed, thought game crashed is param name was not valid and try to set it", "Docs/Structs/FSelectionDecalInfo/Variables/_2.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "The value to change this param value to when the selectable is hovered over with mouse or inside marquee selection box", "Docs/Structs/FSelectionDecalInfo/Variables/_3.html", [], "FSelectionDecalInfo");
addToContainers_variable("", "The orginal value of the param so it can be restored when selectable is selected", "Docs/Structs/FSelectionDecalInfo/Variables/_4.html", [], "FSelectionDecalInfo");
addToContainers_struct("FDefeatConditionInfo", "Info about defeat conditions", "Docs/Structs/FDefeatConditionInfo/FDefeatConditionInfo.html", ["defeat", "condition", "info"], "");
addToContainers_function("GetName", "", "Docs/Structs/FDefeatConditionInfo/Functions/GetName.html", ["get", "name"], "FDefeatConditionInfo");
addToContainers_variable("", "Name to display in UI", "Docs/Structs/FDefeatConditionInfo/Variables/.html", [], "FDefeatConditionInfo");
addToContainers_struct("FCPUDifficultyInfo", "CPU difficulty is mapped to one of these. Static information about a CPU player", "Docs/Structs/FCPUDifficultyInfo/FCPUDifficultyInfo.html", ["c", "p", "u", "difficulty", "info"], "");
addToContainers_function("FCPUDifficultyInfo", "", "Docs/Structs/FCPUDifficultyInfo/Functions/FCPUDifficultyInfo.html", ["c", "p", "u", "difficulty", "info"], "FCPUDifficultyInfo");
addToContainers_function("FCPUDifficultyInfo", "", "Docs/Structs/FCPUDifficultyInfo/Functions/FCPUDifficultyInfo_1.html", ["c", "p", "u", "difficulty", "info"], "FCPUDifficultyInfo");
addToContainers_function("GetName", "", "Docs/Structs/FCPUDifficultyInfo/Functions/GetName.html", ["get", "name"], "FCPUDifficultyInfo");
addToContainers_function("GetIcon", "", "Docs/Structs/FCPUDifficultyInfo/Functions/GetIcon.html", ["get", "icon"], "FCPUDifficultyInfo");
addToContainers_function("GetControllerBP", "", "Docs/Structs/FCPUDifficultyInfo/Functions/GetControllerBP.html", ["get", "controller", "b", "p"], "FCPUDifficultyInfo");
addToContainers_variable("", "The name to display for this difficulty", "Docs/Structs/FCPUDifficultyInfo/Variables/.html", [], "FCPUDifficultyInfo");
addToContainers_variable("", "The icon to display in lobby", "Docs/Structs/FCPUDifficultyInfo/Variables/_1.html", [], "FCPUDifficultyInfo");
addToContainers_variable("", "AI controller to spawn for this difficulty", "Docs/Structs/FCPUDifficultyInfo/Variables/_2.html", [], "FCPUDifficultyInfo");
addToContainers_struct("FPlayerStartDistanceInfo", "Holds a uint8 and a float", "Docs/Structs/FPlayerStartDistanceInfo/FPlayerStartDistanceInfo.html", ["player", "start", "distance", "info"], "");
addToContainers_function("FPlayerStartDistanceInfo", "", "Docs/Structs/FPlayerStartDistanceInfo/Functions/FPlayerStartDistanceInfo.html", ["player", "start", "distance", "info"], "FPlayerStartDistanceInfo");
addToContainers_function("FPlayerStartDistanceInfo", "", "Docs/Structs/FPlayerStartDistanceInfo/Functions/FPlayerStartDistanceInfo_1.html", ["player", "start", "distance", "info"], "FPlayerStartDistanceInfo");
addToContainers_function("GetID", "Get the unique player start ID", "Docs/Structs/FPlayerStartDistanceInfo/Functions/GetID.html", ["get", "i", "d"], "FPlayerStartDistanceInfo");
addToContainers_function("GetDistance", "", "Docs/Structs/FPlayerStartDistanceInfo/Functions/GetDistance.html", ["get", "distance"], "FPlayerStartDistanceInfo");
addToContainers_function("GetDistanceBetweenSpots", "Returns to distance between two player starts", "Docs/Structs/FPlayerStartDistanceInfo/Functions/GetDistanceBetweenSpots.html", ["get", "distance", "between", "spots"], "FPlayerStartDistanceInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerStartDistanceInfo/Variables/.html", [], "FPlayerStartDistanceInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerStartDistanceInfo/Variables/_1.html", [], "FPlayerStartDistanceInfo");
addToContainers_variable("Info2)", "Operator for sorting in array", "Docs/Structs/FPlayerStartDistanceInfo/Variables/Info2).html", [], "FPlayerStartDistanceInfo");
addToContainers_struct("FPlayerStartInfo", "Info about a player start", "Docs/Structs/FPlayerStartInfo/FPlayerStartInfo.html", ["player", "start", "info"], "");
addToContainers_function("FPlayerStartInfo", "", "Docs/Structs/FPlayerStartInfo/Functions/FPlayerStartInfo.html", ["player", "start", "info"], "FPlayerStartInfo");
addToContainers_function("FPlayerStartInfo", "", "Docs/Structs/FPlayerStartInfo/Functions/FPlayerStartInfo_1.html", ["player", "start", "info"], "FPlayerStartInfo");
addToContainers_function("FPlayerStartInfo", "A ctor for RTS level volume workaround TODO remove eventually", "Docs/Structs/FPlayerStartInfo/Functions/FPlayerStartInfo_2.html", ["player", "start", "info"], "FPlayerStartInfo");
addToContainers_function("GetUniqueID", "", "Docs/Structs/FPlayerStartInfo/Functions/GetUniqueID.html", ["get", "unique", "i", "d"], "FPlayerStartInfo");
addToContainers_function("GetLocation", "", "Docs/Structs/FPlayerStartInfo/Functions/GetLocation.html", ["get", "location"], "FPlayerStartInfo");
addToContainers_function("GetRotation", "", "Docs/Structs/FPlayerStartInfo/Functions/GetRotation.html", ["get", "rotation"], "FPlayerStartInfo");
addToContainers_function("EmptyNearbyPlayerStarts", "Empty the array", "Docs/Structs/FPlayerStartInfo/Functions/EmptyNearbyPlayerStarts.html", ["empty", "nearby", "player", "starts"], "FPlayerStartInfo");
addToContainers_function("AddNearbyPlayerStart", "", "Docs/Structs/FPlayerStartInfo/Functions/AddNearbyPlayerStart.html", ["add", "nearby", "player", "start"], "FPlayerStartInfo");
addToContainers_function("SortNearbyPlayerStarts", "Sort the array", "Docs/Structs/FPlayerStartInfo/Functions/SortNearbyPlayerStarts.html", ["sort", "nearby", "player", "starts"], "FPlayerStartInfo");
addToContainers_function("GetNearbyPlayerStartsSorted", "Get const access to the array. Array should already be sorted before calling this", "Docs/Structs/FPlayerStartInfo/Functions/GetNearbyPlayerStartsSorted.html", ["get", "nearby", "player", "starts", "sorted"], "FPlayerStartInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerStartInfo/Variables/.html", [], "FPlayerStartInfo");
addToContainers_variable("", "World location on map", "Docs/Structs/FPlayerStartInfo/Variables/_1.html", [], "FPlayerStartInfo");
addToContainers_variable("", "World rotation on map", "Docs/Structs/FPlayerStartInfo/Variables/_2.html", [], "FPlayerStartInfo");
addToContainers_variable("", "Sorted array of all other player starts in map. Sorted by distance with shortest distance at lower indices. Not correct until I remove my hardcoding method for doing player starts", "Docs/Structs/FPlayerStartInfo/Variables/_3.html", [], "FPlayerStartInfo");
addToContainers_struct("FMapInfo", "Info about a map", "Docs/Structs/FMapInfo/FMapInfo.html", ["map", "info"], "");
addToContainers_function("FMapInfo", "", "Docs/Structs/FMapInfo/Functions/FMapInfo.html", ["map", "info"], "FMapInfo");
addToContainers_function("GetPlayerStartTransform", "Given a player start ID get the start transform for the player @param InPlayerStartID - player start ID player was assigned. -2 = unassigned. -1 = error @param OutLocation - players initial location @param OutRotation - players initial rotation", "Docs/Structs/FMapInfo/Functions/GetPlayerStartTransform.html", ["get", "player", "start", "transform"], "FMapInfo");
addToContainers_function("GetDisplayName", "~ Getters and setters", "Docs/Structs/FMapInfo/Functions/GetDisplayName.html", ["get", "display", "name"], "FMapInfo");
addToContainers_function("SetMapFName", "", "Docs/Structs/FMapInfo/Functions/SetMapFName.html", ["set", "map", "f", "name"], "FMapInfo");
addToContainers_function("GetMapFName", "", "Docs/Structs/FMapInfo/Functions/GetMapFName.html", ["get", "map", "f", "name"], "FMapInfo");
addToContainers_function("SetUniqueID", "", "Docs/Structs/FMapInfo/Functions/SetUniqueID.html", ["set", "unique", "i", "d"], "FMapInfo");
addToContainers_function("GetUniqueID", "", "Docs/Structs/FMapInfo/Functions/GetUniqueID.html", ["get", "unique", "i", "d"], "FMapInfo");
addToContainers_function("GetUserDefinedImage", "", "Docs/Structs/FMapInfo/Functions/GetUserDefinedImage.html", ["get", "user", "defined", "image"], "FMapInfo");
addToContainers_function("GetDescription", "", "Docs/Structs/FMapInfo/Functions/GetDescription.html", ["get", "description"], "FMapInfo");
addToContainers_function("GetMaxPlayers", "", "Docs/Structs/FMapInfo/Functions/GetMaxPlayers.html", ["get", "max", "players"], "FMapInfo");
addToContainers_function("GetMapBounds", "", "Docs/Structs/FMapInfo/Functions/GetMapBounds.html", ["get", "map", "bounds"], "FMapInfo");
addToContainers_function("SetMapBounds", "", "Docs/Structs/FMapInfo/Functions/SetMapBounds.html", ["set", "map", "bounds"], "FMapInfo");
addToContainers_function("GetMapBoundsYawRotation", "", "Docs/Structs/FMapInfo/Functions/GetMapBoundsYawRotation.html", ["get", "map", "bounds", "yaw", "rotation"], "FMapInfo");
addToContainers_function("GetMinimapTexture", "", "Docs/Structs/FMapInfo/Functions/GetMinimapTexture.html", ["get", "minimap", "texture"], "FMapInfo");
addToContainers_function("SetMinimapTexture", "", "Docs/Structs/FMapInfo/Functions/SetMinimapTexture.html", ["set", "minimap", "texture"], "FMapInfo");
addToContainers_function("GetPlayerStarts", "", "Docs/Structs/FMapInfo/Functions/GetPlayerStarts.html", ["get", "player", "starts"], "FMapInfo");
addToContainers_function("SetPlayerStartPoints", "", "Docs/Structs/FMapInfo/Functions/SetPlayerStartPoints.html", ["set", "player", "start", "points"], "FMapInfo");
addToContainers_function("GetLevelVolumeBP", "", "Docs/Structs/FMapInfo/Functions/GetLevelVolumeBP.html", ["get", "level", "volume", "b", "p"], "FMapInfo");
addToContainers_variable("", "Name of map to appear in UI", "Docs/Structs/FMapInfo/Variables/.html", [], "FMapInfo");
addToContainers_variable("", "The name that should be passed into UGameplayStatics::OpenLevel", "Docs/Structs/FMapInfo/Variables/_1.html", [], "FMapInfo");
addToContainers_variable("", "To reduce bandwidth", "Docs/Structs/FMapInfo/Variables/_2.html", [], "FMapInfo");
addToContainers_variable("", "Image to appear in UI. Can be left blank in which case an image generated by the level volume will be used", "Docs/Structs/FMapInfo/Variables/_3.html", [], "FMapInfo");
addToContainers_variable("", "Description of map", "Docs/Structs/FMapInfo/Variables/_4.html", [], "FMapInfo");
addToContainers_variable("", "Maximum amount of players allowed for map. Not actually enforced anywhere", "Docs/Structs/FMapInfo/Variables/_5.html", [], "FMapInfo");
addToContainers_variable("", "The bounds of the level volume. This is used later to get the correct screen location of player starts placed overtop of map image. Note I don\'t think this is actually axis aligned. I\'m not even 100% sure what axis aligned means but FBoxSphereBounds\'s description says it\'s axis aligned even though I have not done that", "Docs/Structs/FMapInfo/Variables/_6.html", [], "FMapInfo");
addToContainers_variable("", "", "Docs/Structs/FMapInfo/Variables/_7.html", [], "FMapInfo");
addToContainers_variable("", "The texture to use as the minimap for this map. This will be null until map is actually loaded meaning it will not be able to be referenced in lobby", "Docs/Structs/FMapInfo/Variables/_8.html", [], "FMapInfo");
addToContainers_variable("", "Array of each player starts transform", "Docs/Structs/FMapInfo/Variables/_9.html", [], "FMapInfo");
addToContainers_variable("", "This must be set by user. This is a workaround for not being able to modify the game instance blueprint while editing the level volume. Eventually I would like to get rid of this variable. Contains all the data about the level such as its bounds, player start locations and minimap texture.", "Docs/Structs/FMapInfo/Variables/_10.html", [], "FMapInfo");
addToContainers_struct("FResourceInfo", "Info about a resource like minerals or vespene gas in SCII", "Docs/Structs/FResourceInfo/FResourceInfo.html", ["resource", "info"], "");
addToContainers_function("FResourceInfo", "", "Docs/Structs/FResourceInfo/Functions/FResourceInfo.html", ["resource", "info"], "FResourceInfo");
addToContainers_function("GetIcon", "", "Docs/Structs/FResourceInfo/Functions/GetIcon.html", ["get", "icon"], "FResourceInfo");
addToContainers_variable("", "Image to appear on HUD. Can be overridden on a per-faction basis", "Docs/Structs/FResourceInfo/Variables/.html", [], "FResourceInfo");
addToContainers_struct("FStartingResourceConfig", "Holds amounts of resources to start match with", "Docs/Structs/FStartingResourceConfig/FStartingResourceConfig.html", ["starting", "resource", "config"], "");
addToContainers_function("FStartingResourceConfig", "", "Docs/Structs/FStartingResourceConfig/Functions/FStartingResourceConfig.html", ["starting", "resource", "config"], "FStartingResourceConfig");
addToContainers_function("FStartingResourceConfig", "Ctor for creating one from the development settings", "Docs/Structs/FStartingResourceConfig/Functions/FStartingResourceConfig_1.html", ["starting", "resource", "config"], "FStartingResourceConfig");
addToContainers_function("ToString", "", "Docs/Structs/FStartingResourceConfig/Functions/ToString.html", ["to", "string"], "FStartingResourceConfig");
addToContainers_function("GetName", "Get name to appear on UI", "Docs/Structs/FStartingResourceConfig/Functions/GetName.html", ["get", "name"], "FStartingResourceConfig");
addToContainers_function("GetResourceArraySlow", "Get the starting amounts as a resource array that player state uses", "Docs/Structs/FStartingResourceConfig/Functions/GetResourceArraySlow.html", ["get", "resource", "array", "slow"], "FStartingResourceConfig");
addToContainers_variable("", "The name to appear in UI", "Docs/Structs/FStartingResourceConfig/Variables/.html", [], "FStartingResourceConfig");
addToContainers_variable("", "Maps resource type to amount to start match with", "Docs/Structs/FStartingResourceConfig/Variables/_1.html", [], "FStartingResourceConfig");
addToContainers_struct("FPlayerInfo", "Information about a player for starting a match such as team, faction etc", "Docs/Structs/FPlayerInfo/FPlayerInfo.html", ["player", "info"], "");
addToContainers_function("FPlayerInfo", "Human player constructor", "Docs/Structs/FPlayerInfo/Functions/FPlayerInfo.html", ["player", "info"], "FPlayerInfo");
addToContainers_function("FPlayerInfo", "CPU player constructor", "Docs/Structs/FPlayerInfo/Functions/FPlayerInfo_1.html", ["player", "info"], "FPlayerInfo");
addToContainers_function("FPlayerInfo", "", "Docs/Structs/FPlayerInfo/Functions/FPlayerInfo_2.html", ["player", "info"], "FPlayerInfo");
addToContainers_function("SetCPUPlayerState", "", "Docs/Structs/FPlayerInfo/Functions/SetCPUPlayerState.html", ["set", "c", "p", "u", "player", "state"], "FPlayerInfo");
addToContainers_function("IsObserver", "Return whether this player is a match observer", "Docs/Structs/FPlayerInfo/Functions/IsObserver.html", ["is", "observer"], "FPlayerInfo");
addToContainers_variable("", "Either human player or CPU", "Docs/Structs/FPlayerInfo/Variables/.html", [], "FPlayerInfo");
addToContainers_variable("", "Only valid for human players. Will be null for CPU players", "Docs/Structs/FPlayerInfo/Variables/_1.html", [], "FPlayerInfo");
addToContainers_variable("", "CPU difficulty if a CPU player. Irrelevant if CPU player in this slot", "Docs/Structs/FPlayerInfo/Variables/_2.html", [], "FPlayerInfo");
addToContainers_variable("", "If CPU player, their player state once it has been spawned", "Docs/Structs/FPlayerInfo/Variables/_3.html", [], "FPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerInfo/Variables/_4.html", [], "FPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPlayerInfo/Variables/_5.html", [], "FPlayerInfo");
addToContainers_variable("", "-1 or -2 means unassigned", "Docs/Structs/FPlayerInfo/Variables/_6.html", [], "FPlayerInfo");
addToContainers_struct("FMatchInfo", "All the info required by game mode to start a match", "Docs/Structs/FMatchInfo/FMatchInfo.html", ["match", "info"], "");
addToContainers_function("GetNumTeams", "", "Docs/Structs/FMatchInfo/Functions/GetNumTeams.html", ["get", "num", "teams"], "FMatchInfo");
addToContainers_function("SetNumTeams", "", "Docs/Structs/FMatchInfo/Functions/SetNumTeams.html", ["set", "num", "teams"], "FMatchInfo");
addToContainers_function("GetMatchType", "", "Docs/Structs/FMatchInfo/Functions/GetMatchType.html", ["get", "match", "type"], "FMatchInfo");
addToContainers_function("SetMatchType", "", "Docs/Structs/FMatchInfo/Functions/SetMatchType.html", ["set", "match", "type"], "FMatchInfo");
addToContainers_function("SetMap", "@param InMapName - the name map was named in editor e.g. Minimal_Default, entry, etc @param InDisplayName - name of map to appear on UI", "Docs/Structs/FMatchInfo/Functions/SetMap.html", ["set", "map"], "FMatchInfo");
addToContainers_function("GetMapDisplayName", "", "Docs/Structs/FMatchInfo/Functions/GetMapDisplayName.html", ["get", "map", "display", "name"], "FMatchInfo");
addToContainers_function("GetMapUniqueID", "", "Docs/Structs/FMatchInfo/Functions/GetMapUniqueID.html", ["get", "map", "unique", "i", "d"], "FMatchInfo");
addToContainers_function("GetMapFName", "@return - the name that can be used in UGameplayStatics::OpenLevel", "Docs/Structs/FMatchInfo/Functions/GetMapFName.html", ["get", "map", "f", "name"], "FMatchInfo");
addToContainers_function("GetDefeatCondition", "", "Docs/Structs/FMatchInfo/Functions/GetDefeatCondition.html", ["get", "defeat", "condition"], "FMatchInfo");
addToContainers_function("SetDefeatCondition", "", "Docs/Structs/FMatchInfo/Functions/SetDefeatCondition.html", ["set", "defeat", "condition"], "FMatchInfo");
addToContainers_function("GetStartingResources", "", "Docs/Structs/FMatchInfo/Functions/GetStartingResources.html", ["get", "starting", "resources"], "FMatchInfo");
addToContainers_function("SetStartingResources", "", "Docs/Structs/FMatchInfo/Functions/SetStartingResources.html", ["set", "starting", "resources"], "FMatchInfo");
addToContainers_function("GetPlayers", "", "Docs/Structs/FMatchInfo/Functions/GetPlayers.html", ["get", "players"], "FMatchInfo");
addToContainers_function("GetPlayers", "", "Docs/Structs/FMatchInfo/Functions/GetPlayers_1.html", ["get", "players"], "FMatchInfo");
addToContainers_function("AddPlayer", "", "Docs/Structs/FMatchInfo/Functions/AddPlayer.html", ["add", "player"], "FMatchInfo");
addToContainers_variable("", "Number of teams in match", "Docs/Structs/FMatchInfo/Variables/.html", [], "FMatchInfo");
addToContainers_variable("", "Online, LAN, offline etc", "Docs/Structs/FMatchInfo/Variables/_1.html", [], "FMatchInfo");
addToContainers_variable("", "Display name of map, not file name", "Docs/Structs/FMatchInfo/Variables/_2.html", [], "FMatchInfo");
addToContainers_variable("", "Unique ID for the map", "Docs/Structs/FMatchInfo/Variables/_3.html", [], "FMatchInfo");
addToContainers_variable("", "The name of the map that can be passed into UGameplayStatics::OpenLevel e.g. Entry, Minimal_Default, etc", "Docs/Structs/FMatchInfo/Variables/_4.html", [], "FMatchInfo");
addToContainers_variable("", "The defeat condition", "Docs/Structs/FMatchInfo/Variables/_5.html", [], "FMatchInfo");
addToContainers_variable("", "Resources players start match with. How much this actually is is defined in game instance", "Docs/Structs/FMatchInfo/Variables/_6.html", [], "FMatchInfo");
addToContainers_variable("", "All players and their info", "Docs/Structs/FMatchInfo/Variables/_7.html", [], "FMatchInfo");
addToContainers_struct("FStaticBuffOrDebuffInfo", "Info struct for a buff/debuff that never expires on its own and does not do anything over time. @See CommonEnums.h EImmortalBuffAndDebuffType Only some of this struct is exposed to blueprints. 2 functions will need to be implemented in C++ Does not hold any state", "Docs/Structs/FStaticBuffOrDebuffInfo/FStaticBuffOrDebuffInfo.html", ["static", "buff", "or", "debuff", "info"], "");
addToContainers_function("FStaticBuffOrDebuffInfo", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/FStaticBuffOrDebuffInfo.html", ["static", "buff", "or", "debuff", "info"], "FStaticBuffOrDebuffInfo");
addToContainers_function("FStaticBuffOrDebuffInfo", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/FStaticBuffOrDebuffInfo_1.html", ["static", "buff", "or", "debuff", "info"], "FStaticBuffOrDebuffInfo");
addToContainers_function("SetFunctionPointers", "@See FTickableBuffOrDebuffInfo::SetFunctionPointers", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/SetFunctionPointers.html", ["set", "function", "pointers"], "FStaticBuffOrDebuffInfo");
addToContainers_function("IsBuff", "Return whether this is considered a buff", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/IsBuff.html", ["is", "buff"], "FStaticBuffOrDebuffInfo");
addToContainers_function("IsDebuff", "Return whether this is considered a debuff", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/IsDebuff.html", ["is", "debuff"], "FStaticBuffOrDebuffInfo");
addToContainers_function("GetParticlesTemplate", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/GetParticlesTemplate.html", ["get", "particles", "template"], "FStaticBuffOrDebuffInfo");
addToContainers_function("GetParticlesAttachPoint", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/GetParticlesAttachPoint.html", ["get", "particles", "attach", "point"], "FStaticBuffOrDebuffInfo");
addToContainers_function("ExecuteTryApplyBehavior", "Call the function pointed to by TryApplyToPtr and try apply the buff/debuff to a target @return - true if the buff/debuff considers itself successfully applied", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/ExecuteTryApplyBehavior.html", ["execute", "try", "apply", "behavior"], "FStaticBuffOrDebuffInfo");
addToContainers_function("ExecuteOnRemovedBehavior", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/ExecuteOnRemovedBehavior.html", ["execute", "on", "removed", "behavior"], "FStaticBuffOrDebuffInfo");
addToContainers_function("GetDisplayName", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/GetDisplayName.html", ["get", "display", "name"], "FStaticBuffOrDebuffInfo");
addToContainers_function("GetDisplayImage", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/GetDisplayImage.html", ["get", "display", "image"], "FStaticBuffOrDebuffInfo");
addToContainers_function("GetSpecificType", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/GetSpecificType.html", ["get", "specific", "type"], "FStaticBuffOrDebuffInfo");
addToContainers_function("GetSubType", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/GetSubType.html", ["get", "sub", "type"], "FStaticBuffOrDebuffInfo");
addToContainers_function("SetSpecificType", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Functions/SetSpecificType.html", ["set", "specific", "type"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("SpecificType", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/SpecificType.html", ["specific", "type"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("TryApplyToPtr", "Function pointers that define the behavior for certain events", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/TryApplyToPtr.html", ["try", "apply", "to", "ptr"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("OnRemovedPtr", "", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/OnRemovedPtr.html", ["on", "removed", "ptr"], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "Whether buff or debuff. May add logic that distinguishes between the two so adding this variable", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "The subtype of this buff/debuff", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_1.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "The name of this buff/debuff", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_2.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "The image that represents this buff/debuff", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_3.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "Some particles. This isn\'t referenced anywhere in code. These are just here in case you want to attach particles to target and want to avoid writing hardcoded asset paths", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_4.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_variable("", "Where on the selectable the particles should try attach to", "Docs/Structs/FStaticBuffOrDebuffInfo/Variables/_5.html", [], "FStaticBuffOrDebuffInfo");
addToContainers_struct("FTickableBuffOrDebuffInfo", "Info that defines the behavior of a buff/debuff that requires one or both of the following: - times out by itself e.g. a 10 sec speed increase - logic that executes at intervals e.g. a DoT that does 20 damage every 2 sec Only some of this struct is exposed to blueprints. 3 functions will need to be implemented in C++ Does not hold any state", "Docs/Structs/FTickableBuffOrDebuffInfo/FTickableBuffOrDebuffInfo.html", ["tickable", "buff", "or", "debuff", "info"], "");
addToContainers_function("FTickableBuffOrDebuffInfo", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/FTickableBuffOrDebuffInfo.html", ["tickable", "buff", "or", "debuff", "info"], "FTickableBuffOrDebuffInfo");
addToContainers_function("FTickableBuffOrDebuffInfo", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/FTickableBuffOrDebuffInfo_1.html", ["tickable", "buff", "or", "debuff", "info"], "FTickableBuffOrDebuffInfo");
addToContainers_function("SetFunctionPointers", "Set what the logic functions are for this buff/debuff. Could be used mid game to improve the effects of the buff/debuff due to upgrade or whatnot @param InTypeApplyToPtr - function pointer to the function that is called when the buff/debuff is tried to be applied to something @param InDoTickPtr - function pointer to the logic that happens each tick @param InOnRemovedPtr - function pointer to the function that is called when this buff/debuff is removed", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/SetFunctionPointers.html", ["set", "function", "pointers"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetTickInterval", "Get the time between ticks", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetTickInterval.html", ["get", "tick", "interval"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetNumberOfTicks", "Get how many times this buff/debuff should tick. 0 means tick indefinently", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetNumberOfTicks.html", ["get", "number", "of", "ticks"], "FTickableBuffOrDebuffInfo");
addToContainers_function("ExpiresOverTime", "Return whether this buff/debuff will remove itself over time or not @return - true if buff/debuff will eventually fall off some time", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/ExpiresOverTime.html", ["expires", "over", "time"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetFullDuration", "Get how long this buff/debuff lasts from application. Returns 0 if buff/debuff has an infinite duration", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetFullDuration.html", ["get", "full", "duration"], "FTickableBuffOrDebuffInfo");
addToContainers_function("IsBuff", "Return whether this is considered a buff", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/IsBuff.html", ["is", "buff"], "FTickableBuffOrDebuffInfo");
addToContainers_function("IsDebuff", "Return whether this is considered a debuff", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/IsDebuff.html", ["is", "debuff"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetParticlesTemplate", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetParticlesTemplate.html", ["get", "particles", "template"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetParticlesAttachPoint", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetParticlesAttachPoint.html", ["get", "particles", "attach", "point"], "FTickableBuffOrDebuffInfo");
addToContainers_function("ExecuteTryApplyBehavior", "Call the function pointed to by TryApplyToPtr and try apply the buff/debuff to a target @return - true if the buff/debuff considers itself successfully applied", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/ExecuteTryApplyBehavior.html", ["execute", "try", "apply", "behavior"], "FTickableBuffOrDebuffInfo");
addToContainers_function("ExecuteDoTickBehavior", "Call the function pointed to by DoTickPtr @param StateInfo - the state that is executing this", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/ExecuteDoTickBehavior.html", ["execute", "do", "tick", "behavior"], "FTickableBuffOrDebuffInfo");
addToContainers_function("ExecuteOnRemovedBehavior", "Call the function pointed to by OnRemovedPtr @param StateInfo - the state that is executing this", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/ExecuteOnRemovedBehavior.html", ["execute", "on", "removed", "behavior"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetDisplayName", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetDisplayName.html", ["get", "display", "name"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetDisplayImage", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetDisplayImage.html", ["get", "display", "image"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetSpecificType", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetSpecificType.html", ["get", "specific", "type"], "FTickableBuffOrDebuffInfo");
addToContainers_function("GetSubType", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/GetSubType.html", ["get", "sub", "type"], "FTickableBuffOrDebuffInfo");
addToContainers_function("SetSpecificType", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Functions/SetSpecificType.html", ["set", "specific", "type"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The amount of time between ticks. NumberOfTicks * TickInterval = total duration of buff/debuff.", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "How ticks this buff/debuff will execute before it will fall off. Use 0 for buff/debuff that never expires. If you want a buff/debuff that never expires and doesn\'t have any tick logic then you can use the other buff/debuff struct instead If you want a buff that say increases move speed for 10sec then set NumberOfTicks to 1 and TickInterval to 10. Keeping this as 1 byte since might have to send this over the wire", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_1.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("SpecificType", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/SpecificType.html", ["specific", "type"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("TryApplyToPtr", "Function pointers that define the behavior for certain events", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/TryApplyToPtr.html", ["try", "apply", "to", "ptr"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("DoTickPtr", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/DoTickPtr.html", ["do", "tick", "ptr"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("OnRemovedPtr", "", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/OnRemovedPtr.html", ["on", "removed", "ptr"], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "Whether buff or debuff. May add logic that distinguishes between the two so adding this variable", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_2.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The subtype of this buff/debuff", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_3.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The name of this buff/debuff", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_4.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "The image that represents this buff/debuff", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_5.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "Some particles. This isn\'t referenced anywhere in code. These are just here in case you want to attach particles to target and want to avoid writing hardcoded asset paths in C++ such as inside the TryApplyTo function.", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_6.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_variable("", "Where on the selectable the particles should try attach to", "Docs/Structs/FTickableBuffOrDebuffInfo/Variables/_7.html", [], "FTickableBuffOrDebuffInfo");
addToContainers_struct("FBuffOrDebuffSubTypeInfo", "", "Docs/Structs/FBuffOrDebuffSubTypeInfo/FBuffOrDebuffSubTypeInfo.html", ["buff", "or", "debuff", "sub", "type", "info"], "");
addToContainers_function("FBuffOrDebuffSubTypeInfo", "", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Functions/FBuffOrDebuffSubTypeInfo.html", ["buff", "or", "debuff", "sub", "type", "info"], "FBuffOrDebuffSubTypeInfo");
addToContainers_function("GetTexture", "", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Functions/GetTexture.html", ["get", "texture"], "FBuffOrDebuffSubTypeInfo");
addToContainers_function("GetBrushColor", "", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Functions/GetBrushColor.html", ["get", "brush", "color"], "FBuffOrDebuffSubTypeInfo");
addToContainers_variable("", "The texture to set on the border widget for buffs/debuffs of this subtype", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Variables/.html", [], "FBuffOrDebuffSubTypeInfo");
addToContainers_variable("", "The color to set on the border widget for buffs/debuffs of this subtype", "Docs/Structs/FBuffOrDebuffSubTypeInfo/Variables/_1.html", [], "FBuffOrDebuffSubTypeInfo");
addToContainers_struct("FSelectableResourceColorInfo", "FSelectableResourceInfo is already taken so chose a too sepcific name", "Docs/Structs/FSelectableResourceColorInfo/FSelectableResourceColorInfo.html", ["selectable", "resource", "color", "info"], "");
addToContainers_function("FSelectableResourceColorInfo", "", "Docs/Structs/FSelectableResourceColorInfo/Functions/FSelectableResourceColorInfo.html", ["selectable", "resource", "color", "info"], "FSelectableResourceColorInfo");
addToContainers_function("GetPBarFillColor", "", "Docs/Structs/FSelectableResourceColorInfo/Functions/GetPBarFillColor.html", ["get", "p", "bar", "fill", "color"], "FSelectableResourceColorInfo");
addToContainers_variable("", "The param we use for UProgressBar::SetFillColorAndOpacity", "Docs/Structs/FSelectableResourceColorInfo/Variables/.html", [], "FSelectableResourceColorInfo");
addToContainers_struct("FSelectableIdentifier", "This struct contains enough info to derive which selectable we are talking about. It is used to be sent over the wire", "Docs/Structs/FSelectableIdentifier/FSelectableIdentifier.html", ["selectable", "identifier"], "");
addToContainers_function("FSelectableIdentifier", "Default ctor never to be called", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_1.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_2.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "This ctor is for removing the outcome data when we don\'t need to send it over the wire", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_3.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("FSelectableIdentifier", "I also use this struct at times to store a player state ID even though it would be more efficient just to send a single uint8. This is the ctor for player states", "Docs/Structs/FSelectableIdentifier/Functions/FSelectableIdentifier_4.html", ["selectable", "identifier"], "FSelectableIdentifier");
addToContainers_function("GetSelectableID", "Return the selectable ID this struct is holding", "Docs/Structs/FSelectableIdentifier/Functions/GetSelectableID.html", ["get", "selectable", "i", "d"], "FSelectableIdentifier");
addToContainers_function("GetSelectable", "Returns the selectable that this info is for.", "Docs/Structs/FSelectableIdentifier/Functions/GetSelectable.html", ["get", "selectable"], "FSelectableIdentifier");
addToContainers_function("GetPlayerState", "Returns the player that owns the selectable, or if this is just being used to store a player state then returns that player state", "Docs/Structs/FSelectableIdentifier/Functions/GetPlayerState.html", ["get", "player", "state"], "FSelectableIdentifier");
addToContainers_variable("", "The selectable ID of the selectable that was hit", "Docs/Structs/FSelectableIdentifier/Variables/.html", [], "FSelectableIdentifier");
addToContainers_variable("", "The owner ID of the hit selectable", "Docs/Structs/FSelectableIdentifier/Variables/_1.html", [], "FSelectableIdentifier");
addToContainers_struct("FAbilityHitWithOutcome", "This struct is info about a hit actor for an ability + the result of the it", "Docs/Structs/FAbilityHitWithOutcome/FAbilityHitWithOutcome.html", ["ability", "hit", "with", "outcome"], "");
addToContainers_function("FAbilityHitWithOutcome", "Default ctor never to be called", "Docs/Structs/FAbilityHitWithOutcome/Functions/FAbilityHitWithOutcome.html", ["ability", "hit", "with", "outcome"], "FAbilityHitWithOutcome");
addToContainers_function("FAbilityHitWithOutcome", "Constructor @param InHitSelectablesID - selectable ID for selectable that was hit @param InHitSelectablesOwnerID - ID of the selectables owner @param InOutcome - the result of the ability", "Docs/Structs/FAbilityHitWithOutcome/Functions/FAbilityHitWithOutcome_1.html", ["ability", "hit", "with", "outcome"], "FAbilityHitWithOutcome");
addToContainers_function("GetOutcome", "", "Docs/Structs/FAbilityHitWithOutcome/Functions/GetOutcome.html", ["get", "outcome"], "FAbilityHitWithOutcome");
addToContainers_function("GetOutcome", "", "Docs/Structs/FAbilityHitWithOutcome/Functions/GetOutcome_1.html", ["get", "outcome"], "FAbilityHitWithOutcome");
addToContainers_variable("", "This is the custom result of the ability casted to a uint8. e.g. Success, Faliure, TargetAbove30PercentCase, etc. If the ability only ever has one outcome then this variable is irrelevant", "Docs/Structs/FAbilityHitWithOutcome/Variables/.html", [], "FAbilityHitWithOutcome");
addToContainers_struct("FHitActorAndOutcome", "This is just an FAbilityHitWithOutcome but we actually have an actual AActor pointer to \' the actor as opposed to just 2 uint8", "Docs/Structs/FHitActorAndOutcome/FHitActorAndOutcome.html", ["hit", "actor", "and", "outcome"], "");
addToContainers_function("FHitActorAndOutcome", "Never call this ctor", "Docs/Structs/FHitActorAndOutcome/Functions/FHitActorAndOutcome.html", ["hit", "actor", "and", "outcome"], "FHitActorAndOutcome");
addToContainers_function("FHitActorAndOutcome", "", "Docs/Structs/FHitActorAndOutcome/Functions/FHitActorAndOutcome_1.html", ["hit", "actor", "and", "outcome"], "FHitActorAndOutcome");
addToContainers_function("GetSelectable", "", "Docs/Structs/FHitActorAndOutcome/Functions/GetSelectable.html", ["get", "selectable"], "FHitActorAndOutcome");
addToContainers_function("GetOutcome", "", "Docs/Structs/FHitActorAndOutcome/Functions/GetOutcome.html", ["get", "outcome"], "FHitActorAndOutcome");
addToContainers_function("GetOutcome", "", "Docs/Structs/FHitActorAndOutcome/Functions/GetOutcome_1.html", ["get", "outcome"], "FHitActorAndOutcome");
addToContainers_variable("HitActor", "", "Docs/Structs/FHitActorAndOutcome/Variables/HitActor.html", ["hit", "actor"], "FHitActorAndOutcome");
addToContainers_variable("Outcome", "", "Docs/Structs/FHitActorAndOutcome/Variables/Outcome.html", [], "FHitActorAndOutcome");
addToContainers_struct("FHousingResourceState", "Holds how much of a housing resource we are consuming and how much we are providing", "Docs/Structs/FHousingResourceState/FHousingResourceState.html", ["housing", "resource", "state"], "");
addToContainers_function("FHousingResourceState", "", "Docs/Structs/FHousingResourceState/Functions/FHousingResourceState.html", ["housing", "resource", "state"], "FHousingResourceState");
addToContainers_function("FHousingResourceState", "@param ResourceTypeAsInt - EHousingResourceType converted using Statics::HousingResourceTypeToArrayIndex", "Docs/Structs/FHousingResourceState/Functions/FHousingResourceState_1.html", ["housing", "resource", "state"], "FHousingResourceState");
addToContainers_function("AddConsumption", "Basic adjusting functions", "Docs/Structs/FHousingResourceState/Functions/AddConsumption.html", ["add", "consumption"], "FHousingResourceState");
addToContainers_function("RemoveConsumption", "", "Docs/Structs/FHousingResourceState/Functions/RemoveConsumption.html", ["remove", "consumption"], "FHousingResourceState");
addToContainers_function("AddAmountProvided", "@param MaxAmountAllowed - maximum amount of this resource we are allowed e.g. in SCII for housing it is 200", "Docs/Structs/FHousingResourceState/Functions/AddAmountProvided.html", ["add", "amount", "provided"], "FHousingResourceState");
addToContainers_function("RemoveAmountProvided", "", "Docs/Structs/FHousingResourceState/Functions/RemoveAmountProvided.html", ["remove", "amount", "provided"], "FHousingResourceState");
addToContainers_function("GetAmountConsumed", "Get how much we are consuming e.g. if we have 10 zealots this would be 20", "Docs/Structs/FHousingResourceState/Functions/GetAmountConsumed.html", ["get", "amount", "consumed"], "FHousingResourceState");
addToContainers_function("GetAmountProvidedClamped", "Get how much we are providing e.g. if we have 2 pylons this would be 16. This includes any extra amounts the faction always provides. This value is also clamped to take into account limits e.g. if I have 4000 pylons this would still only return 200", "Docs/Structs/FHousingResourceState/Functions/GetAmountProvidedClamped.html", ["get", "amount", "provided", "clamped"], "FHousingResourceState");
addToContainers_variable("AmountConsumed", "Amount we are consuming", "Docs/Structs/FHousingResourceState/Variables/AmountConsumed.html", ["amount", "consumed"], "FHousingResourceState");
addToContainers_variable("AmountProvidedClamped", "Amount we are providing. Clamped to limits", "Docs/Structs/FHousingResourceState/Variables/AmountProvidedClamped.html", ["amount", "provided", "clamped"], "FHousingResourceState");
addToContainers_variable("AmountProvided", "Amount we are providing disregarding any limits", "Docs/Structs/FHousingResourceState/Variables/AmountProvided.html", ["amount", "provided"], "FHousingResourceState");
addToContainers_struct("FInventoryItemID", "Wrapper for the integer we use to identify inventory items. Every item that appears in the world needs one of these assigned to it. This includes items that start in the world at the start of the match. ----------------------------------------------------------------------------------------------- Good criteria for adjusting this value: If you anticipate that more than MAX number of items will ever be spawned (not just exist in the world at the same time but actually spawned throughout the lifetime of your match) then you may want to increase this. Tbh I should probably make this a uint32 by default. -----------------------------------------------------------------------------------------------", "Docs/Structs/FInventoryItemID/FInventoryItemID.html", ["inventory", "item", "i", "d"], "");
addToContainers_function("FInventoryItemID", "", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_function("FInventoryItemID", "", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID_1.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_function("ToString", "", "Docs/Structs/FInventoryItemID/Functions/ToString.html", ["to", "string"], "FInventoryItemID");
addToContainers_function("FInventoryItemID", "Pre increment", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID_2.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_function("FInventoryItemID", "Post increment", "Docs/Structs/FInventoryItemID/Functions/FInventoryItemID_3.html", ["inventory", "item", "i", "d"], "FInventoryItemID");
addToContainers_function("IDStruct)", "Hash", "Docs/Structs/FInventoryItemID/Functions/IDStruct).html", ["d", "struct)"], "FInventoryItemID");
addToContainers_function("RHS)", "TSet/TMap appears to use this one", "Docs/Structs/FInventoryItemID/Functions/RHS).html", ["h", "s)"], "FInventoryItemID");
addToContainers_variable("", "", "Docs/Structs/FInventoryItemID/Variables/.html", [], "FInventoryItemID");
addToContainers_struct("FMapID", "Wrapper for a unique ID for maps. ---------------------------------------------------------------------------------------------- If your map pool is at the limit and you need more maps then increase this ----------------------------------------------------------------------------------------------", "Docs/Structs/FMapID/FMapID.html", ["map", "i", "d"], "");
addToContainers_function("FMapID", "", "Docs/Structs/FMapID/Functions/FMapID.html", ["map", "i", "d"], "FMapID");
addToContainers_function("FMapID", "", "Docs/Structs/FMapID/Functions/FMapID_1.html", ["map", "i", "d"], "FMapID");
addToContainers_function("ToString", "", "Docs/Structs/FMapID/Functions/ToString.html", ["to", "string"], "FMapID");
addToContainers_function("ID_2)", "For hash", "Docs/Structs/FMapID/Functions/ID_2).html", [], "FMapID");
addToContainers_function("InID)", "", "Docs/Structs/FMapID/Functions/InID).html", ["in", "i", "d)"], "FMapID");
addToContainers_variable("", "", "Docs/Structs/FMapID/Variables/.html", [], "FMapID");
addToContainers_struct("FSelectableRankInt", "Wrapper for the level or rank of a selectable. ---------------------------------------------------------------------------------------------- If selectables can reach levels higher than MAX then increase this. ----------------------------------------------------------------------------------------------", "Docs/Structs/FSelectableRankInt/FSelectableRankInt.html", ["selectable", "rank", "int"], "");
addToContainers_function("FSelectableRankInt", "", "Docs/Structs/FSelectableRankInt/Functions/FSelectableRankInt.html", ["selectable", "rank", "int"], "FSelectableRankInt");
addToContainers_function("FSelectableRankInt", "", "Docs/Structs/FSelectableRankInt/Functions/FSelectableRankInt_1.html", ["selectable", "rank", "int"], "FSelectableRankInt");
addToContainers_function("Elem_2)", "For hash", "Docs/Structs/FSelectableRankInt/Functions/Elem_2).html", [], "FSelectableRankInt");
addToContainers_function("Elem)", "", "Docs/Structs/FSelectableRankInt/Functions/Elem).html", [], "FSelectableRankInt");
addToContainers_variable("", "", "Docs/Structs/FSelectableRankInt/Variables/.html", [], "FSelectableRankInt");
addToContainers_struct("FBasicDamageInfo", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FBasicDamageInfo/FBasicDamageInfo.html", ["basic", "damage", "info"], "");
addToContainers_function("FBasicDamageInfo", "", "Docs/Structs/FBasicDamageInfo/Functions/FBasicDamageInfo.html", ["basic", "damage", "info"], "FBasicDamageInfo");
addToContainers_function("FBasicDamageInfo", "", "Docs/Structs/FBasicDamageInfo/Functions/FBasicDamageInfo_1.html", ["basic", "damage", "info"], "FBasicDamageInfo");
addToContainers_function("FBasicDamageInfo", "", "Docs/Structs/FBasicDamageInfo/Functions/FBasicDamageInfo_2.html", ["basic", "damage", "info"], "FBasicDamageInfo");
addToContainers_function("SetValues", "", "Docs/Structs/FBasicDamageInfo/Functions/SetValues.html", ["set", "values"], "FBasicDamageInfo");
addToContainers_function("SetValuesFromProjectile", "Given a projectile blueprint, spawn that projectile and set the damage values on this struct using the damage values of the projectile, then destroy the projectile", "Docs/Structs/FBasicDamageInfo/Functions/SetValuesFromProjectile.html", ["set", "values", "from", "projectile"], "FBasicDamageInfo");
addToContainers_function("SetValuesFromProjectile", "Set damage values from a projectile. This version uses an already spawned projectile actor", "Docs/Structs/FBasicDamageInfo/Functions/SetValuesFromProjectile_1.html", ["set", "values", "from", "projectile"], "FBasicDamageInfo");
addToContainers_function("GetImpactOutgoingDamage", "", "Docs/Structs/FBasicDamageInfo/Functions/GetImpactOutgoingDamage.html", ["get", "impact", "outgoing", "damage"], "FBasicDamageInfo");
addToContainers_function("GetImpactDamageType", "", "Docs/Structs/FBasicDamageInfo/Functions/GetImpactDamageType.html", ["get", "impact", "damage", "type"], "FBasicDamageInfo");
addToContainers_function("GetImpactRandomDamageFactor", "", "Docs/Structs/FBasicDamageInfo/Functions/GetImpactRandomDamageFactor.html", ["get", "impact", "random", "damage", "factor"], "FBasicDamageInfo");
addToContainers_variable("", "How much damage to deal to target", "Docs/Structs/FBasicDamageInfo/Variables/.html", [], "FBasicDamageInfo");
addToContainers_variable("", "Type of damage to deal", "Docs/Structs/FBasicDamageInfo/Variables/_1.html", [], "FBasicDamageInfo");
addToContainers_variable("", "Setting this value > 0 adds some randomness to damage OutgoingDamage = Damage * FMath::RandRange(1.f - RandomDamageFactor, 1.f + RandomDamageFactor)", "Docs/Structs/FBasicDamageInfo/Variables/_2.html", [], "FBasicDamageInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDamageInfo/Variables/_3.html", [], "FBasicDamageInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDamageInfo/Variables/_4.html", [], "FBasicDamageInfo");
addToContainers_variable("", "", "Docs/Structs/FBasicDamageInfo/Variables/_5.html", [], "FBasicDamageInfo");
addToContainers_class("Workarounds", "A file that contains copies of already created functions", "Docs/Classes/Workarounds/Workarounds.html", [], "");
addToContainers_function("CreateMaterialInstanceConstant", "Create a UMaterialInstanceConstant from a material. Duplicate of UBlueprintMaterialTextureNodesBPLibrary::CreateMIC_EditorOnly but I cannot get code to compile with its include file included The material instance will be in the same content folder as the param material Description from original function: Creates a new Material Instance Constant asset Only works in the editor", "Docs/Classes/Workarounds/Functions/CreateMaterialInstanceConstant.html", ["create", "material", "instance", "constant"], "Workarounds");
addToContainers_struct("FFloatAttributeBase", "============================================================================================== A single floating point attribute. Can be modified and will always return to its exact float value eventually i.e. it is not suspectable to floating point errors in the long run. Can be modified by either adding a flat value e.g. add 20 to attack range, or using a multiplier e.g. increase attack range by 10%. Multipliers can be applied in either additive or multiplicative ways e.g. attack range is 500 We get a buff that increases it by 10%. We now have 550 attack range We get another buff that increases attack range by 50%. We can choose to either apply it additively so we now have a 60% boost and have 800 attack range or it can be done multiplicatively and the boost is now 66% and attack range is 830. Addition bonuses are always applied first then the multiplier is applied. Allowing it the other way around I think will require adding more variables. ==============================================================================================", "Docs/Structs/FFloatAttributeBase/FFloatAttributeBase.html", ["float", "attribute", "base"], "");
addToContainers_function("FFloatAttributeBase", "", "Docs/Structs/FFloatAttributeBase/Functions/FFloatAttributeBase.html", ["float", "attribute", "base"], "FFloatAttributeBase");
addToContainers_function("FFloatAttributeBase", "", "Docs/Structs/FFloatAttributeBase/Functions/FFloatAttributeBase_1.html", ["float", "attribute", "base"], "FFloatAttributeBase");
addToContainers_function("GetFinalValue", "Return the final value after taking into account multiplier", "Docs/Structs/FFloatAttributeBase/Functions/GetFinalValue.html", ["get", "final", "value"], "FFloatAttributeBase");
addToContainers_function("SetValuesOnPostEdit", "", "Docs/Structs/FFloatAttributeBase/Functions/SetValuesOnPostEdit.html", ["set", "values", "on", "post", "edit"], "FFloatAttributeBase");
addToContainers_function("SetDefaultValue", "@param TAttribute - type of attribute @param Owner - the selectable that this attribute belongs to. @return - final value after modification", "Docs/Structs/FFloatAttributeBase/Functions/SetDefaultValue.html", ["set", "default", "value"], "FFloatAttributeBase");
addToContainers_function("AdjustDefaultValue", "", "Docs/Structs/FFloatAttributeBase/Functions/AdjustDefaultValue.html", ["adjust", "default", "value"], "FFloatAttributeBase");
addToContainers_function("AdjustDefaultMultiplier_Addition", "", "Docs/Structs/FFloatAttributeBase/Functions/AdjustDefaultMultiplier_Addition.html", ["adjust", "default", "multiplier_", "addition"], "FFloatAttributeBase");
addToContainers_function("AdjustDefaultMultiplier_Multiplication", "", "Docs/Structs/FFloatAttributeBase/Functions/AdjustDefaultMultiplier_Multiplic.html", ["adjust", "default", "multiplier_", "multiplication"], "FFloatAttributeBase");
addToContainers_function("ApplyTempAbsoluteValueChange_Addition", "=========================================================================================", "Docs/Structs/FFloatAttributeBase/Functions/ApplyTempAbsoluteValueChange_Addi.html", ["apply", "temp", "absolute", "value", "change_", "addition"], "FFloatAttributeBase");
addToContainers_function("ApplyTempMultiplierChange_Addition", "", "Docs/Structs/FFloatAttributeBase/Functions/ApplyTempMultiplierChange_Additio.html", ["apply", "temp", "multiplier", "change_", "addition"], "FFloatAttributeBase");
addToContainers_function("ApplyTempMultiplierChange_Multiplication", "", "Docs/Structs/FFloatAttributeBase/Functions/ApplyTempMultiplierChange_Multipl.html", ["apply", "temp", "multiplier", "change_", "multiplication"], "FFloatAttributeBase");
addToContainers_function("RemoveTempAbsoluteValueChange_Addition", "", "Docs/Structs/FFloatAttributeBase/Functions/RemoveTempAbsoluteValueChange_Add.html", ["remove", "temp", "absolute", "value", "change_", "addition"], "FFloatAttributeBase");
addToContainers_function("RemoveTempMultiplierChange_Addition", "", "Docs/Structs/FFloatAttributeBase/Functions/RemoveTempMultiplierChange_Additi.html", ["remove", "temp", "multiplier", "change_", "addition"], "FFloatAttributeBase");
addToContainers_function("RemoveTempMultiplierChange_Multiplication", "", "Docs/Structs/FFloatAttributeBase/Functions/RemoveTempMultiplierChange_Multip.html", ["remove", "temp", "multiplier", "change_", "multiplication"], "FFloatAttributeBase");
addToContainers_function("CheckIfSightRangeOrStealthRevealRangeChanged", "If either sight range or stealth reveal range change then we need to check if the selectable is inside a garrison. If yes then we need to let it know", "Docs/Structs/FFloatAttributeBase/Functions/CheckIfSightRangeOrStealthRevealR.html", ["check", "if", "sight", "range", "or", "stealth", "reveal", "range", "changed"], "FFloatAttributeBase");
addToContainers_function("", "=========================================================================================", "Docs/Structs/FFloatAttributeBase/Functions/.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_1.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_2.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_3.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_4.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_5.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_6.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_7.html", [], "FFloatAttributeBase");
addToContainers_function("", "", "Docs/Structs/FFloatAttributeBase/Functions/_8.html", [], "FFloatAttributeBase");
addToContainers_function("UpdateUI", "Updates the HUD to the current value. @param T - the type of attribute @param HUDWidget - HUD widget for local player", "Docs/Structs/FFloatAttributeBase/Functions/UpdateUI.html", ["update", "u", "i"], "FFloatAttributeBase");
addToContainers_variable("", "The value of Value that is considered the base value", "Docs/Structs/FFloatAttributeBase/Variables/.html", [], "FFloatAttributeBase");
addToContainers_variable("", "Don\'t think this is needed if we disallow additive multiplier adjustments.", "Docs/Structs/FFloatAttributeBase/Variables/_1.html", [], "FFloatAttributeBase");
addToContainers_variable("", "If (NumTempValueModifiers == 0) then this will equal DefaultValue", "Docs/Structs/FFloatAttributeBase/Variables/_2.html", [], "FFloatAttributeBase");
addToContainers_variable("", "If (NumTempMultiplierModifiers == 0) then this will equal DefaultMultiplier", "Docs/Structs/FFloatAttributeBase/Variables/_3.html", [], "FFloatAttributeBase");
addToContainers_variable("NumTempValueModifiers", "How many \"temporary\" modifiers are applied to the attribute", "Docs/Structs/FFloatAttributeBase/Variables/NumTempValueModifiers.html", ["num", "temp", "value", "modifiers"], "FFloatAttributeBase");
addToContainers_variable("NumTempMultiplierModifiers", "", "Docs/Structs/FFloatAttributeBase/Variables/NumTempMultiplierModifiers.html", ["num", "temp", "multiplier", "modifiers"], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_4.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_5.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_6.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_7.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_8.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_9.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_10.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_11.html", [], "FFloatAttributeBase");
addToContainers_variable("", "", "Docs/Structs/FFloatAttributeBase/Variables/_12.html", [], "FFloatAttributeBase");
addToContainers_struct("FAttribute_AttackSpeed", "", "Docs/Structs/FAttribute_AttackSpeed/FAttribute_AttackSpeed.html", ["attribute_", "attack", "speed"], "");
addToContainers_function("FAttribute_AttackSpeed", "", "Docs/Structs/FAttribute_AttackSpeed/Functions/FAttribute_AttackSpeed.html", ["attribute_", "attack", "speed"], "FAttribute_AttackSpeed");
addToContainers_variable("", "Amount of time between point when attack animation fires projectile to the time when the attack animation can start again. Lower = attack faster.", "Docs/Structs/FAttribute_AttackSpeed/Variables/.html", [], "FAttribute_AttackSpeed");
addToContainers_struct("FAttribute_AttackRange", "", "Docs/Structs/FAttribute_AttackRange/FAttribute_AttackRange.html", ["attribute_", "attack", "range"], "");
addToContainers_function("FAttribute_AttackRange", "", "Docs/Structs/FAttribute_AttackRange/Functions/FAttribute_AttackRange.html", ["attribute_", "attack", "range"], "FAttribute_AttackRange");
addToContainers_variable("", "The variable exposed to editor that users can edit", "Docs/Structs/FAttribute_AttackRange/Variables/.html", [], "FAttribute_AttackRange");
addToContainers_struct("FAttribute_Building_SightRange", "Sight range for a building", "Docs/Structs/FAttribute_Building_SightRange/FAttribute_Building_SightRange.html", ["attribute_", "building_", "sight", "range"], "");
addToContainers_function("FAttribute_Building_SightRange", "Might want a contributor variable here", "Docs/Structs/FAttribute_Building_SightRange/Functions/FAttribute_Building_SightRange.html", ["attribute_", "building_", "sight", "range"], "FAttribute_Building_SightRange");
addToContainers_variable("", "Fog of war reveal radius", "Docs/Structs/FAttribute_Building_SightRange/Variables/.html", [], "FAttribute_Building_SightRange");
addToContainers_variable("", "", "Docs/Structs/FAttribute_Building_SightRange/Variables/_1.html", [], "FAttribute_Building_SightRange");
addToContainers_struct("FAttribute_Building_StealthRevealRange", "", "Docs/Structs/FAttribute_Building_StealthReveal/FAttribute_Building_StealthReveal.html", ["attribute_", "building_", "stealth", "reveal", "range"], "");
addToContainers_function("FAttribute_Building_StealthRevealRange", "Might want a contributor variable here", "Docs/Structs/FAttribute_Building_StealthReveal/Functions/FAttribute_Building_StealthReveal.html", ["attribute_", "building_", "stealth", "reveal", "range"], "FAttribute_Building_StealthRevealRange");
addToContainers_variable("", "Range that selectable can reveal other selectables in stealth mode", "Docs/Structs/FAttribute_Building_StealthReveal/Variables/.html", [], "FAttribute_Building_StealthRevealRange");
addToContainers_variable("", "", "Docs/Structs/FAttribute_Building_StealthReveal/Variables/_1.html", [], "FAttribute_Building_StealthRevealRange");
addToContainers_struct("FAttribute_Unit_SightRange", "Sight range for a unit", "Docs/Structs/FAttribute_Unit_SightRange/FAttribute_Unit_SightRange.html", ["attribute_", "unit_", "sight", "range"], "");
addToContainers_function("FAttribute_Unit_SightRange", "", "Docs/Structs/FAttribute_Unit_SightRange/Functions/FAttribute_Unit_SightRange.html", ["attribute_", "unit_", "sight", "range"], "FAttribute_Unit_SightRange");
addToContainers_variable("", "Fog of war reveal radius", "Docs/Structs/FAttribute_Unit_SightRange/Variables/.html", [], "FAttribute_Unit_SightRange");
addToContainers_struct("FAttribute_Unit_StealthRevealRange", "Stealth reveal range for a unit", "Docs/Structs/FAttribute_Unit_StealthRevealRang/FAttribute_Unit_StealthRevealRang.html", ["attribute_", "unit_", "stealth", "reveal", "range"], "");
addToContainers_function("FAttribute_Unit_StealthRevealRange", "", "Docs/Structs/FAttribute_Unit_StealthRevealRang/Functions/FAttribute_Unit_StealthRevealRang.html", ["attribute_", "unit_", "stealth", "reveal", "range"], "FAttribute_Unit_StealthRevealRange");
addToContainers_variable("", "Range that selectable can reveal other selectables in stealth mode", "Docs/Structs/FAttribute_Unit_StealthRevealRang/Variables/.html", [], "FAttribute_Unit_StealthRevealRange");
addToContainers_struct("FAttribute_Defense", "Value = how much to subtract from each instance of incoming damage Multiplier = how much to multiply incoming damage Which happens first can be decided by enum value.", "Docs/Structs/FAttribute_Defense/FAttribute_Defense.html", ["attribute_", "defense"], "");
addToContainers_function("FAttribute_Defense", "", "Docs/Structs/FAttribute_Defense/Functions/FAttribute_Defense.html", ["attribute_", "defense"], "FAttribute_Defense");
addToContainers_variable("ReductionRule", "", "Docs/Structs/FAttribute_Defense/Variables/ReductionRule.html", ["reduction", "rule"], "FAttribute_Defense");
addToContainers_struct("FAttribute_ExperienceBounty", "", "Docs/Structs/FAttribute_ExperienceBounty/FAttribute_ExperienceBounty.html", ["attribute_", "experience", "bounty"], "");
addToContainers_function("FAttribute_ExperienceBounty", "", "Docs/Structs/FAttribute_ExperienceBounty/Functions/FAttribute_ExperienceBounty.html", ["attribute_", "experience", "bounty"], "FAttribute_ExperienceBounty");
addToContainers_variable("", "How much base experience is awarded to an enemy when they destroy this", "Docs/Structs/FAttribute_ExperienceBounty/Variables/.html", [], "FAttribute_ExperienceBounty");
addToContainers_struct("FPIEPlayerInfo", "Info about a player for PIE/standalone", "Docs/Structs/FPIEPlayerInfo/FPIEPlayerInfo.html", ["p", "i", "e", "player", "info"], "");
addToContainers_function("GetTeam", "", "Docs/Structs/FPIEPlayerInfo/Functions/GetTeam.html", ["get", "team"], "FPIEPlayerInfo");
addToContainers_function("GetFaction", "", "Docs/Structs/FPIEPlayerInfo/Functions/GetFaction.html", ["get", "faction"], "FPIEPlayerInfo");
addToContainers_function("GetStartingSpot", "", "Docs/Structs/FPIEPlayerInfo/Functions/GetStartingSpot.html", ["get", "starting", "spot"], "FPIEPlayerInfo");
addToContainers_function("FPIEPlayerInfo", "", "Docs/Structs/FPIEPlayerInfo/Functions/FPIEPlayerInfo.html", ["p", "i", "e", "player", "info"], "FPIEPlayerInfo");
addToContainers_function("FPIEPlayerInfo", "", "Docs/Structs/FPIEPlayerInfo/Functions/FPIEPlayerInfo_1.html", ["p", "i", "e", "player", "info"], "FPIEPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPIEPlayerInfo/Variables/.html", [], "FPIEPlayerInfo");
addToContainers_variable("", "", "Docs/Structs/FPIEPlayerInfo/Variables/_1.html", [], "FPIEPlayerInfo");
addToContainers_variable("", "Use -1 to assign to no starting spot", "Docs/Structs/FPIEPlayerInfo/Variables/_2.html", [], "FPIEPlayerInfo");
addToContainers_struct("FPIECPUPlayerInfo", "Info about CPU player for PIE", "Docs/Structs/FPIECPUPlayerInfo/FPIECPUPlayerInfo.html", ["p", "i", "e", "c", "p", "u", "player", "info"], "");
addToContainers_function("GetDifficulty", "", "Docs/Structs/FPIECPUPlayerInfo/Functions/GetDifficulty.html", ["get", "difficulty"], "FPIECPUPlayerInfo");
addToContainers_function("FPIECPUPlayerInfo", "", "Docs/Structs/FPIECPUPlayerInfo/Functions/FPIECPUPlayerInfo.html", ["p", "i", "e", "c", "p", "u", "player", "info"], "FPIECPUPlayerInfo");
addToContainers_function("FPIECPUPlayerInfo", "", "Docs/Structs/FPIECPUPlayerInfo/Functions/FPIECPUPlayerInfo_1.html", ["p", "i", "e", "c", "p", "u", "player", "info"], "FPIECPUPlayerInfo");
addToContainers_variable("", "Difficulty of CPU player", "Docs/Structs/FPIECPUPlayerInfo/Variables/.html", [], "FPIECPUPlayerInfo");
addToContainers_class("GarrisonStructs", "", "Docs/Classes/GarrisonStructs/GarrisonStructs.html", ["garrison", "structs"], "");
addToContainers_function("GarrisonStructs", "", "Docs/Classes/GarrisonStructs/Functions/GarrisonStructs.html", ["garrison", "structs"], "GarrisonStructs");
addToContainers_function("", "", "Docs/Classes/GarrisonStructs/Functions/.html", [], "GarrisonStructs");
addToContainers_struct("FTemporaryFogRevealEffectInfo", "A temporary fog reveal effect reveals the fog of war around a location for a certain amount of time. They can optionally reveal stealthed selectables too. Examples of these effects: - in C&C Generals: USA command center scan - in SCII: Terran\'s command center scan They may not happen instantly but after a small delay. The reason for this is that suddenly revealing a location might look bad because replication would usually be turned off for actors in fog. Instead we \'prepare\' the area we\'re about to reveal by turning on replication for the actors in the area first and then revealing the location. Note: I have not actually implemented any of this logic yet. It will probably come later when I choose to implement it for units/buildings etc. FIXME: implement this \'pre revealing\' effect on this effect if I end up implementing it for units/buildings etc", "Docs/Structs/FTemporaryFogRevealEffectInfo/FTemporaryFogRevealEffectInfo.html", ["temporary", "fog", "reveal", "effect", "info"], "");
addToContainers_function("FTemporaryFogRevealEffectInfo", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/FTemporaryFogRevealEffectInfo.html", ["temporary", "fog", "reveal", "effect", "info"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("FTemporaryFogRevealEffectInfo", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/FTemporaryFogRevealEffectInfo_1.html", ["temporary", "fog", "reveal", "effect", "info"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("CreateForTeam", "Creates this effect at a location in the world for a team, so everyone on the team will have the area of fog revealed.", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/CreateForTeam.html", ["create", "for", "team"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("CreateForTeam", "This version is for if using multithreaded fog of war manager", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/CreateForTeam_1.html", ["create", "for", "team"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("Tick", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/Tick.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_function("SetDuration", "Set the duration of the reveal. Calling this after the effect has been sent to the fog manager will not do anything", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/SetDuration.html", ["set", "duration"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("GetLocation", "Returns the world location where the effect is", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/GetLocation.html", ["get", "location"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("HasCompleted", "Returns true if the effect has been around long enough that it can expire", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/HasCompleted.html", ["has", "completed"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("OnPostEdit", "Currently this only modifies EditCondition bools so isn\'t strictly required to be called", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/OnPostEdit.html", ["on", "post", "edit"], "FTemporaryFogRevealEffectInfo");
addToContainers_function("ConstructorOnPostEdit", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Functions/ConstructorOnPostEdit.html", ["constructor", "on", "post", "edit"], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "How long this effect lasts for", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "The curve that defines how fast fog is revealed. This should be normalized on each axis. X axis = time (normalized to range [0, 1]) Y axis = % of fog revealed (normalized to range [0, 1]). So 1 implies the full amount of fog is being revealed.", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_1.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "How fast fog is revealed measured in unreal units per second. Only relevant if not using a curve. 0 is code for \'all fog is revealed instantly\'", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_2.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "Radius of circle of fog that is revealed", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_3.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "The radius that stealth mode units are revealed 0 = will not reveal stealth mode units", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_4.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("TimeExisted", "[State variable] How long this effect has been running for", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/TimeExisted.html", ["time", "existed"], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("Location", "[State variable] Location where the effect was spawned. 2D because fog manager does not care about height", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/Location.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_variable("", "", "Docs/Structs/FTemporaryFogRevealEffectInfo/Variables/_5.html", [], "FTemporaryFogRevealEffectInfo");
addToContainers_struct("FTemporaryFogRevealEffectsArray", "Array of FTemporaryFogRevealEffectInfo", "Docs/Structs/FTemporaryFogRevealEffectsArray/FTemporaryFogRevealEffectsArray.html", ["temporary", "fog", "reveal", "effects", "array"], "");
addToContainers_function("FTemporaryFogRevealEffectsArray", "", "Docs/Structs/FTemporaryFogRevealEffectsArray/Functions/FTemporaryFogRevealEffectsArray.html", ["temporary", "fog", "reveal", "effects", "array"], "FTemporaryFogRevealEffectsArray");
addToContainers_function("FTemporaryFogRevealEffectsArray", "", "Docs/Structs/FTemporaryFogRevealEffectsArray/Functions/FTemporaryFogRevealEffectsArray_1.html", ["temporary", "fog", "reveal", "effects", "array"], "FTemporaryFogRevealEffectsArray");
addToContainers_variable("Array", "", "Docs/Structs/FTemporaryFogRevealEffectsArray/Variables/Array.html", [], "FTemporaryFogRevealEffectsArray");
addToContainers_struct("FSpawnDecalInfo", "Info to spawn a decal at a location for a period of time. Examples of use: launching a nuke and want the area where it is landing to have a decal there", "Docs/Structs/FSpawnDecalInfo/FSpawnDecalInfo.html", ["spawn", "decal", "info"], "");
addToContainers_function("FSpawnDecalInfo", "", "Docs/Structs/FSpawnDecalInfo/Functions/FSpawnDecalInfo.html", ["spawn", "decal", "info"], "FSpawnDecalInfo");
addToContainers_function("GetDecal", "", "Docs/Structs/FSpawnDecalInfo/Functions/GetDecal.html", ["get", "decal"], "FSpawnDecalInfo");
addToContainers_function("GetSize", "", "Docs/Structs/FSpawnDecalInfo/Functions/GetSize.html", ["get", "size"], "FSpawnDecalInfo");
addToContainers_function("GetRotation", "", "Docs/Structs/FSpawnDecalInfo/Functions/GetRotation.html", ["get", "rotation"], "FSpawnDecalInfo");
addToContainers_function("GetDuration", "", "Docs/Structs/FSpawnDecalInfo/Functions/GetDuration.html", ["get", "duration"], "FSpawnDecalInfo");
addToContainers_variable("", "--------------------------------------------------------", "Docs/Structs/FSpawnDecalInfo/Variables/.html", [], "FSpawnDecalInfo");
addToContainers_variable("", "Remember: Z axis value (which is actually X here after rotation happens) might significantly affect performance. High values means the decal draws up/down hills but will cost more in performance. If your landscape is completely flat then this can be something like 1", "Docs/Structs/FSpawnDecalInfo/Variables/_1.html", [], "FSpawnDecalInfo");
addToContainers_variable("", "", "Docs/Structs/FSpawnDecalInfo/Variables/_2.html", [], "FSpawnDecalInfo");
addToContainers_variable("", "How long the decal lasts before disappearing", "Docs/Structs/FSpawnDecalInfo/Variables/_3.html", [], "FSpawnDecalInfo");
addToContainers_struct("FKeyInfo", "Information about a single input key for example on the keymoard or mouse", "Docs/Structs/FKeyInfo/FKeyInfo.html", ["key", "info"], "");
addToContainers_function("FKeyInfo", "", "Docs/Structs/FKeyInfo/Functions/FKeyInfo.html", ["key", "info"], "FKeyInfo");
addToContainers_function("FKeyInfo", "", "Docs/Structs/FKeyInfo/Functions/FKeyInfo_1.html", ["key", "info"], "FKeyInfo");
addToContainers_function("FKeyInfo", "", "Docs/Structs/FKeyInfo/Functions/FKeyInfo_2.html", ["key", "info"], "FKeyInfo");
addToContainers_function("DefaultConstructFontInfo", "Set default values for PartialBrushTextFont", "Docs/Structs/FKeyInfo/Functions/DefaultConstructFontInfo.html", ["default", "construct", "font", "info"], "FKeyInfo");
addToContainers_function("GetText", "Trivial getters and setters", "Docs/Structs/FKeyInfo/Functions/GetText.html", ["get", "text"], "FKeyInfo");
addToContainers_function("GetImageDisplayMethod", "", "Docs/Structs/FKeyInfo/Functions/GetImageDisplayMethod.html", ["get", "image", "display", "method"], "FKeyInfo");
addToContainers_function("SetImageDisplayMethod", "", "Docs/Structs/FKeyInfo/Functions/SetImageDisplayMethod.html", ["set", "image", "display", "method"], "FKeyInfo");
addToContainers_function("GetFullBrush", "", "Docs/Structs/FKeyInfo/Functions/GetFullBrush.html", ["get", "full", "brush"], "FKeyInfo");
addToContainers_function("GetPartialBrush", "", "Docs/Structs/FKeyInfo/Functions/GetPartialBrush.html", ["get", "partial", "brush"], "FKeyInfo");
addToContainers_function("SetPartialBrush", "", "Docs/Structs/FKeyInfo/Functions/SetPartialBrush.html", ["set", "partial", "brush"], "FKeyInfo");
addToContainers_function("GetPartialBrushText", "", "Docs/Structs/FKeyInfo/Functions/GetPartialBrushText.html", ["get", "partial", "brush", "text"], "FKeyInfo");
addToContainers_function("GetPartialBrushTextFont", "", "Docs/Structs/FKeyInfo/Functions/GetPartialBrushTextFont.html", ["get", "partial", "brush", "text", "font"], "FKeyInfo");
addToContainers_function("SetPartialFont", "", "Docs/Structs/FKeyInfo/Functions/SetPartialFont.html", ["set", "partial", "font"], "FKeyInfo");
addToContainers_variable("", "The text to display on UI to represent this key", "Docs/Structs/FKeyInfo/Variables/.html", [], "FKeyInfo");
addToContainers_variable("", "Whether to draw text overtop of the image. @See URTSGameInstance::KeyMappings_bForceUsePartialBrushes because it can override this", "Docs/Structs/FKeyInfo/Variables/_1.html", [], "FKeyInfo");
addToContainers_variable("", "The image to display on the UI to represent this button", "Docs/Structs/FKeyInfo/Variables/_2.html", [], "FKeyInfo");
addToContainers_variable("", "The image to display on the UI to represent this key. This brush will have text drawn overtop of it", "Docs/Structs/FKeyInfo/Variables/_3.html", [], "FKeyInfo");
addToContainers_variable("", "The text to draw overtop of PartialBrush", "Docs/Structs/FKeyInfo/Variables/_4.html", [], "FKeyInfo");
addToContainers_variable("", "This is here mainly so you can change the size of the font because like showing \"Q\" or \"Backspace\" there\'sa big difference in length between the two", "Docs/Structs/FKeyInfo/Variables/_5.html", [], "FKeyInfo");
addToContainers_struct("FKeyWithModifiers", "", "Docs/Structs/FKeyWithModifiers/FKeyWithModifiers.html", ["key", "with", "modifiers"], "");
addToContainers_function("FKeyWithModifiers", "This ctor was added for code generation", "Docs/Structs/FKeyWithModifiers/Functions/FKeyWithModifiers.html", ["key", "with", "modifiers"], "FKeyWithModifiers");
addToContainers_function("FKeyWithModifiers", "", "Docs/Structs/FKeyWithModifiers/Functions/FKeyWithModifiers_1.html", ["key", "with", "modifiers"], "FKeyWithModifiers");
addToContainers_function("FKeyWithModifiers", "", "Docs/Structs/FKeyWithModifiers/Functions/FKeyWithModifiers_2.html", ["key", "with", "modifiers"], "FKeyWithModifiers");
addToContainers_function("HasSHIFTModifier", "", "Docs/Structs/FKeyWithModifiers/Functions/HasSHIFTModifier.html", ["has", "s", "h", "i", "f", "t", "modifier"], "FKeyWithModifiers");
addToContainers_function("HasCTRLModifier", "", "Docs/Structs/FKeyWithModifiers/Functions/HasCTRLModifier.html", ["has", "c", "t", "r", "l", "modifier"], "FKeyWithModifiers");
addToContainers_function("HasALTModifier", "", "Docs/Structs/FKeyWithModifiers/Functions/HasALTModifier.html", ["has", "a", "l", "t", "modifier"], "FKeyWithModifiers");
addToContainers_function("HasCMDModifier", "", "Docs/Structs/FKeyWithModifiers/Functions/HasCMDModifier.html", ["has", "c", "m", "d", "modifier"], "FKeyWithModifiers");
addToContainers_function("Struct_2)", "", "Docs/Structs/FKeyWithModifiers/Functions/Struct_2).html", [], "FKeyWithModifiers");
addToContainers_function("Struct)", "", "Docs/Structs/FKeyWithModifiers/Functions/Struct).html", [], "FKeyWithModifiers");
addToContainers_function("ToString", "", "Docs/Structs/FKeyWithModifiers/Functions/ToString.html", ["to", "string"], "FKeyWithModifiers");
addToContainers_variable("", "", "Docs/Structs/FKeyWithModifiers/Variables/.html", [], "FKeyWithModifiers");
addToContainers_variable("", "", "Docs/Structs/FKeyWithModifiers/Variables/_1.html", [], "FKeyWithModifiers");
addToContainers_class("USingleBuffOrDebuffWidget", "A widget to display a single buff or debuff that does not need to show any duration. TODO disable tick and make add a array to display the bindwidgetoptionals in editor", "Docs/Classes/USingleBuffOrDebuffWidget/USingleBuffOrDebuffWidget.html", ["single", "buff", "or", "debuff", "widget"], "");
addToContainers_function("USingleBuffOrDebuffWidget", "", "Docs/Classes/USingleBuffOrDebuffWidget/Functions/USingleBuffOrDebuffWidget.html", ["single", "buff", "or", "debuff", "widget"], "USingleBuffOrDebuffWidget");
addToContainers_function("PopulateBindWidgetOptionalList", "", "Docs/Classes/USingleBuffOrDebuffWidget/Functions/PopulateBindWidgetOptionalList.html", ["populate", "bind", "widget", "optional", "list"], "USingleBuffOrDebuffWidget");
addToContainers_function("GetDisplayTextForDuration", "Given a time return the text that should be shown on UI for that time", "Docs/Classes/USingleBuffOrDebuffWidget/Functions/GetDisplayTextForDuration.html", ["get", "display", "text", "for", "duration"], "USingleBuffOrDebuffWidget");
addToContainers_function("IsWidgetBound", "Just like in UInGameWidgetBase", "Docs/Classes/USingleBuffOrDebuffWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USingleBuffOrDebuffWidget");
addToContainers_function("SetupFor", "Set what text and image to show", "Docs/Classes/USingleBuffOrDebuffWidget/Functions/SetupFor.html", ["setup", "for"], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "Text to display the name of the buff/debuff", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/.html", [], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "Image to display the icon for the buff/debuff", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/_1.html", [], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "A border that will display a certain color depending on the subtype of the buff/debuff. e.g. in a certain MMO magic buffs/debuffs have blue borders, curses have purple borders. Users can just incorperate the border color into the image set on Image_Icon effectively making this irrelevant, but I\'ll keep it here anyway just in case. I really have no idea what the difference between the border\'s Brush Tint and Brush Color is.", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/_2.html", [], "USingleBuffOrDebuffWidget");
addToContainers_variable("", "List of widgets that can be bound with BindWidgetOptional. Auto populated inside ctor. Maps widget name to widget class + it\'s description", "Docs/Classes/USingleBuffOrDebuffWidget/Variables/_3.html", [], "USingleBuffOrDebuffWidget");
addToContainers_class("USingleTickableBuffOrDebuffWidget", "A widget to display a single buff or debuff that would like to show its duration", "Docs/Classes/USingleTickableBuffOrDebuffWidget/USingleTickableBuffOrDebuffWidget.html", ["single", "tickable", "buff", "or", "debuff", "widget"], "");
addToContainers_function("SetupFor", "Setup the widget to display info about a buff/debuff applied @param Info - state info struct of the buff/debuff that is applied", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Functions/SetupFor.html", ["setup", "for"], "USingleTickableBuffOrDebuffWidget");
addToContainers_function("SetDurationRemaining", "Adjust the appearance of the widget to reflect the duration remaining before the buff/debuff falls off. This only needs to be called for buffs/debuffs that no not have an infinite duration @param DurationRemaining - how long buff/debuff has remaining before it expires", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Functions/SetDurationRemaining.html", ["set", "duration", "remaining"], "USingleTickableBuffOrDebuffWidget");
addToContainers_variable("", "Text to show the remaining duration as a number", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Variables/.html", [], "USingleTickableBuffOrDebuffWidget");
addToContainers_variable("", "Progress bar to show the duration remaining in progress bar form", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Variables/_1.html", [], "USingleTickableBuffOrDebuffWidget");
addToContainers_variable("TotalDuration", "How long buff/debuff takes to complete from start to finish, or 0 if infinite in duration", "Docs/Classes/USingleTickableBuffOrDebuffWidget/Variables/TotalDuration.html", ["total", "duration"], "USingleTickableBuffOrDebuffWidget");
addToContainers_class("UEndOfMatchWidget", "The widget to appear when the match has ended", "Docs/Classes/UEndOfMatchWidget/UEndOfMatchWidget.html", ["end", "of", "match", "widget"], "");
addToContainers_function("SetupWidget", "", "Docs/Classes/UEndOfMatchWidget/Functions/SetupWidget.html", ["setup", "widget"], "UEndOfMatchWidget");
addToContainers_function("SetupForResult", "Setup for match result", "Docs/Classes/UEndOfMatchWidget/Functions/SetupForResult.html", ["setup", "for", "result"], "UEndOfMatchWidget");
addToContainers_function("NativeTick", "Override tick to allow widget animations", "Docs/Classes/UEndOfMatchWidget/Functions/NativeTick.html", ["native", "tick"], "UEndOfMatchWidget");
addToContainers_function("UIBinding_OnSpectateButtonClicked", "", "Docs/Classes/UEndOfMatchWidget/Functions/UIBinding_OnSpectateButtonClicked.html", ["i", "binding_", "on", "spectate", "button", "clicked"], "UEndOfMatchWidget");
addToContainers_function("UIBinding_OnReturnToMainMenuButtonClicked", "", "Docs/Classes/UEndOfMatchWidget/Functions/UIBinding_OnReturnToMainMenuButto.html", ["i", "binding_", "on", "return", "to", "main", "menu", "button", "clicked"], "UEndOfMatchWidget");
addToContainers_variable("", "Button to keep spectating even though match has ended", "Docs/Classes/UEndOfMatchWidget/Variables/.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Button to return to main menu", "Docs/Classes/UEndOfMatchWidget/Variables/_1.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Widget to show for victory result", "Docs/Classes/UEndOfMatchWidget/Variables/_2.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Widget to show for draw result", "Docs/Classes/UEndOfMatchWidget/Variables/_3.html", [], "UEndOfMatchWidget");
addToContainers_variable("", "Widget to show for defeat result", "Docs/Classes/UEndOfMatchWidget/Variables/_4.html", [], "UEndOfMatchWidget");
addToContainers_class("UInGameWidgetBase", "A widget that appears during a match", "Docs/Classes/UInGameWidgetBase/UInGameWidgetBase.html", ["in", "game", "widget", "base"], "");
addToContainers_function("UInGameWidgetBase", "", "Docs/Classes/UInGameWidgetBase/Functions/UInGameWidgetBase.html", ["in", "game", "widget", "base"], "UInGameWidgetBase");
addToContainers_function("SetupWidget", "Setup widget right after it is created. Should only be called once @return - true if widget has already setup, false if it has not", "Docs/Classes/UInGameWidgetBase/Functions/SetupWidget.html", ["setup", "widget"], "UInGameWidgetBase");
addToContainers_function("RespondToEscapeRequest", "This is called when the player presses the ESC key and this is the widget that is chosen to be closed. @return - false if it did nothing.", "Docs/Classes/UInGameWidgetBase/Functions/RespondToEscapeRequest.html", ["respond", "to", "escape", "request"], "UInGameWidgetBase");
addToContainers_function("NativeTick", "", "Docs/Classes/UInGameWidgetBase/Functions/NativeTick.html", ["native", "tick"], "UInGameWidgetBase");
addToContainers_function("GetCurrentSelected", "", "Docs/Classes/UInGameWidgetBase/Functions/GetCurrentSelected.html", ["get", "current", "selected"], "UInGameWidgetBase");
addToContainers_function("IsWidgetBound", "Return true if the widget was named correctly in editor, is also the right class and is flagged as a variable", "Docs/Classes/UInGameWidgetBase/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UInGameWidgetBase");
addToContainers_variable("", "Reference to game state", "Docs/Classes/UInGameWidgetBase/Variables/.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/UInGameWidgetBase/Variables/_1.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to local player controller", "Docs/Classes/UInGameWidgetBase/Variables/_2.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to PCs player state", "Docs/Classes/UInGameWidgetBase/Variables/_3.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to faction info of player state", "Docs/Classes/UInGameWidgetBase/Variables/_4.html", [], "UInGameWidgetBase");
addToContainers_variable("", "Reference to the local players current selected", "Docs/Classes/UInGameWidgetBase/Variables/_5.html", [], "UInGameWidgetBase");
addToContainers_variable("bHasSetup", "True if SetupWidget has been called at least once", "Docs/Classes/UInGameWidgetBase/Variables/bHasSetup.html", ["has", "setup"], "UInGameWidgetBase");
addToContainers_variable("", "List of widgets that can be bound with BindWidgetOptional. Auto populated inside ctor. Maps widget name to widget class + it\'s description", "Docs/Classes/UInGameWidgetBase/Variables/_6.html", [], "UInGameWidgetBase");
addToContainers_class("UInMatchDeveloperWidget", "A widget that contains cheat actions to be used during a match that can help with speeding up development. This class is not abstract and has a \'works out of the box\' implementation. This widget is only used with editor so like I care about performance in it. Also oddly it does not show in PIE but does in standalone. Not sure if/when it changed to be like that.", "Docs/Classes/UInMatchDeveloperWidget/UInMatchDeveloperWidget.html", ["in", "match", "developer", "widget"], "");
addToContainers_function("UInMatchDeveloperWidget", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UInMatchDeveloperWidget.html", ["in", "match", "developer", "widget"], "UInMatchDeveloperWidget");
addToContainers_function("SetupWidget", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/SetupWidget.html", ["setup", "widget"], "UInMatchDeveloperWidget");
addToContainers_function("IsEditorOnly", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/IsEditorOnly.html", ["is", "editor", "only"], "UInMatchDeveloperWidget");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/RebuildWidget.html", ["rebuild", "widget"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnDestroySelectableButtonClicked", "=========================================================================================", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnDestroySelectableButt.html", ["i", "binding_", "on", "destroy", "selectable", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnDamageSelectableButtonClicked", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnDamageSelectableButto.html", ["i", "binding_", "on", "damage", "selectable", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnAwardExperienceButtonClicked", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnAwardExperienceButton.html", ["i", "binding_", "on", "award", "experience", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnAwardLotsOfExperienceButtonClicked", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnAwardLotsOfExperience.html", ["i", "binding_", "on", "award", "lots", "of", "experience", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnAwardExperienceToPlayerButtonClicked", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnAwardExperienceToPlay.html", ["i", "binding_", "on", "award", "experience", "to", "player", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnGiveRandomItemButtonClicked", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnGiveRandomItemButtonC.html", ["i", "binding_", "on", "give", "random", "item", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnGiveSpecificItemButtonClicked", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnGiveSpecificItemButto.html", ["i", "binding_", "on", "give", "specific", "item", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("UIBinding_OnGetUnitAIInfoButtonClicked", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/UIBinding_OnGetUnitAIInfoButtonCl.html", ["i", "binding_", "on", "get", "unit", "a", "i", "info", "button", "clicked"], "UInMatchDeveloperWidget");
addToContainers_function("IsPopupMenuShowing", "Return whether the popup menu is showing on screen", "Docs/Classes/UInMatchDeveloperWidget/Functions/IsPopupMenuShowing.html", ["is", "popup", "menu", "showing"], "UInMatchDeveloperWidget");
addToContainers_function("ShowPopupWidget", "Show another widget that is ment for selecting specific stuff. If the popup widget is already showing then this will hide it. @param PopupWidgetsPurpose - why we are showing this popup widget so we can adjust its appearance.", "Docs/Classes/UInMatchDeveloperWidget/Functions/ShowPopupWidget.html", ["show", "popup", "widget"], "UInMatchDeveloperWidget");
addToContainers_function("HidePopupWidget", "", "Docs/Classes/UInMatchDeveloperWidget/Functions/HidePopupWidget.html", ["hide", "popup", "widget"], "UInMatchDeveloperWidget");
addToContainers_variable("STARTING_Y_POSITION", "The Y position to set for the top most button", "Docs/Classes/UInMatchDeveloperWidget/Variables/STARTING_Y_POSITION.html", ["t", "a", "r", "t", "i", "n", "g_", "y_", "p", "o", "s", "i", "t", "i", "o", "n"], "UInMatchDeveloperWidget");
addToContainers_variable("Y_SPACING_BETWEEN_BUTTONS", "Amount of Y axis space between buttons ", "Docs/Classes/UInMatchDeveloperWidget/Variables/Y_SPACING_BETWEEN_BUTTONS.html", ["y_", "s", "p", "a", "c", "i", "n", "g_", "b", "e", "t", "w", "e", "e", "n_", "b", "u", "t", "t", "o", "n", "s"], "UInMatchDeveloperWidget");
addToContainers_variable("BUTTON_SIZE", "Size of each button", "Docs/Classes/UInMatchDeveloperWidget/Variables/BUTTON_SIZE.html", ["u", "t", "t", "o", "n_", "s", "i", "z", "e"], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button to destroy a selectable with a mouse click. More specifically deals 9999999 default damage", "Docs/Classes/UInMatchDeveloperWidget/Variables/.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that deals some damage to a selectable. Deals 20 default damage", "Docs/Classes/UInMatchDeveloperWidget/Variables/_1.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tries to award some experience to a selectable. Awards 55% to 65% of the amount needed to reach the next level.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_2.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tries to award enough experience to a selectable such that it will level up at least two ranks.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_3.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that awards experience to the local player", "Docs/Classes/UInMatchDeveloperWidget/Variables/_4.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tries to put a random item in a selectable\'s inventory This button will likely only be visible for the server player and if items have been defined in EInventoryItem enum.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_5.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Button that tried to put a specific item in a selectable\'s inventory. This button will likely only be visible for the server player and if items have been defined in EInventoryItem enum.", "Docs/Classes/UInMatchDeveloperWidget/Variables/_6.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Shows debug info for a unit", "Docs/Classes/UInMatchDeveloperWidget/Variables/_7.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "Widget to use when a popup menu is required", "Docs/Classes/UInMatchDeveloperWidget/Variables/_8.html", [], "UInMatchDeveloperWidget");
addToContainers_variable("", "", "Docs/Classes/UInMatchDeveloperWidget/Variables/_9.html", [], "UInMatchDeveloperWidget");
addToContainers_class("UDevelopmentPopupWidget", "This is a popup widget used when the action requires being more specific e.g. the action is to give an item to a selectable but we would like to specify exactly which one. Just like the main widget this class is also has a \'works out of the box\' implementation.", "Docs/Classes/UDevelopmentPopupWidget/UDevelopmentPopupWidget.html", ["development", "popup", "widget"], "");
addToContainers_function("UDevelopmentPopupWidget", "", "Docs/Classes/UDevelopmentPopupWidget/Functions/UDevelopmentPopupWidget.html", ["development", "popup", "widget"], "UDevelopmentPopupWidget");
addToContainers_function("IsEditorOnly", "", "Docs/Classes/UDevelopmentPopupWidget/Functions/IsEditorOnly.html", ["is", "editor", "only"], "UDevelopmentPopupWidget");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UDevelopmentPopupWidget/Functions/RebuildWidget.html", ["rebuild", "widget"], "UDevelopmentPopupWidget");
addToContainers_function("OnWidgetAddedToSelectionsPanel", "", "Docs/Classes/UDevelopmentPopupWidget/Functions/OnWidgetAddedToSelectionsPanel.html", ["on", "widget", "added", "to", "selections", "panel"], "UDevelopmentPopupWidget");
addToContainers_function("SetAppearanceFor", "", "Docs/Classes/UDevelopmentPopupWidget/Functions/SetAppearanceFor.html", ["set", "appearance", "for"], "UDevelopmentPopupWidget");
addToContainers_variable("NUM_GRID_PANEL_CHILDREN_PER_ROW", "How many children per row", "Docs/Classes/UDevelopmentPopupWidget/Variables/NUM_GRID_PANEL_CHILDREN_PER_ROW.html", ["u", "m_", "g", "r", "i", "d_", "p", "a", "n", "e", "l_", "c", "h", "i", "l", "d", "r", "e", "n_", "p", "e", "r_", "r", "o", "w"], "UDevelopmentPopupWidget");
addToContainers_variable("", "Panel that holds all the options", "Docs/Classes/UDevelopmentPopupWidget/Variables/.html", [], "UDevelopmentPopupWidget");
addToContainers_variable("", "Widget to use for each individual entry", "Docs/Classes/UDevelopmentPopupWidget/Variables/_1.html", [], "UDevelopmentPopupWidget");
addToContainers_class("UDevelopmentPopupWidgetButton", "A single button in the popup widget. Has default \'works out of the box\' implementation.", "Docs/Classes/UDevelopmentPopupWidgetButton/UDevelopmentPopupWidgetButton.html", ["development", "popup", "widget", "button"], "");
addToContainers_function("uint8", "What button clicks do ", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/uint8.html", [], "UDevelopmentPopupWidgetButton");
addToContainers_function("UDevelopmentPopupWidgetButton", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/UDevelopmentPopupWidgetButton.html", ["development", "popup", "widget", "button"], "UDevelopmentPopupWidgetButton");
addToContainers_function("SetupWidget", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/SetupWidget.html", ["setup", "widget"], "UDevelopmentPopupWidgetButton");
addToContainers_function("IsEditorOnly", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/IsEditorOnly.html", ["is", "editor", "only"], "UDevelopmentPopupWidgetButton");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/RebuildWidget.html", ["rebuild", "widget"], "UDevelopmentPopupWidgetButton");
addToContainers_function("UIBinding_OnButtonClicked", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/UIBinding_OnButtonClicked.html", ["i", "binding_", "on", "button", "clicked"], "UDevelopmentPopupWidgetButton");
addToContainers_function("SetupFor", "Version for inventory items. Set what the appearance and click functionality of this widget should be.", "Docs/Classes/UDevelopmentPopupWidgetButton/Functions/SetupFor.html", ["setup", "for"], "UDevelopmentPopupWidgetButton");
addToContainers_variable("", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/.html", [], "UDevelopmentPopupWidgetButton");
addToContainers_variable("", "Button for click functionality", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/_1.html", [], "UDevelopmentPopupWidgetButton");
addToContainers_variable("", "Image to show something", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/_2.html", [], "UDevelopmentPopupWidgetButton");
addToContainers_variable("ClickFunctionality", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/ClickFunctionality.html", ["click", "functionality"], "UDevelopmentPopupWidgetButton");
addToContainers_variable("ClickAuxilleryInfo", "", "Docs/Classes/UDevelopmentPopupWidgetButton/Variables/ClickAuxilleryInfo.html", ["click", "auxillery", "info"], "UDevelopmentPopupWidgetButton");
addToContainers_class("AMarqueeHUD", "This class is responsible for drawing the marquee selection rectangle on screen and selecting units in the marquee box", "Docs/Classes/AMarqueeHUD/AMarqueeHUD.html", ["marquee", "h", "u", "d"], "");
addToContainers_function("AMarqueeHUD", "", "Docs/Classes/AMarqueeHUD/Functions/AMarqueeHUD.html", ["marquee", "h", "u", "d"], "AMarqueeHUD");
addToContainers_function("PostInitializeComponents", "For 4.20 moved logic from BeginPlay to here because DrawHUD was getting PC == null", "Docs/Classes/AMarqueeHUD/Functions/PostInitializeComponents.html", ["post", "initialize", "components"], "AMarqueeHUD");
addToContainers_function("DrawHUD", "Sort of like Tick() for HUDs. Calls to draw things like rectangles etc must be put in this function", "Docs/Classes/AMarqueeHUD/Functions/DrawHUD.html", ["draw", "h", "u", "d"], "AMarqueeHUD");
addToContainers_function("DrawSelectionBox", "Draw the marquee selection box on screen", "Docs/Classes/AMarqueeHUD/Functions/DrawSelectionBox.html", ["draw", "selection", "box"], "AMarqueeHUD");
addToContainers_function("DrawSelectionFilledRectangle", "", "Docs/Classes/AMarqueeHUD/Functions/DrawSelectionFilledRectangle.html", ["draw", "selection", "filled", "rectangle"], "AMarqueeHUD");
addToContainers_function("DrawSelectionBorder", "", "Docs/Classes/AMarqueeHUD/Functions/DrawSelectionBorder.html", ["draw", "selection", "border"], "AMarqueeHUD");
addToContainers_function("ClearHighlightedSelectables", "Clear InsideBox, making sure to remove their pending selection decals", "Docs/Classes/AMarqueeHUD/Functions/ClearHighlightedSelectables.html", ["clear", "highlighted", "selectables"], "AMarqueeHUD");
addToContainers_function("HighlightUnitsInsideBox", "", "Docs/Classes/AMarqueeHUD/Functions/HighlightUnitsInsideBox.html", ["highlight", "units", "inside", "box"], "AMarqueeHUD");
addToContainers_function("MakeMarqueeSelection", "Selects all units in marquee box puts them in OutActors, or if no units were in the marquee box then does not modify OutActors. OutActors should not be cleared before calling this. Also puts the unit who should have their context menu shown into OutActors[0] @param FirstPoint - A corner of the rectangle @param SecondPoint - Another corner of the rectangle @param OutActors - The array to add the units to @param ExtentMultiplier - What to multiply the bounds by to make it harder to select units partially inside the selection box @return - true if the selection changed from what was selected before", "Docs/Classes/AMarqueeHUD/Functions/MakeMarqueeSelection.html", ["make", "marquee", "selection"], "AMarqueeHUD");
addToContainers_function("SetClickLocation", "", "Docs/Classes/AMarqueeHUD/Functions/SetClickLocation.html", ["set", "click", "location"], "AMarqueeHUD");
addToContainers_function("SetMouseLoc", "", "Docs/Classes/AMarqueeHUD/Functions/SetMouseLoc.html", ["set", "mouse", "loc"], "AMarqueeHUD");
addToContainers_function("SetMarqueeSettingsValues", "", "Docs/Classes/AMarqueeHUD/Functions/SetMarqueeSettingsValues.html", ["set", "marquee", "settings", "values"], "AMarqueeHUD");
addToContainers_function("SetPerformMarqueeASAP", "Set bPerfromMarqueeASAP which if true will perform a marquee selection on next tick and put actors in PC->Selected", "Docs/Classes/AMarqueeHUD/Functions/SetPerformMarqueeASAP.html", ["set", "perform", "marquee", "a", "s", "a", "p"], "AMarqueeHUD");
addToContainers_function("SetPC", "", "Docs/Classes/AMarqueeHUD/Functions/SetPC.html", ["set", "p", "c"], "AMarqueeHUD");
addToContainers_variable("ClickLoc", "2D coordinates for where LMB was pressed", "Docs/Classes/AMarqueeHUD/Variables/ClickLoc.html", ["click", "loc"], "AMarqueeHUD");
addToContainers_variable("MouseLoc", "2D coords of current mouse location", "Docs/Classes/AMarqueeHUD/Variables/MouseLoc.html", ["mouse", "loc"], "AMarqueeHUD");
addToContainers_variable("MarqueeBoxDrawMethod", "Copies of these 4 variables are in GI", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBoxDrawMethod.html", ["marquee", "box", "draw", "method"], "AMarqueeHUD");
addToContainers_variable("MarqueeBoxRectangleColor", "", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBoxRectangleColor.html", ["marquee", "box", "rectangle", "color"], "AMarqueeHUD");
addToContainers_variable("MarqueeBoxBorderColor", "", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBoxBorderColor.html", ["marquee", "box", "border", "color"], "AMarqueeHUD");
addToContainers_variable("MarqueeBorderLineThickness", "", "Docs/Classes/AMarqueeHUD/Variables/MarqueeBorderLineThickness.html", ["marquee", "border", "line", "thickness"], "AMarqueeHUD");
addToContainers_variable("bPerformMarqueeASAP", "True if a marquee selection should be performed when DrawHUD is called", "Docs/Classes/AMarqueeHUD/Variables/bPerformMarqueeASAP.html", ["perform", "marquee", "a", "s", "a", "p"], "AMarqueeHUD");
addToContainers_variable("", "Array of all units that are inside a pending marquee box. If the player lets go of the LMB they will be selected", "Docs/Classes/AMarqueeHUD/Variables/.html", [], "AMarqueeHUD");
addToContainers_variable("", "Reference to player controller", "Docs/Classes/AMarqueeHUD/Variables/_1.html", [], "AMarqueeHUD");
addToContainers_class("URTSHUD", "In-game HUD. Each faction can use its own HUD. Some things: - if you want a UI element to not allow mouse pressed to go through it then make sure to create bindings for OnMouseButtonDown and OnMouseButtonUp and return FReplay::Handled. Currently you have to do this in the editor which means it will be a blueprint binding. /Begin verbose comment For performance I would like to move this to C++ in the future. If all UI elements should block by default (which I think is what all RTSs do anyway) then I could make sure during setup to iterate every widget of the HUD and add a NOOP binding to both OnMouseButtonDown and OnMouseButtonUp. If users want to pick and choose which should and shouldn\'t block then the only way I think I can do that is by creating my own SWidgets/UWidgets for each widget type... which would be a lot of effort.", "Docs/Classes/URTSHUD/URTSHUD.html", ["r", "t", "s", "h", "u", "d"], "");
addToContainers_function("URTSHUD", "=====================================================================================", "Docs/Classes/URTSHUD/Functions/URTSHUD.html", ["r", "t", "s", "h", "u", "d"], "URTSHUD");
addToContainers_function("SetupWidget", "", "Docs/Classes/URTSHUD/Functions/SetupWidget.html", ["setup", "widget"], "URTSHUD");
addToContainers_function("SetupMinimap", "Setup the minimap @param FogVolume - fog volume for current map", "Docs/Classes/URTSHUD/Functions/SetupMinimap.html", ["setup", "minimap"], "URTSHUD");
addToContainers_function("NativeTick", "TODO instead of UUserWidget some that are never reused could just be UPanelWidget", "Docs/Classes/URTSHUD/Functions/NativeTick.html", ["native", "tick"], "URTSHUD");
addToContainers_function("SetupBindings", "", "Docs/Classes/URTSHUD/Functions/SetupBindings.html", ["setup", "bindings"], "URTSHUD");
addToContainers_function("SetupBoundWidgets", "Call SetupWidget on all the BindWidget widgets", "Docs/Classes/URTSHUD/Functions/SetupBoundWidgets.html", ["setup", "bound", "widgets"], "URTSHUD");
addToContainers_function("SpawnMouseHoverAndPressedWidget", "Spawns the widget we use to make mouse hover/pressed effects", "Docs/Classes/URTSHUD/Functions/SpawnMouseHoverAndPressedWidget.html", ["spawn", "mouse", "hover", "and", "pressed", "widget"], "URTSHUD");
addToContainers_function("SetupCommanderSkillTreeWidget", "", "Docs/Classes/URTSHUD/Functions/SetupCommanderSkillTreeWidget.html", ["setup", "commander", "skill", "tree", "widget"], "URTSHUD");
addToContainers_function("SetupPlayerTargetingWidget", "", "Docs/Classes/URTSHUD/Functions/SetupPlayerTargetingWidget.html", ["setup", "player", "targeting", "widget"], "URTSHUD");
addToContainers_function("PerformPlayerTargetingPanelFinalSetup", "", "Docs/Classes/URTSHUD/Functions/PerformPlayerTargetingPanelFinalS.html", ["perform", "player", "targeting", "panel", "final", "setup"], "URTSHUD");
addToContainers_function("SetupPauseMenu", "", "Docs/Classes/URTSHUD/Functions/SetupPauseMenu.html", ["setup", "pause", "menu"], "URTSHUD");
addToContainers_function("SetupMenuOutputWidget", "", "Docs/Classes/URTSHUD/Functions/SetupMenuOutputWidget.html", ["setup", "menu", "output", "widget"], "URTSHUD");
addToContainers_function("SpawnTooltipWidgets", "", "Docs/Classes/URTSHUD/Functions/SpawnTooltipWidgets.html", ["spawn", "tooltip", "widgets"], "URTSHUD");
addToContainers_function("GetPlayerExperienceAquiredAsText", "", "Docs/Classes/URTSHUD/Functions/GetPlayerExperienceAquiredAsText.html", ["get", "player", "experience", "aquired", "as", "text"], "URTSHUD");
addToContainers_function("GetPlayerExperienceRequiredAsText", "", "Docs/Classes/URTSHUD/Functions/GetPlayerExperienceRequiredAsText.html", ["get", "player", "experience", "required", "as", "text"], "URTSHUD");
addToContainers_function("UIBinding_OnPauseMenuButtonLeftMousePress", "==========================================================================================", "Docs/Classes/URTSHUD/Functions/UIBinding_OnPauseMenuButtonLeftMo.html", ["i", "binding_", "on", "pause", "menu", "button", "left", "mouse", "press"], "URTSHUD");
addToContainers_function("UIBinding_OnPauseMenuButtonLeftMouseReleased", "", "Docs/Classes/URTSHUD/Functions/UIBinding_OnPauseMenuButtonLeftMo_1.html", ["i", "binding_", "on", "pause", "menu", "button", "left", "mouse", "released"], "URTSHUD");
addToContainers_function("UIBinding_OnPauseMenuButtonRightMousePress", "", "Docs/Classes/URTSHUD/Functions/UIBinding_OnPauseMenuButtonRightM.html", ["i", "binding_", "on", "pause", "menu", "button", "right", "mouse", "press"], "URTSHUD");
addToContainers_function("UIBinding_OnPauseMenuButtonRightMouseReleased", "", "Docs/Classes/URTSHUD/Functions/UIBinding_OnPauseMenuButtonRightM_1.html", ["i", "binding_", "on", "pause", "menu", "button", "right", "mouse", "released"], "URTSHUD");
addToContainers_function("UIBinding_OnCommanderSkillTreeButtonLeftMousePress", "", "Docs/Classes/URTSHUD/Functions/UIBinding_OnCommanderSkillTreeBut.html", ["i", "binding_", "on", "commander", "skill", "tree", "button", "left", "mouse", "press"], "URTSHUD");
addToContainers_function("UIBinding_OnCommanderSkillTreeButtonLeftMouseReleased", "", "Docs/Classes/URTSHUD/Functions/UIBinding_OnCommanderSkillTreeBut_1.html", ["i", "binding_", "on", "commander", "skill", "tree", "button", "left", "mouse", "released"], "URTSHUD");
addToContainers_function("UIBinding_OnCommanderSkillTreeButtonRightMousePress", "", "Docs/Classes/URTSHUD/Functions/UIBinding_OnCommanderSkillTreeBut_2.html", ["i", "binding_", "on", "commander", "skill", "tree", "button", "right", "mouse", "press"], "URTSHUD");
addToContainers_function("UIBinding_OnCommanderSkillTreeButtonRightMouseReleased", "", "Docs/Classes/URTSHUD/Functions/UIBinding_OnCommanderSkillTreeBut_3.html", ["i", "binding_", "on", "commander", "skill", "tree", "button", "right", "mouse", "released"], "URTSHUD");
addToContainers_function("TellPlayerTargetingPanelAboutButtonAction_LMBPressed", "", "Docs/Classes/URTSHUD/Functions/TellPlayerTargetingPanelAboutButt.html", ["tell", "player", "targeting", "panel", "about", "button", "action_", "l", "m", "b", "pressed"], "URTSHUD");
addToContainers_function("TellPlayerTargetingPanelAboutButtonAction_LMBReleased", "", "Docs/Classes/URTSHUD/Functions/TellPlayerTargetingPanelAboutButt_1.html", ["tell", "player", "targeting", "panel", "about", "button", "action_", "l", "m", "b", "released"], "URTSHUD");
addToContainers_function("TellPlayerTargetingPanelAboutButtonAction_RMBPressed", "", "Docs/Classes/URTSHUD/Functions/TellPlayerTargetingPanelAboutButt_2.html", ["tell", "player", "targeting", "panel", "about", "button", "action_", "r", "m", "b", "pressed"], "URTSHUD");
addToContainers_function("TellPlayerTargetingPanelAboutButtonAction_RMBReleased", "", "Docs/Classes/URTSHUD/Functions/TellPlayerTargetingPanelAboutButt_3.html", ["tell", "player", "targeting", "panel", "about", "button", "action_", "r", "m", "b", "released"], "URTSHUD");
addToContainers_function("OnPlayerCurrentSelectedChanged", "Called when the player changes their CurrentSelected ", "Docs/Classes/URTSHUD/Functions/OnPlayerCurrentSelectedChanged.html", ["on", "player", "current", "selected", "changed"], "URTSHUD");
addToContainers_function("OnPlayerNoSelection", "Called when the player has no selection", "Docs/Classes/URTSHUD/Functions/OnPlayerNoSelection.html", ["on", "player", "no", "selection"], "URTSHUD");
addToContainers_function("TryShowCommanderSkillTree", "Will show the commander skill tree if it is not already showing or in the process of being shown", "Docs/Classes/URTSHUD/Functions/TryShowCommanderSkillTree.html", ["try", "show", "commander", "skill", "tree"], "URTSHUD");
addToContainers_function("TryHideCommanderSkillTree", "Will hide the commander skill tree if it is not already hidden or in the process of being hidden", "Docs/Classes/URTSHUD/Functions/TryHideCommanderSkillTree.html", ["try", "hide", "commander", "skill", "tree"], "URTSHUD");
addToContainers_function("OnToggleCommanderSkillTreeButtonClicked", "", "Docs/Classes/URTSHUD/Functions/OnToggleCommanderSkillTreeButtonC.html", ["on", "toggle", "commander", "skill", "tree", "button", "clicked"], "URTSHUD");
addToContainers_function("OnToggleCommanderSkillTreeVisibilityKeyPressed", "", "Docs/Classes/URTSHUD/Functions/OnToggleCommanderSkillTreeVisibil.html", ["on", "toggle", "commander", "skill", "tree", "visibility", "key", "pressed"], "URTSHUD");
addToContainers_function("ShowPlayerTargetingPanel", "", "Docs/Classes/URTSHUD/Functions/ShowPlayerTargetingPanel.html", ["show", "player", "targeting", "panel"], "URTSHUD");
addToContainers_function("HidePlayerTargetingPanel", "", "Docs/Classes/URTSHUD/Functions/HidePlayerTargetingPanel.html", ["hide", "player", "targeting", "panel"], "URTSHUD");
addToContainers_function("OnCommanderExperienceGained", "Called when the player gains experience but does not level up as a result of it", "Docs/Classes/URTSHUD/Functions/OnCommanderExperienceGained.html", ["on", "commander", "experience", "gained"], "URTSHUD");
addToContainers_function("OnCommanderRankGained_LastForEvent", "Called when the player ranks up but only for the last level gained if multplie levels were gained at a time", "Docs/Classes/URTSHUD/Functions/OnCommanderRankGained_LastForEven.html", ["on", "commander", "rank", "gained_", "last", "for", "event"], "URTSHUD");
addToContainers_function("OnCommanderSkillAquired", "Called when the player aquires a commander skill, either a new one entirely or a new rank of one. @param NodeWidget - the node that was aquired @param NumUnspentSkillPoints - number of unspent skill points the player has", "Docs/Classes/URTSHUD/Functions/OnCommanderSkillAquired.html", ["on", "commander", "skill", "aquired"], "URTSHUD");
addToContainers_function("OnCommanderAbilityUsed", "Called when a commander ability is used @param UsedAbility - ability info for the ability that was used @param GlobalSkillsPanelIndex - index in the global skills panel\'s AllButtons array that the ability is. @param bWasLastCharge - whether that was the last time the ability can be used if it is a limited use ability", "Docs/Classes/URTSHUD/Functions/OnCommanderAbilityUsed.html", ["on", "commander", "ability", "used"], "URTSHUD");
addToContainers_function("OnCommanderAbilityCooledDown", "Called when a commander ability comes off cooldown. This could be either the initial cooldown or the regular cooldown. @param AbilityInfo - info struct for the ability that has come off cooldown", "Docs/Classes/URTSHUD/Functions/OnCommanderAbilityCooledDown.html", ["on", "commander", "ability", "cooled", "down"], "URTSHUD");
addToContainers_function("Selected_OnHealthChanged", "Functions for when stats of a selected selectable changes", "Docs/Classes/URTSHUD/Functions/Selected_OnHealthChanged.html", ["selected_", "on", "health", "changed"], "URTSHUD");
addToContainers_function("Selected_OnMaxHealthChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnMaxHealthChanged.html", ["selected_", "on", "max", "health", "changed"], "URTSHUD");
addToContainers_function("Selected_OnCurrentAndMaxHealthChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnCurrentAndMaxHealthCha.html", ["selected_", "on", "current", "and", "max", "health", "changed"], "URTSHUD");
addToContainers_function("Selected_OnSelectableResourceCurrentAmountChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnSelectableResourceCurr.html", ["selected_", "on", "selectable", "resource", "current", "amount", "changed"], "URTSHUD");
addToContainers_function("Selected_OnSelectableResourceMaxAmountChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnSelectableResourceMaxA.html", ["selected_", "on", "selectable", "resource", "max", "amount", "changed"], "URTSHUD");
addToContainers_function("Selected_OnSelectableResourceCurrentAndMaxAmountsChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnSelectableResourceCurr_1.html", ["selected_", "on", "selectable", "resource", "current", "and", "max", "amounts", "changed"], "URTSHUD");
addToContainers_function("Selected_OnSelectableResourceRegenRateChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnSelectableResourceRege.html", ["selected_", "on", "selectable", "resource", "regen", "rate", "changed"], "URTSHUD");
addToContainers_function("Selected_OnRankChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnRankChanged.html", ["selected_", "on", "rank", "changed"], "URTSHUD");
addToContainers_function("Selected_OnCurrentRankExperienceChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnCurrentRankExperienceC.html", ["selected_", "on", "current", "rank", "experience", "changed"], "URTSHUD");
addToContainers_function("Selected_OnImpactDamageChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnImpactDamageChanged.html", ["selected_", "on", "impact", "damage", "changed"], "URTSHUD");
addToContainers_function("Selected_OnAttackRateChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnAttackRateChanged.html", ["selected_", "on", "attack", "rate", "changed"], "URTSHUD");
addToContainers_function("Selected_OnAttackRangeChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnAttackRangeChanged.html", ["selected_", "on", "attack", "range", "changed"], "URTSHUD");
addToContainers_function("Selected_OnDefenseMultiplierChanged", "", "Docs/Classes/URTSHUD/Functions/Selected_OnDefenseMultiplierChang.html", ["selected_", "on", "defense", "multiplier", "changed"], "URTSHUD");
addToContainers_function("Selected_OnItemAddedToInventory", "", "Docs/Classes/URTSHUD/Functions/Selected_OnItemAddedToInventory.html", ["selected_", "on", "item", "added", "to", "inventory"], "URTSHUD");
addToContainers_function("Selected_OnItemsRemovedFromInventory", "", "Docs/Classes/URTSHUD/Functions/Selected_OnItemsRemovedFromInvent.html", ["selected_", "on", "items", "removed", "from", "inventory"], "URTSHUD");
addToContainers_function("Selected_OnInventoryPositionsSwapped", "", "Docs/Classes/URTSHUD/Functions/Selected_OnInventoryPositionsSwap.html", ["selected_", "on", "inventory", "positions", "swapped"], "URTSHUD");
addToContainers_function("Selected_OnInventoryItemUsed", "@param UseAbilityTotalCooldown - pass in 0 to say \'has no cooldown\'", "Docs/Classes/URTSHUD/Functions/Selected_OnInventoryItemUsed.html", ["selected_", "on", "inventory", "item", "used"], "URTSHUD");
addToContainers_function("Selected_OnInventoryItemUseCooldownFinished", "", "Docs/Classes/URTSHUD/Functions/Selected_OnInventoryItemUseCooldo.html", ["selected_", "on", "inventory", "item", "use", "cooldown", "finished"], "URTSHUD");
addToContainers_function("Selected_OnItemPurchasedFromShop", "", "Docs/Classes/URTSHUD/Functions/Selected_OnItemPurchasedFromShop.html", ["selected_", "on", "item", "purchased", "from", "shop"], "URTSHUD");
addToContainers_function("Selected_OnInventoryItemSold", "", "Docs/Classes/URTSHUD/Functions/Selected_OnInventoryItemSold.html", ["selected_", "on", "inventory", "item", "sold"], "URTSHUD");
addToContainers_function("Selected_OnBuffApplied", "Called when a buff/debuff is applied", "Docs/Classes/URTSHUD/Functions/Selected_OnBuffApplied.html", ["selected_", "on", "buff", "applied"], "URTSHUD");
addToContainers_function("Selected_OnBuffApplied", "", "Docs/Classes/URTSHUD/Functions/Selected_OnBuffApplied_1.html", ["selected_", "on", "buff", "applied"], "URTSHUD");
addToContainers_function("Selected_OnDebuffApplied", "", "Docs/Classes/URTSHUD/Functions/Selected_OnDebuffApplied.html", ["selected_", "on", "debuff", "applied"], "URTSHUD");
addToContainers_function("Selected_OnDebuffApplied", "", "Docs/Classes/URTSHUD/Functions/Selected_OnDebuffApplied_1.html", ["selected_", "on", "debuff", "applied"], "URTSHUD");
addToContainers_function("Selected_OnTickableBuffRemoved", "Called when a tickable buff is removed for whatever reason @param ArrayIndex - index buff was in the selectable\'s tickable buff array", "Docs/Classes/URTSHUD/Functions/Selected_OnTickableBuffRemoved.html", ["selected_", "on", "tickable", "buff", "removed"], "URTSHUD");
addToContainers_function("Selected_OnTickableDebuffRemoved", "Debuff version", "Docs/Classes/URTSHUD/Functions/Selected_OnTickableDebuffRemoved.html", ["selected_", "on", "tickable", "debuff", "removed"], "URTSHUD");
addToContainers_function("Selected_OnStaticBuffRemoved", "", "Docs/Classes/URTSHUD/Functions/Selected_OnStaticBuffRemoved.html", ["selected_", "on", "static", "buff", "removed"], "URTSHUD");
addToContainers_function("Selected_OnStaticDebuffRemoved", "", "Docs/Classes/URTSHUD/Functions/Selected_OnStaticDebuffRemoved.html", ["selected_", "on", "static", "debuff", "removed"], "URTSHUD");
addToContainers_function("Selected_UpdateTickableBuffDuration", "Called to update the duration left of a buff. @param ArrayIndex - index of buff in the selectable\'s tickable buff array @param DurationRemaining - how much is left for buff", "Docs/Classes/URTSHUD/Functions/Selected_UpdateTickableBuffDurati.html", ["selected_", "update", "tickable", "buff", "duration"], "URTSHUD");
addToContainers_function("Selected_UpdateTickableDebuffDuration", "Debuff version", "Docs/Classes/URTSHUD/Functions/Selected_UpdateTickableDebuffDura.html", ["selected_", "update", "tickable", "debuff", "duration"], "URTSHUD");
addToContainers_function("OnUnitEnteredBuildingGarrison", "Called whenever a unit enters a building garrison, regardless of whether the building is selected or not", "Docs/Classes/URTSHUD/Functions/OnUnitEnteredBuildingGarrison.html", ["on", "unit", "entered", "building", "garrison"], "URTSHUD");
addToContainers_function("OnUnitExitedBuildingGarrison", "Called whenever a unit exits a building garrison, regardless of whether the building is selected or not", "Docs/Classes/URTSHUD/Functions/OnUnitExitedBuildingGarrison.html", ["on", "unit", "exited", "building", "garrison"], "URTSHUD");
addToContainers_function("OnBuildingGarrisonMultipleUnitsEnteredOrExited", "Called when multiple changes to a building garrison happen at once, regardless of whether the building is selected or not. This is here for performance - calling OnUnitEnteredBuildingGarrison or OnUnitEnteredBuildingGarrison many times should have the same effect", "Docs/Classes/URTSHUD/Functions/OnBuildingGarrisonMultipleUnitsEn.html", ["on", "building", "garrison", "multiple", "units", "entered", "or", "exited"], "URTSHUD");
addToContainers_function("OnGarrisonedUnitZeroHealth", "Called when a unit reaches zero health and that unit was garrisoned inside a building regardless of whether the building is selected or not.", "Docs/Classes/URTSHUD/Functions/OnGarrisonedUnitZeroHealth.html", ["on", "garrisoned", "unit", "zero", "health"], "URTSHUD");
addToContainers_function("IsChatBoxShowing", "", "Docs/Classes/URTSHUD/Functions/IsChatBoxShowing.html", ["is", "chat", "box", "showing"], "URTSHUD");
addToContainers_function("OpenChatBox", "", "Docs/Classes/URTSHUD/Functions/OpenChatBox.html", ["open", "chat", "box"], "URTSHUD");
addToContainers_function("CloseChatBox", "", "Docs/Classes/URTSHUD/Functions/CloseChatBox.html", ["close", "chat", "box"], "URTSHUD");
addToContainers_function("OnGameMessageReceived", "Called when a game message is received like \"Not enough resources\"", "Docs/Classes/URTSHUD/Functions/OnGameMessageReceived.html", ["on", "game", "message", "received"], "URTSHUD");
addToContainers_function("OnChatMessageReceived", "Called when a in-match chat mesage is received @param SendersName - name of player that sent message @param Message - what the player typed in @prarm MessageType - who the message was sent to", "Docs/Classes/URTSHUD/Functions/OnChatMessageReceived.html", ["on", "chat", "message", "received"], "URTSHUD");
addToContainers_function("OnMenuWarningHappened", "", "Docs/Classes/URTSHUD/Functions/OnMenuWarningHappened.html", ["on", "menu", "warning", "happened"], "URTSHUD");
addToContainers_function("SendChatMessage", "Send what is typed into chat input. This is called BY PC when they press enter but focus is not on the chat box", "Docs/Classes/URTSHUD/Functions/SendChatMessage.html", ["send", "chat", "message"], "URTSHUD");
addToContainers_function("IsPauseMenuShowingOrPlayingShowAnimation", "", "Docs/Classes/URTSHUD/Functions/IsPauseMenuShowingOrPlayingShowAn.html", ["is", "pause", "menu", "showing", "or", "playing", "show", "animation"], "URTSHUD");
addToContainers_function("ShowPauseMenu", "", "Docs/Classes/URTSHUD/Functions/ShowPauseMenu.html", ["show", "pause", "menu"], "URTSHUD");
addToContainers_function("HidePauseMenu", "", "Docs/Classes/URTSHUD/Functions/HidePauseMenu.html", ["hide", "pause", "menu"], "URTSHUD");
addToContainers_function("TryCloseEscapableWidget", "If there are any menus that should be closed when the player presses ESC then this should close one. @return - true if a menu was closed", "Docs/Classes/URTSHUD/Functions/TryCloseEscapableWidget.html", ["try", "close", "escapable", "widget"], "URTSHUD");
addToContainers_function("SetInitialResourceAmounts", "Set the initial amount of resources to show. Only call at the start of a match and not during one - use OnResourcesChanged instead", "Docs/Classes/URTSHUD/Functions/SetInitialResourceAmounts.html", ["set", "initial", "resource", "amounts"], "URTSHUD");
addToContainers_function("OnResourceChanged", "Call to update HUD when a single resource value changes @param ResourceType - the type of resource tp update @param PreviousAmount - amount resource was at before change happened @param NewAmount - new amount resource should be at", "Docs/Classes/URTSHUD/Functions/OnResourceChanged.html", ["on", "resource", "changed"], "URTSHUD");
addToContainers_function("OnResourcesChanged", "Call to update HUD when potentially many resource values change @param PreviousAmounts - resource array before change @param NewAmounts - resource array after change", "Docs/Classes/URTSHUD/Functions/OnResourcesChanged.html", ["on", "resources", "changed"], "URTSHUD");
addToContainers_function("OnHousingResourceConsumptionChanged", "Call when housing resources change. This will update all housing resources", "Docs/Classes/URTSHUD/Functions/OnHousingResourceConsumptionChang.html", ["on", "housing", "resource", "consumption", "changed"], "URTSHUD");
addToContainers_function("OnHousingResourceProvisionsChanged", "", "Docs/Classes/URTSHUD/Functions/OnHousingResourceProvisionsChange.html", ["on", "housing", "resource", "provisions", "changed"], "URTSHUD");
addToContainers_function("OnUpgradeComplete", "Called when the local player completes researching an upgrade @param bUpgradePrereqsNowMetForSomething - whether a selectable previously required a prereq that was an upgrade but now that this upgrade has been researched it has all its upgrade prereqs fulfilled.", "Docs/Classes/URTSHUD/Functions/OnUpgradeComplete.html", ["on", "upgrade", "complete"], "URTSHUD");
addToContainers_function("OnItemAddedToProductionQueue", "When an item is added to the production queue but not started immediately", "Docs/Classes/URTSHUD/Functions/OnItemAddedToProductionQueue.html", ["on", "item", "added", "to", "production", "queue"], "URTSHUD");
addToContainers_function("OnItemAddedAndProductionStarted", "When an item is added to a production queue and is started immediately", "Docs/Classes/URTSHUD/Functions/OnItemAddedAndProductionStarted.html", ["on", "item", "added", "and", "production", "started"], "URTSHUD");
addToContainers_function("OnProductionComplete", "When the front of a production queue completes. Assumed next item starts immediately. Should be called after the producer has removed what has needed to be removed @param Item - item that was just produced @param Queue - production queue that just produced something @param NumRemoved - number of items removed from the queue because it could be more than 1 if some of the other items did not meet prerequisites @param Producer - actor that the queue is a part of", "Docs/Classes/URTSHUD/Functions/OnProductionComplete.html", ["on", "production", "complete"], "URTSHUD");
addToContainers_function("OnBuildsInTabProductionComplete", "", "Docs/Classes/URTSHUD/Functions/OnBuildsInTabProductionComplete.html", ["on", "builds", "in", "tab", "production", "complete"], "URTSHUD");
addToContainers_function("OnBuildsInTabBuildingPlaced", "", "Docs/Classes/URTSHUD/Functions/OnBuildsInTabBuildingPlaced.html", ["on", "builds", "in", "tab", "building", "placed"], "URTSHUD");
addToContainers_function("OnBuildingConstructed", "Functions called when a building is built/destroyed @param BuildingType - the type of building that was built @param bFirstOfItsType - whether this was the first building of its type for prerequisite purposes", "Docs/Classes/URTSHUD/Functions/OnBuildingConstructed.html", ["on", "building", "constructed"], "URTSHUD");
addToContainers_function("OnBuildingDestroyed", "", "Docs/Classes/URTSHUD/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "URTSHUD");
addToContainers_function("OnAnotherPlayerDefeated", "Called when a player excluding ourselves is considered defeated", "Docs/Classes/URTSHUD/Functions/OnAnotherPlayerDefeated.html", ["on", "another", "player", "defeated"], "URTSHUD");
addToContainers_function("GetMouseFocusWidget", "Get the image to use for creating button \'on hovered\' and \'on pressed\' effects", "Docs/Classes/URTSHUD/Functions/GetMouseFocusWidget.html", ["get", "mouse", "focus", "widget"], "URTSHUD");
addToContainers_function("GetMouseFocusWidgetSlot", "Get mouse focus image\'s slot", "Docs/Classes/URTSHUD/Functions/GetMouseFocusWidgetSlot.html", ["get", "mouse", "focus", "widget", "slot"], "URTSHUD");
addToContainers_function("GetTimeWhenPauseMenuWasShown", "GetWorld()->GetRealTimeSeconds() when the pause menu was shown", "Docs/Classes/URTSHUD/Functions/GetTimeWhenPauseMenuWasShown.html", ["get", "time", "when", "pause", "menu", "was", "shown"], "URTSHUD");
addToContainers_function("IsTooltipWidgetShowing", "Return true if at least 1 tooltip widget is showing", "Docs/Classes/URTSHUD/Functions/IsTooltipWidgetShowing.html", ["is", "tooltip", "widget", "showing"], "URTSHUD");
addToContainers_function("GetNumTooltipWidgetsShowing", "Kinda a slow function, but currently only called in non-shipping builds anyway", "Docs/Classes/URTSHUD/Functions/GetNumTooltipWidgetsShowing.html", ["get", "num", "tooltip", "widgets", "showing"], "URTSHUD");
addToContainers_function("ShowTooltipWidget", "@param Button - the button to show a tooltip for. It will either point to a UMyButton or a UUserWidget", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget.html", ["show", "tooltip", "widget"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_SelectableActionBar_Ability", "except for InventoryItemInWorld", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_SelectableActio.html", ["show", "tooltip", "widget_", "selectable", "action", "bar_", "ability"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_SelectableActionBar_BuildBuilding", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_SelectableActio_1.html", ["show", "tooltip", "widget_", "selectable", "action", "bar_", "build", "building"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_SelectableActionBar_TrainUnit", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_SelectableActio_2.html", ["show", "tooltip", "widget_", "selectable", "action", "bar_", "train", "unit"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_SelectableActionBar_ResearchUpgrade", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_SelectableActio_3.html", ["show", "tooltip", "widget_", "selectable", "action", "bar_", "research", "upgrade"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_PersistentPanel_BuildBuilding", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_PersistentPanel.html", ["show", "tooltip", "widget_", "persistent", "panel_", "build", "building"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_PersistentPanel_TrainUnit", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_PersistentPanel_1.html", ["show", "tooltip", "widget_", "persistent", "panel_", "train", "unit"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_PersistentPanel_ResearchUpgrade", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_PersistentPanel_2.html", ["show", "tooltip", "widget_", "persistent", "panel_", "research", "upgrade"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_ProductionQueueSlot_BuildBuilding", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_ProductionQueue.html", ["show", "tooltip", "widget_", "production", "queue", "slot_", "build", "building"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_ProductionQueueSlot_TrainUnit", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_ProductionQueue_1.html", ["show", "tooltip", "widget_", "production", "queue", "slot_", "train", "unit"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_ProductionQueueSlot_ResearchUpgrade", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_ProductionQueue_2.html", ["show", "tooltip", "widget_", "production", "queue", "slot_", "research", "upgrade"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_InventorySlot", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_InventorySlot.html", ["show", "tooltip", "widget_", "inventory", "slot"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_ShopSlot", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_ShopSlot.html", ["show", "tooltip", "widget_", "shop", "slot"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_InventoryItemInWorld", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_InventoryItemIn.html", ["show", "tooltip", "widget_", "inventory", "item", "in", "world"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_GlobalSkillsPanelButton", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_GlobalSkillsPan.html", ["show", "tooltip", "widget_", "global", "skills", "panel", "button"], "URTSHUD");
addToContainers_function("ShowTooltipWidget_CommanderSkillTreeNode", "", "Docs/Classes/URTSHUD/Functions/ShowTooltipWidget_CommanderSkillT.html", ["show", "tooltip", "widget_", "commander", "skill", "tree", "node"], "URTSHUD");
addToContainers_function("HideTooltipWidget", "@param Button - the button to hide a tooltip for. It will either point to a UMyButton or a UUserWidget", "Docs/Classes/URTSHUD/Functions/HideTooltipWidget.html", ["hide", "tooltip", "widget"], "URTSHUD");
addToContainers_function("HideTooltipWidget_InventoryItemInWorld", "@param InventoryItem - inv item actor that we want to hide the tooltip for", "Docs/Classes/URTSHUD/Functions/HideTooltipWidget_InventoryItemIn.html", ["hide", "tooltip", "widget_", "inventory", "item", "in", "world"], "URTSHUD");
addToContainers_function("AddToEscapeRequestResponableWidgets", "widgets but can easily change that", "Docs/Classes/URTSHUD/Functions/AddToEscapeRequestResponableWidge.html", ["add", "to", "escape", "request", "responable", "widgets"], "URTSHUD");
addToContainers_function("RemoveFromEscapeRequestResponableWidgets", "", "Docs/Classes/URTSHUD/Functions/RemoveFromEscapeRequestResponable.html", ["remove", "from", "escape", "request", "responable", "widgets"], "URTSHUD");
addToContainers_variable("PALETTE_CATEGORY", "Category to appear in the palette in user widget blueprints", "Docs/Classes/URTSHUD/Variables/PALETTE_CATEGORY.html", ["a", "l", "e", "t", "t", "e_", "c", "a", "t", "e", "g", "o", "r", "y"], "URTSHUD");
addToContainers_variable("BLANK_TEXT", "Text that has nothing in it", "Docs/Classes/URTSHUD/Variables/BLANK_TEXT.html", ["l", "a", "n", "k_", "t", "e", "x", "t"], "URTSHUD");
addToContainers_variable("", "Widget that displays resources", "Docs/Classes/URTSHUD/Variables/.html", [], "URTSHUD");
addToContainers_variable("", "Widget for the minimap", "Docs/Classes/URTSHUD/Variables/_1.html", [], "URTSHUD");
addToContainers_variable("", "Widget that appears when entering chat message", "Docs/Classes/URTSHUD/Variables/_2.html", [], "URTSHUD");
addToContainers_variable("", "Text box that holds chat messages received", "Docs/Classes/URTSHUD/Variables/_3.html", [], "URTSHUD");
addToContainers_variable("", "Widget that will show game messages like \"not enough resources\"", "Docs/Classes/URTSHUD/Variables/_4.html", [], "URTSHUD");
addToContainers_variable("", "Button to bring up the pause menu", "Docs/Classes/URTSHUD/Variables/_5.html", [], "URTSHUD");
addToContainers_variable("", "Button to toggle the commander\'s skill tree", "Docs/Classes/URTSHUD/Variables/_6.html", [], "URTSHUD");
addToContainers_variable("", "Displays the commander\'s rank", "Docs/Classes/URTSHUD/Variables/_7.html", [], "URTSHUD");
addToContainers_variable("", "Displays the commander\'s unspent skill points", "Docs/Classes/URTSHUD/Variables/_8.html", [], "URTSHUD");
addToContainers_variable("", "Displays the commander\'s progress towards their next rank. This is not total experience gained but how much as been gained that goes towards the next rank.", "Docs/Classes/URTSHUD/Variables/_9.html", [], "URTSHUD");
addToContainers_variable("", "Displays how much experience is required to reach the next rank. This is not cumulative and does not change as experience is gained", "Docs/Classes/URTSHUD/Variables/_10.html", [], "URTSHUD");
addToContainers_variable("", "Displays commander\'s progress towards next rank", "Docs/Classes/URTSHUD/Variables/_11.html", [], "URTSHUD");
addToContainers_variable("CommanderSkillTreeWidget", "Can be null if the local player\'s faction does not use a skill tree", "Docs/Classes/URTSHUD/Variables/CommanderSkillTreeWidget.html", ["commander", "skill", "tree", "widget"], "URTSHUD");
addToContainers_variable("", "Widget that appears when an ability requires a player as a target", "Docs/Classes/URTSHUD/Variables/_12.html", [], "URTSHUD");
addToContainers_variable("PlayerTargetingPanel", "", "Docs/Classes/URTSHUD/Variables/PlayerTargetingPanel.html", ["player", "targeting", "panel"], "URTSHUD");
addToContainers_variable("", "Current selected context menu", "Docs/Classes/URTSHUD/Variables/_13.html", [], "URTSHUD");
addToContainers_variable("", "Displays info about units that are inside a garrison for primary selected", "Docs/Classes/URTSHUD/Variables/_14.html", [], "URTSHUD");
addToContainers_variable("", "Persistent panel like in C&C where you can build stuff from", "Docs/Classes/URTSHUD/Variables/_15.html", [], "URTSHUD");
addToContainers_variable("", "Panel that usually has commander abilities on it such as fuel air bomb", "Docs/Classes/URTSHUD/Variables/_16.html", [], "URTSHUD");
addToContainers_variable("", "Widget we use to create mouse hover/pressed highlights", "Docs/Classes/URTSHUD/Variables/_17.html", [], "URTSHUD");
addToContainers_variable("", "The slot that MouseFocusImage belongs to", "Docs/Classes/URTSHUD/Variables/_18.html", [], "URTSHUD");
addToContainers_variable("EscapeRequestResponableWidgets", "Widgets that will close when the player presses the ESC key. The last one to be opened is at .Last() in the array", "Docs/Classes/URTSHUD/Variables/EscapeRequestResponableWidgets.html", ["escape", "request", "responable", "widgets"], "URTSHUD");
addToContainers_variable("PauseMenu", "", "Docs/Classes/URTSHUD/Variables/PauseMenu.html", ["pause", "menu"], "URTSHUD");
addToContainers_variable("MenuOutputWidget", "", "Docs/Classes/URTSHUD/Variables/MenuOutputWidget.html", ["menu", "output", "widget"], "URTSHUD");
addToContainers_variable("", "Widget that displays messages from the menu e.g. \"cannot remap that", "Docs/Classes/URTSHUD/Variables/_19.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for inventory items. Leave null to not use an inventory tooltip widget", "Docs/Classes/URTSHUD/Variables/_20.html", [], "URTSHUD");
addToContainers_variable("", "", "Docs/Classes/URTSHUD/Variables/_21.html", [], "URTSHUD");
addToContainers_variable("", "Tool tip widget for buildings", "Docs/Classes/URTSHUD/Variables/_22.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for units", "Docs/Classes/URTSHUD/Variables/_23.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for upgrades", "Docs/Classes/URTSHUD/Variables/_24.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for buttons that appear on the global skills panel", "Docs/Classes/URTSHUD/Variables/_25.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for commander skill tree nodes", "Docs/Classes/URTSHUD/Variables/_26.html", [], "URTSHUD");
addToContainers_variable("", "Widget to use as a tooltip for inventory items", "Docs/Classes/URTSHUD/Variables/_27.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for abilities", "Docs/Classes/URTSHUD/Variables/_28.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for buildings. This will be used when hovering over a button that builds a building, either in a selectable\'s context menu or the HUD persistent panel", "Docs/Classes/URTSHUD/Variables/_29.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for units", "Docs/Classes/URTSHUD/Variables/_30.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for upgrades", "Docs/Classes/URTSHUD/Variables/_31.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip for the abilities that appear on the global skills panel", "Docs/Classes/URTSHUD/Variables/_32.html", [], "URTSHUD");
addToContainers_variable("", "Tooltip widget for commander skill tree nodes", "Docs/Classes/URTSHUD/Variables/_33.html", [], "URTSHUD");
addToContainers_variable("", "Inventory item tooltip widget anchor.", "Docs/Classes/URTSHUD/Variables/_34.html", [], "URTSHUD");
addToContainers_variable("", "Anchor for tooltips for selectable\'s action bar and the persistent panel", "Docs/Classes/URTSHUD/Variables/_35.html", [], "URTSHUD");
addToContainers_variable("", "Anchor for tooltips for abilities that appear on the global skills panel", "Docs/Classes/URTSHUD/Variables/_36.html", [], "URTSHUD");
addToContainers_variable("", "Anchor for tooltips for commander\'s skill tree nodes", "Docs/Classes/URTSHUD/Variables/_37.html", [], "URTSHUD");
addToContainers_variable("TimeWhenPauseMenuWasShown", "UWorld::GetRealTimeSeconds() when the pause menu was shown", "Docs/Classes/URTSHUD/Variables/TimeWhenPauseMenuWasShown.html", ["time", "when", "pause", "menu", "was", "shown"], "URTSHUD");
addToContainers_variable("", "The \"you have commander skill points to spend\" animation. If you name a widget anim this then it will play in accordance with the CommanderSkillTreeAnimPlayRule. I added this because in C&C generals when you rank up the button to open the skill tree flashes stars The animation will loop. You can change this easiy by changing the two PlayAnimation(SkillTreeWantsOpeningAnim) calls", "Docs/Classes/URTSHUD/Variables/_38.html", [], "URTSHUD");
addToContainers_variable("SkillTreeWantsOpeningAnimName", "", "Docs/Classes/URTSHUD/Variables/SkillTreeWantsOpeningAnimName.html", ["skill", "tree", "wants", "opening", "anim", "name"], "URTSHUD");
addToContainers_variable("SkillTreeWantsOpeningAnim", "", "Docs/Classes/URTSHUD/Variables/SkillTreeWantsOpeningAnim.html", ["skill", "tree", "wants", "opening", "anim"], "URTSHUD");
addToContainers_variable("", "When to play the \"open me\" anim for the commander skill tree", "Docs/Classes/URTSHUD/Variables/_39.html", [], "URTSHUD");
addToContainers_class("USelectableContextMenu", "Widget that appears when clicking on a selectable. Can really show anything you want about selectable here", "Docs/Classes/USelectableContextMenu/USelectableContextMenu.html", ["selectable", "context", "menu"], "");
addToContainers_function("SetupWidget", "TODO consider changing inheriting class because Initialize assigns GI and GS refs", "Docs/Classes/USelectableContextMenu/Functions/SetupWidget.html", ["setup", "widget"], "USelectableContextMenu");
addToContainers_function("OnTick", "Called by the HUD widgets NativeTick", "Docs/Classes/USelectableContextMenu/Functions/OnTick.html", ["on", "tick"], "USelectableContextMenu");
addToContainers_function("OnPlayerSelectionChanged", "", "Docs/Classes/USelectableContextMenu/Functions/OnPlayerSelectionChanged.html", ["on", "player", "selection", "changed"], "USelectableContextMenu");
addToContainers_function("OnPlayerNoSelection", "", "Docs/Classes/USelectableContextMenu/Functions/OnPlayerNoSelection.html", ["on", "player", "no", "selection"], "USelectableContextMenu");
addToContainers_function("Selected_OnHealthChanged", "Functions for when stats of a selected selectable changes. It is assumed that if these are called then it is the current selected that needs updating", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnHealthChanged.html", ["selected_", "on", "health", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnMaxHealthChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnMaxHealthChanged.html", ["selected_", "on", "max", "health", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnCurrentAndMaxHealthChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnCurrentAndMaxHealthCha.html", ["selected_", "on", "current", "and", "max", "health", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnSelectableResourceCurrentAmountChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnSelectableResourceCurr.html", ["selected_", "on", "selectable", "resource", "current", "amount", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnSelectableResourceMaxAmountChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnSelectableResourceMaxA.html", ["selected_", "on", "selectable", "resource", "max", "amount", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnSelectableResourceCurrentAndMaxAmountsChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnSelectableResourceCurr_1.html", ["selected_", "on", "selectable", "resource", "current", "and", "max", "amounts", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnSelectableResourceRegenRateChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnSelectableResourceRege.html", ["selected_", "on", "selectable", "resource", "regen", "rate", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnRankChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnRankChanged.html", ["selected_", "on", "rank", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnCurrentRankExperienceChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnCurrentRankExperienceC.html", ["selected_", "on", "current", "rank", "experience", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnImpactDamageChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnImpactDamageChanged.html", ["selected_", "on", "impact", "damage", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnAttackRateChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnAttackRateChanged.html", ["selected_", "on", "attack", "rate", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnAttackRangeChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnAttackRangeChanged.html", ["selected_", "on", "attack", "range", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnDefenseMultiplierChanged", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnDefenseMultiplierChang.html", ["selected_", "on", "defense", "multiplier", "changed"], "USelectableContextMenu");
addToContainers_function("Selected_OnBuffApplied", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnBuffApplied.html", ["selected_", "on", "buff", "applied"], "USelectableContextMenu");
addToContainers_function("Selected_OnDebuffApplied", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnDebuffApplied.html", ["selected_", "on", "debuff", "applied"], "USelectableContextMenu");
addToContainers_function("Selected_OnBuffApplied", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnBuffApplied_1.html", ["selected_", "on", "buff", "applied"], "USelectableContextMenu");
addToContainers_function("Selected_OnDebuffApplied", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnDebuffApplied_1.html", ["selected_", "on", "debuff", "applied"], "USelectableContextMenu");
addToContainers_function("Selected_OnTickableBuffRemoved", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnTickableBuffRemoved.html", ["selected_", "on", "tickable", "buff", "removed"], "USelectableContextMenu");
addToContainers_function("Selected_OnTickableDebuffRemoved", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnTickableDebuffRemoved.html", ["selected_", "on", "tickable", "debuff", "removed"], "USelectableContextMenu");
addToContainers_function("Selected_OnStaticBuffRemoved", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnStaticBuffRemoved.html", ["selected_", "on", "static", "buff", "removed"], "USelectableContextMenu");
addToContainers_function("Selected_OnStaticDebuffRemoved", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnStaticDebuffRemoved.html", ["selected_", "on", "static", "debuff", "removed"], "USelectableContextMenu");
addToContainers_function("Selected_UpdateTickableBuffDuration", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_UpdateTickableBuffDurati.html", ["selected_", "update", "tickable", "buff", "duration"], "USelectableContextMenu");
addToContainers_function("Selected_UpdateTickableDebuffDuration", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_UpdateTickableDebuffDura.html", ["selected_", "update", "tickable", "debuff", "duration"], "USelectableContextMenu");
addToContainers_function("Selected_OnItemAddedToInventory", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnItemAddedToInventory.html", ["selected_", "on", "item", "added", "to", "inventory"], "USelectableContextMenu");
addToContainers_function("Selected_OnItemsRemovedFromInventory", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnItemsRemovedFromInvent.html", ["selected_", "on", "items", "removed", "from", "inventory"], "USelectableContextMenu");
addToContainers_function("Selected_OnInventoryPositionsSwapped", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnInventoryPositionsSwap.html", ["selected_", "on", "inventory", "positions", "swapped"], "USelectableContextMenu");
addToContainers_function("Selected_OnInventoryItemUsed", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnInventoryItemUsed.html", ["selected_", "on", "inventory", "item", "used"], "USelectableContextMenu");
addToContainers_function("Selected_OnInventoryItemUseCooldownFinished", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnInventoryItemUseCooldo.html", ["selected_", "on", "inventory", "item", "use", "cooldown", "finished"], "USelectableContextMenu");
addToContainers_function("Selected_OnItemPurchasedFromShop", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnItemPurchasedFromShop.html", ["selected_", "on", "item", "purchased", "from", "shop"], "USelectableContextMenu");
addToContainers_function("Selected_OnInventoryItemSold", "", "Docs/Classes/USelectableContextMenu/Functions/Selected_OnInventoryItemSold.html", ["selected_", "on", "inventory", "item", "sold"], "USelectableContextMenu");
addToContainers_function("OnBuildingConstructed", "Functions called when a building is built/destroyed @param BuildingType - the type of building that was built @param bFirstOfItsType - whether this was the first building of its type for prerequisite purposes", "Docs/Classes/USelectableContextMenu/Functions/OnBuildingConstructed.html", ["on", "building", "constructed"], "USelectableContextMenu");
addToContainers_function("OnBuildingDestroyed", "", "Docs/Classes/USelectableContextMenu/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "USelectableContextMenu");
addToContainers_function("OnUpgradeComplete", "", "Docs/Classes/USelectableContextMenu/Functions/OnUpgradeComplete.html", ["on", "upgrade", "complete"], "USelectableContextMenu");
addToContainers_function("OnItemAddedToProductionQueue", "When an item is added to the production queue but not started immediately", "Docs/Classes/USelectableContextMenu/Functions/OnItemAddedToProductionQueue.html", ["on", "item", "added", "to", "production", "queue"], "USelectableContextMenu");
addToContainers_function("OnItemAddedAndProductionStarted", "When an item is added to a production queue and is started immediately", "Docs/Classes/USelectableContextMenu/Functions/OnItemAddedAndProductionStarted.html", ["on", "item", "added", "and", "production", "started"], "USelectableContextMenu");
addToContainers_function("OnProductionComplete", "When the front of a production queue completes. Assumed next item starts immediately @param Item - the item that was just produced @param Queue - production queue that just produced something @param Producer - actor that the queue is a part of", "Docs/Classes/USelectableContextMenu/Functions/OnProductionComplete.html", ["on", "production", "complete"], "USelectableContextMenu");
addToContainers_variable("", "Holds whatever info you want to be displayed about the selectable such as experience, health etc", "Docs/Classes/USelectableContextMenu/Variables/.html", [], "USelectableContextMenu");
addToContainers_variable("", "Actions the selectable can carry out like \'attack move\'", "Docs/Classes/USelectableContextMenu/Variables/_1.html", [], "USelectableContextMenu");
addToContainers_class("USelectableInfo", "Holds info about a selectable. Can virtually hold anything such as experience, icon, health etc", "Docs/Classes/USelectableInfo/USelectableInfo.html", ["selectable", "info"], "");
addToContainers_function("USelectableInfo", "", "Docs/Classes/USelectableInfo/Functions/USelectableInfo.html", ["selectable", "info"], "USelectableInfo");
addToContainers_function("SetupWidget", "", "Docs/Classes/USelectableInfo/Functions/SetupWidget.html", ["setup", "widget"], "USelectableInfo");
addToContainers_function("OnTick", "", "Docs/Classes/USelectableInfo/Functions/OnTick.html", ["on", "tick"], "USelectableInfo");
addToContainers_function("GetStaticBuffWidget", "Getters that will either get the widget from a pool or create one. Here for when I implement pooling", "Docs/Classes/USelectableInfo/Functions/GetStaticBuffWidget.html", ["get", "static", "buff", "widget"], "USelectableInfo");
addToContainers_function("GetTickableBuffWidget", "", "Docs/Classes/USelectableInfo/Functions/GetTickableBuffWidget.html", ["get", "tickable", "buff", "widget"], "USelectableInfo");
addToContainers_function("GetStaticDebuffWidget", "", "Docs/Classes/USelectableInfo/Functions/GetStaticDebuffWidget.html", ["get", "static", "debuff", "widget"], "USelectableInfo");
addToContainers_function("GetTickableDebuffWidget", "", "Docs/Classes/USelectableInfo/Functions/GetTickableDebuffWidget.html", ["get", "tickable", "debuff", "widget"], "USelectableInfo");
addToContainers_function("OnItemOnDisplayButtonAddedToPanel", "Called right after a UItemOnDisplayInShopButton widget is added to Panel_ItemsOnDisplay. @param PanelWidget - Panel_ItemsOnDisplay @param PanelSlot - slot that JustAdded uses @param JustAdded - widget that was just added to Panel_ItemsOnDisplay", "Docs/Classes/USelectableInfo/Functions/OnItemOnDisplayButtonAddedToPanel.html", ["on", "item", "on", "display", "button", "added", "to", "panel"], "USelectableInfo");
addToContainers_function("OnInventoryItemButtonAddedToPanel", "Called right after a UInventoryItemButton widget is added to Panel_Inventory @param Panel - Panel_Inventory @param PanelSlot - slot that JustAdded uses @param JustAdded - widget that was just added as a child of Panel_Inventory", "Docs/Classes/USelectableInfo/Functions/OnInventoryItemButtonAddedToPanel.html", ["on", "inventory", "item", "button", "added", "to", "panel"], "USelectableInfo");
addToContainers_function("SetInfoVisibilities", "", "Docs/Classes/USelectableInfo/Functions/SetInfoVisibilities.html", ["set", "info", "visibilities"], "USelectableInfo");
addToContainers_function("UpdateTextName", "Functions to update what is shown the the player selection changes @param Selectable - selectable to show info on @param Attributes - selectables attributes here for convenience", "Docs/Classes/USelectableInfo/Functions/UpdateTextName.html", ["update", "text", "name"], "USelectableInfo");
addToContainers_function("UpdateTextDescription", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextDescription.html", ["update", "text", "description"], "USelectableInfo");
addToContainers_function("UpdateImageIcon", "", "Docs/Classes/USelectableInfo/Functions/UpdateImageIcon.html", ["update", "image", "icon"], "USelectableInfo");
addToContainers_function("UpdateTextLevel", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextLevel.html", ["update", "text", "level"], "USelectableInfo");
addToContainers_function("UpdateImageLevel", "", "Docs/Classes/USelectableInfo/Functions/UpdateImageLevel.html", ["update", "image", "level"], "USelectableInfo");
addToContainers_function("UpdateTextExperienceRequired", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextExperienceRequired.html", ["update", "text", "experience", "required"], "USelectableInfo");
addToContainers_function("UpdateTextExperienceTowardsNextLevel", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextExperienceTowardsNextLe.html", ["update", "text", "experience", "towards", "next", "level"], "USelectableInfo");
addToContainers_function("UpdateProgressBarExperience", "", "Docs/Classes/USelectableInfo/Functions/UpdateProgressBarExperience.html", ["update", "progress", "bar", "experience"], "USelectableInfo");
addToContainers_function("UpdateTextHealth", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextHealth.html", ["update", "text", "health"], "USelectableInfo");
addToContainers_function("UpdateTextMaxHealth", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextMaxHealth.html", ["update", "text", "max", "health"], "USelectableInfo");
addToContainers_function("UpdateProgressBarHealth", "", "Docs/Classes/USelectableInfo/Functions/UpdateProgressBarHealth.html", ["update", "progress", "bar", "health"], "USelectableInfo");
addToContainers_function("UpdateTextSelectableResource", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextSelectableResource.html", ["update", "text", "selectable", "resource"], "USelectableInfo");
addToContainers_function("UpdateTextSelectableResourceMax", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextSelectableResourceMax.html", ["update", "text", "selectable", "resource", "max"], "USelectableInfo");
addToContainers_function("UpdateProgressBarSelectableResource", "", "Docs/Classes/USelectableInfo/Functions/UpdateProgressBarSelectableResour.html", ["update", "progress", "bar", "selectable", "resource"], "USelectableInfo");
addToContainers_function("UpdateTextSelectableResourceRegenRate", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextSelectableResourceRegen.html", ["update", "text", "selectable", "resource", "regen", "rate"], "USelectableInfo");
addToContainers_function("UpdateTextImpactDamage", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextImpactDamage.html", ["update", "text", "impact", "damage"], "USelectableInfo");
addToContainers_function("UpdateTextAttackRate", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextAttackRate.html", ["update", "text", "attack", "rate"], "USelectableInfo");
addToContainers_function("UpdateTextAttackRange", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextAttackRange.html", ["update", "text", "attack", "range"], "USelectableInfo");
addToContainers_function("UpdateTextDefenseMultiplier", "", "Docs/Classes/USelectableInfo/Functions/UpdateTextDefenseMultiplier.html", ["update", "text", "defense", "multiplier"], "USelectableInfo");
addToContainers_function("UpdateProgressBarProductionQueue", "Called each tick. Calls ShouldShowProductionProgressBar and either update progress bar for production or hide it. Should be called when player selection changes and on tick", "Docs/Classes/USelectableInfo/Functions/UpdateProgressBarProductionQueue.html", ["update", "progress", "bar", "production", "queue"], "USelectableInfo");
addToContainers_function("UpdateBuffsAndDebuffs", "", "Docs/Classes/USelectableInfo/Functions/UpdateBuffsAndDebuffs.html", ["update", "buffs", "and", "debuffs"], "USelectableInfo");
addToContainers_function("UpdateProductionQueueContents", "Update what shows in the production queue", "Docs/Classes/USelectableInfo/Functions/UpdateProductionQueueContents.html", ["update", "production", "queue", "contents"], "USelectableInfo");
addToContainers_function("ShouldShowProductionQueueInfo", "Whether a certain selectable should have its production progress bar shown or not. Buildings that can produce things are a yes, infantry probably not", "Docs/Classes/USelectableInfo/Functions/ShouldShowProductionQueueInfo.html", ["should", "show", "production", "queue", "info"], "USelectableInfo");
addToContainers_function("ShouldShowAttackAttributes", "Given a selectable return whether we should show the attack related attributes like attack damage, attack range etc for it", "Docs/Classes/USelectableInfo/Functions/ShouldShowAttackAttributes.html", ["should", "show", "attack", "attributes"], "USelectableInfo");
addToContainers_function("DamageFloatToText", "Convert a selectable\'s attack damage from float to FText", "Docs/Classes/USelectableInfo/Functions/DamageFloatToText.html", ["damage", "float", "to", "text"], "USelectableInfo");
addToContainers_function("AttackRateFloatToText", "Convert a selectable\'s attack rate from float to FText", "Docs/Classes/USelectableInfo/Functions/AttackRateFloatToText.html", ["attack", "rate", "float", "to", "text"], "USelectableInfo");
addToContainers_function("AttackRangeFloatToText", "Convert a selectable\'s attack range from float to FText", "Docs/Classes/USelectableInfo/Functions/AttackRangeFloatToText.html", ["attack", "range", "float", "to", "text"], "USelectableInfo");
addToContainers_function("CurrentHealthFloatToText", "Convert a float value that represents current health to an FText", "Docs/Classes/USelectableInfo/Functions/CurrentHealthFloatToText.html", ["current", "health", "float", "to", "text"], "USelectableInfo");
addToContainers_function("MaxHealthFloatToText", "Convert a float value that represents max health to an FText", "Docs/Classes/USelectableInfo/Functions/MaxHealthFloatToText.html", ["max", "health", "float", "to", "text"], "USelectableInfo");
addToContainers_function("SelectableResourceCurrentAmountFloatToText", "Convert a float value that represents current amount of a selectable resource to an FText", "Docs/Classes/USelectableInfo/Functions/SelectableResourceCurrentAmountFl.html", ["selectable", "resource", "current", "amount", "float", "to", "text"], "USelectableInfo");
addToContainers_function("SelectableResourceRegenRateFloatToText", "Convert a float that displays the selectable resource regenerated rate to an FText", "Docs/Classes/USelectableInfo/Functions/SelectableResourceRegenRateFloatT.html", ["selectable", "resource", "regen", "rate", "float", "to", "text"], "USelectableInfo");
addToContainers_function("DefenseMultiplierFloatToText", "Convert a defense multiplier to some text for it to be displayed on the HUD", "Docs/Classes/USelectableInfo/Functions/DefenseMultiplierFloatToText.html", ["defense", "multiplier", "float", "to", "text"], "USelectableInfo");
addToContainers_function("DefenseMultiplierFloatToTextInner", "This is actually only here because my FloatToText macro can\'t handle assigning values to FText in function bodies", "Docs/Classes/USelectableInfo/Functions/DefenseMultiplierFloatToTextInner.html", ["defense", "multiplier", "float", "to", "text", "inner"], "USelectableInfo");
addToContainers_function("ExperienceGainedFloatToText", "Convert a float that represents a experience amount gained towards next rank to an FText", "Docs/Classes/USelectableInfo/Functions/ExperienceGainedFloatToText.html", ["experience", "gained", "float", "to", "text"], "USelectableInfo");
addToContainers_function("ExperienceRequiredFloatToText", "Convert a float that represents a experience amount required to rank up to an FText", "Docs/Classes/USelectableInfo/Functions/ExperienceRequiredFloatToText.html", ["experience", "required", "float", "to", "text"], "USelectableInfo");
addToContainers_function("OnPlayerSelectionChanged", "", "Docs/Classes/USelectableInfo/Functions/OnPlayerSelectionChanged.html", ["on", "player", "selection", "changed"], "USelectableInfo");
addToContainers_function("OnNoPlayerSelection", "", "Docs/Classes/USelectableInfo/Functions/OnNoPlayerSelection.html", ["on", "no", "player", "selection"], "USelectableInfo");
addToContainers_function("Selected_OnHealthChanged", "Functions for when stats of the current selected changes", "Docs/Classes/USelectableInfo/Functions/Selected_OnHealthChanged.html", ["selected_", "on", "health", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnMaxHealthChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnMaxHealthChanged.html", ["selected_", "on", "max", "health", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnCurrentAndMaxHealthChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnCurrentAndMaxHealthCha.html", ["selected_", "on", "current", "and", "max", "health", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnSelectableResourceCurrentAmountChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnSelectableResourceCurr.html", ["selected_", "on", "selectable", "resource", "current", "amount", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnSelectableResourceMaxAmountChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnSelectableResourceMaxA.html", ["selected_", "on", "selectable", "resource", "max", "amount", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnSelectableResourceCurrentAndMaxAmountsChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnSelectableResourceCurr_1.html", ["selected_", "on", "selectable", "resource", "current", "and", "max", "amounts", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnSelectableResourceRegenRateChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnSelectableResourceRege.html", ["selected_", "on", "selectable", "resource", "regen", "rate", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnRankChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnRankChanged.html", ["selected_", "on", "rank", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnCurrentRankExperienceChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnCurrentRankExperienceC.html", ["selected_", "on", "current", "rank", "experience", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnImpactDamageChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnImpactDamageChanged.html", ["selected_", "on", "impact", "damage", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnAttackRateChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnAttackRateChanged.html", ["selected_", "on", "attack", "rate", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnAttackRangeChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnAttackRangeChanged.html", ["selected_", "on", "attack", "range", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnDefenseMultiplierChanged", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnDefenseMultiplierChang.html", ["selected_", "on", "defense", "multiplier", "changed"], "USelectableInfo");
addToContainers_function("Selected_OnBuffApplied", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnBuffApplied.html", ["selected_", "on", "buff", "applied"], "USelectableInfo");
addToContainers_function("Selected_OnDebuffApplied", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnDebuffApplied.html", ["selected_", "on", "debuff", "applied"], "USelectableInfo");
addToContainers_function("Selected_OnBuffApplied", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnBuffApplied_1.html", ["selected_", "on", "buff", "applied"], "USelectableInfo");
addToContainers_function("Selected_OnDebuffApplied", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnDebuffApplied_1.html", ["selected_", "on", "debuff", "applied"], "USelectableInfo");
addToContainers_function("Selected_OnTickableBuffRemoved", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnTickableBuffRemoved.html", ["selected_", "on", "tickable", "buff", "removed"], "USelectableInfo");
addToContainers_function("Selected_OnTickableDebuffRemoved", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnTickableDebuffRemoved.html", ["selected_", "on", "tickable", "debuff", "removed"], "USelectableInfo");
addToContainers_function("Selected_OnStaticBuffRemoved", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnStaticBuffRemoved.html", ["selected_", "on", "static", "buff", "removed"], "USelectableInfo");
addToContainers_function("Selected_OnStaticDebuffRemoved", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnStaticDebuffRemoved.html", ["selected_", "on", "static", "debuff", "removed"], "USelectableInfo");
addToContainers_function("Selected_UpdateTickableBuffDuration", "", "Docs/Classes/USelectableInfo/Functions/Selected_UpdateTickableBuffDurati.html", ["selected_", "update", "tickable", "buff", "duration"], "USelectableInfo");
addToContainers_function("Selected_UpdateTickableDebuffDuration", "", "Docs/Classes/USelectableInfo/Functions/Selected_UpdateTickableDebuffDura.html", ["selected_", "update", "tickable", "debuff", "duration"], "USelectableInfo");
addToContainers_function("Selected_OnItemAddedToInventory", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnItemAddedToInventory.html", ["selected_", "on", "item", "added", "to", "inventory"], "USelectableInfo");
addToContainers_function("Selected_OnItemsRemovedFromInventory", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnItemsRemovedFromInvent.html", ["selected_", "on", "items", "removed", "from", "inventory"], "USelectableInfo");
addToContainers_function("Selected_OnInventoryPositionsSwapped", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnInventoryPositionsSwap.html", ["selected_", "on", "inventory", "positions", "swapped"], "USelectableInfo");
addToContainers_function("Selected_OnInventoryItemUsed", "@param TotalUseCooldown - pass in 0 to say \'has no cooldown\'", "Docs/Classes/USelectableInfo/Functions/Selected_OnInventoryItemUsed.html", ["selected_", "on", "inventory", "item", "used"], "USelectableInfo");
addToContainers_function("Selected_OnInventoryItemUseCooldownFinished", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnInventoryItemUseCooldo.html", ["selected_", "on", "inventory", "item", "use", "cooldown", "finished"], "USelectableInfo");
addToContainers_function("Selected_OnItemPurchasedFromShop", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnItemPurchasedFromShop.html", ["selected_", "on", "item", "purchased", "from", "shop"], "USelectableInfo");
addToContainers_function("Selected_OnInventoryItemSold", "", "Docs/Classes/USelectableInfo/Functions/Selected_OnInventoryItemSold.html", ["selected_", "on", "inventory", "item", "sold"], "USelectableInfo");
addToContainers_function("OnItemAddedToProductionQueue", "When an item is added to the production queue but not started immediately", "Docs/Classes/USelectableInfo/Functions/OnItemAddedToProductionQueue.html", ["on", "item", "added", "to", "production", "queue"], "USelectableInfo");
addToContainers_function("OnItemAddedAndProductionStarted", "When an item is added to a production queue and is started immediately", "Docs/Classes/USelectableInfo/Functions/OnItemAddedAndProductionStarted.html", ["on", "item", "added", "and", "production", "started"], "USelectableInfo");
addToContainers_function("OnProductionComplete", "When the front of a production queue completes. Assumed next item starts immediately @param Queue - production queue that just produced something @param Producer - actor that the queue is a part of", "Docs/Classes/USelectableInfo/Functions/OnProductionComplete.html", ["on", "production", "complete"], "USelectableInfo");
addToContainers_variable("", "Text to show selectables name", "Docs/Classes/USelectableInfo/Variables/.html", [], "USelectableInfo");
addToContainers_variable("", "Text to show a description of the selectable", "Docs/Classes/USelectableInfo/Variables/_1.html", [], "USelectableInfo");
addToContainers_variable("", "Icon of selectable", "Docs/Classes/USelectableInfo/Variables/_2.html", [], "USelectableInfo");
addToContainers_variable("", "Current rank/level", "Docs/Classes/USelectableInfo/Variables/_3.html", [], "USelectableInfo");
addToContainers_variable("", "Icon for current rank/level", "Docs/Classes/USelectableInfo/Variables/_4.html", [], "USelectableInfo");
addToContainers_variable("", "Optional panel that contains experience related widgets", "Docs/Classes/USelectableInfo/Variables/_5.html", [], "USelectableInfo");
addToContainers_variable("", "Shows how much experience is required to reach the next rank/level. Does not take into account how much current EXP we have so this can only change when we rank up.", "Docs/Classes/USelectableInfo/Variables/_6.html", [], "USelectableInfo");
addToContainers_variable("", "Shows how much experience we have towards our next rank/level", "Docs/Classes/USelectableInfo/Variables/_7.html", [], "USelectableInfo");
addToContainers_variable("", "Progress bar for experience towards next level", "Docs/Classes/USelectableInfo/Variables/_8.html", [], "USelectableInfo");
addToContainers_variable("", "Text that shows health", "Docs/Classes/USelectableInfo/Variables/_9.html", [], "USelectableInfo");
addToContainers_variable("", "Text that shows max health", "Docs/Classes/USelectableInfo/Variables/_10.html", [], "USelectableInfo");
addToContainers_variable("", "Progress bar for health", "Docs/Classes/USelectableInfo/Variables/_11.html", [], "USelectableInfo");
addToContainers_variable("", "An optional panel to put selectable resource related widgets on. It will be made visible if the primary selected uses a selectable resource", "Docs/Classes/USelectableInfo/Variables/_12.html", [], "USelectableInfo");
addToContainers_variable("", "Shows how much of their selectable resource the selectable has. Selectable resources are things like mana, energy", "Docs/Classes/USelectableInfo/Variables/_13.html", [], "USelectableInfo");
addToContainers_variable("", "Shows max amount of selectable resource", "Docs/Classes/USelectableInfo/Variables/_14.html", [], "USelectableInfo");
addToContainers_variable("", "Progress bar to show selectable resource", "Docs/Classes/USelectableInfo/Variables/_15.html", [], "USelectableInfo");
addToContainers_variable("", "Text that shows the regeneration rate of the selectable resource. By default the rate is amount regenerated per second", "Docs/Classes/USelectableInfo/Variables/_16.html", [], "USelectableInfo");
addToContainers_variable("", "How much damage selectable deals. Will be made hidden if selectable does not have an attack. This shows impact damage. I haven\'t added a widget to show AoE damage. I should do that", "Docs/Classes/USelectableInfo/Variables/_17.html", [], "USelectableInfo");
addToContainers_variable("", "Shows the unit\'s attack rate. Will be made hidden if selectable does not have an attack", "Docs/Classes/USelectableInfo/Variables/_18.html", [], "USelectableInfo");
addToContainers_variable("", "Shows the unit\'s attack range. Will be made hidden if selectable does not have an attack", "Docs/Classes/USelectableInfo/Variables/_19.html", [], "USelectableInfo");
addToContainers_variable("", "Shows the defense multiplier.", "Docs/Classes/USelectableInfo/Variables/_20.html", [], "USelectableInfo");
addToContainers_variable("", "The panel widget that contains everything about the production queue. This will be hidden based on the func ShouldShowProductionQueueInfo. It is assumed ProgressBar_ProductionQueue and any production queue buttons added to the user widget will be children of this panel widget for easy hidden/visible toggling.", "Docs/Classes/USelectableInfo/Variables/_21.html", [], "USelectableInfo");
addToContainers_variable("", "To show percentage complete of production", "Docs/Classes/USelectableInfo/Variables/_22.html", [], "USelectableInfo");
addToContainers_variable("", "Array populated in SetupWidget. Holds references to images that will show what is in the production queue.", "Docs/Classes/USelectableInfo/Variables/_23.html", [], "USelectableInfo");
addToContainers_variable("QueueNum", "A tally to keep track of how many buttons are activeated in ProductionQueueSlots so we can avoid calling SetVisibility needlessly", "Docs/Classes/USelectableInfo/Variables/QueueNum.html", ["queue", "num"], "USelectableInfo");
addToContainers_variable("ProductionQueue", "Queue of current selected, or null if it has none. As long as check if CurrentSelected is valid then should be ok dereferncing this I think", "Docs/Classes/USelectableInfo/Variables/ProductionQueue.html", ["production", "queue"], "USelectableInfo");
addToContainers_variable("LastSelectableResourceType", "The selectable resource type of the last selected selectable. This is used for optimization. It is used to know whether we need to change the PBar color for selectable resource", "Docs/Classes/USelectableInfo/Variables/LastSelectableResourceType.html", ["last", "selectable", "resource", "type"], "USelectableInfo");
addToContainers_variable("", "Panel for displaying buffs applied", "Docs/Classes/USelectableInfo/Variables/_24.html", [], "USelectableInfo");
addToContainers_variable("", "The widget to use to display info about each static buff on selectable", "Docs/Classes/USelectableInfo/Variables/_25.html", [], "USelectableInfo");
addToContainers_variable("", "Array that mimics Panel_Buffs\'s children", "Docs/Classes/USelectableInfo/Variables/_26.html", [], "USelectableInfo");
addToContainers_variable("", "The widget to use to display info about each tickable buff on selectable", "Docs/Classes/USelectableInfo/Variables/_27.html", [], "USelectableInfo");
addToContainers_variable("", "", "Docs/Classes/USelectableInfo/Variables/_28.html", [], "USelectableInfo");
addToContainers_variable("", "Panel for displaying debuffs applied", "Docs/Classes/USelectableInfo/Variables/_29.html", [], "USelectableInfo");
addToContainers_variable("", "Widget to display static type debuffs", "Docs/Classes/USelectableInfo/Variables/_30.html", [], "USelectableInfo");
addToContainers_variable("", "This array is the first entries of Panel_Debuffs", "Docs/Classes/USelectableInfo/Variables/_31.html", [], "USelectableInfo");
addToContainers_variable("", "Widget to display tickable debuffs", "Docs/Classes/USelectableInfo/Variables/_32.html", [], "USelectableInfo");
addToContainers_variable("", "This array is the entries after statics in Panel_Debuffs", "Docs/Classes/USelectableInfo/Variables/_33.html", [], "USelectableInfo");
addToContainers_variable("", "A panel that shows what items are on display for a shop. Usually they are on sale", "Docs/Classes/USelectableInfo/Variables/_34.html", [], "USelectableInfo");
addToContainers_variable("", "@See bAutoCreateInventoryItemWidgets", "Docs/Classes/USelectableInfo/Variables/_35.html", [], "USelectableInfo");
addToContainers_variable("", "Widget to use if bAutoCreateItemForSaleWidgets is true", "Docs/Classes/USelectableInfo/Variables/_36.html", [], "USelectableInfo");
addToContainers_variable("ItemOnDisplayInShopButtons", "Array of widgets that represent an item on display in a shop. If I find these are getting GCed then this array may need to be changed to a UPROPERTY with raw pointers", "Docs/Classes/USelectableInfo/Variables/ItemOnDisplayInShopButtons.html", ["item", "on", "display", "in", "shop", "buttons"], "USelectableInfo");
addToContainers_variable("", "A panel that shows the inventory of a selectable", "Docs/Classes/USelectableInfo/Variables/_37.html", [], "USelectableInfo");
addToContainers_variable("CoolingDownInventorySlots", "Array of inventory slots with items that are coolding down", "Docs/Classes/USelectableInfo/Variables/CoolingDownInventorySlots.html", ["cooling", "down", "inventory", "slots"], "USelectableInfo");
addToContainers_variable("", "If true then the buttons that represent an item in the inventory will be automatically created during HUD initialization at runtime. You will just need to specify a widget blueprint to use for each button. After each button has been added to the panel the function OnInventoryItemButtonAddedToPanel will be called giving you a chance to tweek exactly how the widget is positioned if needed. Also you should remove any UInventoryItemButton widgets that you have added via editor since they will be ignored. If false then you can just add the button widgets in the editor. Make sure you add an amount of buttons equal to the max size inventory of all selectables e.g. if the most number of items a selectable can carry is 6 then make sure you add 6 buttons. Generally the first button you add will be considered the first inventory slot, the 2nd you add will be the 2nd inventory slot, etc.", "Docs/Classes/USelectableInfo/Variables/_38.html", [], "USelectableInfo");
addToContainers_variable("", "If choosing to auto populate the inventory panel then this is the button widget to use for it.", "Docs/Classes/USelectableInfo/Variables/_39.html", [], "USelectableInfo");
addToContainers_variable("InventoryButtons", "Array of the widgets that represent an item in a selectable\'s inventory. If I find these are getting GCed then this array may need to be changed to a UPROPERTY with raw pointers", "Docs/Classes/USelectableInfo/Variables/InventoryButtons.html", ["inventory", "buttons"], "USelectableInfo");
addToContainers_class("UProductionQueueButton", "A button for showing what is in the production queue. It contains a button to enable cancelling items in queue but this functionality has not been implemented yet", "Docs/Classes/UProductionQueueButton/UProductionQueueButton.html", ["production", "queue", "button"], "");
addToContainers_function("UProductionQueueButton", "", "Docs/Classes/UProductionQueueButton/Functions/UProductionQueueButton.html", ["production", "queue", "button"], "UProductionQueueButton");
addToContainers_function("Setup", "Assign reference to image and setup clicked functionality", "Docs/Classes/UProductionQueueButton/Functions/Setup.html", [], "UProductionQueueButton");
addToContainers_function("UIBinding_OnLeftMouseButtonPress", "", "Docs/Classes/UProductionQueueButton/Functions/UIBinding_OnLeftMouseButtonPress.html", ["i", "binding_", "on", "left", "mouse", "button", "press"], "UProductionQueueButton");
addToContainers_function("UIBinding_OnLeftMouseButtonReleased", "", "Docs/Classes/UProductionQueueButton/Functions/UIBinding_OnLeftMouseButtonReleas.html", ["i", "binding_", "on", "left", "mouse", "button", "released"], "UProductionQueueButton");
addToContainers_function("UIBinding_OnRightMouseButtonPress", "", "Docs/Classes/UProductionQueueButton/Functions/UIBinding_OnRightMouseButtonPress.html", ["i", "binding_", "on", "right", "mouse", "button", "press"], "UProductionQueueButton");
addToContainers_function("UIBinding_OnRightMouseButtonReleased", "", "Docs/Classes/UProductionQueueButton/Functions/UIBinding_OnRightMouseButtonRelea.html", ["i", "binding_", "on", "right", "mouse", "button", "released"], "UProductionQueueButton");
addToContainers_function("GetButtonType", "", "Docs/Classes/UProductionQueueButton/Functions/GetButtonType.html", ["get", "button", "type"], "UProductionQueueButton");
addToContainers_function("OnPlayerSelectionChanged", "", "Docs/Classes/UProductionQueueButton/Functions/OnPlayerSelectionChanged.html", ["on", "player", "selection", "changed"], "UProductionQueueButton");
addToContainers_function("Assign", "Make this button show the image for a certain item in production queue", "Docs/Classes/UProductionQueueButton/Functions/Assign.html", [], "UProductionQueueButton");
addToContainers_function("Unassign", "When slot no longer has queue item in it", "Docs/Classes/UProductionQueueButton/Functions/Unassign.html", [], "UProductionQueueButton");
addToContainers_function("OnCreationFromPalette", "Called when created from palette in editor", "Docs/Classes/UProductionQueueButton/Functions/OnCreationFromPalette.html", ["on", "creation", "from", "palette"], "UProductionQueueButton");
addToContainers_function("GetPaletteCategory", "", "Docs/Classes/UProductionQueueButton/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UProductionQueueButton");
addToContainers_variable("", "Reference to local player controller", "Docs/Classes/UProductionQueueButton/Variables/.html", [], "UProductionQueueButton");
addToContainers_variable("", "Reference to faction info of local player", "Docs/Classes/UProductionQueueButton/Variables/_1.html", [], "UProductionQueueButton");
addToContainers_variable("ButtonType", "The info this button is for", "Docs/Classes/UProductionQueueButton/Variables/ButtonType.html", ["button", "type"], "UProductionQueueButton");
addToContainers_class("UItemOnDisplayInShopButton", "A widget that represents an item that is on display in a shop. Usually these items can be purchased. Better name perhaps = UShopWindowSlotButton", "Docs/Classes/UItemOnDisplayInShopButton/UItemOnDisplayInShopButton.html", ["item", "on", "display", "in", "shop", "button"], "");
addToContainers_function("uint8", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/uint8.html", [], "UItemOnDisplayInShopButton");
addToContainers_function("UItemOnDisplayInShopButton", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/UItemOnDisplayInShopButton.html", ["item", "on", "display", "in", "shop", "button"], "UItemOnDisplayInShopButton");
addToContainers_function("SetupWidget", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/SetupWidget.html", ["setup", "widget"], "UItemOnDisplayInShopButton");
addToContainers_function("SetupMore", "Do more setup stuff", "Docs/Classes/UItemOnDisplayInShopButton/Functions/SetupMore.html", ["setup", "more"], "UItemOnDisplayInShopButton");
addToContainers_function("GetPurchasesRemainingText", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/GetPurchasesRemainingText.html", ["get", "purchases", "remaining", "text"], "UItemOnDisplayInShopButton");
addToContainers_function("GetSoldOutRenderOpacity", "Get the render opacity for this widget when the item it represents has sold out", "Docs/Classes/UItemOnDisplayInShopButton/Functions/GetSoldOutRenderOpacity.html", ["get", "sold", "out", "render", "opacity"], "UItemOnDisplayInShopButton");
addToContainers_function("UIBinding_OnLeftMouseButtonPress", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/UIBinding_OnLeftMouseButtonPress.html", ["i", "binding_", "on", "left", "mouse", "button", "press"], "UItemOnDisplayInShopButton");
addToContainers_function("UIBinding_OnLeftMouseButtonReleased", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/UIBinding_OnLeftMouseButtonReleas.html", ["i", "binding_", "on", "left", "mouse", "button", "released"], "UItemOnDisplayInShopButton");
addToContainers_function("UIBinding_OnRightMouseButtonPress", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/UIBinding_OnRightMouseButtonPress.html", ["i", "binding_", "on", "right", "mouse", "button", "press"], "UItemOnDisplayInShopButton");
addToContainers_function("UIBinding_OnRightMouseButtonReleased", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/UIBinding_OnRightMouseButtonRelea.html", ["i", "binding_", "on", "right", "mouse", "button", "released"], "UItemOnDisplayInShopButton");
addToContainers_function("GetShopSlotIndex", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/GetShopSlotIndex.html", ["get", "shop", "slot", "index"], "UItemOnDisplayInShopButton");
addToContainers_function("GetSlotStateInfo", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/GetSlotStateInfo.html", ["get", "slot", "state", "info"], "UItemOnDisplayInShopButton");
addToContainers_function("GetItemInfo", "", "Docs/Classes/UItemOnDisplayInShopButton/Functions/GetItemInfo.html", ["get", "item", "info"], "UItemOnDisplayInShopButton");
addToContainers_function("MakeActive", "Set up this widget for a certain slot in a shop @param InShopSlotIndex - what button in the shop this is for @param SlotInfo - contains info about the slot", "Docs/Classes/UItemOnDisplayInShopButton/Functions/MakeActive.html", ["make", "active"], "UItemOnDisplayInShopButton");
addToContainers_function("OnPurchaseFromHere", "Called when a purchase is made from this slot", "Docs/Classes/UItemOnDisplayInShopButton/Functions/OnPurchaseFromHere.html", ["on", "purchase", "from", "here"], "UItemOnDisplayInShopButton");
addToContainers_variable("", "", "Docs/Classes/UItemOnDisplayInShopButton/Variables/.html", [], "UItemOnDisplayInShopButton");
addToContainers_variable("OwningWidget", "Widget this is a child of", "Docs/Classes/UItemOnDisplayInShopButton/Variables/OwningWidget.html", ["owning", "widget"], "UItemOnDisplayInShopButton");
addToContainers_variable("ShopSlotIndex", "The slot in the shop this button should show info for. If this info is ever contained in FItemOnDisplayInShopSlot then this can be removed", "Docs/Classes/UItemOnDisplayInShopButton/Variables/ShopSlotIndex.html", ["shop", "slot", "index"], "UItemOnDisplayInShopButton");
addToContainers_variable("SlotStateInfo", "State info for what this button is selling", "Docs/Classes/UItemOnDisplayInShopButton/Variables/SlotStateInfo.html", ["slot", "state", "info"], "UItemOnDisplayInShopButton");
addToContainers_variable("ItemInfo", "Info struct for ItemTypeThisIsFor", "Docs/Classes/UItemOnDisplayInShopButton/Variables/ItemInfo.html", ["item", "info"], "UItemOnDisplayInShopButton");
addToContainers_variable("OriginalOpacity", "", "Docs/Classes/UItemOnDisplayInShopButton/Variables/OriginalOpacity.html", ["original", "opacity"], "UItemOnDisplayInShopButton");
addToContainers_variable("", "Button to handle clicks", "Docs/Classes/UItemOnDisplayInShopButton/Variables/_1.html", [], "UItemOnDisplayInShopButton");
addToContainers_variable("", "Text to show the name of the item", "Docs/Classes/UItemOnDisplayInShopButton/Variables/_2.html", [], "UItemOnDisplayInShopButton");
addToContainers_variable("", "Text to show the number of purchases remaining", "Docs/Classes/UItemOnDisplayInShopButton/Variables/_3.html", [], "UItemOnDisplayInShopButton");
addToContainers_class("UInventoryItemButton", "A button that represents an item in a selectable\'s inventory. Tip: to achieve displaying an image an text overtop the button put an overlay on it, then add the image and text widgets as childs to the overlay. Actually UButton can display an image on it anyway so I can completely do away with the image widget and set the image on the button instead. Better name = UInventorySlotButton", "Docs/Classes/UInventoryItemButton/UInventoryItemButton.html", ["inventory", "item", "button"], "");
addToContainers_function("UInventoryItemButton", "", "Docs/Classes/UInventoryItemButton/Functions/UInventoryItemButton.html", ["inventory", "item", "button"], "UInventoryItemButton");
addToContainers_function("SetupWidget", "", "Docs/Classes/UInventoryItemButton/Functions/SetupWidget.html", ["setup", "widget"], "UInventoryItemButton");
addToContainers_function("SetAppearanceForEmptySlot", "Often the param is just UnifiedBrushAndSoundFlags", "Docs/Classes/UInventoryItemButton/Functions/SetAppearanceForEmptySlot.html", ["set", "appearance", "for", "empty", "slot"], "UInventoryItemButton");
addToContainers_function("ItemUseCooldownFloatToText", "", "Docs/Classes/UInventoryItemButton/Functions/ItemUseCooldownFloatToText.html", ["item", "use", "cooldown", "float", "to", "text"], "UInventoryItemButton");
addToContainers_function("UIBinding_OnButtonLeftMouseButtonPressed", "", "Docs/Classes/UInventoryItemButton/Functions/UIBinding_OnButtonLeftMouseButton.html", ["i", "binding_", "on", "button", "left", "mouse", "button", "pressed"], "UInventoryItemButton");
addToContainers_function("UIBinding_OnButtonLeftMouseButtonReleased", "", "Docs/Classes/UInventoryItemButton/Functions/UIBinding_OnButtonLeftMouseButton_1.html", ["i", "binding_", "on", "button", "left", "mouse", "button", "released"], "UInventoryItemButton");
addToContainers_function("UIBinding_OnButtonRightMouseButtonPressed", "", "Docs/Classes/UInventoryItemButton/Functions/UIBinding_OnButtonRightMouseButto.html", ["i", "binding_", "on", "button", "right", "mouse", "button", "pressed"], "UInventoryItemButton");
addToContainers_function("UIBinding_OnButtonRightMouseButtonReleased", "", "Docs/Classes/UInventoryItemButton/Functions/UIBinding_OnButtonRightMouseButto_1.html", ["i", "binding_", "on", "button", "right", "mouse", "button", "released"], "UInventoryItemButton");
addToContainers_function("GetInventorySlot", "Get the inventory slot this widget is displaying info for", "Docs/Classes/UInventoryItemButton/Functions/GetInventorySlot.html", ["get", "inventory", "slot"], "UInventoryItemButton");
addToContainers_function("GetItemInfo", "Get the item info struct for the item this slot represents. Will be null if this slot represents an empty slot", "Docs/Classes/UInventoryItemButton/Functions/GetItemInfo.html", ["get", "item", "info"], "UInventoryItemButton");
addToContainers_function("GetServerSlotIndex", "Get which index in FInventory::SlotsArray this widget is displaying info for", "Docs/Classes/UInventoryItemButton/Functions/GetServerSlotIndex.html", ["get", "server", "slot", "index"], "UInventoryItemButton");
addToContainers_function("MakeActive", "Makes this button show info for a certain stack of items. It is valid for an \"empty\" to be passed into this in which case that means the slot does not have any item in it @param ItemsInfo - item info for inv slot. Can be null if slot has nothing in it @return - true if the item that was assigned to this slot has its use ability coolding down", "Docs/Classes/UInventoryItemButton/Functions/MakeActive.html", ["make", "active"], "UInventoryItemButton");
addToContainers_function("OnItemAdded", "", "Docs/Classes/UInventoryItemButton/Functions/OnItemAdded.html", ["on", "item", "added"], "UInventoryItemButton");
addToContainers_function("OnAmountRemoved", "Possibly this should only be called for stack amounts changing and not for charges being consumed", "Docs/Classes/UInventoryItemButton/Functions/OnAmountRemoved.html", ["on", "amount", "removed"], "UInventoryItemButton");
addToContainers_function("OnUsed", "Call when the item is used", "Docs/Classes/UInventoryItemButton/Functions/OnUsed.html", ["on", "used"], "UInventoryItemButton");
addToContainers_function("UpdateCooldown", "Update the cooldown on tick", "Docs/Classes/UInventoryItemButton/Functions/UpdateCooldown.html", ["update", "cooldown"], "UInventoryItemButton");
addToContainers_function("OnUseCooldownFinished", "Called when the cooldown for the item this widget represents is finished", "Docs/Classes/UInventoryItemButton/Functions/OnUseCooldownFinished.html", ["on", "use", "cooldown", "finished"], "UInventoryItemButton");
addToContainers_variable("InventorySlot", "Inventory slot this widget is displaying info for", "Docs/Classes/UInventoryItemButton/Variables/InventorySlot.html", ["inventory", "slot"], "UInventoryItemButton");
addToContainers_variable("SlotsItemInfo", "Pointer to info struct for what is in this slot. If this widget is representing an empty inventory slot then this will be null. This may not actually be needed", "Docs/Classes/UInventoryItemButton/Variables/SlotsItemInfo.html", ["slots", "item", "info"], "UInventoryItemButton");
addToContainers_variable("", "The button that will handle things like using the item if it is a usable item", "Docs/Classes/UInventoryItemButton/Variables/.html", [], "UInventoryItemButton");
addToContainers_variable("ServerSlotIndex", "The index in FInventory::SlotsArray this widget represents. Should probably be moved closer to InventorySlot", "Docs/Classes/UInventoryItemButton/Variables/ServerSlotIndex.html", ["server", "slot", "index"], "UInventoryItemButton");
addToContainers_variable("DisplayedItemType", "[Optimization] The item type that the widget is displaying. Here to try avoid dirtying widgets when they don\'t actually change what they display", "Docs/Classes/UInventoryItemButton/Variables/DisplayedItemType.html", ["displayed", "item", "type"], "UInventoryItemButton");
addToContainers_variable("StackQuantityOrNumChargesShown", "[Optimization] Because UTextBlock::SetText does not check if text has changed", "Docs/Classes/UInventoryItemButton/Variables/StackQuantityOrNumChargesShown.html", ["stack", "quantity", "or", "num", "charges", "shown"], "UInventoryItemButton");
addToContainers_variable("UnifiedBrushAndSoundFlags", "Duplicate of what\'s already stored in GI; don\'t really need it", "Docs/Classes/UInventoryItemButton/Variables/UnifiedBrushAndSoundFlags.html", ["unified", "brush", "and", "sound", "flags"], "UInventoryItemButton");
addToContainers_variable("", "Text that shows either: - how many of the item are in the stack - how many charges the item has", "Docs/Classes/UInventoryItemButton/Variables/_1.html", [], "UInventoryItemButton");
addToContainers_variable("", "Text to show the name of the item", "Docs/Classes/UInventoryItemButton/Variables/_2.html", [], "UInventoryItemButton");
addToContainers_variable("", "Text that shows the cooldown remaining on the item\'s \'use\' ability if any", "Docs/Classes/UInventoryItemButton/Variables/_3.html", [], "UInventoryItemButton");
addToContainers_variable("", "Progress bar that shows the cooldown remaining on the item\'s \'use\' ability if any", "Docs/Classes/UInventoryItemButton/Variables/_4.html", [], "UInventoryItemButton");
addToContainers_variable("ItemUseTotalCooldown", "The cooldown of the use ability of the item this widget represents. Irrelevant if the item does not have a use ability. If it has no cooldown then this will be 0. This data is also stored on the FContextButtonInfo struct so a pointer to that in place of this variable is an option", "Docs/Classes/UInventoryItemButton/Variables/ItemUseTotalCooldown.html", ["item", "use", "total", "cooldown"], "UInventoryItemButton");
addToContainers_class("USelectableActionBar", "Holds the actions a selectable can do like \'attack move\'", "Docs/Classes/USelectableActionBar/USelectableActionBar.html", ["selectable", "action", "bar"], "");
addToContainers_function("USelectableActionBar", "", "Docs/Classes/USelectableActionBar/Functions/USelectableActionBar.html", ["selectable", "action", "bar"], "USelectableActionBar");
addToContainers_function("SetupWidget", "", "Docs/Classes/USelectableActionBar/Functions/SetupWidget.html", ["setup", "widget"], "USelectableActionBar");
addToContainers_function("OnTick", "", "Docs/Classes/USelectableActionBar/Functions/OnTick.html", ["on", "tick"], "USelectableActionBar");
addToContainers_function("OnPlayerSelectionChanged", "", "Docs/Classes/USelectableActionBar/Functions/OnPlayerSelectionChanged.html", ["on", "player", "selection", "changed"], "USelectableActionBar");
addToContainers_function("OnNoPlayerSelection", "Call when player changes to no selection", "Docs/Classes/USelectableActionBar/Functions/OnNoPlayerSelection.html", ["on", "no", "player", "selection"], "USelectableActionBar");
addToContainers_function("UpdateButtonCooldowns", "Update the cooldowns for each button", "Docs/Classes/USelectableActionBar/Functions/UpdateButtonCooldowns.html", ["update", "button", "cooldowns"], "USelectableActionBar");
addToContainers_function("OnProductionComplete", "===================================================================================", "Docs/Classes/USelectableActionBar/Functions/OnProductionComplete.html", ["on", "production", "complete"], "USelectableActionBar");
addToContainers_function("OnUpgradeComplete", "===================================================================================", "Docs/Classes/USelectableActionBar/Functions/OnUpgradeComplete.html", ["on", "upgrade", "complete"], "USelectableActionBar");
addToContainers_function("OnBuildingConstructed", "Functions called when a building is built/destroyed @param BuildingType - the type of building that was built @param bFirstOfItsType - whether this was the first building of its type for prerequisite purposes", "Docs/Classes/USelectableActionBar/Functions/OnBuildingConstructed.html", ["on", "building", "constructed"], "USelectableActionBar");
addToContainers_function("OnBuildingDestroyed", "", "Docs/Classes/USelectableActionBar/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "USelectableActionBar");
addToContainers_variable("", "Alpha for buttons when they are not clickable because prerequisites are not met", "Docs/Classes/USelectableActionBar/Variables/.html", [], "USelectableActionBar");
addToContainers_variable("", "Array of buttons for each action slot", "Docs/Classes/USelectableActionBar/Variables/_1.html", [], "USelectableActionBar");
addToContainers_variable("", "Maps a button to the widget assigned to that button", "Docs/Classes/USelectableActionBar/Variables/_2.html", [], "USelectableActionBar");
addToContainers_variable("NumButtonsInMenu", "Number of buttons active in ActionButtons i.e. the number of context buttons on the current selected\'s context menu (including whether they have prereqs met or not)", "Docs/Classes/USelectableActionBar/Variables/NumButtonsInMenu.html", ["num", "buttons", "in", "menu"], "USelectableActionBar");
addToContainers_class("UContextActionButton", "A single button for a context action. It will construct extra widgets when placed in editor. A few assumptions are made when using these: - That the overlay widget is a direct child of this - That the image and progress bar widgets are direct children of the overlay widget", "Docs/Classes/UContextActionButton/UContextActionButton.html", ["context", "action", "button"], "");
addToContainers_function("UContextActionButton", "", "Docs/Classes/UContextActionButton/Functions/UContextActionButton.html", ["context", "action", "button"], "UContextActionButton");
addToContainers_function("Setup", "", "Docs/Classes/UContextActionButton/Functions/Setup.html", [], "UContextActionButton");
addToContainers_function("OnCreationFromPalette", "Called when created from palette in editor", "Docs/Classes/UContextActionButton/Functions/OnCreationFromPalette.html", ["on", "creation", "from", "palette"], "UContextActionButton");
addToContainers_function("OnButtonCreationFromPalette", "Made public and static to allow UHUDPersistentTabButton to use it @param bCreateCooldownText - whether to create a text block for the purpose of displaying the cooldown remaining", "Docs/Classes/UContextActionButton/Functions/OnButtonCreationFromPalette.html", ["on", "button", "creation", "from", "palette"], "UContextActionButton");
addToContainers_function("SetImageAndProgressBarReferences", "Set params to point to first image and progress bar found that are children. Made static so UHUDPersistentTabButton can reuse it @param bFindCooldownRemainingText - whether to find a text block for displaying a duration value. If false then the param InCooldownRemainingText will not be touched. If this param is true then it is likely OnButtonCreationFromPalette with bCreateCooldownText as true was called to setup the widget", "Docs/Classes/UContextActionButton/Functions/SetImageAndProgressBarReferences.html", ["set", "image", "and", "progress", "bar", "references"], "UContextActionButton");
addToContainers_function("GetDurationRemainingText", "Convert a float value to a FText.", "Docs/Classes/UContextActionButton/Functions/GetDurationRemainingText.html", ["get", "duration", "remaining", "text"], "UContextActionButton");
addToContainers_function("SetAppearanceForFullyResearchedUpgrade", "Set the appearance of this button given that we know it is for an upgrade and that the upgrade cannot be researched anymore", "Docs/Classes/UContextActionButton/Functions/SetAppearanceForFullyResearchedUp.html", ["set", "appearance", "for", "fully", "researched", "upgrade"], "UContextActionButton");
addToContainers_function("UIBinding_OnLMBPressed", "", "Docs/Classes/UContextActionButton/Functions/UIBinding_OnLMBPressed.html", ["i", "binding_", "on", "l", "m", "b", "pressed"], "UContextActionButton");
addToContainers_function("UIBinding_OnLMBReleased", "", "Docs/Classes/UContextActionButton/Functions/UIBinding_OnLMBReleased.html", ["i", "binding_", "on", "l", "m", "b", "released"], "UContextActionButton");
addToContainers_function("UIBinding_OnRMBPressed", "", "Docs/Classes/UContextActionButton/Functions/UIBinding_OnRMBPressed.html", ["i", "binding_", "on", "r", "m", "b", "pressed"], "UContextActionButton");
addToContainers_function("UIBinding_OnRMBReleased", "", "Docs/Classes/UContextActionButton/Functions/UIBinding_OnRMBReleased.html", ["i", "binding_", "on", "r", "m", "b", "released"], "UContextActionButton");
addToContainers_function("MakeActive", "Version for TrainUnit/Upgrade", "Docs/Classes/UContextActionButton/Functions/MakeActive.html", ["make", "active"], "UContextActionButton");
addToContainers_function("MakeActive", "Version for BuildBuilding @param BuildingInfo - info struct for building button represents, not primary selected @param PrimarySelectedBuildingAttributes - FBuildingAttributes for the player\'s primary selected. Can be null if they are not a building.", "Docs/Classes/UContextActionButton/Functions/MakeActive_1.html", ["make", "active"], "UContextActionButton");
addToContainers_function("MakeActive", "Version for abilities", "Docs/Classes/UContextActionButton/Functions/MakeActive_2.html", ["make", "active"], "UContextActionButton");
addToContainers_function("UpdateCooldownProgressBarAndText", "Update the cooldown progress bar and text", "Docs/Classes/UContextActionButton/Functions/UpdateCooldownProgressBarAndText.html", ["update", "cooldown", "progress", "bar", "and", "text"], "UContextActionButton");
addToContainers_function("Disable", "Makes widget invisible", "Docs/Classes/UContextActionButton/Functions/Disable.html", [], "UContextActionButton");
addToContainers_function("ArePrequisitesMet", "Return true if the button is currently setup for use", "Docs/Classes/UContextActionButton/Functions/ArePrequisitesMet.html", ["are", "prequisites", "met"], "UContextActionButton");
addToContainers_function("GetButtonType", "Get the button functionality for this button", "Docs/Classes/UContextActionButton/Functions/GetButtonType.html", ["get", "button", "type"], "UContextActionButton");
addToContainers_function("GetDisplayedInfo", "", "Docs/Classes/UContextActionButton/Functions/GetDisplayedInfo.html", ["get", "displayed", "info"], "UContextActionButton");
addToContainers_function("OnPrerequisitesMet", "", "Docs/Classes/UContextActionButton/Functions/OnPrerequisitesMet.html", ["on", "prerequisites", "met"], "UContextActionButton");
addToContainers_function("OnPrerequisiteLost", "", "Docs/Classes/UContextActionButton/Functions/OnPrerequisiteLost.html", ["on", "prerequisite", "lost"], "UContextActionButton");
addToContainers_function("OnUpgradeResearchComplete", "Called if this button is for an upgrade and the upgrade completed", "Docs/Classes/UContextActionButton/Functions/OnUpgradeResearchComplete.html", ["on", "upgrade", "research", "complete"], "UContextActionButton");
addToContainers_function("GetPaletteCategory", "", "Docs/Classes/UContextActionButton/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UContextActionButton");
addToContainers_variable("", "Reference to the progress bar that shows the cooldown remaining", "Docs/Classes/UContextActionButton/Variables/.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to the text block that shows the ability\'s cooldown remaining. Could also show the time left on construction progress too I guess", "Docs/Classes/UContextActionButton/Variables/_1.html", [], "UContextActionButton");
addToContainers_variable("bIsCooldownTextEmpty", "Whether CooldownRemainingText has its text set as empty or not. This is here because we\'re not fully event driven on abilities coming off cooldown and this should give a performance boost by not setting the text block\'s text to empty every frame.", "Docs/Classes/UContextActionButton/Variables/bIsCooldownTextEmpty.html", ["is", "cooldown", "text", "empty"], "UContextActionButton");
addToContainers_variable("", "The text that shows on the button describing what the button is for. Really just 1 or 2 words - it\'s not the actual description of what the button does", "Docs/Classes/UContextActionButton/Variables/_2.html", [], "UContextActionButton");
addToContainers_variable("", "More text intended to show whatever, perhaps the remaining cooldown of button", "Docs/Classes/UContextActionButton/Variables/_3.html", [], "UContextActionButton");
addToContainers_variable("bIsForProductionAction", "Whether this button is for a Train/Upgrade type button or a BuildBuilding button that is either BuildsInTab or BuildsItself", "Docs/Classes/UContextActionButton/Variables/bIsForProductionAction.html", ["is", "for", "production", "action"], "UContextActionButton");
addToContainers_variable("ProductionQueue", "Production queue if using this button for a production action", "Docs/Classes/UContextActionButton/Variables/ProductionQueue.html", ["production", "queue"], "UContextActionButton");
addToContainers_variable("TimerHandle_ProgressBar", "Timer handle for updating progress bar. Ignored if using for production action", "Docs/Classes/UContextActionButton/Variables/TimerHandle_ProgressBar.html", ["timer", "handle_", "progress", "bar"], "UContextActionButton");
addToContainers_variable("ButtonType", "Type of action this button is for. Will change as players current selected changes", "Docs/Classes/UContextActionButton/Variables/ButtonType.html", ["button", "type"], "UContextActionButton");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/UContextActionButton/Variables/_4.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to player controller", "Docs/Classes/UContextActionButton/Variables/_5.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to player state that uses this", "Docs/Classes/UContextActionButton/Variables/_6.html", [], "UContextActionButton");
addToContainers_variable("", "Reference to faction info of local player", "Docs/Classes/UContextActionButton/Variables/_7.html", [], "UContextActionButton");
addToContainers_variable("bPrerequisitesMet", "", "Docs/Classes/UContextActionButton/Variables/bPrerequisitesMet.html", ["prerequisites", "met"], "UContextActionButton");
addToContainers_variable("OriginalAlpha", "Original alpha of button cached so it can be restored when prerequisites are met", "Docs/Classes/UContextActionButton/Variables/OriginalAlpha.html", ["original", "alpha"], "UContextActionButton");
addToContainers_class("UGarrisonedUnitInfo", "Info about a single garrisoned unit", "Docs/Classes/UGarrisonedUnitInfo/UGarrisonedUnitInfo.html", ["garrisoned", "unit", "info"], "");
addToContainers_function("SetupWidget", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/SetupWidget.html", ["setup", "widget"], "UGarrisonedUnitInfo");
addToContainers_function("SetAppearanceFor", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/SetAppearanceFor.html", ["set", "appearance", "for"], "UGarrisonedUnitInfo");
addToContainers_function("UIBinding_OnUnloadButtonLMBPressed", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/UIBinding_OnUnloadButtonLMBPresse.html", ["i", "binding_", "on", "unload", "button", "l", "m", "b", "pressed"], "UGarrisonedUnitInfo");
addToContainers_function("UIBinding_OnUnloadButtonLMBReleased", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/UIBinding_OnUnloadButtonLMBReleas.html", ["i", "binding_", "on", "unload", "button", "l", "m", "b", "released"], "UGarrisonedUnitInfo");
addToContainers_function("UIBinding_OnUnloadButtonRMBPressed", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/UIBinding_OnUnloadButtonRMBPresse.html", ["i", "binding_", "on", "unload", "button", "r", "m", "b", "pressed"], "UGarrisonedUnitInfo");
addToContainers_function("UIBinding_OnUnloadButtonRMBReleased", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/UIBinding_OnUnloadButtonRMBReleas.html", ["i", "binding_", "on", "unload", "button", "r", "m", "b", "released"], "UGarrisonedUnitInfo");
addToContainers_function("OnUnloadButtonClicked", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/OnUnloadButtonClicked.html", ["on", "unload", "button", "clicked"], "UGarrisonedUnitInfo");
addToContainers_function("GetGarrisonedSelectable", "", "Docs/Classes/UGarrisonedUnitInfo/Functions/GetGarrisonedSelectable.html", ["get", "garrisoned", "selectable"], "UGarrisonedUnitInfo");
addToContainers_variable("", "Button to display image of unit and when clicked to unload the unit", "Docs/Classes/UGarrisonedUnitInfo/Variables/.html", [], "UGarrisonedUnitInfo");
addToContainers_variable("GarrisonedSelectable", "The selectable garrisoned inside the building. This may be stale if the widget hides this button but should not be an issue because the button is hidden and therefore not clickable!", "Docs/Classes/UGarrisonedUnitInfo/Variables/GarrisonedSelectable.html", ["garrisoned", "selectable"], "UGarrisonedUnitInfo");
addToContainers_class("UGarrisonInfo", "This widget was added to show what units are inside garrisons", "Docs/Classes/UGarrisonInfo/UGarrisonInfo.html", ["garrison", "info"], "");
addToContainers_function("SetupWidget", "", "Docs/Classes/UGarrisonInfo/Functions/SetupWidget.html", ["setup", "widget"], "UGarrisonInfo");
addToContainers_function("OnPlayerPrimarySelectedChanged", "", "Docs/Classes/UGarrisonInfo/Functions/OnPlayerPrimarySelectedChanged.html", ["on", "player", "primary", "selected", "changed"], "UGarrisonInfo");
addToContainers_function("OnPlayerNoSelection", "", "Docs/Classes/UGarrisonInfo/Functions/OnPlayerNoSelection.html", ["on", "player", "no", "selection"], "UGarrisonInfo");
addToContainers_function("OnBuildingGarrisonedUnitGained", "", "Docs/Classes/UGarrisonInfo/Functions/OnBuildingGarrisonedUnitGained.html", ["on", "building", "garrisoned", "unit", "gained"], "UGarrisonInfo");
addToContainers_function("OnBuildingGarrisonedUnitLost", "", "Docs/Classes/UGarrisonInfo/Functions/OnBuildingGarrisonedUnitLost.html", ["on", "building", "garrisoned", "unit", "lost"], "UGarrisonInfo");
addToContainers_function("OnBuildingPotentiallyManyGarrisonedUnitsLost", "", "Docs/Classes/UGarrisonInfo/Functions/OnBuildingPotentiallyManyGarrison.html", ["on", "building", "potentially", "many", "garrisoned", "units", "lost"], "UGarrisonInfo");
addToContainers_function("UIBinding_OnUnloadGarrisonButtonLeftMousePress", "", "Docs/Classes/UGarrisonInfo/Functions/UIBinding_OnUnloadGarrisonButtonL.html", ["i", "binding_", "on", "unload", "garrison", "button", "left", "mouse", "press"], "UGarrisonInfo");
addToContainers_function("UIBinding_OnUnloadGarrisonButtonLeftMouseReleased", "", "Docs/Classes/UGarrisonInfo/Functions/UIBinding_OnUnloadGarrisonButtonL_1.html", ["i", "binding_", "on", "unload", "garrison", "button", "left", "mouse", "released"], "UGarrisonInfo");
addToContainers_function("UIBinding_OnUnloadGarrisonButtonRightMousePress", "", "Docs/Classes/UGarrisonInfo/Functions/UIBinding_OnUnloadGarrisonButtonR.html", ["i", "binding_", "on", "unload", "garrison", "button", "right", "mouse", "press"], "UGarrisonInfo");
addToContainers_function("UIBinding_OnUnloadGarrisonButtonRightMouseReleased", "", "Docs/Classes/UGarrisonInfo/Functions/UIBinding_OnUnloadGarrisonButtonR_1.html", ["i", "binding_", "on", "unload", "garrison", "button", "right", "mouse", "released"], "UGarrisonInfo");
addToContainers_function("OnUnloadGarrisonButtonClicked", "", "Docs/Classes/UGarrisonInfo/Functions/OnUnloadGarrisonButtonClicked.html", ["on", "unload", "garrison", "button", "clicked"], "UGarrisonInfo");
addToContainers_variable("PrimarySelectedsGarrisonNetworkType", "The building garrison network type for the primary selected. If primary selected is not a building then this will likely be \"None\"", "Docs/Classes/UGarrisonInfo/Variables/PrimarySelectedsGarrisonNetworkTy.html", ["primary", "selecteds", "garrison", "network", "type"], "UGarrisonInfo");
addToContainers_variable("", "Widget that will display info about garrisoned unit", "Docs/Classes/UGarrisonInfo/Variables/.html", [], "UGarrisonInfo");
addToContainers_variable("", "Panel that will show all the units", "Docs/Classes/UGarrisonInfo/Variables/_1.html", [], "UGarrisonInfo");
addToContainers_variable("", "A button that when clicked will unload all units inside the garrison", "Docs/Classes/UGarrisonInfo/Variables/_2.html", [], "UGarrisonInfo");
addToContainers_class("UHUDResourcesWidget", "Widget that holds single resource widgets.", "Docs/Classes/UHUDResourcesWidget/UHUDResourcesWidget.html", ["h", "u", "d", "resources", "widget"], "");
addToContainers_function("SetupWidget", "TODO: consider changing parent ", "Docs/Classes/UHUDResourcesWidget/Functions/SetupWidget.html", ["setup", "widget"], "UHUDResourcesWidget");
addToContainers_function("OnTick", "", "Docs/Classes/UHUDResourcesWidget/Functions/OnTick.html", ["on", "tick"], "UHUDResourcesWidget");
addToContainers_function("SetInitialResourceAmounts", "Set the starting values. Only call once at start of the match @param InInitialValueArray - array that holds how much of each resource we started match with @param InInitialHousingProvided - array that holds how much of eaqch housing resource we started the match with", "Docs/Classes/UHUDResourcesWidget/Functions/SetInitialResourceAmounts.html", ["set", "initial", "resource", "amounts"], "UHUDResourcesWidget");
addToContainers_function("OnResourcesChanged", "", "Docs/Classes/UHUDResourcesWidget/Functions/OnResourcesChanged.html", ["on", "resources", "changed"], "UHUDResourcesWidget");
addToContainers_function("OnHousingResourceConsumptionChanged", "", "Docs/Classes/UHUDResourcesWidget/Functions/OnHousingResourceConsumptionChang.html", ["on", "housing", "resource", "consumption", "changed"], "UHUDResourcesWidget");
addToContainers_function("OnHousingResourceProvisionsChanged", "", "Docs/Classes/UHUDResourcesWidget/Functions/OnHousingResourceProvisionsChange.html", ["on", "housing", "resource", "provisions", "changed"], "UHUDResourcesWidget");
addToContainers_variable("", "Maps resource type to its panel widget", "Docs/Classes/UHUDResourcesWidget/Variables/.html", [], "UHUDResourcesWidget");
addToContainers_variable("", "Array that holds all the single housing resource widgets. Key = Statics::HousingResourceTypeToArrayIndex", "Docs/Classes/UHUDResourcesWidget/Variables/_1.html", [], "UHUDResourcesWidget");
addToContainers_class("UHUDSingleResourcesWidget", "A widget that shows how much of a single resource type the player has. Not used for housing resource types", "Docs/Classes/UHUDSingleResourcesWidget/UHUDSingleResourcesWidget.html", ["h", "u", "d", "single", "resources", "widget"], "");
addToContainers_function("SetupWidget", "", "Docs/Classes/UHUDSingleResourcesWidget/Functions/SetupWidget.html", ["setup", "widget"], "UHUDSingleResourcesWidget");
addToContainers_function("OnTick", "", "Docs/Classes/UHUDSingleResourcesWidget/Functions/OnTick.html", ["on", "tick"], "UHUDSingleResourcesWidget");
addToContainers_function("CheckUpdateCurve", "Check if UpdateCurve is usable and null it if it is not", "Docs/Classes/UHUDSingleResourcesWidget/Functions/CheckUpdateCurve.html", ["check", "update", "curve"], "UHUDSingleResourcesWidget");
addToContainers_function("UpdateResourceDisplayAmount", "Update what is shown in widget @param NewAmount - new amount to change to @param bUsingFloatCurve - true if UpdateCurve is being used", "Docs/Classes/UHUDSingleResourcesWidget/Functions/UpdateResourceDisplayAmount.html", ["update", "resource", "display", "amount"], "UHUDSingleResourcesWidget");
addToContainers_function("GetResourceType", "", "Docs/Classes/UHUDSingleResourcesWidget/Functions/GetResourceType.html", ["get", "resource", "type"], "UHUDSingleResourcesWidget");
addToContainers_function("SetInitialValue", "Only call once at the start of the match", "Docs/Classes/UHUDSingleResourcesWidget/Functions/SetInitialValue.html", ["set", "initial", "value"], "UHUDSingleResourcesWidget");
addToContainers_function("OnResourcesChanged", "", "Docs/Classes/UHUDSingleResourcesWidget/Functions/OnResourcesChanged.html", ["on", "resources", "changed"], "UHUDSingleResourcesWidget");
addToContainers_variable("", "Resource type this is for", "Docs/Classes/UHUDSingleResourcesWidget/Variables/.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("", "Curve for playing the decreasing money over time tick down/up effect like in SCII. If no curve is set then resources are updated instantly. Also resources are always subtracted instantly in player state - this is just for visuals only and doesn\'t mean if the curve is slow you can spend those resources again. Curve should be increasing. X axis = duration to go from current value to new value Y axis = percentage towards new value (should have a range from 0 to 1). My notes: If resources changes and the value displayed is already part way towards the new value then the update time will not be the full length of curve. If the displayed value hasn\'t caught up to the actual value and a change causes the new value to go even further away from the displayed value then it will take the full curve duration but not any longer", "Docs/Classes/UHUDSingleResourcesWidget/Variables/_1.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("StartAmount", "~ For update curve only", "Docs/Classes/UHUDSingleResourcesWidget/Variables/StartAmount.html", ["start", "amount"], "UHUDSingleResourcesWidget");
addToContainers_variable("CurrentAmount", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/CurrentAmount.html", ["current", "amount"], "UHUDSingleResourcesWidget");
addToContainers_variable("TargetAmount", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/TargetAmount.html", ["target", "amount"], "UHUDSingleResourcesWidget");
addToContainers_variable("UpdateCurveDuration", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/UpdateCurveDuration.html", ["update", "curve", "duration"], "UHUDSingleResourcesWidget");
addToContainers_variable("CurrentCurveTime", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/CurrentCurveTime.html", ["current", "curve", "time"], "UHUDSingleResourcesWidget");
addToContainers_variable("Range", "", "Docs/Classes/UHUDSingleResourcesWidget/Variables/Range.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("", "Resource icon", "Docs/Classes/UHUDSingleResourcesWidget/Variables/_2.html", [], "UHUDSingleResourcesWidget");
addToContainers_variable("", "Amount of resource", "Docs/Classes/UHUDSingleResourcesWidget/Variables/_3.html", [], "UHUDSingleResourcesWidget");
addToContainers_class("UHUDSingleHousingResourceWidget", "A widget that shows how much of a single housing resource the player is consuming and providing. The values do not update using curves", "Docs/Classes/UHUDSingleHousingResourceWidget/UHUDSingleHousingResourceWidget.html", ["h", "u", "d", "single", "housing", "resource", "widget"], "");
addToContainers_function("UHUDSingleHousingResourceWidget", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/UHUDSingleHousingResourceWidget.html", ["h", "u", "d", "single", "housing", "resource", "widget"], "UHUDSingleHousingResourceWidget");
addToContainers_function("SetupResourceWidget", "I named this func like this in case I decide to change the parent class and accidentally override a virtual", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/SetupResourceWidget.html", ["setup", "resource", "widget"], "UHUDSingleHousingResourceWidget");
addToContainers_function("CheckIfStateHasChanged", "Check if the state has gone from over cap to within cap or vice versa and call appropriate function if so", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/CheckIfStateHasChanged.html", ["check", "if", "state", "has", "changed"], "UHUDSingleHousingResourceWidget");
addToContainers_function("OnGoneOverCap", "Called when the player starts consuming more than they are providing", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/OnGoneOverCap.html", ["on", "gone", "over", "cap"], "UHUDSingleHousingResourceWidget");
addToContainers_function("OnReturnedToWithinCap", "Called when the player stops consuming more than they are providing", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/OnReturnedToWithinCap.html", ["on", "returned", "to", "within", "cap"], "UHUDSingleHousingResourceWidget");
addToContainers_function("GetResourceType", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/GetResourceType.html", ["get", "resource", "type"], "UHUDSingleHousingResourceWidget");
addToContainers_function("SetInitialValue", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/SetInitialValue.html", ["set", "initial", "value"], "UHUDSingleHousingResourceWidget");
addToContainers_function("OnAmountConsumedChanged", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/OnAmountConsumedChanged.html", ["on", "amount", "consumed", "changed"], "UHUDSingleHousingResourceWidget");
addToContainers_function("OnAmountProvidedChanged", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Functions/OnAmountProvidedChanged.html", ["on", "amount", "provided", "changed"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "The housing resource this widget is for", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("Consumed_OriginalColor", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/Consumed_OriginalColor.html", ["consumed_", "original", "color"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("Provided_OriginalColor", "", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/Provided_OriginalColor.html", ["provided_", "original", "color"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "The color to make the consumed text when the amount consumed goes over the amount provided", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_1.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "The color to make the provided text when the amount consumed goes over the amount provided", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_2.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("bIsOverCap", "If true then this widget is displaying as if the player is consuming more than they are producing", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/bIsOverCap.html", ["is", "over", "cap"], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "Text to show the amount of the resource being consumed", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_3.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_variable("", "Text to show the amount of the resource being provided", "Docs/Classes/UHUDSingleHousingResourceWidget/Variables/_4.html", [], "UHUDSingleHousingResourceWidget");
addToContainers_class("UHUDChatInputWidget", "Widget that shows when wanting to enter chat message", "Docs/Classes/UHUDChatInputWidget/UHUDChatInputWidget.html", ["h", "u", "d", "chat", "input", "widget"], "");
addToContainers_function("UHUDChatInputWidget", "", "Docs/Classes/UHUDChatInputWidget/Functions/UHUDChatInputWidget.html", ["h", "u", "d", "chat", "input", "widget"], "UHUDChatInputWidget");
addToContainers_function("SetupWidget", "", "Docs/Classes/UHUDChatInputWidget/Functions/SetupWidget.html", ["setup", "widget"], "UHUDChatInputWidget");
addToContainers_function("SetupBindings", "", "Docs/Classes/UHUDChatInputWidget/Functions/SetupBindings.html", ["setup", "bindings"], "UHUDChatInputWidget");
addToContainers_function("RemoveFocus", "Removes focus from this widget and puts it back on game", "Docs/Classes/UHUDChatInputWidget/Functions/RemoveFocus.html", ["remove", "focus"], "UHUDChatInputWidget");
addToContainers_function("GetMessageToSend", "", "Docs/Classes/UHUDChatInputWidget/Functions/GetMessageToSend.html", ["get", "message", "to", "send"], "UHUDChatInputWidget");
addToContainers_function("SendMessage", "", "Docs/Classes/UHUDChatInputWidget/Functions/SendMessage.html", ["send", "message"], "UHUDChatInputWidget");
addToContainers_function("UIBinding_OnInputTextChanged", "", "Docs/Classes/UHUDChatInputWidget/Functions/UIBinding_OnInputTextChanged.html", ["i", "binding_", "on", "input", "text", "changed"], "UHUDChatInputWidget");
addToContainers_function("UIBinding_OnInputTextCommitted", "", "Docs/Classes/UHUDChatInputWidget/Functions/UIBinding_OnInputTextCommitted.html", ["i", "binding_", "on", "input", "text", "committed"], "UHUDChatInputWidget");
addToContainers_function("Open", "Called when player wants to type in message", "Docs/Classes/UHUDChatInputWidget/Functions/Open.html", [], "UHUDChatInputWidget");
addToContainers_function("Close", "Hide", "Docs/Classes/UHUDChatInputWidget/Functions/Close.html", [], "UHUDChatInputWidget");
addToContainers_function("RespondToEscapeRequest", "", "Docs/Classes/UHUDChatInputWidget/Functions/RespondToEscapeRequest.html", ["respond", "to", "escape", "request"], "UHUDChatInputWidget");
addToContainers_function("SendChatMessageAndClose", "", "Docs/Classes/UHUDChatInputWidget/Functions/SendChatMessageAndClose.html", ["send", "chat", "message", "and", "close"], "UHUDChatInputWidget");
addToContainers_variable("", "What to put onto the start of the text when typing out a for these groups. This will not be sent with the message", "Docs/Classes/UHUDChatInputWidget/Variables/.html", [], "UHUDChatInputWidget");
addToContainers_variable("", "Max length of message excluding any MessageStarts", "Docs/Classes/UHUDChatInputWidget/Variables/_1.html", [], "UHUDChatInputWidget");
addToContainers_variable("", "Text box to type message into. Interesting... in PIE ESC will lose focus on a UEditableTextBox but not a UEditableText", "Docs/Classes/UHUDChatInputWidget/Variables/_2.html", [], "UHUDChatInputWidget");
addToContainers_variable("MessageRecipients", "Who will receive the message if sent", "Docs/Classes/UHUDChatInputWidget/Variables/MessageRecipients.html", ["message", "recipients"], "UHUDChatInputWidget");
addToContainers_variable("NumUndeletableCharacters", "How many characters inside the input box cannot be deleted. This prevents the things like [TEAM ONLY]: part of the text never being deleted", "Docs/Classes/UHUDChatInputWidget/Variables/NumUndeletableCharacters.html", ["num", "undeletable", "characters"], "UHUDChatInputWidget");
addToContainers_class("UHUDChatOutputWidget", "####################################################", "Docs/Classes/UHUDChatOutputWidget/UHUDChatOutputWidget.html", ["h", "u", "d", "chat", "output", "widget"], "");
addToContainers_function("UHUDChatOutputWidget", "", "Docs/Classes/UHUDChatOutputWidget/Functions/UHUDChatOutputWidget.html", ["h", "u", "d", "chat", "output", "widget"], "UHUDChatOutputWidget");
addToContainers_function("SetupWidget", "", "Docs/Classes/UHUDChatOutputWidget/Functions/SetupWidget.html", ["setup", "widget"], "UHUDChatOutputWidget");
addToContainers_function("NativeTick", "", "Docs/Classes/UHUDChatOutputWidget/Functions/NativeTick.html", ["native", "tick"], "UHUDChatOutputWidget");
addToContainers_function("GetNextArrayIndex", "Get what is considered next in array MessageLengths", "Docs/Classes/UHUDChatOutputWidget/Functions/GetNextArrayIndex.html", ["get", "next", "array", "index"], "UHUDChatOutputWidget");
addToContainers_function("HideWidget", "", "Docs/Classes/UHUDChatOutputWidget/Functions/HideWidget.html", ["hide", "widget"], "UHUDChatOutputWidget");
addToContainers_function("Delay)", "", "Docs/Classes/UHUDChatOutputWidget/Functions/Delay).html", [], "UHUDChatOutputWidget");
addToContainers_function("OnChatMessageReceived", "", "Docs/Classes/UHUDChatOutputWidget/Functions/OnChatMessageReceived.html", ["on", "chat", "message", "received"], "UHUDChatOutputWidget");
addToContainers_variable("MessageReceivedAnimName", "Name of widget to play message received anim", "Docs/Classes/UHUDChatOutputWidget/Variables/MessageReceivedAnimName.html", ["message", "received", "anim", "name"], "UHUDChatOutputWidget");
addToContainers_variable("", "Messages received", "Docs/Classes/UHUDChatOutputWidget/Variables/.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "List of how long each message is. Used kind of like a linked list", "Docs/Classes/UHUDChatOutputWidget/Variables/_1.html", [], "UHUDChatOutputWidget");
addToContainers_variable("FrontOfMessageIndices", "Index in MessageIndices that is considered the front of it cause using it like a linked list", "Docs/Classes/UHUDChatOutputWidget/Variables/FrontOfMessageIndices.html", ["front", "of", "message", "indices"], "UHUDChatOutputWidget");
addToContainers_variable("NumMessages", "Number of messages currently in chat log", "Docs/Classes/UHUDChatOutputWidget/Variables/NumMessages.html", ["num", "messages"], "UHUDChatOutputWidget");
addToContainers_variable("", "Animation that plays when a message is received. Will probably want to make widget hit test invis at start and hidden/collapsed at end", "Docs/Classes/UHUDChatOutputWidget/Variables/_2.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "If not using a widget anim, the amount of time after receiving a message before hiding widget", "Docs/Classes/UHUDChatOutputWidget/Variables/_3.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "Relevant if: - using a widget anim for when message is received - the animation has some kind of start effect to it as opposed to just showing widget straight away e.g. it takes 1 second to fade in. The amount of time to reset anim to when a message is received while the anim is still playing, but never moves anim forward, will only move anim start time backwards", "Docs/Classes/UHUDChatOutputWidget/Variables/_4.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "Max number of messages allowed in log before it will start deleting the oldest ones", "Docs/Classes/UHUDChatOutputWidget/Variables/_5.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "What to put very first in the message", "Docs/Classes/UHUDChatOutputWidget/Variables/_6.html", [], "UHUDChatOutputWidget");
addToContainers_variable("", "What to put after the senders name but before what they typed. There\'s probably better names for these. So to clarify the whole message will be: MessageStarts + senders name + MessageMiddle + what they typed, with new lines added automatically", "Docs/Classes/UHUDChatOutputWidget/Variables/_7.html", [], "UHUDChatOutputWidget");
addToContainers_variable("TimerHandle_Hide", "Timer handle for hiding widget", "Docs/Classes/UHUDChatOutputWidget/Variables/TimerHandle_Hide.html", ["timer", "handle_", "hide"], "UHUDChatOutputWidget");
addToContainers_struct("FGameMessageAttributes", "Attributes for a game message category", "Docs/Structs/FGameMessageAttributes/FGameMessageAttributes.html", ["game", "message", "attributes"], "");
addToContainers_function("void", "", "Docs/Structs/FGameMessageAttributes/Functions/void.html", [], "FGameMessageAttributes");
addToContainers_function("GetNextArrayIndex", "", "Docs/Structs/FGameMessageAttributes/Functions/GetNextArrayIndex.html", ["get", "next", "array", "index"], "FGameMessageAttributes");
addToContainers_function("GetPreviousArrayIndex", "", "Docs/Structs/FGameMessageAttributes/Functions/GetPreviousArrayIndex.html", ["get", "previous", "array", "index"], "FGameMessageAttributes");
addToContainers_function("FGameMessageAttributes", "", "Docs/Structs/FGameMessageAttributes/Functions/FGameMessageAttributes.html", ["game", "message", "attributes"], "FGameMessageAttributes");
addToContainers_function("SetMessageReceivedAnimName", "", "Docs/Structs/FGameMessageAttributes/Functions/SetMessageReceivedAnimName.html", ["set", "message", "received", "anim", "name"], "FGameMessageAttributes");
addToContainers_function("Init", "", "Docs/Structs/FGameMessageAttributes/Functions/Init.html", [], "FGameMessageAttributes");
addToContainers_function("OnMessageReceived", "Update text widget with new message and show panel", "Docs/Structs/FGameMessageAttributes/Functions/OnMessageReceived.html", ["on", "message", "received"], "FGameMessageAttributes");
addToContainers_function("ClearText", "Remove text from widget and update attributes to reflect no text", "Docs/Structs/FGameMessageAttributes/Functions/ClearText.html", ["clear", "text"], "FGameMessageAttributes");
addToContainers_variable("", "If not using a widget anim, the amount of time after receiving a message before hiding widget", "Docs/Structs/FGameMessageAttributes/Variables/.html", [], "FGameMessageAttributes");
addToContainers_variable("", "Max number of messages that can be shown before old messages start getting deleted as new ones arrive", "Docs/Structs/FGameMessageAttributes/Variables/_1.html", [], "FGameMessageAttributes");
addToContainers_variable("", "Whether new messages should appear above or below older messages", "Docs/Structs/FGameMessageAttributes/Variables/_2.html", [], "FGameMessageAttributes");
addToContainers_variable("", "List of how long each message is. Used kind of like a linked list", "Docs/Structs/FGameMessageAttributes/Variables/_3.html", [], "FGameMessageAttributes");
addToContainers_variable("TimerHandle_HidePanel", "", "Docs/Structs/FGameMessageAttributes/Variables/TimerHandle_HidePanel.html", ["timer", "handle_", "hide", "panel"], "FGameMessageAttributes");
addToContainers_variable("FrontOfMessageIndices", "Index in MessageIndices that is considered the front of it cause using it like a linked list", "Docs/Structs/FGameMessageAttributes/Variables/FrontOfMessageIndices.html", ["front", "of", "message", "indices"], "FGameMessageAttributes");
addToContainers_variable("NumMessages", "Number of messages currently in chat log", "Docs/Structs/FGameMessageAttributes/Variables/NumMessages.html", ["num", "messages"], "FGameMessageAttributes");
addToContainers_variable("", "If you name a widget animation this then it will be played every time a message is received", "Docs/Structs/FGameMessageAttributes/Variables/_4.html", [], "FGameMessageAttributes");
addToContainers_variable("", "@See UHUDChatOutputWidget::AdditionalMessageAnimStartTime", "Docs/Structs/FGameMessageAttributes/Variables/_5.html", [], "FGameMessageAttributes");
addToContainers_variable("", "Anim to play when message received. Whole panel animations may not suit this widget very well", "Docs/Structs/FGameMessageAttributes/Variables/_6.html", [], "FGameMessageAttributes");
addToContainers_variable("OwningWidget", "Widget these attributes are a part of", "Docs/Structs/FGameMessageAttributes/Variables/OwningWidget.html", ["owning", "widget"], "FGameMessageAttributes");
addToContainers_variable("HidePanelFunctionPtr", "Pointer to function to call that hides a panel widget... more code I will look at later and go \"what the heck does that do?\"", "Docs/Structs/FGameMessageAttributes/Variables/HidePanelFunctionPtr.html", ["hide", "panel", "function", "ptr"], "FGameMessageAttributes");
addToContainers_class("UHUDGameOutputWidget", "Widget that displays messages about the game such as \"not enough resources\" or \"player defeated\"", "Docs/Classes/UHUDGameOutputWidget/UHUDGameOutputWidget.html", ["h", "u", "d", "game", "output", "widget"], "");
addToContainers_function("UHUDGameOutputWidget", "", "Docs/Classes/UHUDGameOutputWidget/Functions/UHUDGameOutputWidget.html", ["h", "u", "d", "game", "output", "widget"], "UHUDGameOutputWidget");
addToContainers_function("SetupWidget", "", "Docs/Classes/UHUDGameOutputWidget/Functions/SetupWidget.html", ["setup", "widget"], "UHUDGameOutputWidget");
addToContainers_function("NativeTick", "Override to allow widget anims", "Docs/Classes/UHUDGameOutputWidget/Functions/NativeTick.html", ["native", "tick"], "UHUDGameOutputWidget");
addToContainers_function("HideWarningPanel", "Set vis to hidden", "Docs/Classes/UHUDGameOutputWidget/Functions/HideWarningPanel.html", ["hide", "warning", "panel"], "UHUDGameOutputWidget");
addToContainers_function("HideNotificationPanel", "", "Docs/Classes/UHUDGameOutputWidget/Functions/HideNotificationPanel.html", ["hide", "notification", "panel"], "UHUDGameOutputWidget");
addToContainers_function("OnGameWarningReceived", "Called when a game message is received like \"Not enough resources\"", "Docs/Classes/UHUDGameOutputWidget/Functions/OnGameWarningReceived.html", ["on", "game", "warning", "received"], "UHUDGameOutputWidget");
addToContainers_function("OnGameNotificationReceived", "Called when a game message is received like \"Resources depleted\"", "Docs/Classes/UHUDGameOutputWidget/Functions/OnGameNotificationReceived.html", ["on", "game", "notification", "received"], "UHUDGameOutputWidget");
addToContainers_function("Delay)", "", "Docs/Classes/UHUDGameOutputWidget/Functions/Delay).html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Attributes for warning type messages", "Docs/Classes/UHUDGameOutputWidget/Variables/.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Attributes for notification type messages", "Docs/Classes/UHUDGameOutputWidget/Variables/_1.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Panel that should have a text widget as a child to display game warnings", "Docs/Classes/UHUDGameOutputWidget/Variables/_2.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Panel that should have a text widget as a child to display game notifications", "Docs/Classes/UHUDGameOutputWidget/Variables/_3.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Text widget to display warnings in. Should be child of Panel_Warnings", "Docs/Classes/UHUDGameOutputWidget/Variables/_4.html", [], "UHUDGameOutputWidget");
addToContainers_variable("", "Text widget to display notifications in. Should be child of Panel_Notifications", "Docs/Classes/UHUDGameOutputWidget/Variables/_5.html", [], "UHUDGameOutputWidget");
addToContainers_class("UHUDPersistentPanel", "Widget that is the panel that appears on the right in C&C The panel may contain two types of widgets: - tabs - buttons to switch between the tabs Example of the different tabs in RA2: - buildings, defense buildings, infantry, vehicles Of course you do not have to use multiple tabs. You can put everything in one tab if you choose. Each building/unit should have a variable that lets you choose the tab they appear in, or you can assign the value \"None\" to exclude them from appearing in any tab at all. There is also a variable something like HUDPersistentTabOrdering that defines the order they appear in the tab (e.g. in C&C generally power plants appear first, while something like a super weapon type building will usually appear last)", "Docs/Classes/UHUDPersistentPanel/UHUDPersistentPanel.html", ["h", "u", "d", "persistent", "panel"], "");
addToContainers_function("UHUDPersistentPanel", "", "Docs/Classes/UHUDPersistentPanel/Functions/UHUDPersistentPanel.html", ["h", "u", "d", "persistent", "panel"], "UHUDPersistentPanel");
addToContainers_function("SetupWidget", "", "Docs/Classes/UHUDPersistentPanel/Functions/SetupWidget.html", ["setup", "widget"], "UHUDPersistentPanel");
addToContainers_function("OnTick", "Tick function called by HUD widget", "Docs/Classes/UHUDPersistentPanel/Functions/OnTick.html", ["on", "tick"], "UHUDPersistentPanel");
addToContainers_function("SwitchToTab", "", "Docs/Classes/UHUDPersistentPanel/Functions/SwitchToTab.html", ["switch", "to", "tab"], "UHUDPersistentPanel");
addToContainers_function("OnUpgradeComplete", "Called when the local player finishes researching an upgrade", "Docs/Classes/UHUDPersistentPanel/Functions/OnUpgradeComplete.html", ["on", "upgrade", "complete"], "UHUDPersistentPanel");
addToContainers_function("OnBuildingConstructed", "Functions called when a building is built/destroyed @param BuildingType - the type of building that was built @param bFirstOfItsType - whether this was the first building of its type for prerequisite purposes", "Docs/Classes/UHUDPersistentPanel/Functions/OnBuildingConstructed.html", ["on", "building", "constructed"], "UHUDPersistentPanel");
addToContainers_function("OnBuildingDestroyed", "", "Docs/Classes/UHUDPersistentPanel/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "UHUDPersistentPanel");
addToContainers_function("OnItemAddedToProductionQueue", "When an item is added to the production queue but not started immediately", "Docs/Classes/UHUDPersistentPanel/Functions/OnItemAddedToProductionQueue.html", ["on", "item", "added", "to", "production", "queue"], "UHUDPersistentPanel");
addToContainers_function("OnItemAddedAndProductionStarted", "When an item is added to a production queue and is started immediately", "Docs/Classes/UHUDPersistentPanel/Functions/OnItemAddedAndProductionStarted.html", ["on", "item", "added", "and", "production", "started"], "UHUDPersistentPanel");
addToContainers_function("OnProductionComplete", "When the front of a production queue completes. Assumed next item starts immediately @param Item - item that was just produced @param Queue - production queue that just produced something @param Producer - actor that the queue is a part of", "Docs/Classes/UHUDPersistentPanel/Functions/OnProductionComplete.html", ["on", "production", "complete"], "UHUDPersistentPanel");
addToContainers_function("OnBuildsInTabProductionStarted", "When a building is added to a production queue and it uses BuildsInTab build method @param Item - item that is being produced @param InQueue - production queue that is producing item @param Producer - actor the queue belongs to", "Docs/Classes/UHUDPersistentPanel/Functions/OnBuildsInTabProductionStarted.html", ["on", "builds", "in", "tab", "production", "started"], "UHUDPersistentPanel");
addToContainers_function("OnBuildsInTabProductionComplete", "", "Docs/Classes/UHUDPersistentPanel/Functions/OnBuildsInTabProductionComplete.html", ["on", "builds", "in", "tab", "production", "complete"], "UHUDPersistentPanel");
addToContainers_function("OnBuildsInTabBuildingPlaced", "", "Docs/Classes/UHUDPersistentPanel/Functions/OnBuildsInTabBuildingPlaced.html", ["on", "builds", "in", "tab", "building", "placed"], "UHUDPersistentPanel");
addToContainers_variable("", "Tab to start on at beginning of match. Do not use \"None\"", "Docs/Classes/UHUDPersistentPanel/Variables/.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Render opacity for buttons that are not active, usually because prereqs are not met or no building can produce it. This is only relevant if HUDOptions::PersistentTabButtonDisplayRule in ProjectSettings.h is set to NoShuffling_FadeUnavailables", "Docs/Classes/UHUDPersistentPanel/Variables/_1.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "In regards to the buttons on each tab, whether to display the names of buttons or not (like in C&C they will say \"Power Plant\" or \"Sniper\" for example).", "Docs/Classes/UHUDPersistentPanel/Variables/_2.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Widget switcher to switch between different tabs like buildings and infantry", "Docs/Classes/UHUDPersistentPanel/Variables/_3.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Holds different panel types. Indices do not corrispond to Switcher_Tabs children", "Docs/Classes/UHUDPersistentPanel/Variables/_4.html", [], "UHUDPersistentPanel");
addToContainers_variable("", "Maps tab type to the tab widget for that type. Using an array AND Tmap for fast iteration and quick lookups", "Docs/Classes/UHUDPersistentPanel/Variables/_5.html", [], "UHUDPersistentPanel");
addToContainers_variable("ActiveTab", "The tab that is active in Switcher_Tabs", "Docs/Classes/UHUDPersistentPanel/Variables/ActiveTab.html", ["active", "tab"], "UHUDPersistentPanel");
addToContainers_class("UHUDPersistentTabSwitchingButton", "Button to switch between persistent tabs", "Docs/Classes/UHUDPersistentTabSwitchingButton/UHUDPersistentTabSwitchingButton.html", ["h", "u", "d", "persistent", "tab", "switching", "button"], "");
addToContainers_function("UHUDPersistentTabSwitchingButton", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/UHUDPersistentTabSwitchingButton.html", ["h", "u", "d", "persistent", "tab", "switching", "button"], "UHUDPersistentTabSwitchingButton");
addToContainers_function("Setup", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/Setup.html", [], "UHUDPersistentTabSwitchingButton");
addToContainers_function("UIBinding_OnLeftMouseButtonPress", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/UIBinding_OnLeftMouseButtonPress.html", ["i", "binding_", "on", "left", "mouse", "button", "press"], "UHUDPersistentTabSwitchingButton");
addToContainers_function("UIBinding_OnLeftMouseButtonReleased", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/UIBinding_OnLeftMouseButtonReleas.html", ["i", "binding_", "on", "left", "mouse", "button", "released"], "UHUDPersistentTabSwitchingButton");
addToContainers_function("UIBinding_OnRightMouseButtonPress", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/UIBinding_OnRightMouseButtonPress.html", ["i", "binding_", "on", "right", "mouse", "button", "press"], "UHUDPersistentTabSwitchingButton");
addToContainers_function("UIBinding_OnRightMouseButtonReleased", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/UIBinding_OnRightMouseButtonRelea.html", ["i", "binding_", "on", "right", "mouse", "button", "released"], "UHUDPersistentTabSwitchingButton");
addToContainers_function("OnClicked", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/OnClicked.html", ["on", "clicked"], "UHUDPersistentTabSwitchingButton");
addToContainers_function("GetTabType", "Get the tab pressing this button should switch to", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/GetTabType.html", ["get", "tab", "type"], "UHUDPersistentTabSwitchingButton");
addToContainers_function("GetPaletteCategory", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UHUDPersistentTabSwitchingButton");
addToContainers_variable("", "", "Docs/Classes/UHUDPersistentTabSwitchingButton/Variables/.html", [], "UHUDPersistentTabSwitchingButton");
addToContainers_variable("", "Reference to persistent tab this is a part of", "Docs/Classes/UHUDPersistentTabSwitchingButton/Variables/_1.html", [], "UHUDPersistentTabSwitchingButton");
addToContainers_variable("", "Tab this button opens", "Docs/Classes/UHUDPersistentTabSwitchingButton/Variables/_2.html", [], "UHUDPersistentTabSwitchingButton");
addToContainers_struct("FButtonClickabilityInfo", "Struct that represents a button and stores whether it can be made activated or not", "Docs/Structs/FButtonClickabilityInfo/FButtonClickabilityInfo.html", ["button", "clickability", "info"], "");
addToContainers_function("FButtonClickabilityInfo", "Constructors", "Docs/Structs/FButtonClickabilityInfo/Functions/FButtonClickabilityInfo.html", ["button", "clickability", "info"], "FButtonClickabilityInfo");
addToContainers_function("FButtonClickabilityInfo", "", "Docs/Structs/FButtonClickabilityInfo/Functions/FButtonClickabilityInfo_1.html", ["button", "clickability", "info"], "FButtonClickabilityInfo");
addToContainers_function("FButtonClickabilityInfo", "", "Docs/Structs/FButtonClickabilityInfo/Functions/FButtonClickabilityInfo_2.html", ["button", "clickability", "info"], "FButtonClickabilityInfo");
addToContainers_function("GetButtonPtr", "Trivial Getters and setters", "Docs/Structs/FButtonClickabilityInfo/Functions/GetButtonPtr.html", ["get", "button", "ptr"], "FButtonClickabilityInfo");
addToContainers_function("ArePrerequisitesMet", "", "Docs/Structs/FButtonClickabilityInfo/Functions/ArePrerequisitesMet.html", ["are", "prerequisites", "met"], "FButtonClickabilityInfo");
addToContainers_function("HasQueueSupport", "", "Docs/Structs/FButtonClickabilityInfo/Functions/HasQueueSupport.html", ["has", "queue", "support"], "FButtonClickabilityInfo");
addToContainers_function("SetArePrerequisitesMet", "", "Docs/Structs/FButtonClickabilityInfo/Functions/SetArePrerequisitesMet.html", ["set", "are", "prerequisites", "met"], "FButtonClickabilityInfo");
addToContainers_function("SetHasQueueSupport", "", "Docs/Structs/FButtonClickabilityInfo/Functions/SetHasQueueSupport.html", ["set", "has", "queue", "support"], "FButtonClickabilityInfo");
addToContainers_function("CanBeActive", "", "Docs/Structs/FButtonClickabilityInfo/Functions/CanBeActive.html", ["can", "be", "active"], "FButtonClickabilityInfo");
addToContainers_variable("ButtonPtr", "", "Docs/Structs/FButtonClickabilityInfo/Variables/ButtonPtr.html", ["button", "ptr"], "FButtonClickabilityInfo");
addToContainers_variable("bArePrerequisitesMet", "", "Docs/Structs/FButtonClickabilityInfo/Variables/bArePrerequisitesMet.html", ["are", "prerequisites", "met"], "FButtonClickabilityInfo");
addToContainers_variable("bHasQueueSupport", "", "Docs/Structs/FButtonClickabilityInfo/Variables/bHasQueueSupport.html", ["has", "queue", "support"], "FButtonClickabilityInfo");
addToContainers_struct("FActiveButtonStateData", "Contains state data that an active button needs", "Docs/Structs/FActiveButtonStateData/FActiveButtonStateData.html", ["active", "button", "state", "data"], "");
addToContainers_function("FActiveButtonStateData", "", "Docs/Structs/FActiveButtonStateData/Functions/FActiveButtonStateData.html", ["active", "button", "state", "data"], "FActiveButtonStateData");
addToContainers_function("GetQueue", "Trivial getters and setters ", "Docs/Structs/FActiveButtonStateData/Functions/GetQueue.html", ["get", "queue"], "FActiveButtonStateData");
addToContainers_function("GetQueueOwner", "", "Docs/Structs/FActiveButtonStateData/Functions/GetQueueOwner.html", ["get", "queue", "owner"], "FActiveButtonStateData");
addToContainers_function("GetNumItemsInQueue", "", "Docs/Structs/FActiveButtonStateData/Functions/GetNumItemsInQueue.html", ["get", "num", "items", "in", "queue"], "FActiveButtonStateData");
addToContainers_function("IsAnotherButtonsPersistentQueueProducing", "", "Docs/Structs/FActiveButtonStateData/Functions/IsAnotherButtonsPersistentQueuePr.html", ["is", "another", "buttons", "persistent", "queue", "producing"], "FActiveButtonStateData");
addToContainers_function("GetCannotFunctionReason", "", "Docs/Structs/FActiveButtonStateData/Functions/GetCannotFunctionReason.html", ["get", "cannot", "function", "reason"], "FActiveButtonStateData");
addToContainers_function("SetQueue", "", "Docs/Structs/FActiveButtonStateData/Functions/SetQueue.html", ["set", "queue"], "FActiveButtonStateData");
addToContainers_function("SetQueueOwner", "", "Docs/Structs/FActiveButtonStateData/Functions/SetQueueOwner.html", ["set", "queue", "owner"], "FActiveButtonStateData");
addToContainers_function("SetNumItemsInQueue", "", "Docs/Structs/FActiveButtonStateData/Functions/SetNumItemsInQueue.html", ["set", "num", "items", "in", "queue"], "FActiveButtonStateData");
addToContainers_function("SetIsAnotherButtonsPersistentQueueProducing", "", "Docs/Structs/FActiveButtonStateData/Functions/SetIsAnotherButtonsPersistentQueu.html", ["set", "is", "another", "buttons", "persistent", "queue", "producing"], "FActiveButtonStateData");
addToContainers_function("SetCannotFunctionReason", "", "Docs/Structs/FActiveButtonStateData/Functions/SetCannotFunctionReason.html", ["set", "cannot", "function", "reason"], "FActiveButtonStateData");
addToContainers_function("ToString", "", "Docs/Structs/FActiveButtonStateData/Functions/ToString.html", ["to", "string"], "FActiveButtonStateData");
addToContainers_variable("Queue", "Queue that this button should monitor for progress bar purposes", "Docs/Structs/FActiveButtonStateData/Variables/Queue.html", [], "FActiveButtonStateData");
addToContainers_variable("", "Actor that owns the queue this button is linked to", "Docs/Structs/FActiveButtonStateData/Variables/.html", [], "FActiveButtonStateData");
addToContainers_variable("NumItemsInQueue", "The number of items in the queue this button is linked to. Here to avoid string to int conversion by reading value from what is in text block", "Docs/Structs/FActiveButtonStateData/Variables/NumItemsInQueue.html", ["num", "items", "in", "queue"], "FActiveButtonStateData");
addToContainers_variable("bIsAnotherButtonsPersistentQueueProducing", "Whether a persistent queue is producing something. Only relevant if button is for BuildBuilding", "Docs/Structs/FActiveButtonStateData/Variables/bIsAnotherButtonsPersistentQueueP.html", ["is", "another", "buttons", "persistent", "queue", "producing"], "FActiveButtonStateData");
addToContainers_variable("CannotFunctionReason", "The reason the button cannot carry out what is requested. Button is never made hit test invis. Instead we allow user to click it and will show a message if the action cannot be carried out. Only some reasons will ever be assigned to this - those that are event driven. Currently the only valid reason this variable can get is that another building is producing", "Docs/Structs/FActiveButtonStateData/Variables/CannotFunctionReason.html", ["cannot", "function", "reason"], "FActiveButtonStateData");
addToContainers_class("UHUDPersistentTab", "A single tab for a single category. Add as many UHUDPersistentTabButton to it as you need", "Docs/Classes/UHUDPersistentTab/UHUDPersistentTab.html", ["h", "u", "d", "persistent", "tab"], "");
addToContainers_function("SetupWidget", "", "Docs/Classes/UHUDPersistentTab/Functions/SetupWidget.html", ["setup", "widget"], "UHUDPersistentTab");
addToContainers_function("OnTick", "", "Docs/Classes/UHUDPersistentTab/Functions/OnTick.html", ["on", "tick"], "UHUDPersistentTab");
addToContainers_function("GetNumActiveButtons", "", "Docs/Classes/UHUDPersistentTab/Functions/GetNumActiveButtons.html", ["get", "num", "active", "buttons"], "UHUDPersistentTab");
addToContainers_function("GetType", "", "Docs/Classes/UHUDPersistentTab/Functions/GetType.html", ["get", "type"], "UHUDPersistentTab");
addToContainers_function("OnBuildingConstructed", "Functions called when a building is built/destroyed @param BuildingType - the type of building that was built @param bFirstOfItsType - whether this was the first building of its type", "Docs/Classes/UHUDPersistentTab/Functions/OnBuildingConstructed.html", ["on", "building", "constructed"], "UHUDPersistentTab");
addToContainers_function("OnBuildingDestroyed", "", "Docs/Classes/UHUDPersistentTab/Functions/OnBuildingDestroyed.html", ["on", "building", "destroyed"], "UHUDPersistentTab");
addToContainers_function("SetUnclickableButtonOpacity", "", "Docs/Classes/UHUDPersistentTab/Functions/SetUnclickableButtonOpacity.html", ["set", "unclickable", "button", "opacity"], "UHUDPersistentTab");
addToContainers_function("SetShowTextLabelsOnButtons", "", "Docs/Classes/UHUDPersistentTab/Functions/SetShowTextLabelsOnButtons.html", ["set", "show", "text", "labels", "on", "buttons"], "UHUDPersistentTab");
addToContainers_function("OnItemAddedToProductionQueue", "When an item is added to the production queue but not started immediately", "Docs/Classes/UHUDPersistentTab/Functions/OnItemAddedToProductionQueue.html", ["on", "item", "added", "to", "production", "queue"], "UHUDPersistentTab");
addToContainers_function("OnItemAddedAndProductionStarted", "When an item is added to a production queue and is started immediately", "Docs/Classes/UHUDPersistentTab/Functions/OnItemAddedAndProductionStarted.html", ["on", "item", "added", "and", "production", "started"], "UHUDPersistentTab");
addToContainers_function("OnProductionComplete", "When the front of a production queue completes. Assumed next item starts immediately @param Item - item that was just produced @param Queue - production queue that just produced something @param NumRemoved - number of items removed from the queue @param Producer - actor that the queue is a part of", "Docs/Classes/UHUDPersistentTab/Functions/OnProductionComplete.html", ["on", "production", "complete"], "UHUDPersistentTab");
addToContainers_function("OnBuildsInTabProductionStarted", "When a building is added to a production queue and it uses BuildsInTab build method @param Item - item that is being produced @param InQueue - production queue that is producing item @param Producer - actor the queue belongs to", "Docs/Classes/UHUDPersistentTab/Functions/OnBuildsInTabProductionStarted.html", ["on", "builds", "in", "tab", "production", "started"], "UHUDPersistentTab");
addToContainers_function("OnBuildsInTabProductionComplete", "Call when a building that is using BuildsInTab build method becomes ready to place", "Docs/Classes/UHUDPersistentTab/Functions/OnBuildsInTabProductionComplete.html", ["on", "builds", "in", "tab", "production", "complete"], "UHUDPersistentTab");
addToContainers_function("OnBuildsInTabBuildingPlaced", "", "Docs/Classes/UHUDPersistentTab/Functions/OnBuildsInTabBuildingPlaced.html", ["on", "builds", "in", "tab", "building", "placed"], "UHUDPersistentTab");
addToContainers_variable("", "Type this is for. Do not use \"None\"", "Docs/Classes/UHUDPersistentTab/Variables/.html", [], "UHUDPersistentTab");
addToContainers_variable("", "Array of buttons. These buttons are never added/removed from any panel. To emulate shifting a button we basically just update all the buttons that would be affected", "Docs/Classes/UHUDPersistentTab/Variables/_1.html", [], "UHUDPersistentTab");
addToContainers_variable("ButtonIndices", "This array closly mirrors ButtonWidgets. It update is updated right before updating the button widgets. It exists for performance only", "Docs/Classes/UHUDPersistentTab/Variables/ButtonIndices.html", ["button", "indices"], "UHUDPersistentTab");
addToContainers_variable("ButtonStates", "Maps button type to its state. This container contains all the state info for a button", "Docs/Classes/UHUDPersistentTab/Variables/ButtonStates.html", ["button", "states"], "UHUDPersistentTab");
addToContainers_variable("UnactiveButtons", "Array of buttons that are inactive. Depending on the method used these buttons will either be completely hidden (and therefore unclickable) or they will have reduced opacity and will still be clickable but will show a warning when the player tries to click them", "Docs/Classes/UHUDPersistentTab/Variables/UnactiveButtons.html", ["unactive", "buttons"], "UHUDPersistentTab");
addToContainers_variable("", "Maps button type to the persistent tab button", "Docs/Classes/UHUDPersistentTab/Variables/_2.html", [], "UHUDPersistentTab");
addToContainers_variable("UnclickableButtonOpacity", "", "Docs/Classes/UHUDPersistentTab/Variables/UnclickableButtonOpacity.html", ["unclickable", "button", "opacity"], "UHUDPersistentTab");
addToContainers_variable("bShowTextLabelsOnButtons", "", "Docs/Classes/UHUDPersistentTab/Variables/bShowTextLabelsOnButtons.html", ["show", "text", "labels", "on", "buttons"], "UHUDPersistentTab");
addToContainers_variable("Widget2)", "For sorting UHUDPersistentPanel::Tabs", "Docs/Classes/UHUDPersistentTab/Variables/Widget2).html", [], "UHUDPersistentTab");
addToContainers_class("UHUDPersistentTabButton", "Button on a persistent tab. Very similar to UContextActionButton and may eventually become a child/parent of it or share the same parent.", "Docs/Classes/UHUDPersistentTabButton/UHUDPersistentTabButton.html", ["h", "u", "d", "persistent", "tab", "button"], "");
addToContainers_function("UHUDPersistentTabButton", "", "Docs/Classes/UHUDPersistentTabButton/Functions/UHUDPersistentTabButton.html", ["h", "u", "d", "persistent", "tab", "button"], "UHUDPersistentTabButton");
addToContainers_function("SetupButton", "", "Docs/Classes/UHUDPersistentTabButton/Functions/SetupButton.html", ["setup", "button"], "UHUDPersistentTabButton");
addToContainers_function("SetPermanentButtonType", "This is for the 2 NoShuffling methods only. Link a button type with this widget", "Docs/Classes/UHUDPersistentTabButton/Functions/SetPermanentButtonType.html", ["set", "permanent", "button", "type"], "UHUDPersistentTabButton");
addToContainers_function("SetPeramentStateInfo", "Set pointer to state info", "Docs/Classes/UHUDPersistentTabButton/Functions/SetPeramentStateInfo.html", ["set", "perament", "state", "info"], "UHUDPersistentTabButton");
addToContainers_function("MakeActive", "This version is intended to be called only for the NoShuffling methods", "Docs/Classes/UHUDPersistentTabButton/Functions/MakeActive.html", ["make", "active"], "UHUDPersistentTabButton");
addToContainers_function("MakeActive", "This version is intended to be called for the non-NoShuffling methods", "Docs/Classes/UHUDPersistentTabButton/Functions/MakeActive_1.html", ["make", "active"], "UHUDPersistentTabButton");
addToContainers_function("MakeUnactive", "", "Docs/Classes/UHUDPersistentTabButton/Functions/MakeUnactive.html", ["make", "unactive"], "UHUDPersistentTabButton");
addToContainers_function("OnCreationFromPalette", "", "Docs/Classes/UHUDPersistentTabButton/Functions/OnCreationFromPalette.html", ["on", "creation", "from", "palette"], "UHUDPersistentTabButton");
addToContainers_function("OnTick", "", "Docs/Classes/UHUDPersistentTabButton/Functions/OnTick.html", ["on", "tick"], "UHUDPersistentTabButton");
addToContainers_function("OnAnotherPersistentQueueProductionStarted", "", "Docs/Classes/UHUDPersistentTabButton/Functions/OnAnotherPersistentQueueProductio.html", ["on", "another", "persistent", "queue", "production", "started"], "UHUDPersistentTabButton");
addToContainers_function("OnAnotherPersistentQueueProductionFinished", "", "Docs/Classes/UHUDPersistentTabButton/Functions/OnAnotherPersistentQueueProductio_1.html", ["on", "another", "persistent", "queue", "production", "finished"], "UHUDPersistentTabButton");
addToContainers_function("GetQuantityText", "Get the text that should be displayed on ExtraText that is ment to show how many of the item are queued for production.", "Docs/Classes/UHUDPersistentTabButton/Functions/GetQuantityText.html", ["get", "quantity", "text"], "UHUDPersistentTabButton");
addToContainers_function("UIBinding_OnLMBPress", "", "Docs/Classes/UHUDPersistentTabButton/Functions/UIBinding_OnLMBPress.html", ["i", "binding_", "on", "l", "m", "b", "press"], "UHUDPersistentTabButton");
addToContainers_function("UIBinding_OnLMBReleased", "", "Docs/Classes/UHUDPersistentTabButton/Functions/UIBinding_OnLMBReleased.html", ["i", "binding_", "on", "l", "m", "b", "released"], "UHUDPersistentTabButton");
addToContainers_function("UIBinding_OnRMBPress", "", "Docs/Classes/UHUDPersistentTabButton/Functions/UIBinding_OnRMBPress.html", ["i", "binding_", "on", "r", "m", "b", "press"], "UHUDPersistentTabButton");
addToContainers_function("UIBinding_OnRMBReleased", "", "Docs/Classes/UHUDPersistentTabButton/Functions/UIBinding_OnRMBReleased.html", ["i", "binding_", "on", "r", "m", "b", "released"], "UHUDPersistentTabButton");
addToContainers_function("GetButtonType", "Get the context button this widget represents", "Docs/Classes/UHUDPersistentTabButton/Functions/GetButtonType.html", ["get", "button", "type"], "UHUDPersistentTabButton");
addToContainers_function("GetStateInfo", "", "Docs/Classes/UHUDPersistentTabButton/Functions/GetStateInfo.html", ["get", "state", "info"], "UHUDPersistentTabButton");
addToContainers_function("IsProducingSomething", "Check if button", "Docs/Classes/UHUDPersistentTabButton/Functions/IsProducingSomething.html", ["is", "producing", "something"], "UHUDPersistentTabButton");
addToContainers_function("HasProductionCompleted", "Only for build method BuildsInTab. Check if production has completed", "Docs/Classes/UHUDPersistentTabButton/Functions/HasProductionCompleted.html", ["has", "production", "completed"], "UHUDPersistentTabButton");
addToContainers_function("OnItemAddedToProductionQueue", "When an item is added to the production queue but not started immediately. Only called by owning tab on button it affects", "Docs/Classes/UHUDPersistentTabButton/Functions/OnItemAddedToProductionQueue.html", ["on", "item", "added", "to", "production", "queue"], "UHUDPersistentTabButton");
addToContainers_function("OnItemAddedAndProductionStarted", "When an item is added to a production queue and is started immediately. Only called by owning tab on button it affects", "Docs/Classes/UHUDPersistentTabButton/Functions/OnItemAddedAndProductionStarted.html", ["on", "item", "added", "and", "production", "started"], "UHUDPersistentTabButton");
addToContainers_function("OnProductionComplete", "When the front of a production queue completes. Assumed next item starts immediately. Only called by owning tab on button it affects @param Item - the item that was just produced @param Queue - production queue that just produced something @param NumRemoved - number of items removed from the queue @param Producer - actor that the queue is a part of", "Docs/Classes/UHUDPersistentTabButton/Functions/OnProductionComplete.html", ["on", "production", "complete"], "UHUDPersistentTabButton");
addToContainers_function("OnBuildsInTabProductionStarted", "When a building is added to a production queue and it uses BuildsInTab build method @param Item - item that is being produced @param InQueue - production queue that is producing item @param Producer - actor the queue belongs to", "Docs/Classes/UHUDPersistentTabButton/Functions/OnBuildsInTabProductionStarted.html", ["on", "builds", "in", "tab", "production", "started"], "UHUDPersistentTabButton");
addToContainers_function("OnBuildsInTabProductionComplete", "Call when a building that is using BuildsInTab build method becomes ready to place. Label the button as \'ready to place\'", "Docs/Classes/UHUDPersistentTabButton/Functions/OnBuildsInTabProductionComplete.html", ["on", "builds", "in", "tab", "production", "complete"], "UHUDPersistentTabButton");
addToContainers_function("OnBuildsInTabBuildingPlaced", "", "Docs/Classes/UHUDPersistentTabButton/Functions/OnBuildsInTabBuildingPlaced.html", ["on", "builds", "in", "tab", "building", "placed"], "UHUDPersistentTabButton");
addToContainers_function("GetPaletteCategory", "", "Docs/Classes/UHUDPersistentTabButton/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UHUDPersistentTabButton");
addToContainers_variable("", "", "Docs/Classes/UHUDPersistentTabButton/Variables/.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "The text that shows on the button describing what the button is for", "Docs/Classes/UHUDPersistentTabButton/Variables/_1.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "More text. This text will show something like \"Ready\" when a building finishes production using the BuildsInTab build method letting the user know it is ready to place, or could show the number of units queued for other Train button types", "Docs/Classes/UHUDPersistentTabButton/Variables/_2.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to tab that owns this button", "Docs/Classes/UHUDPersistentTabButton/Variables/_3.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to game instance", "Docs/Classes/UHUDPersistentTabButton/Variables/_4.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to player controller. Doubling up on PC because SMyButton has one too", "Docs/Classes/UHUDPersistentTabButton/Variables/_5.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Reference to player state", "Docs/Classes/UHUDPersistentTabButton/Variables/_6.html", [], "UHUDPersistentTabButton");
addToContainers_variable("", "Faction info of player state", "Docs/Classes/UHUDPersistentTabButton/Variables/_7.html", [], "UHUDPersistentTabButton");
addToContainers_variable("Button", "Button type this button represents", "Docs/Classes/UHUDPersistentTabButton/Variables/Button.html", [], "UHUDPersistentTabButton");
addToContainers_variable("StateInfo", "Pointer to info struct that holds all the state for this button", "Docs/Classes/UHUDPersistentTabButton/Variables/StateInfo.html", ["state", "info"], "UHUDPersistentTabButton");
addToContainers_variable("OriginalAlpha", "", "Docs/Classes/UHUDPersistentTabButton/Variables/OriginalAlpha.html", ["original", "alpha"], "UHUDPersistentTabButton");
addToContainers_variable("UnclickableAlpha", "", "Docs/Classes/UHUDPersistentTabButton/Variables/UnclickableAlpha.html", ["unclickable", "alpha"], "UHUDPersistentTabButton");
addToContainers_class("UMinimap", "Widget for the minimap", "Docs/Classes/UMinimap/UMinimap.html", [], "");
addToContainers_function("UMinimap", "", "Docs/Classes/UMinimap/Functions/UMinimap.html", [], "UMinimap");
addToContainers_function("SetupWidget", "", "Docs/Classes/UMinimap/Functions/SetupWidget.html", ["setup", "widget"], "UMinimap");
addToContainers_function("Setup", "", "Docs/Classes/UMinimap/Functions/Setup.html", [], "UMinimap");
addToContainers_function("NativePaint", "", "Docs/Classes/UMinimap/Functions/NativePaint.html", ["native", "paint"], "UMinimap");
addToContainers_function("DrawSelectables", "Draw selectables on minimap", "Docs/Classes/UMinimap/Functions/DrawSelectables.html", ["draw", "selectables"], "UMinimap");
addToContainers_function("DrawFogOfWar", "Draw fog of war on minimap", "Docs/Classes/UMinimap/Functions/DrawFogOfWar.html", ["draw", "fog", "of", "war"], "UMinimap");
addToContainers_function("WorldCoordsToMinimapCoords", "Returns the pixel on minimap some world coordinates corrispond to @param WorldLocation - some world coords to be converted to minimap pixel coords @param Geometry - Image_Minimap geometry @return - minimap pixel coords", "Docs/Classes/UMinimap/Functions/WorldCoordsToMinimapCoords.html", ["world", "coords", "to", "minimap", "coords"], "UMinimap");
addToContainers_function("MinimapCoordsToWorldCoords", "", "Docs/Classes/UMinimap/Functions/MinimapCoordsToWorldCoords.html", ["minimap", "coords", "to", "world", "coords"], "UMinimap");
addToContainers_variable("", "Color to draw selectables", "Docs/Classes/UMinimap/Variables/.html", [], "UMinimap");
addToContainers_variable("", "Image of minimap. Set image is landscape and extra parts like selectables and fog of war are drawn overtop", "Docs/Classes/UMinimap/Variables/_1.html", [], "UMinimap");
addToContainers_variable("MapCenter", "2D coords for center of map, but flipped so X is Y and Y is X", "Docs/Classes/UMinimap/Variables/MapCenter.html", ["map", "center"], "UMinimap");
addToContainers_variable("MapDimensionsInverse", "1.f / MapDimensions. MapDimesnions = length and width of map in unreal units", "Docs/Classes/UMinimap/Variables/MapDimensionsInverse.html", ["map", "dimensions", "inverse"], "UMinimap");
addToContainers_variable("ImageSizeInPixels", "Dimensions of the minimap image in pixels", "Docs/Classes/UMinimap/Variables/ImageSizeInPixels.html", ["image", "size", "in", "pixels"], "UMinimap");
addToContainers_variable("ViewportSizeInPixels", "This needs to be updated whenever resolution changes", "Docs/Classes/UMinimap/Variables/ViewportSizeInPixels.html", ["viewport", "size", "in", "pixels"], "UMinimap");
addToContainers_class("UTooltipWidget_InventoryItem", "Tooltip widget for an inventory item. Some notes: - Mess around with each individual widget\'s anchors if you can\'t see them - You will likely want to enable text wrapping for the text blocks", "Docs/Classes/UTooltipWidget_InventoryItem/UTooltipWidget_InventoryItem.html", ["tooltip", "widget_", "inventory", "item"], "");
addToContainers_function("UTooltipWidget_InventoryItem", "", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/UTooltipWidget_InventoryItem.html", ["tooltip", "widget_", "inventory", "item"], "UTooltipWidget_InventoryItem");
addToContainers_function("InitialSetup", "", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/InitialSetup.html", ["initial", "setup"], "UTooltipWidget_InventoryItem");
addToContainers_function("SetupForInner", "Setup the widgets to show info about an item. Can be in an inventory slot, shop slot or an item in the world or more. @param StackQuantityOrNumCharges - pass in -1 to say \'do not show\'", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/SetupForInner.html", ["setup", "for", "inner"], "UTooltipWidget_InventoryItem");
addToContainers_function("SetupFor", "Version for inventory item actors", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/SetupFor.html", ["setup", "for"], "UTooltipWidget_InventoryItem");
addToContainers_function("SetupFor", "Version for inventory slots", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/SetupFor_1.html", ["setup", "for"], "UTooltipWidget_InventoryItem");
addToContainers_function("SetupFor", "Version for shop slots", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/SetupFor_2.html", ["setup", "for"], "UTooltipWidget_InventoryItem");
addToContainers_function("IsSetupFor", "Return whether this widget contains the info for a particular inventory item", "Docs/Classes/UTooltipWidget_InventoryItem/Functions/IsSetupFor.html", ["is", "setup", "for"], "UTooltipWidget_InventoryItem");
addToContainers_variable("DisplayedInventoryItem", "The inventory item actor this widget is displaying info for. If this widget is not displaying info for an inventory item actor but instead something else like say an inventory slot then this will be null", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/DisplayedInventoryItem.html", ["displayed", "inventory", "item"], "UTooltipWidget_InventoryItem");
addToContainers_variable("DisplayedItemInfo", "Pointer to the inventory iteminfo this widget is displaying", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/DisplayedItemInfo.html", ["displayed", "item", "info"], "UTooltipWidget_InventoryItem");
addToContainers_variable("DisplayedNumInStackOrNumCharges", "Number in stack or num charges this widget is displaying. -1 means blank text", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/DisplayedNumInStackOrNumCharges.html", ["displayed", "num", "in", "stack", "or", "num", "charges"], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text that shows the name of the item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text to show the description of the item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_1.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text to show the stat changes from the item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_2.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Flavor text", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_3.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Icon of item", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_4.html", [], "UTooltipWidget_InventoryItem");
addToContainers_variable("", "Text to show either the number in the stack or number of charges", "Docs/Classes/UTooltipWidget_InventoryItem/Variables/_5.html", [], "UTooltipWidget_InventoryItem");
addToContainers_class("UTooltipWidget_Ability", "Tooltip widget for a selectable\'s action bar", "Docs/Classes/UTooltipWidget_Ability/UTooltipWidget_Ability.html", ["tooltip", "widget_", "ability"], "");
addToContainers_function("SetupFor", "Sets up the appearance of the widget for a button type", "Docs/Classes/UTooltipWidget_Ability/Functions/SetupFor.html", ["setup", "for"], "UTooltipWidget_Ability");
addToContainers_variable("DisplayedButtonType", "The button that this widget is displaying info for", "Docs/Classes/UTooltipWidget_Ability/Variables/DisplayedButtonType.html", ["displayed", "button", "type"], "UTooltipWidget_Ability");
addToContainers_variable("", "Text to show the name of the ability", "Docs/Classes/UTooltipWidget_Ability/Variables/.html", [], "UTooltipWidget_Ability");
addToContainers_variable("", "Text to show the description of the ability", "Docs/Classes/UTooltipWidget_Ability/Variables/_1.html", [], "UTooltipWidget_Ability");
addToContainers_class("UTooltipWidget_Production", "Tooltip widget for a buildings/units/upgrades. Has 5 different text fields for: - Name - Description - Cost (TODO) - Build time - Prerequisites", "Docs/Classes/UTooltipWidget_Production/UTooltipWidget_Production.html", ["tooltip", "widget_", "production"], "");
addToContainers_function("GetProductionTimeText", "Convert production time as a float to text", "Docs/Classes/UTooltipWidget_Production/Functions/GetProductionTimeText.html", ["get", "production", "time", "text"], "UTooltipWidget_Production");
addToContainers_function("SetupFor", "", "Docs/Classes/UTooltipWidget_Production/Functions/SetupFor.html", ["setup", "for"], "UTooltipWidget_Production");
addToContainers_variable("DisplayedInfo", "Info struct for what this widget is displaying info for", "Docs/Classes/UTooltipWidget_Production/Variables/DisplayedInfo.html", ["displayed", "info"], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the name of the thing", "Docs/Classes/UTooltipWidget_Production/Variables/.html", [], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the description of the thing", "Docs/Classes/UTooltipWidget_Production/Variables/_1.html", [], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the build time for the thing", "Docs/Classes/UTooltipWidget_Production/Variables/_2.html", [], "UTooltipWidget_Production");
addToContainers_variable("", "Text to show the prerequisites for the thing. Just shows all prerequisites and does not differentiate between those already obtained or not", "Docs/Classes/UTooltipWidget_Production/Variables/_3.html", [], "UTooltipWidget_Production");
addToContainers_class("UTooltipWidget_GlobalSkillsPanelButton", "Tooltip for a button on the global skills panel", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/UTooltipWidget_GlobalSkillsPanelB.html", ["tooltip", "widget_", "global", "skills", "panel", "button"], "");
addToContainers_function("SetupFor", "", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/Functions/SetupFor.html", ["setup", "for"], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_function("OnNewRankAquired", "Called when a new rank of an ability is aquired and this tooltip is showing and the info it is showing is for that ability", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/Functions/OnNewRankAquired.html", ["on", "new", "rank", "aquired"], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_function("GetDisplayedInfo", "", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/Functions/GetDisplayedInfo.html", ["get", "displayed", "info"], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_variable("DisplayedAbilityState", "--------------------------------------------------", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/Variables/DisplayedAbilityState.html", ["displayed", "ability", "state"], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_variable("DisplayedAbilityInfoStruct", "", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/Variables/DisplayedAbilityInfoStruct.html", ["displayed", "ability", "info", "struct"], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_variable("", "Text to show the name of the ability", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/Variables/.html", [], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_variable("", "Text to show the description of the ability", "Docs/Classes/UTooltipWidget_GlobalSkillsPanelB/Variables/_1.html", [], "UTooltipWidget_GlobalSkillsPanelButton");
addToContainers_class("UTooltipWidget_CommanderSkillTreeNode", "Tooltip widget for a node in the commander\'s skill tree", "Docs/Classes/UTooltipWidget_CommanderSkillTree/UTooltipWidget_CommanderSkillTree.html", ["tooltip", "widget_", "commander", "skill", "tree", "node"], "");
addToContainers_function("UTooltipWidget_CommanderSkillTreeNode", "", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Functions/UTooltipWidget_CommanderSkillTree.html", ["tooltip", "widget_", "commander", "skill", "tree", "node"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_function("InitialSetup", "@param PlayerState - player state of the local player", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Functions/InitialSetup.html", ["initial", "setup"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_function("SetupFor", "", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Functions/SetupFor.html", ["setup", "for"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_function("OnNewRankAquired", "Called when the tooltip widget is showing", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Functions/OnNewRankAquired.html", ["on", "new", "rank", "aquired"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_function("GetDisplayedNodeInfo", "Get the node this tooltip is displaying info for", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Functions/GetDisplayedNodeInfo.html", ["get", "displayed", "node", "info"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_function("GetMissingRequirementsText", "Get the text that should go in the missing requirements text block", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Functions/GetMissingRequirementsText.html", ["get", "missing", "requirements", "text"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("DisplayedNodeInfo", "--------------------------------------------------", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/DisplayedNodeInfo.html", ["displayed", "node", "info"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Panel widget to put all the text and image widget\'s for the current aquried rank on. If you use any of the Aquired widgets then they will have to be children of this", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Name of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_1.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Image for ability", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_2.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Text to show the description", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_3.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Panel widget to put all the text and image widget\'s for the next rank on. If you use any of the Next widgets then they will have to be children of this", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_4.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Cost of next rank of ability", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_5.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "This is the color to color the next rank skill point cost text when the player does not have enough skill points to purchase the skill.", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_6.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("CostTextOriginalColor", "", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/CostTextOriginalColor.html", ["cost", "text", "original", "color"], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Text that shows missing requirements of next rank of ability", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_7.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Name of the next rank of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_8.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Image for next rank of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_9.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_variable("", "Text to show the description for the next rank of the ability", "Docs/Classes/UTooltipWidget_CommanderSkillTree/Variables/_10.html", [], "UTooltipWidget_CommanderSkillTreeNode");
addToContainers_class("UIUtilities", "Utility functions for user interface", "Docs/Classes/UIUtilities/UIUtilities.html", ["i", "utilities"], "");
addToContainers_function("FindWidgetAnim", "Finds a widget animation on a widget. Relatively slow. You need to make sure that WidgetAnimName includes the _INST part @return - widget anim or null if no widget anim with the specified name could be found", "Docs/Classes/UIUtilities/Functions/FindWidgetAnim.html", ["find", "widget", "anim"], "UIUtilities");
addToContainers_function("CreateChildEditorUtilityWidget", "Create an editor utility widget that will be a child of another editor utility widget @param World - probably want to use GEditor->GetEditorWorldContext().World()", "Docs/Classes/UIUtilities/Functions/CreateChildEditorUtilityWidget.html", ["create", "child", "editor", "utility", "widget"], "UIUtilities");
addToContainers_class("UEditorPlayStartingResourcesWidget", "Widget for adjusting a single starting resource", "Docs/Classes/UEditorPlayStartingResourcesWidge/UEditorPlayStartingResourcesWidge.html", ["editor", "play", "starting", "resources", "widget"], "");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UEditorPlayStartingResourcesWidge/Functions/RebuildWidget.html", ["rebuild", "widget"], "UEditorPlayStartingResourcesWidget");
addToContainers_variable("", "Text that shows what starting resources will be used", "Docs/Classes/UEditorPlayStartingResourcesWidge/Variables/.html", [], "UEditorPlayStartingResourcesWidget");
addToContainers_class("UPIEHumanPlayerInfoProxy", "This is a UObject that just contains FPIEPlayerInfo. It exists so AddDynamic can point to it.", "Docs/Classes/UPIEHumanPlayerInfoProxy/UPIEHumanPlayerInfoProxy.html", ["p", "i", "e", "human", "player", "info", "proxy"], "");
addToContainers_function("UIBinding_OnTeamComboBoxSelectionChanged", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Functions/UIBinding_OnTeamComboBoxSelection.html", ["i", "binding_", "on", "team", "combo", "box", "selection", "changed"], "UPIEHumanPlayerInfoProxy");
addToContainers_function("UIBinding_OnFactionComboBoxSelectionChanged", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Functions/UIBinding_OnFactionComboBoxSelect.html", ["i", "binding_", "on", "faction", "combo", "box", "selection", "changed"], "UPIEHumanPlayerInfoProxy");
addToContainers_function("UIBinding_OnStartingSpotTextChanged", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Functions/UIBinding_OnStartingSpotTextChang.html", ["i", "binding_", "on", "starting", "spot", "text", "changed"], "UPIEHumanPlayerInfoProxy");
addToContainers_function("UIBinding_OnStartingSpotTextCommitted", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Functions/UIBinding_OnStartingSpotTextCommi.html", ["i", "binding_", "on", "starting", "spot", "text", "committed"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("EnumStringObject", "--------------------------------------------------------------", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/EnumStringObject.html", ["enum", "string", "object"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("PlaySettingsWidget", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/PlaySettingsWidget.html", ["play", "settings", "widget"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("PlayerIndex", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/PlayerIndex.html", ["player", "index"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("PlayerInfo", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/PlayerInfo.html", ["player", "info"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("Text_PlayerIndex", "Widgets", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/Text_PlayerIndex.html", ["text_", "player", "index"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("ComboBox_Team", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/ComboBox_Team.html", ["combo", "box_", "team"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("ComboBox_Faction", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/ComboBox_Faction.html", ["combo", "box_", "faction"], "UPIEHumanPlayerInfoProxy");
addToContainers_variable("Text_StartingSpot", "", "Docs/Classes/UPIEHumanPlayerInfoProxy/Variables/Text_StartingSpot.html", ["text_", "starting", "spot"], "UPIEHumanPlayerInfoProxy");
addToContainers_class("UPIECPUPlayerInfoProxy", "Same as human version except for CPU players", "Docs/Classes/UPIECPUPlayerInfoProxy/UPIECPUPlayerInfoProxy.html", ["p", "i", "e", "c", "p", "u", "player", "info", "proxy"], "");
addToContainers_function("UIBinding_OnTeamComboBoxSelectionChanged", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Functions/UIBinding_OnTeamComboBoxSelection.html", ["i", "binding_", "on", "team", "combo", "box", "selection", "changed"], "UPIECPUPlayerInfoProxy");
addToContainers_function("UIBinding_OnFactionComboBoxSelectionChanged", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Functions/UIBinding_OnFactionComboBoxSelect.html", ["i", "binding_", "on", "faction", "combo", "box", "selection", "changed"], "UPIECPUPlayerInfoProxy");
addToContainers_function("UIBinding_OnStartingSpotTextChanged", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Functions/UIBinding_OnStartingSpotTextChang.html", ["i", "binding_", "on", "starting", "spot", "text", "changed"], "UPIECPUPlayerInfoProxy");
addToContainers_function("UIBinding_OnStartingSpotTextCommitted", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Functions/UIBinding_OnStartingSpotTextCommi.html", ["i", "binding_", "on", "starting", "spot", "text", "committed"], "UPIECPUPlayerInfoProxy");
addToContainers_function("UIBinding_OnCPUDifficultyComboBoxSelectionChanged", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Functions/UIBinding_OnCPUDifficultyComboBox.html", ["i", "binding_", "on", "c", "p", "u", "difficulty", "combo", "box", "selection", "changed"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("EnumStringObject", "--------------------------------------------------------------", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/EnumStringObject.html", ["enum", "string", "object"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("PlaySettingsWidget", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/PlaySettingsWidget.html", ["play", "settings", "widget"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("PlayerIndex", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/PlayerIndex.html", ["player", "index"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("PlayerInfo", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/PlayerInfo.html", ["player", "info"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("Text_PlayerIndex", "Widgets", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/Text_PlayerIndex.html", ["text_", "player", "index"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("ComboBox_Team", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/ComboBox_Team.html", ["combo", "box_", "team"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("ComboBox_Faction", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/ComboBox_Faction.html", ["combo", "box_", "faction"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("Text_StartingSpot", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/Text_StartingSpot.html", ["text_", "starting", "spot"], "UPIECPUPlayerInfoProxy");
addToContainers_variable("ComboBox_CPUDifficulty", "", "Docs/Classes/UPIECPUPlayerInfoProxy/Variables/ComboBox_CPUDifficulty.html", ["combo", "box_", "c", "p", "u", "difficulty"], "UPIECPUPlayerInfoProxy");
addToContainers_class("UEditorPlaySettingsWidget", "Editor utility widget that lets you adjust the PIE/standalone settings. Not abstract - has a default \'works out of the box\' implementation", "Docs/Classes/UEditorPlaySettingsWidget/UEditorPlaySettingsWidget.html", ["editor", "play", "settings", "widget"], "");
addToContainers_function("UEditorPlaySettingsWidget", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UEditorPlaySettingsWidget.html", ["editor", "play", "settings", "widget"], "UEditorPlaySettingsWidget");
addToContainers_function("final", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/final.html", [], "UEditorPlaySettingsWidget");
addToContainers_function("ShouldSkipOpeningCutscene", "Functions to query what is set on the widget. The game instance/mode/whatever will probably want to call these during the start of PIE/standalone to know what to do", "Docs/Classes/UEditorPlaySettingsWidget/Functions/ShouldSkipOpeningCutscene.html", ["should", "skip", "opening", "cutscene"], "UEditorPlaySettingsWidget");
addToContainers_function("ShouldSkipMainMenu", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/ShouldSkipMainMenu.html", ["should", "skip", "main", "menu"], "UEditorPlaySettingsWidget");
addToContainers_function("GetDefeatCondition", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetDefeatCondition.html", ["get", "defeat", "condition"], "UEditorPlaySettingsWidget");
addToContainers_function("GetStartingResourceConfig", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetStartingResourceConfig.html", ["get", "starting", "resource", "config"], "UEditorPlaySettingsWidget");
addToContainers_function("IsCheatWidgetBPSet", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/IsCheatWidgetBPSet.html", ["is", "cheat", "widget", "b", "p", "set"], "UEditorPlaySettingsWidget");
addToContainers_function("ShouldInitiallyShowCheatWidget", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/ShouldInitiallyShowCheatWidget.html", ["should", "initially", "show", "cheat", "widget"], "UEditorPlaySettingsWidget");
addToContainers_function("GetCheatWidgetBP", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetCheatWidgetBP.html", ["get", "cheat", "widget", "b", "p"], "UEditorPlaySettingsWidget");
addToContainers_function("GetHumanPlayerInfo", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetHumanPlayerInfo.html", ["get", "human", "player", "info"], "UEditorPlaySettingsWidget");
addToContainers_function("GetNumCPUPlayers", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetNumCPUPlayers.html", ["get", "num", "c", "p", "u", "players"], "UEditorPlaySettingsWidget");
addToContainers_function("GetCPUPlayerInfo", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetCPUPlayerInfo.html", ["get", "c", "p", "u", "player", "info"], "UEditorPlaySettingsWidget");
addToContainers_function("GetInvalidHumanOwnerRule", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetInvalidHumanOwnerRule.html", ["get", "invalid", "human", "owner", "rule"], "UEditorPlaySettingsWidget");
addToContainers_function("GetInvalidCPUOwnerRule", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetInvalidCPUOwnerRule.html", ["get", "invalid", "c", "p", "u", "owner", "rule"], "UEditorPlaySettingsWidget");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/RebuildWidget.html", ["rebuild", "widget"], "UEditorPlaySettingsWidget");
addToContainers_function("NativePreConstruct", "I\'m hoping this the begin play type function I want", "Docs/Classes/UEditorPlaySettingsWidget/Functions/NativePreConstruct.html", ["native", "pre", "construct"], "UEditorPlaySettingsWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UEditorPlaySettingsWidget");
addToContainers_function("CreateSingleHumanPlayerConfigurationWidget", "These functions should create the widget, add it to the appropriate panel and call SetupAsHumanPlayerWidget/SetupAsCPUPlayerWidget on them.", "Docs/Classes/UEditorPlaySettingsWidget/Functions/CreateSingleHumanPlayerConfigurat.html", ["create", "single", "human", "player", "configuration", "widget"], "UEditorPlaySettingsWidget");
addToContainers_function("CreateSingleCPUPlayerConfigurationWidget", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/CreateSingleCPUPlayerConfiguratio.html", ["create", "single", "c", "p", "u", "player", "configuration", "widget"], "UEditorPlaySettingsWidget");
addToContainers_function("GetTextSize", "Get the size of some text. By size I mean like how many pixels it takes up or something. Have not tested whether this works @param Font - The font used. @param ScaleX - Scale in X axis. @param ScaleY - Scale in Y axis. @param XL - out Horizontal length of string. @param YL - out Vertical length of string. @param Text - String to calculate for.", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetTextSize.html", ["get", "text", "size"], "UEditorPlaySettingsWidget");
addToContainers_function("GetText", "Functions to get the FText or FString to be displayed on UI", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetText.html", ["get", "text"], "UEditorPlaySettingsWidget");
addToContainers_function("GetString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetString.html", ["get", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("GetText", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetText_1.html", ["get", "text"], "UEditorPlaySettingsWidget");
addToContainers_function("GetString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetString_1.html", ["get", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("GetText", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetText_2.html", ["get", "text"], "UEditorPlaySettingsWidget");
addToContainers_function("GetString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetString_2.html", ["get", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("GetString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetString_3.html", ["get", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("GetString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetString_4.html", ["get", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("GetString_StartingSpot", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetString_StartingSpot.html", ["get", "string_", "starting", "spot"], "UEditorPlaySettingsWidget");
addToContainers_function("GetString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/GetString_5.html", ["get", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("SetSkippingOptionFromString", "Sets a variable based on a string value. If the string does not corrispond to any value then nothing will happen @return - true if a valid value is set using the string", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetSkippingOptionFromString.html", ["set", "skipping", "option", "from", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("SetDefeatConditionFromString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetDefeatConditionFromString.html", ["set", "defeat", "condition", "from", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("SetNumCPUPlayersFromString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetNumCPUPlayersFromString.html", ["set", "num", "c", "p", "u", "players", "from", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("SetCheatWidgetBPFromString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetCheatWidgetBPFromString.html", ["set", "cheat", "widget", "b", "p", "from", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("SetInvalidHumanOwnerRuleFromString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetInvalidHumanOwnerRuleFromStrin.html", ["set", "invalid", "human", "owner", "rule", "from", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("SetInvalidCPUOwnerRuleFromString", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetInvalidCPUOwnerRuleFromString.html", ["set", "invalid", "c", "p", "u", "owner", "rule", "from", "string"], "UEditorPlaySettingsWidget");
addToContainers_function("DecrementEnum", "Does like EnumValue-- on param in place", "Docs/Classes/UEditorPlaySettingsWidget/Functions/DecrementEnum.html", ["decrement", "enum"], "UEditorPlaySettingsWidget");
addToContainers_function("IncrementEnum", "Does like EnumValue++ on param in place", "Docs/Classes/UEditorPlaySettingsWidget/Functions/IncrementEnum.html", ["increment", "enum"], "UEditorPlaySettingsWidget");
addToContainers_function("CreateHumanReadableNameForUClassName", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/CreateHumanReadableNameForUClassN.html", ["create", "human", "readable", "name", "for", "u", "class", "name"], "UEditorPlaySettingsWidget");
addToContainers_function("CreateUClassNameFromHumanReadableName", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/CreateUClassNameFromHumanReadable.html", ["create", "u", "class", "name", "from", "human", "readable", "name"], "UEditorPlaySettingsWidget");
addToContainers_function("SetSlotAnchors", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetSlotAnchors.html", ["set", "slot", "anchors"], "UEditorPlaySettingsWidget");
addToContainers_function("SetSlotAlignment", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/SetSlotAlignment.html", ["set", "slot", "alignment"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnSkippingComboBoxOptionChanged", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnSkippingComboBoxOptio.html", ["i", "binding_", "on", "skipping", "combo", "box", "option", "changed"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnAdjustSkippingOptionLeftButtonClicked", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnAdjustSkippingOptionL.html", ["i", "binding_", "on", "adjust", "skipping", "option", "left", "button", "clicked"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnAdjustSkippingOptionRightButtonClicked", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnAdjustSkippingOptionR.html", ["i", "binding_", "on", "adjust", "skipping", "option", "right", "button", "clicked"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnDefeatConditionComboBoxOptionChanged", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnDefeatConditionComboB.html", ["i", "binding_", "on", "defeat", "condition", "combo", "box", "option", "changed"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnAdjustDefeatConditionLeftButtonClicked", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnAdjustDefeatCondition.html", ["i", "binding_", "on", "adjust", "defeat", "condition", "left", "button", "clicked"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnAdjustDefeatConditionRightButtonClicked", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnAdjustDefeatCondition_1.html", ["i", "binding_", "on", "adjust", "defeat", "condition", "right", "button", "clicked"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnNumCPUPlayersComboBoxOptionChanged", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnNumCPUPlayersComboBox.html", ["i", "binding_", "on", "num", "c", "p", "u", "players", "combo", "box", "option", "changed"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnDecreaseNumCPUPlayersButtonClicked", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnDecreaseNumCPUPlayers.html", ["i", "binding_", "on", "decrease", "num", "c", "p", "u", "players", "button", "clicked"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnIncreaseNumCPUPlayersButtonClicked", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnIncreaseNumCPUPlayers.html", ["i", "binding_", "on", "increase", "num", "c", "p", "u", "players", "button", "clicked"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnShowCheatWidgetCheckBoxChanged", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnShowCheatWidgetCheckB.html", ["i", "binding_", "on", "show", "cheat", "widget", "check", "box", "changed"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnCheatWidgetComboBoxOptionChanged", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnCheatWidgetComboBoxOp.html", ["i", "binding_", "on", "cheat", "widget", "combo", "box", "option", "changed"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnInvalidHumanOwnerRuleComboxBoxOptionChanged", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnInvalidHumanOwnerRule.html", ["i", "binding_", "on", "invalid", "human", "owner", "rule", "combox", "box", "option", "changed"], "UEditorPlaySettingsWidget");
addToContainers_function("UIBinding_OnInvalidCPUOwnerRuleComboxBoxOptionChanged", "", "Docs/Classes/UEditorPlaySettingsWidget/Functions/UIBinding_OnInvalidCPUOwnerRuleCo.html", ["i", "binding_", "on", "invalid", "c", "p", "u", "owner", "rule", "combox", "box", "option", "changed"], "UEditorPlaySettingsWidget");
addToContainers_variable("EnumStringObject", "This object mappings from enum values to string representations", "Docs/Classes/UEditorPlaySettingsWidget/Variables/EnumStringObject.html", ["enum", "string", "object"], "UEditorPlaySettingsWidget");
addToContainers_variable("SkippingOption", "What is currently set as the skipping option", "Docs/Classes/UEditorPlaySettingsWidget/Variables/SkippingOption.html", ["skipping", "option"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Combo box to change what is skipped", "Docs/Classes/UEditorPlaySettingsWidget/Variables/.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Text that shows what will be skipped", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_1.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button that lets you decide what to skip", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_2.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button that lets you decide what to skip", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_3.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Teams, faction etc for human PIE players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_4.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Teams, faction etc for CPU PIE players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_5.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("HumanPlayerInfoCopy", "Copy of what\'s in HumanPlayerInfo and CPUPlayerInfo", "Docs/Classes/UEditorPlaySettingsWidget/Variables/HumanPlayerInfoCopy.html", ["human", "player", "info", "copy"], "UEditorPlaySettingsWidget");
addToContainers_variable("CPUPlayerInfoCopy", "", "Docs/Classes/UEditorPlaySettingsWidget/Variables/CPUPlayerInfoCopy.html", ["p", "u", "player", "info", "copy"], "UEditorPlaySettingsWidget");
addToContainers_variable("NumCPUPlayers", "How many CPU players to have in a PIE/standalone match", "Docs/Classes/UEditorPlaySettingsWidget/Variables/NumCPUPlayers.html", ["num", "c", "p", "u", "players"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Grid to show human players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_6.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Grid to show CPU players", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_7.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Combo box to choose how many CPU players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_8.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Text that shows how many CPU players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_9.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to decrease how many players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_10.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to increase how many players to play PIE/standalone with", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_11.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("StartingResourceAmounts", "Starting resources array", "Docs/Classes/UEditorPlaySettingsWidget/Variables/StartingResourceAmounts.html", ["starting", "resource", "amounts"], "UEditorPlaySettingsWidget");
addToContainers_variable("StartingResourceConfig", "Make sure to update this as resource amounts change", "Docs/Classes/UEditorPlaySettingsWidget/Variables/StartingResourceConfig.html", ["starting", "resource", "config"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Panel that shows all the single starting resources widgets", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_12.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "The widget for a single resource", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_13.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("DefeatCondition", "The currently set defeat condition", "Docs/Classes/UEditorPlaySettingsWidget/Variables/DefeatCondition.html", ["defeat", "condition"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Drop down box to adjust defeat condition", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_14.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Text that shows what the defeat condition is", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_15.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to adjust left what the defeat condition is", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_16.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Button to adjust right what the defeat condition is", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_17.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("bInitiallyShowCheatWidget", "The currently set cheat widget option", "Docs/Classes/UEditorPlaySettingsWidget/Variables/bInitiallyShowCheatWidget.html", ["initially", "show", "cheat", "widget"], "UEditorPlaySettingsWidget");
addToContainers_variable("CheatWidget_BP", "", "Docs/Classes/UEditorPlaySettingsWidget/Variables/CheatWidget_BP.html", ["cheat", "widget_", "b", "p"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Toggles whether the in match cheat widget is shown by default when PIE/standalone starts", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_18.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "A drop down box to select the class for the cheat widget", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_19.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("InvalidHumanOwnerRule", "Widget to choose the rule for when PIE/standalone starts and ther is a selectable placed on the map that cannot be assigned to it\'s owner e.g. owner is another faction", "Docs/Classes/UEditorPlaySettingsWidget/Variables/InvalidHumanOwnerRule.html", ["invalid", "human", "owner", "rule"], "UEditorPlaySettingsWidget");
addToContainers_variable("InvalidCPUOwnerRule", "", "Docs/Classes/UEditorPlaySettingsWidget/Variables/InvalidCPUOwnerRule.html", ["invalid", "c", "p", "u", "owner", "rule"], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Drop down box to change the invalid human owner rule", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_20.html", [], "UEditorPlaySettingsWidget");
addToContainers_variable("", "Drop down box for invalid CPU owner", "Docs/Classes/UEditorPlaySettingsWidget/Variables/_21.html", [], "UEditorPlaySettingsWidget");
addToContainers_class("UCreateDocumentationConfirmationWidget", "Widget that asks \'are you sure you want to create documentation?\'", "Docs/Classes/UCreateDocumentationConfirmationW/UCreateDocumentationConfirmationW.html", ["create", "documentation", "confirmation", "widget"], "");
addToContainers_function("final", "", "Docs/Classes/UCreateDocumentationConfirmationW/Functions/final.html", [], "UCreateDocumentationConfirmationWidget");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UCreateDocumentationConfirmationW/Functions/RebuildWidget.html", ["rebuild", "widget"], "UCreateDocumentationConfirmationWidget");
addToContainers_function("UIBinding_OnConfirmCreateDocumentationButtonClicked", "", "Docs/Classes/UCreateDocumentationConfirmationW/Functions/UIBinding_OnConfirmCreateDocument.html", ["i", "binding_", "on", "confirm", "create", "documentation", "button", "clicked"], "UCreateDocumentationConfirmationWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UCreateDocumentationConfirmationW/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UCreateDocumentationConfirmationWidget");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Classes/UCreateDocumentationConfirmationW/Variables/.html", [], "UCreateDocumentationConfirmationWidget");
addToContainers_variable("", "Button to say \'do not create documentation\'", "Docs/Classes/UCreateDocumentationConfirmationW/Variables/_1.html", [], "UCreateDocumentationConfirmationWidget");
addToContainers_class("UPluginMaintainerEditorWidget", "This widget is intended to only be used by the person who maintains the plugin (Philippe Bouchet)", "Docs/Classes/UPluginMaintainerEditorWidget/UPluginMaintainerEditorWidget.html", ["plugin", "maintainer", "editor", "widget"], "");
addToContainers_function("final", "", "Docs/Classes/UPluginMaintainerEditorWidget/Functions/final.html", [], "UPluginMaintainerEditorWidget");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UPluginMaintainerEditorWidget/Functions/RebuildWidget.html", ["rebuild", "widget"], "UPluginMaintainerEditorWidget");
addToContainers_function("UIBinding_OnCreateDocumentationButtonClicked", "", "Docs/Classes/UPluginMaintainerEditorWidget/Functions/UIBinding_OnCreateDocumentationBu.html", ["i", "binding_", "on", "create", "documentation", "button", "clicked"], "UPluginMaintainerEditorWidget");
addToContainers_function("UIBinding_OnLogFileContentsTextCommitted", "", "Docs/Classes/UPluginMaintainerEditorWidget/Functions/UIBinding_OnLogFileContentsTextCo.html", ["i", "binding_", "on", "log", "file", "contents", "text", "committed"], "UPluginMaintainerEditorWidget");
addToContainers_function("ReadFileContents", "", "Docs/Classes/UPluginMaintainerEditorWidget/Functions/ReadFileContents.html", ["read", "file", "contents"], "UPluginMaintainerEditorWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UPluginMaintainerEditorWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UPluginMaintainerEditorWidget");
addToContainers_variable("", "Parses project and creates documentation files and possibly uploads them to github.com too.", "Docs/Classes/UPluginMaintainerEditorWidget/Variables/.html", [], "UPluginMaintainerEditorWidget");
addToContainers_variable("", "Prints to log the contents of a file for debugging. Enter a filename and it will log it\'s contents. Doesn\'t really have anything to do with being plugin maintainer. You can optionally enter a number after the filename and then only the file up to that char number will be logged. e.g. UIUtilities.h 200", "Docs/Classes/UPluginMaintainerEditorWidget/Variables/_1.html", [], "UPluginMaintainerEditorWidget");
addToContainers_class("UCommanderSkillTreeNodeWidget", "Single node on commander\'s skill tree", "Docs/Classes/UCommanderSkillTreeNodeWidget/UCommanderSkillTreeNodeWidget.html", ["commander", "skill", "tree", "node", "widget"], "");
addToContainers_function("UCommanderSkillTreeNodeWidget", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/UCommanderSkillTreeNodeWidget.html", ["commander", "skill", "tree", "node", "widget"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("SetupNodeWidget", "@return - node tyep for this widget", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/SetupNodeWidget.html", ["setup", "node", "widget"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("SetAppearanceForCannotAffordOrPrerequisitesNotMet", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/SetAppearanceForCannotAffordOrPre.html", ["set", "appearance", "for", "cannot", "afford", "or", "prerequisites", "not", "met"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("SetAppearanceForRankNotHighEnough", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/SetAppearanceForRankNotHighEnough.html", ["set", "appearance", "for", "rank", "not", "high", "enough"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("SetAppearanceForAquirable", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/SetAppearanceForAquirable.html", ["set", "appearance", "for", "aquirable"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("SetAppearanceForAquired", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/SetAppearanceForAquired.html", ["set", "appearance", "for", "aquired"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("GetNodeInfo", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/GetNodeInfo.html", ["get", "node", "info"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("OnClicked", "Called when the button is clicked. @param PlayCon - player controller for the local player @param PlayerState - player state of the local player", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/OnClicked.html", ["on", "clicked"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("OnAbilityRankAquired", "@param NewRank - 0 indexed rank of the ability now", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/OnAbilityRankAquired.html", ["on", "ability", "rank", "aquired"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("UIBinding_OnLMBPress", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/UIBinding_OnLMBPress.html", ["i", "binding_", "on", "l", "m", "b", "press"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("UIBinding_OnLMBReleased", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/UIBinding_OnLMBReleased.html", ["i", "binding_", "on", "l", "m", "b", "released"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("UIBinding_OnRMBPress", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/UIBinding_OnRMBPress.html", ["i", "binding_", "on", "r", "m", "b", "press"], "UCommanderSkillTreeNodeWidget");
addToContainers_function("UIBinding_OnRMBReleased", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Functions/UIBinding_OnRMBReleased.html", ["i", "binding_", "on", "r", "m", "b", "released"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("UNAQUIRABLE_COLOR_MULTIPLIER", "Tint to multiply button color by when it cannot be aquired either because: - the player\'s rank is not high enough - the player does not have enough skill points", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/UNAQUIRABLE_COLOR_MULTIPLIER.html", ["n", "a", "q", "u", "i", "r", "a", "b", "l", "e_", "c", "o", "l", "o", "r_", "m", "u", "l", "t", "i", "p", "l", "i", "e", "r"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("GI", "------------------------------------------------------", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/GI.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("PC", "Pointer to player controller... even though there\'s one on the slate button", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/PC.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("OriginalColor", "", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/OriginalColor.html", ["original", "color"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("", "Color of node when it has been aquired. My notes: Probably can put this on the tree widget instead since all nodes will likely be the same color when aquired", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("NodeInfo", "Pointer to the info struct this node is for", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/NodeInfo.html", ["node", "info"], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("", "The same type of node in a tree is probably not allowed", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/_1.html", [], "UCommanderSkillTreeNodeWidget");
addToContainers_variable("AllNodesArrayIndex", "The index in UCommanderSkillTreeWidget::AllNodes that this widget is at. Note: I need to make sure this is the same across server/clients since we send this as an RPC param to signal which node we\'re refering to", "Docs/Classes/UCommanderSkillTreeNodeWidget/Variables/AllNodesArrayIndex.html", ["all", "nodes", "array", "index"], "UCommanderSkillTreeNodeWidget");
addToContainers_struct("FNodeArray", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FNodeArray/FNodeArray.html", ["node", "array"], "");
addToContainers_variable("Array", "", "Docs/Structs/FNodeArray/Variables/Array.html", [], "FNodeArray");
addToContainers_class("UCommanderSkillTreeWidget", "The widget that is the skill tree for the commander. Place skill tree node widgets onto it. Cannot have duplicate of the same node type.", "Docs/Classes/UCommanderSkillTreeWidget/UCommanderSkillTreeWidget.html", ["commander", "skill", "tree", "widget"], "");
addToContainers_function("UCommanderSkillTreeWidget", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/UCommanderSkillTreeWidget.html", ["commander", "skill", "tree", "widget"], "UCommanderSkillTreeWidget");
addToContainers_function("SetupWidget_GettingDestroyedAfter", "Setup the widget", "Docs/Classes/UCommanderSkillTreeWidget/Functions/SetupWidget_GettingDestroyedAfter.html", ["setup", "widget_", "getting", "destroyed", "after"], "UCommanderSkillTreeWidget");
addToContainers_function("SetupWidget", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/SetupWidget.html", ["setup", "widget"], "UCommanderSkillTreeWidget");
addToContainers_function("MoreSetup", "@param PlayerState - the player state for the player that owns this widget @param FactionInfo - faction info of PlayerState @param PlayAnimRule - the rule that says whether to play the \"show me\" anim for the toggle commander skill tree button on the HUD @return - true if the \"show me\" anim should be played", "Docs/Classes/UCommanderSkillTreeWidget/Functions/MoreSetup.html", ["more", "setup"], "UCommanderSkillTreeWidget");
addToContainers_function("NativeTick", "Overridden because UInGameWidgetBase::NativeTick does nothing", "Docs/Classes/UCommanderSkillTreeWidget/Functions/NativeTick.html", ["native", "tick"], "UCommanderSkillTreeWidget");
addToContainers_function("IsShowingOrPlayingShowAnimation", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/IsShowingOrPlayingShowAnimation.html", ["is", "showing", "or", "playing", "show", "animation"], "UCommanderSkillTreeWidget");
addToContainers_function("OnRequestToBeShown", "These two funcs aren\'t really requests since I check before calling them whether the widget is showing or not so better names are Show() and Hide()", "Docs/Classes/UCommanderSkillTreeWidget/Functions/OnRequestToBeShown.html", ["on", "request", "to", "be", "shown"], "UCommanderSkillTreeWidget");
addToContainers_function("OnRequestToBeHidden", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/OnRequestToBeHidden.html", ["on", "request", "to", "be", "hidden"], "UCommanderSkillTreeWidget");
addToContainers_function("RespondToEscapeRequest", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/RespondToEscapeRequest.html", ["respond", "to", "escape", "request"], "UCommanderSkillTreeWidget");
addToContainers_function("OnExperienceGained", "Called when the local player gains experience but does not level up as a result of it", "Docs/Classes/UCommanderSkillTreeWidget/Functions/OnExperienceGained.html", ["on", "experience", "gained"], "UCommanderSkillTreeWidget");
addToContainers_function("OnLevelUp_LastForEvent", "Called when the local player levels up but only for the last level gained if multiple were gained at a time @param PlayAnimRule - the rule that says when to play the \"show me\" anim for the toggle skill tree button on the HUD @return - true if the \"show me\" anim should be played", "Docs/Classes/UCommanderSkillTreeWidget/Functions/OnLevelUp_LastForEvent.html", ["on", "level", "up_", "last", "for", "event"], "UCommanderSkillTreeWidget");
addToContainers_function("OnNewAbilityRankAquired", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/OnNewAbilityRankAquired.html", ["on", "new", "ability", "rank", "aquired"], "UCommanderSkillTreeWidget");
addToContainers_function("GetExperienceAquiredAsText", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/GetExperienceAquiredAsText.html", ["get", "experience", "aquired", "as", "text"], "UCommanderSkillTreeWidget");
addToContainers_function("GetExperienceRequiredAsText", "", "Docs/Classes/UCommanderSkillTreeWidget/Functions/GetExperienceRequiredAsText.html", ["get", "experience", "required", "as", "text"], "UCommanderSkillTreeWidget");
addToContainers_variable("bShownOrPlayingShowAnim", "If false then this is either hidden or playing the hide animation", "Docs/Classes/UCommanderSkillTreeWidget/Variables/bShownOrPlayingShowAnim.html", ["shown", "or", "playing", "show", "anim"], "UCommanderSkillTreeWidget");
addToContainers_variable("NodesUnlockedByRank", "Maps rank to the nodes that are unlocked when that rank is aquired. Might not include and entry for rank 0. The same node can appear in different value arrays e.g. rank 1 of ability unlocks at commander rank 1 but ability rank 2 unlocks at commander rank 2", "Docs/Classes/UCommanderSkillTreeWidget/Variables/NodesUnlockedByRank.html", ["nodes", "unlocked", "by", "rank"], "UCommanderSkillTreeWidget");
addToContainers_variable("RankHighEnoughButNotFullyAquiredNodes", "Nodes that the player does not have enough skill points to aquire or prereqs not met but they are a high enough rank. This will include nodes that the player may have aquired the lower ranks of the ability but they have not aquired every rank of the ability yet", "Docs/Classes/UCommanderSkillTreeWidget/Variables/RankHighEnoughButNotFullyAquiredN.html", ["rank", "high", "enough", "but", "not", "fully", "aquired", "nodes"], "UCommanderSkillTreeWidget");
addToContainers_variable("", "If you name a widget animation this then it will be played when this widget is requested to be shown. You are in charge of making it SelfHitTestInvisible/Visible at a certain point in the animation.", "Docs/Classes/UCommanderSkillTreeWidget/Variables/.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "If you name a widget animation this then it will be played when this widget is requested to be hidden. You are in charge of making it HitTestInvisible and/or Hidden at a certain point in the animation.", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_1.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("ShowAnimationFName", "", "Docs/Classes/UCommanderSkillTreeWidget/Variables/ShowAnimationFName.html", ["show", "animation", "f", "name"], "UCommanderSkillTreeWidget");
addToContainers_variable("HideAnimationFName", "", "Docs/Classes/UCommanderSkillTreeWidget/Variables/HideAnimationFName.html", ["hide", "animation", "f", "name"], "UCommanderSkillTreeWidget");
addToContainers_variable("ShowAnim", "Animations to play when the widget is requested to be shown hidden. Can be null implying you do not want an animation", "Docs/Classes/UCommanderSkillTreeWidget/Variables/ShowAnim.html", ["show", "anim"], "UCommanderSkillTreeWidget");
addToContainers_variable("HideAnim", "", "Docs/Classes/UCommanderSkillTreeWidget/Variables/HideAnim.html", ["hide", "anim"], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays the player\'s rank", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_2.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays how many skill points the player has not spent", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_3.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays how much experience the player has towards the next level. Not cumulative", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_4.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Displays how much experience the player requires to reach the next level", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_5.html", [], "UCommanderSkillTreeWidget");
addToContainers_variable("", "Progress bar to display how much experience the player has", "Docs/Classes/UCommanderSkillTreeWidget/Variables/_6.html", [], "UCommanderSkillTreeWidget");
addToContainers_class("UGlobalSkillsPanel", "This panel holds buttons to abilities. It is like the panel you see on the side of the screen in C&C Generals that has your commander abilities on it such as fuel air bomb or artillery strike, but it may also be possible to have selectable abilities also appear on it such as a nuke. You will need to add enough UGlobalSkillsPanelButtons to it to accomodate the maximum number of abilities that can appear on the panel. About animations: There will be an animation that plays when you aquire the first button. This will be an animation on this widget. Then there will be another animation that will play for each button when it becomes active.", "Docs/Classes/UGlobalSkillsPanel/UGlobalSkillsPanel.html", ["global", "skills", "panel"], "");
addToContainers_function("UGlobalSkillsPanel", "", "Docs/Classes/UGlobalSkillsPanel/Functions/UGlobalSkillsPanel.html", ["global", "skills", "panel"], "UGlobalSkillsPanel");
addToContainers_function("SetupWidget", "", "Docs/Classes/UGlobalSkillsPanel/Functions/SetupWidget.html", ["setup", "widget"], "UGlobalSkillsPanel");
addToContainers_function("MoreSetup", "", "Docs/Classes/UGlobalSkillsPanel/Functions/MoreSetup.html", ["more", "setup"], "UGlobalSkillsPanel");
addToContainers_function("NativeTick", "", "Docs/Classes/UGlobalSkillsPanel/Functions/NativeTick.html", ["native", "tick"], "UGlobalSkillsPanel");
addToContainers_function("OnCommanderSkillAquired_FirstRank", "", "Docs/Classes/UGlobalSkillsPanel/Functions/OnCommanderSkillAquired_FirstRank.html", ["on", "commander", "skill", "aquired_", "first", "rank"], "UGlobalSkillsPanel");
addToContainers_function("OnCommanderSkillAquired_NotFirstRank", "", "Docs/Classes/UGlobalSkillsPanel/Functions/OnCommanderSkillAquired_NotFirstR.html", ["on", "commander", "skill", "aquired_", "not", "first", "rank"], "UGlobalSkillsPanel");
addToContainers_function("OnCommanderSkillUsed", "", "Docs/Classes/UGlobalSkillsPanel/Functions/OnCommanderSkillUsed.html", ["on", "commander", "skill", "used"], "UGlobalSkillsPanel");
addToContainers_function("OnCommanderAbilityCooledDown", "", "Docs/Classes/UGlobalSkillsPanel/Functions/OnCommanderAbilityCooledDown.html", ["on", "commander", "ability", "cooled", "down"], "UGlobalSkillsPanel");
addToContainers_variable("CoolingDownAbilities", "Buttons whose ability is cooling down", "Docs/Classes/UGlobalSkillsPanel/Variables/CoolingDownAbilities.html", ["cooling", "down", "abilities"], "UGlobalSkillsPanel");
addToContainers_variable("AllButtons", "All the buttons on the panel. The lower index ones will be made active first", "Docs/Classes/UGlobalSkillsPanel/Variables/AllButtons.html", ["all", "buttons"], "UGlobalSkillsPanel");
addToContainers_variable("", "If you name a widget animation this then it will be played when the first button becomes active", "Docs/Classes/UGlobalSkillsPanel/Variables/.html", [], "UGlobalSkillsPanel");
addToContainers_variable("EnterAnimFName", "", "Docs/Classes/UGlobalSkillsPanel/Variables/EnterAnimFName.html", ["enter", "anim", "f", "name"], "UGlobalSkillsPanel");
addToContainers_variable("EnterAnim", "", "Docs/Classes/UGlobalSkillsPanel/Variables/EnterAnim.html", ["enter", "anim"], "UGlobalSkillsPanel");
addToContainers_variable("NumActiveButtons", "", "Docs/Classes/UGlobalSkillsPanel/Variables/NumActiveButtons.html", ["num", "active", "buttons"], "UGlobalSkillsPanel");
addToContainers_class("UGlobalSkillsPanelButton", "A single button on the global skills panel. Made this a UUserWidget so I could get animations to play on it because I want a animation for when the button becomes active.", "Docs/Classes/UGlobalSkillsPanelButton/UGlobalSkillsPanelButton.html", ["global", "skills", "panel", "button"], "");
addToContainers_function("UGlobalSkillsPanelButton", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/UGlobalSkillsPanelButton.html", ["global", "skills", "panel", "button"], "UGlobalSkillsPanelButton");
addToContainers_function("SetupWidget", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/SetupWidget.html", ["setup", "widget"], "UGlobalSkillsPanelButton");
addToContainers_function("OnCommanderSkillAquired_FirstRank", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/OnCommanderSkillAquired_FirstRank.html", ["on", "commander", "skill", "aquired_", "first", "rank"], "UGlobalSkillsPanelButton");
addToContainers_function("OnCommanderSkillAquired_NotFirstRank", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/OnCommanderSkillAquired_NotFirstR.html", ["on", "commander", "skill", "aquired_", "not", "first", "rank"], "UGlobalSkillsPanelButton");
addToContainers_function("UpdateCooldownProgress", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/UpdateCooldownProgress.html", ["update", "cooldown", "progress"], "UGlobalSkillsPanelButton");
addToContainers_function("OnLastChargeUsed", "Called when the ability this button is for uses its last charge", "Docs/Classes/UGlobalSkillsPanelButton/Functions/OnLastChargeUsed.html", ["on", "last", "charge", "used"], "UGlobalSkillsPanelButton");
addToContainers_function("GetAbilityState", "Get the state info for the ability this widget is displaying info for", "Docs/Classes/UGlobalSkillsPanelButton/Functions/GetAbilityState.html", ["get", "ability", "state"], "UGlobalSkillsPanelButton");
addToContainers_function("NativeTick", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/NativeTick.html", ["native", "tick"], "UGlobalSkillsPanelButton");
addToContainers_function("SetAppearanceForNotOutOfCharges", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/SetAppearanceForNotOutOfCharges.html", ["set", "appearance", "for", "not", "out", "of", "charges"], "UGlobalSkillsPanelButton");
addToContainers_function("SetAppearanceForOutOfCharges", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/SetAppearanceForOutOfCharges.html", ["set", "appearance", "for", "out", "of", "charges"], "UGlobalSkillsPanelButton");
addToContainers_function("UIBinding_OnLMBPress", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/UIBinding_OnLMBPress.html", ["i", "binding_", "on", "l", "m", "b", "press"], "UGlobalSkillsPanelButton");
addToContainers_function("UIBinding_OnLMBReleased", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/UIBinding_OnLMBReleased.html", ["i", "binding_", "on", "l", "m", "b", "released"], "UGlobalSkillsPanelButton");
addToContainers_function("UIBinding_OnRMBPress", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/UIBinding_OnRMBPress.html", ["i", "binding_", "on", "r", "m", "b", "press"], "UGlobalSkillsPanelButton");
addToContainers_function("UIBinding_OnRMBReleased", "", "Docs/Classes/UGlobalSkillsPanelButton/Functions/UIBinding_OnRMBReleased.html", ["i", "binding_", "on", "r", "m", "b", "released"], "UGlobalSkillsPanelButton");
addToContainers_variable("", "If you name a widget animation this then it will play when the button becomes active", "Docs/Classes/UGlobalSkillsPanelButton/Variables/.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("EnterAnimFName", "", "Docs/Classes/UGlobalSkillsPanelButton/Variables/EnterAnimFName.html", ["enter", "anim", "f", "name"], "UGlobalSkillsPanelButton");
addToContainers_variable("EnterAnim", "Animation to play when the button becomes active", "Docs/Classes/UGlobalSkillsPanelButton/Variables/EnterAnim.html", ["enter", "anim"], "UGlobalSkillsPanelButton");
addToContainers_variable("", "Kind of pivital to this whole widget; shouldn\'t really be optional", "Docs/Classes/UGlobalSkillsPanelButton/Variables/_1.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("", "Progress bar to show the cooldown remaining of the ability", "Docs/Classes/UGlobalSkillsPanelButton/Variables/_2.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("OriginalOpacity", "", "Docs/Classes/UGlobalSkillsPanelButton/Variables/OriginalOpacity.html", ["original", "opacity"], "UGlobalSkillsPanelButton");
addToContainers_variable("", "What to multiply render opacity by when the button\'s ability is out of charges", "Docs/Classes/UGlobalSkillsPanelButton/Variables/_3.html", [], "UGlobalSkillsPanelButton");
addToContainers_variable("AssignedCommanderAbilityInfo", "The assigned commander ability info", "Docs/Classes/UGlobalSkillsPanelButton/Variables/AssignedCommanderAbilityInfo.html", ["assigned", "commander", "ability", "info"], "UGlobalSkillsPanelButton");
addToContainers_class("UInfantryControllerDebugWidget", "Widget to help debug AInfantryController. Has default implementation. Ahhh never used this", "Docs/Classes/UInfantryControllerDebugWidget/UInfantryControllerDebugWidget.html", ["infantry", "controller", "debug", "widget"], "");
addToContainers_function("RebuildWidget", "", "Docs/Classes/UInfantryControllerDebugWidget/Functions/RebuildWidget.html", ["rebuild", "widget"], "UInfantryControllerDebugWidget");
addToContainers_function("IsEditorOnly", "", "Docs/Classes/UInfantryControllerDebugWidget/Functions/IsEditorOnly.html", ["is", "editor", "only"], "UInfantryControllerDebugWidget");
addToContainers_function("SetInitialValues", "", "Docs/Classes/UInfantryControllerDebugWidget/Functions/SetInitialValues.html", ["set", "initial", "values"], "UInfantryControllerDebugWidget");
addToContainers_function("OnUnitsStateChanged", "", "Docs/Classes/UInfantryControllerDebugWidget/Functions/OnUnitsStateChanged.html", ["on", "units", "state", "changed"], "UInfantryControllerDebugWidget");
addToContainers_function("OnUnitsAnimStateChanged", "", "Docs/Classes/UInfantryControllerDebugWidget/Functions/OnUnitsAnimStateChanged.html", ["on", "units", "anim", "state", "changed"], "UInfantryControllerDebugWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UInfantryControllerDebugWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UInfantryControllerDebugWidget");
addToContainers_variable("", "----------------------------------------------------------------", "Docs/Classes/UInfantryControllerDebugWidget/Variables/.html", [], "UInfantryControllerDebugWidget");
addToContainers_variable("", "", "Docs/Classes/UInfantryControllerDebugWidget/Variables/_1.html", [], "UInfantryControllerDebugWidget");
addToContainers_class("UInMatchConfirmationWidget", "Widgets that appear that say \'are you sure?\' TODO add a container and populate in ctor all the BindWidget widgest just like UInGameWidgetBase", "Docs/Classes/UInMatchConfirmationWidget/UInMatchConfirmationWidget.html", ["in", "match", "confirmation", "widget"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/InitialSetup.html", ["initial", "setup"], "UInMatchConfirmationWidget");
addToContainers_function("OnRequestToBeShown", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/OnRequestToBeShown.html", ["on", "request", "to", "be", "shown"], "UInMatchConfirmationWidget");
addToContainers_function("OnNoButtonClicked", "Called when the \"no\" button is clicked", "Docs/Classes/UInMatchConfirmationWidget/Functions/OnNoButtonClicked.html", ["on", "no", "button", "clicked"], "UInMatchConfirmationWidget");
addToContainers_function("RespondToEscapeRequest", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/RespondToEscapeRequest.html", ["respond", "to", "escape", "request"], "UInMatchConfirmationWidget");
addToContainers_function("GetPurpose", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/GetPurpose.html", ["get", "purpose"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnYesButtonLeftMousePress", "switch on Purpose with these to decide what to do. Still need to add Purpose variable to this class", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnYesButtonLeftMousePre.html", ["i", "binding_", "on", "yes", "button", "left", "mouse", "press"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnYesButtonLeftMouseReleased", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnYesButtonLeftMouseRel.html", ["i", "binding_", "on", "yes", "button", "left", "mouse", "released"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnYesButtonRightMousePress", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnYesButtonRightMousePr.html", ["i", "binding_", "on", "yes", "button", "right", "mouse", "press"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnYesButtonRightMouseReleased", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnYesButtonRightMouseRe.html", ["i", "binding_", "on", "yes", "button", "right", "mouse", "released"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnNoButtonLeftMousePress", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnNoButtonLeftMousePres.html", ["i", "binding_", "on", "no", "button", "left", "mouse", "press"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnNoButtonLeftMouseReleased", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnNoButtonLeftMouseRele.html", ["i", "binding_", "on", "no", "button", "left", "mouse", "released"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnNoButtonRightMousePress", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnNoButtonRightMousePre.html", ["i", "binding_", "on", "no", "button", "right", "mouse", "press"], "UInMatchConfirmationWidget");
addToContainers_function("UIBinding_OnNoButtonRightMouseReleased", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/UIBinding_OnNoButtonRightMouseRel.html", ["i", "binding_", "on", "no", "button", "right", "mouse", "released"], "UInMatchConfirmationWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UInMatchConfirmationWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UInMatchConfirmationWidget");
addToContainers_variable("Purpose", "-------------------------------------------------------", "Docs/Classes/UInMatchConfirmationWidget/Variables/Purpose.html", [], "UInMatchConfirmationWidget");
addToContainers_variable("", "The yes button", "Docs/Classes/UInMatchConfirmationWidget/Variables/.html", [], "UInMatchConfirmationWidget");
addToContainers_variable("", "The no button", "Docs/Classes/UInMatchConfirmationWidget/Variables/_1.html", [], "UInMatchConfirmationWidget");
addToContainers_class("UPauseMenu", "In match pause menu Have not implemented animations for this or the confirmation widgets. If I do make sure to modify IsShowingOrPlayingShowAnimation() to take into account animations. Side note and this goes for I think all UUserWidget that get added to the HUD: The anchors in the top left corner seem to be the way to go. If you anchor them full screen then they do not show correctly. But just like the tooltip widgets I think I can get them full screen.", "Docs/Classes/UPauseMenu/UPauseMenu.html", ["pause", "menu"], "");
addToContainers_function("SetupWidget", "", "Docs/Classes/UPauseMenu/Functions/SetupWidget.html", ["setup", "widget"], "UPauseMenu");
addToContainers_function("SetupBoundWidgets", "", "Docs/Classes/UPauseMenu/Functions/SetupBoundWidgets.html", ["setup", "bound", "widgets"], "UPauseMenu");
addToContainers_function("SpawnConfirmationWidgets", "", "Docs/Classes/UPauseMenu/Functions/SpawnConfirmationWidgets.html", ["spawn", "confirmation", "widgets"], "UPauseMenu");
addToContainers_function("SpawnSettingsWidget", "", "Docs/Classes/UPauseMenu/Functions/SpawnSettingsWidget.html", ["spawn", "settings", "widget"], "UPauseMenu");
addToContainers_function("HasConfirmExitToMainMenuWidget", "Return true if this widget will show a confirm exit to main menu widget", "Docs/Classes/UPauseMenu/Functions/HasConfirmExitToMainMenuWidget.html", ["has", "confirm", "exit", "to", "main", "menu", "widget"], "UPauseMenu");
addToContainers_function("ShowConfirmExitToMainMenuWidget", "", "Docs/Classes/UPauseMenu/Functions/ShowConfirmExitToMainMenuWidget.html", ["show", "confirm", "exit", "to", "main", "menu", "widget"], "UPauseMenu");
addToContainers_function("HasConfirmExitToOperatingSystemWidget", "Return true if this widget will show a confirm exit to operating system widget", "Docs/Classes/UPauseMenu/Functions/HasConfirmExitToOperatingSystemWi.html", ["has", "confirm", "exit", "to", "operating", "system", "widget"], "UPauseMenu");
addToContainers_function("ShowConfirmExitToOperatingSystemWidget", "", "Docs/Classes/UPauseMenu/Functions/ShowConfirmExitToOperatingSystemW.html", ["show", "confirm", "exit", "to", "operating", "system", "widget"], "UPauseMenu");
addToContainers_function("IsShowingOrPlayingShowAnimation", "", "Docs/Classes/UPauseMenu/Functions/IsShowingOrPlayingShowAnimation.html", ["is", "showing", "or", "playing", "show", "animation"], "UPauseMenu");
addToContainers_function("RespondToEscapeRequest", "", "Docs/Classes/UPauseMenu/Functions/RespondToEscapeRequest.html", ["respond", "to", "escape", "request"], "UPauseMenu");
addToContainers_function("ShowSettingsMenu", "", "Docs/Classes/UPauseMenu/Functions/ShowSettingsMenu.html", ["show", "settings", "menu"], "UPauseMenu");
addToContainers_function("UIBinding_OnResumeButtonLeftMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnResumeButtonLeftMouse.html", ["i", "binding_", "on", "resume", "button", "left", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnResumeButtonLeftMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnResumeButtonLeftMouse_1.html", ["i", "binding_", "on", "resume", "button", "left", "mouse", "button", "released"], "UPauseMenu");
addToContainers_function("UIBinding_OnResumeButtonRightMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnResumeButtonRightMous.html", ["i", "binding_", "on", "resume", "button", "right", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnResumeButtonRightMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnResumeButtonRightMous_1.html", ["i", "binding_", "on", "resume", "button", "right", "mouse", "button", "released"], "UPauseMenu");
addToContainers_function("UIBinding_OnSettingsButtonLeftMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnSettingsButtonLeftMou.html", ["i", "binding_", "on", "settings", "button", "left", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnSettingsButtonLeftMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnSettingsButtonLeftMou_1.html", ["i", "binding_", "on", "settings", "button", "left", "mouse", "button", "released"], "UPauseMenu");
addToContainers_function("UIBinding_OnSettingsButtonRightMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnSettingsButtonRightMo.html", ["i", "binding_", "on", "settings", "button", "right", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnSettingsButtonRightMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnSettingsButtonRightMo_1.html", ["i", "binding_", "on", "settings", "button", "right", "mouse", "button", "released"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToMainMenuLeftMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToMainMenuLeftM.html", ["i", "binding_", "on", "return", "to", "main", "menu", "left", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToMainMenuLeftMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToMainMenuLeftM_1.html", ["i", "binding_", "on", "return", "to", "main", "menu", "left", "mouse", "button", "released"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToMainMenuRightMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToMainMenuRight.html", ["i", "binding_", "on", "return", "to", "main", "menu", "right", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToMainMenuRightMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToMainMenuRight_1.html", ["i", "binding_", "on", "return", "to", "main", "menu", "right", "mouse", "button", "released"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToOSLeftMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToOSLeftMouseBu.html", ["i", "binding_", "on", "return", "to", "o", "s", "left", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToOSLeftMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToOSLeftMouseBu_1.html", ["i", "binding_", "on", "return", "to", "o", "s", "left", "mouse", "button", "released"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToOSRightMouseButtonPress", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToOSRightMouseB.html", ["i", "binding_", "on", "return", "to", "o", "s", "right", "mouse", "button", "press"], "UPauseMenu");
addToContainers_function("UIBinding_OnReturnToOSRightMouseButtonReleased", "", "Docs/Classes/UPauseMenu/Functions/UIBinding_OnReturnToOSRightMouseB_1.html", ["i", "binding_", "on", "return", "to", "o", "s", "right", "mouse", "button", "released"], "UPauseMenu");
addToContainers_variable("SETTINGS_WIDGET_Z_ORDER", "", "Docs/Classes/UPauseMenu/Variables/SETTINGS_WIDGET_Z_ORDER.html", ["e", "t", "t", "i", "n", "g", "s_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UPauseMenu");
addToContainers_variable("CONFIRMATION_WIDGET_Z_ORDER", "", "Docs/Classes/UPauseMenu/Variables/CONFIRMATION_WIDGET_Z_ORDER.html", ["o", "n", "f", "i", "r", "m", "a", "t", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UPauseMenu");
addToContainers_variable("", "Button to close the pause menu and resume playing", "Docs/Classes/UPauseMenu/Variables/.html", [], "UPauseMenu");
addToContainers_variable("", "Button to show the settings menu", "Docs/Classes/UPauseMenu/Variables/_1.html", [], "UPauseMenu");
addToContainers_variable("SettingsWidget", "", "Docs/Classes/UPauseMenu/Variables/SettingsWidget.html", ["settings", "widget"], "UPauseMenu");
addToContainers_variable("", "The widget to use for the settings menu", "Docs/Classes/UPauseMenu/Variables/_2.html", [], "UPauseMenu");
addToContainers_variable("", "Button to exit the match and return to the main menu", "Docs/Classes/UPauseMenu/Variables/_3.html", [], "UPauseMenu");
addToContainers_variable("ConfirmExitToMainMenuWidget", "", "Docs/Classes/UPauseMenu/Variables/ConfirmExitToMainMenuWidget.html", ["confirm", "exit", "to", "main", "menu", "widget"], "UPauseMenu");
addToContainers_variable("", "Optional widget to appear when the player clicks the \'return to main menu\' button", "Docs/Classes/UPauseMenu/Variables/_4.html", [], "UPauseMenu");
addToContainers_variable("", "Button to exit the match and return to the operating system", "Docs/Classes/UPauseMenu/Variables/_5.html", [], "UPauseMenu");
addToContainers_variable("ConfirmExitToOperatingSystemWidget", "", "Docs/Classes/UPauseMenu/Variables/ConfirmExitToOperatingSystemWidge.html", ["confirm", "exit", "to", "operating", "system", "widget"], "UPauseMenu");
addToContainers_variable("", "Optional widget to appear when the player clicks the \'return to operating system\' button", "Docs/Classes/UPauseMenu/Variables/_6.html", [], "UPauseMenu");
addToContainers_struct("FButtonArrayEntry", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Structs/FButtonArrayEntry/FButtonArrayEntry.html", ["button", "array", "entry"], "");
addToContainers_function("FButtonArrayEntry", "Never call this ctor", "Docs/Structs/FButtonArrayEntry/Functions/FButtonArrayEntry.html", ["button", "array", "entry"], "FButtonArrayEntry");
addToContainers_function("FButtonArrayEntry", "", "Docs/Structs/FButtonArrayEntry/Functions/FButtonArrayEntry_1.html", ["button", "array", "entry"], "FButtonArrayEntry");
addToContainers_function("UpdateAppearance", "", "Docs/Structs/FButtonArrayEntry/Functions/UpdateAppearance.html", ["update", "appearance"], "FButtonArrayEntry");
addToContainers_function("OnPlayerDefeated", "Called when a player is defeated. May not be the one assigned to this struct", "Docs/Structs/FButtonArrayEntry/Functions/OnPlayerDefeated.html", ["on", "player", "defeated"], "FButtonArrayEntry");
addToContainers_function("GetButton", "", "Docs/Structs/FButtonArrayEntry/Functions/GetButton.html", ["get", "button"], "FButtonArrayEntry");
addToContainers_function("GetAssignedPlayer", "", "Docs/Structs/FButtonArrayEntry/Functions/GetAssignedPlayer.html", ["get", "assigned", "player"], "FButtonArrayEntry");
addToContainers_function("SetButtonAppearanceForTargetable", "", "Docs/Structs/FButtonArrayEntry/Functions/SetButtonAppearanceForTargetable.html", ["set", "button", "appearance", "for", "targetable"], "FButtonArrayEntry");
addToContainers_function("SetButtonAppearanceForUntargetable", "", "Docs/Structs/FButtonArrayEntry/Functions/SetButtonAppearanceForUntargetabl.html", ["set", "button", "appearance", "for", "untargetable"], "FButtonArrayEntry");
addToContainers_variable("Button", "", "Docs/Structs/FButtonArrayEntry/Variables/Button.html", [], "FButtonArrayEntry");
addToContainers_variable("AssignedPlayer", "", "Docs/Structs/FButtonArrayEntry/Variables/AssignedPlayer.html", ["assigned", "player"], "FButtonArrayEntry");
addToContainers_variable("ButtonOriginalOpacity", "", "Docs/Structs/FButtonArrayEntry/Variables/ButtonOriginalOpacity.html", ["button", "original", "opacity"], "FButtonArrayEntry");
addToContainers_variable("bHasAssignedPlayerBeenDefeated", "", "Docs/Structs/FButtonArrayEntry/Variables/bHasAssignedPlayerBeenDefeated.html", ["has", "assigned", "player", "been", "defeated"], "FButtonArrayEntry");
addToContainers_variable("AssignedPlayersAffiliation", "", "Docs/Structs/FButtonArrayEntry/Variables/AssignedPlayersAffiliation.html", ["assigned", "players", "affiliation"], "FButtonArrayEntry");
addToContainers_class("UPlayerTargetingPanel", "A panel that shows players and makes them clickable. This widget is what would appear if you have an ability that targets a player and not a selectable. In editor add UMyButton widgets to it. These will be the buttons that will show the players as targets. Note: when you move a button around in the editor it gets rebuilt or something. Anyway point is is that it will now be last for the all widgets iteration. Maybe I should allow the user to tag which over the buttons should be.", "Docs/Classes/UPlayerTargetingPanel/UPlayerTargetingPanel.html", ["player", "targeting", "panel"], "");
addToContainers_function("SetupWidget", "", "Docs/Classes/UPlayerTargetingPanel/Functions/SetupWidget.html", ["setup", "widget"], "UPlayerTargetingPanel");
addToContainers_function("MoreSetup", "This is intended to be called after all the players that are going to be in the match are known", "Docs/Classes/UPlayerTargetingPanel/Functions/MoreSetup.html", ["more", "setup"], "UPlayerTargetingPanel");
addToContainers_function("SetupPlayerTargetingButton", "Setup a single button that is to be used for player targeting", "Docs/Classes/UPlayerTargetingPanel/Functions/SetupPlayerTargetingButton.html", ["setup", "player", "targeting", "button"], "UPlayerTargetingPanel");
addToContainers_function("NativeTick", "", "Docs/Classes/UPlayerTargetingPanel/Functions/NativeTick.html", ["native", "tick"], "UPlayerTargetingPanel");
addToContainers_function("IsShowingOrPlayingShowAnimation", "", "Docs/Classes/UPlayerTargetingPanel/Functions/IsShowingOrPlayingShowAnimation.html", ["is", "showing", "or", "playing", "show", "animation"], "UPlayerTargetingPanel");
addToContainers_function("OnRequestToBeShown", "These two funcs aren\'t really requests since I check before calling them whether the widget is showing or not so better names are Show() and Hide() @param AbilityInfo - the ability that requires this panel to be shown for it", "Docs/Classes/UPlayerTargetingPanel/Functions/OnRequestToBeShown.html", ["on", "request", "to", "be", "shown"], "UPlayerTargetingPanel");
addToContainers_function("OnRequestToBeHidden", "", "Docs/Classes/UPlayerTargetingPanel/Functions/OnRequestToBeHidden.html", ["on", "request", "to", "be", "hidden"], "UPlayerTargetingPanel");
addToContainers_function("RespondToEscapeRequest", "", "Docs/Classes/UPlayerTargetingPanel/Functions/RespondToEscapeRequest.html", ["respond", "to", "escape", "request"], "UPlayerTargetingPanel");
addToContainers_function("OnAnotherPlayerDefeated", "Called when a player other than ourselves is defeated", "Docs/Classes/UPlayerTargetingPanel/Functions/OnAnotherPlayerDefeated.html", ["on", "another", "player", "defeated"], "UPlayerTargetingPanel");
addToContainers_function("OnPlayerTargetingButtonEvent_LMBPressed", "These functions are called when a player targeting button is pressed/released", "Docs/Classes/UPlayerTargetingPanel/Functions/OnPlayerTargetingButtonEvent_LMBP.html", ["on", "player", "targeting", "button", "event_", "l", "m", "b", "pressed"], "UPlayerTargetingPanel");
addToContainers_function("OnPlayerTargetingButtonEvent_LMBReleased", "", "Docs/Classes/UPlayerTargetingPanel/Functions/OnPlayerTargetingButtonEvent_LMBR.html", ["on", "player", "targeting", "button", "event_", "l", "m", "b", "released"], "UPlayerTargetingPanel");
addToContainers_function("OnPlayerTargetingButtonEvent_RMBPressed", "", "Docs/Classes/UPlayerTargetingPanel/Functions/OnPlayerTargetingButtonEvent_RMBP.html", ["on", "player", "targeting", "button", "event_", "r", "m", "b", "pressed"], "UPlayerTargetingPanel");
addToContainers_function("OnPlayerTargetingButtonEvent_RMBReleased", "", "Docs/Classes/UPlayerTargetingPanel/Functions/OnPlayerTargetingButtonEvent_RMBR.html", ["on", "player", "targeting", "button", "event_", "r", "m", "b", "released"], "UPlayerTargetingPanel");
addToContainers_function("SetupTargetingButtonsForAbility", "Update the buttons that the player can click on to target", "Docs/Classes/UPlayerTargetingPanel/Functions/SetupTargetingButtonsForAbility.html", ["setup", "targeting", "buttons", "for", "ability"], "UPlayerTargetingPanel");
addToContainers_function("UIBinding_OnCancelButtonLMBPressed", "", "Docs/Classes/UPlayerTargetingPanel/Functions/UIBinding_OnCancelButtonLMBPresse.html", ["i", "binding_", "on", "cancel", "button", "l", "m", "b", "pressed"], "UPlayerTargetingPanel");
addToContainers_function("UIBinding_OnCancelButtonLMBReleased", "", "Docs/Classes/UPlayerTargetingPanel/Functions/UIBinding_OnCancelButtonLMBReleas.html", ["i", "binding_", "on", "cancel", "button", "l", "m", "b", "released"], "UPlayerTargetingPanel");
addToContainers_function("UIBinding_OnCancelButtonRMBPressed", "", "Docs/Classes/UPlayerTargetingPanel/Functions/UIBinding_OnCancelButtonRMBPresse.html", ["i", "binding_", "on", "cancel", "button", "r", "m", "b", "pressed"], "UPlayerTargetingPanel");
addToContainers_function("UIBinding_OnCancelButtonRMBReleased", "", "Docs/Classes/UPlayerTargetingPanel/Functions/UIBinding_OnCancelButtonRMBReleas.html", ["i", "binding_", "on", "cancel", "button", "r", "m", "b", "released"], "UPlayerTargetingPanel");
addToContainers_variable("AssignedAbilityInfo", "Pointer to info struct for the ability this widget is being displayed for", "Docs/Classes/UPlayerTargetingPanel/Variables/AssignedAbilityInfo.html", ["assigned", "ability", "info"], "UPlayerTargetingPanel");
addToContainers_variable("Buttons", "All the buttons on the panel that are used for player targeting", "Docs/Classes/UPlayerTargetingPanel/Variables/Buttons.html", [], "UPlayerTargetingPanel");
addToContainers_variable("", "If you name a widget animation this then it will play whenever a request is made to show this panel. You are in charge of making the panel SelfHitTestInvisible/Visible at some point in the anim.", "Docs/Classes/UPlayerTargetingPanel/Variables/.html", [], "UPlayerTargetingPanel");
addToContainers_variable("", "If you name a widget animation this then it will play whenever a request is made to hide this panel. You are in charge of setting the visibility of the panel with the anim", "Docs/Classes/UPlayerTargetingPanel/Variables/_1.html", [], "UPlayerTargetingPanel");
addToContainers_variable("ShowAnimFName", "", "Docs/Classes/UPlayerTargetingPanel/Variables/ShowAnimFName.html", ["show", "anim", "f", "name"], "UPlayerTargetingPanel");
addToContainers_variable("HideAnimFName", "", "Docs/Classes/UPlayerTargetingPanel/Variables/HideAnimFName.html", ["hide", "anim", "f", "name"], "UPlayerTargetingPanel");
addToContainers_variable("ShowAnim", "", "Docs/Classes/UPlayerTargetingPanel/Variables/ShowAnim.html", ["show", "anim"], "UPlayerTargetingPanel");
addToContainers_variable("HideAnim", "", "Docs/Classes/UPlayerTargetingPanel/Variables/HideAnim.html", ["hide", "anim"], "UPlayerTargetingPanel");
addToContainers_variable("bShownOrPlayingShowAnim", "If false then the widget is hidden or playing the hide anim", "Docs/Classes/UPlayerTargetingPanel/Variables/bShownOrPlayingShowAnim.html", ["shown", "or", "playing", "show", "anim"], "UPlayerTargetingPanel");
addToContainers_variable("", "Button that will close the targeting panel", "Docs/Classes/UPlayerTargetingPanel/Variables/_2.html", [], "UPlayerTargetingPanel");
addToContainers_class("UMyButton", "My button class. Uses my slate button class as its slate widget. This button does not handle (or consume) mouse press/release events. So do not stack buttons on top of each other in widget designer. Generally this isn\'t something you do anyway.", "Docs/Classes/UMyButton/UMyButton.html", ["my", "button"], "");
addToContainers_function("UMyButton", "Sets default values", "Docs/Classes/UMyButton/Functions/UMyButton.html", ["my", "button"], "UMyButton");
addToContainers_function("SynchronizeProperties", "UWidget interface", "Docs/Classes/UMyButton/Functions/SynchronizeProperties.html", ["synchronize", "properties"], "UMyButton");
addToContainers_function("RebuildWidget", "UWidget interface", "Docs/Classes/UMyButton/Functions/RebuildWidget.html", ["rebuild", "widget"], "UMyButton");
addToContainers_function("ReleaseSlateResources", "UVisual interface", "Docs/Classes/UMyButton/Functions/ReleaseSlateResources.html", ["release", "slate", "resources"], "UMyButton");
addToContainers_function("GetPaletteCategory", "UWidget interface", "Docs/Classes/UMyButton/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UMyButton");
addToContainers_function("GetSlotClass", "UPanelWidget", "Docs/Classes/UMyButton/Functions/GetSlotClass.html", ["get", "slot", "class"], "UMyButton");
addToContainers_function("OnSlotAdded", "", "Docs/Classes/UMyButton/Functions/OnSlotAdded.html", ["on", "slot", "added"], "UMyButton");
addToContainers_function("OnSlotRemoved", "", "Docs/Classes/UMyButton/Functions/OnSlotRemoved.html", ["on", "slot", "removed"], "UMyButton");
addToContainers_function("PostLoad", "~ Begin UObject Interface", "Docs/Classes/UMyButton/Functions/PostLoad.html", ["post", "load"], "UMyButton");
addToContainers_function("PostEditChangeProperty", "", "Docs/Classes/UMyButton/Functions/PostEditChangeProperty.html", ["post", "edit", "change", "property"], "UMyButton");
addToContainers_function("SetPurpose", "@param Owner - if this button is part of a user widget class thats purpose is a button then this should point to it. Otherwise it can be null. Examples of widgets you would pass into this right now would be: - UItemOnDisplayInShopButton - UInventoryItemButton This is because they contain a UMyButton as a member instead of actually deriving from UMyButton themself", "Docs/Classes/UMyButton/Functions/SetPurpose.html", ["set", "purpose"], "UMyButton");
addToContainers_function("GetPurpose", "", "Docs/Classes/UMyButton/Functions/GetPurpose.html", ["get", "purpose"], "UMyButton");
addToContainers_function("SetImages", "All these are intended to be called after the game has started NOT during design time, so they do not set anything on this class and just bubble to the slate button", "Docs/Classes/UMyButton/Functions/SetImages.html", ["set", "images"], "UMyButton");
addToContainers_function("SetImagesAndUnifiedImageFlags_ExcludeNormalImage", "", "Docs/Classes/UMyButton/Functions/SetImagesAndUnifiedImageFlags_Exc.html", ["set", "images", "and", "unified", "image", "flags_", "exclude", "normal", "image"], "UMyButton");
addToContainers_function("SetImagesAndUnifiedImageFlags_ExcludeNormalAndHighlightedImage", "", "Docs/Classes/UMyButton/Functions/SetImagesAndUnifiedImageFlags_Exc_1.html", ["set", "images", "and", "unified", "image", "flags_", "exclude", "normal", "and", "highlighted", "image"], "UMyButton");
addToContainers_function("SetImages_PlayerTargetingPanel", "", "Docs/Classes/UMyButton/Functions/SetImages_PlayerTargetingPanel.html", ["set", "images_", "player", "targeting", "panel"], "UMyButton");
addToContainers_function("SetImages_ExcludeHighlightedImage", "", "Docs/Classes/UMyButton/Functions/SetImages_ExcludeHighlightedImage.html", ["set", "images_", "exclude", "highlighted", "image"], "UMyButton");
addToContainers_function("SetUnifiedImages_ExcludeNormalAndHighlightedImage", "", "Docs/Classes/UMyButton/Functions/SetUnifiedImages_ExcludeNormalAnd.html", ["set", "unified", "images_", "exclude", "normal", "and", "highlighted", "image"], "UMyButton");
addToContainers_function("SetImages_CommandSkillTreeNode", "Probably need to have another look at this func", "Docs/Classes/UMyButton/Functions/SetImages_CommandSkillTreeNode.html", ["set", "images_", "command", "skill", "tree", "node"], "UMyButton");
addToContainers_function("SetImages_ExcludeHighlightedImageAndIgnoreUnifiedFlags", "", "Docs/Classes/UMyButton/Functions/SetImages_ExcludeHighlightedImage_1.html", ["set", "images_", "exclude", "highlighted", "image", "and", "ignore", "unified", "flags"], "UMyButton");
addToContainers_function("SetHoveredSound", "", "Docs/Classes/UMyButton/Functions/SetHoveredSound.html", ["set", "hovered", "sound"], "UMyButton");
addToContainers_function("SetPressedByLMBSound", "", "Docs/Classes/UMyButton/Functions/SetPressedByLMBSound.html", ["set", "pressed", "by", "l", "m", "b", "sound"], "UMyButton");
addToContainers_function("SetPressedByRMBSound", "", "Docs/Classes/UMyButton/Functions/SetPressedByRMBSound.html", ["set", "pressed", "by", "r", "m", "b", "sound"], "UMyButton");
addToContainers_function("SetIgnoreHoveredImage", "", "Docs/Classes/UMyButton/Functions/SetIgnoreHoveredImage.html", ["set", "ignore", "hovered", "image"], "UMyButton");
addToContainers_function("SetIgnorePressedImage", "", "Docs/Classes/UMyButton/Functions/SetIgnorePressedImage.html", ["set", "ignore", "pressed", "image"], "UMyButton");
addToContainers_function("SetPC", "", "Docs/Classes/UMyButton/Functions/SetPC.html", ["set", "p", "c"], "UMyButton");
addToContainers_function("SetOwningWidget", "", "Docs/Classes/UMyButton/Functions/SetOwningWidget.html", ["set", "owning", "widget"], "UMyButton");
addToContainers_function("SetImagesAndSounds", "Sets the pressed/hovered images/sounds on this button. This version of this func is for buttons that do not get there images from the GI or whatnot i.e. do not call this for selectable action bar buttons. I should make a seperate func for those that also takes a FContextButtonInfo param too probably", "Docs/Classes/UMyButton/Functions/SetImagesAndSounds.html", ["set", "images", "and", "sounds"], "UMyButton");
addToContainers_function("GetNormalImage", "", "Docs/Classes/UMyButton/Functions/GetNormalImage.html", ["get", "normal", "image"], "UMyButton");
addToContainers_function("GetHoverImage", "", "Docs/Classes/UMyButton/Functions/GetHoverImage.html", ["get", "hover", "image"], "UMyButton");
addToContainers_function("GetPressedImage", "", "Docs/Classes/UMyButton/Functions/GetPressedImage.html", ["get", "pressed", "image"], "UMyButton");
addToContainers_function("GetHighlightedImage", "", "Docs/Classes/UMyButton/Functions/GetHighlightedImage.html", ["get", "highlighted", "image"], "UMyButton");
addToContainers_function("GetOnLeftMouseButtonPressDelegate", "Get ref to mouse delegates so bindings can be done", "Docs/Classes/UMyButton/Functions/GetOnLeftMouseButtonPressDelegate.html", ["get", "on", "left", "mouse", "button", "press", "delegate"], "UMyButton");
addToContainers_function("GetOnRightMouseButtonPressDelegate", "", "Docs/Classes/UMyButton/Functions/GetOnRightMouseButtonPressDelegat.html", ["get", "on", "right", "mouse", "button", "press", "delegate"], "UMyButton");
addToContainers_function("GetOnLeftMouseButtonReleasedDelegate", "", "Docs/Classes/UMyButton/Functions/GetOnLeftMouseButtonReleasedDeleg.html", ["get", "on", "left", "mouse", "button", "released", "delegate"], "UMyButton");
addToContainers_function("GetOnRightMouseButtonReleasedDelegate", "", "Docs/Classes/UMyButton/Functions/GetOnRightMouseButtonReleasedDele.html", ["get", "on", "right", "mouse", "button", "released", "delegate"], "UMyButton");
addToContainers_function("OnLeftMouseButtonPressed", "Same as above. For easy code replacement", "Docs/Classes/UMyButton/Functions/OnLeftMouseButtonPressed.html", ["on", "left", "mouse", "button", "pressed"], "UMyButton");
addToContainers_function("OnRightMouseButtonPressed", "", "Docs/Classes/UMyButton/Functions/OnRightMouseButtonPressed.html", ["on", "right", "mouse", "button", "pressed"], "UMyButton");
addToContainers_function("OnLeftMouseButtonReleased", "", "Docs/Classes/UMyButton/Functions/OnLeftMouseButtonReleased.html", ["on", "left", "mouse", "button", "released"], "UMyButton");
addToContainers_function("OnRightMouseButtonReleased", "", "Docs/Classes/UMyButton/Functions/OnRightMouseButtonReleased.html", ["on", "right", "mouse", "button", "released"], "UMyButton");
addToContainers_function("SetIsPressedByLMB", "", "Docs/Classes/UMyButton/Functions/SetIsPressedByLMB.html", ["set", "is", "pressed", "by", "l", "m", "b"], "UMyButton");
addToContainers_function("SetIsPressedByRMB", "", "Docs/Classes/UMyButton/Functions/SetIsPressedByRMB.html", ["set", "is", "pressed", "by", "r", "m", "b"], "UMyButton");
addToContainers_function("SetIsHighlighted", "", "Docs/Classes/UMyButton/Functions/SetIsHighlighted.html", ["set", "is", "highlighted"], "UMyButton");
addToContainers_function("ForceUnhover", "", "Docs/Classes/UMyButton/Functions/ForceUnhover.html", ["force", "unhover"], "UMyButton");
addToContainers_function("SetPadding", "", "Docs/Classes/UMyButton/Functions/SetPadding.html", ["set", "padding"], "UMyButton");
addToContainers_function("SetHorizontalAlignment", "", "Docs/Classes/UMyButton/Functions/SetHorizontalAlignment.html", ["set", "horizontal", "alignment"], "UMyButton");
addToContainers_function("SetVerticalAlignment", "", "Docs/Classes/UMyButton/Functions/SetVerticalAlignment.html", ["set", "vertical", "alignment"], "UMyButton");
addToContainers_function("SetBrushColor", "", "Docs/Classes/UMyButton/Functions/SetBrushColor.html", ["set", "brush", "color"], "UMyButton");
addToContainers_function("PlayerTargetingButton_OnLMBPressed", "-----------------------------------------------------------------------------------------", "Docs/Classes/UMyButton/Functions/PlayerTargetingButton_OnLMBPresse.html", ["player", "targeting", "button_", "on", "l", "m", "b", "pressed"], "UMyButton");
addToContainers_function("PlayerTargetingButton_OnLMBReleased", "", "Docs/Classes/UMyButton/Functions/PlayerTargetingButton_OnLMBReleas.html", ["player", "targeting", "button_", "on", "l", "m", "b", "released"], "UMyButton");
addToContainers_function("PlayerTargetingButton_OnRMBPressed", "", "Docs/Classes/UMyButton/Functions/PlayerTargetingButton_OnRMBPresse.html", ["player", "targeting", "button_", "on", "r", "m", "b", "pressed"], "UMyButton");
addToContainers_function("PlayerTargetingButton_OnRMBReleased", "", "Docs/Classes/UMyButton/Functions/PlayerTargetingButton_OnRMBReleas.html", ["player", "targeting", "button_", "on", "r", "m", "b", "released"], "UMyButton");
addToContainers_variable("Purpose", "What this button is used for", "Docs/Classes/UMyButton/Variables/Purpose.html", [], "UMyButton");
addToContainers_variable("", "The alignment of the content horizontally.", "Docs/Classes/UMyButton/Variables/.html", [], "UMyButton");
addToContainers_variable("", "The alignment of the content vertically.", "Docs/Classes/UMyButton/Variables/_1.html", [], "UMyButton");
addToContainers_variable("", "Color and opacity multiplier of content in the border", "Docs/Classes/UMyButton/Variables/_2.html", [], "UMyButton");
addToContainers_variable("", "The padding area between the slot and the content it contains.", "Docs/Classes/UMyButton/Variables/_3.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw as the background", "Docs/Classes/UMyButton/Variables/_4.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw when button is hovered by the mouse", "Docs/Classes/UMyButton/Variables/_5.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw when button is pressed by LMB/RMB/possibly.more", "Docs/Classes/UMyButton/Variables/_6.html", [], "UMyButton");
addToContainers_variable("", "Brush to draw when button is highlighted. I recently added this variable. I might forget to set it at a lot of times. Over time I will correct those", "Docs/Classes/UMyButton/Variables/_7.html", [], "UMyButton");
addToContainers_variable("", "Color and opacity of the actual border image", "Docs/Classes/UMyButton/Variables/_8.html", [], "UMyButton");
addToContainers_variable("", "Scales the computed desired size of this border and its contents. Useful for making things that slide open without having to hard-code their size. Note: if the parent widget is set up to ignore this widget\'s desired size, then changing this value will have no effect.", "Docs/Classes/UMyButton/Variables/_9.html", [], "UMyButton");
addToContainers_variable("MyButton", "Slate button", "Docs/Classes/UMyButton/Variables/MyButton.html", ["my", "button"], "UMyButton");
addToContainers_class("UMyButtonSlot", "Slot for UMyButton class.", "Docs/Classes/UMyButtonSlot/UMyButtonSlot.html", ["my", "button", "slot"], "");
addToContainers_function("UMyButtonSlot", "Pretty much all of this is just copied from UBorderSlot.h", "Docs/Classes/UMyButtonSlot/Functions/UMyButtonSlot.html", ["my", "button", "slot"], "UMyButtonSlot");
addToContainers_function("SetPadding", "", "Docs/Classes/UMyButtonSlot/Functions/SetPadding.html", ["set", "padding"], "UMyButtonSlot");
addToContainers_function("SetHorizontalAlignment", "", "Docs/Classes/UMyButtonSlot/Functions/SetHorizontalAlignment.html", ["set", "horizontal", "alignment"], "UMyButtonSlot");
addToContainers_function("SetVerticalAlignment", "", "Docs/Classes/UMyButtonSlot/Functions/SetVerticalAlignment.html", ["set", "vertical", "alignment"], "UMyButtonSlot");
addToContainers_function("SynchronizeProperties", "UPanelSlot interface", "Docs/Classes/UMyButtonSlot/Functions/SynchronizeProperties.html", ["synchronize", "properties"], "UMyButtonSlot");
addToContainers_function("BuildSlot", "Builds the underlying slot for the slate border.", "Docs/Classes/UMyButtonSlot/Functions/BuildSlot.html", ["build", "slot"], "UMyButtonSlot");
addToContainers_function("ReleaseSlateResources", "", "Docs/Classes/UMyButtonSlot/Functions/ReleaseSlateResources.html", ["release", "slate", "resources"], "UMyButtonSlot");
addToContainers_function("PostEditChangeProperty", "UObject interface", "Docs/Classes/UMyButtonSlot/Functions/PostEditChangeProperty.html", ["post", "edit", "change", "property"], "UMyButtonSlot");
addToContainers_variable("", "The padding area between the slot and the content it contains.", "Docs/Classes/UMyButtonSlot/Variables/.html", [], "UMyButtonSlot");
addToContainers_variable("", "The alignment of the object horizontally.", "Docs/Classes/UMyButtonSlot/Variables/_1.html", [], "UMyButtonSlot");
addToContainers_variable("", "The alignment of the object vertically.", "Docs/Classes/UMyButtonSlot/Variables/_2.html", [], "UMyButtonSlot");
addToContainers_variable("Button", "A pointer to the button to allow us to adjust the size, padding...etc at runtime.", "Docs/Classes/UMyButtonSlot/Variables/Button.html", [], "UMyButtonSlot");
addToContainers_class("SMyButton", "This is my own implementation of a slate button. I created this class to allow for the following: - make it able to respond to mouse right clicks, not just left clicks - store a pointer to the local player controller to allow better handling of presses/release. Some other things I\'ve done with this class: - removed any touch support for performance - There is no option to configure the click type. It is DownAndUp. For performance.", "Docs/Classes/SMyButton/SMyButton.html", ["my", "button"], "");
addToContainers_function(")", "", "Docs/Classes/SMyButton/Functions/).html", [], "SMyButton");
addToContainers_function("SMyButton", "", "Docs/Classes/SMyButton/Functions/SMyButton.html", ["my", "button"], "SMyButton");
addToContainers_function("Construct", "This function isn\'t virtual. I should check somehow if it\'s actually being called. I think it gets called with template function", "Docs/Classes/SMyButton/Functions/Construct.html", [], "SMyButton");
addToContainers_function("SetContent", "Sets the content for this border @param InContent The widget to use as content for the border", "Docs/Classes/SMyButton/Functions/SetContent.html", ["set", "content"], "SMyButton");
addToContainers_function("SetDesiredSizeScale", "Set the desired size scale multiplier", "Docs/Classes/SMyButton/Functions/SetDesiredSizeScale.html", ["set", "desired", "size", "scale"], "SMyButton");
addToContainers_function("SetHAlign", "See HAlign argument", "Docs/Classes/SMyButton/Functions/SetHAlign.html", ["set", "h", "align"], "SMyButton");
addToContainers_function("SetVAlign", "See VAlign argument", "Docs/Classes/SMyButton/Functions/SetVAlign.html", ["set", "v", "align"], "SMyButton");
addToContainers_function("SetPadding", "See Padding attribute", "Docs/Classes/SMyButton/Functions/SetPadding.html", ["set", "padding"], "SMyButton");
addToContainers_function("SetNormalImageUPROPERTY", "See BorderImage attribute", "Docs/Classes/SMyButton/Functions/SetNormalImageUPROPERTY.html", ["set", "normal", "image", "u", "p", "r", "o", "p", "e", "r", "t", "y"], "SMyButton");
addToContainers_function("SetBackgroundColor", "", "Docs/Classes/SMyButton/Functions/SetBackgroundColor.html", ["set", "background", "color"], "SMyButton");
addToContainers_function("OnPaint", "Begin SWidget overrides", "Docs/Classes/SMyButton/Functions/OnPaint.html", ["on", "paint"], "SMyButton");
addToContainers_function("SupportsKeyboardFocus", "virtual FReply OnKeyUp(const FGeometry & MyGeometry, const FKeyEvent & InKeyEvent) override;", "Docs/Classes/SMyButton/Functions/SupportsKeyboardFocus.html", ["supports", "keyboard", "focus"], "SMyButton");
addToContainers_function("OnMouseButtonDown", "", "Docs/Classes/SMyButton/Functions/OnMouseButtonDown.html", ["on", "mouse", "button", "down"], "SMyButton");
addToContainers_function("OnMouseButtonUp", "", "Docs/Classes/SMyButton/Functions/OnMouseButtonUp.html", ["on", "mouse", "button", "up"], "SMyButton");
addToContainers_function("OnMouseButtonDoubleClick", "", "Docs/Classes/SMyButton/Functions/OnMouseButtonDoubleClick.html", ["on", "mouse", "button", "double", "click"], "SMyButton");
addToContainers_function("OnMouseEnter", "", "Docs/Classes/SMyButton/Functions/OnMouseEnter.html", ["on", "mouse", "enter"], "SMyButton");
addToContainers_function("OnMouseLeave", "", "Docs/Classes/SMyButton/Functions/OnMouseLeave.html", ["on", "mouse", "leave"], "SMyButton");
addToContainers_function("ComputeDesiredSize", "", "Docs/Classes/SMyButton/Functions/ComputeDesiredSize.html", ["compute", "desired", "size"], "SMyButton");
addToContainers_function("GetImage", "Just like SButton::GetBorder()", "Docs/Classes/SMyButton/Functions/GetImage.html", ["get", "image"], "SMyButton");
addToContainers_function("PlayHoverSound", "", "Docs/Classes/SMyButton/Functions/PlayHoverSound.html", ["play", "hover", "sound"], "SMyButton");
addToContainers_function("PlayPressedByLMBSound", "", "Docs/Classes/SMyButton/Functions/PlayPressedByLMBSound.html", ["play", "pressed", "by", "l", "m", "b", "sound"], "SMyButton");
addToContainers_function("PlayPressedByRMBSound", "", "Docs/Classes/SMyButton/Functions/PlayPressedByRMBSound.html", ["play", "pressed", "by", "r", "m", "b", "sound"], "SMyButton");
addToContainers_function("GetOnLeftMouseButtonPressDelegate", "", "Docs/Classes/SMyButton/Functions/GetOnLeftMouseButtonPressDelegate.html", ["get", "on", "left", "mouse", "button", "press", "delegate"], "SMyButton");
addToContainers_function("GetOnRightMouseButtonPressDelegate", "", "Docs/Classes/SMyButton/Functions/GetOnRightMouseButtonPressDelegat.html", ["get", "on", "right", "mouse", "button", "press", "delegate"], "SMyButton");
addToContainers_function("GetOnLeftMouseButtonReleasedDelegate", "", "Docs/Classes/SMyButton/Functions/GetOnLeftMouseButtonReleasedDeleg.html", ["get", "on", "left", "mouse", "button", "released", "delegate"], "SMyButton");
addToContainers_function("GetOnRightMouseButtonReleasedDelegate", "", "Docs/Classes/SMyButton/Functions/GetOnRightMouseButtonReleasedDele.html", ["get", "on", "right", "mouse", "button", "released", "delegate"], "SMyButton");
addToContainers_function("SetNormalImage", "", "Docs/Classes/SMyButton/Functions/SetNormalImage.html", ["set", "normal", "image"], "SMyButton");
addToContainers_function("SetHoverImage", "", "Docs/Classes/SMyButton/Functions/SetHoverImage.html", ["set", "hover", "image"], "SMyButton");
addToContainers_function("SetPressedImage", "", "Docs/Classes/SMyButton/Functions/SetPressedImage.html", ["set", "pressed", "image"], "SMyButton");
addToContainers_function("SetHighlightedImage", "", "Docs/Classes/SMyButton/Functions/SetHighlightedImage.html", ["set", "highlighted", "image"], "SMyButton");
addToContainers_function("SetHoveredSound", "", "Docs/Classes/SMyButton/Functions/SetHoveredSound.html", ["set", "hovered", "sound"], "SMyButton");
addToContainers_function("SetPressedByLMBSound", "", "Docs/Classes/SMyButton/Functions/SetPressedByLMBSound.html", ["set", "pressed", "by", "l", "m", "b", "sound"], "SMyButton");
addToContainers_function("SetPressedByRMBSound", "", "Docs/Classes/SMyButton/Functions/SetPressedByRMBSound.html", ["set", "pressed", "by", "r", "m", "b", "sound"], "SMyButton");
addToContainers_function("SetIgnoreHoveredImage", "", "Docs/Classes/SMyButton/Functions/SetIgnoreHoveredImage.html", ["set", "ignore", "hovered", "image"], "SMyButton");
addToContainers_function("SetIgnorePressedImage", "", "Docs/Classes/SMyButton/Functions/SetIgnorePressedImage.html", ["set", "ignore", "pressed", "image"], "SMyButton");
addToContainers_function("SetPC", "", "Docs/Classes/SMyButton/Functions/SetPC.html", ["set", "p", "c"], "SMyButton");
addToContainers_function("SetOwningWidget", "Set the UMG widget that wraps around this", "Docs/Classes/SMyButton/Functions/SetOwningWidget.html", ["set", "owning", "widget"], "SMyButton");
addToContainers_function("SetUserWidgetOwnerButton", "Different from SetOwningWidget", "Docs/Classes/SMyButton/Functions/SetUserWidgetOwnerButton.html", ["set", "user", "widget", "owner", "button"], "SMyButton");
addToContainers_function("SetIsPressedByLMB", "", "Docs/Classes/SMyButton/Functions/SetIsPressedByLMB.html", ["set", "is", "pressed", "by", "l", "m", "b"], "SMyButton");
addToContainers_function("SetIsPressedByRMB", "", "Docs/Classes/SMyButton/Functions/SetIsPressedByRMB.html", ["set", "is", "pressed", "by", "r", "m", "b"], "SMyButton");
addToContainers_function("SetIsHighlighted", "", "Docs/Classes/SMyButton/Functions/SetIsHighlighted.html", ["set", "is", "highlighted"], "SMyButton");
addToContainers_function("ForceUnhover", "", "Docs/Classes/SMyButton/Functions/ForceUnhover.html", ["force", "unhover"], "SMyButton");
addToContainers_function("PlaySound", "Plays a sound similar to how FSlateApplication plays one except it takes a USoundBase ptr instead of a FSlateSound. Doesn\'t really belong in this class - any widget can call it", "Docs/Classes/SMyButton/Functions/PlaySound.html", ["play", "sound"], "SMyButton");
addToContainers_variable("NormalImage", "Brush resource that represents a button", "Docs/Classes/SMyButton/Variables/NormalImage.html", ["normal", "image"], "SMyButton");
addToContainers_variable("HoverImage", "Brush resource that represents a button when it is hovered", "Docs/Classes/SMyButton/Variables/HoverImage.html", ["hover", "image"], "SMyButton");
addToContainers_variable("PressedImage", "Brush resource that represents a button when it is pressed", "Docs/Classes/SMyButton/Variables/PressedImage.html", ["pressed", "image"], "SMyButton");
addToContainers_variable("HighlightedImage", "Brush resource that represents a button when it is highlighted", "Docs/Classes/SMyButton/Variables/HighlightedImage.html", ["highlighted", "image"], "SMyButton");
addToContainers_variable("OnLeftMouseButtonPressed", "I don\'t actually need the mouse position data with these events since I get it in the player controller code, but if I ever do then change these to FOnPointerEvent", "Docs/Classes/SMyButton/Variables/OnLeftMouseButtonPressed.html", ["on", "left", "mouse", "button", "pressed"], "SMyButton");
addToContainers_variable("OnRightMouseButtonPressed", "", "Docs/Classes/SMyButton/Variables/OnRightMouseButtonPressed.html", ["on", "right", "mouse", "button", "pressed"], "SMyButton");
addToContainers_variable("OnLeftMouseButtonReleased", "", "Docs/Classes/SMyButton/Variables/OnLeftMouseButtonReleased.html", ["on", "left", "mouse", "button", "released"], "SMyButton");
addToContainers_variable("OnRightMouseButtonReleased", "", "Docs/Classes/SMyButton/Variables/OnRightMouseButtonReleased.html", ["on", "right", "mouse", "button", "released"], "SMyButton");
addToContainers_variable("HoveredSound", "The sound to play when the button is hovered", "Docs/Classes/SMyButton/Variables/HoveredSound.html", ["hovered", "sound"], "SMyButton");
addToContainers_variable("PressedByLMBSound", "The sound to play when the button is pressed by the LMB", "Docs/Classes/SMyButton/Variables/PressedByLMBSound.html", ["pressed", "by", "l", "m", "b", "sound"], "SMyButton");
addToContainers_variable("PressedByRMBSound", "The sound to play when the button is pressed by the RMB", "Docs/Classes/SMyButton/Variables/PressedByRMBSound.html", ["pressed", "by", "r", "m", "b", "sound"], "SMyButton");
addToContainers_variable("1", "A time when a button is \'highlighted\' is say when you press the button/hotkey for an ability but then you still have to choose a target. During that time the button is called \'highlighted\'", "Docs/Classes/SMyButton/Variables/1.html", [], "SMyButton");
addToContainers_variable("1", "True if this button is currently in a pressed state", "Docs/Classes/SMyButton/Variables/1_1.html", [], "SMyButton");
addToContainers_variable("1", "", "Docs/Classes/SMyButton/Variables/1_2.html", [], "SMyButton");
addToContainers_variable("1", "If true then never use the image even if it is valid", "Docs/Classes/SMyButton/Variables/1_3.html", [], "SMyButton");
addToContainers_variable("1", "", "Docs/Classes/SMyButton/Variables/1_4.html", [], "SMyButton");
addToContainers_variable("PC", "Local player controller", "Docs/Classes/SMyButton/Variables/PC.html", [], "SMyButton");
addToContainers_variable("UMGWidget", "The UMG widget that this widget belongs to", "Docs/Classes/SMyButton/Variables/UMGWidget.html", ["m", "g", "widget"], "SMyButton");
addToContainers_variable("UserWidgetButtonOwner", "", "Docs/Classes/SMyButton/Variables/UserWidgetButtonOwner.html", ["user", "widget", "button", "owner"], "SMyButton");
addToContainers_variable("BorderImage", "", "Docs/Classes/SMyButton/Variables/BorderImage.html", ["border", "image"], "SMyButton");
addToContainers_variable("DesiredSizeScale", "", "Docs/Classes/SMyButton/Variables/DesiredSizeScale.html", ["desired", "size", "scale"], "SMyButton");
addToContainers_variable("BorderBackgroundColor", "", "Docs/Classes/SMyButton/Variables/BorderBackgroundColor.html", ["border", "background", "color"], "SMyButton");
addToContainers_class("UGameMessageWidget", "A widget that displays a message like \"lobby is full\"", "Docs/Classes/UGameMessageWidget/UGameMessageWidget.html", ["game", "message", "widget"], "");
addToContainers_function("Setup", "", "Docs/Classes/UGameMessageWidget/Functions/Setup.html", [], "UGameMessageWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "", "Docs/Classes/UGameMessageWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "UGameMessageWidget");
addToContainers_function("SetMessage", "Set the text to be displayed @param InMessage - text to display with widget @param bSetColor - if true then 3rd param can be specified to set color of text", "Docs/Classes/UGameMessageWidget/Functions/SetMessage.html", ["set", "message"], "UGameMessageWidget");
addToContainers_variable("", "Text widget that displays the message", "Docs/Classes/UGameMessageWidget/Variables/.html", [], "UGameMessageWidget");
addToContainers_variable("", "Button that returns player to previous widget", "Docs/Classes/UGameMessageWidget/Variables/_1.html", [], "UGameMessageWidget");
addToContainers_variable("OriginalTextColor", "The color of Text_Message set in editor", "Docs/Classes/UGameMessageWidget/Variables/OriginalTextColor.html", ["original", "text", "color"], "UGameMessageWidget");
addToContainers_class("UChatOutputSingleMessageWidget", "Widget for a single message received that should be placed in chat log. Tips on how to create this: Remove the canvas panel then just add a text block to the widget. Rename it Text_Message and make it a variable. Under the category \"Wrapping\" enable \"Auto Wrap Text\". In advanced options change the wrapping policy to \"Allow Per Character Wrapping\"", "Docs/Classes/UChatOutputSingleMessageWidget/UChatOutputSingleMessageWidget.html", ["chat", "output", "single", "message", "widget"], "");
addToContainers_function("UChatOutputSingleMessageWidget", "", "Docs/Classes/UChatOutputSingleMessageWidget/Functions/UChatOutputSingleMessageWidget.html", ["chat", "output", "single", "message", "widget"], "UChatOutputSingleMessageWidget");
addToContainers_function("Setup", "", "Docs/Classes/UChatOutputSingleMessageWidget/Functions/Setup.html", [], "UChatOutputSingleMessageWidget");
addToContainers_function("SetMessage", "Set the text for Text_Message", "Docs/Classes/UChatOutputSingleMessageWidget/Functions/SetMessage.html", ["set", "message"], "UChatOutputSingleMessageWidget");
addToContainers_function("PlayReceivedAnim", "Play animation for when this message is received", "Docs/Classes/UChatOutputSingleMessageWidget/Functions/PlayReceivedAnim.html", ["play", "received", "anim"], "UChatOutputSingleMessageWidget");
addToContainers_function("OnAnimationFinished_Implementation", "Overriding this from UMainMenuWidgetBase so it does nothing", "Docs/Classes/UChatOutputSingleMessageWidget/Functions/OnAnimationFinished_Implementatio.html", ["on", "animation", "finished_", "implementation"], "UChatOutputSingleMessageWidget");
addToContainers_variable("", "Animation to play when the message is received.", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/.html", [], "UChatOutputSingleMessageWidget");
addToContainers_variable("", "Anim to play when message is received", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/_1.html", [], "UChatOutputSingleMessageWidget");
addToContainers_variable("", "The text that shows the message. Is pretty core to this widget so shouldn\'t be optional", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/_2.html", [], "UChatOutputSingleMessageWidget");
addToContainers_variable("OriginalTextColor", "", "Docs/Classes/UChatOutputSingleMessageWidget/Variables/OriginalTextColor.html", ["original", "text", "color"], "UChatOutputSingleMessageWidget");
addToContainers_class("ULobbyChat", "Widget for the chat in a lobby. Made its own seperate widget so singleplayer lobbies can hide all chat related widgets easily", "Docs/Classes/ULobbyChat/ULobbyChat.html", ["lobby", "chat"], "");
addToContainers_function("ULobbyChat", "", "Docs/Classes/ULobbyChat/Functions/ULobbyChat.html", ["lobby", "chat"], "ULobbyChat");
addToContainers_function("Setup", "", "Docs/Classes/ULobbyChat/Functions/Setup.html", [], "ULobbyChat");
addToContainers_function("UIBinding_OnChatInputTextChanged", "", "Docs/Classes/ULobbyChat/Functions/UIBinding_OnChatInputTextChanged.html", ["i", "binding_", "on", "chat", "input", "text", "changed"], "ULobbyChat");
addToContainers_function("UIBinding_OnChatInputTextCommitted", "", "Docs/Classes/ULobbyChat/Functions/UIBinding_OnChatInputTextCommitte.html", ["i", "binding_", "on", "chat", "input", "text", "committed"], "ULobbyChat");
addToContainers_function("CreateAndAddOutputSpacer", "Create a spacer and add it to the output panel", "Docs/Classes/ULobbyChat/Functions/CreateAndAddOutputSpacer.html", ["create", "and", "add", "output", "spacer"], "ULobbyChat");
addToContainers_function("RemoveMessagesToFit", "Remove messages from Panel_Output until all the messages in it will fit. Remove oldest messages first", "Docs/Classes/ULobbyChat/Functions/RemoveMessagesToFit.html", ["remove", "messages", "to", "fit"], "ULobbyChat");
addToContainers_function("OnChildAddedToOutputPanel", "Called soon after a single message widget is added to Panel_Output @param WidgetJustAdded - widget that was just added @param PanelSlot - the slot WidgetJustAdded belongs to", "Docs/Classes/ULobbyChat/Functions/OnChildAddedToOutputPanel.html", ["on", "child", "added", "to", "output", "panel"], "ULobbyChat");
addToContainers_function("ShouldPlayMessageReceivedSound", "Return whether we should play a sound because a message was just received", "Docs/Classes/ULobbyChat/Functions/ShouldPlayMessageReceivedSound.html", ["should", "play", "message", "received", "sound"], "ULobbyChat");
addToContainers_function("SetupFor", "", "Docs/Classes/ULobbyChat/Functions/SetupFor.html", ["setup", "for"], "ULobbyChat");
addToContainers_function("OnChatMessageReceived", "Called when a chat message is received @param SendersName - name of player who sent message @param Message - what they typed", "Docs/Classes/ULobbyChat/Functions/OnChatMessageReceived.html", ["on", "chat", "message", "received"], "ULobbyChat");
addToContainers_function("ClearChat", "", "Docs/Classes/ULobbyChat/Functions/ClearChat.html", ["clear", "chat"], "ULobbyChat");
addToContainers_variable("NumChatLogMessages", "Number of chat messages in log", "Docs/Classes/ULobbyChat/Variables/NumChatLogMessages.html", ["num", "chat", "log", "messages"], "ULobbyChat");
addToContainers_variable("", "Max length a chat message can be ignoring any extra things tagged onto the message like the sender\'s name", "Docs/Classes/ULobbyChat/Variables/.html", [], "ULobbyChat");
addToContainers_variable("", "What to put at the start of the text block for message input. This does not get sent", "Docs/Classes/ULobbyChat/Variables/_1.html", [], "ULobbyChat");
addToContainers_variable("", "For received messages, what to put before chat message sender\'s name", "Docs/Classes/ULobbyChat/Variables/_2.html", [], "ULobbyChat");
addToContainers_variable("", "For received messages, what to put in between the message sender\'s name and what they typed", "Docs/Classes/ULobbyChat/Variables/_3.html", [], "ULobbyChat");
addToContainers_variable("", "Box to type chat into", "Docs/Classes/ULobbyChat/Variables/_4.html", [], "ULobbyChat");
addToContainers_variable("", "The panel widget that holds all the chat messages received from others. Must either be a vertical box or a scroll box. Actually only vertical box is an option at the moment Single message widgets are added using UPanelWidget::AddChild and ULobbyChat::OnChildAddedToOutputPanel will be called after. There is an assumption no children will be added to this panel in editor, and only the single message widgets should be added to it at runtime", "Docs/Classes/ULobbyChat/Variables/_5.html", [], "ULobbyChat");
addToContainers_variable("", "The widget to use for each seperate message that should be in the chat output", "Docs/Classes/ULobbyChat/Variables/_6.html", [], "ULobbyChat");
addToContainers_variable("", "This is for widget recycling only. The last widget that was removed from chat log", "Docs/Classes/ULobbyChat/Variables/_7.html", [], "ULobbyChat");
addToContainers_variable("", "Sound to play when a message is received", "Docs/Classes/ULobbyChat/Variables/_8.html", [], "ULobbyChat");
addToContainers_variable("TimeAtLastMessageReceived", "GetWorld()->GetRealTimeSeconds() last time a message was received. For ShouldPlayMessageReceivedSound", "Docs/Classes/ULobbyChat/Variables/TimeAtLastMessageReceived.html", ["time", "at", "last", "message", "received"], "ULobbyChat");
addToContainers_class("ULobbySlot", "Widget for a slot in a lobby", "Docs/Classes/ULobbySlot/ULobbySlot.html", ["lobby", "slot"], "");
addToContainers_function("ULobbySlot", "", "Docs/Classes/ULobbySlot/Functions/ULobbySlot.html", ["lobby", "slot"], "ULobbySlot");
addToContainers_function("PreSetup", "", "Docs/Classes/ULobbySlot/Functions/PreSetup.html", ["pre", "setup"], "ULobbySlot");
addToContainers_function("Setup", "", "Docs/Classes/ULobbySlot/Functions/Setup.html", [], "ULobbySlot");
addToContainers_function("UIBinding_OnAddCPUPlayerButtonClicked", "", "Docs/Classes/ULobbySlot/Functions/UIBinding_OnAddCPUPlayerButtonCli.html", ["i", "binding_", "on", "add", "c", "p", "u", "player", "button", "clicked"], "ULobbySlot");
addToContainers_function("UIBinding_OnCPUDifficultySelectionChanged", "", "Docs/Classes/ULobbySlot/Functions/UIBinding_OnCPUDifficultySelectio.html", ["i", "binding_", "on", "c", "p", "u", "difficulty", "selection", "changed"], "ULobbySlot");
addToContainers_function("UIBinding_OnKickButtonClicked", "", "Docs/Classes/ULobbySlot/Functions/UIBinding_OnKickButtonClicked.html", ["i", "binding_", "on", "kick", "button", "clicked"], "ULobbySlot");
addToContainers_function("IsLocalPlayerHost", "Return whether the local player controller is host or not", "Docs/Classes/ULobbySlot/Functions/IsLocalPlayerHost.html", ["is", "local", "player", "host"], "ULobbySlot");
addToContainers_function("UIBinding_OnCloseButtonClicked", "", "Docs/Classes/ULobbySlot/Functions/UIBinding_OnCloseButtonClicked.html", ["i", "binding_", "on", "close", "button", "clicked"], "ULobbySlot");
addToContainers_function("UIBinding_OnFactionSelectionChanged", "", "Docs/Classes/ULobbySlot/Functions/UIBinding_OnFactionSelectionChang.html", ["i", "binding_", "on", "faction", "selection", "changed"], "ULobbySlot");
addToContainers_function("UIBinding_OnTeamSelectionChanged", "", "Docs/Classes/ULobbySlot/Functions/UIBinding_OnTeamSelectionChanged.html", ["i", "binding_", "on", "team", "selection", "changed"], "ULobbySlot");
addToContainers_function("Close", "", "Docs/Classes/ULobbySlot/Functions/Close.html", [], "ULobbySlot");
addToContainers_function("SetSlotVisibility", "", "Docs/Classes/ULobbySlot/Functions/SetSlotVisibility.html", ["set", "slot", "visibility"], "ULobbySlot");
addToContainers_function("SetWidgetVisibility", "", "Docs/Classes/ULobbySlot/Functions/SetWidgetVisibility.html", ["set", "widget", "visibility"], "ULobbySlot");
addToContainers_function("GetSlotIndex", "", "Docs/Classes/ULobbySlot/Functions/GetSlotIndex.html", ["get", "slot", "index"], "ULobbySlot");
addToContainers_function("HasHumanPlayer", "True if slot has human player in it", "Docs/Classes/ULobbySlot/Functions/HasHumanPlayer.html", ["has", "human", "player"], "ULobbySlot");
addToContainers_function("HasCPUPlayer", "True if slot has CPU player in it", "Docs/Classes/ULobbySlot/Functions/HasCPUPlayer.html", ["has", "c", "p", "u", "player"], "ULobbySlot");
addToContainers_function("GetPlayerState", "", "Docs/Classes/ULobbySlot/Functions/GetPlayerState.html", ["get", "player", "state"], "ULobbySlot");
addToContainers_function("SetPlayerState", "", "Docs/Classes/ULobbySlot/Functions/SetPlayerState.html", ["set", "player", "state"], "ULobbySlot");
addToContainers_function("GetStatus", "", "Docs/Classes/ULobbySlot/Functions/GetStatus.html", ["get", "status"], "ULobbySlot");
addToContainers_function("SetStatus", "", "Docs/Classes/ULobbySlot/Functions/SetStatus.html", ["set", "status"], "ULobbySlot");
addToContainers_function("GetCPUDifficulty", "", "Docs/Classes/ULobbySlot/Functions/GetCPUDifficulty.html", ["get", "c", "p", "u", "difficulty"], "ULobbySlot");
addToContainers_function("SetCPUDifficulty", "", "Docs/Classes/ULobbySlot/Functions/SetCPUDifficulty.html", ["set", "c", "p", "u", "difficulty"], "ULobbySlot");
addToContainers_function("GetTeam", "", "Docs/Classes/ULobbySlot/Functions/GetTeam.html", ["get", "team"], "ULobbySlot");
addToContainers_function("SetTeam", "", "Docs/Classes/ULobbySlot/Functions/SetTeam.html", ["set", "team"], "ULobbySlot");
addToContainers_function("GetFaction", "", "Docs/Classes/ULobbySlot/Functions/GetFaction.html", ["get", "faction"], "ULobbySlot");
addToContainers_function("SetFaction", "", "Docs/Classes/ULobbySlot/Functions/SetFaction.html", ["set", "faction"], "ULobbySlot");
addToContainers_function("UpdateVisibilities", "Update clickability of buttons or visibility due to change", "Docs/Classes/ULobbySlot/Functions/UpdateVisibilities.html", ["update", "visibilities"], "ULobbySlot");
addToContainers_function("IsMultiplayerLobby", "", "Docs/Classes/ULobbySlot/Functions/IsMultiplayerLobby.html", ["is", "multiplayer", "lobby"], "ULobbySlot");
addToContainers_variable("Status", "The status of the slot e.g. whether it is closed, has CPU player etc", "Docs/Classes/ULobbySlot/Variables/Status.html", [], "ULobbySlot");
addToContainers_variable("", "Reference to player state for player in this slot. Null if CPU player", "Docs/Classes/ULobbySlot/Variables/.html", [], "ULobbySlot");
addToContainers_variable("SlotIndex", "Index in owning lobby slots box\'s Slots array", "Docs/Classes/ULobbySlot/Variables/SlotIndex.html", ["slot", "index"], "ULobbySlot");
addToContainers_variable("", "This text shows a human players profile name as well as text indicating if the slot is open/closed/CPU", "Docs/Classes/ULobbySlot/Variables/_1.html", [], "ULobbySlot");
addToContainers_variable("", "", "Docs/Classes/ULobbySlot/Variables/_2.html", [], "ULobbySlot");
addToContainers_variable("", "Combo box to select faction", "Docs/Classes/ULobbySlot/Variables/_3.html", [], "ULobbySlot");
addToContainers_variable("", "Shows the faction\'s display image", "Docs/Classes/ULobbySlot/Variables/_4.html", [], "ULobbySlot");
addToContainers_variable("", "Combo box to select team", "Docs/Classes/ULobbySlot/Variables/_5.html", [], "ULobbySlot");
addToContainers_variable("", "Host only. Button to add a CPU player", "Docs/Classes/ULobbySlot/Variables/_6.html", [], "ULobbySlot");
addToContainers_variable("", "Text to show CPU player difficulty. Should be blank for human players", "Docs/Classes/ULobbySlot/Variables/_7.html", [], "ULobbySlot");
addToContainers_variable("", "Host only. Button to remove what is in slot. In multiplayer this would kick the player", "Docs/Classes/ULobbySlot/Variables/_8.html", [], "ULobbySlot");
addToContainers_variable("", "Host only. Close slot so no one can join but only if unoccupied. Re-open slot from lobby widget\'s add slot button", "Docs/Classes/ULobbySlot/Variables/_9.html", [], "ULobbySlot");
addToContainers_variable("", "Reference to lobby widget this is a part of", "Docs/Classes/ULobbySlot/Variables/_10.html", [], "ULobbySlot");
addToContainers_struct("FTextAndSound", "Simple struct that holds a FText and a USoundBase", "Docs/Structs/FTextAndSound/FTextAndSound.html", ["text", "and", "sound"], "");
addToContainers_function("FTextAndSound", "", "Docs/Structs/FTextAndSound/Functions/FTextAndSound.html", ["text", "and", "sound"], "FTextAndSound");
addToContainers_function("FTextAndSound", "", "Docs/Structs/FTextAndSound/Functions/FTextAndSound_1.html", ["text", "and", "sound"], "FTextAndSound");
addToContainers_function("GetMessage", "", "Docs/Structs/FTextAndSound/Functions/GetMessage.html", ["get", "message"], "FTextAndSound");
addToContainers_function("GetSound", "", "Docs/Structs/FTextAndSound/Functions/GetSound.html", ["get", "sound"], "FTextAndSound");
addToContainers_variable("", "", "Docs/Structs/FTextAndSound/Variables/.html", [], "FTextAndSound");
addToContainers_variable("", "", "Docs/Structs/FTextAndSound/Variables/_1.html", [], "FTextAndSound");
addToContainers_class("ULobbyWidget", "Main widget for the match lobby Some notes: If buttons aren\'t clickable then may have to increase their Z order. The other user widgets like Widget_Chat if anchored to the whole screen can get in the way", "Docs/Classes/ULobbyWidget/ULobbyWidget.html", ["lobby", "widget"], "");
addToContainers_function("ULobbyWidget", "", "Docs/Classes/ULobbyWidget/Functions/ULobbyWidget.html", ["lobby", "widget"], "ULobbyWidget");
addToContainers_function("Setup", "", "Docs/Classes/ULobbyWidget/Functions/Setup.html", [], "ULobbyWidget");
addToContainers_function("SetupSlots", "", "Docs/Classes/ULobbyWidget/Functions/SetupSlots.html", ["setup", "slots"], "ULobbyWidget");
addToContainers_function("OnLobbySlotConstructed", "Called right after AddChild is called on panel to give user a chance to adjust position of slot", "Docs/Classes/ULobbyWidget/Functions/OnLobbySlotConstructed.html", ["on", "lobby", "slot", "constructed"], "ULobbyWidget");
addToContainers_function("IsHost", "Return true if local player is the host for the lobby", "Docs/Classes/ULobbyWidget/Functions/IsHost.html", ["is", "host"], "ULobbyWidget");
addToContainers_function("UIBinding_OnStartMatchButtonClicked", "==========================================================================================", "Docs/Classes/ULobbyWidget/Functions/UIBinding_OnStartMatchButtonClick.html", ["i", "binding_", "on", "start", "match", "button", "clicked"], "ULobbyWidget");
addToContainers_function("OnStartSessionComplete", "", "Docs/Classes/ULobbyWidget/Functions/OnStartSessionComplete.html", ["on", "start", "session", "complete"], "ULobbyWidget");
addToContainers_function("GatherMatchInfo", "Take all the info set in the widgets and put it into a struct, then pass this struct onto the game instance which will then create match from it", "Docs/Classes/ULobbyWidget/Functions/GatherMatchInfo.html", ["gather", "match", "info"], "ULobbyWidget");
addToContainers_function("GetNumHumanPlayers", "Returns number of slots that have human players in them. Should always be at least 1 because host @return - number of human players in lobby, or -1 if cannot determine", "Docs/Classes/ULobbyWidget/Functions/GetNumHumanPlayers.html", ["get", "num", "human", "players"], "ULobbyWidget");
addToContainers_function("CanLockSlots", "Whether slots can be locked", "Docs/Classes/ULobbyWidget/Functions/CanLockSlots.html", ["can", "lock", "slots"], "ULobbyWidget");
addToContainers_function("CanStartMatch", "Returns whether match can start @param bTryShowWaring - if true then a warning will try to be displayed on screen, subject to function ShouldShowNoStartWarning() @return - true if the match can start", "Docs/Classes/ULobbyWidget/Functions/CanStartMatch.html", ["can", "start", "match"], "ULobbyWidget");
addToContainers_function("ShouldShowNoStartWarning", "Return true if a warning widget should be shown on screen", "Docs/Classes/ULobbyWidget/Functions/ShouldShowNoStartWarning.html", ["should", "show", "no", "start", "warning"], "ULobbyWidget");
addToContainers_function("ShouldPlayNoStartSound", "Return true if a sound should be played when trying to start match but cannot", "Docs/Classes/ULobbyWidget/Functions/ShouldPlayNoStartSound.html", ["should", "play", "no", "start", "sound"], "ULobbyWidget");
addToContainers_function("GetNumPlayers", "Get the number human and CPU players in the lobby. Includes observers", "Docs/Classes/ULobbyWidget/Functions/GetNumPlayers.html", ["get", "num", "players"], "ULobbyWidget");
addToContainers_function("HaveDifferentTeams", "True if all players in lobby are not on the same team. Observers do not count towards any team", "Docs/Classes/ULobbyWidget/Functions/HaveDifferentTeams.html", ["have", "different", "teams"], "ULobbyWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "", "Docs/Classes/ULobbyWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "ULobbyWidget");
addToContainers_function("UIBinding_OnAddSlotButtonClicked", "", "Docs/Classes/ULobbyWidget/Functions/UIBinding_OnAddSlotButtonClicked.html", ["i", "binding_", "on", "add", "slot", "button", "clicked"], "ULobbyWidget");
addToContainers_function("UIBinding_OnLockSlotsButtonClicked", "", "Docs/Classes/ULobbyWidget/Functions/UIBinding_OnLockSlotsButtonClicke.html", ["i", "binding_", "on", "lock", "slots", "button", "clicked"], "ULobbyWidget");
addToContainers_function("UIBinding_OnChangeMapButtonClicked", "", "Docs/Classes/ULobbyWidget/Functions/UIBinding_OnChangeMapButtonClicke.html", ["i", "binding_", "on", "change", "map", "button", "clicked"], "ULobbyWidget");
addToContainers_function("DoNothing", "", "Docs/Classes/ULobbyWidget/Functions/DoNothing.html", ["do", "nothing"], "ULobbyWidget");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay before calling function", "Docs/Classes/ULobbyWidget/Functions/Delay).html", [], "ULobbyWidget");
addToContainers_function("NotifyPlayerLeft", "Called by game mode when a player leaves the lobby", "Docs/Classes/ULobbyWidget/Functions/NotifyPlayerLeft.html", ["notify", "player", "left"], "ULobbyWidget");
addToContainers_function("ExitLobby", "Leave lobby. Callable as host or client", "Docs/Classes/ULobbyWidget/Functions/ExitLobby.html", ["exit", "lobby"], "ULobbyWidget");
addToContainers_function("AreSlotsLocked", "If true the host has locked any changes from being made. No new players can join, and players can only leave or send chat messages", "Docs/Classes/ULobbyWidget/Functions/AreSlotsLocked.html", ["are", "slots", "locked"], "ULobbyWidget");
addToContainers_function("IsMultiplayerLobby", "Return true if LAN or online lobby", "Docs/Classes/ULobbyWidget/Functions/IsMultiplayerLobby.html", ["is", "multiplayer", "lobby"], "ULobbyWidget");
addToContainers_function("OnChatMessageReceived", "Called when chat message is received in lobby @param SendersName - name of player who sent the message @param Message - what the player typed", "Docs/Classes/ULobbyWidget/Functions/OnChatMessageReceived.html", ["on", "chat", "message", "received"], "ULobbyWidget");
addToContainers_function("UpdateMapDisplay", "Lets another widget update what map info is displayed", "Docs/Classes/ULobbyWidget/Functions/UpdateMapDisplay.html", ["update", "map", "display"], "ULobbyWidget");
addToContainers_function("GetLobbyType", "Functions to be called from game state to query and change appearance of widget", "Docs/Classes/ULobbyWidget/Functions/GetLobbyType.html", ["get", "lobby", "type"], "ULobbyWidget");
addToContainers_function("SetLobbyType", "", "Docs/Classes/ULobbyWidget/Functions/SetLobbyType.html", ["set", "lobby", "type"], "ULobbyWidget");
addToContainers_function("SetLobbyName", "", "Docs/Classes/ULobbyWidget/Functions/SetLobbyName.html", ["set", "lobby", "name"], "ULobbyWidget");
addToContainers_function("SetStartingResources", "", "Docs/Classes/ULobbyWidget/Functions/SetStartingResources.html", ["set", "starting", "resources"], "ULobbyWidget");
addToContainers_function("SetDefeatCondition", "", "Docs/Classes/ULobbyWidget/Functions/SetDefeatCondition.html", ["set", "defeat", "condition"], "ULobbyWidget");
addToContainers_function("SetMap", "", "Docs/Classes/ULobbyWidget/Functions/SetMap.html", ["set", "map"], "ULobbyWidget");
addToContainers_function("SetMap", "", "Docs/Classes/ULobbyWidget/Functions/SetMap_1.html", ["set", "map"], "ULobbyWidget");
addToContainers_function("SetAreSlotsLocked", "", "Docs/Classes/ULobbyWidget/Functions/SetAreSlotsLocked.html", ["set", "are", "slots", "locked"], "ULobbyWidget");
addToContainers_function("UpdatePlayerStartAssignments", "", "Docs/Classes/ULobbyWidget/Functions/UpdatePlayerStartAssignments.html", ["update", "player", "start", "assignments"], "ULobbyWidget");
addToContainers_function("GetSlots", "", "Docs/Classes/ULobbyWidget/Functions/GetSlots.html", ["get", "slots"], "ULobbyWidget");
addToContainers_function("GetSlot", "", "Docs/Classes/ULobbyWidget/Functions/GetSlot.html", ["get", "slot"], "ULobbyWidget");
addToContainers_function("UpdateVisibilities", "Function to call when the state of the lobby changes. Change visibility of various widgets like making button unclickable for example or making a new slot appear", "Docs/Classes/ULobbyWidget/Functions/UpdateVisibilities.html", ["update", "visibilities"], "ULobbyWidget");
addToContainers_function("ClearChat", "Clear chat input and output", "Docs/Classes/ULobbyWidget/Functions/ClearChat.html", ["clear", "chat"], "ULobbyWidget");
addToContainers_variable("SINGLEPLAYER_DEFAULT_LOBBY_NAME", "When creating a sigleplayer lobby for the first time what to call it", "Docs/Classes/ULobbyWidget/Variables/SINGLEPLAYER_DEFAULT_LOBBY_NAME.html", ["i", "n", "g", "l", "e", "p", "l", "a", "y", "e", "r_", "d", "e", "f", "a", "u", "l", "t_", "l", "o", "b", "b", "y_", "n", "a", "m", "e"], "ULobbyWidget");
addToContainers_variable("DEFAULT_NUM_CPU_OPPONENTS", "When creating a singleplayer lobby for the first time the default number of CPU opponents to have", "Docs/Classes/ULobbyWidget/Variables/DEFAULT_NUM_CPU_OPPONENTS.html", ["e", "f", "a", "u", "l", "t_", "n", "u", "m_", "c", "p", "u_", "o", "p", "p", "o", "n", "e", "n", "t", "s"], "ULobbyWidget");
addToContainers_variable("DEFAULT_CPU_DIFFICULTY", "When adding CPU players their default difficulty", "Docs/Classes/ULobbyWidget/Variables/DEFAULT_CPU_DIFFICULTY.html", ["e", "f", "a", "u", "l", "t_", "c", "p", "u_", "d", "i", "f", "f", "i", "c", "u", "l", "t", "y"], "ULobbyWidget");
addToContainers_variable("DEFAULT_TEAM", "When a new human/CPU joins lobby the team they are placed on", "Docs/Classes/ULobbyWidget/Variables/DEFAULT_TEAM.html", ["e", "f", "a", "u", "l", "t_", "t", "e", "a", "m"], "ULobbyWidget");
addToContainers_variable("LobbyType", "Type of match this is for e.g. LAN, offline etc", "Docs/Classes/ULobbyWidget/Variables/LobbyType.html", ["lobby", "type"], "ULobbyWidget");
addToContainers_variable("", "Whether the image displaying the map should have player start locations also shown on it so players can click on them to choose where they will start in match.", "Docs/Classes/ULobbyWidget/Variables/.html", [], "ULobbyWidget");
addToContainers_variable("", "If true the widget bound to Panel_LobbySlots will be auto populated with the lobby slot widget specified below at runtime. If false then you will need to place ULobbySlot widgets onto the widget yourself in editor. They do not have to on a panel widget. The naming scheme for them should be Widget_Slot1, Widget_Slot2. Order is important - slot 1 will be considered the \'first\' slot and is usually populated by the host. Make sure to add as many slot widgets as UStatics::MAX_NUM_PLAYERS", "Docs/Classes/ULobbyWidget/Variables/_1.html", [], "ULobbyWidget");
addToContainers_variable("", "Widget to use for a lobby slot. They will be added to Panel_LobbySlots when required.", "Docs/Classes/ULobbyWidget/Variables/_2.html", [], "ULobbyWidget");
addToContainers_variable("", "The messages and sounds to display when trying to start the game but cannot", "Docs/Classes/ULobbyWidget/Variables/_3.html", [], "ULobbyWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyWidget/Variables/_4.html", [], "ULobbyWidget");
addToContainers_variable("Map", "The map that is set for lobby", "Docs/Classes/ULobbyWidget/Variables/Map.html", [], "ULobbyWidget");
addToContainers_variable("", "Text that has lobby name - the name the player chose for the lobby", "Docs/Classes/ULobbyWidget/Variables/_5.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to start match. Only visible to host", "Docs/Classes/ULobbyWidget/Variables/_6.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to return to main menu", "Docs/Classes/ULobbyWidget/Variables/_7.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to add a slot. Only visible to host", "Docs/Classes/ULobbyWidget/Variables/_8.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to lock slots. Only visible if lobby is a multiplayer lobby and you are the host", "Docs/Classes/ULobbyWidget/Variables/_9.html", [], "ULobbyWidget");
addToContainers_variable("", "Button to change map. Only visible to host", "Docs/Classes/ULobbyWidget/Variables/_10.html", [], "ULobbyWidget");
addToContainers_variable("", "Panel widget for displaying each slot. Only relevant if bAutoPopulateSlotsPanel is true", "Docs/Classes/ULobbyWidget/Variables/_11.html", [], "ULobbyWidget");
addToContainers_variable("", "Widget displaying the match rules", "Docs/Classes/ULobbyWidget/Variables/_12.html", [], "ULobbyWidget");
addToContainers_variable("", "Displays info about the map match will be played on", "Docs/Classes/ULobbyWidget/Variables/_13.html", [], "ULobbyWidget");
addToContainers_variable("", "Image to show whether slots are locked or not", "Docs/Classes/ULobbyWidget/Variables/_14.html", [], "ULobbyWidget");
addToContainers_variable("", "Widget for chat input and output", "Docs/Classes/ULobbyWidget/Variables/_15.html", [], "ULobbyWidget");
addToContainers_variable("TimerHandle_CannotStartMatchWidget", "Timer handle for controlling how often popup widget can show for not being able to start match", "Docs/Classes/ULobbyWidget/Variables/TimerHandle_CannotStartMatchWidge.html", ["timer", "handle_", "cannot", "start", "match", "widget"], "ULobbyWidget");
addToContainers_variable("TimerHandle_CannotStartMatchSound", "Same as above but for sound", "Docs/Classes/ULobbyWidget/Variables/TimerHandle_CannotStartMatchSound.html", ["timer", "handle_", "cannot", "start", "match", "sound"], "ULobbyWidget");
addToContainers_variable("bAreSlotsLocked", "If true then players cannot change anything such as their team, faction etc. Also currently slots need to be locked in order for host to start match. A player leaving the lobby will automatically unlock slots", "Docs/Classes/ULobbyWidget/Variables/bAreSlotsLocked.html", ["are", "slots", "locked"], "ULobbyWidget");
addToContainers_variable("NumPlayersWhenStartMatchButtonPressed", "Used to know whether to start match after async start session completes", "Docs/Classes/ULobbyWidget/Variables/NumPlayersWhenStartMatchButtonPre.html", ["num", "players", "when", "start", "match", "button", "pressed"], "ULobbyWidget");
addToContainers_class("ULoadingScreen", "Loading screen when going from lobby to match", "Docs/Classes/ULoadingScreen/ULoadingScreen.html", ["loading", "screen"], "");
addToContainers_function("SetStatusText", "Set the status text", "Docs/Classes/ULoadingScreen/Functions/SetStatusText.html", ["set", "status", "text"], "ULoadingScreen");
addToContainers_variable("", "Text that shows the status of loading", "Docs/Classes/ULoadingScreen/Variables/.html", [], "ULoadingScreen");
addToContainers_class("ULobbyInfo", "A widget that can show information about a lobby when browsing for lobbies", "Docs/Classes/ULobbyInfo/ULobbyInfo.html", ["lobby", "info"], "");
addToContainers_function("Setup", "", "Docs/Classes/ULobbyInfo/Functions/Setup.html", [], "ULobbyInfo");
addToContainers_function("OnAddToList", "Called when added as child to search results. Allows for adjusting position if the default AddChild does not make it look ok", "Docs/Classes/ULobbyInfo/Functions/OnAddToList.html", ["on", "add", "to", "list"], "ULobbyInfo");
addToContainers_function("SetValues", "Set values to display from a search result", "Docs/Classes/ULobbyInfo/Functions/SetValues.html", ["set", "values"], "ULobbyInfo");
addToContainers_function("SetLobbyBrowserWidget", "", "Docs/Classes/ULobbyInfo/Functions/SetLobbyBrowserWidget.html", ["set", "lobby", "browser", "widget"], "ULobbyInfo");
addToContainers_function("UIBinding_OnSelectButtonClicked", "", "Docs/Classes/ULobbyInfo/Functions/UIBinding_OnSelectButtonClicked.html", ["i", "binding_", "on", "select", "button", "clicked"], "ULobbyInfo");
addToContainers_variable("", "Whether to show the player start locations on the map image. Which specific player is assigned to which spot will not be shown either way", "Docs/Classes/ULobbyInfo/Variables/.html", [], "ULobbyInfo");
addToContainers_variable("", "Reference to the lobby browser that owns this", "Docs/Classes/ULobbyInfo/Variables/_1.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display name of lobby host", "Docs/Classes/ULobbyInfo/Variables/_2.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display lobby name", "Docs/Classes/ULobbyInfo/Variables/_3.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display the network type e.g. LAN, online", "Docs/Classes/ULobbyInfo/Variables/_4.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to diplay the current number of players in the lobby", "Docs/Classes/ULobbyInfo/Variables/_5.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display the maximum number of players the lobby can have", "Docs/Classes/ULobbyInfo/Variables/_6.html", [], "ULobbyInfo");
addToContainers_variable("", "Image to display signalling whether lobby is password protected or not", "Docs/Classes/ULobbyInfo/Variables/_7.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display the ping in ms", "Docs/Classes/ULobbyInfo/Variables/_8.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display match rules. This one doesn\'t need any combo boxes to change options because it should only be displaying options", "Docs/Classes/ULobbyInfo/Variables/_9.html", [], "ULobbyInfo");
addToContainers_variable("", "Widget to display map info", "Docs/Classes/ULobbyInfo/Variables/_10.html", [], "ULobbyInfo");
addToContainers_variable("", "The button to click to select this lobby. Can be the root of all other widgets", "Docs/Classes/ULobbyInfo/Variables/_11.html", [], "ULobbyInfo");
addToContainers_class("ULobbyBrowserWidget", "", "Docs/Classes/ULobbyBrowserWidget/ULobbyBrowserWidget.html", ["lobby", "browser", "widget"], "");
addToContainers_function("Setup", "", "Docs/Classes/ULobbyBrowserWidget/Functions/Setup.html", [], "ULobbyBrowserWidget");
addToContainers_function("OnShown", "", "Docs/Classes/ULobbyBrowserWidget/Functions/OnShown.html", ["on", "shown"], "ULobbyBrowserWidget");
addToContainers_function("OnSearchingStarted", "", "Docs/Classes/ULobbyBrowserWidget/Functions/OnSearchingStarted.html", ["on", "searching", "started"], "ULobbyBrowserWidget");
addToContainers_function("OnSearchingComplete", "Param non-const because they are sorted", "Docs/Classes/ULobbyBrowserWidget/Functions/OnSearchingComplete.html", ["on", "searching", "complete"], "ULobbyBrowserWidget");
addToContainers_function("UIBinding_OnJoinButtonClicked", "", "Docs/Classes/ULobbyBrowserWidget/Functions/UIBinding_OnJoinButtonClicked.html", ["i", "binding_", "on", "join", "button", "clicked"], "ULobbyBrowserWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "", "Docs/Classes/ULobbyBrowserWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "ULobbyBrowserWidget");
addToContainers_function("UIBinding_OnRefreshButtonClicked", "", "Docs/Classes/ULobbyBrowserWidget/Functions/UIBinding_OnRefreshButtonClicked.html", ["i", "binding_", "on", "refresh", "button", "clicked"], "ULobbyBrowserWidget");
addToContainers_function("UIBinding_OnDirectIPConnectTextCommitted", "", "Docs/Classes/ULobbyBrowserWidget/Functions/UIBinding_OnDirectIPConnectTextCo.html", ["i", "binding_", "on", "direct", "i", "p", "connect", "text", "committed"], "ULobbyBrowserWidget");
addToContainers_function("FindSessions", "Call to populate server list with up to date sessions", "Docs/Classes/ULobbyBrowserWidget/Functions/FindSessions.html", ["find", "sessions"], "ULobbyBrowserWidget");
addToContainers_function("GetSearchResult", "Get a pointer to the search result of CurrentlySelectedLobby or null if lobby is null", "Docs/Classes/ULobbyBrowserWidget/Functions/GetSearchResult.html", ["get", "search", "result"], "ULobbyBrowserWidget");
addToContainers_function("SetCurrentlySelectedLobby", "", "Docs/Classes/ULobbyBrowserWidget/Functions/SetCurrentlySelectedLobby.html", ["set", "currently", "selected", "lobby"], "ULobbyBrowserWidget");
addToContainers_variable("", "Array of widgets previously created for showing a search results. When new search results come in the widgets in this array are modified first before any new widgets are created to avoid creating unnecessary widgets and losing references to them", "Docs/Classes/ULobbyBrowserWidget/Variables/.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Button to join current selected lobby", "Docs/Classes/ULobbyBrowserWidget/Variables/_1.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/ULobbyBrowserWidget/Variables/_2.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Refresh search results", "Docs/Classes/ULobbyBrowserWidget/Variables/_3.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "The currently selected lobby. Pressing join button will join this lobby", "Docs/Classes/ULobbyBrowserWidget/Variables/_4.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "The widget to use for displaying each individual search result", "Docs/Classes/ULobbyBrowserWidget/Variables/_5.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "The widget browsing results get added to e.g. scroll box. Results get added with UWidget::AddChild. In editor to preview what the results would look like add multiple of whatever widget is set as Search Result Widget to this widget. What it looks like is how search results will be displayed", "Docs/Classes/ULobbyBrowserWidget/Variables/_6.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Throbber to display when searching is complete", "Docs/Classes/ULobbyBrowserWidget/Variables/_7.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Circular throbber if you wish to use that instead", "Docs/Classes/ULobbyBrowserWidget/Variables/_8.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "Displays how many search results were found", "Docs/Classes/ULobbyBrowserWidget/Variables/_9.html", [], "ULobbyBrowserWidget");
addToContainers_variable("", "This is mainly here for testing. Type in an IP address to connect to it", "Docs/Classes/ULobbyBrowserWidget/Variables/_10.html", [], "ULobbyBrowserWidget");
addToContainers_variable("bIsFindingSessions", "True if refreshing server list ", "Docs/Classes/ULobbyBrowserWidget/Variables/bIsFindingSessions.html", ["is", "finding", "sessions"], "ULobbyBrowserWidget");
addToContainers_class("UPasswordEntryWidget", "", "Docs/Classes/UPasswordEntryWidget/UPasswordEntryWidget.html", ["password", "entry", "widget"], "");
addToContainers_function("Setup", "", "Docs/Classes/UPasswordEntryWidget/Functions/Setup.html", [], "UPasswordEntryWidget");
addToContainers_function("SetupBindings", "", "Docs/Classes/UPasswordEntryWidget/Functions/SetupBindings.html", ["setup", "bindings"], "UPasswordEntryWidget");
addToContainers_function("UIBinding_OnPasswordEntryTextChanged", "", "Docs/Classes/UPasswordEntryWidget/Functions/UIBinding_OnPasswordEntryTextChan.html", ["i", "binding_", "on", "password", "entry", "text", "changed"], "UPasswordEntryWidget");
addToContainers_function("UIBinding_OnPasswordEntryTextCommitted", "", "Docs/Classes/UPasswordEntryWidget/Functions/UIBinding_OnPasswordEntryTextComm.html", ["i", "binding_", "on", "password", "entry", "text", "committed"], "UPasswordEntryWidget");
addToContainers_function("UIBinding_OnAcceptButtonClicked", "", "Docs/Classes/UPasswordEntryWidget/Functions/UIBinding_OnAcceptButtonClicked.html", ["i", "binding_", "on", "accept", "button", "clicked"], "UPasswordEntryWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "", "Docs/Classes/UPasswordEntryWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "UPasswordEntryWidget");
addToContainers_function("TryPassword", "Try join session with password entered in text box and potentially join session", "Docs/Classes/UPasswordEntryWidget/Functions/TryPassword.html", ["try", "password"], "UPasswordEntryWidget");
addToContainers_function("SetLobbyBrowserWidget", "Get pointer to owning browser widget", "Docs/Classes/UPasswordEntryWidget/Functions/SetLobbyBrowserWidget.html", ["set", "lobby", "browser", "widget"], "UPasswordEntryWidget");
addToContainers_variable("", "Reference to browser widget", "Docs/Classes/UPasswordEntryWidget/Variables/.html", [], "UPasswordEntryWidget");
addToContainers_variable("", "Text box to enter password into", "Docs/Classes/UPasswordEntryWidget/Variables/_1.html", [], "UPasswordEntryWidget");
addToContainers_variable("", "Accept button to try password", "Docs/Classes/UPasswordEntryWidget/Variables/_2.html", [], "UPasswordEntryWidget");
addToContainers_variable("", "Return button to not try password", "Docs/Classes/UPasswordEntryWidget/Variables/_3.html", [], "UPasswordEntryWidget");
addToContainers_class("ULobbyCreationWidget", "Widget for setting up lobby for a networked match. Things like whether it\'s LAN, max number of players etc can be configured", "Docs/Classes/ULobbyCreationWidget/ULobbyCreationWidget.html", ["lobby", "creation", "widget"], "");
addToContainers_function("Setup", "", "Docs/Classes/ULobbyCreationWidget/Functions/Setup.html", [], "ULobbyCreationWidget");
addToContainers_function("SetupBindings", "", "Docs/Classes/ULobbyCreationWidget/Functions/SetupBindings.html", ["setup", "bindings"], "ULobbyCreationWidget");
addToContainers_function("SetDefaultValues", "", "Docs/Classes/ULobbyCreationWidget/Functions/SetDefaultValues.html", ["set", "default", "values"], "ULobbyCreationWidget");
addToContainers_function("SetMap", "", "Docs/Classes/ULobbyCreationWidget/Functions/SetMap.html", ["set", "map"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnCreateButtonClicked", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnCreateButtonClicked.html", ["i", "binding_", "on", "create", "button", "clicked"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnLobbyNameTextChanged", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnLobbyNameTextChanged.html", ["i", "binding_", "on", "lobby", "name", "text", "changed"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnNetworkTypeLeftButtonClicked", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnNetworkTypeLeftButton.html", ["i", "binding_", "on", "network", "type", "left", "button", "clicked"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnNetworkTypeRightButtonClicked", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnNetworkTypeRightButto.html", ["i", "binding_", "on", "network", "type", "right", "button", "clicked"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnPasswordTextChanged", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnPasswordTextChanged.html", ["i", "binding_", "on", "password", "text", "changed"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnDecreaseNumSlotsButtonClicked", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnDecreaseNumSlotsButto.html", ["i", "binding_", "on", "decrease", "num", "slots", "button", "clicked"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnIncreaseNumSlotsButtonClicked", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnIncreaseNumSlotsButto.html", ["i", "binding_", "on", "increase", "num", "slots", "button", "clicked"], "ULobbyCreationWidget");
addToContainers_function("UIBinding_OnChangeMapButtonClicked", "", "Docs/Classes/ULobbyCreationWidget/Functions/UIBinding_OnChangeMapButtonClicke.html", ["i", "binding_", "on", "change", "map", "button", "clicked"], "ULobbyCreationWidget");
addToContainers_function("IsTextForLAN", "Given some FText return whether the network type it represents is for LAN or not", "Docs/Classes/ULobbyCreationWidget/Functions/IsTextForLAN.html", ["is", "text", "for", "l", "a", "n"], "ULobbyCreationWidget");
addToContainers_function("IsTextForOnline", "Given some FText return whether the network type it represents is for online", "Docs/Classes/ULobbyCreationWidget/Functions/IsTextForOnline.html", ["is", "text", "for", "online"], "ULobbyCreationWidget");
addToContainers_function("UpdateMapDisplay", "Lets another widget update what map info is displayed", "Docs/Classes/ULobbyCreationWidget/Functions/UpdateMapDisplay.html", ["update", "map", "display"], "ULobbyCreationWidget");
addToContainers_variable("", "When opening the map selection widget, whether to try show the player start location widgets on each map info image. Also affects the map image of the currently selected map", "Docs/Classes/ULobbyCreationWidget/Variables/.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Button to create lobby", "Docs/Classes/ULobbyCreationWidget/Variables/_1.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/ULobbyCreationWidget/Variables/_2.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Text for what to call lobby", "Docs/Classes/ULobbyCreationWidget/Variables/_3.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "LAN, online", "Docs/Classes/ULobbyCreationWidget/Variables/_4.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Change network type button", "Docs/Classes/ULobbyCreationWidget/Variables/_5.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Another change network type button", "Docs/Classes/ULobbyCreationWidget/Variables/_6.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Enter password here for lobby. If left blank then lobby will have no password", "Docs/Classes/ULobbyCreationWidget/Variables/_7.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyCreationWidget/Variables/_8.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyCreationWidget/Variables/_9.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "", "Docs/Classes/ULobbyCreationWidget/Variables/_10.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Widget for the rules of the match", "Docs/Classes/ULobbyCreationWidget/Variables/_11.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Widget that shows info about current map", "Docs/Classes/ULobbyCreationWidget/Variables/_12.html", [], "ULobbyCreationWidget");
addToContainers_variable("", "Button to open widget to select map", "Docs/Classes/ULobbyCreationWidget/Variables/_13.html", [], "ULobbyCreationWidget");
addToContainers_class("UMainMenuWidget", "The main menu widget. This is the first widget that will appear after the game starts", "Docs/Classes/UMainMenuWidget/UMainMenuWidget.html", ["main", "menu", "widget"], "");
addToContainers_function("Setup", "", "Docs/Classes/UMainMenuWidget/Functions/Setup.html", [], "UMainMenuWidget");
addToContainers_function("SetupButtonFunctionality", "", "Docs/Classes/UMainMenuWidget/Functions/SetupButtonFunctionality.html", ["setup", "button", "functionality"], "UMainMenuWidget");
addToContainers_function("UIBinding_OnPlayButtonClicked", "~ but can be called from blueprints if desired", "Docs/Classes/UMainMenuWidget/Functions/UIBinding_OnPlayButtonClicked.html", ["i", "binding_", "on", "play", "button", "clicked"], "UMainMenuWidget");
addToContainers_function("UIBinding_OnCreateSingleplayerButtonClicked", "", "Docs/Classes/UMainMenuWidget/Functions/UIBinding_OnCreateSingleplayerBut.html", ["i", "binding_", "on", "create", "singleplayer", "button", "clicked"], "UMainMenuWidget");
addToContainers_function("UIBinding_OnCreateMultiplayerButtonClicked", "", "Docs/Classes/UMainMenuWidget/Functions/UIBinding_OnCreateMultiplayerButt.html", ["i", "binding_", "on", "create", "multiplayer", "button", "clicked"], "UMainMenuWidget");
addToContainers_function("UIBinding_OnFindMultiplayerButtonClicked", "", "Docs/Classes/UMainMenuWidget/Functions/UIBinding_OnFindMultiplayerButton.html", ["i", "binding_", "on", "find", "multiplayer", "button", "clicked"], "UMainMenuWidget");
addToContainers_function("UIBinding_OnSettingsButtonClicked", "", "Docs/Classes/UMainMenuWidget/Functions/UIBinding_OnSettingsButtonClicked.html", ["i", "binding_", "on", "settings", "button", "clicked"], "UMainMenuWidget");
addToContainers_function("UIBinding_OnExitToOSButtonClicked", "", "Docs/Classes/UMainMenuWidget/Functions/UIBinding_OnExitToOSButtonClicked.html", ["i", "binding_", "on", "exit", "to", "o", "s", "button", "clicked"], "UMainMenuWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "", "Docs/Classes/UMainMenuWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "UMainMenuWidget");
addToContainers_variable("", "Button to open the play menu. The play menu is just another main menu", "Docs/Classes/UMainMenuWidget/Variables/.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to create a singleplayer lobby", "Docs/Classes/UMainMenuWidget/Variables/_1.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to create a multiplayer lobby", "Docs/Classes/UMainMenuWidget/Variables/_2.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to search for a multiplayer game to join", "Docs/Classes/UMainMenuWidget/Variables/_3.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to bring up settings menu for video/audio/game/control settings", "Docs/Classes/UMainMenuWidget/Variables/_4.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to exit to the operating system", "Docs/Classes/UMainMenuWidget/Variables/_5.html", [], "UMainMenuWidget");
addToContainers_variable("", "Button to return to previous menu. Intended to be used if this widget is a play menu and not the main menu", "Docs/Classes/UMainMenuWidget/Variables/_6.html", [], "UMainMenuWidget");
addToContainers_class("UPlayerStartWidget", "A widget that is placed on the map image. It represents a player start location. It can be clicked on by players to secure where they will start in match Notes: - Might help if anchored to center of screen (legit don\'t know though) FIXME: - Player starts do not draw in the correct location on minimap @See SetMap SetMinimapLocationValues", "Docs/Classes/UPlayerStartWidget/UPlayerStartWidget.html", ["player", "start", "widget"], "");
addToContainers_function("UPlayerStartWidget", "", "Docs/Classes/UPlayerStartWidget/Functions/UPlayerStartWidget.html", ["player", "start", "widget"], "UPlayerStartWidget");
addToContainers_function("Setup", "Make sure the owning widget explicitly calls this", "Docs/Classes/UPlayerStartWidget/Functions/Setup.html", [], "UPlayerStartWidget");
addToContainers_function("SetupForPlayerSpot", "Sets up widget for a player start location @param InPlayerStartUniqueID - ID of player start to assign to this widget @param ScreenLocation - location on screen this widget should be positioned at @param bIsClickable - if true then button click functionality is activated", "Docs/Classes/UPlayerStartWidget/Functions/SetupForPlayerSpot.html", ["setup", "for", "player", "spot"], "UPlayerStartWidget");
addToContainers_function("UIBinding_OnButtonClicked", "", "Docs/Classes/UPlayerStartWidget/Functions/UIBinding_OnButtonClicked.html", ["i", "binding_", "on", "button", "clicked"], "UPlayerStartWidget");
addToContainers_function("IsHost", "Returns true if the local player is host", "Docs/Classes/UPlayerStartWidget/Functions/IsHost.html", ["is", "host"], "UPlayerStartWidget");
addToContainers_function("SetAssignedPlayer", "Set the lobby slot that should be assigned to this spot. -1 means assign to no one", "Docs/Classes/UPlayerStartWidget/Functions/SetAssignedPlayer.html", ["set", "assigned", "player"], "UPlayerStartWidget");
addToContainers_function("GetAssignedPlayer", "Get the lobby slot that should be assigned to this spot. Returns -1 if no player assigned", "Docs/Classes/UPlayerStartWidget/Functions/GetAssignedPlayer.html", ["get", "assigned", "player"], "UPlayerStartWidget");
addToContainers_variable("PlayerStartUniqueID", "Unique ID of the player start assigned to this widget", "Docs/Classes/UPlayerStartWidget/Variables/PlayerStartUniqueID.html", ["player", "start", "unique", "i", "d"], "UPlayerStartWidget");
addToContainers_variable("AssignedLobbySlot", "Slot in lobby that is assigned to this spot. -1 = no one assigned", "Docs/Classes/UPlayerStartWidget/Variables/AssignedLobbySlot.html", ["assigned", "lobby", "slot"], "UPlayerStartWidget");
addToContainers_variable("", "Text that shows the index of the player assigned to this spot. 1 = player in first lobby slot, 2 = player in second lobby slot, etc", "Docs/Classes/UPlayerStartWidget/Variables/.html", [], "UPlayerStartWidget");
addToContainers_variable("", "Button player can click to try and assign themselves to this player start", "Docs/Classes/UPlayerStartWidget/Variables/_1.html", [], "UPlayerStartWidget");
addToContainers_class("UMapInfoWidget", "A widget that shows information about a single map.", "Docs/Classes/UMapInfoWidget/UMapInfoWidget.html", ["map", "info", "widget"], "");
addToContainers_function("UMapInfoWidget", "", "Docs/Classes/UMapInfoWidget/Functions/UMapInfoWidget.html", ["map", "info", "widget"], "UMapInfoWidget");
addToContainers_function("Setup", "", "Docs/Classes/UMapInfoWidget/Functions/Setup.html", [], "UMapInfoWidget");
addToContainers_function("SetRefToOwningWidget", "", "Docs/Classes/UMapInfoWidget/Functions/SetRefToOwningWidget.html", ["set", "ref", "to", "owning", "widget"], "UMapInfoWidget");
addToContainers_function("SetMap", "Set image, description etc given some map info @param InMapInfo - map info of the map to show @param PlayerStartRule - whether to show the player start widgets on the map", "Docs/Classes/UMapInfoWidget/Functions/SetMap.html", ["set", "map"], "UMapInfoWidget");
addToContainers_function("GetSetMap", "Get the display name of the map this widget holds info for", "Docs/Classes/UMapInfoWidget/Functions/GetSetMap.html", ["get", "set", "map"], "UMapInfoWidget");
addToContainers_function("GetSetMapID", "Get the ID of the map this widget holds info for", "Docs/Classes/UMapInfoWidget/Functions/GetSetMapID.html", ["get", "set", "map", "i", "d"], "UMapInfoWidget");
addToContainers_function("GetSetMapInfo", "Get map info this widget holds info for or null if none", "Docs/Classes/UMapInfoWidget/Functions/GetSetMapInfo.html", ["get", "set", "map", "info"], "UMapInfoWidget");
addToContainers_function("SetMinimapLocationValues", "", "Docs/Classes/UMapInfoWidget/Functions/SetMinimapLocationValues.html", ["set", "minimap", "location", "values"], "UMapInfoWidget");
addToContainers_function("SetupBindings", "", "Docs/Classes/UMapInfoWidget/Functions/SetupBindings.html", ["setup", "bindings"], "UMapInfoWidget");
addToContainers_function("UIBinding_OnSelectButtonClicked", "Should set the selected map to this map", "Docs/Classes/UMapInfoWidget/Functions/UIBinding_OnSelectButtonClicked.html", ["i", "binding_", "on", "select", "button", "clicked"], "UMapInfoWidget");
addToContainers_function("UpdatePlayerStartAssignments", "Sets each player start widget to the corrisponding player", "Docs/Classes/UMapInfoWidget/Functions/UpdatePlayerStartAssignments.html", ["update", "player", "start", "assignments"], "UMapInfoWidget");
addToContainers_function("GetStartingSpots", "Get array of all starting spots. For array key = Starting spot unique ID, entries = lobby slot index of player assigned to spot so 0 would be host usually. -1 means no player assigned to spot", "Docs/Classes/UMapInfoWidget/Functions/GetStartingSpots.html", ["get", "starting", "spots"], "UMapInfoWidget");
addToContainers_function("OnWidgetRebuilt", "MAYBE this one is good enough but no way 100% sure", "Docs/Classes/UMapInfoWidget/Functions/OnWidgetRebuilt.html", ["on", "widget", "rebuilt"], "UMapInfoWidget");
addToContainers_variable("", "Reference to map selection widget this widget belongs to if any. Will be set by owning map selection widget", "Docs/Classes/UMapInfoWidget/Variables/.html", [], "UMapInfoWidget");
addToContainers_variable("MapInfo", "The map this slot is for", "Docs/Classes/UMapInfoWidget/Variables/MapInfo.html", ["map", "info"], "UMapInfoWidget");
addToContainers_variable("", "Widget to display at a player start location on the map", "Docs/Classes/UMapInfoWidget/Variables/_1.html", [], "UMapInfoWidget");
addToContainers_variable("bIsDisplayingPlayerStarts", "If true then this widget is displaying player start widgets overtop the map image", "Docs/Classes/UMapInfoWidget/Variables/bIsDisplayingPlayerStarts.html", ["is", "displaying", "player", "starts"], "UMapInfoWidget");
addToContainers_variable("", "Array of widgets used to represent a player start point. Key = player start unique ID", "Docs/Classes/UMapInfoWidget/Variables/_2.html", [], "UMapInfoWidget");
addToContainers_variable("MinimapImageScreenLoc", "The screen location of Image_Minimap updated on post edit", "Docs/Classes/UMapInfoWidget/Variables/MinimapImageScreenLoc.html", ["minimap", "image", "screen", "loc"], "UMapInfoWidget");
addToContainers_variable("MinimapImageScreenDim", "The size of Image_Minimap updated on post edit", "Docs/Classes/UMapInfoWidget/Variables/MinimapImageScreenDim.html", ["minimap", "image", "screen", "dim"], "UMapInfoWidget");
addToContainers_variable("", "The button that selects this map. If this widget is placed on the lobby widget then this button does not need to be there", "Docs/Classes/UMapInfoWidget/Variables/_3.html", [], "UMapInfoWidget");
addToContainers_variable("", "Text to show map name", "Docs/Classes/UMapInfoWidget/Variables/_4.html", [], "UMapInfoWidget");
addToContainers_variable("", "Image to show an image set by user", "Docs/Classes/UMapInfoWidget/Variables/_5.html", [], "UMapInfoWidget");
addToContainers_variable("", "Image to show minimap.", "Docs/Classes/UMapInfoWidget/Variables/_6.html", [], "UMapInfoWidget");
addToContainers_variable("", "Text to show map description", "Docs/Classes/UMapInfoWidget/Variables/_7.html", [], "UMapInfoWidget");
addToContainers_variable("", "Text to show max number of players allowed on map", "Docs/Classes/UMapInfoWidget/Variables/_8.html", [], "UMapInfoWidget");
addToContainers_class("UMapSelectionWidget", "The widget that appears when choosing which map to play on, either from lobby creation screen or lobby. It will generally contain a list of all the available maps. When you add a new map to your map pool in game instance you should add an extra slot widget to this in editor. The slot can be named whatever you want", "Docs/Classes/UMapSelectionWidget/UMapSelectionWidget.html", ["map", "selection", "widget"], "");
addToContainers_function("UMapSelectionWidget", "", "Docs/Classes/UMapSelectionWidget/Functions/UMapSelectionWidget.html", ["map", "selection", "widget"], "UMapSelectionWidget");
addToContainers_function("Setup", "", "Docs/Classes/UMapSelectionWidget/Functions/Setup.html", [], "UMapSelectionWidget");
addToContainers_function("SetupMapList", "", "Docs/Classes/UMapSelectionWidget/Functions/SetupMapList.html", ["setup", "map", "list"], "UMapSelectionWidget");
addToContainers_function("SetupBindings", "", "Docs/Classes/UMapSelectionWidget/Functions/SetupBindings.html", ["setup", "bindings"], "UMapSelectionWidget");
addToContainers_function("OnMapInfoAddedToPanel", "Function called when auto-generated map info widgets are created and added to panel widget Panel_MapList", "Docs/Classes/UMapSelectionWidget/Functions/OnMapInfoAddedToPanel.html", ["on", "map", "info", "added", "to", "panel"], "UMapSelectionWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "======================================================================================", "Docs/Classes/UMapSelectionWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "UMapSelectionWidget");
addToContainers_function("SetCurrentMap", "Set the map to use for match", "Docs/Classes/UMapSelectionWidget/Functions/SetCurrentMap.html", ["set", "current", "map"], "UMapSelectionWidget");
addToContainers_function("SetRefToUpdatedWidget", "Set the widget this will update when the return button is pressed", "Docs/Classes/UMapSelectionWidget/Functions/SetRefToUpdatedWidget.html", ["set", "ref", "to", "updated", "widget"], "UMapSelectionWidget");
addToContainers_variable("CurrentMapInfo", "Map info for selected map", "Docs/Classes/UMapSelectionWidget/Variables/CurrentMapInfo.html", ["current", "map", "info"], "UMapSelectionWidget");
addToContainers_variable("bHasSetupMapInfoList", "True if child map info widgets have been created and/or setup. Similar to UMainMenuWidgetBase::bHasBeenSetup", "Docs/Classes/UMapSelectionWidget/Variables/bHasSetupMapInfoList.html", ["has", "setup", "map", "info", "list"], "UMapSelectionWidget");
addToContainers_variable("", "If true this widget widget will automatically create map info widgets at runtime and add them to the widget Panel_MapList. Settings this to true basically means whenever you create a new map you do not need to modify this widget. Widgets are added using UPanelWidget::AddChild and UMapSelectionWidget::OnMapInfoAddedToPanel will be called when each widget is added", "Docs/Classes/UMapSelectionWidget/Variables/.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Only relevant if bAutoPopulateMapList is true. The widget to use to show a map\'s info", "Docs/Classes/UMapSelectionWidget/Variables/_1.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Reference to widget this widget should update with map info", "Docs/Classes/UMapSelectionWidget/Variables/_2.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Whether to show player starts or not - both on the current selected map and the maps in the list. Depending what widget this widget is a part of they may or may not be clickable.", "Docs/Classes/UMapSelectionWidget/Variables/_3.html", [], "UMapSelectionWidget");
addToContainers_variable("", "This is only relevant if bAutoPopulateMapList is true. The panel widget to add map info widgets to automatically at runtime", "Docs/Classes/UMapSelectionWidget/Variables/_4.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Widget for displaying info about the current selected map. When new map is selected from list this will be updated. This should be a different widget BP than the ones used in the list and should have no need for Button_Select being assigned", "Docs/Classes/UMapSelectionWidget/Variables/_5.html", [], "UMapSelectionWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/UMapSelectionWidget/Variables/_6.html", [], "UMapSelectionWidget");
addToContainers_class("UMatchRulesWidget", "Widget for the rules of the match like for example the defeat condition, maybe if crates spawn, etc. Only for in-match rules but can optionally be displayed when browsing lobbies and will be displayed while in a lobby. The combo box is optional. If you do not want your game to allow the host to change match settings after a lobby has been created then a simple way to do this is to not add a combo box to this widget that belongs to the lobby widget", "Docs/Classes/UMatchRulesWidget/UMatchRulesWidget.html", ["match", "rules", "widget"], "");
addToContainers_function("SetIsForLobby", "If this widget is on the lobby widget then it should call this", "Docs/Classes/UMatchRulesWidget/Functions/SetIsForLobby.html", ["set", "is", "for", "lobby"], "UMatchRulesWidget");
addToContainers_function("Setup", "", "Docs/Classes/UMatchRulesWidget/Functions/Setup.html", [], "UMatchRulesWidget");
addToContainers_function("IsForLobby", "Whether this widget is placed in a lobby widget", "Docs/Classes/UMatchRulesWidget/Functions/IsForLobby.html", ["is", "for", "lobby"], "UMatchRulesWidget");
addToContainers_function("UIBinding_OnStartingResourcesSelectionChanged", "", "Docs/Classes/UMatchRulesWidget/Functions/UIBinding_OnStartingResourcesSele.html", ["i", "binding_", "on", "starting", "resources", "selection", "changed"], "UMatchRulesWidget");
addToContainers_function("UIBinding_OnDefeatConditionSelectionChanged", "", "Docs/Classes/UMatchRulesWidget/Functions/UIBinding_OnDefeatConditionSelect.html", ["i", "binding_", "on", "defeat", "condition", "selection", "changed"], "UMatchRulesWidget");
addToContainers_function("GetStartingResources", "", "Docs/Classes/UMatchRulesWidget/Functions/GetStartingResources.html", ["get", "starting", "resources"], "UMatchRulesWidget");
addToContainers_function("SetStartingResources", "", "Docs/Classes/UMatchRulesWidget/Functions/SetStartingResources.html", ["set", "starting", "resources"], "UMatchRulesWidget");
addToContainers_function("GetDefeatCondition", "", "Docs/Classes/UMatchRulesWidget/Functions/GetDefeatCondition.html", ["get", "defeat", "condition"], "UMatchRulesWidget");
addToContainers_function("SetDefeatCondition", "", "Docs/Classes/UMatchRulesWidget/Functions/SetDefeatCondition.html", ["set", "defeat", "condition"], "UMatchRulesWidget");
addToContainers_variable("bIsForLobby", "", "Docs/Classes/UMatchRulesWidget/Variables/bIsForLobby.html", ["is", "for", "lobby"], "UMatchRulesWidget");
addToContainers_variable("", "Combo box to choose starting resources", "Docs/Classes/UMatchRulesWidget/Variables/.html", [], "UMatchRulesWidget");
addToContainers_variable("", "Text to show starting resources", "Docs/Classes/UMatchRulesWidget/Variables/_1.html", [], "UMatchRulesWidget");
addToContainers_variable("", "Combo box to choose the defeat condition", "Docs/Classes/UMatchRulesWidget/Variables/_2.html", [], "UMatchRulesWidget");
addToContainers_variable("", "Text to show the defeat condition", "Docs/Classes/UMatchRulesWidget/Variables/_3.html", [], "UMatchRulesWidget");
addToContainers_class("Menus", "The header of this class contains some variables for the main menu and some custom basic widget implementations. The source file contains many functions of URTSGameInstance", "Docs/Classes/Menus/Menus.html", [], "");
addToContainers_function("GetGameInstance", "Get game instance from cast. Ideally if this could be set in the widget constructors then no constant casting required but I don\'t know where the widget constructor is", "Docs/Classes/Menus/Functions/GetGameInstance.html", ["get", "game", "instance"], "Menus");
addToContainers_function("GetGameState", "Get game state from cast like game instance", "Docs/Classes/Menus/Functions/GetGameState.html", ["get", "game", "state"], "Menus");
addToContainers_variable("PALETTE_CATEGORY", "Category to appear in palette panel in editor", "Docs/Classes/Menus/Variables/PALETTE_CATEGORY.html", ["a", "l", "e", "t", "t", "e_", "c", "a", "t", "e", "g", "o", "r", "y"], "Menus");
addToContainers_variable("BLANK_TEXT", "Text with nothing in it", "Docs/Classes/Menus/Variables/BLANK_TEXT.html", ["l", "a", "n", "k_", "t", "e", "x", "t"], "Menus");
addToContainers_class("UMenuButton", "Base class for custom buttons", "Docs/Classes/UMenuButton/UMenuButton.html", ["menu", "button"], "");
addToContainers_function("UMenuButton", "", "Docs/Classes/UMenuButton/Functions/UMenuButton.html", ["menu", "button"], "UMenuButton");
addToContainers_function("UIBinding_OnPress", "Override to add press fuctionality", "Docs/Classes/UMenuButton/Functions/UIBinding_OnPress.html", ["i", "binding_", "on", "press"], "UMenuButton");
addToContainers_function("GetPaletteCategory", "To set category that shows up in palette in editor", "Docs/Classes/UMenuButton/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UMenuButton");
addToContainers_class("UMenuTextBox", "", "Docs/Classes/UMenuTextBox/UMenuTextBox.html", ["menu", "text", "box"], "");
addToContainers_function("GetPaletteCategory", "To set category that shows up in palette in editor", "Docs/Classes/UMenuTextBox/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UMenuTextBox");
addToContainers_class("UMenuEditableText", "", "Docs/Classes/UMenuEditableText/UMenuEditableText.html", ["menu", "editable", "text"], "");
addToContainers_function("UIBinding_OnTextChanged", "", "Docs/Classes/UMenuEditableText/Functions/UIBinding_OnTextChanged.html", ["i", "binding_", "on", "text", "changed"], "UMenuEditableText");
addToContainers_function("UIBinding_OnTextCommitted", "", "Docs/Classes/UMenuEditableText/Functions/UIBinding_OnTextCommitted.html", ["i", "binding_", "on", "text", "committed"], "UMenuEditableText");
addToContainers_function("GetPaletteCategory", "To set category that shows up in palette in editor", "Docs/Classes/UMenuEditableText/Functions/GetPaletteCategory.html", ["get", "palette", "category"], "UMenuEditableText");
addToContainers_class("UConfirmExitToOS_YesButton", "-----------------------------------------------------", "Docs/Classes/UConfirmExitToOS_YesButton/UConfirmExitToOS_YesButton.html", ["confirm", "exit", "to", "o", "s_", "yes", "button"], "");
addToContainers_function("UIBinding_OnPress", "", "Docs/Classes/UConfirmExitToOS_YesButton/Functions/UIBinding_OnPress.html", ["i", "binding_", "on", "press"], "UConfirmExitToOS_YesButton");
addToContainers_class("UConfirmExitToOS_NoButton", "", "Docs/Classes/UConfirmExitToOS_NoButton/UConfirmExitToOS_NoButton.html", ["confirm", "exit", "to", "o", "s_", "no", "button"], "");
addToContainers_function("UIBinding_OnPress", "", "Docs/Classes/UConfirmExitToOS_NoButton/Functions/UIBinding_OnPress.html", ["i", "binding_", "on", "press"], "UConfirmExitToOS_NoButton");
addToContainers_class("UNicknameEntryWidget", "A widget for the player to enter a nickname into", "Docs/Classes/UNicknameEntryWidget/UNicknameEntryWidget.html", ["nickname", "entry", "widget"], "");
addToContainers_function("Setup", "", "Docs/Classes/UNicknameEntryWidget/Functions/Setup.html", [], "UNicknameEntryWidget");
addToContainers_function("UIBinding_OnNameTextChanged", "", "Docs/Classes/UNicknameEntryWidget/Functions/UIBinding_OnNameTextChanged.html", ["i", "binding_", "on", "name", "text", "changed"], "UNicknameEntryWidget");
addToContainers_function("UIBinding_OnNameTextCommitted", "", "Docs/Classes/UNicknameEntryWidget/Functions/UIBinding_OnNameTextCommitted.html", ["i", "binding_", "on", "name", "text", "committed"], "UNicknameEntryWidget");
addToContainers_function("UIBinding_OnContinueButtonClicked", "", "Docs/Classes/UNicknameEntryWidget/Functions/UIBinding_OnContinueButtonClicked.html", ["i", "binding_", "on", "continue", "button", "clicked"], "UNicknameEntryWidget");
addToContainers_function("UIBinding_OnReturnButtonClicked", "", "Docs/Classes/UNicknameEntryWidget/Functions/UIBinding_OnReturnButtonClicked.html", ["i", "binding_", "on", "return", "button", "clicked"], "UNicknameEntryWidget");
addToContainers_function("SetNextWidget", "Sets the widget the continue button will navigate to", "Docs/Classes/UNicknameEntryWidget/Functions/SetNextWidget.html", ["set", "next", "widget"], "UNicknameEntryWidget");
addToContainers_variable("", "Reference to player state", "Docs/Classes/UNicknameEntryWidget/Variables/.html", [], "UNicknameEntryWidget");
addToContainers_variable("NextWidget", "The widget the continue button will navigate to", "Docs/Classes/UNicknameEntryWidget/Variables/NextWidget.html", ["next", "widget"], "UNicknameEntryWidget");
addToContainers_variable("", "Text for player to enter the alias they want into", "Docs/Classes/UNicknameEntryWidget/Variables/_1.html", [], "UNicknameEntryWidget");
addToContainers_variable("", "Button to continue to menu user wanted before this screen popped up", "Docs/Classes/UNicknameEntryWidget/Variables/_2.html", [], "UNicknameEntryWidget");
addToContainers_variable("", "Button to return to previous menu", "Docs/Classes/UNicknameEntryWidget/Variables/_3.html", [], "UNicknameEntryWidget");
addToContainers_class("UPopupWidget", "Popup widgets are widgets that get shown briefly on screen to convey a message. e.g. \"Not enough players in lobby\". They are not menus and have no interactibility. They will become hidden anytime the menu widget is changed. Widget anim breakdown: All widget anims are optional. - If no anims are set then widget will be shown/hidden instantly. It will be shown for the duration param of func Show(). - If ShowAnim and/or HideAnim are set then they will play when the widget is requested to be shown/hidden. Duration param in func Show() times from the point where ShowAnim finishes. - If SingleAnim is set then ShowAnim and HideAnim are both ignored. Duration param in func Show() is also ignored. This SingleAnim will play when the widget is requested to be shown and is repsonsible for making the widget go away eventaully", "Docs/Classes/UPopupWidget/UPopupWidget.html", ["popup", "widget"], "");
addToContainers_function("UPopupWidget", "", "Docs/Classes/UPopupWidget/Functions/UPopupWidget.html", ["popup", "widget"], "UPopupWidget");
addToContainers_function("Init", "To be called when this widget is created", "Docs/Classes/UPopupWidget/Functions/Init.html", [], "UPopupWidget");
addToContainers_function("AssignWidgetAnims", "", "Docs/Classes/UPopupWidget/Functions/AssignWidgetAnims.html", ["assign", "widget", "anims"], "UPopupWidget");
addToContainers_function("TimeToHide", "Call this when it is time to hide the widget", "Docs/Classes/UPopupWidget/Functions/TimeToHide.html", ["time", "to", "hide"], "UPopupWidget");
addToContainers_function("HideInternal", "", "Docs/Classes/UPopupWidget/Functions/HideInternal.html", ["hide", "internal"], "UPopupWidget");
addToContainers_function("Delay)", "Call function that returns void after delay @param TimerHandle - timer handle to use @param Function - function to call @param Delay - delay before calling function", "Docs/Classes/UPopupWidget/Functions/Delay).html", [], "UPopupWidget");
addToContainers_function("OnAnimationFinished_Implementation", "", "Docs/Classes/UPopupWidget/Functions/OnAnimationFinished_Implementatio.html", ["on", "animation", "finished_", "implementation"], "UPopupWidget");
addToContainers_function("Show", "Show and set what message should be displayed @param Message - the text to display @param Duration - how long to show widget for. Specifically: if using a show anim then this is the time from when it finishes. @param bSetTextColor - if true 3rd param will define color of text. If false text color will be whatever color it was set to in editor @param TextColor - color of text if bSetTextColor is true", "Docs/Classes/UPopupWidget/Functions/Show.html", [], "UPopupWidget");
addToContainers_function("Hide", "What game instance calls when it wants this widget to hide", "Docs/Classes/UPopupWidget/Functions/Hide.html", [], "UPopupWidget");
addToContainers_variable("ShowAnimFullName", "", "Docs/Classes/UPopupWidget/Variables/ShowAnimFullName.html", ["show", "anim", "full", "name"], "UPopupWidget");
addToContainers_variable("HideAnimFullName", "", "Docs/Classes/UPopupWidget/Variables/HideAnimFullName.html", ["hide", "anim", "full", "name"], "UPopupWidget");
addToContainers_variable("SingleAnimFullName", "", "Docs/Classes/UPopupWidget/Variables/SingleAnimFullName.html", ["single", "anim", "full", "name"], "UPopupWidget");
addToContainers_variable("", "The text box that shows the message", "Docs/Classes/UPopupWidget/Variables/.html", [], "UPopupWidget");
addToContainers_variable("OriginalTextColor", "The color of Text_Message that was set in editor", "Docs/Classes/UPopupWidget/Variables/OriginalTextColor.html", ["original", "text", "color"], "UPopupWidget");
addToContainers_variable("", "Names you can call widget anims to have them play at certain times", "Docs/Classes/UPopupWidget/Variables/_1.html", [], "UPopupWidget");
addToContainers_variable("", "Only relevant if using either ShowAnim or SingleAnim. Time in anim to never go below when requested to play anim while anim is already playing", "Docs/Classes/UPopupWidget/Variables/_2.html", [], "UPopupWidget");
addToContainers_variable("", "Widget animation to play when showing widget", "Docs/Classes/UPopupWidget/Variables/_3.html", [], "UPopupWidget");
addToContainers_variable("", "Widget anim to play when hiding widget", "Docs/Classes/UPopupWidget/Variables/_4.html", [], "UPopupWidget");
addToContainers_variable("", "One anim to play for both showing and hiding widget. It is responsible for making sure widget hides eventually. With this duration in func Show is irrelevant", "Docs/Classes/UPopupWidget/Variables/_5.html", [], "UPopupWidget");
addToContainers_variable("AnimStatus", "How many animations this widget has. Calculated during AssignWidgetAnims()", "Docs/Classes/UPopupWidget/Variables/AnimStatus.html", ["anim", "status"], "UPopupWidget");
addToContainers_variable("ShowDuration", "Duration to set for TimerHandle_Hide when an animation finishes", "Docs/Classes/UPopupWidget/Variables/ShowDuration.html", ["show", "duration"], "UPopupWidget");
addToContainers_variable("TimerHandle_Hide", "Timer handle to say when to hide widget", "Docs/Classes/UPopupWidget/Variables/TimerHandle_Hide.html", ["timer", "handle_", "hide"], "UPopupWidget");
addToContainers_class("USingleAudioClassWidget", "A widget do display info about and allow adjusting of a single sound class", "Docs/Classes/USingleAudioClassWidget/USingleAudioClassWidget.html", ["single", "audio", "class", "widget"], "");
addToContainers_function("InitialSetup", "@param bUpdateWidgetsToReflectAppliedValues - if true then the widgets will be updated to reflect the applied values", "Docs/Classes/USingleAudioClassWidget/Functions/InitialSetup.html", ["initial", "setup"], "USingleAudioClassWidget");
addToContainers_function("UpdateAppearanceForCurrentValues", "Update the appearance of all the widgets to reflect the current values. By current we mean the values currently on the game user settings", "Docs/Classes/USingleAudioClassWidget/Functions/UpdateAppearanceForCurrentValues.html", ["update", "appearance", "for", "current", "values"], "USingleAudioClassWidget");
addToContainers_function("VolumeToText", "Convert a volume to the text that should be displayed for it", "Docs/Classes/USingleAudioClassWidget/Functions/VolumeToText.html", ["volume", "to", "text"], "USingleAudioClassWidget");
addToContainers_function("NativeTick", "", "Docs/Classes/USingleAudioClassWidget/Functions/NativeTick.html", ["native", "tick"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnDecreaseVolumeButtonLeftMousePress", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnDecreaseVolumeButtonL.html", ["i", "binding_", "on", "decrease", "volume", "button", "left", "mouse", "press"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnDecreaseVolumeButtonLeftMouseRelease", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnDecreaseVolumeButtonL_1.html", ["i", "binding_", "on", "decrease", "volume", "button", "left", "mouse", "release"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnDecreaseVolumeButtonRightMousePress", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnDecreaseVolumeButtonR.html", ["i", "binding_", "on", "decrease", "volume", "button", "right", "mouse", "press"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnDecreaseVolumeButtonRightMouseRelease", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnDecreaseVolumeButtonR_1.html", ["i", "binding_", "on", "decrease", "volume", "button", "right", "mouse", "release"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnIncreaseVolumeButtonLeftMousePress", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnIncreaseVolumeButtonL.html", ["i", "binding_", "on", "increase", "volume", "button", "left", "mouse", "press"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnIncreaseVolumeButtonLeftMouseRelease", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnIncreaseVolumeButtonL_1.html", ["i", "binding_", "on", "increase", "volume", "button", "left", "mouse", "release"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnIncreaseVolumeButtonRightMousePress", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnIncreaseVolumeButtonR.html", ["i", "binding_", "on", "increase", "volume", "button", "right", "mouse", "press"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnIncreaseVolumeButtonRightMouseRelease", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnIncreaseVolumeButtonR_1.html", ["i", "binding_", "on", "increase", "volume", "button", "right", "mouse", "release"], "USingleAudioClassWidget");
addToContainers_function("OnDecreaseVolumeButtonClicked", "", "Docs/Classes/USingleAudioClassWidget/Functions/OnDecreaseVolumeButtonClicked.html", ["on", "decrease", "volume", "button", "clicked"], "USingleAudioClassWidget");
addToContainers_function("OnIncreaseVolumeButtonClicked", "", "Docs/Classes/USingleAudioClassWidget/Functions/OnIncreaseVolumeButtonClicked.html", ["on", "increase", "volume", "button", "clicked"], "USingleAudioClassWidget");
addToContainers_function("UIBinding_OnVolumeSliderValueChanged", "", "Docs/Classes/USingleAudioClassWidget/Functions/UIBinding_OnVolumeSliderValueChan.html", ["i", "binding_", "on", "volume", "slider", "value", "changed"], "USingleAudioClassWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USingleAudioClassWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USingleAudioClassWidget");
addToContainers_variable("GI", "-------------------------------------------------------", "Docs/Classes/USingleAudioClassWidget/Variables/GI.html", [], "USingleAudioClassWidget");
addToContainers_variable("PC", "", "Docs/Classes/USingleAudioClassWidget/Variables/PC.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "The name of the sound class this widget is for. If you start a PIE you can check the output log in editor for the sound classes found during setup. Should probably change this to an FName for performance", "Docs/Classes/USingleAudioClassWidget/Variables/.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "Text to show the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_1.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A progress bar to show the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_2.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A button to decrease the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_3.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A button to increase the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_4.html", [], "USingleAudioClassWidget");
addToContainers_variable("", "A slider to adjust the volume", "Docs/Classes/USingleAudioClassWidget/Variables/_5.html", [], "USingleAudioClassWidget");
addToContainers_class("UAudioSettingsWidget", "Widget that allows player to change their audio settings. Note if you want to adjust audio quality levels then you need to add entries to project settings under Audio ---> Quality Levels. The widget assumes that better audio quality levels are at higher indices in the Quality Levels array.", "Docs/Classes/UAudioSettingsWidget/UAudioSettingsWidget.html", ["audio", "settings", "widget"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/UAudioSettingsWidget/Functions/InitialSetup.html", ["initial", "setup"], "UAudioSettingsWidget");
addToContainers_function("UpdateAppearanceForCurrentValues", "~ USettingsSubmenuBase override", "Docs/Classes/UAudioSettingsWidget/Functions/UpdateAppearanceForCurrentValues.html", ["update", "appearance", "for", "current", "values"], "UAudioSettingsWidget");
addToContainers_function("UpdateAudioQualityWidgetsAppearanceForCurrentValues", "", "Docs/Classes/UAudioSettingsWidget/Functions/UpdateAudioQualityWidgetsAppearan.html", ["update", "audio", "quality", "widgets", "appearance", "for", "current", "values"], "UAudioSettingsWidget");
addToContainers_function("GetAudioQualityText", "", "Docs/Classes/UAudioSettingsWidget/Functions/GetAudioQualityText.html", ["get", "audio", "quality", "text"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnDecreaseAudioQualityButtonLeftMousePress", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnDecreaseAudioQualityB.html", ["i", "binding_", "on", "decrease", "audio", "quality", "button", "left", "mouse", "press"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnDecreaseAudioQualityButtonLeftMouseRelease", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnDecreaseAudioQualityB_1.html", ["i", "binding_", "on", "decrease", "audio", "quality", "button", "left", "mouse", "release"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnDecreaseAudioQualityButtonRightMousePress", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnDecreaseAudioQualityB_2.html", ["i", "binding_", "on", "decrease", "audio", "quality", "button", "right", "mouse", "press"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnDecreaseAudioQualityButtonRightMouseRelease", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnDecreaseAudioQualityB_3.html", ["i", "binding_", "on", "decrease", "audio", "quality", "button", "right", "mouse", "release"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnIncreaseAudioQualityButtonLeftMousePress", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnIncreaseAudioQualityB.html", ["i", "binding_", "on", "increase", "audio", "quality", "button", "left", "mouse", "press"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnIncreaseAudioQualityButtonLeftMouseRelease", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnIncreaseAudioQualityB_1.html", ["i", "binding_", "on", "increase", "audio", "quality", "button", "left", "mouse", "release"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnIncreaseAudioQualityButtonRightMousePress", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnIncreaseAudioQualityB_2.html", ["i", "binding_", "on", "increase", "audio", "quality", "button", "right", "mouse", "press"], "UAudioSettingsWidget");
addToContainers_function("UIBinding_OnIncreaseAudioQualityButtonRightMouseRelease", "", "Docs/Classes/UAudioSettingsWidget/Functions/UIBinding_OnIncreaseAudioQualityB_3.html", ["i", "binding_", "on", "increase", "audio", "quality", "button", "right", "mouse", "release"], "UAudioSettingsWidget");
addToContainers_function("OnDecreaseAudioQualityButtonClicked", "", "Docs/Classes/UAudioSettingsWidget/Functions/OnDecreaseAudioQualityButtonClick.html", ["on", "decrease", "audio", "quality", "button", "clicked"], "UAudioSettingsWidget");
addToContainers_function("OnIncreaseAudioQualityButtonClicked", "", "Docs/Classes/UAudioSettingsWidget/Functions/OnIncreaseAudioQualityButtonClick.html", ["on", "increase", "audio", "quality", "button", "clicked"], "UAudioSettingsWidget");
addToContainers_variable("PC", "-------------------------------------------------------", "Docs/Classes/UAudioSettingsWidget/Variables/PC.html", [], "UAudioSettingsWidget");
addToContainers_variable("SingleAudioClassWidgets", "", "Docs/Classes/UAudioSettingsWidget/Variables/SingleAudioClassWidgets.html", ["single", "audio", "class", "widgets"], "UAudioSettingsWidget");
addToContainers_variable("", "Text to display the audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/.html", [], "UAudioSettingsWidget");
addToContainers_variable("", "Progress bar to display the audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/_1.html", [], "UAudioSettingsWidget");
addToContainers_variable("", "Button to decrease audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/_2.html", [], "UAudioSettingsWidget");
addToContainers_variable("", "Button to increase audio quality level", "Docs/Classes/UAudioSettingsWidget/Variables/_3.html", [], "UAudioSettingsWidget");
addToContainers_class("USingleControlSettingWidgetBase", "Base widget to display a single control setting", "Docs/Classes/USingleControlSettingWidgetBase/USingleControlSettingWidgetBase.html", ["single", "control", "setting", "widget", "base"], "");
addToContainers_function("USingleControlSettingWidgetBase", "", "Docs/Classes/USingleControlSettingWidgetBase/Functions/USingleControlSettingWidgetBase.html", ["single", "control", "setting", "widget", "base"], "USingleControlSettingWidgetBase");
addToContainers_function("InitialSetup", "", "Docs/Classes/USingleControlSettingWidgetBase/Functions/InitialSetup.html", ["initial", "setup"], "USingleControlSettingWidgetBase");
addToContainers_function("InitialSetup", "Version when we are telling it what control setting type it should have", "Docs/Classes/USingleControlSettingWidgetBase/Functions/InitialSetup_1.html", ["initial", "setup"], "USingleControlSettingWidgetBase");
addToContainers_function("PURE_VIRTUAL", "", "Docs/Classes/USingleControlSettingWidgetBase/Functions/PURE_VIRTUAL.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "USingleControlSettingWidgetBase");
addToContainers_function("SetTextNameText", "Set the text on Text_Name", "Docs/Classes/USingleControlSettingWidgetBase/Functions/SetTextNameText.html", ["set", "text", "name", "text"], "USingleControlSettingWidgetBase");
addToContainers_function("PURE_VIRTUAL", "", "Docs/Classes/USingleControlSettingWidgetBase/Functions/PURE_VIRTUAL_1.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "USingleControlSettingWidgetBase");
addToContainers_function("NativeTick", "", "Docs/Classes/USingleControlSettingWidgetBase/Functions/NativeTick.html", ["native", "tick"], "USingleControlSettingWidgetBase");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USingleControlSettingWidgetBase/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USingleControlSettingWidgetBase");
addToContainers_variable("PC", "------------------------------------------------------", "Docs/Classes/USingleControlSettingWidgetBase/Variables/PC.html", [], "USingleControlSettingWidgetBase");
addToContainers_variable("ControlSettingsWidget", "The main control settings widget", "Docs/Classes/USingleControlSettingWidgetBase/Variables/ControlSettingsWidget.html", ["control", "settings", "widget"], "USingleControlSettingWidgetBase");
addToContainers_variable("", "The setting this widget is for", "Docs/Classes/USingleControlSettingWidgetBase/Variables/.html", [], "USingleControlSettingWidgetBase");
addToContainers_variable("SettingInfo", "Info struct for SettingType", "Docs/Classes/USingleControlSettingWidgetBase/Variables/SettingInfo.html", ["setting", "info"], "USingleControlSettingWidgetBase");
addToContainers_variable("", "Text to display the name of the setting", "Docs/Classes/USingleControlSettingWidgetBase/Variables/_1.html", [], "USingleControlSettingWidgetBase");
addToContainers_class("USingleBoolControlSettingWidget", "Widget to display a control setting that is just a bool e.g. whether to invert Y axis", "Docs/Classes/USingleBoolControlSettingWidget/USingleBoolControlSettingWidget.html", ["single", "bool", "control", "setting", "widget"], "");
addToContainers_function("InitialSetupInner", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/InitialSetupInner.html", ["initial", "setup", "inner"], "USingleBoolControlSettingWidget");
addToContainers_function("UpdateAppearanceForCurrentValue", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UpdateAppearanceForCurrentValue.html", ["update", "appearance", "for", "current", "value"], "USingleBoolControlSettingWidget");
addToContainers_function("UpdateTextValueForCurrentValues", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UpdateTextValueForCurrentValues.html", ["update", "text", "value", "for", "current", "values"], "USingleBoolControlSettingWidget");
addToContainers_function("UpdateButtonsForCurrentValues", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UpdateButtonsForCurrentValues.html", ["update", "buttons", "for", "current", "values"], "USingleBoolControlSettingWidget");
addToContainers_function("UpdateCheckBoxForCurrentValues", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UpdateCheckBoxForCurrentValues.html", ["update", "check", "box", "for", "current", "values"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonLeftMousePress", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustLeftButtonLeftM.html", ["i", "binding_", "on", "adjust", "left", "button", "left", "mouse", "press"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonLeftMouseRelease", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustLeftButtonLeftM_1.html", ["i", "binding_", "on", "adjust", "left", "button", "left", "mouse", "release"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonRightMousePress", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustLeftButtonRight.html", ["i", "binding_", "on", "adjust", "left", "button", "right", "mouse", "press"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonRightMouseRelease", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustLeftButtonRight_1.html", ["i", "binding_", "on", "adjust", "left", "button", "right", "mouse", "release"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonLeftMousePress", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustRightButtonLeft.html", ["i", "binding_", "on", "adjust", "right", "button", "left", "mouse", "press"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonLeftMouseRelease", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustRightButtonLeft_1.html", ["i", "binding_", "on", "adjust", "right", "button", "left", "mouse", "release"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonRightMousePress", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustRightButtonRigh.html", ["i", "binding_", "on", "adjust", "right", "button", "right", "mouse", "press"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonRightMouseRelease", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnAdjustRightButtonRigh_1.html", ["i", "binding_", "on", "adjust", "right", "button", "right", "mouse", "release"], "USingleBoolControlSettingWidget");
addToContainers_function("UIBinding_OnCheckBoxStateChanged", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/UIBinding_OnCheckBoxStateChanged.html", ["i", "binding_", "on", "check", "box", "state", "changed"], "USingleBoolControlSettingWidget");
addToContainers_function("OnAdjustLeftButtonClicked", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/OnAdjustLeftButtonClicked.html", ["on", "adjust", "left", "button", "clicked"], "USingleBoolControlSettingWidget");
addToContainers_function("OnAdjustRightButtonClicked", "", "Docs/Classes/USingleBoolControlSettingWidget/Functions/OnAdjustRightButtonClicked.html", ["on", "adjust", "right", "button", "clicked"], "USingleBoolControlSettingWidget");
addToContainers_variable("", "Text to show whether the setting is enabled or not", "Docs/Classes/USingleBoolControlSettingWidget/Variables/.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("", "Button to toggle the value of the variable", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_1.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("AdjustLeftButtonOriginalOpacity", "", "Docs/Classes/USingleBoolControlSettingWidget/Variables/AdjustLeftButtonOriginalOpacity.html", ["adjust", "left", "button", "original", "opacity"], "USingleBoolControlSettingWidget");
addToContainers_variable("AdjustRightButtonOriginalOpacity", "", "Docs/Classes/USingleBoolControlSettingWidget/Variables/AdjustRightButtonOriginalOpacity.html", ["adjust", "right", "button", "original", "opacity"], "USingleBoolControlSettingWidget");
addToContainers_variable("", "Another button to toggle the value of the variable", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_2.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("", "Check box to toggle the state of the variable", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_3.html", [], "USingleBoolControlSettingWidget");
addToContainers_variable("", "If setting is true and you press the adjust right button it will be changed to false. If setting is false and you press the adjust left button it will be changed to true. That is what wrapping is", "Docs/Classes/USingleBoolControlSettingWidget/Variables/_4.html", [], "USingleBoolControlSettingWidget");
addToContainers_class("USingleFloatControlSettingWidget", "Widget to display a single control setting that uses a float e.g. camera move speed", "Docs/Classes/USingleFloatControlSettingWidget/USingleFloatControlSettingWidget.html", ["single", "float", "control", "setting", "widget"], "");
addToContainers_function("InitialSetupInner", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/InitialSetupInner.html", ["initial", "setup", "inner"], "USingleFloatControlSettingWidget");
addToContainers_function("UpdateAppearanceForCurrentValue", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UpdateAppearanceForCurrentValue.html", ["update", "appearance", "for", "current", "value"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnDecreaseButtonLeftMousePress", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnDecreaseButtonLeftMou.html", ["i", "binding_", "on", "decrease", "button", "left", "mouse", "press"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnDecreaseButtonLeftMouseRelease", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnDecreaseButtonLeftMou_1.html", ["i", "binding_", "on", "decrease", "button", "left", "mouse", "release"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnDecreaseButtonRightMousePress", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnDecreaseButtonRightMo.html", ["i", "binding_", "on", "decrease", "button", "right", "mouse", "press"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnDecreaseButtonRightMouseRelease", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnDecreaseButtonRightMo_1.html", ["i", "binding_", "on", "decrease", "button", "right", "mouse", "release"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnIncreaseButtonLeftMousePress", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnIncreaseButtonLeftMou.html", ["i", "binding_", "on", "increase", "button", "left", "mouse", "press"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnIncreaseButtonLeftMouseRelease", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnIncreaseButtonLeftMou_1.html", ["i", "binding_", "on", "increase", "button", "left", "mouse", "release"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnIncreaseButtonRightMousePress", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnIncreaseButtonRightMo.html", ["i", "binding_", "on", "increase", "button", "right", "mouse", "press"], "USingleFloatControlSettingWidget");
addToContainers_function("UIBinding_OnIncreaseButtonRightMouseRelease", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/UIBinding_OnIncreaseButtonRightMo_1.html", ["i", "binding_", "on", "increase", "button", "right", "mouse", "release"], "USingleFloatControlSettingWidget");
addToContainers_function("OnDecreaseButtonClicked", "Not very good names. Better names are adjust left and adjust right", "Docs/Classes/USingleFloatControlSettingWidget/Functions/OnDecreaseButtonClicked.html", ["on", "decrease", "button", "clicked"], "USingleFloatControlSettingWidget");
addToContainers_function("OnIncreaseButtonClicked", "", "Docs/Classes/USingleFloatControlSettingWidget/Functions/OnIncreaseButtonClicked.html", ["on", "increase", "button", "clicked"], "USingleFloatControlSettingWidget");
addToContainers_variable("", "Text to show the current value of the setting", "Docs/Classes/USingleFloatControlSettingWidget/Variables/.html", [], "USingleFloatControlSettingWidget");
addToContainers_variable("", "Progress bar to show the value of the setting", "Docs/Classes/USingleFloatControlSettingWidget/Variables/_1.html", [], "USingleFloatControlSettingWidget");
addToContainers_variable("", "Button to lower the value", "Docs/Classes/USingleFloatControlSettingWidget/Variables/_2.html", [], "USingleFloatControlSettingWidget");
addToContainers_variable("DecreaseButtonOriginalOpacity", "", "Docs/Classes/USingleFloatControlSettingWidget/Variables/DecreaseButtonOriginalOpacity.html", ["decrease", "button", "original", "opacity"], "USingleFloatControlSettingWidget");
addToContainers_variable("IncreaseButtonOriginalOpacity", "", "Docs/Classes/USingleFloatControlSettingWidget/Variables/IncreaseButtonOriginalOpacity.html", ["increase", "button", "original", "opacity"], "USingleFloatControlSettingWidget");
addToContainers_variable("", "Button to increase the value", "Docs/Classes/USingleFloatControlSettingWidget/Variables/_3.html", [], "USingleFloatControlSettingWidget");
addToContainers_class("UControlSettingsWidget", "Shows control settings like camera move speed, camera zoom rate, etc", "Docs/Classes/UControlSettingsWidget/UControlSettingsWidget.html", ["control", "settings", "widget"], "");
addToContainers_function("UControlSettingsWidget", "", "Docs/Classes/UControlSettingsWidget/Functions/UControlSettingsWidget.html", ["control", "settings", "widget"], "UControlSettingsWidget");
addToContainers_function("InitialSetup", "", "Docs/Classes/UControlSettingsWidget/Functions/InitialSetup.html", ["initial", "setup"], "UControlSettingsWidget");
addToContainers_function("GetObsoleteAdjustButtonRenderOpacityMultiplier", "", "Docs/Classes/UControlSettingsWidget/Functions/GetObsoleteAdjustButtonRenderOpac.html", ["get", "obsolete", "adjust", "button", "render", "opacity", "multiplier"], "UControlSettingsWidget");
addToContainers_function("GetObsoleteAdjustButtonVisibility", "", "Docs/Classes/UControlSettingsWidget/Functions/GetObsoleteAdjustButtonVisibility.html", ["get", "obsolete", "adjust", "button", "visibility"], "UControlSettingsWidget");
addToContainers_function("UpdateAppearanceForCurrentValues", "~ Begin USettingsSubmenuBase interface", "Docs/Classes/UControlSettingsWidget/Functions/UpdateAppearanceForCurrentValues.html", ["update", "appearance", "for", "current", "values"], "UControlSettingsWidget");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UControlSettingsWidget/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UControlSettingsWidget");
addToContainers_function("PostEditLogic", "", "Docs/Classes/UControlSettingsWidget/Functions/PostEditLogic.html", ["post", "edit", "logic"], "UControlSettingsWidget");
addToContainers_variable("SingleSettingWidgets", "Every single setting widget", "Docs/Classes/UControlSettingsWidget/Variables/SingleSettingWidgets.html", ["single", "setting", "widgets"], "UControlSettingsWidget");
addToContainers_variable("", "If bAutoPopulate is true then this will be populated with every control setting", "Docs/Classes/UControlSettingsWidget/Variables/.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Widget to use for bool settings if bAutoPopulate is true", "Docs/Classes/UControlSettingsWidget/Variables/_1.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Widget to use for float settings if bAutoPopulate is true", "Docs/Classes/UControlSettingsWidget/Variables/_2.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Render opacity multiplier for adjust buttons when the value is at it\'s minimum/maximum", "Docs/Classes/UControlSettingsWidget/Variables/_3.html", [], "UControlSettingsWidget");
addToContainers_variable("", "Visibility to set adjustment buttons when the control setting is at its limit e.g. player has their camera move speed set to 5000 which is the max value. Since it cannot go any higher apply this visibility to the increase button", "Docs/Classes/UControlSettingsWidget/Variables/_4.html", [], "UControlSettingsWidget");
addToContainers_variable("", "If true then Panel_Settings will be populated with every control setting", "Docs/Classes/UControlSettingsWidget/Variables/_5.html", [], "UControlSettingsWidget");
addToContainers_variable("", "", "Docs/Classes/UControlSettingsWidget/Variables/_6.html", [], "UControlSettingsWidget");
addToContainers_class("UGameSettingsWidget", "Game settings are things like whether to show healthbars. I have also put profily type settings on here such as the player\'s alias.", "Docs/Classes/UGameSettingsWidget/UGameSettingsWidget.html", ["game", "settings", "widget"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/UGameSettingsWidget/Functions/InitialSetup.html", ["initial", "setup"], "UGameSettingsWidget");
addToContainers_function("UpdateAppearanceForCurrentValues", "~ Begin USettingsSubmenuBase interface", "Docs/Classes/UGameSettingsWidget/Functions/UpdateAppearanceForCurrentValues.html", ["update", "appearance", "for", "current", "values"], "UGameSettingsWidget");
addToContainers_function("UIBinding_OnAliasTextChanged", "~ End USettingsSubmenuBase interface", "Docs/Classes/UGameSettingsWidget/Functions/UIBinding_OnAliasTextChanged.html", ["i", "binding_", "on", "alias", "text", "changed"], "UGameSettingsWidget");
addToContainers_function("UIBinding_OnAliasTextCommitted", "", "Docs/Classes/UGameSettingsWidget/Functions/UIBinding_OnAliasTextCommitted.html", ["i", "binding_", "on", "alias", "text", "committed"], "UGameSettingsWidget");
addToContainers_function("IsPlayerAllowedToChangeAlias", "", "Docs/Classes/UGameSettingsWidget/Functions/IsPlayerAllowedToChangeAlias.html", ["is", "player", "allowed", "to", "change", "alias"], "UGameSettingsWidget");
addToContainers_variable("GI", "-------------------------------------------------------------", "Docs/Classes/UGameSettingsWidget/Variables/GI.html", [], "UGameSettingsWidget");
addToContainers_variable("", "Text box for player to enter their alias into", "Docs/Classes/UGameSettingsWidget/Variables/.html", [], "UGameSettingsWidget");
addToContainers_variable("TextBoxPlayerAliasOriginalOpacity", "", "Docs/Classes/UGameSettingsWidget/Variables/TextBoxPlayerAliasOriginalOpacity.html", ["text", "box", "player", "alias", "original", "opacity"], "UGameSettingsWidget");
addToContainers_class("USingleKeyBindingWidget", "A widget that displays the key binding for a single game action. There is the option to display the assinged key with a text block Additionally you can show an image to represent the binding. This can be done in two ways: - you supply an image of the key - you supply an image of the key and we\'ll put the text on it for you If you have images for keys + their modifiers then congratulations: I actually didn\'t implement anything for that. But just chuck a struct into game instance like TMap<FKeyWithModifiers, FKeyWithModifiersInfo> and you can easily get your image that way.", "Docs/Classes/USingleKeyBindingWidget/USingleKeyBindingWidget.html", ["single", "key", "binding", "widget"], "");
addToContainers_function("USingleKeyBindingWidget", "", "Docs/Classes/USingleKeyBindingWidget/Functions/USingleKeyBindingWidget.html", ["single", "key", "binding", "widget"], "USingleKeyBindingWidget");
addToContainers_function("InitialSetup", "", "Docs/Classes/USingleKeyBindingWidget/Functions/InitialSetup.html", ["initial", "setup"], "USingleKeyBindingWidget");
addToContainers_function("SetTypes", "", "Docs/Classes/USingleKeyBindingWidget/Functions/SetTypes.html", ["set", "types"], "USingleKeyBindingWidget");
addToContainers_function("NativeTick", "Overridden probably because we wanna turn tick off for performance", "Docs/Classes/USingleKeyBindingWidget/Functions/NativeTick.html", ["native", "tick"], "USingleKeyBindingWidget");
addToContainers_function("UpdateAppearanceForCurrentBindingValue", "", "Docs/Classes/USingleKeyBindingWidget/Functions/UpdateAppearanceForCurrentBinding.html", ["update", "appearance", "for", "current", "binding", "value"], "USingleKeyBindingWidget");
addToContainers_function("IsForActionMapping", "Return true if for action mapping, false if for axis mapping", "Docs/Classes/USingleKeyBindingWidget/Functions/IsForActionMapping.html", ["is", "for", "action", "mapping"], "USingleKeyBindingWidget");
addToContainers_function("GetActionType", "", "Docs/Classes/USingleKeyBindingWidget/Functions/GetActionType.html", ["get", "action", "type"], "USingleKeyBindingWidget");
addToContainers_function("GetAxisType", "", "Docs/Classes/USingleKeyBindingWidget/Functions/GetAxisType.html", ["get", "axis", "type"], "USingleKeyBindingWidget");
addToContainers_function("GetDisplayText", "Return the text to display that represents a key + modifiers. This is the text for Text_Action", "Docs/Classes/USingleKeyBindingWidget/Functions/GetDisplayText.html", ["get", "display", "text"], "USingleKeyBindingWidget");
addToContainers_function("SetBrushAndText_Modifier", "", "Docs/Classes/USingleKeyBindingWidget/Functions/SetBrushAndText_Modifier.html", ["set", "brush", "and", "text_", "modifier"], "USingleKeyBindingWidget");
addToContainers_function("SetBrushAndText_PlusSymbol", "", "Docs/Classes/USingleKeyBindingWidget/Functions/SetBrushAndText_PlusSymbol.html", ["set", "brush", "and", "text_", "plus", "symbol"], "USingleKeyBindingWidget");
addToContainers_function("SetBrushAndText_Key", "Set the image on the border to represent a key. Optionally set the text on a text block too if required. This is for non-modifier non-plus symbol border/text combos", "Docs/Classes/USingleKeyBindingWidget/Functions/SetBrushAndText_Key.html", ["set", "brush", "and", "text_", "key"], "USingleKeyBindingWidget");
addToContainers_function("HideKeyElementWidgetsFromIndex", "e.g. if index = 2 hide Border_KeyElement3, Border_KeyElement4 ... Border_KeyElement7", "Docs/Classes/USingleKeyBindingWidget/Functions/HideKeyElementWidgetsFromIndex.html", ["hide", "key", "element", "widgets", "from", "index"], "USingleKeyBindingWidget");
addToContainers_function("HideKeyElementWidgetsFromIndexCheckIfNull", "Same as HideKeyElementWidgetsFromIndex but checks for null before dereferencing pointers", "Docs/Classes/USingleKeyBindingWidget/Functions/HideKeyElementWidgetsFromIndexChe.html", ["hide", "key", "element", "widgets", "from", "index", "check", "if", "null"], "USingleKeyBindingWidget");
addToContainers_function("UIBinding_OnRemapButtonLeftMousePress", "", "Docs/Classes/USingleKeyBindingWidget/Functions/UIBinding_OnRemapButtonLeftMouseP.html", ["i", "binding_", "on", "remap", "button", "left", "mouse", "press"], "USingleKeyBindingWidget");
addToContainers_function("UIBinding_OnRemapButtonLeftMouseRelease", "", "Docs/Classes/USingleKeyBindingWidget/Functions/UIBinding_OnRemapButtonLeftMouseR.html", ["i", "binding_", "on", "remap", "button", "left", "mouse", "release"], "USingleKeyBindingWidget");
addToContainers_function("UIBinding_OnRemapButtonRightMousePress", "", "Docs/Classes/USingleKeyBindingWidget/Functions/UIBinding_OnRemapButtonRightMouse.html", ["i", "binding_", "on", "remap", "button", "right", "mouse", "press"], "USingleKeyBindingWidget");
addToContainers_function("UIBinding_OnRemapButtonRightMouseRelease", "", "Docs/Classes/USingleKeyBindingWidget/Functions/UIBinding_OnRemapButtonRightMouse_1.html", ["i", "binding_", "on", "remap", "button", "right", "mouse", "release"], "USingleKeyBindingWidget");
addToContainers_function("OnClicked", "", "Docs/Classes/USingleKeyBindingWidget/Functions/OnClicked.html", ["on", "clicked"], "USingleKeyBindingWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USingleKeyBindingWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USingleKeyBindingWidget");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/USingleKeyBindingWidget/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "USingleKeyBindingWidget");
addToContainers_function("RunOnPostEditLogic", "", "Docs/Classes/USingleKeyBindingWidget/Functions/RunOnPostEditLogic.html", ["run", "on", "post", "edit", "logic"], "USingleKeyBindingWidget");
addToContainers_variable("", "----------------------------------------------------", "Docs/Classes/USingleKeyBindingWidget/Variables/.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_1.html", [], "USingleKeyBindingWidget");
addToContainers_variable("PC", "Local player controller ", "Docs/Classes/USingleKeyBindingWidget/Variables/PC.html", [], "USingleKeyBindingWidget");
addToContainers_variable("OwningWidget", "The widget this widget belongs to", "Docs/Classes/USingleKeyBindingWidget/Variables/OwningWidget.html", ["owning", "widget"], "USingleKeyBindingWidget");
addToContainers_variable("BindingInfo", "Pointer to static info struct", "Docs/Classes/USingleKeyBindingWidget/Variables/BindingInfo.html", ["binding", "info"], "USingleKeyBindingWidget");
addToContainers_variable("", "The game action this widget is for. Leave as None to use the axis mapping instead", "Docs/Classes/USingleKeyBindingWidget/Variables/_2.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "Leave as None to use te action mapping instead", "Docs/Classes/USingleKeyBindingWidget/Variables/_3.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "The text that displays the action name e.g. toggle skill tree", "Docs/Classes/USingleKeyBindingWidget/Variables/_4.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "The button to click to bind the key to something else", "Docs/Classes/USingleKeyBindingWidget/Variables/_5.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "The text that that displays the key name e.g. left mouse button, shift + Q", "Docs/Classes/USingleKeyBindingWidget/Variables/_6.html", [], "USingleKeyBindingWidget");
addToContainers_variable("NumKeyElementWidgetsBound", "Number of Image_KeyElementX widgets that are bound", "Docs/Classes/USingleKeyBindingWidget/Variables/NumKeyElementWidgetsBound.html", ["num", "key", "element", "widgets", "bound"], "USingleKeyBindingWidget");
addToContainers_variable("", "7 images for CTRL + SHIFT + ALT + Key. Did not take into account CMD. One for the CTRL, one for the plus symbol, etc. You should bind the lower numbered ones first", "Docs/Classes/USingleKeyBindingWidget/Variables/_7.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_8.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_9.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_10.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_11.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_12.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_13.html", [], "USingleKeyBindingWidget");
addToContainers_variable("BorderKeyElements[7]", "Index 0 = Border_KeyElement1, index 1 = Border_KeyElement2, etc. ", "Docs/Classes/USingleKeyBindingWidget/Variables/BorderKeyElements[7].html", ["border", "key", "elements[7]"], "USingleKeyBindingWidget");
addToContainers_variable("", "The 7 texts to go in the borders. Bind widgets to these if you want to display the key using a font instead of an image with the text already on it. The option for this will be in GI. It is assumed that these are children of the corrisponing Border_KeyElementX widget", "Docs/Classes/USingleKeyBindingWidget/Variables/_14.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_15.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_16.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_17.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_18.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_19.html", [], "USingleKeyBindingWidget");
addToContainers_variable("", "", "Docs/Classes/USingleKeyBindingWidget/Variables/_20.html", [], "USingleKeyBindingWidget");
addToContainers_class("UPressAnyKeyWidget", "The widget the shows up to say \"Press any key to rebind it\".", "Docs/Classes/UPressAnyKeyWidget/UPressAnyKeyWidget.html", ["press", "any", "key", "widget"], "");
addToContainers_function("NativeTick", "Overridden probably because we wanna turn tick off for performance", "Docs/Classes/UPressAnyKeyWidget/Functions/NativeTick.html", ["native", "tick"], "UPressAnyKeyWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UPressAnyKeyWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UPressAnyKeyWidget");
addToContainers_function("SetupForAboutToBeShown", "", "Docs/Classes/UPressAnyKeyWidget/Functions/SetupForAboutToBeShown.html", ["setup", "for", "about", "to", "be", "shown"], "UPressAnyKeyWidget");
addToContainers_variable("", "The message that is like \"Press any key to rebind it. Hold <cancel key\'s name> to cancel\"", "Docs/Classes/UPressAnyKeyWidget/Variables/.html", [], "UPressAnyKeyWidget");
addToContainers_class("URebindingCollisionWidget", "The widget that shows up when the player tries to bind an action to a key that\'s already bound to another action.", "Docs/Classes/URebindingCollisionWidget/URebindingCollisionWidget.html", ["rebinding", "collision", "widget"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/URebindingCollisionWidget/Functions/InitialSetup.html", ["initial", "setup"], "URebindingCollisionWidget");
addToContainers_function("NativeTick", "Overridden probably because we wanna turn tick off for performance", "Docs/Classes/URebindingCollisionWidget/Functions/NativeTick.html", ["native", "tick"], "URebindingCollisionWidget");
addToContainers_function("SetupFor", "Setup the appearance of this widget for a result from trying to bind key", "Docs/Classes/URebindingCollisionWidget/Functions/SetupFor.html", ["setup", "for"], "URebindingCollisionWidget");
addToContainers_function("OnCancelButtonClicked", "", "Docs/Classes/URebindingCollisionWidget/Functions/OnCancelButtonClicked.html", ["on", "cancel", "button", "clicked"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnConfirmButtonLeftMousePress", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnConfirmButtonLeftMous.html", ["i", "binding_", "on", "confirm", "button", "left", "mouse", "press"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnConfirmButtonLeftMouseRelease", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnConfirmButtonLeftMous_1.html", ["i", "binding_", "on", "confirm", "button", "left", "mouse", "release"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnConfirmButtonRightMousePress", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnConfirmButtonRightMou.html", ["i", "binding_", "on", "confirm", "button", "right", "mouse", "press"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnConfirmButtonRightMouseRelease", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnConfirmButtonRightMou_1.html", ["i", "binding_", "on", "confirm", "button", "right", "mouse", "release"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnCancelButtonLeftMousePress", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnCancelButtonLeftMouse.html", ["i", "binding_", "on", "cancel", "button", "left", "mouse", "press"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnCancelButtonLeftMouseRelease", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnCancelButtonLeftMouse_1.html", ["i", "binding_", "on", "cancel", "button", "left", "mouse", "release"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnCancelButtonRightMousePress", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnCancelButtonRightMous.html", ["i", "binding_", "on", "cancel", "button", "right", "mouse", "press"], "URebindingCollisionWidget");
addToContainers_function("UIBinding_OnCancelButtonRightMouseRelease", "", "Docs/Classes/URebindingCollisionWidget/Functions/UIBinding_OnCancelButtonRightMous_1.html", ["i", "binding_", "on", "cancel", "button", "right", "mouse", "release"], "URebindingCollisionWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/URebindingCollisionWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "URebindingCollisionWidget");
addToContainers_variable("PC", "-------------------------------------------------------", "Docs/Classes/URebindingCollisionWidget/Variables/PC.html", [], "URebindingCollisionWidget");
addToContainers_variable("KeyBindingsWidget", "", "Docs/Classes/URebindingCollisionWidget/Variables/KeyBindingsWidget.html", ["key", "bindings", "widget"], "URebindingCollisionWidget");
addToContainers_variable("", "The text that shows what action is already bound to the key", "Docs/Classes/URebindingCollisionWidget/Variables/.html", [], "URebindingCollisionWidget");
addToContainers_variable("", "Button to confirm you want to do the remapping", "Docs/Classes/URebindingCollisionWidget/Variables/_1.html", [], "URebindingCollisionWidget");
addToContainers_variable("", "Button to cancel doing the remapping", "Docs/Classes/URebindingCollisionWidget/Variables/_2.html", [], "URebindingCollisionWidget");
addToContainers_class("UKeyBindingsWidget", "The menu that lets the player change their key bindings. If I already have a widget for this in SettingsWidgets.h then ignore that one - this one\'s probably better.", "Docs/Classes/UKeyBindingsWidget/UKeyBindingsWidget.html", ["key", "bindings", "widget"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/UKeyBindingsWidget/Functions/InitialSetup.html", ["initial", "setup"], "UKeyBindingsWidget");
addToContainers_function("UpdateAppearanceForCurrentValues", "~ Begin USettingsSubmenuBase interface", "Docs/Classes/UKeyBindingsWidget/Functions/UpdateAppearanceForCurrentValues.html", ["update", "appearance", "for", "current", "values"], "UKeyBindingsWidget");
addToContainers_function("IsShowingOrPlayingShowAnim", "~ End USettingsSubmenuBase interface", "Docs/Classes/UKeyBindingsWidget/Functions/IsShowingOrPlayingShowAnim.html", ["is", "showing", "or", "playing", "show", "anim"], "UKeyBindingsWidget");
addToContainers_function("OnRequestToBeToggled", "", "Docs/Classes/UKeyBindingsWidget/Functions/OnRequestToBeToggled.html", ["on", "request", "to", "be", "toggled"], "UKeyBindingsWidget");
addToContainers_function("OnSingleBindingWidgetClicked", "", "Docs/Classes/UKeyBindingsWidget/Functions/OnSingleBindingWidgetClicked.html", ["on", "single", "binding", "widget", "clicked"], "UKeyBindingsWidget");
addToContainers_function("OnKeyBindAttempt", "Called after the player inputs a key to try and rebind an action @param bSuccess - if the binding was changed @return - true if the widget will show a screen asking for confirmation to rebind the key", "Docs/Classes/UKeyBindingsWidget/Functions/OnKeyBindAttempt.html", ["on", "key", "bind", "attempt"], "UKeyBindingsWidget");
addToContainers_function("OnPendingKeyBindCancelled", "", "Docs/Classes/UKeyBindingsWidget/Functions/OnPendingKeyBindCancelled.html", ["on", "pending", "key", "bind", "cancelled"], "UKeyBindingsWidget");
addToContainers_function("OnPendingKeyBindCancelledViaCancelKey", "", "Docs/Classes/UKeyBindingsWidget/Functions/OnPendingKeyBindCancelledViaCance.html", ["on", "pending", "key", "bind", "cancelled", "via", "cancel", "key"], "UKeyBindingsWidget");
addToContainers_function("IsCollisionConfirmationWidgetShowingOrPlayingShowAnim", "", "Docs/Classes/UKeyBindingsWidget/Functions/IsCollisionConfirmationWidgetShow.html", ["is", "collision", "confirmation", "widget", "showing", "or", "playing", "show", "anim"], "UKeyBindingsWidget");
addToContainers_function("GetPendingKey", "Get the key that is trying to be rebound. May return garbage if no binding change is pending", "Docs/Classes/UKeyBindingsWidget/Functions/GetPendingKey.html", ["get", "pending", "key"], "UKeyBindingsWidget");
addToContainers_function("OnOpened", "", "Docs/Classes/UKeyBindingsWidget/Functions/OnOpened.html", ["on", "opened"], "UKeyBindingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonLeftMousePress", "", "Docs/Classes/UKeyBindingsWidget/Functions/UIBinding_OnResetToDefaultsButton.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "left", "mouse", "press"], "UKeyBindingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonLeftMouseRelease", "", "Docs/Classes/UKeyBindingsWidget/Functions/UIBinding_OnResetToDefaultsButton_1.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "left", "mouse", "release"], "UKeyBindingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonRightMousePress", "", "Docs/Classes/UKeyBindingsWidget/Functions/UIBinding_OnResetToDefaultsButton_2.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "right", "mouse", "press"], "UKeyBindingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonRightMouseRelease", "", "Docs/Classes/UKeyBindingsWidget/Functions/UIBinding_OnResetToDefaultsButton_3.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "right", "mouse", "release"], "UKeyBindingsWidget");
addToContainers_function("AssignWidgetsArrayIndex", "", "Docs/Classes/UKeyBindingsWidget/Functions/AssignWidgetsArrayIndex.html", ["assign", "widgets", "array", "index"], "UKeyBindingsWidget");
addToContainers_function("GetBindingWidgetsArrayIndex", "", "Docs/Classes/UKeyBindingsWidget/Functions/GetBindingWidgetsArrayIndex.html", ["get", "binding", "widgets", "array", "index"], "UKeyBindingsWidget");
addToContainers_function("GetBindingWidgetsArrayIndex", "", "Docs/Classes/UKeyBindingsWidget/Functions/GetBindingWidgetsArrayIndex_1.html", ["get", "binding", "widgets", "array", "index"], "UKeyBindingsWidget");
addToContainers_variable("PRESS_ANY_KEY_WIDGET_Z_ORDER", "", "Docs/Classes/UKeyBindingsWidget/Variables/PRESS_ANY_KEY_WIDGET_Z_ORDER.html", ["r", "e", "s", "s_", "a", "n", "y_", "k", "e", "y_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UKeyBindingsWidget");
addToContainers_variable("REBINDING_COLLISION_WIDGET_Z_ORDER", "", "Docs/Classes/UKeyBindingsWidget/Variables/REBINDING_COLLISION_WIDGET_Z_ORDE.html", ["e", "b", "i", "n", "d", "i", "n", "g_", "c", "o", "l", "l", "i", "s", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "UKeyBindingsWidget");
addToContainers_variable("GI", "------------------------------------------------------", "Docs/Classes/UKeyBindingsWidget/Variables/GI.html", [], "UKeyBindingsWidget");
addToContainers_variable("PC", "Local player controller", "Docs/Classes/UKeyBindingsWidget/Variables/PC.html", [], "UKeyBindingsWidget");
addToContainers_variable("BindingWidgets", "Array of all the single key binding widgets on this widget. Index depends on the action/axis of the widget. @See GetBindingWidgetsArrayIndex", "Docs/Classes/UKeyBindingsWidget/Variables/BindingWidgets.html", ["binding", "widgets"], "UKeyBindingsWidget");
addToContainers_variable("PressAnyKeyWidget", "", "Docs/Classes/UKeyBindingsWidget/Variables/PressAnyKeyWidget.html", ["press", "any", "key", "widget"], "UKeyBindingsWidget");
addToContainers_variable("RebindingCollisionWidget", "", "Docs/Classes/UKeyBindingsWidget/Variables/RebindingCollisionWidget.html", ["rebinding", "collision", "widget"], "UKeyBindingsWidget");
addToContainers_variable("PendingRebindInstigator", "The widget that is waiting for the player to press a key so its action can be rebound. Will be null if the player isn\'t trying to rebind a key", "Docs/Classes/UKeyBindingsWidget/Variables/PendingRebindInstigator.html", ["pending", "rebind", "instigator"], "UKeyBindingsWidget");
addToContainers_variable("PendingKey", "The key that we\'re trying to setup a binding for but need a confirmation from the player to continue doing it", "Docs/Classes/UKeyBindingsWidget/Variables/PendingKey.html", ["pending", "key"], "UKeyBindingsWidget");
addToContainers_variable("", "Resets all the bindings back to defaults", "Docs/Classes/UKeyBindingsWidget/Variables/.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "The widget that is shown when the player clicks a button to rebind an action. Cannot think of a better name", "Docs/Classes/UKeyBindingsWidget/Variables/_1.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "The widget that shows up when rebinding will cause a collision with another action", "Docs/Classes/UKeyBindingsWidget/Variables/_2.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "If you bind a widget to this and set bAutoPopulatePanel to true then it will be automatically populated with each single setting widget. This was added to speed up development", "Docs/Classes/UKeyBindingsWidget/Variables/_3.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "If true and you have a widget bound to Panel_BindingWidgets then it will be automatically populated with each action. Any USingleKeyBindingWidget you have already added to the widget will be destroyed. This was added to speed up development", "Docs/Classes/UKeyBindingsWidget/Variables/_4.html", [], "UKeyBindingsWidget");
addToContainers_variable("", "The widget to use if bAutoPopulatePanel is true", "Docs/Classes/UKeyBindingsWidget/Variables/_5.html", [], "UKeyBindingsWidget");
addToContainers_class("USingleMenuOutputMessageWidget", "A widget that shows a single message to be displayed on the menu output widget. You must create a widget anim for this. The anim decides how long the message is shown for.", "Docs/Classes/USingleMenuOutputMessageWidget/USingleMenuOutputMessageWidget.html", ["single", "menu", "output", "message", "widget"], "");
addToContainers_function("USingleMenuOutputMessageWidget", "", "Docs/Classes/USingleMenuOutputMessageWidget/Functions/USingleMenuOutputMessageWidget.html", ["single", "menu", "output", "message", "widget"], "USingleMenuOutputMessageWidget");
addToContainers_function("InitialSetup", "", "Docs/Classes/USingleMenuOutputMessageWidget/Functions/InitialSetup.html", ["initial", "setup"], "USingleMenuOutputMessageWidget");
addToContainers_function("NativeTick", "", "Docs/Classes/USingleMenuOutputMessageWidget/Functions/NativeTick.html", ["native", "tick"], "USingleMenuOutputMessageWidget");
addToContainers_function("SetupFor", "", "Docs/Classes/USingleMenuOutputMessageWidget/Functions/SetupFor.html", ["setup", "for"], "USingleMenuOutputMessageWidget");
addToContainers_function("Show", "", "Docs/Classes/USingleMenuOutputMessageWidget/Functions/Show.html", [], "USingleMenuOutputMessageWidget");
addToContainers_function("OnAnimationFinished_Implementation", "", "Docs/Classes/USingleMenuOutputMessageWidget/Functions/OnAnimationFinished_Implementatio.html", ["on", "animation", "finished_", "implementation"], "USingleMenuOutputMessageWidget");
addToContainers_variable("OwningWidget", "---------------------------------------------------", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/OwningWidget.html", ["owning", "widget"], "USingleMenuOutputMessageWidget");
addToContainers_variable("", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/.html", [], "USingleMenuOutputMessageWidget");
addToContainers_variable("ShowAnimName", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/ShowAnimName.html", ["show", "anim", "name"], "USingleMenuOutputMessageWidget");
addToContainers_variable("ShowAnim", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/ShowAnim.html", ["show", "anim"], "USingleMenuOutputMessageWidget");
addToContainers_variable("", "This is the point in ShowAnimation where the animation will play from if the time it has spent playing the anim is past this point. e.g. suppose your anim has a 1 sec fade in at the start, then shows the message for 5 sec, then disappears. If another message comes in and the anim is already 0.5 sec through then we play the anim from 0.5 sec instead of restarting it back at 0. That way if a lot of messages come in fast then the fade in won\'t play from the start for each one and you\'ll actually get to see your message instead of sometimes seeing nothing", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/_1.html", [], "USingleMenuOutputMessageWidget");
addToContainers_variable("", "", "Docs/Classes/USingleMenuOutputMessageWidget/Variables/_2.html", [], "USingleMenuOutputMessageWidget");
addToContainers_class("UMenuOutputWidget", "Shows messages such as \'you cannot rebind to that key\' My notes: I have written this class with the assumption that UUserWidgets with their tick frequency set Auto may consume CPU cycles each tick. This means I will not spawn all the single message widgets required in InitialSetup and instead will create and destroy them as messages come and go.", "Docs/Classes/UMenuOutputWidget/UMenuOutputWidget.html", ["menu", "output", "widget"], "");
addToContainers_function("UMenuOutputWidget", "", "Docs/Classes/UMenuOutputWidget/Functions/UMenuOutputWidget.html", ["menu", "output", "widget"], "UMenuOutputWidget");
addToContainers_function("InitialSetup", "", "Docs/Classes/UMenuOutputWidget/Functions/InitialSetup.html", ["initial", "setup"], "UMenuOutputWidget");
addToContainers_function("NativeTick", "", "Docs/Classes/UMenuOutputWidget/Functions/NativeTick.html", ["native", "tick"], "UMenuOutputWidget");
addToContainers_function("ShowWarningMessageAndPlaySound", "", "Docs/Classes/UMenuOutputWidget/Functions/ShowWarningMessageAndPlaySound.html", ["show", "warning", "message", "and", "play", "sound"], "UMenuOutputWidget");
addToContainers_function("OnWarningMessageExpired", "", "Docs/Classes/UMenuOutputWidget/Functions/OnWarningMessageExpired.html", ["on", "warning", "message", "expired"], "UMenuOutputWidget");
addToContainers_function("AddSingleWarningMessageWidget", "", "Docs/Classes/UMenuOutputWidget/Functions/AddSingleWarningMessageWidget.html", ["add", "single", "warning", "message", "widget"], "UMenuOutputWidget");
addToContainers_function("AreAnyMessagesShowing", "Return whether any messages are showing. Warnings, anything else etc", "Docs/Classes/UMenuOutputWidget/Functions/AreAnyMessagesShowing.html", ["are", "any", "messages", "showing"], "UMenuOutputWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UMenuOutputWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UMenuOutputWidget");
addToContainers_variable("PC", "-----------------------------------------------------", "Docs/Classes/UMenuOutputWidget/Variables/PC.html", [], "UMenuOutputWidget");
addToContainers_variable("", "This will not have any message widgets added to it. It is here in case you want a background or something to your message box. It should have Panel_Warnings_Inner as a child.", "Docs/Classes/UMenuOutputWidget/Variables/.html", [], "UMenuOutputWidget");
addToContainers_variable("", "Widget that displays warning messages", "Docs/Classes/UMenuOutputWidget/Variables/_1.html", [], "UMenuOutputWidget");
addToContainers_variable("", "Widget to use for single warning messages", "Docs/Classes/UMenuOutputWidget/Variables/_2.html", [], "UMenuOutputWidget");
addToContainers_variable("WarningMessages", "Array of warning message widgets. Probably a replica of widgets in Panel_Warnings_Inner->Slots", "Docs/Classes/UMenuOutputWidget/Variables/WarningMessages.html", ["warning", "messages"], "UMenuOutputWidget");
addToContainers_variable("NumWarningMessages", "Number of warning messages this widget is displaying", "Docs/Classes/UMenuOutputWidget/Variables/NumWarningMessages.html", ["num", "warning", "messages"], "UMenuOutputWidget");
addToContainers_variable("", "Maximum number of warning messages that can be shown. MaxNumWarningMessages user widget are created at setup time so don\'t set this to insanely high numbers", "Docs/Classes/UMenuOutputWidget/Variables/_3.html", [], "UMenuOutputWidget");
addToContainers_class("USettingsSubmenuBase", "Base class for widgets that are a submenu of the settings menu. Example of submenus: video settings, control settings", "Docs/Classes/USettingsSubmenuBase/USettingsSubmenuBase.html", ["settings", "submenu", "base"], "");
addToContainers_function("PURE_VIRTUAL", "Update the appearance of the widget to the currently applied values", "Docs/Classes/USettingsSubmenuBase/Functions/PURE_VIRTUAL.html", ["u", "r", "e_", "v", "i", "r", "t", "u", "a", "l"], "USettingsSubmenuBase");
addToContainers_function("NativeTick", "", "Docs/Classes/USettingsSubmenuBase/Functions/NativeTick.html", ["native", "tick"], "USettingsSubmenuBase");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USettingsSubmenuBase/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USettingsSubmenuBase");
addToContainers_class("USettingsConfirmationWidget_Exit", "Widget that asks player \"are you sure?\" when deciding whether to apply or discard changes This gets displayed overtop the settings menu. Make sure something on this blocks the settings menu from getting mouse events.", "Docs/Classes/USettingsConfirmationWidget_Exit/USettingsConfirmationWidget_Exit.html", ["settings", "confirmation", "widget_", "exit"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/InitialSetup.html", ["initial", "setup"], "USettingsConfirmationWidget_Exit");
addToContainers_function("NativeTick", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/NativeTick.html", ["native", "tick"], "USettingsConfirmationWidget_Exit");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnConfirmButtonLeftMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnConfirmButtonLeftMous.html", ["i", "binding_", "on", "confirm", "button", "left", "mouse", "press"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnConfirmButtonLeftMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnConfirmButtonLeftMous_1.html", ["i", "binding_", "on", "confirm", "button", "left", "mouse", "release"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnConfirmButtonRightMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnConfirmButtonRightMou.html", ["i", "binding_", "on", "confirm", "button", "right", "mouse", "press"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnConfirmButtonRightMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnConfirmButtonRightMou_1.html", ["i", "binding_", "on", "confirm", "button", "right", "mouse", "release"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnDiscardButtonLeftMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnDiscardButtonLeftMous.html", ["i", "binding_", "on", "discard", "button", "left", "mouse", "press"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnDiscardButtonLeftMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnDiscardButtonLeftMous_1.html", ["i", "binding_", "on", "discard", "button", "left", "mouse", "release"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnDiscardButtonRightMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnDiscardButtonRightMou.html", ["i", "binding_", "on", "discard", "button", "right", "mouse", "press"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnDiscardButtonRightMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnDiscardButtonRightMou_1.html", ["i", "binding_", "on", "discard", "button", "right", "mouse", "release"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnCancelButtonLeftMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnCancelButtonLeftMouse.html", ["i", "binding_", "on", "cancel", "button", "left", "mouse", "press"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnCancelButtonLeftMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnCancelButtonLeftMouse_1.html", ["i", "binding_", "on", "cancel", "button", "left", "mouse", "release"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnCancelButtonRightMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnCancelButtonRightMous.html", ["i", "binding_", "on", "cancel", "button", "right", "mouse", "press"], "USettingsConfirmationWidget_Exit");
addToContainers_function("UIBinding_OnCancelButtonRightMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/UIBinding_OnCancelButtonRightMous_1.html", ["i", "binding_", "on", "cancel", "button", "right", "mouse", "release"], "USettingsConfirmationWidget_Exit");
addToContainers_function("OnSaveButtonClicked", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/OnSaveButtonClicked.html", ["on", "save", "button", "clicked"], "USettingsConfirmationWidget_Exit");
addToContainers_function("OnDiscardButtonClicked", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/OnDiscardButtonClicked.html", ["on", "discard", "button", "clicked"], "USettingsConfirmationWidget_Exit");
addToContainers_function("OnCancelButtonClicked", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/OnCancelButtonClicked.html", ["on", "cancel", "button", "clicked"], "USettingsConfirmationWidget_Exit");
addToContainers_function("OnRequestToShow", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/OnRequestToShow.html", ["on", "request", "to", "show"], "USettingsConfirmationWidget_Exit");
addToContainers_function("OnEscapeRequest", "", "Docs/Classes/USettingsConfirmationWidget_Exit/Functions/OnEscapeRequest.html", ["on", "escape", "request"], "USettingsConfirmationWidget_Exit");
addToContainers_variable("PC", "----------------------------------------------------------", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/PC.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_variable("SettingsMenu", "Widget this widget is on", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/SettingsMenu.html", ["settings", "menu"], "USettingsConfirmationWidget_Exit");
addToContainers_variable("", "Button to save changes", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_variable("", "Button to discard changes", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/_1.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_variable("", "Button to close this confirmation widget and go back to the settings menu", "Docs/Classes/USettingsConfirmationWidget_Exit/Variables/_2.html", [], "USettingsConfirmationWidget_Exit");
addToContainers_class("USettingsConfirmationWidget_ResetToDefaults", "Widget that asks the player if they are sure they want to reset settings to default. This gets displayed overtop the settings menu. Make sure something on this blocks the settings menu from getting mouse events.", "Docs/Classes/USettingsConfirmationWidget_Reset/USettingsConfirmationWidget_Reset.html", ["settings", "confirmation", "widget_", "reset", "to", "defaults"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/InitialSetup.html", ["initial", "setup"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("NativeTick", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/NativeTick.html", ["native", "tick"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("OnRequestToShow", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/OnRequestToShow.html", ["on", "request", "to", "show"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("OnEscapeRequest", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/OnEscapeRequest.html", ["on", "escape", "request"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnYesButtonLeftMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnYesButtonLeftMousePre.html", ["i", "binding_", "on", "yes", "button", "left", "mouse", "press"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnYesButtonLeftMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnYesButtonLeftMouseRel.html", ["i", "binding_", "on", "yes", "button", "left", "mouse", "release"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnYesButtonRightMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnYesButtonRightMousePr.html", ["i", "binding_", "on", "yes", "button", "right", "mouse", "press"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnYesButtonRightMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnYesButtonRightMouseRe.html", ["i", "binding_", "on", "yes", "button", "right", "mouse", "release"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnNoButtonLeftMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnNoButtonLeftMousePres.html", ["i", "binding_", "on", "no", "button", "left", "mouse", "press"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnNoButtonLeftMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnNoButtonLeftMouseRele.html", ["i", "binding_", "on", "no", "button", "left", "mouse", "release"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnNoButtonRightMousePress", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnNoButtonRightMousePre.html", ["i", "binding_", "on", "no", "button", "right", "mouse", "press"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("UIBinding_OnNoButtonRightMouseRelease", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/UIBinding_OnNoButtonRightMouseRel.html", ["i", "binding_", "on", "no", "button", "right", "mouse", "release"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("OnYesButtonClicked", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/OnYesButtonClicked.html", ["on", "yes", "button", "clicked"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_function("OnNoButtonClicked", "", "Docs/Classes/USettingsConfirmationWidget_Reset/Functions/OnNoButtonClicked.html", ["on", "no", "button", "clicked"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_variable("PC", "----------------------------------------------------------------", "Docs/Classes/USettingsConfirmationWidget_Reset/Variables/PC.html", [], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_variable("SettingsMenu", "Widget this widget is on", "Docs/Classes/USettingsConfirmationWidget_Reset/Variables/SettingsMenu.html", ["settings", "menu"], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_variable("", "Button to go ahead and reset settings back to defaults", "Docs/Classes/USettingsConfirmationWidget_Reset/Variables/.html", [], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_variable("", "Button to go back", "Docs/Classes/USettingsConfirmationWidget_Reset/Variables/_1.html", [], "USettingsConfirmationWidget_ResetToDefaults");
addToContainers_class("USettingsWidget", "The widget that shows settings like video settings, key mappings etc", "Docs/Classes/USettingsWidget/USettingsWidget.html", ["settings", "widget"], "");
addToContainers_function("USettingsWidget", "", "Docs/Classes/USettingsWidget/Functions/USettingsWidget.html", ["settings", "widget"], "USettingsWidget");
addToContainers_function("InitialSetup", "", "Docs/Classes/USettingsWidget/Functions/InitialSetup.html", ["initial", "setup"], "USettingsWidget");
addToContainers_function("SetupConfirmationWidgets", "", "Docs/Classes/USettingsWidget/Functions/SetupConfirmationWidgets.html", ["setup", "confirmation", "widgets"], "USettingsWidget");
addToContainers_function("UsingExitConfirmationWidget", "Whether showing a exit confirmation widget is a possibility", "Docs/Classes/USettingsWidget/Functions/UsingExitConfirmationWidget.html", ["using", "exit", "confirmation", "widget"], "USettingsWidget");
addToContainers_function("UsingResetToDefaultsConfirmationWidget", "Whether to show a confirmation widget when resetting settings back to defaults", "Docs/Classes/USettingsWidget/Functions/UsingResetToDefaultsConfirmationW.html", ["using", "reset", "to", "defaults", "confirmation", "widget"], "USettingsWidget");
addToContainers_function("NativeTick", "", "Docs/Classes/USettingsWidget/Functions/NativeTick.html", ["native", "tick"], "USettingsWidget");
addToContainers_function("IsShowingOrPlayingShowAnim", "", "Docs/Classes/USettingsWidget/Functions/IsShowingOrPlayingShowAnim.html", ["is", "showing", "or", "playing", "show", "anim"], "USettingsWidget");
addToContainers_function("Show", "", "Docs/Classes/USettingsWidget/Functions/Show.html", [], "USettingsWidget");
addToContainers_function("OnEscapeRequest", "Called when the player has pressed the cancel key and the request should be handled by this menu", "Docs/Classes/USettingsWidget/Functions/OnEscapeRequest.html", ["on", "escape", "request"], "USettingsWidget");
addToContainers_function("ApplyAndSaveChangesAndInitiateClose", "", "Docs/Classes/USettingsWidget/Functions/ApplyAndSaveChangesAndInitiateClo.html", ["apply", "and", "save", "changes", "and", "initiate", "close"], "USettingsWidget");
addToContainers_function("DiscardChangesAndInitiateClose", "", "Docs/Classes/USettingsWidget/Functions/DiscardChangesAndInitiateClose.html", ["discard", "changes", "and", "initiate", "close"], "USettingsWidget");
addToContainers_function("ShowAskSaveChangesWidget", "", "Docs/Classes/USettingsWidget/Functions/ShowAskSaveChangesWidget.html", ["show", "ask", "save", "changes", "widget"], "USettingsWidget");
addToContainers_function("ShowConfirmResetToDefaultsWidget", "", "Docs/Classes/USettingsWidget/Functions/ShowConfirmResetToDefaultsWidget.html", ["show", "confirm", "reset", "to", "defaults", "widget"], "USettingsWidget");
addToContainers_function("InitiateClose", "Starts closing the settings menu", "Docs/Classes/USettingsWidget/Functions/InitiateClose.html", ["initiate", "close"], "USettingsWidget");
addToContainers_function("IsExitConfirmationWidgetShowingOrPlayingShowAnim", "", "Docs/Classes/USettingsWidget/Functions/IsExitConfirmationWidgetShowingOr.html", ["is", "exit", "confirmation", "widget", "showing", "or", "playing", "show", "anim"], "USettingsWidget");
addToContainers_function("IsResetToDefaultsConfirmationWidgetShowingOrPlayingShowAnim", "", "Docs/Classes/USettingsWidget/Functions/IsResetToDefaultsConfirmationWidg.html", ["is", "reset", "to", "defaults", "confirmation", "widget", "showing", "or", "playing", "show", "anim"], "USettingsWidget");
addToContainers_function("UIBinding_OnSaveChangesAndReturnButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSaveChangesAndReturnB.html", ["i", "binding_", "on", "save", "changes", "and", "return", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSaveChangesAndReturnButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSaveChangesAndReturnB_1.html", ["i", "binding_", "on", "save", "changes", "and", "return", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSaveChangesAndReturnButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSaveChangesAndReturnB_2.html", ["i", "binding_", "on", "save", "changes", "and", "return", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSaveChangesAndReturnButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSaveChangesAndReturnB_3.html", ["i", "binding_", "on", "save", "changes", "and", "return", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnDiscardChangesAndReturnButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnDiscardChangesAndRetu.html", ["i", "binding_", "on", "discard", "changes", "and", "return", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnDiscardChangesAndReturnButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnDiscardChangesAndRetu_1.html", ["i", "binding_", "on", "discard", "changes", "and", "return", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnDiscardChangesAndReturnButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnDiscardChangesAndRetu_2.html", ["i", "binding_", "on", "discard", "changes", "and", "return", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnDiscardChangesAndReturnButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnDiscardChangesAndRetu_3.html", ["i", "binding_", "on", "discard", "changes", "and", "return", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnResetToDefaultsButton.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnResetToDefaultsButton_1.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnResetToDefaultsButton_2.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnResetToDefaultsButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnResetToDefaultsButton_3.html", ["i", "binding_", "on", "reset", "to", "defaults", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToVideoSubmenuButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToVideoSubmenuB.html", ["i", "binding_", "on", "switch", "to", "video", "submenu", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToVideoSubmenuButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToVideoSubmenuB_1.html", ["i", "binding_", "on", "switch", "to", "video", "submenu", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToVideoSubmenuButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToVideoSubmenuB_2.html", ["i", "binding_", "on", "switch", "to", "video", "submenu", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToVideoSubmenuButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToVideoSubmenuB_3.html", ["i", "binding_", "on", "switch", "to", "video", "submenu", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToAudioSubmenuButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToAudioSubmenuB.html", ["i", "binding_", "on", "switch", "to", "audio", "submenu", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToAudioSubmenuButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToAudioSubmenuB_1.html", ["i", "binding_", "on", "switch", "to", "audio", "submenu", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToAudioSubmenuButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToAudioSubmenuB_2.html", ["i", "binding_", "on", "switch", "to", "audio", "submenu", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToAudioSubmenuButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToAudioSubmenuB_3.html", ["i", "binding_", "on", "switch", "to", "audio", "submenu", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToControlsSubmenuButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToControlsSubme.html", ["i", "binding_", "on", "switch", "to", "controls", "submenu", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToControlsSubmenuButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToControlsSubme_1.html", ["i", "binding_", "on", "switch", "to", "controls", "submenu", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToControlsSubmenuButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToControlsSubme_2.html", ["i", "binding_", "on", "switch", "to", "controls", "submenu", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToControlsSubmenuButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToControlsSubme_3.html", ["i", "binding_", "on", "switch", "to", "controls", "submenu", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToKeyBindingsSubmenuButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToKeyBindingsSu.html", ["i", "binding_", "on", "switch", "to", "key", "bindings", "submenu", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToKeyBindingsSubmenuButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToKeyBindingsSu_1.html", ["i", "binding_", "on", "switch", "to", "key", "bindings", "submenu", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToKeyBindingsSubmenuButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToKeyBindingsSu_2.html", ["i", "binding_", "on", "switch", "to", "key", "bindings", "submenu", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToKeyBindingsSubmenuButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToKeyBindingsSu_3.html", ["i", "binding_", "on", "switch", "to", "key", "bindings", "submenu", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToGameSubmenuButtonLeftMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToGameSubmenuBu.html", ["i", "binding_", "on", "switch", "to", "game", "submenu", "button", "left", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToGameSubmenuButtonLeftMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToGameSubmenuBu_1.html", ["i", "binding_", "on", "switch", "to", "game", "submenu", "button", "left", "mouse", "release"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToGameSubmenuButtonRightMousePress", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToGameSubmenuBu_2.html", ["i", "binding_", "on", "switch", "to", "game", "submenu", "button", "right", "mouse", "press"], "USettingsWidget");
addToContainers_function("UIBinding_OnSwitchToGameSubmenuButtonRightMouseRelease", "", "Docs/Classes/USettingsWidget/Functions/UIBinding_OnSwitchToGameSubmenuBu_3.html", ["i", "binding_", "on", "switch", "to", "game", "submenu", "button", "right", "mouse", "release"], "USettingsWidget");
addToContainers_function("OnSwitchToSubmenuButtonClicked", "", "Docs/Classes/USettingsWidget/Functions/OnSwitchToSubmenuButtonClicked.html", ["on", "switch", "to", "submenu", "button", "clicked"], "USettingsWidget");
addToContainers_function("OnSaveChangesAndReturnButtonClicked", "", "Docs/Classes/USettingsWidget/Functions/OnSaveChangesAndReturnButtonClick.html", ["on", "save", "changes", "and", "return", "button", "clicked"], "USettingsWidget");
addToContainers_function("OnDiscardChangesAndReturnButtonClicked", "", "Docs/Classes/USettingsWidget/Functions/OnDiscardChangesAndReturnButtonCl.html", ["on", "discard", "changes", "and", "return", "button", "clicked"], "USettingsWidget");
addToContainers_function("OnResetToDefaultsButtonClicked", "", "Docs/Classes/USettingsWidget/Functions/OnResetToDefaultsButtonClicked.html", ["on", "reset", "to", "defaults", "button", "clicked"], "USettingsWidget");
addToContainers_function("ResetAllSettingsToDefaults", "", "Docs/Classes/USettingsWidget/Functions/ResetAllSettingsToDefaults.html", ["reset", "all", "settings", "to", "defaults"], "USettingsWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USettingsWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USettingsWidget");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/USettingsWidget/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "USettingsWidget");
addToContainers_variable("RESET_TO_DEFAULTS_CONFIRMATION_WIDGET_Z_ORDER", "", "Docs/Classes/USettingsWidget/Variables/RESET_TO_DEFAULTS_CONFIRMATION_WI.html", ["e", "s", "e", "t_", "t", "o_", "d", "e", "f", "a", "u", "l", "t", "s_", "c", "o", "n", "f", "i", "r", "m", "a", "t", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "USettingsWidget");
addToContainers_variable("EXIT_CONFIRMATION_WIDGET_Z_ORDER", "", "Docs/Classes/USettingsWidget/Variables/EXIT_CONFIRMATION_WIDGET_Z_ORDER.html", ["x", "i", "t_", "c", "o", "n", "f", "i", "r", "m", "a", "t", "i", "o", "n_", "w", "i", "d", "g", "e", "t_", "z_", "o", "r", "d", "e", "r"], "USettingsWidget");
addToContainers_variable("GI", "------------------------------------------------------------", "Docs/Classes/USettingsWidget/Variables/GI.html", [], "USettingsWidget");
addToContainers_variable("PC", "", "Docs/Classes/USettingsWidget/Variables/PC.html", [], "USettingsWidget");
addToContainers_variable("", "Button to apply/save changes and return to the previous menu", "Docs/Classes/USettingsWidget/Variables/.html", [], "USettingsWidget");
addToContainers_variable("", "Button to not save changes and return to the previous menu", "Docs/Classes/USettingsWidget/Variables/_1.html", [], "USettingsWidget");
addToContainers_variable("", "Button that changes all settings back to defaults", "Docs/Classes/USettingsWidget/Variables/_2.html", [], "USettingsWidget");
addToContainers_variable("", "Widget switcher to put each submenu on", "Docs/Classes/USettingsWidget/Variables/_3.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the video settings submenu", "Docs/Classes/USettingsWidget/Variables/_4.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_5.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the audio submenu", "Docs/Classes/USettingsWidget/Variables/_6.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_7.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the controls submenu", "Docs/Classes/USettingsWidget/Variables/_8.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_9.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the key bindings submenu", "Docs/Classes/USettingsWidget/Variables/_10.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_11.html", [], "USettingsWidget");
addToContainers_variable("", "Button to switch to the game settings submenu", "Docs/Classes/USettingsWidget/Variables/_12.html", [], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_13.html", [], "USettingsWidget");
addToContainers_variable("", "The individual menu to be on when the settings menu is opened", "Docs/Classes/USettingsWidget/Variables/_14.html", [], "USettingsWidget");
addToContainers_variable("", "Whether to remember which individual menu was open last time My notes: this may or may not persistest through map changes. If it does not considier storing a variable on the GI", "Docs/Classes/USettingsWidget/Variables/_15.html", [], "USettingsWidget");
addToContainers_variable("", "What to do with unsaved changes when the player closes the menu by pressing the cancel key", "Docs/Classes/USettingsWidget/Variables/_16.html", [], "USettingsWidget");
addToContainers_variable("SubmenuToShowOnNextOpen", "Widget to show when this widget is shown", "Docs/Classes/USettingsWidget/Variables/SubmenuToShowOnNextOpen.html", ["submenu", "to", "show", "on", "next", "open"], "USettingsWidget");
addToContainers_variable("", "Widget that asks player whether to apply and save unsaved changes when closing the widget", "Docs/Classes/USettingsWidget/Variables/_17.html", [], "USettingsWidget");
addToContainers_variable("ConfirmationWidget_Exit", "", "Docs/Classes/USettingsWidget/Variables/ConfirmationWidget_Exit.html", ["confirmation", "widget_", "exit"], "USettingsWidget");
addToContainers_variable("", "Widget that asks the player \"are you sure you want to reset all settings to defaults?\"", "Docs/Classes/USettingsWidget/Variables/_18.html", [], "USettingsWidget");
addToContainers_variable("ConfirmationWidget_ResetToDefaults", "", "Docs/Classes/USettingsWidget/Variables/ConfirmationWidget_ResetToDefault.html", ["confirmation", "widget_", "reset", "to", "defaults"], "USettingsWidget");
addToContainers_variable("", "", "Docs/Classes/USettingsWidget/Variables/_19.html", [], "USettingsWidget");
addToContainers_struct("FVideoSettingInfoBase", "", "Docs/Structs/FVideoSettingInfoBase/FVideoSettingInfoBase.html", ["video", "setting", "info", "base"], "");
addToContainers_function("FVideoSettingInfoBase", "", "Docs/Structs/FVideoSettingInfoBase/Functions/FVideoSettingInfoBase.html", ["video", "setting", "info", "base"], "FVideoSettingInfoBase");
addToContainers_function("InitialSetup", "", "Docs/Structs/FVideoSettingInfoBase/Functions/InitialSetup.html", ["initial", "setup"], "FVideoSettingInfoBase");
addToContainers_function("GetDisplayName", "Return the text that represents the name of this setting", "Docs/Structs/FVideoSettingInfoBase/Functions/GetDisplayName.html", ["get", "display", "name"], "FVideoSettingInfoBase");
addToContainers_function("GetDisplayText", "Get the FText to show for the value this setting currently is", "Docs/Structs/FVideoSettingInfoBase/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSettingInfoBase");
addToContainers_function("GetDisplayPercentage", "Get the normalized percentage the value is at", "Docs/Structs/FVideoSettingInfoBase/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSettingInfoBase");
addToContainers_function("CanValueWrap", "Returns whether the value is allowed to wrap around when adjusting it e.g. if your texture quality is set to max and you press the adjust right button is it allowed to change down to the lowest?", "Docs/Structs/FVideoSettingInfoBase/Functions/CanValueWrap.html", ["can", "value", "wrap"], "FVideoSettingInfoBase");
addToContainers_function("TryAdjustLeft", "This function is also in charge of updating the UI if something changes @param SingleSettingWidget 0 widget corrisponding to this setting @return - true if something changed", "Docs/Structs/FVideoSettingInfoBase/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSettingInfoBase");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSettingInfoBase/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSettingInfoBase");
addToContainers_function("IsAtLowestValue", "@return - true if the setting is at what is considered the lowest or worst setting", "Docs/Structs/FVideoSettingInfoBase/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSettingInfoBase");
addToContainers_function("IsAtHighestValue", "@return - true if the setting is at what is considered the highest or best setting", "Docs/Structs/FVideoSettingInfoBase/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSettingInfoBase");
addToContainers_function("", "", "Docs/Structs/FVideoSettingInfoBase/Functions/.html", [], "FVideoSettingInfoBase");
addToContainers_function("GetTextForZeroToFourRange", "Return the text to display for a setting whose value goes from 0 to 4", "Docs/Structs/FVideoSettingInfoBase/Functions/GetTextForZeroToFourRange.html", ["get", "text", "for", "zero", "to", "four", "range"], "FVideoSettingInfoBase");
addToContainers_function("GetDisplayPercentageForZeroToFourRange", "Return the normalized percentage for a setting that goes from 0 to 4", "Docs/Structs/FVideoSettingInfoBase/Functions/GetDisplayPercentageForZeroToFour.html", ["get", "display", "percentage", "for", "zero", "to", "four", "range"], "FVideoSettingInfoBase");
addToContainers_variable("", "", "Docs/Structs/FVideoSettingInfoBase/Variables/.html", [], "FVideoSettingInfoBase");
addToContainers_variable("DisplayName", "Name of setting", "Docs/Structs/FVideoSettingInfoBase/Variables/DisplayName.html", ["display", "name"], "FVideoSettingInfoBase");
addToContainers_struct("FVideoSetting_WindowMode", "Update UI", "Docs/Structs/FVideoSetting_WindowMode/FVideoSetting_WindowMode.html", ["video", "setting_", "window", "mode"], "");
addToContainers_function("FVideoSetting_WindowMode", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/FVideoSetting_WindowMode.html", ["video", "setting_", "window", "mode"], "FVideoSetting_WindowMode");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_WindowMode");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_WindowMode");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_WindowMode");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_WindowMode");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_WindowMode");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_WindowMode/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_WindowMode");
addToContainers_struct("FVideoSetting_Resolution", "", "Docs/Structs/FVideoSetting_Resolution/FVideoSetting_Resolution.html", ["video", "setting_", "resolution"], "");
addToContainers_function("FVideoSetting_Resolution", "", "Docs/Structs/FVideoSetting_Resolution/Functions/FVideoSetting_Resolution.html", ["video", "setting_", "resolution"], "FVideoSetting_Resolution");
addToContainers_function("InitialSetup", "", "Docs/Structs/FVideoSetting_Resolution/Functions/InitialSetup.html", ["initial", "setup"], "FVideoSetting_Resolution");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_Resolution/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_Resolution");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_Resolution/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_Resolution");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_Resolution/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_Resolution");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_Resolution/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_Resolution");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_Resolution/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_Resolution");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_Resolution/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_Resolution");
addToContainers_variable("ResolutionsArray", "Array of all resolutions the monitor can handle", "Docs/Structs/FVideoSetting_Resolution/Variables/ResolutionsArray.html", ["resolutions", "array"], "FVideoSetting_Resolution");
addToContainers_variable("CurrentResolutionIndex", "Index in ResolutionsArray that the current resolution is", "Docs/Structs/FVideoSetting_Resolution/Variables/CurrentResolutionIndex.html", ["current", "resolution", "index"], "FVideoSetting_Resolution");
addToContainers_struct("FVideoSetting_OverallQuality", "", "Docs/Structs/FVideoSetting_OverallQuality/FVideoSetting_OverallQuality.html", ["video", "setting_", "overall", "quality"], "");
addToContainers_function("FVideoSetting_OverallQuality", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/FVideoSetting_OverallQuality.html", ["video", "setting_", "overall", "quality"], "FVideoSetting_OverallQuality");
addToContainers_function("InitialSetup", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/InitialSetup.html", ["initial", "setup"], "FVideoSetting_OverallQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_OverallQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_OverallQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_OverallQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_OverallQuality");
addToContainers_function("OnChangeUpdateUI", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/OnChangeUpdateUI.html", ["on", "change", "update", "u", "i"], "FVideoSetting_OverallQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_OverallQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_OverallQuality/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_OverallQuality");
addToContainers_variable("ValueBeforeSwitchingToCustom", "What the overall quality level was at before switching to custom", "Docs/Structs/FVideoSetting_OverallQuality/Variables/ValueBeforeSwitchingToCustom.html", ["value", "before", "switching", "to", "custom"], "FVideoSetting_OverallQuality");
addToContainers_struct("FVideoSetting_FoliageQuality", "", "Docs/Structs/FVideoSetting_FoliageQuality/FVideoSetting_FoliageQuality.html", ["video", "setting_", "foliage", "quality"], "");
addToContainers_function("FVideoSetting_FoliageQuality", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/FVideoSetting_FoliageQuality.html", ["video", "setting_", "foliage", "quality"], "FVideoSetting_FoliageQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_FoliageQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_FoliageQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_FoliageQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_FoliageQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_FoliageQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_FoliageQuality/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_FoliageQuality");
addToContainers_struct("FVideoSetting_FrameRateLimit", "", "Docs/Structs/FVideoSetting_FrameRateLimit/FVideoSetting_FrameRateLimit.html", ["video", "setting_", "frame", "rate", "limit"], "");
addToContainers_function("FVideoSetting_FrameRateLimit", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/FVideoSetting_FrameRateLimit.html", ["video", "setting_", "frame", "rate", "limit"], "FVideoSetting_FrameRateLimit");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_FrameRateLimit");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_FrameRateLimit");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_FrameRateLimit");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_FrameRateLimit");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_FrameRateLimit");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_FrameRateLimit");
addToContainers_function("FramerateAsFloatToInt", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Functions/FramerateAsFloatToInt.html", ["framerate", "as", "float", "to", "int"], "FVideoSetting_FrameRateLimit");
addToContainers_variable("MIN", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Variables/MIN.html", ["i", "n"], "FVideoSetting_FrameRateLimit");
addToContainers_variable("MAX", "", "Docs/Structs/FVideoSetting_FrameRateLimit/Variables/MAX.html", ["a", "x"], "FVideoSetting_FrameRateLimit");
addToContainers_variable("STEP_SIZE", "1 is low. Pressing the buttons to change framerate limit is very tedious", "Docs/Structs/FVideoSetting_FrameRateLimit/Variables/STEP_SIZE.html", ["t", "e", "p_", "s", "i", "z", "e"], "FVideoSetting_FrameRateLimit");
addToContainers_struct("FVideoSetting_AntiAliasingQuality", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/FVideoSetting_AntiAliasingQuality.html", ["video", "setting_", "anti", "aliasing", "quality"], "");
addToContainers_function("FVideoSetting_AntiAliasingQuality", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/FVideoSetting_AntiAliasingQuality.html", ["video", "setting_", "anti", "aliasing", "quality"], "FVideoSetting_AntiAliasingQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_AntiAliasingQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_AntiAliasingQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_AntiAliasingQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_AntiAliasingQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_AntiAliasingQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_AntiAliasingQuality/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_AntiAliasingQuality");
addToContainers_struct("FVideoSetting_ShadowQuality", "11 different levels of AA: None, FXAA very low, low, medium, high, very high and TAA very low, low, medium, high, very high I have written this class\'s functions with the assumption that - the console command r.DefaultFeature.AntiAliasing 0 = none 1 = FXAA 2 = TemporalAA will set the method - UGameUserSettings::SetAntiAliasingQuality affects how strong the anti-aliasing method is and it\'s range is [0, 4]", "Docs/Structs/FVideoSetting_ShadowQuality/FVideoSetting_ShadowQuality.html", ["video", "setting_", "shadow", "quality"], "");
addToContainers_function("FVideoSetting_ShadowQuality", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/FVideoSetting_ShadowQuality.html", ["video", "setting_", "shadow", "quality"], "FVideoSetting_ShadowQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_ShadowQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_ShadowQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_ShadowQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_ShadowQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_ShadowQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_ShadowQuality/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_ShadowQuality");
addToContainers_struct("FVideoSetting_ViewDistanceQuality", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/FVideoSetting_ViewDistanceQuality.html", ["video", "setting_", "view", "distance", "quality"], "");
addToContainers_function("FVideoSetting_ViewDistanceQuality", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/FVideoSetting_ViewDistanceQuality.html", ["video", "setting_", "view", "distance", "quality"], "FVideoSetting_ViewDistanceQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_ViewDistanceQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_ViewDistanceQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_ViewDistanceQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_ViewDistanceQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_ViewDistanceQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_ViewDistanceQuality/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_ViewDistanceQuality");
addToContainers_struct("FVideoSetting_TextureQuality", "", "Docs/Structs/FVideoSetting_TextureQuality/FVideoSetting_TextureQuality.html", ["video", "setting_", "texture", "quality"], "");
addToContainers_function("FVideoSetting_TextureQuality", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/FVideoSetting_TextureQuality.html", ["video", "setting_", "texture", "quality"], "FVideoSetting_TextureQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_TextureQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_TextureQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_TextureQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_TextureQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_TextureQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_TextureQuality/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_TextureQuality");
addToContainers_struct("FVideoSetting_VisualEffectQuality", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/FVideoSetting_VisualEffectQuality.html", ["video", "setting_", "visual", "effect", "quality"], "");
addToContainers_function("FVideoSetting_VisualEffectQuality", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/FVideoSetting_VisualEffectQuality.html", ["video", "setting_", "visual", "effect", "quality"], "FVideoSetting_VisualEffectQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_VisualEffectQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_VisualEffectQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_VisualEffectQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_VisualEffectQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_VisualEffectQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_VisualEffectQuality/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_VisualEffectQuality");
addToContainers_struct("FVideoSetting_PostProcessingQuality", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/FVideoSetting_PostProcessingQuali.html", ["video", "setting_", "post", "processing", "quality"], "");
addToContainers_function("FVideoSetting_PostProcessingQuality", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/Functions/FVideoSetting_PostProcessingQuali.html", ["video", "setting_", "post", "processing", "quality"], "FVideoSetting_PostProcessingQuality");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_PostProcessingQuality");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_PostProcessingQuality");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_PostProcessingQuality");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_PostProcessingQuality");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_PostProcessingQuality");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_PostProcessingQuali/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_PostProcessingQuality");
addToContainers_struct("FVideoSetting_VSync", "", "Docs/Structs/FVideoSetting_VSync/FVideoSetting_VSync.html", ["video", "setting_", "v", "sync"], "");
addToContainers_function("FVideoSetting_VSync", "", "Docs/Structs/FVideoSetting_VSync/Functions/FVideoSetting_VSync.html", ["video", "setting_", "v", "sync"], "FVideoSetting_VSync");
addToContainers_function("GetDisplayText", "", "Docs/Structs/FVideoSetting_VSync/Functions/GetDisplayText.html", ["get", "display", "text"], "FVideoSetting_VSync");
addToContainers_function("GetDisplayPercentage", "", "Docs/Structs/FVideoSetting_VSync/Functions/GetDisplayPercentage.html", ["get", "display", "percentage"], "FVideoSetting_VSync");
addToContainers_function("TryAdjustLeft", "", "Docs/Structs/FVideoSetting_VSync/Functions/TryAdjustLeft.html", ["try", "adjust", "left"], "FVideoSetting_VSync");
addToContainers_function("TryAdjustRight", "", "Docs/Structs/FVideoSetting_VSync/Functions/TryAdjustRight.html", ["try", "adjust", "right"], "FVideoSetting_VSync");
addToContainers_function("IsAtLowestValue", "", "Docs/Structs/FVideoSetting_VSync/Functions/IsAtLowestValue.html", ["is", "at", "lowest", "value"], "FVideoSetting_VSync");
addToContainers_function("IsAtHighestValue", "", "Docs/Structs/FVideoSetting_VSync/Functions/IsAtHighestValue.html", ["is", "at", "highest", "value"], "FVideoSetting_VSync");
addToContainers_class("USingleVideoSettingWidget", "Widget for a single video setting", "Docs/Classes/USingleVideoSettingWidget/USingleVideoSettingWidget.html", ["single", "video", "setting", "widget"], "");
addToContainers_function("InitialSetup", "", "Docs/Classes/USingleVideoSettingWidget/Functions/InitialSetup.html", ["initial", "setup"], "USingleVideoSettingWidget");
addToContainers_function("InitialSetup", "", "Docs/Classes/USingleVideoSettingWidget/Functions/InitialSetup_1.html", ["initial", "setup"], "USingleVideoSettingWidget");
addToContainers_function("NativeTick", "", "Docs/Classes/USingleVideoSettingWidget/Functions/NativeTick.html", ["native", "tick"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonLeftMousePress", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustLeftButtonLeftM.html", ["i", "binding_", "on", "adjust", "left", "button", "left", "mouse", "press"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonLeftMouseRelease", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustLeftButtonLeftM_1.html", ["i", "binding_", "on", "adjust", "left", "button", "left", "mouse", "release"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonRightMousePress", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustLeftButtonRight.html", ["i", "binding_", "on", "adjust", "left", "button", "right", "mouse", "press"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustLeftButtonRightMouseRelease", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustLeftButtonRight_1.html", ["i", "binding_", "on", "adjust", "left", "button", "right", "mouse", "release"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonLeftMousePress", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustRightButtonLeft.html", ["i", "binding_", "on", "adjust", "right", "button", "left", "mouse", "press"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonLeftMouseRelease", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustRightButtonLeft_1.html", ["i", "binding_", "on", "adjust", "right", "button", "left", "mouse", "release"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonRightMousePress", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustRightButtonRigh.html", ["i", "binding_", "on", "adjust", "right", "button", "right", "mouse", "press"], "USingleVideoSettingWidget");
addToContainers_function("UIBinding_OnAdjustRightButtonRightMouseRelease", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UIBinding_OnAdjustRightButtonRigh_1.html", ["i", "binding_", "on", "adjust", "right", "button", "right", "mouse", "release"], "USingleVideoSettingWidget");
addToContainers_function("UpdateAppearanceForCurrentValue", "", "Docs/Classes/USingleVideoSettingWidget/Functions/UpdateAppearanceForCurrentValue.html", ["update", "appearance", "for", "current", "value"], "USingleVideoSettingWidget");
addToContainers_function("OnAdjustLeftButtonClicked", "", "Docs/Classes/USingleVideoSettingWidget/Functions/OnAdjustLeftButtonClicked.html", ["on", "adjust", "left", "button", "clicked"], "USingleVideoSettingWidget");
addToContainers_function("OnAdjustRightButtonClicked", "", "Docs/Classes/USingleVideoSettingWidget/Functions/OnAdjustRightButtonClicked.html", ["on", "adjust", "right", "button", "clicked"], "USingleVideoSettingWidget");
addToContainers_function("GetVideoSettingType", "", "Docs/Classes/USingleVideoSettingWidget/Functions/GetVideoSettingType.html", ["get", "video", "setting", "type"], "USingleVideoSettingWidget");
addToContainers_function("GetVideoSettingsWidget", "Get the main video setting widget - the widget this widget belongs to", "Docs/Classes/USingleVideoSettingWidget/Functions/GetVideoSettingsWidget.html", ["get", "video", "settings", "widget"], "USingleVideoSettingWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/USingleVideoSettingWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "USingleVideoSettingWidget");
addToContainers_variable("PC", "--------------------------------------------------------", "Docs/Classes/USingleVideoSettingWidget/Variables/PC.html", [], "USingleVideoSettingWidget");
addToContainers_variable("VideoSettingsWidget", "", "Docs/Classes/USingleVideoSettingWidget/Variables/VideoSettingsWidget.html", ["video", "settings", "widget"], "USingleVideoSettingWidget");
addToContainers_variable("", "Text that displays the name of the setting", "Docs/Classes/USingleVideoSettingWidget/Variables/.html", [], "USingleVideoSettingWidget");
addToContainers_variable("", "Text to display the value of the setting", "Docs/Classes/USingleVideoSettingWidget/Variables/_1.html", [], "USingleVideoSettingWidget");
addToContainers_variable("", "Progress bar to display the value of the setting", "Docs/Classes/USingleVideoSettingWidget/Variables/_2.html", [], "USingleVideoSettingWidget");
addToContainers_variable("", "Button to adjust setting to the left", "Docs/Classes/USingleVideoSettingWidget/Variables/_3.html", [], "USingleVideoSettingWidget");
addToContainers_variable("AdjustLeftButtonOriginalOpacity", "", "Docs/Classes/USingleVideoSettingWidget/Variables/AdjustLeftButtonOriginalOpacity.html", ["adjust", "left", "button", "original", "opacity"], "USingleVideoSettingWidget");
addToContainers_variable("AdjustRightButtonOriginalOpacity", "", "Docs/Classes/USingleVideoSettingWidget/Variables/AdjustRightButtonOriginalOpacity.html", ["adjust", "right", "button", "original", "opacity"], "USingleVideoSettingWidget");
addToContainers_variable("", "Button to adjust setting to the right", "Docs/Classes/USingleVideoSettingWidget/Variables/_4.html", [], "USingleVideoSettingWidget");
addToContainers_variable("SettingInfo", "", "Docs/Classes/USingleVideoSettingWidget/Variables/SettingInfo.html", ["setting", "info"], "USingleVideoSettingWidget");
addToContainers_variable("", "Type of setting this widget is for", "Docs/Classes/USingleVideoSettingWidget/Variables/_5.html", [], "USingleVideoSettingWidget");
addToContainers_class("UVideoSettingsWidget", "Widget that shows and allows player to change their video settings", "Docs/Classes/UVideoSettingsWidget/UVideoSettingsWidget.html", ["video", "settings", "widget"], "");
addToContainers_function("UVideoSettingsWidget", "", "Docs/Classes/UVideoSettingsWidget/Functions/UVideoSettingsWidget.html", ["video", "settings", "widget"], "UVideoSettingsWidget");
addToContainers_function("InitialSetup", "", "Docs/Classes/UVideoSettingsWidget/Functions/InitialSetup.html", ["initial", "setup"], "UVideoSettingsWidget");
addToContainers_function("UpdateAppearanceForCurrentValues", "~ Begin USettingsSubmenuBase interface", "Docs/Classes/UVideoSettingsWidget/Functions/UpdateAppearanceForCurrentValues.html", ["update", "appearance", "for", "current", "values"], "UVideoSettingsWidget");
addToContainers_function("GetNumVideoSettingTypes", "~ End USettingsSubmenuBase interface", "Docs/Classes/UVideoSettingsWidget/Functions/GetNumVideoSettingTypes.html", ["get", "num", "video", "setting", "types"], "UVideoSettingsWidget");
addToContainers_function("ArrayIndexToVideoSettingType", "", "Docs/Classes/UVideoSettingsWidget/Functions/ArrayIndexToVideoSettingType.html", ["array", "index", "to", "video", "setting", "type"], "UVideoSettingsWidget");
addToContainers_function("VideoSettingTypeToArrayIndex", "", "Docs/Classes/UVideoSettingsWidget/Functions/VideoSettingTypeToArrayIndex.html", ["video", "setting", "type", "to", "array", "index"], "UVideoSettingsWidget");
addToContainers_function("GetObsoleteAdjustButtonRenderOpacityMultiplier", "", "Docs/Classes/UVideoSettingsWidget/Functions/GetObsoleteAdjustButtonRenderOpac.html", ["get", "obsolete", "adjust", "button", "render", "opacity", "multiplier"], "UVideoSettingsWidget");
addToContainers_function("GetObsoleteAdjustButtonVisibility", "", "Docs/Classes/UVideoSettingsWidget/Functions/GetObsoleteAdjustButtonVisibility.html", ["get", "obsolete", "adjust", "button", "visibility"], "UVideoSettingsWidget");
addToContainers_function("GetAllSingleSettingWidgets", "", "Docs/Classes/UVideoSettingsWidget/Functions/GetAllSingleSettingWidgets.html", ["get", "all", "single", "setting", "widgets"], "UVideoSettingsWidget");
addToContainers_function("GetSingleSettingWidget", "Can return null if the widget doesn\'t exist", "Docs/Classes/UVideoSettingsWidget/Functions/GetSingleSettingWidget.html", ["get", "single", "setting", "widget"], "UVideoSettingsWidget");
addToContainers_function("PostEditChangeChainProperty", "", "Docs/Classes/UVideoSettingsWidget/Functions/PostEditChangeChainProperty.html", ["post", "edit", "change", "chain", "property"], "UVideoSettingsWidget");
addToContainers_function("RunPostEditLogic", "", "Docs/Classes/UVideoSettingsWidget/Functions/RunPostEditLogic.html", ["run", "post", "edit", "logic"], "UVideoSettingsWidget");
addToContainers_variable("", "", "Docs/Classes/UVideoSettingsWidget/Variables/.html", [], "UVideoSettingsWidget");
addToContainers_variable("SingleSettingWidgets", "Array of every single setting widget. Entries can be null. Ordering matters.", "Docs/Classes/UVideoSettingsWidget/Variables/SingleSettingWidgets.html", ["single", "setting", "widgets"], "UVideoSettingsWidget");
addToContainers_variable("", "If true then the setings menu will be auto populated. This was mainly added here for development", "Docs/Classes/UVideoSettingsWidget/Variables/_1.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "If bAutoPopulate is true then this is the widget that is spawned for each single setting type", "Docs/Classes/UVideoSettingsWidget/Variables/_2.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "If bAutoPopulate is true then this is the panel they are added to", "Docs/Classes/UVideoSettingsWidget/Variables/_3.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "Render opacity multiplier for adjust buttons when the value is at it\'s lowest/highest", "Docs/Classes/UVideoSettingsWidget/Variables/_4.html", [], "UVideoSettingsWidget");
addToContainers_variable("", "Visibility to set adjustment buttons when the control setting is at its limit", "Docs/Classes/UVideoSettingsWidget/Variables/_5.html", [], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_WindowMode", "Struct for each of the different types of settings", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_WindowMode.html", ["setting", "info_", "window", "mode"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_Resolution", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_Resolution.html", ["setting", "info_", "resolution"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_OverallQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_OverallQuality.html", ["setting", "info_", "overall", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_FoliageQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_FoliageQuality.html", ["setting", "info_", "foliage", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_FramerateLimit", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_FramerateLimit.html", ["setting", "info_", "framerate", "limit"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_AntiAliasingQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_AntiAliasingQuality.html", ["setting", "info_", "anti", "aliasing", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_ShadowQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_ShadowQuality.html", ["setting", "info_", "shadow", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_ViewDistanceQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_ViewDistanceQuality.html", ["setting", "info_", "view", "distance", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_TextureQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_TextureQuality.html", ["setting", "info_", "texture", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_VisualEffectQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_VisualEffectQuality.html", ["setting", "info_", "visual", "effect", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_PostProcessingQuality", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_PostProcessingQuality.html", ["setting", "info_", "post", "processing", "quality"], "UVideoSettingsWidget");
addToContainers_variable("SettingInfo_VSync", "", "Docs/Classes/UVideoSettingsWidget/Variables/SettingInfo_VSync.html", ["setting", "info_", "v", "sync"], "UVideoSettingsWidget");
addToContainers_class("USelectableWidgetComponent", "Widget component that shows information about a selectable. It should not have a user widget assigned but instead the faction info will set one", "Docs/Classes/USelectableWidgetComponent/USelectableWidgetComponent.html", ["selectable", "widget", "component"], "");
addToContainers_function("USelectableWidgetComponent", "", "Docs/Classes/USelectableWidgetComponent/Functions/USelectableWidgetComponent.html", ["selectable", "widget", "component"], "USelectableWidgetComponent");
addToContainers_function("InitWidget", "Overridden to do nothing", "Docs/Classes/USelectableWidgetComponent/Functions/InitWidget.html", ["init", "widget"], "USelectableWidgetComponent");
addToContainers_function("SetWidgetClassAndSpawn", "Sets the owner and spawns the appropriate user widget", "Docs/Classes/USelectableWidgetComponent/Functions/SetWidgetClassAndSpawn.html", ["set", "widget", "class", "and", "spawn"], "USelectableWidgetComponent");
addToContainers_function("SetWidgetClassAndSpawn", "Version that does not set a health value. Put this here since I changed SetWidgetClassAndSpawn (with health param) to not allow values <= 0.f. I\'m just using this as a workaround to get project going again. If issues rise from initial health values not being correct then will need to sort that out", "Docs/Classes/USelectableWidgetComponent/Functions/SetWidgetClassAndSpawn_1.html", ["set", "widget", "class", "and", "spawn"], "USelectableWidgetComponent");
addToContainers_function("OnHealthChanged", "Called by owning selectable when its health changes", "Docs/Classes/USelectableWidgetComponent/Functions/OnHealthChanged.html", ["on", "health", "changed"], "USelectableWidgetComponent");
addToContainers_function("OnZeroHealth", "Called by onwing selectable when it reaches zero health", "Docs/Classes/USelectableWidgetComponent/Functions/OnZeroHealth.html", ["on", "zero", "health"], "USelectableWidgetComponent");
addToContainers_function("OnSelectableResourceAmountChanged", "Call when selectable resource\'s either current or max amount changes", "Docs/Classes/USelectableWidgetComponent/Functions/OnSelectableResourceAmountChanged.html", ["on", "selectable", "resource", "amount", "changed"], "USelectableWidgetComponent");
addToContainers_function("OnConstructionProgressChanged", "Call by owning selectable when building construction progresses @param NewPercentageComplete - percentage complete in the range 0 to 1", "Docs/Classes/USelectableWidgetComponent/Functions/OnConstructionProgressChanged.html", ["on", "construction", "progress", "changed"], "USelectableWidgetComponent");
addToContainers_function("OnConstructionComplete", "", "Docs/Classes/USelectableWidgetComponent/Functions/OnConstructionComplete.html", ["on", "construction", "complete"], "USelectableWidgetComponent");
addToContainers_function("OnConstructionComplete", "", "Docs/Classes/USelectableWidgetComponent/Functions/OnConstructionComplete_1.html", ["on", "construction", "complete"], "USelectableWidgetComponent");
addToContainers_variable("", "Pointer to the user widget this component has", "Docs/Classes/USelectableWidgetComponent/Variables/.html", [], "USelectableWidgetComponent");
addToContainers_class("UWorldWidget", "Widget that appears on a selectable in world", "Docs/Classes/UWorldWidget/UWorldWidget.html", ["world", "widget"], "");
addToContainers_function("UWorldWidget", "", "Docs/Classes/UWorldWidget/Functions/UWorldWidget.html", ["world", "widget"], "UWorldWidget");
addToContainers_function("Setup", "Initial setup of widget when selectable is created. This function assumes all upgrades that should be applied on spawn have been applied", "Docs/Classes/UWorldWidget/Functions/Setup.html", [], "UWorldWidget");
addToContainers_function("Setup", "Version that does not try set any health values. This function assumes all upgrades that should be applied on spawn have been applied", "Docs/Classes/UWorldWidget/Functions/Setup_1.html", [], "UWorldWidget");
addToContainers_function("NativeTick", "", "Docs/Classes/UWorldWidget/Functions/NativeTick.html", ["native", "tick"], "UWorldWidget");
addToContainers_function("GetHealthText", "Convert a health value to an FText so it can be displayed on the UI", "Docs/Classes/UWorldWidget/Functions/GetHealthText.html", ["get", "health", "text"], "UWorldWidget");
addToContainers_function("ConstructionProgressAsText", "Convert a construction progress complete to FText so it can be displayed on the UI @param NormalizedPercentageComplete - how far along construction is in the range of [0, 1]", "Docs/Classes/UWorldWidget/Functions/ConstructionProgressAsText.html", ["construction", "progress", "as", "text"], "UWorldWidget");
addToContainers_function("IsWidgetBound", "", "Docs/Classes/UWorldWidget/Functions/IsWidgetBound.html", ["is", "widget", "bound"], "UWorldWidget");
addToContainers_function("OnHealthChanged", "", "Docs/Classes/UWorldWidget/Functions/OnHealthChanged.html", ["on", "health", "changed"], "UWorldWidget");
addToContainers_function("OnZeroHealth", "", "Docs/Classes/UWorldWidget/Functions/OnZeroHealth.html", ["on", "zero", "health"], "UWorldWidget");
addToContainers_function("OnSelectableResourceAmountChanged", "", "Docs/Classes/UWorldWidget/Functions/OnSelectableResourceAmountChanged.html", ["on", "selectable", "resource", "amount", "changed"], "UWorldWidget");
addToContainers_function("OnConstructionProgressChanged", "When a buildings construction progress changes @param NewPercentageComplete - how far along construction is in the range from 0 to 1", "Docs/Classes/UWorldWidget/Functions/OnConstructionProgressChanged.html", ["on", "construction", "progress", "changed"], "UWorldWidget");
addToContainers_function("OnConstructionComplete", "", "Docs/Classes/UWorldWidget/Functions/OnConstructionComplete.html", ["on", "construction", "complete"], "UWorldWidget");
addToContainers_function("OnConstructionComplete", "", "Docs/Classes/UWorldWidget/Functions/OnConstructionComplete_1.html", ["on", "construction", "complete"], "UWorldWidget");
addToContainers_variable("", "Health bar", "Docs/Classes/UWorldWidget/Variables/.html", [], "UWorldWidget");
addToContainers_variable("", "Health as a number ", "Docs/Classes/UWorldWidget/Variables/_1.html", [], "UWorldWidget");
addToContainers_variable("", "Progress bar for selectable resource. Selectable resource is something like mana", "Docs/Classes/UWorldWidget/Variables/_2.html", [], "UWorldWidget");
addToContainers_variable("", "Construction progress bar. Only really relevant for buildings", "Docs/Classes/UWorldWidget/Variables/_3.html", [], "UWorldWidget");
addToContainers_variable("", "Construction progess as a percentage. Does not show % sign", "Docs/Classes/UWorldWidget/Variables/_4.html", [], "UWorldWidget");
addToContainers_variable("SelectableMaxHealth", "Attributes about the owning selectable", "Docs/Classes/UWorldWidget/Variables/SelectableMaxHealth.html", ["selectable", "max", "health"], "UWorldWidget");
addToContainers_variable("", "List of widgets that can be bound with BindWidgetOptional. Auto populated inside ctor. Maps widget name to widget class", "Docs/Classes/UWorldWidget/Variables/_5.html", [], "UWorldWidget");
addToContainers_class("FRTS_Ver2EditorModule", "This module was created to create the editor utility widget for the editor play settings. I did not end up using it for that though or anything really.", "Docs/Classes/FRTS_Ver2EditorModule/FRTS_Ver2EditorModule.html", ["r", "t", "s_", "ver2", "editor", "module"], "");
addToContainers_function("StartupModule", "", "Docs/Classes/FRTS_Ver2EditorModule/Functions/StartupModule.html", ["startup", "module"], "FRTS_Ver2EditorModule");
addToContainers_function("ShutdownModule", "", "Docs/Classes/FRTS_Ver2EditorModule/Functions/ShutdownModule.html", ["shutdown", "module"], "FRTS_Ver2EditorModule");
addToContainers_enum("EPlayerSpawnRule", "", "Docs/Enums/EPlayerSpawnRule/EPlayerSpawnRule.html", ["player", "spawn", "rule"], "");
addToContainers_enumValue("Random", "Pick a random player start on the map", "Docs/Enums/EPlayerSpawnRule/Values/Random.html", [], "EPlayerSpawnRule");
addToContainers_enumValue("NearTeammates", "Try and spawn players near their teammates", "Docs/Enums/EPlayerSpawnRule/Values/NearTeammates.html", ["near", "teammates"], "EPlayerSpawnRule");
addToContainers_enum("EPropertyOverrideMode", "", "Docs/Enums/EPropertyOverrideMode/EPropertyOverrideMode.html", ["property", "override", "mode"], "");
addToContainers_enumValue("UseDefaultIfNotSet", "Only use the override if one is not set", "Docs/Enums/EPropertyOverrideMode/Values/UseDefaultIfNotSet.html", ["use", "default", "if", "not", "set"], "EPropertyOverrideMode");
addToContainers_enumValue("AlwaysUseDefault", "Always use the override", "Docs/Enums/EPropertyOverrideMode/Values/AlwaysUseDefault.html", ["always", "use", "default"], "EPropertyOverrideMode");
addToContainers_enum("EPIEOnMapSelectableSetupResult", "", "Docs/Enums/EPIEOnMapSelectableSetupResult/EPIEOnMapSelectableSetupResult.html", ["p", "i", "e", "on", "map", "selectable", "setup", "result"], "");
addToContainers_enumValue("None", "Here to pick up uninitialized values. Means nothing else. Never to be used", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/None.html", [], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("OwnerIndexTooHigh", "Owner index on instance on map is too high for the number of players in PIE and was not reassigned to the server player so will not be respawned", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/OwnerIndexTooHigh.html", ["owner", "index", "too", "high"], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("ObserverOwner", "Was assigned an owner who is a match observer so cannot be respawned", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/ObserverOwner.html", ["observer", "owner"], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("WrongFaction", "Was assigned owner but the owner\'s faction does not have this selectable on its building/unit roster so could not be respawned", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/WrongFaction.html", ["wrong", "faction"], "EPIEOnMapSelectableSetupResult");
addToContainers_enumValue("Success", "Selectable will be respawned later and will appear in PIE/standalone session", "Docs/Enums/EPIEOnMapSelectableSetupResult/Values/Success.html", [], "EPIEOnMapSelectableSetupResult");
addToContainers_enum("EPlayerType", "", "Docs/Enums/EPlayerType/EPlayerType.html", ["player", "type"], "");
addToContainers_enumValue("Unknown", "Has not been specified yet", "Docs/Enums/EPlayerType/Values/Unknown.html", [], "EPlayerType");
addToContainers_enumValue("Player", "A player participating in a match", "Docs/Enums/EPlayerType/Values/Player.html", [], "EPlayerType");
addToContainers_enumValue("Observer", "A player watching the match", "Docs/Enums/EPlayerType/Values/Observer.html", [], "EPlayerType");
addToContainers_enum("ERotationDirection", "", "Docs/Enums/ERotationDirection/ERotationDirection.html", ["rotation", "direction"], "");
addToContainers_enumValue("NoDirectionEstablished", "Direction of rotation. Used when rotating ghost", "Docs/Enums/ERotationDirection/Values/NoDirectionEstablished.html", ["no", "direction", "established"], "ERotationDirection");
addToContainers_enumValue("Clockwise", "", "Docs/Enums/ERotationDirection/Values/Clockwise.html", [], "ERotationDirection");
addToContainers_enumValue("CounterClockwise", "", "Docs/Enums/ERotationDirection/Values/CounterClockwise.html", ["counter", "clockwise"], "ERotationDirection");
addToContainers_enum("", "", "Docs/Enums//.html", [], "");
addToContainers_enumValue("ResetTiles", "--------------------------------------------------------------------------------------------", "Docs/Enums//Values/ResetTiles.html", ["reset", "tiles"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("0", "", "Docs/Enums//Values/0.html", [], "");
addToContainers_enumValue("RevealTilesFromBuildings", "", "Docs/Enums//Values/RevealTilesFromBuildings.html", ["reveal", "tiles", "from", "buildings"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("RevealTilesFromInfantry", "", "Docs/Enums//Values/RevealTilesFromInfantry.html", ["reveal", "tiles", "from", "infantry"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("2", "", "Docs/Enums//Values/2.html", [], "");
addToContainers_enumValue("TickAndRevealTilesFromTemporaryRevealEffects", "", "Docs/Enums//Values/TickAndRevealTilesFromTemporaryRe.html", ["tick", "and", "reveal", "tiles", "from", "temporary", "reveal", "effects"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("3", "", "Docs/Enums//Values/3.html", [], "");
addToContainers_enumValue("StoreTileVisibility", "", "Docs/Enums//Values/StoreTileVisibility.html", ["store", "tile", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("4", "", "Docs/Enums//Values/4.html", [], "");
addToContainers_enumValue("QueueUpRenderingFogOfWar", "", "Docs/Enums//Values/QueueUpRenderingFogOfWar.html", ["queue", "up", "rendering", "fog", "of", "war"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("5", "", "Docs/Enums//Values/5.html", [], "");
addToContainers_enumValue("StoreHostileTeamSelectableVisibility", "", "Docs/Enums//Values/StoreHostileTeamSelectableVisibil.html", ["store", "hostile", "team", "selectable", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("6", "", "Docs/Enums//Values/6.html", [], "");
addToContainers_enumValue("StoreProjectilesVisibility", "", "Docs/Enums//Values/StoreProjectilesVisibility.html", ["store", "projectiles", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("7", "", "Docs/Enums//Values/7.html", [], "");
addToContainers_enumValue("StoreParticleSystemsVisibility", "", "Docs/Enums//Values/StoreParticleSystemsVisibility.html", ["store", "particle", "systems", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("8", "", "Docs/Enums//Values/8.html", [], "");
addToContainers_enumValue("StoreInventoryItemVisibility", "", "Docs/Enums//Values/StoreInventoryItemVisibility.html", ["store", "inventory", "item", "visibility"], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("9", "", "Docs/Enums//Values/9.html", [], "");
addToContainers_enumValue("Finished", "", "Docs/Enums//Values/Finished.html", [], "");
addToContainers_enumValue("=", "", "Docs/Enums//Values/=.html", [], "");
addToContainers_enumValue("1", "", "Docs/Enums//Values/1.html", [], "");
addToContainers_enumValue("<<", "", "Docs/Enums//Values/<<.html", [], "");
addToContainers_enumValue("10", "", "Docs/Enums//Values/10.html", [], "");
addToContainers_enum("", "", "Docs/Enums/_1/.html", [], "");
addToContainers_enumValue("ResearchedFromBuilding", "How the player completed the upgrade", "Docs/Enums/_1/Values/ResearchedFromBuilding.html", ["researched", "from", "building"], "");
addToContainers_enumValue("CommanderAbility", "", "Docs/Enums/_1/Values/CommanderAbility.html", ["commander", "ability"], "");
addToContainers_enum("", "", "Docs/Enums/_2/.html", [], "");
addToContainers_enumValue("Uninitialized", "This is just a bool but has a third value called \"Uninitialized\". Side note: I get compile errors when this is declared as a UENUM", "Docs/Enums/_2/Values/Uninitialized.html", [], "");
addToContainers_enumValue("False", "", "Docs/Enums/_2/Values/False.html", [], "");
addToContainers_enumValue("True", "", "Docs/Enums/_2/Values/True.html", [], "");
addToContainers_enum("EDamageDealingRule", "", "Docs/Enums/EDamageDealingRule/EDamageDealingRule.html", ["damage", "dealing", "rule"], "");
addToContainers_enumValue("AbsoluteAmount", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EDamageDealingRule/Values/AbsoluteAmount.html", ["absolute", "amount"], "EDamageDealingRule");
addToContainers_enumValue("PercentageOfSelectableResourceAmountDrained", "", "Docs/Enums/EDamageDealingRule/Values/PercentageOfSelectableResourceAmo.html", ["percentage", "of", "selectable", "resource", "amount", "drained"], "EDamageDealingRule");
addToContainers_enum("EUnitState", "", "Docs/Enums/EUnitState/EUnitState.html", ["unit", "state"], "");
addToContainers_enumValue("BehaviorNotStarted", "State AI controller is spawned with", "Docs/Enums/EUnitState/Values/BehaviorNotStarted.html", ["behavior", "not", "started"], "EUnitState");
addToContainers_enumValue("MovingToBarracksInitialPoint", "Was just spawned and is moving to the initial location for building", "Docs/Enums/EUnitState/Values/MovingToBarracksInitialPoint.html", ["moving", "to", "barracks", "initial", "point"], "EUnitState");
addToContainers_enumValue("MovingToBarracksRallyPoint", "Moving to the barracks rally point", "Docs/Enums/EUnitState/Values/MovingToBarracksRallyPoint.html", ["moving", "to", "barracks", "rally", "point"], "EUnitState");
addToContainers_enumValue("PossessedUnitDestroyed", "State when possessed unit has reached zero heath", "Docs/Enums/EUnitState/Values/PossessedUnitDestroyed.html", ["possessed", "unit", "destroyed"], "EUnitState");
addToContainers_enumValue("Idle_WithoutTarget", "Has no command and no target within aquire range", "Docs/Enums/EUnitState/Values/Idle_WithoutTarget.html", ["idle_", "without", "target"], "EUnitState");
addToContainers_enumValue("Idle_WithTarget", "Has no command so is idle but has aquired a target within aquire range and will persue and engage", "Docs/Enums/EUnitState/Values/Idle_WithTarget.html", ["idle_", "with", "target"], "EUnitState");
addToContainers_enumValue("Idle_ReturningToLeashLocation", "Has no command and is returning to leash location after chasing enemy", "Docs/Enums/EUnitState/Values/Idle_ReturningToLeashLocation.html", ["idle_", "returning", "to", "leash", "location"], "EUnitState");
addToContainers_enumValue("HoldingPositionWithoutTarget", "", "Docs/Enums/EUnitState/Values/HoldingPositionWithoutTarget.html", ["holding", "position", "without", "target"], "EUnitState");
addToContainers_enumValue("HoldingPositionWithTarget", "", "Docs/Enums/EUnitState/Values/HoldingPositionWithTarget.html", ["holding", "position", "with", "target"], "EUnitState");
addToContainers_enumValue("MovingToRightClickLocation", "Player has right clicked on world", "Docs/Enums/EUnitState/Values/MovingToRightClickLocation.html", ["moving", "to", "right", "click", "location"], "EUnitState");
addToContainers_enumValue("MovingToPointNearStaticSelectable", "Move to a static selectable e.g. building", "Docs/Enums/EUnitState/Values/MovingToPointNearStaticSelectable.html", ["moving", "to", "point", "near", "static", "selectable"], "EUnitState");
addToContainers_enumValue("MoveCommandToFriendlyMobileSelectable", "can also move itself i.e. not building", "Docs/Enums/EUnitState/Values/MoveCommandToFriendlyMobileSelect.html", ["move", "command", "to", "friendly", "mobile", "selectable"], "EUnitState");
addToContainers_enumValue("RightClickOnEnemy", "Right click or attack move command on an enemy selectable", "Docs/Enums/EUnitState/Values/RightClickOnEnemy.html", ["right", "click", "on", "enemy"], "EUnitState");
addToContainers_enumValue("AttackMoveCommand_WithNoTargetAquired", "Attack move command when clicked on location in world", "Docs/Enums/EUnitState/Values/AttackMoveCommand_WithNoTargetAqu.html", ["attack", "move", "command_", "with", "no", "target", "aquired"], "EUnitState");
addToContainers_enumValue("AttackMoveCommand_WithTargetAquired", "Doing attack move and has aquired a target within range ", "Docs/Enums/EUnitState/Values/AttackMoveCommand_WithTargetAquir.html", ["attack", "move", "command_", "with", "target", "aquired"], "EUnitState");
addToContainers_enumValue("AttackMoveCommand_ReturningToLeashLocation", "", "Docs/Enums/EUnitState/Values/AttackMoveCommand_ReturningToLeas.html", ["attack", "move", "command_", "returning", "to", "leash", "location"], "EUnitState");
addToContainers_enumValue("HeadingToContextCommandWorldLocation", "Heading to location on map to carry out context command", "Docs/Enums/EUnitState/Values/HeadingToContextCommandWorldLocat.html", ["heading", "to", "context", "command", "world", "location"], "EUnitState");
addToContainers_enumValue("ChasingTargetToDoContextCommand", "Heading towards a target to carry out context command", "Docs/Enums/EUnitState/Values/ChasingTargetToDoContextCommand.html", ["chasing", "target", "to", "do", "context", "command"], "EUnitState");
addToContainers_enumValue("HeadingToBuildingToDoBuildingTargetingAbility", "Heading towards a building to do a special building targeting ability", "Docs/Enums/EUnitState/Values/HeadingToBuildingToDoBuildingTarg.html", ["heading", "to", "building", "to", "do", "building", "targeting", "ability"], "EUnitState");
addToContainers_enumValue("HeadingToBuildingToEnterItsGarrison", "", "Docs/Enums/EUnitState/Values/HeadingToBuildingToEnterItsGarris.html", ["heading", "to", "building", "to", "enter", "its", "garrison"], "EUnitState");
addToContainers_enumValue("InsideBuildingGarrison", "This is the only \'inside garrison\' enum value I have. If/when I add being able to attack from inside garrisons then I might want to add another", "Docs/Enums/EUnitState/Values/InsideBuildingGarrison.html", ["inside", "building", "garrison"], "EUnitState");
addToContainers_enumValue("HeadingToResourceSpot", "", "Docs/Enums/EUnitState/Values/HeadingToResourceSpot.html", ["heading", "to", "resource", "spot"], "EUnitState");
addToContainers_enumValue("WaitingToGatherResources", "Standing at a resource spot waiting our turn to gather from it", "Docs/Enums/EUnitState/Values/WaitingToGatherResources.html", ["waiting", "to", "gather", "resources"], "EUnitState");
addToContainers_enumValue("GatheringResources", "", "Docs/Enums/EUnitState/Values/GatheringResources.html", ["gathering", "resources"], "EUnitState");
addToContainers_enumValue("ReturningToResourceDepot", "", "Docs/Enums/EUnitState/Values/ReturningToResourceDepot.html", ["returning", "to", "resource", "depot"], "EUnitState");
addToContainers_enumValue("DroppingOfResources", "Playing drop off resources anim", "Docs/Enums/EUnitState/Values/DroppingOfResources.html", ["dropping", "of", "resources"], "EUnitState");
addToContainers_enumValue("HeadingToConstructionSite", "Heading to a construction site that already exists to work on it", "Docs/Enums/EUnitState/Values/HeadingToConstructionSite.html", ["heading", "to", "construction", "site"], "EUnitState");
addToContainers_enumValue("HeadingToPotentialConstructionSite", "Heading to a location to try and place building foundations when there", "Docs/Enums/EUnitState/Values/HeadingToPotentialConstructionSit.html", ["heading", "to", "potential", "construction", "site"], "EUnitState");
addToContainers_enumValue("WaitingForFoundationsToBePlaced", "Recently tried to place building and waiting for result from player controller", "Docs/Enums/EUnitState/Values/WaitingForFoundationsToBePlaced.html", ["waiting", "for", "foundations", "to", "be", "placed"], "EUnitState");
addToContainers_enumValue("ConstructingBuilding", "", "Docs/Enums/EUnitState/Values/ConstructingBuilding.html", ["constructing", "building"], "EUnitState");
addToContainers_enumValue("DoingContextActionAnim", "Doing the animation for a context action", "Docs/Enums/EUnitState/Values/DoingContextActionAnim.html", ["doing", "context", "action", "anim"], "EUnitState");
addToContainers_enumValue("DoingSpecialBuildingTargetingAbility", "", "Docs/Enums/EUnitState/Values/DoingSpecialBuildingTargetingAbil.html", ["doing", "special", "building", "targeting", "ability"], "EUnitState");
addToContainers_enumValue("GoingToPickUpInventoryItem", "Moving to an inventory item on ground to pick it up", "Docs/Enums/EUnitState/Values/GoingToPickUpInventoryItem.html", ["going", "to", "pick", "up", "inventory", "item"], "EUnitState");
addToContainers_enumValue("PickingUpInventoryItem", "Playing animation to pick up inventory item off ground", "Docs/Enums/EUnitState/Values/PickingUpInventoryItem.html", ["picking", "up", "inventory", "item"], "EUnitState");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EUnitState/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EUnitState");
addToContainers_enum("EUnitAnimState", "", "Docs/Enums/EUnitAnimState/EUnitAnimState.html", ["unit", "anim", "state"], "");
addToContainers_enumValue("NotPlayingImportantAnim", "Not playing an animation that will affect behavior", "Docs/Enums/EUnitAnimState/Values/NotPlayingImportantAnim.html", ["not", "playing", "important", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingAttackAnim", "Playing attack animation and have not reached anim notify that says anim is finshed", "Docs/Enums/EUnitAnimState/Values/DoingAttackAnim.html", ["doing", "attack", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingInterruptibleContextActionAnim", "A context action anim that can be interrupted by a player command", "Docs/Enums/EUnitAnimState/Values/DoingInterruptibleContextActionAn.html", ["doing", "interruptible", "context", "action", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingUninterruptibleContextActionAnim", "A context action anim that cannot be interrupted by a player command", "Docs/Enums/EUnitAnimState/Values/DoingUninterruptibleContextAction.html", ["doing", "uninterruptible", "context", "action", "anim"], "EUnitAnimState");
addToContainers_enumValue("DoingInterruptibleBuildingTargetingAbilityAnim", "A special ability that targets buildings", "Docs/Enums/EUnitAnimState/Values/DoingInterruptibleBuildingTargeti.html", ["doing", "interruptible", "building", "targeting", "ability", "anim"], "EUnitAnimState");
addToContainers_enumValue("PlayingGatheringResourcesAnim", "Playing resource gathering anim", "Docs/Enums/EUnitAnimState/Values/PlayingGatheringResourcesAnim.html", ["playing", "gathering", "resources", "anim"], "EUnitAnimState");
addToContainers_enumValue("PlayingDropOffResourcesAnim", "Playing drop off resources anim", "Docs/Enums/EUnitAnimState/Values/PlayingDropOffResourcesAnim.html", ["playing", "drop", "off", "resources", "anim"], "EUnitAnimState");
addToContainers_enumValue("ConstructingBuildingAnim", "Constructing building", "Docs/Enums/EUnitAnimState/Values/ConstructingBuildingAnim.html", ["constructing", "building", "anim"], "EUnitAnimState");
addToContainers_enum("EDistanceCheckMethod", "", "Docs/Enums/EDistanceCheckMethod/EDistanceCheckMethod.html", ["distance", "check", "method"], "");
addToContainers_enumValue("Closest", "Prefer targets closer to defense structure", "Docs/Enums/EDistanceCheckMethod/Values/Closest.html", [], "EDistanceCheckMethod");
addToContainers_enumValue("Furtherest", "Prefer targest far away from defense structure", "Docs/Enums/EDistanceCheckMethod/Values/Furtherest.html", [], "EDistanceCheckMethod");
addToContainers_enum("ETargetAquireMethodPriorties", "", "Docs/Enums/ETargetAquireMethodPriorties/ETargetAquireMethodPriorties.html", ["target", "aquire", "method", "priorties"], "");
addToContainers_enumValue("None", "Just choose the first actor encounted by iteration. Best performance.", "Docs/Enums/ETargetAquireMethodPriorties/Values/None.html", [], "ETargetAquireMethodPriorties");
addToContainers_enumValue("LeastRotationRequired", "Try and pick actors that would require the building to rotate the least to target If the structure does not have any facing requirement then this is irrelevant. This is a good value to have to avoid enemies \'running circles\' around your structure", "Docs/Enums/ETargetAquireMethodPriorties/Values/LeastRotationRequired.html", ["least", "rotation", "required"], "ETargetAquireMethodPriorties");
addToContainers_enumValue("HasAttack", "Pick actors with an attack over anything else", "Docs/Enums/ETargetAquireMethodPriorties/Values/HasAttack.html", ["has", "attack"], "ETargetAquireMethodPriorties");
addToContainers_enumValue("Distance", "Always pick the closest/furtherest target", "Docs/Enums/ETargetAquireMethodPriorties/Values/Distance.html", [], "ETargetAquireMethodPriorties");
addToContainers_enumValue("HasAttack_LeastRotationRequired", "Pick an actor that has an attack. Pick the one that requires the least rotation to fire at. If no actors have an attack pick the one that requires the least rotation to fire at.", "Docs/Enums/ETargetAquireMethodPriorties/Values/HasAttack_LeastRotationRequired.html", ["has", "attack_", "least", "rotation", "required"], "ETargetAquireMethodPriorties");
addToContainers_enumValue("HasAttack_Distance", "Pick the closest/furtherest actor that has an attack. If no actors have an attack then it will pick the closest/furtherest actor", "Docs/Enums/ETargetAquireMethodPriorties/Values/HasAttack_Distance.html", ["has", "attack_", "distance"], "ETargetAquireMethodPriorties");
addToContainers_enum("ETargetLocationZAxisOption", "", "Docs/Enums/ETargetLocationZAxisOption/ETargetLocationZAxisOption.html", ["target", "location", "z", "axis", "option"], "");
addToContainers_enumValue("DoNothing", "e.g. Player uses ability at location (0.f, 0.f, 0.f). We choose the location (500.f, 0.f, 0.f) as one of the locations around the use location where we should fire a projectile. But this location may not be on the ground. Best performance", "Docs/Enums/ETargetLocationZAxisOption/Values/DoNothing.html", ["do", "nothing"], "ETargetLocationZAxisOption");
addToContainers_enumValue("LineTrace", "Do a line trace so every projectile is fired at a location on the ground", "Docs/Enums/ETargetLocationZAxisOption/Values/LineTrace.html", ["line", "trace"], "ETargetLocationZAxisOption");
addToContainers_enum("", "", "Docs/Enums/_3/.html", [], "");
addToContainers_enumValue("Uninitialized", "@See EUninitializableBool", "Docs/Enums/_3/Values/Uninitialized.html", [], "");
addToContainers_enumValue("False", "", "Docs/Enums/_3/Values/False.html", [], "");
addToContainers_enumValue("True", "", "Docs/Enums/_3/Values/True.html", [], "");
addToContainers_enum("", "", "Docs/Enums/_4/.html", [], "");
addToContainers_enumValue("Phase1_MovingToTarget", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/_4/Values/Phase1_MovingToTarget.html", ["phase1_", "moving", "to", "target"], "");
addToContainers_enumValue("Phase2_Descending", "Lowering pitch so facing ground", "Docs/Enums/_4/Values/Phase2_Descending.html", ["phase2_", "descending"], "");
addToContainers_enumValue("Phase3_Firing", "Is firing shots", "Docs/Enums/_4/Values/Phase3_Firing.html", ["phase3_", "firing"], "");
addToContainers_enumValue("Phase4_PostFired", "Has fired every shot", "Docs/Enums/_4/Values/Phase4_PostFired.html", ["phase4_", "post", "fired"], "");
addToContainers_enum("EPreciseProjectileMovementMode", "", "Docs/Enums/EPreciseProjectileMovementMode/EPreciseProjectileMovementMode.html", ["precise", "projectile", "movement", "mode"], "");
addToContainers_enumValue("StraightLine", "Projectile will only travel in a straight line. Quick to set up but limited in what you can do.", "Docs/Enums/EPreciseProjectileMovementMode/Values/StraightLine.html", ["straight", "line"], "EPreciseProjectileMovementMode");
addToContainers_enumValue("CurveAssets", "Use curve assets to specify exactly how projectile moves and rotates", "Docs/Enums/EPreciseProjectileMovementMode/Values/CurveAssets.html", ["curve", "assets"], "EPreciseProjectileMovementMode");
addToContainers_enum("EArcingProjectileTrajectoryMethod", "", "Docs/Enums/EArcingProjectileTrajectoryMethod/EArcingProjectileTrajectoryMethod.html", ["arcing", "projectile", "trajectory", "method"], "");
addToContainers_enumValue("ChooseInitialVelocity", "With this method the projectile\'s initial velocity is always the same. It is the arc that will vary. UProjectileMovementComponent::InitialSpeed is what you should tweak to get the projectile firing how you want it. Also UNoCollisionProjectileMovement::bUseHighArc also matters. For this to work InitialSpeed has to be high enough.", "Docs/Enums/EArcingProjectileTrajectoryMethod/Values/ChooseInitialVelocity.html", ["choose", "initial", "velocity"], "EArcingProjectileTrajectoryMethod");
addToContainers_enumValue("ChooseArc", "UNoCollisionProjectileMovement::ArcValue is what you should tweak. InitialSpeed is ignored. With this method it\'s the arc that will stay the same. It is the projectile\'s launch speed that will vary (I think). I think this option is more safer in that it can never fail to find an arc (I think. I know ChooseInitialVelocity can fail if InitialSpeed is too low).", "Docs/Enums/EArcingProjectileTrajectoryMethod/Values/ChooseArc.html", ["choose", "arc"], "EArcingProjectileTrajectoryMethod");
addToContainers_enum("ENoCollisionProjectileMode", "", "Docs/Enums/ENoCollisionProjectileMode/ENoCollisionProjectileMode.html", ["no", "collision", "projectile", "mode"], "");
addToContainers_enumValue("StraightFiringAtTarget", "Fires straight and is being fired at a actor", "Docs/Enums/ENoCollisionProjectileMode/Values/StraightFiringAtTarget.html", ["straight", "firing", "at", "target"], "ENoCollisionProjectileMode");
addToContainers_enumValue("StraightFiringAtLocation", "Fires straight and is being fired at a location", "Docs/Enums/ENoCollisionProjectileMode/Values/StraightFiringAtLocation.html", ["straight", "firing", "at", "location"], "ENoCollisionProjectileMode");
addToContainers_enumValue("ArcedFiringAtLocation", "Fires in an arc and is being fired at a location", "Docs/Enums/ENoCollisionProjectileMode/Values/ArcedFiringAtLocation.html", ["arced", "firing", "at", "location"], "ENoCollisionProjectileMode");
addToContainers_enumValue("ArcedFiringAtLocation", "Fires in an arc and is being fired at a location", "Docs/Enums/ENoCollisionProjectileMode/Values/ArcedFiringAtLocation.html", ["arced", "firing", "at", "location"], "ENoCollisionProjectileMode");
addToContainers_enum("", "", "Docs/Enums/_5/.html", [], "");
addToContainers_enumValue("HitSomething", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/_5/Values/HitSomething.html", ["hit", "something"], "");
addToContainers_enumValue("OutsideWorldBounds", "", "Docs/Enums/_5/Values/OutsideWorldBounds.html", ["outside", "world", "bounds"], "");
addToContainers_enum("ECPUPlayerState", "", "Docs/Enums/ECPUPlayerState/ECPUPlayerState.html", ["c", "p", "u", "player", "state"], "");
addToContainers_enumValue("None", "The state the CPU players infastructure and economy is in", "Docs/Enums/ECPUPlayerState/Values/None.html", [], "ECPUPlayerState");
addToContainers_enumValue("Normal", "Can build buildings and gather resources", "Docs/Enums/ECPUPlayerState/Values/Normal.html", [], "ECPUPlayerState");
addToContainers_enumValue("InfastructureUnrecoverable", "Cannot construct buildings anymore e.g. construction yard gone. A long victory may still be possible but perhaps CPU player will try to win in the short to medium term", "Docs/Enums/ECPUPlayerState/Values/InfastructureUnrecoverable.html", ["infastructure", "unrecoverable"], "ECPUPlayerState");
addToContainers_enumValue("EconomyUnrecoverable", "Cannot gather resources anymore. CPU player will play to win in the short-term", "Docs/Enums/ECPUPlayerState/Values/EconomyUnrecoverable.html", ["economy", "unrecoverable"], "ECPUPlayerState");
addToContainers_enumValue("InfastructureUnrecoverableAndArmyProductionImpossible", "Cannot construct buildings and build any army units. CPU player will play to win in the very short-term", "Docs/Enums/ECPUPlayerState/Values/InfastructureUnrecoverableAndArmy.html", ["infastructure", "unrecoverable", "and", "army", "production", "impossible"], "ECPUPlayerState");
addToContainers_enum("", "", "Docs/Enums/_6/.html", [], "");
addToContainers_enumValue("None", "Not a comment", "Docs/Enums/_6/Values/None.html", [], "");
addToContainers_enumValue("SingleLineComment", "spans onto another line like this", "Docs/Enums/_6/Values/SingleLineComment.html", ["single", "line", "comment"], "");
addToContainers_enumValue("MultiLineComment", "A comment like this", "Docs/Enums/_6/Values/MultiLineComment.html", ["multi", "line", "comment"], "");
addToContainers_enum("", "", "Docs/Enums/_7/.html", [], "");
addToContainers_enumValue("Private", "", "Docs/Enums/_7/Values/Private.html", [], "");
addToContainers_enumValue("Protected", "", "Docs/Enums/_7/Values/Protected.html", [], "");
addToContainers_enumValue("Public", "", "Docs/Enums/_7/Values/Public.html", [], "");
addToContainers_enum("", "", "Docs/Enums/_8/.html", [], "");
addToContainers_enumValue("Reference", "One of these: int32 & MyVariable;", "Docs/Enums/_8/Values/Reference.html", [], "");
addToContainers_enumValue("Pointer", "One of these: int32 * MyVariable;", "Docs/Enums/_8/Values/Pointer.html", [], "");
addToContainers_enumValue("ConstPointer", "One of these: int32 * const MyVariable;", "Docs/Enums/_8/Values/ConstPointer.html", ["const", "pointer"], "");
addToContainers_enum("", "", "Docs/Enums/_9/.html", [], "");
addToContainers_enumValue("Class", "-------------------------------------------------------------------", "Docs/Enums/_9/Values/Class.html", [], "");
addToContainers_enumValue("Struct", "", "Docs/Enums/_9/Values/Struct.html", [], "");
addToContainers_enumValue("Enum", "", "Docs/Enums/_9/Values/Enum.html", [], "");
addToContainers_enumValue("Function", "", "Docs/Enums/_9/Values/Function.html", [], "");
addToContainers_enumValue("Variable", "", "Docs/Enums/_9/Values/Variable.html", [], "");
addToContainers_enumValue("EnumValue", "", "Docs/Enums/_9/Values/EnumValue.html", ["enum", "value"], "");
addToContainers_enum("EActionToTakeAfterDestroySession", "", "Docs/Enums/EActionToTakeAfterDestroySession/EActionToTakeAfterDestroySession.html", ["action", "to", "take", "after", "destroy", "session"], "");
addToContainers_enumValue("None", "Do nothing. Probably not desired", "Docs/Enums/EActionToTakeAfterDestroySession/Values/None.html", [], "EActionToTakeAfterDestroySession");
addToContainers_enumValue("ReturnToLobbyBrowsingScreen", "Return to lobby browsing screen", "Docs/Enums/EActionToTakeAfterDestroySession/Values/ReturnToLobbyBrowsingScreen.html", ["return", "to", "lobby", "browsing", "screen"], "EActionToTakeAfterDestroySession");
addToContainers_enumValue("HostToMainMenuClientsToLobbyBrowsing", "Return host to main menu and any connected clients to lobby browsing screen", "Docs/Enums/EActionToTakeAfterDestroySession/Values/HostToMainMenuClientsToLobbyBrows.html", ["host", "to", "main", "menu", "clients", "to", "lobby", "browsing"], "EActionToTakeAfterDestroySession");
addToContainers_enumValue("CreateNewSession", "Create a new session. Use this if trying to create a session but one is already made", "Docs/Enums/EActionToTakeAfterDestroySession/Values/CreateNewSession.html", ["create", "new", "session"], "EActionToTakeAfterDestroySession");
addToContainers_enum("EClassRepNodeMapping", "", "Docs/Enums/EClassRepNodeMapping/EClassRepNodeMapping.html", ["class", "rep", "node", "mapping"], "");
addToContainers_enumValue("NotRouted", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EClassRepNodeMapping/Values/NotRouted.html", ["not", "routed"], "EClassRepNodeMapping");
addToContainers_enumValue("RelevantAllConnections", "", "Docs/Enums/EClassRepNodeMapping/Values/RelevantAllConnections.html", ["relevant", "all", "connections"], "EClassRepNodeMapping");
addToContainers_enumValue("RelevantOwnerOnly", "", "Docs/Enums/EClassRepNodeMapping/Values/RelevantOwnerOnly.html", ["relevant", "owner", "only"], "EClassRepNodeMapping");
addToContainers_enumValue("PlayerOwnedSelectable_Building", "e.g. units, buildings, etc built by player. NOT neutral selectables", "Docs/Enums/EClassRepNodeMapping/Values/PlayerOwnedSelectable_Building.html", ["player", "owned", "selectable_", "building"], "EClassRepNodeMapping");
addToContainers_enumValue("PlayerOwnedSelectable_Infantry", "", "Docs/Enums/EClassRepNodeMapping/Values/PlayerOwnedSelectable_Infantry.html", ["player", "owned", "selectable_", "infantry"], "EClassRepNodeMapping");
addToContainers_enum("ETestRepPolicy", "", "Docs/Enums/ETestRepPolicy/ETestRepPolicy.html", ["test", "rep", "policy"], "");
addToContainers_enumValue("NotRouted", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/ETestRepPolicy/Values/NotRouted.html", ["not", "routed"], "ETestRepPolicy");
addToContainers_enumValue("RelevantOwnerOnly", "", "Docs/Enums/ETestRepPolicy/Values/RelevantOwnerOnly.html", ["relevant", "owner", "only"], "ETestRepPolicy");
addToContainers_enumValue("RelevantAllConnections", "", "Docs/Enums/ETestRepPolicy/Values/RelevantAllConnections.html", ["relevant", "all", "connections"], "ETestRepPolicy");
addToContainers_enumValue("RelevantAllConnections", "", "Docs/Enums/ETestRepPolicy/Values/RelevantAllConnections.html", ["relevant", "all", "connections"], "ETestRepPolicy");
addToContainers_enum("", "", "Docs/Enums/_10/.html", [], "");
addToContainers_enumValue("PlayerOnly", "------------------------------------------------------------------------------------------------ FIXME Issues in this file: I ran into a crazy bug. The jist of it was that I could not declare function pointer variables in my class otherwise the arrays would not work. That\'s right. Simply declaring the function pointer variable and doing absolutally nothing with it will cause the array to have .Num() of zero or if using regular C arrays the values will be different every time and never the correct ones. But if I simply removed the function pointer variables from the class then it would work. The implications of this bug is that I have to use FName to define the function to call, and every input function in PC must be a UFUNCTION. In PC::SetupInputComponent the functions are bound by name or function pointer. I hope binding input to a UInputComponent with FNames instead of raw function pointers doesn\'t have any effect on performance. But it binds it as a dynamic delegate so I\'m pretty sure it does. ------------------------------------------------------------------------------------------------", "Docs/Enums/_10/Values/PlayerOnly.html", ["player", "only"], "");
addToContainers_enumValue("ObserverOnly", "", "Docs/Enums/_10/Values/ObserverOnly.html", ["observer", "only"], "");
addToContainers_enumValue("PlayerAndObserver", "", "Docs/Enums/_10/Values/PlayerAndObserver.html", ["player", "and", "observer"], "");
addToContainers_enum("EKeyMappingAction", "", "Docs/Enums/EKeyMappingAction/EKeyMappingAction.html", ["key", "mapping", "action"], "");
addToContainers_enumValue("None", "If you\'re adding a value for CreateDefaultActionInfos() then just add it. You don\'t need to do anything else with the new enum value", "Docs/Enums/EKeyMappingAction/Values/None.html", [], "EKeyMappingAction");
addToContainers_enumValue("LMB", "-----------------------------------------", "Docs/Enums/EKeyMappingAction/Values/LMB.html", ["m", "b"], "EKeyMappingAction");
addToContainers_enumValue("RMB", "", "Docs/Enums/EKeyMappingAction/Values/RMB.html", ["m", "b"], "EKeyMappingAction");
addToContainers_enumValue("ZoomCameraIn", "", "Docs/Enums/EKeyMappingAction/Values/ZoomCameraIn.html", ["zoom", "camera", "in"], "EKeyMappingAction");
addToContainers_enumValue("ZoomCameraOut", "", "Docs/Enums/EKeyMappingAction/Values/ZoomCameraOut.html", ["zoom", "camera", "out"], "EKeyMappingAction");
addToContainers_enumValue("EnableCameraLookAround", "", "Docs/Enums/EKeyMappingAction/Values/EnableCameraLookAround.html", ["enable", "camera", "look", "around"], "EKeyMappingAction");
addToContainers_enumValue("ResetCameraRotationToOriginal", "", "Docs/Enums/EKeyMappingAction/Values/ResetCameraRotationToOriginal.html", ["reset", "camera", "rotation", "to", "original"], "EKeyMappingAction");
addToContainers_enumValue("ResetCameraZoomToOriginal", "", "Docs/Enums/EKeyMappingAction/Values/ResetCameraZoomToOriginal.html", ["reset", "camera", "zoom", "to", "original"], "EKeyMappingAction");
addToContainers_enumValue("ResetCameraRotationAndZoomToOriginal", "", "Docs/Enums/EKeyMappingAction/Values/ResetCameraRotationAndZoomToOrigi.html", ["reset", "camera", "rotation", "and", "zoom", "to", "original"], "EKeyMappingAction");
addToContainers_enumValue("OpenTeamChat", "", "Docs/Enums/EKeyMappingAction/Values/OpenTeamChat.html", ["open", "team", "chat"], "EKeyMappingAction");
addToContainers_enumValue("OpenAllChat", "", "Docs/Enums/EKeyMappingAction/Values/OpenAllChat.html", ["open", "all", "chat"], "EKeyMappingAction");
addToContainers_enumValue("OpenPauseMenuSlashCancel", "", "Docs/Enums/EKeyMappingAction/Values/OpenPauseMenuSlashCancel.html", ["open", "pause", "menu", "slash", "cancel"], "EKeyMappingAction");
addToContainers_enumValue("InstaQuitGame", "", "Docs/Enums/EKeyMappingAction/Values/InstaQuitGame.html", ["insta", "quit", "game"], "EKeyMappingAction");
addToContainers_enumValue("ShowDevelopmentCheatWidget", "", "Docs/Enums/EKeyMappingAction/Values/ShowDevelopmentCheatWidget.html", ["show", "development", "cheat", "widget"], "EKeyMappingAction");
addToContainers_enumValue("OpenCommanderSkillTree", "", "Docs/Enums/EKeyMappingAction/Values/OpenCommanderSkillTree.html", ["open", "commander", "skill", "tree"], "EKeyMappingAction");
addToContainers_enumValue("CloseCommanderSkillTree", "", "Docs/Enums/EKeyMappingAction/Values/CloseCommanderSkillTree.html", ["close", "commander", "skill", "tree"], "EKeyMappingAction");
addToContainers_enumValue("ToggleCommanderSkillTree", "", "Docs/Enums/EKeyMappingAction/Values/ToggleCommanderSkillTree.html", ["toggle", "commander", "skill", "tree"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup0", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup0.html", ["assign", "control", "group0"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup1", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup1.html", ["assign", "control", "group1"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup2", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup2.html", ["assign", "control", "group2"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup3", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup3.html", ["assign", "control", "group3"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup4", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup4.html", ["assign", "control", "group4"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup5", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup5.html", ["assign", "control", "group5"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup6", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup6.html", ["assign", "control", "group6"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup7", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup7.html", ["assign", "control", "group7"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup8", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup8.html", ["assign", "control", "group8"], "EKeyMappingAction");
addToContainers_enumValue("AssignControlGroup9", "", "Docs/Enums/EKeyMappingAction/Values/AssignControlGroup9.html", ["assign", "control", "group9"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup0", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup0.html", ["select", "control", "group0"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup1", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup1.html", ["select", "control", "group1"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup2", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup2.html", ["select", "control", "group2"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup3", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup3.html", ["select", "control", "group3"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup4", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup4.html", ["select", "control", "group4"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup5", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup5.html", ["select", "control", "group5"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup6", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup6.html", ["select", "control", "group6"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup7", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup7.html", ["select", "control", "group7"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup8", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup8.html", ["select", "control", "group8"], "EKeyMappingAction");
addToContainers_enumValue("SelectControlGroup9", "", "Docs/Enums/EKeyMappingAction/Values/SelectControlGroup9.html", ["select", "control", "group9"], "EKeyMappingAction");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "-----------------------------------------", "Docs/Enums/EKeyMappingAction/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EKeyMappingAction");
addToContainers_enum("EKeyMappingAxis", "", "Docs/Enums/EKeyMappingAxis/EKeyMappingAxis.html", ["key", "mapping", "axis"], "");
addToContainers_enumValue("None", "", "Docs/Enums/EKeyMappingAxis/Values/None.html", [], "EKeyMappingAxis");
addToContainers_enumValue("MouseMoveX", "-----------------------------------------", "Docs/Enums/EKeyMappingAxis/Values/MouseMoveX.html", ["mouse", "move", "x"], "EKeyMappingAxis");
addToContainers_enumValue("MouseMoveY", "", "Docs/Enums/EKeyMappingAxis/Values/MouseMoveY.html", ["mouse", "move", "y"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraLeft", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraLeft.html", ["move", "camera", "left"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraRight", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraRight.html", ["move", "camera", "right"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraForward", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraForward.html", ["move", "camera", "forward"], "EKeyMappingAxis");
addToContainers_enumValue("MoveCameraBackward", "", "Docs/Enums/EKeyMappingAxis/Values/MoveCameraBackward.html", ["move", "camera", "backward"], "EKeyMappingAxis");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "-----------------------------------------", "Docs/Enums/EKeyMappingAxis/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EKeyMappingAxis");
addToContainers_enum("EVariableType", "", "Docs/Enums/EVariableType/EVariableType.html", ["variable", "type"], "");
addToContainers_enumValue("None", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EVariableType/Values/None.html", [], "EVariableType");
addToContainers_enumValue("Bool", "", "Docs/Enums/EVariableType/Values/Bool.html", [], "EVariableType");
addToContainers_enumValue("Float", "", "Docs/Enums/EVariableType/Values/Float.html", [], "EVariableType");
addToContainers_enum("EDependencyRequirementType", "", "Docs/Enums/EDependencyRequirementType/EDependencyRequirementType.html", ["dependency", "requirement", "type"], "");
addToContainers_enumValue("Bool", "", "Docs/Enums/EDependencyRequirementType/Values/Bool.html", [], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsLessThanOrEqualTo", "~ Floats", "Docs/Enums/EDependencyRequirementType/Values/Float_IsLessThanOrEqualTo.html", ["float_", "is", "less", "than", "or", "equal", "to"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsLessThan", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsLessThan.html", ["float_", "is", "less", "than"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsEqualTo", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsEqualTo.html", ["float_", "is", "equal", "to"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsGreaterThan", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsGreaterThan.html", ["float_", "is", "greater", "than"], "EDependencyRequirementType");
addToContainers_enumValue("Float_IsGreaterThanOrEqualTo", "", "Docs/Enums/EDependencyRequirementType/Values/Float_IsGreaterThanOrEqualTo.html", ["float_", "is", "greater", "than", "or", "equal", "to"], "EDependencyRequirementType");
addToContainers_enum("EGameStartType", "", "Docs/Enums/EGameStartType/EGameStartType.html", ["game", "start", "type"], "");
addToContainers_enumValue("HasNotStartedGameBefore", "", "Docs/Enums/EGameStartType/Values/HasNotStartedGameBefore.html", ["has", "not", "started", "game", "before"], "EGameStartType");
addToContainers_enumValue("HasStartedGameBefore", "", "Docs/Enums/EGameStartType/Values/HasStartedGameBefore.html", ["has", "started", "game", "before"], "EGameStartType");
addToContainers_enumValue("HasStartedGameBefore", "", "Docs/Enums/EGameStartType/Values/HasStartedGameBefore.html", ["has", "started", "game", "before"], "EGameStartType");
addToContainers_enum("EFaction", "", "Docs/Enums/EFaction/EFaction.html", [], "");
addToContainers_enumValue("None", "Different playable factions. Examples of factions from RTS games: Terran, Zerg, Soviets, Allies, etc", "Docs/Enums/EFaction/Values/None.html", [], "EFaction");
addToContainers_enumValue("Humans", "=========================================", "Docs/Enums/EFaction/Values/Humans.html", [], "EFaction");
addToContainers_enumValue("Monsters", "", "Docs/Enums/EFaction/Values/Monsters.html", [], "EFaction");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "This should always be last in the enum", "Docs/Enums/EFaction/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EFaction");
addToContainers_enum("ETeam", "", "Docs/Enums/ETeam/ETeam.html", [], "");
addToContainers_enumValue("Uninitialized", "Allied players share the same team", "Docs/Enums/ETeam/Values/Uninitialized.html", [], "ETeam");
addToContainers_enumValue("Team1", "=========================================", "Docs/Enums/ETeam/Values/Team1.html", [], "ETeam");
addToContainers_enumValue("Team2", "", "Docs/Enums/ETeam/Values/Team2.html", [], "ETeam");
addToContainers_enumValue("Team3", "", "Docs/Enums/ETeam/Values/Team3.html", [], "ETeam");
addToContainers_enumValue("Team4", "", "Docs/Enums/ETeam/Values/Team4.html", [], "ETeam");
addToContainers_enumValue("Neutral", "Examples of neutral: map resource spots", "Docs/Enums/ETeam/Values/Neutral.html", [], "ETeam");
addToContainers_enumValue("Observer", "Someone spectating the match", "Docs/Enums/ETeam/Values/Observer.html", [], "ETeam");
addToContainers_enum("EBuildingType", "", "Docs/Enums/EBuildingType/EBuildingType.html", ["building", "type"], "");
addToContainers_enumValue("HumanMain", "=========================================", "Docs/Enums/EBuildingType/Values/HumanMain.html", ["human", "main"], "EBuildingType");
addToContainers_enumValue("HumanSupplyDepot", "", "Docs/Enums/EBuildingType/Values/HumanSupplyDepot.html", ["human", "supply", "depot"], "EBuildingType");
addToContainers_enumValue("HumanPowerPlant", "", "Docs/Enums/EBuildingType/Values/HumanPowerPlant.html", ["human", "power", "plant"], "EBuildingType");
addToContainers_enumValue("HumanBarracks", "", "Docs/Enums/EBuildingType/Values/HumanBarracks.html", ["human", "barracks"], "EBuildingType");
addToContainers_enumValue("HumanRadar", "", "Docs/Enums/EBuildingType/Values/HumanRadar.html", ["human", "radar"], "EBuildingType");
addToContainers_enumValue("HumanAirForceBase", "", "Docs/Enums/EBuildingType/Values/HumanAirForceBase.html", ["human", "air", "force", "base"], "EBuildingType");
addToContainers_enumValue("HumanMissleSilo", "", "Docs/Enums/EBuildingType/Values/HumanMissleSilo.html", ["human", "missle", "silo"], "EBuildingType");
addToContainers_enumValue("HumanTurret", "", "Docs/Enums/EBuildingType/Values/HumanTurret.html", ["human", "turret"], "EBuildingType");
addToContainers_enumValue("HumanMissleTurret", "", "Docs/Enums/EBuildingType/Values/HumanMissleTurret.html", ["human", "missle", "turret"], "EBuildingType");
addToContainers_enumValue("HumanSniperNest", "", "Docs/Enums/EBuildingType/Values/HumanSniperNest.html", ["human", "sniper", "nest"], "EBuildingType");
addToContainers_enumValue("MonstersMain", "", "Docs/Enums/EBuildingType/Values/MonstersMain.html", ["monsters", "main"], "EBuildingType");
addToContainers_enumValue("MonstersBarracks", "", "Docs/Enums/EBuildingType/Values/MonstersBarracks.html", ["monsters", "barracks"], "EBuildingType");
addToContainers_enumValue("MonstersAdvancedBarracks", "", "Docs/Enums/EBuildingType/Values/MonstersAdvancedBarracks.html", ["monsters", "advanced", "barracks"], "EBuildingType");
addToContainers_enumValue("MonstersItemShop", "", "Docs/Enums/EBuildingType/Values/MonstersItemShop.html", ["monsters", "item", "shop"], "EBuildingType");
addToContainers_enumValue("MonstersSpecialBarracks", "", "Docs/Enums/EBuildingType/Values/MonstersSpecialBarracks.html", ["monsters", "special", "barracks"], "EBuildingType");
addToContainers_enumValue("MonstersSandDepot", "", "Docs/Enums/EBuildingType/Values/MonstersSandDepot.html", ["monsters", "sand", "depot"], "EBuildingType");
addToContainers_enumValue("MonstersSuperweapon", "", "Docs/Enums/EBuildingType/Values/MonstersSuperweapon.html", ["monsters", "superweapon"], "EBuildingType");
addToContainers_enumValue("MonstersObelisk", "", "Docs/Enums/EBuildingType/Values/MonstersObelisk.html", ["monsters", "obelisk"], "EBuildingType");
addToContainers_enumValue("ResourceSpot", "Do not use this as one of your faction buildings", "Docs/Enums/EBuildingType/Values/ResourceSpot.html", ["resource", "spot"], "EBuildingType");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "This is always 2nd last in the enum", "Docs/Enums/EBuildingType/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuildingType");
addToContainers_enumValue("NotBuilding", "This is always last in the enum", "Docs/Enums/EBuildingType/Values/NotBuilding.html", ["not", "building"], "EBuildingType");
addToContainers_enum("EUnitType", "", "Docs/Enums/EUnitType/EUnitType.html", ["unit", "type"], "");
addToContainers_enumValue("None", "Here to pick up uninitialized values", "Docs/Enums/EUnitType/Values/None.html", [], "EUnitType");
addToContainers_enumValue("HumanWorker", "~ Units here will be given lowest priority when choosing a context menu to show when selecting multiple units", "Docs/Enums/EUnitType/Values/HumanWorker.html", ["human", "worker"], "EUnitType");
addToContainers_enumValue("HumanCollector", "", "Docs/Enums/EUnitType/Values/HumanCollector.html", ["human", "collector"], "EUnitType");
addToContainers_enumValue("HumanBasic", "", "Docs/Enums/EUnitType/Values/HumanBasic.html", ["human", "basic"], "EUnitType");
addToContainers_enumValue("HumanSniper", "", "Docs/Enums/EUnitType/Values/HumanSniper.html", ["human", "sniper"], "EUnitType");
addToContainers_enumValue("HumanRecon", "", "Docs/Enums/EUnitType/Values/HumanRecon.html", ["human", "recon"], "EUnitType");
addToContainers_enumValue("HumanSpellcaster", "", "Docs/Enums/EUnitType/Values/HumanSpellcaster.html", ["human", "spellcaster"], "EUnitType");
addToContainers_enumValue("HumanSpecial", "", "Docs/Enums/EUnitType/Values/HumanSpecial.html", ["human", "special"], "EUnitType");
addToContainers_enumValue("MonstersCollector", "", "Docs/Enums/EUnitType/Values/MonstersCollector.html", ["monsters", "collector"], "EUnitType");
addToContainers_enumValue("MonstersMelee", "", "Docs/Enums/EUnitType/Values/MonstersMelee.html", ["monsters", "melee"], "EUnitType");
addToContainers_enumValue("MonstersBasicInfantry", "", "Docs/Enums/EUnitType/Values/MonstersBasicInfantry.html", ["monsters", "basic", "infantry"], "EUnitType");
addToContainers_enumValue("MonstersHeavyInfantry", "", "Docs/Enums/EUnitType/Values/MonstersHeavyInfantry.html", ["monsters", "heavy", "infantry"], "EUnitType");
addToContainers_enumValue("MonstersMedic", "", "Docs/Enums/EUnitType/Values/MonstersMedic.html", ["monsters", "medic"], "EUnitType");
addToContainers_enumValue("MonstersSpecial", "", "Docs/Enums/EUnitType/Values/MonstersSpecial.html", ["monsters", "special"], "EUnitType");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "~ This is always 2nd last in the enum", "Docs/Enums/EUnitType/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EUnitType");
addToContainers_enumValue("NotUnit", "~ This is always last in the enum", "Docs/Enums/EUnitType/Values/NotUnit.html", ["not", "unit"], "EUnitType");
addToContainers_enum("EUpgradeType", "", "Docs/Enums/EUpgradeType/EUpgradeType.html", ["upgrade", "type"], "");
addToContainers_enumValue("ImprovedBasicInfantryDamage", "=========================================", "Docs/Enums/EUpgradeType/Values/ImprovedBasicInfantryDamage.html", ["improved", "basic", "infantry", "damage"], "EUpgradeType");
addToContainers_enumValue("ImprovedSniperFireRate", "", "Docs/Enums/EUpgradeType/Values/ImprovedSniperFireRate.html", ["improved", "sniper", "fire", "rate"], "EUpgradeType");
addToContainers_enumValue("ImprovedSpellcasterManaRegenRate", "", "Docs/Enums/EUpgradeType/Values/ImprovedSpellcasterManaRegenRate.html", ["improved", "spellcaster", "mana", "regen", "rate"], "EUpgradeType");
addToContainers_enumValue("ImprovedCollectorResourceCapacity", "", "Docs/Enums/EUpgradeType/Values/ImprovedCollectorResourceCapacity.html", ["improved", "collector", "resource", "capacity"], "EUpgradeType");
addToContainers_enumValue("UnlockTrainMonstersMelee", "", "Docs/Enums/EUpgradeType/Values/UnlockTrainMonstersMelee.html", ["unlock", "train", "monsters", "melee"], "EUpgradeType");
addToContainers_enumValue("UnlockTrainSnipers", "", "Docs/Enums/EUpgradeType/Values/UnlockTrainSnipers.html", ["unlock", "train", "snipers"], "EUpgradeType");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "=========================================", "Docs/Enums/EUpgradeType/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EUpgradeType");
addToContainers_enumValue("None", "For making adding to TMap in editor less painful. Leave this always as last in enum", "Docs/Enums/EUpgradeType/Values/None.html", [], "EUpgradeType");
addToContainers_enum("EInventoryItem", "", "Docs/Enums/EInventoryItem/EInventoryItem.html", ["inventory", "item"], "");
addToContainers_enumValue("Shoes", "=========================================", "Docs/Enums/EInventoryItem/Values/Shoes.html", [], "EInventoryItem");
addToContainers_enumValue("SimpleBangle", "", "Docs/Enums/EInventoryItem/Values/SimpleBangle.html", ["simple", "bangle"], "EInventoryItem");
addToContainers_enumValue("RedGem", "", "Docs/Enums/EInventoryItem/Values/RedGem.html", ["red", "gem"], "EInventoryItem");
addToContainers_enumValue("GreenGem", "", "Docs/Enums/EInventoryItem/Values/GreenGem.html", ["green", "gem"], "EInventoryItem");
addToContainers_enumValue("RottenPumpkin", "", "Docs/Enums/EInventoryItem/Values/RottenPumpkin.html", ["rotten", "pumpkin"], "EInventoryItem");
addToContainers_enumValue("Apple", "", "Docs/Enums/EInventoryItem/Values/Apple.html", [], "EInventoryItem");
addToContainers_enumValue("AverageCrown", "", "Docs/Enums/EInventoryItem/Values/AverageCrown.html", ["average", "crown"], "EInventoryItem");
addToContainers_enumValue("GoldenCrown", "", "Docs/Enums/EInventoryItem/Values/GoldenCrown.html", ["golden", "crown"], "EInventoryItem");
addToContainers_enumValue("Necklace", "", "Docs/Enums/EInventoryItem/Values/Necklace.html", [], "EInventoryItem");
addToContainers_enumValue("GoldBar", "", "Docs/Enums/EInventoryItem/Values/GoldBar.html", ["gold", "bar"], "EInventoryItem");
addToContainers_enumValue("GoldenDagger", "", "Docs/Enums/EInventoryItem/Values/GoldenDagger.html", ["golden", "dagger"], "EInventoryItem");
addToContainers_enumValue("StrongSniperRifle", "", "Docs/Enums/EInventoryItem/Values/StrongSniperRifle.html", ["strong", "sniper", "rifle"], "EInventoryItem");
addToContainers_enumValue("ArtilleryBeacon", "", "Docs/Enums/EInventoryItem/Values/ArtilleryBeacon.html", ["artillery", "beacon"], "EInventoryItem");
addToContainers_enumValue("None", "=========================================", "Docs/Enums/EInventoryItem/Values/None.html", [], "EInventoryItem");
addToContainers_enum("EResourceType", "", "Docs/Enums/EResourceType/EResourceType.html", ["resource", "type"], "");
addToContainers_enumValue("None", "Always first in enum", "Docs/Enums/EResourceType/Values/None.html", [], "EResourceType");
addToContainers_enumValue("Cash", "=========================================", "Docs/Enums/EResourceType/Values/Cash.html", [], "EResourceType");
addToContainers_enumValue("Sand", "", "Docs/Enums/EResourceType/Values/Sand.html", [], "EResourceType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EResourceType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EResourceType");
addToContainers_enum("EHousingResourceType", "", "Docs/Enums/EHousingResourceType/EHousingResourceType.html", ["housing", "resource", "type"], "");
addToContainers_enumValue("None", "Resource types similar to the population resource in starcraft II. For now buildings can provide it and units and use it. Could possibly allow buildings to also use it aswell but just keeping it basic for now.", "Docs/Enums/EHousingResourceType/Values/None.html", [], "EHousingResourceType");
addToContainers_enumValue("Population", "=========================================", "Docs/Enums/EHousingResourceType/Values/Population.html", [], "EHousingResourceType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EHousingResourceType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EHousingResourceType");
addToContainers_enum("ECPUDifficulty", "", "Docs/Enums/ECPUDifficulty/ECPUDifficulty.html", ["c", "p", "u", "difficulty"], "");
addToContainers_enumValue("None", "", "Docs/Enums/ECPUDifficulty/Values/None.html", [], "ECPUDifficulty");
addToContainers_enumValue("DoesNothing", "CPU player does nothing. Useful for testing. Note that only the CPU player\'s behavior is disabled but each selectable\'s behavior still runs", "Docs/Enums/ECPUDifficulty/Values/DoesNothing.html", ["does", "nothing"], "ECPUDifficulty");
addToContainers_enumValue("Easy", "=========================================", "Docs/Enums/ECPUDifficulty/Values/Easy.html", [], "ECPUDifficulty");
addToContainers_enumValue("Medium", "", "Docs/Enums/ECPUDifficulty/Values/Medium.html", [], "ECPUDifficulty");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ECPUDifficulty/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECPUDifficulty");
addToContainers_enum("ETargetingType", "", "Docs/Enums/ETargetingType/ETargetingType.html", ["targeting", "type"], "");
addToContainers_enumValue("None", "Uninitialized value never to be used", "Docs/Enums/ETargetingType/Values/None.html", [], "ETargetingType");
addToContainers_enumValue("Default", "This value is given to every selectable by default to allow \'everything works as expected\' out of the box. This is given both as their type and the types they can target. Made it hidden assuming the editor values will be reset to this if user sets a custom enum value then later deletes it. If not the case then hidden meta should be removed. You can actually rename this to something else if you like.", "Docs/Enums/ETargetingType/Values/Default.html", [], "ETargetingType");
addToContainers_enumValue("BiologicalInfantry", "=========================================", "Docs/Enums/ETargetingType/Values/BiologicalInfantry.html", ["biological", "infantry"], "ETargetingType");
addToContainers_enumValue("MechanicalInfantry", "", "Docs/Enums/ETargetingType/Values/MechanicalInfantry.html", ["mechanical", "infantry"], "ETargetingType");
addToContainers_enumValue("BiologicalAndMechanicalInfantry", "", "Docs/Enums/ETargetingType/Values/BiologicalAndMechanicalInfantry.html", ["biological", "and", "mechanical", "infantry"], "ETargetingType");
addToContainers_enumValue("Building", "", "Docs/Enums/ETargetingType/Values/Building.html", [], "ETargetingType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ETargetingType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ETargetingType");
addToContainers_enum("EArmourType", "", "Docs/Enums/EArmourType/EArmourType.html", ["armour", "type"], "");
addToContainers_enumValue("None", "Armour type of selectable. Used for calculating damage. Similar to Mechanical, Biological etc in SCII. Currently only one armour type can be assigned to each selectable so if you want a selectable to have multiple types you would need to create entries like TallGreenBiologicalInfatry", "Docs/Enums/EArmourType/Values/None.html", [], "EArmourType");
addToContainers_enumValue("Default", "Default value given to everything that needs an armour value. This can be removed but may have some references to it in code that will need changing (replacing those instances with EArmourType() + 1 could be a possibility as long as user has at least one custom enum value", "Docs/Enums/EArmourType/Values/Default.html", [], "EArmourType");
addToContainers_enumValue("Building", "=========================================", "Docs/Enums/EArmourType/Values/Building.html", [], "EArmourType");
addToContainers_enumValue("SuperweaponBuilding", "", "Docs/Enums/EArmourType/Values/SuperweaponBuilding.html", ["superweapon", "building"], "EArmourType");
addToContainers_enumValue("Infantry", "", "Docs/Enums/EArmourType/Values/Infantry.html", [], "EArmourType");
addToContainers_enumValue("HeavyInfantry", "", "Docs/Enums/EArmourType/Values/HeavyInfantry.html", ["heavy", "infantry"], "EArmourType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EArmourType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EArmourType");
addToContainers_enum("EHUDPersistentTabType", "", "Docs/Enums/EHUDPersistentTabType/EHUDPersistentTabType.html", ["h", "u", "d", "persistent", "tab", "type"], "");
addToContainers_enumValue("None", "Use this if you do not want the button for this to appear on the HUD persistent tab. This is a special case value; if you assign a persistent tab to use this then it will not work correctly", "Docs/Enums/EHUDPersistentTabType/Values/None.html", [], "EHUDPersistentTabType");
addToContainers_enumValue("Buildings", "Tab for buildings", "Docs/Enums/EHUDPersistentTabType/Values/Buildings.html", [], "EHUDPersistentTabType");
addToContainers_enumValue("Units", "Tab for all units", "Docs/Enums/EHUDPersistentTabType/Values/Units.html", [], "EHUDPersistentTabType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EHUDPersistentTabType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EHUDPersistentTabType");
addToContainers_enum("EAnimation", "", "Docs/Enums/EAnimation/EAnimation.html", [], "");
addToContainers_enumValue("None", "Here for removing key clashes when adding entries to TMap", "Docs/Enums/EAnimation/Values/None.html", [], "EAnimation");
addToContainers_enumValue("Idle", "Should be looping", "Docs/Enums/EAnimation/Values/Idle.html", [], "EAnimation");
addToContainers_enumValue("Moving", "Should be looping", "Docs/Enums/EAnimation/Values/Moving.html", [], "EAnimation");
addToContainers_enumValue("Attack", "Should have 2 anim notifies in it: - FireWeapon - OnAttackAnimationFinished. Should also have a looping idle animation at the end of it", "Docs/Enums/EAnimation/Values/Attack.html", [], "EAnimation");
addToContainers_enumValue("Destroyed", "", "Docs/Enums/EAnimation/Values/Destroyed.html", [], "EAnimation");
addToContainers_enumValue("GatheringResources", "Only relevant if unit can gather resources and is optional", "Docs/Enums/EAnimation/Values/GatheringResources.html", ["gathering", "resources"], "EAnimation");
addToContainers_enumValue("ConstructBuilding", "Should be looping", "Docs/Enums/EAnimation/Values/ConstructBuilding.html", ["construct", "building"], "EAnimation");
addToContainers_enumValue("PickingUpInventoryItem", "Picking up an inventory item that\'s in the world", "Docs/Enums/EAnimation/Values/PickingUpInventoryItem.html", ["picking", "up", "inventory", "item"], "EAnimation");
addToContainers_enumValue("MovingWithResources", "Optional for when moving with resources held. Should be looping", "Docs/Enums/EAnimation/Values/MovingWithResources.html", ["moving", "with", "resources"], "EAnimation");
addToContainers_enumValue("DropOffResources", "Optional. The animation to play having returned to a depot with resources.", "Docs/Enums/EAnimation/Values/DropOffResources.html", ["drop", "off", "resources"], "EAnimation");
addToContainers_enumValue("ContextAction_1", "These can be deleted if you like and replaced with whatever you want. You can be as specific as you like e.g. \"CastFireball\", \"CallArtilleryStrike\"", "Docs/Enums/EAnimation/Values/ContextAction_1.html", ["context", "action_1"], "EAnimation");
addToContainers_enumValue("ContextAction_2", "", "Docs/Enums/EAnimation/Values/ContextAction_2.html", ["context", "action_2"], "EAnimation");
addToContainers_enumValue("ContextAction_3", "", "Docs/Enums/EAnimation/Values/ContextAction_3.html", ["context", "action_3"], "EAnimation");
addToContainers_enumValue("Throw", "", "Docs/Enums/EAnimation/Values/Throw.html", [], "EAnimation");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EAnimation/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EAnimation");
addToContainers_enum("EBuildingAnimation", "", "Docs/Enums/EBuildingAnimation/EBuildingAnimation.html", ["building", "animation"], "");
addToContainers_enumValue("None", "Animations for buildings", "Docs/Enums/EBuildingAnimation/Values/None.html", [], "EBuildingAnimation");
addToContainers_enumValue("Construction", "The animation to play when being constructed", "Docs/Enums/EBuildingAnimation/Values/Construction.html", [], "EBuildingAnimation");
addToContainers_enumValue("Idle", "When nothing is happening. Should be looping", "Docs/Enums/EBuildingAnimation/Values/Idle.html", [], "EBuildingAnimation");
addToContainers_enumValue("OpenDoor", "Right before a unit is built from it", "Docs/Enums/EBuildingAnimation/Values/OpenDoor.html", ["open", "door"], "EBuildingAnimation");
addToContainers_enumValue("Destroyed", "This will need the anim notify OnZeroHealthAnimationFinished on it", "Docs/Enums/EBuildingAnimation/Values/Destroyed.html", [], "EBuildingAnimation");
addToContainers_enumValue("OpenMissleSiloDoor", "Open the door for the missle silo in preparation for launching a nuke.", "Docs/Enums/EBuildingAnimation/Values/OpenMissleSiloDoor.html", ["open", "missle", "silo", "door"], "EBuildingAnimation");
addToContainers_enumValue("CloseMissleSiloDoor", "Close the missle silo door after the nuke has been launched. Probably want idle looping at the end of this anim", "Docs/Enums/EBuildingAnimation/Values/CloseMissleSiloDoor.html", ["close", "missle", "silo", "door"], "EBuildingAnimation");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "=========================================", "Docs/Enums/EBuildingAnimation/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuildingAnimation");
addToContainers_enumValue("SinkIntoGround", "This is not an animation, but is used by the server to signal that the building should sink into the ground", "Docs/Enums/EBuildingAnimation/Values/SinkIntoGround.html", ["sink", "into", "ground"], "EBuildingAnimation");
addToContainers_enum("EContextButton", "", "Docs/Enums/EContextButton/EContextButton.html", ["context", "button"], "");
addToContainers_enumValue("None", "Not a value that should be used", "Docs/Enums/EContextButton/Values/None.html", [], "EContextButton");
addToContainers_enumValue("Heal", "From range heal a single target", "Docs/Enums/EContextButton/Values/Heal.html", [], "EContextButton");
addToContainers_enumValue("ArtilleryStrike", "", "Docs/Enums/EContextButton/Values/ArtilleryStrike.html", ["artillery", "strike"], "EContextButton");
addToContainers_enumValue("Dash", "Increase own move speed by 50% for 10 secs", "Docs/Enums/EContextButton/Values/Dash.html", [], "EContextButton");
addToContainers_enumValue("Haste", "Increase own move speed by 30% for some amount of time", "Docs/Enums/EContextButton/Values/Haste.html", [], "EContextButton");
addToContainers_enumValue("Corruption", "", "Docs/Enums/EContextButton/Values/Corruption.html", [], "EContextButton");
addToContainers_enumValue("StealthSelf", "", "Docs/Enums/EContextButton/Values/StealthSelf.html", ["stealth", "self"], "EContextButton");
addToContainers_enumValue("Cleanse", "Removes \'The plague\' debuff from a friendly target", "Docs/Enums/EContextButton/Values/Cleanse.html", [], "EContextButton");
addToContainers_enumValue("IceBarrier", "Create a ice type barrier around the user that damages enemies while they stand in it", "Docs/Enums/EContextButton/Values/IceBarrier.html", ["ice", "barrier"], "EContextButton");
addToContainers_enumValue("DeathAura", "", "Docs/Enums/EContextButton/Values/DeathAura.html", ["death", "aura"], "EContextButton");
addToContainers_enumValue("Death", "", "Docs/Enums/EContextButton/Values/Death.html", [], "EContextButton");
addToContainers_enumValue("Blizzard", "Call down a storm of ice shards", "Docs/Enums/EContextButton/Values/Blizzard.html", [], "EContextButton");
addToContainers_enumValue("ManaBurn", "Burn mana from a single target", "Docs/Enums/EContextButton/Values/ManaBurn.html", ["mana", "burn"], "EContextButton");
addToContainers_enumValue("EatRottenPumpkin", "", "Docs/Enums/EContextButton/Values/EatRottenPumpkin.html", ["eat", "rotten", "pumpkin"], "EContextButton");
addToContainers_enumValue("EatApple", "", "Docs/Enums/EContextButton/Values/EatApple.html", ["eat", "apple"], "EContextButton");
addToContainers_enumValue("LightningStrike", "", "Docs/Enums/EContextButton/Values/LightningStrike.html", ["lightning", "strike"], "EContextButton");
addToContainers_enumValue("FinishingBlow", "Only usable on targets below 50% health. Kills them", "Docs/Enums/EContextButton/Values/FinishingBlow.html", ["finishing", "blow"], "EContextButton");
addToContainers_enumValue("CullingBlade", "Similar to axe\'s culling blade", "Docs/Enums/EContextButton/Values/CullingBlade.html", ["culling", "blade"], "EContextButton");
addToContainers_enumValue("RadarScan", "Reveal some part of the map for some amount of time", "Docs/Enums/EContextButton/Values/RadarScan.html", ["radar", "scan"], "EContextButton");
addToContainers_enumValue("Nuke", "Launch a nuke. Instigated by a building", "Docs/Enums/EContextButton/Values/Nuke.html", [], "EContextButton");
addToContainers_enumValue("HealOverTime", "", "Docs/Enums/EContextButton/Values/HealOverTime.html", ["heal", "over", "time"], "EContextButton");
addToContainers_enumValue("IncreasingHealOverTime", "", "Docs/Enums/EContextButton/Values/IncreasingHealOverTime.html", ["increasing", "heal", "over", "time"], "EContextButton");
addToContainers_enumValue("Beserk", "", "Docs/Enums/EContextButton/Values/Beserk.html", [], "EContextButton");
addToContainers_enumValue("Sacrifice", "Destroy self and deal massive damage to those around you", "Docs/Enums/EContextButton/Values/Sacrifice.html", [], "EContextButton");
addToContainers_enumValue("Tribute", "Target a friendly unit and deal damage to them. If they die the ability instigator gains mana", "Docs/Enums/EContextButton/Values/Tribute.html", [], "EContextButton");
addToContainers_enumValue("BeaconArtilleryStrike", "Artillery strike that comes from the artillery beacon item", "Docs/Enums/EContextButton/Values/BeaconArtilleryStrike.html", ["beacon", "artillery", "strike"], "EContextButton");
addToContainers_enumValue("AttackMove", "~ Currently using AttackMove in UStatics to define NUM_CUSTOM_CONTEXT_ACTIONS", "Docs/Enums/EContextButton/Values/AttackMove.html", ["attack", "move"], "EContextButton");
addToContainers_enumValue("HoldPosition", "", "Docs/Enums/EContextButton/Values/HoldPosition.html", ["hold", "position"], "EContextButton");
addToContainers_enumValue("BuildBuilding", "~ This should always be 6th last in enum ", "Docs/Enums/EContextButton/Values/BuildBuilding.html", ["build", "building"], "EContextButton");
addToContainers_enumValue("Train", "~ This should always be 5th to last in enum", "Docs/Enums/EContextButton/Values/Train.html", [], "EContextButton");
addToContainers_enumValue("Upgrade", "~ This should always be 4th last in enum", "Docs/Enums/EContextButton/Values/Upgrade.html", [], "EContextButton");
addToContainers_enumValue("z_ALWAYS_3RD_LAST_IN_ENUM", "This should always be 3rd last in the enum", "Docs/Enums/EContextButton/Values/z_ALWAYS_3RD_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_3", "r", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EContextButton");
addToContainers_enumValue("PlacingGhost", "", "Docs/Enums/EContextButton/Values/PlacingGhost.html", ["placing", "ghost"], "EContextButton");
addToContainers_enumValue("RecentlyExecuted", "Set in LMB press and changed on LMB release", "Docs/Enums/EContextButton/Values/RecentlyExecuted.html", ["recently", "executed"], "EContextButton");
addToContainers_enumValue("RecentlyExecuted", "Set in LMB press and changed on LMB release", "Docs/Enums/EContextButton/Values/RecentlyExecuted.html", ["recently", "executed"], "EContextButton");
addToContainers_enum("ECommanderAbility", "", "Docs/Enums/ECommanderAbility/ECommanderAbility.html", ["commander", "ability"], "");
addToContainers_enumValue("None", "Abilities that are instigated by the player as opposed to a selectable e.g. in C&C Generals: fuel air bomb, artillery strike, etc", "Docs/Enums/ECommanderAbility/Values/None.html", [], "ECommanderAbility");
addToContainers_enumValue("Human_ArtilleryStrike_Rank1", "=========================================", "Docs/Enums/ECommanderAbility/Values/Human_ArtilleryStrike_Rank1.html", ["human_", "artillery", "strike_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Human_ArtilleryStrike_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Human_ArtilleryStrike_Rank2.html", ["human_", "artillery", "strike_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Human_ResourceSteal", "Steals some resources from a hostile player", "Docs/Enums/ECommanderAbility/Values/Human_ResourceSteal.html", ["human_", "resource", "steal"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Explosion_Rank1", "Causes an explosion to happen somewhere", "Docs/Enums/ECommanderAbility/Values/Monsters_Explosion_Rank1.html", ["monsters_", "explosion_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Explosion_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Monsters_Explosion_Rank2.html", ["monsters_", "explosion_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Frenzy_Rank1", "Buffs all units in an AoE with something", "Docs/Enums/ECommanderAbility/Values/Monsters_Frenzy_Rank1.html", ["monsters_", "frenzy_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Frenzy_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Monsters_Frenzy_Rank2.html", ["monsters_", "frenzy_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Monsters_Frenzy_Rank3", "", "Docs/Enums/ECommanderAbility/Values/Monsters_Frenzy_Rank3.html", ["monsters_", "frenzy_", "rank3"], "ECommanderAbility");
addToContainers_enumValue("Monsters_GlobalFrenzy", "", "Docs/Enums/ECommanderAbility/Values/Monsters_GlobalFrenzy.html", ["monsters_", "global", "frenzy"], "ECommanderAbility");
addToContainers_enumValue("Monsters_DestroyAllPlayersCollectors", "Destroy all the collectors for a player", "Docs/Enums/ECommanderAbility/Values/Monsters_DestroyAllPlayersCollect.html", ["monsters_", "destroy", "all", "players", "collectors"], "ECommanderAbility");
addToContainers_enumValue("Monsters_MakeUnitInvulnerable", "", "Docs/Enums/ECommanderAbility/Values/Monsters_MakeUnitInvulnerable.html", ["monsters_", "make", "unit", "invulnerable"], "ECommanderAbility");
addToContainers_enumValue("Monsters_KillUnit", "", "Docs/Enums/ECommanderAbility/Values/Monsters_KillUnit.html", ["monsters_", "kill", "unit"], "ECommanderAbility");
addToContainers_enumValue("Human_AirshipBarrage", "", "Docs/Enums/ECommanderAbility/Values/Human_AirshipBarrage.html", ["human_", "airship", "barrage"], "ECommanderAbility");
addToContainers_enumValue("Monsters_UnlockTrainMelee", "", "Docs/Enums/ECommanderAbility/Values/Monsters_UnlockTrainMelee.html", ["monsters_", "unlock", "train", "melee"], "ECommanderAbility");
addToContainers_enumValue("Humans_Snipers_Rank1", "", "Docs/Enums/ECommanderAbility/Values/Humans_Snipers_Rank1.html", ["humans_", "snipers_", "rank1"], "ECommanderAbility");
addToContainers_enumValue("Humans_Snipers_Rank2", "", "Docs/Enums/ECommanderAbility/Values/Humans_Snipers_Rank2.html", ["humans_", "snipers_", "rank2"], "ECommanderAbility");
addToContainers_enumValue("Human_Warthog", "", "Docs/Enums/ECommanderAbility/Values/Human_Warthog.html", ["human_", "warthog"], "ECommanderAbility");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ECommanderAbility/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECommanderAbility");
addToContainers_enum("ECommanderSkillTreeNodeType", "", "Docs/Enums/ECommanderSkillTreeNodeType/ECommanderSkillTreeNodeType.html", ["commander", "skill", "tree", "node", "type"], "");
addToContainers_enumValue("None", "Different types of nodes that appear on a commander\'s skill tree", "Docs/Enums/ECommanderSkillTreeNodeType/Values/None.html", [], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_ArtilleryStrike", "=========================================", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_ArtilleryStrike.html", ["human_", "artillery", "strike"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_ResourceSteal", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_ResourceSteal.html", ["human_", "resource", "steal"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_Explosion", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_Explosion.html", ["monsters_", "explosion"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_Frenzy", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_Frenzy.html", ["monsters_", "frenzy"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_GlobalFrenzy", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_GlobalFrenzy.html", ["monsters_", "global", "frenzy"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_DestroyAllPlayersCollectors", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_DestroyAllPlayersCollect.html", ["monsters_", "destroy", "all", "players", "collectors"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_MakeUnitInvulnerable", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_MakeUnitInvulnerable.html", ["monsters_", "make", "unit", "invulnerable"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_KillUnit", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_KillUnit.html", ["monsters_", "kill", "unit"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_AirshipBarrage", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_AirshipBarrage.html", ["human_", "airship", "barrage"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Monsters_UnlockTrainMelee", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Monsters_UnlockTrainMelee.html", ["monsters_", "unlock", "train", "melee"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Humans_UnlockTrainSnipers", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Humans_UnlockTrainSnipers.html", ["humans_", "unlock", "train", "snipers"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("Human_Warthog", "", "Docs/Enums/ECommanderSkillTreeNodeType/Values/Human_Warthog.html", ["human_", "warthog"], "ECommanderSkillTreeNodeType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ECommanderSkillTreeNodeType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECommanderSkillTreeNodeType");
addToContainers_enum("EBuildingTargetingAbility", "", "Docs/Enums/EBuildingTargetingAbility/EBuildingTargetingAbility.html", ["building", "targeting", "ability"], "");
addToContainers_enumValue("None", "Building targeting abilities are abilities that can only target buildings. This enum was added to do custom behavior when right-clicking on buildings e.g. in C&C engineers will capture the building, spies will show you what is being produced, etc", "Docs/Enums/EBuildingTargetingAbility/Values/None.html", [], "EBuildingTargetingAbility");
addToContainers_enumValue("StealResources", "=========================================", "Docs/Enums/EBuildingTargetingAbility/Values/StealResources.html", ["steal", "resources"], "EBuildingTargetingAbility");
addToContainers_enumValue("DealDamage", "", "Docs/Enums/EBuildingTargetingAbility/Values/DealDamage.html", ["deal", "damage"], "EBuildingTargetingAbility");
addToContainers_enumValue("DealDamage", "", "Docs/Enums/EBuildingTargetingAbility/Values/DealDamage.html", ["deal", "damage"], "EBuildingTargetingAbility");
addToContainers_enum("EAbilityRequirement", "", "Docs/Enums/EAbilityRequirement/EAbilityRequirement.html", ["ability", "requirement"], "");
addToContainers_enumValue("Uninitialized", "Default value, never to be used", "Docs/Enums/EAbilityRequirement/Values/Uninitialized.html", [], "EAbilityRequirement");
addToContainers_enumValue("NoMissingRequirement", "This is used as a return value for the requirements checking function and signals that all requirements were met", "Docs/Enums/EAbilityRequirement/Values/NoMissingRequirement.html", ["no", "missing", "requirement"], "EAbilityRequirement");
addToContainers_enumValue("BuffOrDebuffNotPresent", "=========================================", "Docs/Enums/EAbilityRequirement/Values/BuffOrDebuffNotPresent.html", ["buff", "or", "debuff", "not", "present"], "EAbilityRequirement");
addToContainers_enumValue("TargetMustUseMana", "Ability must be used on a mana using target", "Docs/Enums/EAbilityRequirement/Values/TargetMustUseMana.html", ["target", "must", "use", "mana"], "EAbilityRequirement");
addToContainers_enumValue("RequiresTargetWithHealth", "", "Docs/Enums/EAbilityRequirement/Values/RequiresTargetWithHealth.html", ["requires", "target", "with", "health"], "EAbilityRequirement");
addToContainers_enumValue("TargetsHealthNotLowEnough", "", "Docs/Enums/EAbilityRequirement/Values/TargetsHealthNotLowEnough.html", ["targets", "health", "not", "low", "enough"], "EAbilityRequirement");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EAbilityRequirement/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EAbilityRequirement");
addToContainers_enum("EStaticBuffAndDebuffType", "", "Docs/Enums/EStaticBuffAndDebuffType/EStaticBuffAndDebuffType.html", ["static", "buff", "and", "debuff", "type"], "");
addToContainers_enumValue("None", "Default value, never to be used", "Docs/Enums/EStaticBuffAndDebuffType/Values/None.html", [], "EStaticBuffAndDebuffType");
addToContainers_enumValue("HoldingResources", "Unit is holding resources", "Docs/Enums/EStaticBuffAndDebuffType/Values/HoldingResources.html", ["holding", "resources"], "EStaticBuffAndDebuffType");
addToContainers_enumValue("ThePlague", "=========================================", "Docs/Enums/EStaticBuffAndDebuffType/Values/ThePlague.html", ["the", "plague"], "EStaticBuffAndDebuffType");
addToContainers_enumValue("Disease", "", "Docs/Enums/EStaticBuffAndDebuffType/Values/Disease.html", [], "EStaticBuffAndDebuffType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EStaticBuffAndDebuffType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EStaticBuffAndDebuffType");
addToContainers_enum("ETickableBuffAndDebuffType", "", "Docs/Enums/ETickableBuffAndDebuffType/ETickableBuffAndDebuffType.html", ["tickable", "buff", "and", "debuff", "type"], "");
addToContainers_enumValue("None", "Default value, never to be used", "Docs/Enums/ETickableBuffAndDebuffType/Values/None.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Dash", "=========================================", "Docs/Enums/ETickableBuffAndDebuffType/Values/Dash.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Haste", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/Haste.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("BasicHealOverTime", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/BasicHealOverTime.html", ["basic", "heal", "over", "time"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("IncreasingHealOverTime", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/IncreasingHealOverTime.html", ["increasing", "heal", "over", "time"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("CleansersMight", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/CleansersMight.html", ["cleansers", "might"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("PainOverTime", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/PainOverTime.html", ["pain", "over", "time"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Corruption", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/Corruption.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("NearInvulnerability", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/NearInvulnerability.html", ["near", "invulnerability"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("RottenPumpkinEatEffect", "", "Docs/Enums/ETickableBuffAndDebuffType/Values/RottenPumpkinEatEffect.html", ["rotten", "pumpkin", "eat", "effect"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("TempStealth", "Enter stealth mode for 10 seconds", "Docs/Enums/ETickableBuffAndDebuffType/Values/TempStealth.html", ["temp", "stealth"], "ETickableBuffAndDebuffType");
addToContainers_enumValue("Beserk", "Increase damage done by 50%. Increases move speed by 30%. Increases attack speed by 50%", "Docs/Enums/ETickableBuffAndDebuffType/Values/Beserk.html", [], "ETickableBuffAndDebuffType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/ETickableBuffAndDebuffType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ETickableBuffAndDebuffType");
addToContainers_enum("EBuffAndDebuffSubType", "", "Docs/Enums/EBuffAndDebuffSubType/EBuffAndDebuffSubType.html", ["buff", "and", "debuff", "sub", "type"], "");
addToContainers_enumValue("Default", "This should not be referenced anywhere in code. It is only here so the editor default value looks prettier than z_ALWAYS_LAST_IN_ENUM (which I cannot get to change with the DisplayName and ScriptName specifiers in the UMETA macro)", "Docs/Enums/EBuffAndDebuffSubType/Values/Default.html", [], "EBuffAndDebuffSubType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EBuffAndDebuffSubType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuffAndDebuffSubType");
addToContainers_enum("EAbilityOutcome", "", "Docs/Enums/EAbilityOutcome/EAbilityOutcome.html", ["ability", "outcome"], "");
addToContainers_enumValue("Default", "The outcome of an ability. Can add more values if needed", "Docs/Enums/EAbilityOutcome/Values/Default.html", [], "EAbilityOutcome");
addToContainers_enumValue("CullingBlade_BelowThreshold", "=========================================", "Docs/Enums/EAbilityOutcome/Values/CullingBlade_BelowThreshold.html", ["culling", "blade_", "below", "threshold"], "EAbilityOutcome");
addToContainers_enumValue("CullingBlade_AboveThreshold", "", "Docs/Enums/EAbilityOutcome/Values/CullingBlade_AboveThreshold.html", ["culling", "blade_", "above", "threshold"], "EAbilityOutcome");
addToContainers_enumValue("DidNotKill", "", "Docs/Enums/EAbilityOutcome/Values/DidNotKill.html", ["did", "not", "kill"], "EAbilityOutcome");
addToContainers_enumValue("DidKill", "", "Docs/Enums/EAbilityOutcome/Values/DidKill.html", ["did", "kill"], "EAbilityOutcome");
addToContainers_enumValue("DidKill", "", "Docs/Enums/EAbilityOutcome/Values/DidKill.html", ["did", "kill"], "EAbilityOutcome");
addToContainers_enum("EBuffOrDebuffApplicationOutcome", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/EBuffOrDebuffApplicationOutcome.html", ["buff", "or", "debuff", "application", "outcome"], "");
addToContainers_enumValue("Failure", "The result of trying to apply a buff/debuff. Can add more values if needed", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/Failure.html", [], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("ResetDuration", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/ResetDuration.html", ["reset", "duration"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("Success", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/Success.html", [], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("AlreadyHasIt", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/AlreadyHasIt.html", ["already", "has", "it"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("CullingBlade_Kill", "An example of a couple of values that could be added for axe\'s culling blade if it were to ever be implemented", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/CullingBlade_Kill.html", ["culling", "blade_", "kill"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("CullingBlade_DealDamage", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/CullingBlade_DealDamage.html", ["culling", "blade_", "deal", "damage"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enumValue("CullingBlade_DealDamage", "", "Docs/Enums/EBuffOrDebuffApplicationOutcome/Values/CullingBlade_DealDamage.html", ["culling", "blade_", "deal", "damage"], "EBuffOrDebuffApplicationOutcome");
addToContainers_enum("EBuffOrDebuffTickOutcome", "", "Docs/Enums/EBuffOrDebuffTickOutcome/EBuffOrDebuffTickOutcome.html", ["buff", "or", "debuff", "tick", "outcome"], "");
addToContainers_enumValue("StandardOutcome", "The result of tick logic of a buff/debuff. Add more values if needed", "Docs/Enums/EBuffOrDebuffTickOutcome/Values/StandardOutcome.html", ["standard", "outcome"], "EBuffOrDebuffTickOutcome");
addToContainers_enumValue("PainOverTime_KilledTargetAndGotHeal", "", "Docs/Enums/EBuffOrDebuffTickOutcome/Values/PainOverTime_KilledTargetAndGotHe.html", ["pain", "over", "time_", "killed", "target", "and", "got", "heal"], "EBuffOrDebuffTickOutcome");
addToContainers_enumValue("PainOverTime_KilledTargetButNoHeal", "", "Docs/Enums/EBuffOrDebuffTickOutcome/Values/PainOverTime_KilledTargetButNoHea.html", ["pain", "over", "time_", "killed", "target", "but", "no", "heal"], "EBuffOrDebuffTickOutcome");
addToContainers_enum("EBuffOrDebuffRemovalOutcome", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/EBuffOrDebuffRemovalOutcome.html", ["buff", "or", "debuff", "removal", "outcome"], "");
addToContainers_enumValue("NotPresent", "The result of trying to remove buff/debuff from a selectable. Add more values if needed", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/NotPresent.html", ["not", "present"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Failure", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Failure.html", [], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Success", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Success.html", [], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Cleanse_ResetDurationOfCleansersMight", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Cleanse_ResetDurationOfCleansersM.html", ["cleanse_", "reset", "duration", "of", "cleansers", "might"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Cleanse_FreshApplicationOfCleansersMight", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Cleanse_FreshApplicationOfCleanse.html", ["cleanse_", "fresh", "application", "of", "cleansers", "might"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enumValue("Cleanse_FreshApplicationOfCleansersMight", "", "Docs/Enums/EBuffOrDebuffRemovalOutcome/Values/Cleanse_FreshApplicationOfCleanse.html", ["cleanse_", "fresh", "application", "of", "cleansers", "might"], "EBuffOrDebuffRemovalOutcome");
addToContainers_enum("EBuffAndDebuffRemovalReason", "", "Docs/Enums/EBuffAndDebuffRemovalReason/EBuffAndDebuffRemovalReason.html", ["buff", "and", "debuff", "removal", "reason"], "");
addToContainers_enumValue("Expired", "All ticks have happened", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/Expired.html", [], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("TargetDied", "Target reached zero health most likely not because of this buff/debuff but because of some other reason", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/TargetDied.html", ["target", "died"], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("CleanseSpell", "=========================================", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/CleanseSpell.html", ["cleanse", "spell"], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("Test", "", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/Test.html", [], "EBuffAndDebuffRemovalReason");
addToContainers_enumValue("Test", "", "Docs/Enums/EBuffAndDebuffRemovalReason/Values/Test.html", [], "EBuffAndDebuffRemovalReason");
addToContainers_enum("ESelectableBodySocket", "", "Docs/Enums/ESelectableBodySocket/ESelectableBodySocket.html", ["selectable", "body", "socket"], "");
addToContainers_enumValue("None", "A point on an actor to know where to attach/spawn things relative to it", "Docs/Enums/ESelectableBodySocket/Values/None.html", [], "ESelectableBodySocket");
addToContainers_enumValue("Floor", "The part of the selectable that makes contact with the ground.", "Docs/Enums/ESelectableBodySocket/Values/Floor.html", [], "ESelectableBodySocket");
addToContainers_enumValue("Middle", "The part of the body you consider the middle", "Docs/Enums/ESelectableBodySocket/Values/Middle.html", [], "ESelectableBodySocket");
addToContainers_enumValue("Head", "", "Docs/Enums/ESelectableBodySocket/Values/Head.html", [], "ESelectableBodySocket");
addToContainers_enumValue("AboveHead_DoesNotRotate", "", "Docs/Enums/ESelectableBodySocket/Values/AboveHead_DoesNotRotate.html", ["above", "head_", "does", "not", "rotate"], "ESelectableBodySocket");
addToContainers_enumValue("Floor_DoesNotRotate", "", "Docs/Enums/ESelectableBodySocket/Values/Floor_DoesNotRotate.html", ["floor_", "does", "not", "rotate"], "ESelectableBodySocket");
addToContainers_enumValue("NukeLaunchSite", "Where to launch nuke from", "Docs/Enums/ESelectableBodySocket/Values/NukeLaunchSite.html", ["nuke", "launch", "site"], "ESelectableBodySocket");
addToContainers_enumValue("NukeLaunchSite", "Where to launch nuke from", "Docs/Enums/ESelectableBodySocket/Values/NukeLaunchSite.html", ["nuke", "launch", "site"], "ESelectableBodySocket");
addToContainers_enum("EStartingResourceAmount", "", "Docs/Enums/EStartingResourceAmount/EStartingResourceAmount.html", ["starting", "resource", "amount"], "");
addToContainers_enumValue("Default", "Default value used if no value specified by user", "Docs/Enums/EStartingResourceAmount/Values/Default.html", [], "EStartingResourceAmount");
addToContainers_enumValue("Low", "=========================================", "Docs/Enums/EStartingResourceAmount/Values/Low.html", [], "EStartingResourceAmount");
addToContainers_enumValue("Medium", "", "Docs/Enums/EStartingResourceAmount/Values/Medium.html", [], "EStartingResourceAmount");
addToContainers_enumValue("High", "", "Docs/Enums/EStartingResourceAmount/Values/High.html", [], "EStartingResourceAmount");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "=========================================", "Docs/Enums/EStartingResourceAmount/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EStartingResourceAmount");
addToContainers_enumValue("DevelopmentSettings", "Use whatever is defined in development settings", "Docs/Enums/EStartingResourceAmount/Values/DevelopmentSettings.html", ["development", "settings"], "EStartingResourceAmount");
addToContainers_enum("EDefeatCondition", "", "Docs/Enums/EDefeatCondition/EDefeatCondition.html", ["defeat", "condition"], "");
addToContainers_enumValue("None", "Here to pickup uninitialized values - should never be used", "Docs/Enums/EDefeatCondition/Values/None.html", [], "EDefeatCondition");
addToContainers_enumValue("NoCondition", "Cannot be defeated. Match will never end. Great for testing with editor. Probably safe to delete this but need to change the references to it in code to something", "Docs/Enums/EDefeatCondition/Values/NoCondition.html", ["no", "condition"], "EDefeatCondition");
addToContainers_enumValue("AllBuildingsDestroyed", "You are defeated when you have no buildings left. Having building foundations placed will count as a building", "Docs/Enums/EDefeatCondition/Values/AllBuildingsDestroyed.html", ["all", "buildings", "destroyed"], "EDefeatCondition");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EDefeatCondition/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EDefeatCondition");
addToContainers_enum("ESelectableResourceType", "", "Docs/Enums/ESelectableResourceType/ESelectableResourceType.html", ["selectable", "resource", "type"], "");
addToContainers_enumValue("Mana", "=========================================", "Docs/Enums/ESelectableResourceType/Values/Mana.html", [], "ESelectableResourceType");
addToContainers_enumValue("None", "=========================================", "Docs/Enums/ESelectableResourceType/Values/None.html", [], "ESelectableResourceType");
addToContainers_enumValue("None", "=========================================", "Docs/Enums/ESelectableResourceType/Values/None.html", [], "ESelectableResourceType");
addToContainers_enum("EBuildingNetworkType", "", "Docs/Enums/EBuildingNetworkType/EBuildingNetworkType.html", ["building", "network", "type"], "");
addToContainers_enumValue("None", "This values means \'not part of any network\' e.g. terran bunkers, C&C generals china bunkers", "Docs/Enums/EBuildingNetworkType/Values/None.html", [], "EBuildingNetworkType");
addToContainers_enumValue("HumanBarracks", "=========================================", "Docs/Enums/EBuildingNetworkType/Values/HumanBarracks.html", ["human", "barracks"], "EBuildingNetworkType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EBuildingNetworkType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EBuildingNetworkType");
addToContainers_enum("EMouseCursorType", "", "Docs/Enums/EMouseCursorType/EMouseCursorType.html", ["mouse", "cursor", "type"], "");
addToContainers_enumValue("None", "Default value to make it easier to add entries to TMaps in editor", "Docs/Enums/EMouseCursorType/Values/None.html", [], "EMouseCursorType");
addToContainers_enumValue("SciFi_Default", "=========================================", "Docs/Enums/EMouseCursorType/Values/SciFi_Default.html", ["sci", "fi_", "default"], "EMouseCursorType");
addToContainers_enumValue("SciFi_BlueOutline", "", "Docs/Enums/EMouseCursorType/Values/SciFi_BlueOutline.html", ["sci", "fi_", "blue", "outline"], "EMouseCursorType");
addToContainers_enumValue("SciFi_RedCross", "", "Docs/Enums/EMouseCursorType/Values/SciFi_RedCross.html", ["sci", "fi_", "red", "cross"], "EMouseCursorType");
addToContainers_enumValue("SciFi_QuestionMark", "", "Docs/Enums/EMouseCursorType/Values/SciFi_QuestionMark.html", ["sci", "fi_", "question", "mark"], "EMouseCursorType");
addToContainers_enumValue("SciFi_BlueCrosshair", "", "Docs/Enums/EMouseCursorType/Values/SciFi_BlueCrosshair.html", ["sci", "fi_", "blue", "crosshair"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollUp", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollUp.html", ["sci", "fi_", "edge", "scroll", "up"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollUpRight", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollUpRight.html", ["sci", "fi_", "edge", "scroll", "up", "right"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollRight", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollRight.html", ["sci", "fi_", "edge", "scroll", "right"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollDownRight", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollDownRight.html", ["sci", "fi_", "edge", "scroll", "down", "right"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollDown", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollDown.html", ["sci", "fi_", "edge", "scroll", "down"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollDownLeft", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollDownLeft.html", ["sci", "fi_", "edge", "scroll", "down", "left"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollLeft", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollLeft.html", ["sci", "fi_", "edge", "scroll", "left"], "EMouseCursorType");
addToContainers_enumValue("SciFi_EdgeScrollUpLeft", "", "Docs/Enums/EMouseCursorType/Values/SciFi_EdgeScrollUpLeft.html", ["sci", "fi_", "edge", "scroll", "up", "left"], "EMouseCursorType");
addToContainers_enumValue("EnterGarrison", "", "Docs/Enums/EMouseCursorType/Values/EnterGarrison.html", ["enter", "garrison"], "EMouseCursorType");
addToContainers_enumValue("CashHack", "", "Docs/Enums/EMouseCursorType/Values/CashHack.html", ["cash", "hack"], "EMouseCursorType");
addToContainers_enumValue("CommandoBomb", "", "Docs/Enums/EMouseCursorType/Values/CommandoBomb.html", ["commando", "bomb"], "EMouseCursorType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EMouseCursorType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMouseCursorType");
addToContainers_enum("EControlSettingType", "", "Docs/Enums/EControlSettingType/EControlSettingType.html", ["control", "setting", "type"], "");
addToContainers_enumValue("None", "Different settings for controls", "Docs/Enums/EControlSettingType/Values/None.html", [], "EControlSettingType");
addToContainers_enumValue("CameraPanSpeed_Keyboard", "Speed camera moves when using keyboard to move it", "Docs/Enums/EControlSettingType/Values/CameraPanSpeed_Keyboard.html", ["camera", "pan", "speed_", "keyboard"], "EControlSettingType");
addToContainers_enumValue("CameraPanSpeed_Mouse", "Speed camera moves when moving mouse to edge of screen", "Docs/Enums/EControlSettingType/Values/CameraPanSpeed_Mouse.html", ["camera", "pan", "speed_", "mouse"], "EControlSettingType");
addToContainers_enumValue("CameraMaxSpeed", "Max speed of camera", "Docs/Enums/EControlSettingType/Values/CameraMaxSpeed.html", ["camera", "max", "speed"], "EControlSettingType");
addToContainers_enumValue("bEnableCameraMovementLag", "", "Docs/Enums/EControlSettingType/Values/bEnableCameraMovementLag.html", ["enable", "camera", "movement", "lag"], "EControlSettingType");
addToContainers_enumValue("CameraMovementLagSpeed", "", "Docs/Enums/EControlSettingType/Values/CameraMovementLagSpeed.html", ["camera", "movement", "lag", "speed"], "EControlSettingType");
addToContainers_enumValue("CameraTurningBoost", "How fast changes in camera move direction should happen with regards to WASD and mouse edge movement", "Docs/Enums/EControlSettingType/Values/CameraTurningBoost.html", ["camera", "turning", "boost"], "EControlSettingType");
addToContainers_enumValue("CameraZoomIncrementalAmount", "Amount a single mouse wheel scroll will change zoom", "Docs/Enums/EControlSettingType/Values/CameraZoomIncrementalAmount.html", ["camera", "zoom", "incremental", "amount"], "EControlSettingType");
addToContainers_enumValue("CameraZoomSpeed", "Speed camera zooms in/out", "Docs/Enums/EControlSettingType/Values/CameraZoomSpeed.html", ["camera", "zoom", "speed"], "EControlSettingType");
addToContainers_enumValue("MMBLookYawSensitivity", "Speed the X axis changes when the middle mouse button is held down and looking around", "Docs/Enums/EControlSettingType/Values/MMBLookYawSensitivity.html", ["m", "b", "look", "yaw", "sensitivity"], "EControlSettingType");
addToContainers_enumValue("MMBLookPitchSensitivity", "Speed the Y axis changes when the middle mouse button is held down and looking around", "Docs/Enums/EControlSettingType/Values/MMBLookPitchSensitivity.html", ["m", "b", "look", "pitch", "sensitivity"], "EControlSettingType");
addToContainers_enumValue("bInvertMMBLookYaw", "Whether to invert the X axis middle mouse button free look", "Docs/Enums/EControlSettingType/Values/bInvertMMBLookYaw.html", ["invert", "m", "m", "b", "look", "yaw"], "EControlSettingType");
addToContainers_enumValue("bInvertMMBLookPitch", "Whether to invert the Y axis middle mouse button free look", "Docs/Enums/EControlSettingType/Values/bInvertMMBLookPitch.html", ["invert", "m", "m", "b", "look", "pitch"], "EControlSettingType");
addToContainers_enumValue("bEnableMMBLookLag", "If true, when MMB is pressed view will update gradually. Makes looking around with MMB pressed less repsonsive. False = view updates instantly", "Docs/Enums/EControlSettingType/Values/bEnableMMBLookLag.html", ["enable", "m", "m", "b", "look", "lag"], "EControlSettingType");
addToContainers_enumValue("MMBLookLagAmount", "Only relevant if bEnableMMBLookLag is true. The amount of lagginess. Lower = more laggy", "Docs/Enums/EControlSettingType/Values/MMBLookLagAmount.html", ["m", "b", "look", "lag", "amount"], "EControlSettingType");
addToContainers_enumValue("DefaultCameraPitch", "The camera pitch to start a match with and to return to when using the \'return to default rotation\' button", "Docs/Enums/EControlSettingType/Values/DefaultCameraPitch.html", ["default", "camera", "pitch"], "EControlSettingType");
addToContainers_enumValue("DefaultCameraZoomAmount", "Amount of camera zoom to start match with", "Docs/Enums/EControlSettingType/Values/DefaultCameraZoomAmount.html", ["default", "camera", "zoom", "amount"], "EControlSettingType");
addToContainers_enumValue("ResetCameraToDefaultSpeed", "Spee camera resets to default rotation/zoom", "Docs/Enums/EControlSettingType/Values/ResetCameraToDefaultSpeed.html", ["reset", "camera", "to", "default", "speed"], "EControlSettingType");
addToContainers_enumValue("CameraEdgeMovementThreshold", "How close mouse must be to the edge of the screen for camera panning to happen", "Docs/Enums/EControlSettingType/Values/CameraEdgeMovementThreshold.html", ["camera", "edge", "movement", "threshold"], "EControlSettingType");
addToContainers_enumValue("CameraAcceleration", "Acceleration when moving camera", "Docs/Enums/EControlSettingType/Values/CameraAcceleration.html", ["camera", "acceleration"], "EControlSettingType");
addToContainers_enumValue("CameraDeceleration", "How fast camera stops", "Docs/Enums/EControlSettingType/Values/CameraDeceleration.html", ["camera", "deceleration"], "EControlSettingType");
addToContainers_enumValue("DoubleClickTime", "Time allowed for double clicks", "Docs/Enums/EControlSettingType/Values/DoubleClickTime.html", ["double", "click", "time"], "EControlSettingType");
addToContainers_enumValue("MouseMovementThreshold", "", "Docs/Enums/EControlSettingType/Values/MouseMovementThreshold.html", ["mouse", "movement", "threshold"], "EControlSettingType");
addToContainers_enumValue("GhostRotationRadius", "", "Docs/Enums/EControlSettingType/Values/GhostRotationRadius.html", ["ghost", "rotation", "radius"], "EControlSettingType");
addToContainers_enumValue("GhostRotationSpeed", "", "Docs/Enums/EControlSettingType/Values/GhostRotationSpeed.html", ["ghost", "rotation", "speed"], "EControlSettingType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "=========================================", "Docs/Enums/EControlSettingType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EControlSettingType");
addToContainers_enum("EItemAquireReason", "", "Docs/Enums/EItemAquireReason/EItemAquireReason.html", ["item", "aquire", "reason"], "");
addToContainers_enumValue("PurchasedFromShop", "Purchased the item from a shop", "Docs/Enums/EItemAquireReason/Values/PurchasedFromShop.html", ["purchased", "from", "shop"], "EItemAquireReason");
addToContainers_enumValue("CombinedFromOthers", "The item was created by combining other items e.g. divine rapier, boots of travel", "Docs/Enums/EItemAquireReason/Values/CombinedFromOthers.html", ["combined", "from", "others"], "EItemAquireReason");
addToContainers_enumValue("PickedUpOffGround", "Found it in the world and picked it up", "Docs/Enums/EItemAquireReason/Values/PickedUpOffGround.html", ["picked", "up", "off", "ground"], "EItemAquireReason");
addToContainers_enumValue("MagicallyCreated", "This is for development. Item was added using the development cheat widget", "Docs/Enums/EItemAquireReason/Values/MagicallyCreated.html", ["magically", "created"], "EItemAquireReason");
addToContainers_enumValue("MagicallyCreated", "This is for development. Item was added using the development cheat widget", "Docs/Enums/EItemAquireReason/Values/MagicallyCreated.html", ["magically", "created"], "EItemAquireReason");
addToContainers_enum("EItemRemovalReason", "", "Docs/Enums/EItemRemovalReason/EItemRemovalReason.html", ["item", "removal", "reason"], "");
addToContainers_enumValue("DroppedOnDeath", "The item drops when it\'s weilder dies which is what has happened e.g. divine rapier, gem of true sight", "Docs/Enums/EItemRemovalReason/Values/DroppedOnDeath.html", ["dropped", "on", "death"], "EItemRemovalReason");
addToContainers_enumValue("Ingredient", "The item is being removed because it + other items are being combined to create another item e.g. claymore is removed to make a divine rapier", "Docs/Enums/EItemRemovalReason/Values/Ingredient.html", [], "EItemRemovalReason");
addToContainers_enumValue("RemovedOnZeroCharges", "When item reaches zero charges it is removed which is what happened e.g. clarity potions, TP scrolls", "Docs/Enums/EItemRemovalReason/Values/RemovedOnZeroCharges.html", ["removed", "on", "zero", "charges"], "EItemRemovalReason");
addToContainers_enumValue("Sold", "Item was sold to a shop", "Docs/Enums/EItemRemovalReason/Values/Sold.html", [], "EItemRemovalReason");
addToContainers_enumValue("Sold", "Item was sold to a shop", "Docs/Enums/EItemRemovalReason/Values/Sold.html", [], "EItemRemovalReason");
addToContainers_enum("EItemEntersWorldReason", "", "Docs/Enums/EItemEntersWorldReason/EItemEntersWorldReason.html", ["item", "enters", "world", "reason"], "");
addToContainers_enumValue("DroppedOnDeath", "Item is the type of item that drops when it\'s owner dies which is what has happened", "Docs/Enums/EItemEntersWorldReason/Values/DroppedOnDeath.html", ["dropped", "on", "death"], "EItemEntersWorldReason");
addToContainers_enumValue("ExplicitlyDropped", "Adding this because I anticipate it will be used at some point. Selectable was commanded to drop the item", "Docs/Enums/EItemEntersWorldReason/Values/ExplicitlyDropped.html", ["explicitly", "dropped"], "EItemEntersWorldReason");
addToContainers_enumValue("ExplicitlyDropped", "Adding this because I anticipate it will be used at some point. Selectable was commanded to drop the item", "Docs/Enums/EItemEntersWorldReason/Values/ExplicitlyDropped.html", ["explicitly", "dropped"], "EItemEntersWorldReason");
addToContainers_enum("EItemChangesNumChargesReason", "", "Docs/Enums/EItemChangesNumChargesReason/EItemChangesNumChargesReason.html", ["item", "changes", "num", "charges", "reason"], "");
addToContainers_enumValue("Use", "The owner used it which consumed a charge", "Docs/Enums/EItemChangesNumChargesReason/Values/Use.html", [], "EItemChangesNumChargesReason");
addToContainers_enumValue("Use", "The owner used it which consumed a charge", "Docs/Enums/EItemChangesNumChargesReason/Values/Use.html", [], "EItemChangesNumChargesReason");
addToContainers_enum("ELobbySlotStatus", "", "Docs/Enums/ELobbySlotStatus/ELobbySlotStatus.html", ["lobby", "slot", "status"], "");
addToContainers_enumValue("JustInitialized", "Default value. Never to be used", "Docs/Enums/ELobbySlotStatus/Values/JustInitialized.html", ["just", "initialized"], "ELobbySlotStatus");
addToContainers_enumValue("Human", "Another human player", "Docs/Enums/ELobbySlotStatus/Values/Human.html", [], "ELobbySlotStatus");
addToContainers_enumValue("CPU", "Computer controlled player", "Docs/Enums/ELobbySlotStatus/Values/CPU.html", ["p", "u"], "ELobbySlotStatus");
addToContainers_enumValue("Open", "Slot is open. Players can occupy it", "Docs/Enums/ELobbySlotStatus/Values/Open.html", [], "ELobbySlotStatus");
addToContainers_enumValue("Closed", "Slot cannot be occupied. Will be made invisible", "Docs/Enums/ELobbySlotStatus/Values/Closed.html", [], "ELobbySlotStatus");
addToContainers_enumValue("Closed", "Slot cannot be occupied. Will be made invisible", "Docs/Enums/ELobbySlotStatus/Values/Closed.html", [], "ELobbySlotStatus");
addToContainers_enum("EMatchType", "", "Docs/Enums/EMatchType/EMatchType.html", ["match", "type"], "");
addToContainers_enumValue("None", "Type of match", "Docs/Enums/EMatchType/Values/None.html", [], "EMatchType");
addToContainers_enumValue("Offline", "", "Docs/Enums/EMatchType/Values/Offline.html", [], "EMatchType");
addToContainers_enumValue("LAN", "", "Docs/Enums/EMatchType/Values/LAN.html", ["a", "n"], "EMatchType");
addToContainers_enumValue("SteamOnline", "", "Docs/Enums/EMatchType/Values/SteamOnline.html", ["steam", "online"], "EMatchType");
addToContainers_enum("ELoadingStatus", "", "Docs/Enums/ELoadingStatus/ELoadingStatus.html", ["loading", "status"], "");
addToContainers_enumValue("None", "Status of loading a match", "Docs/Enums/ELoadingStatus/Values/None.html", [], "ELoadingStatus");
addToContainers_enumValue("LoadingPersistentMap", "Before new persistent map has even been loaded - game mode has not switched yet", "Docs/Enums/ELoadingStatus/Values/LoadingPersistentMap.html", ["loading", "persistent", "map"], "ELoadingStatus");
addToContainers_enumValue("WaitingForAllPlayersToConnect", "Waiting for all human players to reach game modes PostLogin. Because maps are streamed in and no travel is used this will likely never to set", "Docs/Enums/ELoadingStatus/Values/WaitingForAllPlayersToConnect.html", ["waiting", "for", "all", "players", "to", "connect"], "ELoadingStatus");
addToContainers_enumValue("WaitingForPlayerControllerClientSetupForMatchAcknowledgementFromAllPlayers", "Waiting for all players to signal they have done their player controller\'s Client_SetupForMatch", "Docs/Enums/ELoadingStatus/Values/WaitingForPlayerControllerClientS.html", ["waiting", "for", "player", "controller", "client", "setup", "for", "match", "acknowledgement", "from", "all", "players"], "ELoadingStatus");
addToContainers_enumValue("WaitingForAllPlayersToStreamInLevel", "Waiting for all players to stream in the sub-level", "Docs/Enums/ELoadingStatus/Values/WaitingForAllPlayersToStreamInLev.html", ["waiting", "for", "all", "players", "to", "stream", "in", "level"], "ELoadingStatus");
addToContainers_enumValue("WaitingForInitialValuesAcknowledgementFromAllPlayers", "Waiting for all players to say they have received every players player state info including CPU player state info", "Docs/Enums/ELoadingStatus/Values/WaitingForInitialValuesAcknowledg.html", ["waiting", "for", "initial", "values", "acknowledgement", "from", "all", "players"], "ELoadingStatus");
addToContainers_enumValue("WaitingForFinalSetupAcks", "Waiting for all AMyPlayerState::Client_FinalSetup to complete", "Docs/Enums/ELoadingStatus/Values/WaitingForFinalSetupAcks.html", ["waiting", "for", "final", "setup", "acks"], "ELoadingStatus");
addToContainers_enumValue("SpawningStartingSelectables", "Spawn the starting buildings/units for each player. Once this is done each players input is enabled and the match starts", "Docs/Enums/ELoadingStatus/Values/SpawningStartingSelectables.html", ["spawning", "starting", "selectables"], "ELoadingStatus");
addToContainers_enumValue("ShowingBlackScreenRightBeforeMatchStart", "When showing a black screen for one second before match starts.", "Docs/Enums/ELoadingStatus/Values/ShowingBlackScreenRightBeforeMatc.html", ["showing", "black", "screen", "right", "before", "match", "start"], "ELoadingStatus");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/ELoadingStatus/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ELoadingStatus");
addToContainers_enum("EAffiliation", "", "Docs/Enums/EAffiliation/EAffiliation.html", [], "");
addToContainers_enumValue("Unknown", "Cannot derive affiliation yet", "Docs/Enums/EAffiliation/Values/Unknown.html", [], "EAffiliation");
addToContainers_enumValue("Owned", "Built by you. Under your control", "Docs/Enums/EAffiliation/Values/Owned.html", [], "EAffiliation");
addToContainers_enumValue("Allied", "Built by a player you\'re allied with", "Docs/Enums/EAffiliation/Values/Allied.html", [], "EAffiliation");
addToContainers_enumValue("Neutral", "Not controlled by any player", "Docs/Enums/EAffiliation/Values/Neutral.html", [], "EAffiliation");
addToContainers_enumValue("Hostile", "Built by a player you are not allied with", "Docs/Enums/EAffiliation/Values/Hostile.html", [], "EAffiliation");
addToContainers_enumValue("Observed", "Local player is an observer of match, not actually playing", "Docs/Enums/EAffiliation/Values/Observed.html", [], "EAffiliation");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EAffiliation/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EAffiliation");
addToContainers_enum("EWidgetType", "", "Docs/Enums/EWidgetType/EWidgetType.html", ["widget", "type"], "");
addToContainers_enumValue("Lobby", "A lobby for either single or multiplayer", "Docs/Enums/EWidgetType/Values/Lobby.html", [], "EWidgetType");
addToContainers_enumValue("PasswordEntry", "Widget that appears for password entry", "Docs/Enums/EWidgetType/Values/PasswordEntry.html", ["password", "entry"], "EWidgetType");
addToContainers_enumValue("ConfirmExitFromLobby", "The \'Are you sure you want to exit lobby?\' widget", "Docs/Enums/EWidgetType/Values/ConfirmExitFromLobby.html", ["confirm", "exit", "from", "lobby"], "EWidgetType");
addToContainers_enumValue("LobbyCreationScreen", "The screen for setting up a multiplayer lobby", "Docs/Enums/EWidgetType/Values/LobbyCreationScreen.html", ["lobby", "creation", "screen"], "EWidgetType");
addToContainers_enumValue("MapSelectionScreen", "Widget for when selecting a map to play on", "Docs/Enums/EWidgetType/Values/MapSelectionScreen.html", ["map", "selection", "screen"], "EWidgetType");
addToContainers_enumValue("LobbyBrowser", "Networked game browser", "Docs/Enums/EWidgetType/Values/LobbyBrowser.html", ["lobby", "browser"], "EWidgetType");
addToContainers_enumValue("MainMenu", "", "Docs/Enums/EWidgetType/Values/MainMenu.html", ["main", "menu"], "EWidgetType");
addToContainers_enumValue("Settings", "Menu for video/audio/game/control settings", "Docs/Enums/EWidgetType/Values/Settings.html", [], "EWidgetType");
addToContainers_enumValue("Profile", "The screen to adjust things like nickname etc", "Docs/Enums/EWidgetType/Values/Profile.html", [], "EWidgetType");
addToContainers_enumValue("GameMessage", "Widget that shows warning/error messages like \"lobby full\"", "Docs/Enums/EWidgetType/Values/GameMessage.html", ["game", "message"], "EWidgetType");
addToContainers_enumValue("NicknameEntryScreen", "The widget that lets user enter their nickname", "Docs/Enums/EWidgetType/Values/NicknameEntryScreen.html", ["nickname", "entry", "screen"], "EWidgetType");
addToContainers_enumValue("PlayMenu", "Menu that appears after pessing \'Play\' from the main menu", "Docs/Enums/EWidgetType/Values/PlayMenu.html", ["play", "menu"], "EWidgetType");
addToContainers_enumValue("LoadingScreen", "Screen for loading a match", "Docs/Enums/EWidgetType/Values/LoadingScreen.html", ["loading", "screen"], "EWidgetType");
addToContainers_enumValue("ConfirmExitToOS", "\'Are you sure you want to exit to OS?\' widget", "Docs/Enums/EWidgetType/Values/ConfirmExitToOS.html", ["confirm", "exit", "to", "o", "s"], "EWidgetType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "This is always last in the enum", "Docs/Enums/EWidgetType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EWidgetType");
addToContainers_enum("EMatchWidgetType", "", "Docs/Enums/EMatchWidgetType/EMatchWidgetType.html", ["match", "widget", "type"], "");
addToContainers_enumValue("None", "Widgets that appear during a match", "Docs/Enums/EMatchWidgetType/Values/None.html", [], "EMatchWidgetType");
addToContainers_enumValue("HUD", "Displays things like current resources", "Docs/Enums/EMatchWidgetType/Values/HUD.html", ["u", "d"], "EMatchWidgetType");
addToContainers_enumValue("CommanderSkillTree_Ver2", "_Ver2 can be deleted from name. Note Z ordering via enum value means nothing for this widget. See HUDStatics::COMMANDER_SKILL_TREE_Z_ORDER instead", "Docs/Enums/EMatchWidgetType/Values/CommanderSkillTree_Ver2.html", ["commander", "skill", "tree_", "ver2"], "EMatchWidgetType");
addToContainers_enumValue("Defeat", "Screen that will only appear if you have been defeated but the match is still going", "Docs/Enums/EMatchWidgetType/Values/Defeat.html", [], "EMatchWidgetType");
addToContainers_enumValue("EndOfMatch", "Screen that appears when the match has finished", "Docs/Enums/EMatchWidgetType/Values/EndOfMatch.html", ["end", "of", "match"], "EMatchWidgetType");
addToContainers_enumValue("PauseMenu", "Menu that shows when you press pause button", "Docs/Enums/EMatchWidgetType/Values/PauseMenu.html", ["pause", "menu"], "EMatchWidgetType");
addToContainers_enumValue("Settings", "Settings menu like video, audio etc accessable from the pause menu", "Docs/Enums/EMatchWidgetType/Values/Settings.html", [], "EMatchWidgetType");
addToContainers_enumValue("ConfirmReturnToMainMenu", "The \'are you sure you want to return to main menu?\' widget", "Docs/Enums/EMatchWidgetType/Values/ConfirmReturnToMainMenu.html", ["confirm", "return", "to", "main", "menu"], "EMatchWidgetType");
addToContainers_enumValue("z_ALWAYS_3RD_LAST_IN_ENUM", "~ Highest Z order here", "Docs/Enums/EMatchWidgetType/Values/z_ALWAYS_3RD_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_3", "r", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMatchWidgetType");
addToContainers_enumValue("DevelopmentCheats", "Has cheat actions for development", "Docs/Enums/EMatchWidgetType/Values/DevelopmentCheats.html", ["development", "cheats"], "EMatchWidgetType");
addToContainers_enumValue("DevelopmentCheatsPopupMenu", "Popup widget used by development cheats widget", "Docs/Enums/EMatchWidgetType/Values/DevelopmentCheatsPopupMenu.html", ["development", "cheats", "popup", "menu"], "EMatchWidgetType");
addToContainers_enum("EProductionQueueType", "", "Docs/Enums/EProductionQueueType/EProductionQueueType.html", ["production", "queue", "type"], "");
addToContainers_enumValue("None", "Default value. Never to be used ", "Docs/Enums/EProductionQueueType/Values/None.html", [], "EProductionQueueType");
addToContainers_enumValue("Persistent", "Queue that is only used when producing buildings from the HUD persistent panel.", "Docs/Enums/EProductionQueueType/Values/Persistent.html", [], "EProductionQueueType");
addToContainers_enumValue("Context", "Queue that is used when producing either units or upgrades", "Docs/Enums/EProductionQueueType/Values/Context.html", [], "EProductionQueueType");
addToContainers_enum("EMessageType", "", "Docs/Enums/EMessageType/EMessageType.html", ["message", "type"], "");
addToContainers_enumValue("None", "Different types of messages that can be displayed to the HUD", "Docs/Enums/EMessageType/Values/None.html", [], "EMessageType");
addToContainers_enumValue("GameNotification", "", "Docs/Enums/EMessageType/Values/GameNotification.html", ["game", "notification"], "EMessageType");
addToContainers_enumValue("GameWarning", "", "Docs/Enums/EMessageType/Values/GameWarning.html", ["game", "warning"], "EMessageType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMessageType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMessageType");
addToContainers_enum("EGameNotification", "", "Docs/Enums/EGameNotification/EGameNotification.html", ["game", "notification"], "");
addToContainers_enumValue("None", "Notifications that happen during game", "Docs/Enums/EGameNotification/Values/None.html", [], "EGameNotification");
addToContainers_enumValue("ResourceSpotDepleted", "Resources at a resource spot have depleted", "Docs/Enums/EGameNotification/Values/ResourceSpotDepleted.html", ["resource", "spot", "depleted"], "EGameNotification");
addToContainers_enumValue("PlayerDefeated", "A player has been defeated", "Docs/Enums/EGameNotification/Values/PlayerDefeated.html", ["player", "defeated"], "EGameNotification");
addToContainers_enumValue("NukeLaunchedByOurselves", "", "Docs/Enums/EGameNotification/Values/NukeLaunchedByOurselves.html", ["nuke", "launched", "by", "ourselves"], "EGameNotification");
addToContainers_enumValue("NukeLaunchedByAllies", "", "Docs/Enums/EGameNotification/Values/NukeLaunchedByAllies.html", ["nuke", "launched", "by", "allies"], "EGameNotification");
addToContainers_enumValue("NukeLaunchedByHostiles", "", "Docs/Enums/EGameNotification/Values/NukeLaunchedByHostiles.html", ["nuke", "launched", "by", "hostiles"], "EGameNotification");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EGameNotification/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EGameNotification");
addToContainers_enum("EGameWarning", "", "Docs/Enums/EGameWarning/EGameWarning.html", ["game", "warning"], "");
addToContainers_enumValue("None", "This should not get a message assigned to it", "Docs/Enums/EGameWarning/Values/None.html", [], "EGameWarning");
addToContainers_enumValue("ActionOnCooldown", "Action is on cooldown", "Docs/Enums/EGameWarning/Values/ActionOnCooldown.html", ["action", "on", "cooldown"], "EGameWarning");
addToContainers_enumValue("NotEnoughSelectableResources", "Not enough mana/energy/whatever to use an ability. This is a generalized message. I should possibly remove this and add more specific messages like NotEnoughMana and NotEnoughEnergy so users can be more specific with their warning messages. Will probably require creating yet another overload for PS::OnGameWarningHappened that takes a ESelectableResourceType", "Docs/Enums/EGameWarning/Values/NotEnoughSelectableResources.html", ["not", "enough", "selectable", "resources"], "EGameWarning");
addToContainers_enumValue("PrerequisitesNotMet", "The prerequisites are not met yet", "Docs/Enums/EGameWarning/Values/PrerequisitesNotMet.html", ["prerequisites", "not", "met"], "EGameWarning");
addToContainers_enumValue("TrainingQueueFull", "Same situation as trying to add more than 5 units to a queue in Starcraft II", "Docs/Enums/EGameWarning/Values/TrainingQueueFull.html", ["training", "queue", "full"], "EGameWarning");
addToContainers_enumValue("AlreadyBeingResearched", "For upgrades only. If trying to click a button to research something and it is already being researched.", "Docs/Enums/EGameWarning/Values/AlreadyBeingResearched.html", ["already", "being", "researched"], "EGameWarning");
addToContainers_enumValue("FullyResearched", "Upgrade cannot be researched anymore", "Docs/Enums/EGameWarning/Values/FullyResearched.html", ["fully", "researched"], "EGameWarning");
addToContainers_enumValue("Building_InsideFog", "Trying to place ghost building inside fog of war", "Docs/Enums/EGameWarning/Values/Building_InsideFog.html", ["building_", "inside", "fog"], "EGameWarning");
addToContainers_enumValue("Building_SelectableInTheWay", "Trying to place ghost but another building/unit is in the way", "Docs/Enums/EGameWarning/Values/Building_SelectableInTheWay.html", ["building_", "selectable", "in", "the", "way"], "EGameWarning");
addToContainers_enumValue("Building_NotCloseEnoughToBase", "Trying to place building but building is too far away from other owned/allied buildings", "Docs/Enums/EGameWarning/Values/Building_NotCloseEnoughToBase.html", ["building_", "not", "close", "enough", "to", "base"], "EGameWarning");
addToContainers_enumValue("Building_GroundNotFlatEnough", "Trying to place building but the ground is not flat enough", "Docs/Enums/EGameWarning/Values/Building_GroundNotFlatEnough.html", ["building_", "ground", "not", "flat", "enough"], "EGameWarning");
addToContainers_enumValue("CannotProduce", "Basically means you don\'t have a construction yard type building yet you are trying to build a building. Should only appear as a message from the server. Otherwise clients should not be allowed to click the button in the first place", "Docs/Enums/EGameWarning/Values/CannotProduce.html", ["cannot", "produce"], "EGameWarning");
addToContainers_enumValue("BuildingInProgress", "For HUD persistent panel only. Means that you are already building something and cannot build any more", "Docs/Enums/EGameWarning/Values/BuildingInProgress.html", ["building", "in", "progress"], "EGameWarning");
addToContainers_enumValue("BuildingNotReadyYet", "When trying to place a building using BuildsInTab but the server says it\'s not actually ready yet even though it was on the client. Only happens because of timer drift and is expected to be rare", "Docs/Enums/EGameWarning/Values/BuildingNotReadyYet.html", ["building", "not", "ready", "yet"], "EGameWarning");
addToContainers_enumValue("InternalSelectableCapReached", "The internal selectable cap has been reached, which is usually around the size of UINT8_MAX. Have to wait until a selectable is destroyed before another can be built", "Docs/Enums/EGameWarning/Values/InternalSelectableCapReached.html", ["internal", "selectable", "cap", "reached"], "EGameWarning");
addToContainers_enumValue("BuildingTypeQuantityLimit", "The faction has a limit on the quantity of a building and you are trying to build another that would send you over the limit e.g. in RA2 you are only allowed to build one weather device", "Docs/Enums/EGameWarning/Values/BuildingTypeQuantityLimit.html", ["building", "type", "quantity", "limit"], "EGameWarning");
addToContainers_enumValue("UnitTypeQuantityLimit", "The faction has a limit on the the qunatity of a unit and you are trying to build another that would send you over the limit e.g. in RA2 you are only allowed to build one tanya", "Docs/Enums/EGameWarning/Values/UnitTypeQuantityLimit.html", ["unit", "type", "quantity", "limit"], "EGameWarning");
addToContainers_enumValue("InvalidTarget", "Target is not an acceptable target for ability", "Docs/Enums/EGameWarning/Values/InvalidTarget.html", ["invalid", "target"], "EGameWarning");
addToContainers_enumValue("AbilityCannotTargetHostiles", "", "Docs/Enums/EGameWarning/Values/AbilityCannotTargetHostiles.html", ["ability", "cannot", "target", "hostiles"], "EGameWarning");
addToContainers_enumValue("AbilityCannotTargetFriendlies", "", "Docs/Enums/EGameWarning/Values/AbilityCannotTargetFriendlies.html", ["ability", "cannot", "target", "friendlies"], "EGameWarning");
addToContainers_enumValue("CannotUseAbility", "Broad message when cannot use an ability", "Docs/Enums/EGameWarning/Values/CannotUseAbility.html", ["cannot", "use", "ability"], "EGameWarning");
addToContainers_enumValue("NoTarget", "No target hovered for an ability that requires a target", "Docs/Enums/EGameWarning/Values/NoTarget.html", ["no", "target"], "EGameWarning");
addToContainers_enumValue("AbilityCannotTargetSelf", "A unit is trying to target itself with an ability but this is not allowed", "Docs/Enums/EGameWarning/Values/AbilityCannotTargetSelf.html", ["ability", "cannot", "target", "self"], "EGameWarning");
addToContainers_enumValue("AbilityOutOfRange", "Ability is out of range", "Docs/Enums/EGameWarning/Values/AbilityOutOfRange.html", ["ability", "out", "of", "range"], "EGameWarning");
addToContainers_enumValue("AbilityLocationInsideFog", "Tried to place an ability inside fog of war but we are not allowed to do that", "Docs/Enums/EGameWarning/Values/AbilityLocationInsideFog.html", ["ability", "location", "inside", "fog"], "EGameWarning");
addToContainers_enumValue("UserNoLongerAlive", "Added for items. Trying to use an item but the selectable that is ment to use it is no longer alive", "Docs/Enums/EGameWarning/Values/UserNoLongerAlive.html", ["user", "no", "longer", "alive"], "EGameWarning");
addToContainers_enumValue("UserNoLongerValid", "Rare but can happen for remote clients. This is when they try to issue a context command but server says the units are now invalid", "Docs/Enums/EGameWarning/Values/UserNoLongerValid.html", ["user", "no", "longer", "valid"], "EGameWarning");
addToContainers_enumValue("TargetNoLongerAlive", "", "Docs/Enums/EGameWarning/Values/TargetNoLongerAlive.html", ["target", "no", "longer", "alive"], "EGameWarning");
addToContainers_enumValue("NothingSelectedCanPickUpItem", "Right-clicked on an inventory item in the world but nothing selected can pick it up", "Docs/Enums/EGameWarning/Values/NothingSelectedCanPickUpItem.html", ["nothing", "selected", "can", "pick", "up", "item"], "EGameWarning");
addToContainers_enumValue("TypeCannotAquireItem", "The unit trying to pick up or purchase an item cannot because the item type does not allow the unit type to do so", "Docs/Enums/EGameWarning/Values/TypeCannotAquireItem.html", ["type", "cannot", "aquire", "item"], "EGameWarning");
addToContainers_enumValue("TargetNotVisible", "Rare but basically remote client requested doing something to a target that the server says they can\'t actually see", "Docs/Enums/EGameWarning/Values/TargetNotVisible.html", ["target", "not", "visible"], "EGameWarning");
addToContainers_enumValue("SelectionNotUnderYourControl", "Another pretty rare warning as of right now. Kind of a modified client alert if this happens", "Docs/Enums/EGameWarning/Values/SelectionNotUnderYourControl.html", ["selection", "not", "under", "your", "control"], "EGameWarning");
addToContainers_enumValue("BuilderDestroyed", "For Tried to place a building but the builder was destroyed. Can probably code to avoid this situation but is here for now", "Docs/Enums/EGameWarning/Values/BuilderDestroyed.html", ["builder", "destroyed"], "EGameWarning");
addToContainers_enumValue("NotValid_Shop", "Remote client trying to purchase from a shop that is no longer valid. Rare warning", "Docs/Enums/EGameWarning/Values/NotValid_Shop.html", ["not", "valid_", "shop"], "EGameWarning");
addToContainers_enumValue("ItemNotForSale", "Trying to buy inventory item in shop but item can only be browsed not bought", "Docs/Enums/EGameWarning/Values/ItemNotForSale.html", ["item", "not", "for", "sale"], "EGameWarning");
addToContainers_enumValue("ItemSoldOut", "Inventory item in shop has a limited quantity and has sold out", "Docs/Enums/EGameWarning/Values/ItemSoldOut.html", ["item", "sold", "out"], "EGameWarning");
addToContainers_enumValue("ItemOutOfCharges", "Trying to use an inventory item but it\'s used up all it\'s charges", "Docs/Enums/EGameWarning/Values/ItemOutOfCharges.html", ["item", "out", "of", "charges"], "EGameWarning");
addToContainers_enumValue("ItemNoLongerInInventory", "Trying to use an inventory item but it is no longer in inventory. This warning will only be seen if you implement abilities/effects that can remove items from inventories", "Docs/Enums/EGameWarning/Values/ItemNoLongerInInventory.html", ["item", "no", "longer", "in", "inventory"], "EGameWarning");
addToContainers_enumValue("ItemNoLongerInWorld", "Tried to pick up an inventory item in the world but it is no longer there", "Docs/Enums/EGameWarning/Values/ItemNoLongerInWorld.html", ["item", "no", "longer", "in", "world"], "EGameWarning");
addToContainers_enumValue("ItemOnCooldown", "Trying to use an inventory item but it is on cooldown", "Docs/Enums/EGameWarning/Values/ItemOnCooldown.html", ["item", "on", "cooldown"], "EGameWarning");
addToContainers_enumValue("ItemNotUsable", "This one will likely only come from the server. It could be evidience of a modified client but can also be the result of inventory being modified on server before RPC has arrived to client", "Docs/Enums/EGameWarning/Values/ItemNotUsable.html", ["item", "not", "usable"], "EGameWarning");
addToContainers_enumValue("NotInRangeToPurchaseFromShop", "Trying to purchase an item from a shop but no selectable is in range to accept the item", "Docs/Enums/EGameWarning/Values/NotInRangeToPurchaseFromShop.html", ["not", "in", "range", "to", "purchase", "from", "shop"], "EGameWarning");
addToContainers_enumValue("NotInRangeToSellToShop", "Trying to sell an item but no shop is in range", "Docs/Enums/EGameWarning/Values/NotInRangeToSellToShop.html", ["not", "in", "range", "to", "sell", "to", "shop"], "EGameWarning");
addToContainers_enumValue("ItemCannotBeSold", "Trying to sell an item but it is the type of item that cannot be sold", "Docs/Enums/EGameWarning/Values/ItemCannotBeSold.html", ["item", "cannot", "be", "sold"], "EGameWarning");
addToContainers_enumValue("InventoryFull", "Trying to buy an item from a shop but everyone that is in range has a full inventory", "Docs/Enums/EGameWarning/Values/InventoryFull.html", ["inventory", "full"], "EGameWarning");
addToContainers_enumValue("CannotCarryAnymoreOfItem", "Trying to put an item in inventory but we are not allowed to carry anymore of it. Means the item is unique or something", "Docs/Enums/EGameWarning/Values/CannotCarryAnymoreOfItem.html", ["cannot", "carry", "anymore", "of", "item"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_MaxAbilityRankObtained", "The player is tryingto gain another rank for an ability but has already gained the max rank of the ability", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_MaxAbilityRank.html", ["commander", "skill", "tree_", "max", "ability", "rank", "obtained"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_CommanderRankNotHighEnough", "The player is trying to aquire an ability but their rank is not high enough", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_CommanderRankN.html", ["commander", "skill", "tree_", "commander", "rank", "not", "high", "enough"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_PrerequisitesNotMet", "The player is trying to aquire an ability but the prerequisites have not been aquired", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_PrerequisitesN.html", ["commander", "skill", "tree_", "prerequisites", "not", "met"], "EGameWarning");
addToContainers_enumValue("CommanderSkillTree_NotEnoughSkillPoints", "The player is trying to aquire an ability but they cannot afford its skill point cost", "Docs/Enums/EGameWarning/Values/CommanderSkillTree_NotEnoughSkill.html", ["commander", "skill", "tree_", "not", "enough", "skill", "points"], "EGameWarning");
addToContainers_enumValue("AllAbilityChargesUsed", "Ability has a limited number of charges and cannot be used anymore. This was added for commander abilities", "Docs/Enums/EGameWarning/Values/AllAbilityChargesUsed.html", ["all", "ability", "charges", "used"], "EGameWarning");
addToContainers_enumValue("TargetPlayerHasBeenDefeated", "Trying to target a player with an ability but they have been defeated", "Docs/Enums/EGameWarning/Values/TargetPlayerHasBeenDefeated.html", ["target", "player", "has", "been", "defeated"], "EGameWarning");
addToContainers_enumValue("TargetPlayerIsHostile", "Trying to target a hostile player but the ability does not allow this", "Docs/Enums/EGameWarning/Values/TargetPlayerIsHostile.html", ["target", "player", "is", "hostile"], "EGameWarning");
addToContainers_enumValue("TargetPlayerIsAllied", "Trying to target an allied player but the ability does not allow this", "Docs/Enums/EGameWarning/Values/TargetPlayerIsAllied.html", ["target", "player", "is", "allied"], "EGameWarning");
addToContainers_enumValue("TargetPlayerIsSelf", "Trying to target ourself (meaning the player) but the ability does not allow this", "Docs/Enums/EGameWarning/Values/TargetPlayerIsSelf.html", ["target", "player", "is", "self"], "EGameWarning");
addToContainers_enumValue("NotAllowedToRemapAction", "Trying to remap a game action to some key but the action isn\'t allowed to be remapped", "Docs/Enums/EGameWarning/Values/NotAllowedToRemapAction.html", ["not", "allowed", "to", "remap", "action"], "EGameWarning");
addToContainers_enumValue("WouldUnbindUnremappableAction", "Trying to remap a game action to another key. However that key is mapped to some other action that isn\'t allowed to be changed ever", "Docs/Enums/EGameWarning/Values/WouldUnbindUnremappableAction.html", ["would", "unbind", "unremappable", "action"], "EGameWarning");
addToContainers_enumValue("z_ALWAYS_2ND_LAST_IN_ENUM", "", "Docs/Enums/EGameWarning/Values/z_ALWAYS_2ND_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_2", "n", "d_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EGameWarning");
addToContainers_enumValue("NotEnoughResources", "", "Docs/Enums/EGameWarning/Values/NotEnoughResources.html", ["not", "enough", "resources"], "EGameWarning");
addToContainers_enum("EBuildingBuildMethod", "", "Docs/Enums/EBuildingBuildMethod/EBuildingBuildMethod.html", ["building", "build", "method"], "");
addToContainers_enumValue("None", "Not to be used", "Docs/Enums/EBuildingBuildMethod/Values/None.html", [], "EBuildingBuildMethod");
addToContainers_enumValue("BuildsInTab", "Like classic Command and Conquer games or Allies in Red Alert 3. Building builds in your HUD and when complete you can place it somewhere at which point it will construct very quickly (or however slow you want it to, use FBuildingAttributes::ConstructTime to change this)", "Docs/Enums/EBuildingBuildMethod/Values/BuildsInTab.html", ["builds", "in", "tab"], "EBuildingBuildMethod");
addToContainers_enumValue("BuildsItself", "Like Soviets in Red Alert 3. Building is placed in world and builds itself", "Docs/Enums/EBuildingBuildMethod/Values/BuildsItself.html", ["builds", "itself"], "EBuildingBuildMethod");
addToContainers_enumValue("LayFoundationsInstantly", "Like Command and Conquer Generals. The foundation of the building is placed the moment the order is given. When the builder unit reaches the foundation it will start constructing the building", "Docs/Enums/EBuildingBuildMethod/Values/LayFoundationsInstantly.html", ["lay", "foundations", "instantly"], "EBuildingBuildMethod");
addToContainers_enumValue("LayFoundationsWhenAtLocation", "Like Terran and Zerg in Starcraft II. When builder unit gets to the build location they lay the foundation and start constructing it", "Docs/Enums/EBuildingBuildMethod/Values/LayFoundationsWhenAtLocation.html", ["lay", "foundations", "when", "at", "location"], "EBuildingBuildMethod");
addToContainers_enumValue("Protoss", "Like Protoss in Starcraft II. Requires the worker to get to order location, then building builds itself. Possibly can be merged with BuildsItself unless buildings context menus can build other buildings from it", "Docs/Enums/EBuildingBuildMethod/Values/Protoss.html", [], "EBuildingBuildMethod");
addToContainers_enum("EBuildingRallyPointDisplayRule", "", "Docs/Enums/EBuildingRallyPointDisplayRule/EBuildingRallyPointDisplayRule.html", ["building", "rally", "point", "display", "rule"], "");
addToContainers_enumValue("Always", "Show even when being constructed", "Docs/Enums/EBuildingRallyPointDisplayRule/Values/Always.html", [], "EBuildingRallyPointDisplayRule");
addToContainers_enumValue("OnlyWhenFullyConstructed", "Do not show when being constructed", "Docs/Enums/EBuildingRallyPointDisplayRule/Values/OnlyWhenFullyConstructed.html", ["only", "when", "fully", "constructed"], "EBuildingRallyPointDisplayRule");
addToContainers_enumValue("OnlyWhenFullyConstructed", "Do not show when being constructed", "Docs/Enums/EBuildingRallyPointDisplayRule/Values/OnlyWhenFullyConstructed.html", ["only", "when", "fully", "constructed"], "EBuildingRallyPointDisplayRule");
addToContainers_enum("ESelectableType", "", "Docs/Enums/ESelectableType/ESelectableType.html", ["selectable", "type"], "");
addToContainers_enumValue("Building", "The type of a selectable", "Docs/Enums/ESelectableType/Values/Building.html", [], "ESelectableType");
addToContainers_enumValue("Unit", "", "Docs/Enums/ESelectableType/Values/Unit.html", [], "ESelectableType");
addToContainers_enumValue("InventoryItem", "", "Docs/Enums/ESelectableType/Values/InventoryItem.html", ["inventory", "item"], "ESelectableType");
addToContainers_enum("EFogStatus", "", "Docs/Enums/EFogStatus/EFogStatus.html", ["fog", "status"], "");
addToContainers_enumValue("0x00", "", "Docs/Enums/EFogStatus/Values/0x00.html", [], "EFogStatus");
addToContainers_enumValue("0x01", "", "Docs/Enums/EFogStatus/Values/0x01.html", [], "EFogStatus");
addToContainers_enumValue("0x02", "", "Docs/Enums/EFogStatus/Values/0x02.html", [], "EFogStatus");
addToContainers_enumValue("0x03", "", "Docs/Enums/EFogStatus/Values/0x03.html", [], "EFogStatus");
addToContainers_enum("EMatchResult", "", "Docs/Enums/EMatchResult/EMatchResult.html", ["match", "result"], "");
addToContainers_enumValue("None", "Default value, never to be used", "Docs/Enums/EMatchResult/Values/None.html", [], "EMatchResult");
addToContainers_enumValue("Defeat", "", "Docs/Enums/EMatchResult/Values/Defeat.html", [], "EMatchResult");
addToContainers_enumValue("Draw", "", "Docs/Enums/EMatchResult/Values/Draw.html", [], "EMatchResult");
addToContainers_enumValue("Victory", "", "Docs/Enums/EMatchResult/Values/Victory.html", [], "EMatchResult");
addToContainers_enum("EAbilityMouseAppearance", "", "Docs/Enums/EAbilityMouseAppearance/EAbilityMouseAppearance.html", ["ability", "mouse", "appearance"], "");
addToContainers_enumValue("NoChange", "Mouse cursor will not change when using this ability", "Docs/Enums/EAbilityMouseAppearance/Values/NoChange.html", ["no", "change"], "EAbilityMouseAppearance");
addToContainers_enumValue("CustomMouseCursor", "Show a custom mouse cursor. At least default cursor will need a valid path while the other 2 are optional", "Docs/Enums/EAbilityMouseAppearance/Values/CustomMouseCursor.html", ["custom", "mouse", "cursor"], "EAbilityMouseAppearance");
addToContainers_enumValue("HideAndShowDecal", "Hide the mouse cursor and draw a decal onto the world", "Docs/Enums/EAbilityMouseAppearance/Values/HideAndShowDecal.html", ["hide", "and", "show", "decal"], "EAbilityMouseAppearance");
addToContainers_enum("ECommandTargetType", "", "Docs/Enums/ECommandTargetType/ECommandTargetType.html", ["command", "target", "type"], "");
addToContainers_enumValue("NoTarget", "No target. The ground for example", "Docs/Enums/ECommandTargetType/Values/NoTarget.html", ["no", "target"], "ECommandTargetType");
addToContainers_enumValue("OwnedSelectable", "", "Docs/Enums/ECommandTargetType/Values/OwnedSelectable.html", ["owned", "selectable"], "ECommandTargetType");
addToContainers_enumValue("AlliedSelectable", "", "Docs/Enums/ECommandTargetType/Values/AlliedSelectable.html", ["allied", "selectable"], "ECommandTargetType");
addToContainers_enumValue("NeutralSelectable", "", "Docs/Enums/ECommandTargetType/Values/NeutralSelectable.html", ["neutral", "selectable"], "ECommandTargetType");
addToContainers_enumValue("HostileSelectable", "", "Docs/Enums/ECommandTargetType/Values/HostileSelectable.html", ["hostile", "selectable"], "ECommandTargetType");
addToContainers_enumValue("ObservedSelectable", "~ Should always be 2nd last in enum", "Docs/Enums/ECommandTargetType/Values/ObservedSelectable.html", ["observed", "selectable"], "ECommandTargetType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/ECommandTargetType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECommandTargetType");
addToContainers_enum("EMessageRecipients", "", "Docs/Enums/EMessageRecipients/EMessageRecipients.html", ["message", "recipients"], "");
addToContainers_enumValue("None", "Who will receive an in-match chat message", "Docs/Enums/EMessageRecipients/Values/None.html", [], "EMessageRecipients");
addToContainers_enumValue("TeamOnly", "Only people on our own team", "Docs/Enums/EMessageRecipients/Values/TeamOnly.html", ["team", "only"], "EMessageRecipients");
addToContainers_enumValue("Everyone", "Everyone in the match ", "Docs/Enums/EMessageRecipients/Values/Everyone.html", [], "EMessageRecipients");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMessageRecipients/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMessageRecipients");
addToContainers_enum("EMarqueeBoxDrawMethod", "", "Docs/Enums/EMarqueeBoxDrawMethod/EMarqueeBoxDrawMethod.html", ["marquee", "box", "draw", "method"], "");
addToContainers_enumValue("BorderOnly", "Only draw an opaque border line like in starcraft", "Docs/Enums/EMarqueeBoxDrawMethod/Values/BorderOnly.html", ["border", "only"], "EMarqueeBoxDrawMethod");
addToContainers_enumValue("FilledRectangleOnly", "Only draw a transparent filled rectangle", "Docs/Enums/EMarqueeBoxDrawMethod/Values/FilledRectangleOnly.html", ["filled", "rectangle", "only"], "EMarqueeBoxDrawMethod");
addToContainers_enumValue("BorderAndFill", "Draw an opaque border and a transparent filled rectangle", "Docs/Enums/EMarqueeBoxDrawMethod/Values/BorderAndFill.html", ["border", "and", "fill"], "EMarqueeBoxDrawMethod");
addToContainers_enum("EBuffOrDebuffType", "", "Docs/Enums/EBuffOrDebuffType/EBuffOrDebuffType.html", ["buff", "or", "debuff", "type"], "");
addToContainers_enumValue("Buff", "Enum to define whether something is a buff or debuff", "Docs/Enums/EBuffOrDebuffType/Values/Buff.html", [], "EBuffOrDebuffType");
addToContainers_enumValue("Debuff", "", "Docs/Enums/EBuffOrDebuffType/Values/Debuff.html", [], "EBuffOrDebuffType");
addToContainers_enum("EMacroCommandType", "", "Docs/Enums/EMacroCommandType/EMacroCommandType.html", ["macro", "command", "type"], "");
addToContainers_enumValue("None", "Default value", "Docs/Enums/EMacroCommandType/Values/None.html", [], "EMacroCommandType");
addToContainers_enumValue("TrainCollector", "Training a unit for the purpose of harvesting resources", "Docs/Enums/EMacroCommandType/Values/TrainCollector.html", ["train", "collector"], "EMacroCommandType");
addToContainers_enumValue("BuildResourceDepot", "Building a building to serve as a resource depot", "Docs/Enums/EMacroCommandType/Values/BuildResourceDepot.html", ["build", "resource", "depot"], "EMacroCommandType");
addToContainers_enumValue("BuildConstructionYard", "Building a building so it can serve as a construction yard", "Docs/Enums/EMacroCommandType/Values/BuildConstructionYard.html", ["build", "construction", "yard"], "EMacroCommandType");
addToContainers_enumValue("TrainWorker", "Training a worker unit so they can build buildings", "Docs/Enums/EMacroCommandType/Values/TrainWorker.html", ["train", "worker"], "EMacroCommandType");
addToContainers_enumValue("BuildBarracks", "Building a building for the purpose of training army units from it", "Docs/Enums/EMacroCommandType/Values/BuildBarracks.html", ["build", "barracks"], "EMacroCommandType");
addToContainers_enumValue("ResearchUpgrade", "Research an upgrade", "Docs/Enums/EMacroCommandType/Values/ResearchUpgrade.html", ["research", "upgrade"], "EMacroCommandType");
addToContainers_enumValue("BuildBaseDefense", "Base a base defense building", "Docs/Enums/EMacroCommandType/Values/BuildBaseDefense.html", ["build", "base", "defense"], "EMacroCommandType");
addToContainers_enumValue("TrainArmyUnit", "Training a unit to use as an army unit", "Docs/Enums/EMacroCommandType/Values/TrainArmyUnit.html", ["train", "army", "unit"], "EMacroCommandType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMacroCommandType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMacroCommandType");
addToContainers_enum("EMacroCommandSecondaryType", "", "Docs/Enums/EMacroCommandSecondaryType/EMacroCommandSecondaryType.html", ["macro", "command", "secondary", "type"], "");
addToContainers_enumValue("None", "Default value", "Docs/Enums/EMacroCommandSecondaryType/Values/None.html", [], "EMacroCommandSecondaryType");
addToContainers_enumValue("TrainingUnit", "Training unit either as army unit or worker or collector", "Docs/Enums/EMacroCommandSecondaryType/Values/TrainingUnit.html", ["training", "unit"], "EMacroCommandSecondaryType");
addToContainers_enumValue("BuildingBuilding", "Building a building", "Docs/Enums/EMacroCommandSecondaryType/Values/BuildingBuilding.html", ["building", "building"], "EMacroCommandSecondaryType");
addToContainers_enumValue("ResearchingUpgrade", "", "Docs/Enums/EMacroCommandSecondaryType/Values/ResearchingUpgrade.html", ["researching", "upgrade"], "EMacroCommandSecondaryType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EMacroCommandSecondaryType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EMacroCommandSecondaryType");
addToContainers_enum("EAbilityDecalType", "", "Docs/Enums/EAbilityDecalType/EAbilityDecalType.html", ["ability", "decal", "type"], "");
addToContainers_enumValue("UsableLocation", "The decal to show when the mouse is at a location where if clicked then a command will be issued", "Docs/Enums/EAbilityDecalType/Values/UsableLocation.html", ["usable", "location"], "EAbilityDecalType");
addToContainers_enumValue("NotUsableLocation", "The decal to show when the mouse is at a location where if clicked a command will not be issued", "Docs/Enums/EAbilityDecalType/Values/NotUsableLocation.html", ["not", "usable", "location"], "EAbilityDecalType");
addToContainers_enum("EAttributeAdjustmentRule", "", "Docs/Enums/EAttributeAdjustmentRule/EAttributeAdjustmentRule.html", ["attribute", "adjustment", "rule"], "");
addToContainers_enumValue("NoChange", "If max health increases by 200 then current health will not change. If max health decreases by 200 then current health will not change unless it is now more than max health in which case it will be set to max health", "Docs/Enums/EAttributeAdjustmentRule/Values/NoChange.html", ["no", "change"], "EAttributeAdjustmentRule");
addToContainers_enumValue("Percentage", "If max health increases by 30% then current health increases by 30%. If max health decreases by 30% then current health decreases by 30%", "Docs/Enums/EAttributeAdjustmentRule/Values/Percentage.html", [], "EAttributeAdjustmentRule");
addToContainers_enumValue("Absolute", "If max health increases by 200 then so does current health. If max health decreases by 200 then current health will not change unless it is now more than max health in which case it will be set to max health", "Docs/Enums/EAttributeAdjustmentRule/Values/Absolute.html", [], "EAttributeAdjustmentRule");
addToContainers_enumValue("Absolute", "If max health increases by 200 then so does current health. If max health decreases by 200 then current health will not change unless it is now more than max health in which case it will be set to max health", "Docs/Enums/EAttributeAdjustmentRule/Values/Absolute.html", [], "EAttributeAdjustmentRule");
addToContainers_enum("ESelectableCreationMethod", "", "Docs/Enums/ESelectableCreationMethod/ESelectableCreationMethod.html", ["selectable", "creation", "method"], "");
addToContainers_enumValue("Uninitialized", "Currently it is unknown how it was created yet", "Docs/Enums/ESelectableCreationMethod/Values/Uninitialized.html", [], "ESelectableCreationMethod");
addToContainers_enumValue("StartingSelectable", "The selectable is a selectable that the player started the match with", "Docs/Enums/ESelectableCreationMethod/Values/StartingSelectable.html", ["starting", "selectable"], "ESelectableCreationMethod");
addToContainers_enumValue("Production", "The selectable was created using a production queue or from a worker", "Docs/Enums/ESelectableCreationMethod/Values/Production.html", [], "ESelectableCreationMethod");
addToContainers_enumValue("Spawned", "Spawned using an ability or something", "Docs/Enums/ESelectableCreationMethod/Values/Spawned.html", [], "ESelectableCreationMethod");
addToContainers_enumValue("Spawned", "Spawned using an ability or something", "Docs/Enums/ESelectableCreationMethod/Values/Spawned.html", [], "ESelectableCreationMethod");
addToContainers_enum("EInventoryItemNumChargesChangedBehavior", "", "Docs/Enums/EInventoryItemNumChargesChangedBe/EInventoryItemNumChargesChangedBe.html", ["inventory", "item", "num", "charges", "changed", "behavior"], "");
addToContainers_enumValue("AlwaysDoNothing", "Do nothing e.g. diffusal blade", "Docs/Enums/EInventoryItemNumChargesChangedBe/Values/AlwaysDoNothing.html", ["always", "do", "nothing"], "EInventoryItemNumChargesChangedBehavior");
addToContainers_enumValue("DestroyAtZeroCharges", "Destroy the item when it reaches zero charges e.g. TP scroll", "Docs/Enums/EInventoryItemNumChargesChangedBe/Values/DestroyAtZeroCharges.html", ["destroy", "at", "zero", "charges"], "EInventoryItemNumChargesChangedBehavior");
addToContainers_enumValue("CustomBehavior", "Use your own custom behavior. You will need to assing a function pointer for this usually it is done in some GI function", "Docs/Enums/EInventoryItemNumChargesChangedBe/Values/CustomBehavior.html", ["custom", "behavior"], "EInventoryItemNumChargesChangedBehavior");
addToContainers_enum("EAbilityUsageType", "", "Docs/Enums/EAbilityUsageType/EAbilityUsageType.html", ["ability", "usage", "type"], "");
addToContainers_enumValue("SelectablesActionBar", "The ability is on the action bar of a selectable", "Docs/Enums/EAbilityUsageType/Values/SelectablesActionBar.html", ["selectables", "action", "bar"], "EAbilityUsageType");
addToContainers_enumValue("SelectablesInventory", "The ability is from a selectable using an item in their inventory", "Docs/Enums/EAbilityUsageType/Values/SelectablesInventory.html", ["selectables", "inventory"], "EAbilityUsageType");
addToContainers_enumValue("SpecialBuildingTargetingAbility", "One of those abilities like engineers capturing buildings or spies revealing what the building is producing", "Docs/Enums/EAbilityUsageType/Values/SpecialBuildingTargetingAbility.html", ["special", "building", "targeting", "ability"], "EAbilityUsageType");
addToContainers_enum("ESelectionDecalSetup", "", "Docs/Enums/ESelectionDecalSetup/ESelectionDecalSetup.html", ["selection", "decal", "setup"], "");
addToContainers_enumValue("Unknown", "Not good. Means uninitialized value", "Docs/Enums/ESelectionDecalSetup/Values/Unknown.html", [], "ESelectionDecalSetup");
addToContainers_enumValue("DoesNotUse", "Does not use a selection decal", "Docs/Enums/ESelectionDecalSetup/Values/DoesNotUse.html", ["does", "not", "use"], "ESelectionDecalSetup");
addToContainers_enumValue("UsesNonDynamicMaterial", "Uses a selection decal and the material is a non-dynamic material instance", "Docs/Enums/ESelectionDecalSetup/Values/UsesNonDynamicMaterial.html", ["uses", "non", "dynamic", "material"], "ESelectionDecalSetup");
addToContainers_enumValue("UsesDynamicMaterial", "Uses a selection decal and the material is a dynamic material instance", "Docs/Enums/ESelectionDecalSetup/Values/UsesDynamicMaterial.html", ["uses", "dynamic", "material"], "ESelectionDecalSetup");
addToContainers_enum("EUIElementType", "", "Docs/Enums/EUIElementType/EUIElementType.html", ["u", "i", "element", "type"], "");
addToContainers_enumValue("SelectablesActionBar", "Something on a selectable\'s action bar", "Docs/Enums/EUIElementType/Values/SelectablesActionBar.html", ["selectables", "action", "bar"], "EUIElementType");
addToContainers_enumValue("PersistentPanel", "Something on the C&C like persistent panel", "Docs/Enums/EUIElementType/Values/PersistentPanel.html", ["persistent", "panel"], "EUIElementType");
addToContainers_enumValue("InventorySlot", "Slot in a selectables inventory", "Docs/Enums/EUIElementType/Values/InventorySlot.html", ["inventory", "slot"], "EUIElementType");
addToContainers_enumValue("ShopSlot", "Slot in a shop", "Docs/Enums/EUIElementType/Values/ShopSlot.html", ["shop", "slot"], "EUIElementType");
addToContainers_enumValue("ProductionQueueSlot", "A slot in a production queue", "Docs/Enums/EUIElementType/Values/ProductionQueueSlot.html", ["production", "queue", "slot"], "EUIElementType");
addToContainers_enumValue("GlobalSkillsPanelButton", "Button on the commander\'s global skills panel", "Docs/Enums/EUIElementType/Values/GlobalSkillsPanelButton.html", ["global", "skills", "panel", "button"], "EUIElementType");
addToContainers_enumValue("CommanderSkillTreeNode", "A node on the commander\'s skill tree", "Docs/Enums/EUIElementType/Values/CommanderSkillTreeNode.html", ["commander", "skill", "tree", "node"], "EUIElementType");
addToContainers_enumValue("NoTooltipRequired", "A button type that does not show a tooltip when hovered", "Docs/Enums/EUIElementType/Values/NoTooltipRequired.html", ["no", "tooltip", "required"], "EUIElementType");
addToContainers_enumValue("None", "", "Docs/Enums/EUIElementType/Values/None.html", [], "EUIElementType");
addToContainers_enum("EUnitInitialSpawnBehavior", "", "Docs/Enums/EUnitInitialSpawnBehavior/EUnitInitialSpawnBehavior.html", ["unit", "initial", "spawn", "behavior"], "");
addToContainers_enumValue("MoveToRallyPoint", "Move towards the building\'s rally point", "Docs/Enums/EUnitInitialSpawnBehavior/Values/MoveToRallyPoint.html", ["move", "to", "rally", "point"], "EUnitInitialSpawnBehavior");
addToContainers_enumValue("CollectFromNearestResourceSpot", "If the unit can collect resources then it will collect from the nearest resource spot that it can. If there are no resource spots that it can collect from then it will move to the building\'s rally point. This is ambiguous. Is it the closest discovered resource spot or can we see through fog with this?", "Docs/Enums/EUnitInitialSpawnBehavior/Values/CollectFromNearestResourceSpot.html", ["collect", "from", "nearest", "resource", "spot"], "EUnitInitialSpawnBehavior");
addToContainers_enum("ESoundFogRules", "", "Docs/Enums/ESoundFogRules/ESoundFogRules.html", ["sound", "fog", "rules"], "");
addToContainers_enumValue("Ignore", "Ignore fog of war completely. If player positions camera over sounds location then they will be able to hear it, whether the location is revealed or not. Exactly the same as if you were to take a UAudioComponent and play the sound on that. My note: this doesn\'t fully work. If an actor has not replicated yet then the sound is never known which is not the correct behavior. Don\'t think many people will use this though.", "Docs/Enums/ESoundFogRules/Values/Ignore.html", [], "ESoundFogRules");
addToContainers_enumValue("DecideOnSpawn", "If spawn location is inside fog of war then sound will never be able to be heard. If spawn location is outside fog of war then sound will always be able to be heard. Worse performance than Ignore. A good use for this would be if the sound is quite short (say less than 1 second).", "Docs/Enums/ESoundFogRules/Values/DecideOnSpawn.html", ["decide", "on", "spawn"], "ESoundFogRules");
addToContainers_enumValue("InstigatingTeamOnly", "Only the team making the sound can hear it", "Docs/Enums/ESoundFogRules/Values/InstigatingTeamOnly.html", ["instigating", "team", "only"], "ESoundFogRules");
addToContainers_enumValue("AlwaysKnownOnceHeard", "Once the sound is heard once it can be heard forever. Worse performance than DecideOnSpawn", "Docs/Enums/ESoundFogRules/Values/AlwaysKnownOnceHeard.html", ["always", "known", "once", "heard"], "ESoundFogRules");
addToContainers_enumValue("DynamicExceptForInstigatorsTeam", "Sound will become unheard if it is inside fog of war, except for the team that instigated the sound. For them it will always be heard even if the sound\'s location becomes inside fog of war. Worse performance than DecideOnSpawn.", "Docs/Enums/ESoundFogRules/Values/DynamicExceptForInstigatorsTeam.html", ["dynamic", "except", "for", "instigators", "team"], "ESoundFogRules");
addToContainers_enumValue("Dynamic", "Sound will change from being heard/unheard based on its current locations fog status. This has worse performance than all above but it\'s really no biggie.", "Docs/Enums/ESoundFogRules/Values/Dynamic.html", [], "ESoundFogRules");
addToContainers_enumValue("Dynamic", "Sound will change from being heard/unheard based on its current locations fog status. This has worse performance than all above but it\'s really no biggie.", "Docs/Enums/ESoundFogRules/Values/Dynamic.html", [], "ESoundFogRules");
addToContainers_enum("EWorldWidgetViewMode", "", "Docs/Enums/EWorldWidgetViewMode/EWorldWidgetViewMode.html", ["world", "widget", "view", "mode"], "");
addToContainers_enumValue("NoChange", "Do nothing", "Docs/Enums/EWorldWidgetViewMode/Values/NoChange.html", ["no", "change"], "EWorldWidgetViewMode");
addToContainers_enumValue("NoChange", "Do nothing", "Docs/Enums/EWorldWidgetViewMode/Values/NoChange.html", ["no", "change"], "EWorldWidgetViewMode");
addToContainers_enum("EAbilityTargetingMethod", "", "Docs/Enums/EAbilityTargetingMethod/EAbilityTargetingMethod.html", ["ability", "targeting", "method"], "");
addToContainers_enumValue("DoesNotRequireAnyTarget", "Does not require any target", "Docs/Enums/EAbilityTargetingMethod/Values/DoesNotRequireAnyTarget.html", ["does", "not", "require", "any", "target"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresSelectable", "Requires another selectable as a target e.g. SCII ghost snipe", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresSelectable.html", ["requires", "selectable"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresWorldLocation", "Requires a location in the world as a target e.g. artillery strike", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresWorldLocation.html", ["requires", "world", "location"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresWorldLocationOrSelectable", "Can target either another selectable or a world location e.g. attack move", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresWorldLocationOrSelectable.html", ["requires", "world", "location", "or", "selectable"], "EAbilityTargetingMethod");
addToContainers_enumValue("RequiresPlayer", "Targets a player", "Docs/Enums/EAbilityTargetingMethod/Values/RequiresPlayer.html", ["requires", "player"], "EAbilityTargetingMethod");
addToContainers_enum("EGarrisonUnloadAllMethod", "", "Docs/Enums/EGarrisonUnloadAllMethod/EGarrisonUnloadAllMethod.html", ["garrison", "unload", "all", "method"], "");
addToContainers_enumValue("AllAtOnce_Grid", "Everyone leaves all at once. I think SCII terran bunkers do it this way. The units are tried to be positioned in a grid on the side of the building", "Docs/Enums/EGarrisonUnloadAllMethod/Values/AllAtOnce_Grid.html", ["all", "at", "once_", "grid"], "EGarrisonUnloadAllMethod");
addToContainers_enumValue("AllAtOnce_Grid", "Everyone leaves all at once. I think SCII terran bunkers do it this way. The units are tried to be positioned in a grid on the side of the building", "Docs/Enums/EGarrisonUnloadAllMethod/Values/AllAtOnce_Grid.html", ["all", "at", "once_", "grid"], "EGarrisonUnloadAllMethod");
addToContainers_enum("EDevelopmentAction", "", "Docs/Enums/EDevelopmentAction/EDevelopmentAction.html", ["development", "action"], "");
addToContainers_enumValue("None", "Do no action", "Docs/Enums/EDevelopmentAction/Values/None.html", [], "EDevelopmentAction");
addToContainers_enumValue("ClosePopupMenu", "Close the secondary popup menu widget if it is showing", "Docs/Enums/EDevelopmentAction/Values/ClosePopupMenu.html", ["close", "popup", "menu"], "EDevelopmentAction");
addToContainers_enumValue("IgnoreAllLMBRelease", "", "Docs/Enums/EDevelopmentAction/Values/IgnoreAllLMBRelease.html", ["ignore", "all", "l", "m", "b", "release"], "EDevelopmentAction");
addToContainers_enumValue("IgnoreNextLMBRelease", "", "Docs/Enums/EDevelopmentAction/Values/IgnoreNextLMBRelease.html", ["ignore", "next", "l", "m", "b", "release"], "EDevelopmentAction");
addToContainers_enumValue("DealMassiveDamageToSelectable", "Give a selectable zero health by dealing a massive amount of damage to it", "Docs/Enums/EDevelopmentAction/Values/DealMassiveDamageToSelectable.html", ["deal", "massive", "damage", "to", "selectable"], "EDevelopmentAction");
addToContainers_enumValue("CancelDealMassiveDamage", "", "Docs/Enums/EDevelopmentAction/Values/CancelDealMassiveDamage.html", ["cancel", "deal", "massive", "damage"], "EDevelopmentAction");
addToContainers_enumValue("DamageSelectable", "Deal a small amount of damage to a selectable", "Docs/Enums/EDevelopmentAction/Values/DamageSelectable.html", ["damage", "selectable"], "EDevelopmentAction");
addToContainers_enumValue("CancelDamageSelectable", "", "Docs/Enums/EDevelopmentAction/Values/CancelDamageSelectable.html", ["cancel", "damage", "selectable"], "EDevelopmentAction");
addToContainers_enumValue("AwardExperience", "Award experience to a selectable", "Docs/Enums/EDevelopmentAction/Values/AwardExperience.html", ["award", "experience"], "EDevelopmentAction");
addToContainers_enumValue("CancelAwardExperience", "", "Docs/Enums/EDevelopmentAction/Values/CancelAwardExperience.html", ["cancel", "award", "experience"], "EDevelopmentAction");
addToContainers_enumValue("AwardLotsOfExperience", "Award enough experience to a selectable such that they level up once or twice or something", "Docs/Enums/EDevelopmentAction/Values/AwardLotsOfExperience.html", ["award", "lots", "of", "experience"], "EDevelopmentAction");
addToContainers_enumValue("CancelAwardLotsOfExperience", "", "Docs/Enums/EDevelopmentAction/Values/CancelAwardLotsOfExperience.html", ["cancel", "award", "lots", "of", "experience"], "EDevelopmentAction");
addToContainers_enumValue("AwardExperienceToLocalPlayer", "", "Docs/Enums/EDevelopmentAction/Values/AwardExperienceToLocalPlayer.html", ["award", "experience", "to", "local", "player"], "EDevelopmentAction");
addToContainers_enumValue("GiveRandomInventoryItem", "Try give a random inventory item to a selectable", "Docs/Enums/EDevelopmentAction/Values/GiveRandomInventoryItem.html", ["give", "random", "inventory", "item"], "EDevelopmentAction");
addToContainers_enumValue("CancelGiveRandomInventoryItem", "", "Docs/Enums/EDevelopmentAction/Values/CancelGiveRandomInventoryItem.html", ["cancel", "give", "random", "inventory", "item"], "EDevelopmentAction");
addToContainers_enumValue("GiveSpecificInventoryItem_SelectionPhase", "", "Docs/Enums/EDevelopmentAction/Values/GiveSpecificInventoryItem_Selecti.html", ["give", "specific", "inventory", "item_", "selection", "phase"], "EDevelopmentAction");
addToContainers_enumValue("GiveSpecificInventoryItem_SelectTarget", "", "Docs/Enums/EDevelopmentAction/Values/GiveSpecificInventoryItem_SelectT.html", ["give", "specific", "inventory", "item_", "select", "target"], "EDevelopmentAction");
addToContainers_enumValue("CancelGiveSpecificInventoryItem_SelectTarget", "", "Docs/Enums/EDevelopmentAction/Values/CancelGiveSpecificInventoryItem_S.html", ["cancel", "give", "specific", "inventory", "item_", "select", "target"], "EDevelopmentAction");
addToContainers_enumValue("GetUnitAIInfo", "", "Docs/Enums/EDevelopmentAction/Values/GetUnitAIInfo.html", ["get", "unit", "a", "i", "info"], "EDevelopmentAction");
addToContainers_enumValue("GetUnitAIInfo", "", "Docs/Enums/EDevelopmentAction/Values/GetUnitAIInfo.html", ["get", "unit", "a", "i", "info"], "EDevelopmentAction");
addToContainers_enum("EEditorPlaySkippingOption", "", "Docs/Enums/EEditorPlaySkippingOption/EEditorPlaySkippingOption.html", ["editor", "play", "skipping", "option"], "");
addToContainers_enumValue("SkipNothing", "Skip nothing so opening movie will play then main menu will be shown", "Docs/Enums/EEditorPlaySkippingOption/Values/SkipNothing.html", ["skip", "nothing"], "EEditorPlaySkippingOption");
addToContainers_enumValue("SkipOpeningCutsceneOnly", "Skip just the opening movie so main menu will be shown", "Docs/Enums/EEditorPlaySkippingOption/Values/SkipOpeningCutsceneOnly.html", ["skip", "opening", "cutscene", "only"], "EEditorPlaySkippingOption");
addToContainers_enumValue("SkipMainMenu", "Skip opening cutscene and main menu so you will play a match on the map open in editor straight away", "Docs/Enums/EEditorPlaySkippingOption/Values/SkipMainMenu.html", ["skip", "main", "menu"], "EEditorPlaySkippingOption");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EEditorPlaySkippingOption/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EEditorPlaySkippingOption");
addToContainers_enum("EInvalidOwnerIndexAction", "", "Docs/Enums/EInvalidOwnerIndexAction/EInvalidOwnerIndexAction.html", ["invalid", "owner", "index", "action"], "");
addToContainers_enumValue("DoNotSpawn", "Selectable will not be respawned and will be excluded from PIE", "Docs/Enums/EInvalidOwnerIndexAction/Values/DoNotSpawn.html", ["do", "not", "spawn"], "EInvalidOwnerIndexAction");
addToContainers_enumValue("AssignToServerPlayer", "Selectable will be respawned belonging to the server player", "Docs/Enums/EInvalidOwnerIndexAction/Values/AssignToServerPlayer.html", ["assign", "to", "server", "player"], "EInvalidOwnerIndexAction");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EInvalidOwnerIndexAction/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EInvalidOwnerIndexAction");
addToContainers_enum("EImcomingDamageReductionRule", "", "Docs/Enums/EImcomingDamageReductionRule/EImcomingDamageReductionRule.html", ["imcoming", "damage", "reduction", "rule"], "");
addToContainers_enumValue("MultiplyThenAdd", "e.g. Damage multiplier = 0.9, damage reduction amount = 10 Incoming damage = 100. Damage = 100 * 0.9 - 10 = 80", "Docs/Enums/EImcomingDamageReductionRule/Values/MultiplyThenAdd.html", ["multiply", "then", "add"], "EImcomingDamageReductionRule");
addToContainers_enumValue("AddThenMultiply", "e.g. Damage multiplier = 0.9, damage reduction amount = 10 Incoming damage = 100. Damage = 100 - 10 * 0.9 = 81", "Docs/Enums/EImcomingDamageReductionRule/Values/AddThenMultiply.html", ["add", "then", "multiply"], "EImcomingDamageReductionRule");
addToContainers_enum("EInputKeyDisplayMethod", "", "Docs/Enums/EInputKeyDisplayMethod/EInputKeyDisplayMethod.html", ["input", "key", "display", "method"], "");
addToContainers_enumValue("ImageOnly", "You have an image that sufficiently conveys which key it represents", "Docs/Enums/EInputKeyDisplayMethod/Values/ImageOnly.html", ["image", "only"], "EInputKeyDisplayMethod");
addToContainers_enumValue("ImageAndAddTextAtRuntime", "You have a image but want to add some text to it e.g. you have a sqaure key image that is blank and want to write \"Enter\" overtop of it to convey it is the enter key", "Docs/Enums/EInputKeyDisplayMethod/Values/ImageAndAddTextAtRuntime.html", ["image", "and", "add", "text", "at", "runtime"], "EInputKeyDisplayMethod");
addToContainers_enum("EKeyModifiers", "", "Docs/Enums/EKeyModifiers/EKeyModifiers.html", ["key", "modifiers"], "");
addToContainers_enumValue("0", "", "Docs/Enums/EKeyModifiers/Values/0.html", [], "EKeyModifiers");
addToContainers_enumValue("1", "", "Docs/Enums/EKeyModifiers/Values/1.html", [], "EKeyModifiers");
addToContainers_enumValue("2", "", "Docs/Enums/EKeyModifiers/Values/2.html", [], "EKeyModifiers");
addToContainers_enumValue("4", "", "Docs/Enums/EKeyModifiers/Values/4.html", [], "EKeyModifiers");
addToContainers_enumValue("3", "", "Docs/Enums/EKeyModifiers/Values/3.html", [], "EKeyModifiers");
addToContainers_enumValue("5", "", "Docs/Enums/EKeyModifiers/Values/5.html", [], "EKeyModifiers");
addToContainers_enumValue("6", "", "Docs/Enums/EKeyModifiers/Values/6.html", [], "EKeyModifiers");
addToContainers_enumValue("7", "", "Docs/Enums/EKeyModifiers/Values/7.html", [], "EKeyModifiers");
addToContainers_enum("ECommanderSkillTreeAnimationPlayRule", "", "Docs/Enums/ECommanderSkillTreeAnimationPlayR/ECommanderSkillTreeAnimationPlayR.html", ["commander", "skill", "tree", "animation", "play", "rule"], "");
addToContainers_enumValue("Never", "Never play the anim. An alternative is to just never name the anim correctly in editor", "Docs/Enums/ECommanderSkillTreeAnimationPlayR/Values/Never.html", [], "ECommanderSkillTreeAnimationPlayRule");
addToContainers_enumValue("CanAffordAbilityAtStartOfMatchOrLevelUp", "The anim will play: - at the start of the match if the player can afford at least one ability on the skill tree - if you level up and can afford at least one ability on the skill tree", "Docs/Enums/ECommanderSkillTreeAnimationPlayR/Values/CanAffordAbilityAtStartOfMatchOrL.html", ["can", "afford", "ability", "at", "start", "of", "match", "or", "level", "up"], "ECommanderSkillTreeAnimationPlayRule");
addToContainers_enumValue("CanAffordAbilityAtStartOfMatchOrLevelUp", "The anim will play: - at the start of the match if the player can afford at least one ability on the skill tree - if you level up and can afford at least one ability on the skill tree", "Docs/Enums/ECommanderSkillTreeAnimationPlayR/Values/CanAffordAbilityAtStartOfMatchOrL.html", ["can", "afford", "ability", "at", "start", "of", "match", "or", "level", "up"], "ECommanderSkillTreeAnimationPlayRule");
addToContainers_enum("EAssignedAbilityType", "", "Docs/Enums/EAssignedAbilityType/EAssignedAbilityType.html", ["assigned", "ability", "type"], "");
addToContainers_enumValue("CommanderSkill", "What kind of ability is assigned to this button", "Docs/Enums/EAssignedAbilityType/Values/CommanderSkill.html", ["commander", "skill"], "EAssignedAbilityType");
addToContainers_enumValue("CommanderSkill", "What kind of ability is assigned to this button", "Docs/Enums/EAssignedAbilityType/Values/CommanderSkill.html", ["commander", "skill"], "EAssignedAbilityType");
addToContainers_enum("", "", "Docs/Enums/_11/.html", [], "");
addToContainers_enumValue("ExitToMainMenu", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/_11/Values/ExitToMainMenu.html", ["exit", "to", "main", "menu"], "");
addToContainers_enumValue("ExitToOperatingSystem", "", "Docs/Enums/_11/Values/ExitToOperatingSystem.html", ["exit", "to", "operating", "system"], "");
addToContainers_enum("ECannotStartMatchReason", "", "Docs/Enums/ECannotStartMatchReason/ECannotStartMatchReason.html", ["cannot", "start", "match", "reason"], "");
addToContainers_enumValue("NotEnoughPlayers", "Need more players in lobby", "Docs/Enums/ECannotStartMatchReason/Values/NotEnoughPlayers.html", ["not", "enough", "players"], "ECannotStartMatchReason");
addToContainers_enumValue("EveryonesOnOneTeam", "Need 2+ different teams", "Docs/Enums/ECannotStartMatchReason/Values/EveryonesOnOneTeam.html", ["everyones", "on", "one", "team"], "ECannotStartMatchReason");
addToContainers_enumValue("SlotsNotLocked", "Lobby slots are not locked", "Docs/Enums/ECannotStartMatchReason/Values/SlotsNotLocked.html", ["slots", "not", "locked"], "ECannotStartMatchReason");
addToContainers_enumValue("NoReason", "No reason, can actually start match", "Docs/Enums/ECannotStartMatchReason/Values/NoReason.html", ["no", "reason"], "ECannotStartMatchReason");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/ECannotStartMatchReason/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "ECannotStartMatchReason");
addToContainers_enum("EPlayerStartDisplay", "", "Docs/Enums/EPlayerStartDisplay/EPlayerStartDisplay.html", ["player", "start", "display"], "");
addToContainers_enumValue("FString", "", "Docs/Enums/EPlayerStartDisplay/Values/FString.html", [], "EPlayerStartDisplay");
addToContainers_enumValue("const;", "", "Docs/Enums/EPlayerStartDisplay/Values/const;.html", [], "EPlayerStartDisplay");
addToContainers_enum("EWidgetAnimStatus", "", "Docs/Enums/EWidgetAnimStatus/EWidgetAnimStatus.html", ["widget", "anim", "status"], "");
addToContainers_enumValue("NoAnims", "Fill out your copyright notice in the Description page of Project Settings.", "Docs/Enums/EWidgetAnimStatus/Values/NoAnims.html", ["no", "anims"], "EWidgetAnimStatus");
addToContainers_enumValue("ShowAnimOnly", "", "Docs/Enums/EWidgetAnimStatus/Values/ShowAnimOnly.html", ["show", "anim", "only"], "EWidgetAnimStatus");
addToContainers_enumValue("HideAnimOnly", "", "Docs/Enums/EWidgetAnimStatus/Values/HideAnimOnly.html", ["hide", "anim", "only"], "EWidgetAnimStatus");
addToContainers_enumValue("ShowAndHideAnims", "", "Docs/Enums/EWidgetAnimStatus/Values/ShowAndHideAnims.html", ["show", "and", "hide", "anims"], "EWidgetAnimStatus");
addToContainers_enumValue("SingleAnim", "", "Docs/Enums/EWidgetAnimStatus/Values/SingleAnim.html", ["single", "anim"], "EWidgetAnimStatus");
addToContainers_enum("", "", "Docs/Enums/_12/.html", [], "");
addToContainers_enumValue("EscapeRequest", "Player pressed the cancel key which is ESC by default", "Docs/Enums/_12/Values/EscapeRequest.html", ["escape", "request"], "");
addToContainers_enumValue("ButtonWidget", "Player clicked on a UI button", "Docs/Enums/_12/Values/ButtonWidget.html", ["button", "widget"], "");
addToContainers_enum("ECloseRequestBehavior", "", "Docs/Enums/ECloseRequestBehavior/ECloseRequestBehavior.html", ["close", "request", "behavior"], "");
addToContainers_enumValue("DoNotSave", "Load from disk and apply those, so any unsaved changes are not saved", "Docs/Enums/ECloseRequestBehavior/Values/DoNotSave.html", ["do", "not", "save"], "ECloseRequestBehavior");
addToContainers_enumValue("Save", "Apply unsaved changes and save them to disk", "Docs/Enums/ECloseRequestBehavior/Values/Save.html", [], "ECloseRequestBehavior");
addToContainers_enumValue("Ask", "Ask the user what to do", "Docs/Enums/ECloseRequestBehavior/Values/Ask.html", [], "ECloseRequestBehavior");
addToContainers_enumValue("Ask", "Ask the user what to do", "Docs/Enums/ECloseRequestBehavior/Values/Ask.html", [], "ECloseRequestBehavior");
addToContainers_enum("ESettingsSubmenuType", "", "Docs/Enums/ESettingsSubmenuType/ESettingsSubmenuType.html", ["settings", "submenu", "type"], "");
addToContainers_enumValue("VideoSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/VideoSettings.html", ["video", "settings"], "ESettingsSubmenuType");
addToContainers_enumValue("AudioSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/AudioSettings.html", ["audio", "settings"], "ESettingsSubmenuType");
addToContainers_enumValue("ControlSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/ControlSettings.html", ["control", "settings"], "ESettingsSubmenuType");
addToContainers_enumValue("KeyBindings", "", "Docs/Enums/ESettingsSubmenuType/Values/KeyBindings.html", ["key", "bindings"], "ESettingsSubmenuType");
addToContainers_enumValue("GameSettings", "", "Docs/Enums/ESettingsSubmenuType/Values/GameSettings.html", ["game", "settings"], "ESettingsSubmenuType");
addToContainers_enum("EVideoSettingType", "", "Docs/Enums/EVideoSettingType/EVideoSettingType.html", ["video", "setting", "type"], "");
addToContainers_enumValue("None", "Not a value that should ever be used", "Docs/Enums/EVideoSettingType/Values/None.html", [], "EVideoSettingType");
addToContainers_enumValue("WindowMode", "", "Docs/Enums/EVideoSettingType/Values/WindowMode.html", ["window", "mode"], "EVideoSettingType");
addToContainers_enumValue("Resolution", "", "Docs/Enums/EVideoSettingType/Values/Resolution.html", [], "EVideoSettingType");
addToContainers_enumValue("FrameRateLimit", "", "Docs/Enums/EVideoSettingType/Values/FrameRateLimit.html", ["frame", "rate", "limit"], "EVideoSettingType");
addToContainers_enumValue("VSync", "", "Docs/Enums/EVideoSettingType/Values/VSync.html", [], "EVideoSettingType");
addToContainers_enumValue("OverallQuality", "", "Docs/Enums/EVideoSettingType/Values/OverallQuality.html", ["overall", "quality"], "EVideoSettingType");
addToContainers_enumValue("ShadowQuality", "", "Docs/Enums/EVideoSettingType/Values/ShadowQuality.html", ["shadow", "quality"], "EVideoSettingType");
addToContainers_enumValue("TextureQuality", "", "Docs/Enums/EVideoSettingType/Values/TextureQuality.html", ["texture", "quality"], "EVideoSettingType");
addToContainers_enumValue("AntiAliasingQuality", "", "Docs/Enums/EVideoSettingType/Values/AntiAliasingQuality.html", ["anti", "aliasing", "quality"], "EVideoSettingType");
addToContainers_enumValue("ViewDistanceQuality", "", "Docs/Enums/EVideoSettingType/Values/ViewDistanceQuality.html", ["view", "distance", "quality"], "EVideoSettingType");
addToContainers_enumValue("VisualEffectQuality", "", "Docs/Enums/EVideoSettingType/Values/VisualEffectQuality.html", ["visual", "effect", "quality"], "EVideoSettingType");
addToContainers_enumValue("PostProcessingQuality", "", "Docs/Enums/EVideoSettingType/Values/PostProcessingQuality.html", ["post", "processing", "quality"], "EVideoSettingType");
addToContainers_enumValue("FoliageQuality", "", "Docs/Enums/EVideoSettingType/Values/FoliageQuality.html", ["foliage", "quality"], "EVideoSettingType");
addToContainers_enumValue("z_ALWAYS_LAST_IN_ENUM", "", "Docs/Enums/EVideoSettingType/Values/z_ALWAYS_LAST_IN_ENUM.html", ["a", "l", "w", "a", "y", "s_", "l", "a", "s", "t_", "i", "n_", "e", "n", "u", "m"], "EVideoSettingType");

//------------------------------------------------
// ------- Trie Implementation -------
//------------------------------------------------
//	Trie implementation for the search box suggestions

/**
 *	A single node in a trie
 */
class TrieNode
{
	constructor()
	{
		// The letter attached to this node. Only the root node should keep this empty
		this.letter = "";
		// Whether this node is the last letter of a word
		this.bIsWord = false;
		// if bIsWord == true then this equals the word
		this.word = "";
		// Child nodes
		this.children = [];
	}
};

TrieNode.prototype.recursiveFindChildThenAdd = function(str, index)
{
	// Check if at end of string
	if (index == str.length)
	{
		this.bIsWord = true;
		this.word = str;
		return;
	}

	for (var i = 0; i < this.children.length; ++i)
	{
		if (this.children[i].letter == str.charAt(index))
		{
			if (index >= str.length)
			{
				console.error("recursiveFindChildThenAdd(): index >= str.length");
			}

			index++;
			this.children[i].recursiveFindChildThenAdd(str, index);
			return;
		}
	}

	/* If here then none of the children had the letter. Create a new node with the letter */
	var newNode = new TrieNode();
	newNode.letter = str.charAt(index);
	this.children.push(newNode);

	index++;
	newNode.recursiveFindChildThenAdd(str, index);
};

/** Add a word to the trie. This is intended to be called on the root node */
TrieNode.prototype.insert = function(str)
{
	this.recursiveFindChildThenAdd(str, 0);
};

/**
 * Get words in the trie that prefix a string
 *
 * @param str - string to get words for
 * @param index - current position in str
 * @param words - array of words that str is a prefix for
 */
TrieNode.prototype.recursiveGetPrefixedWords = function(str, index, words)
{
	index++;
	/* Check if this node is a word and it is the same or greater length than str. If yes then add it */
	if (this.bIsWord == true && str.length <= index)
	{
		words.push(this.word);
	}

	if (str.length <= index)
	{
		for (var i = 0; i < this.children.length; ++i)
		{
			this.children[i].recursiveGetPrefixedWords(str, index, words);
		}
	}
	else
	{
		for (var i = 0; i < this.children.length; ++i)
		{
			if (this.children[i].letter.toLowerCase() == str.charAt(index).toLowerCase())
			{
				this.children[i].recursiveGetPrefixedWords(str, index, words);
				/* Have commented this return. Reason is the search is case insensitive so if user types "a"
				then the entry "apple" and "Apple" are both possibilities so cannot return since one might
				get skipped */
				//return;
			}
		}
	}
};


/** Class declaration: a trie. Contains a hashset and a root node */
class Trie
{
	constructor()
	{
		// Should I be using new here? Or is there a better way?

		// A container that holds all the words in the trie
		this.wordsSet = new Set();
		// The root node of the trie
		this.RootNode = new TrieNode();
	}
};


/**
 * Check whether a string has already been added to the trie
 *
 *	@return - true if the string has already been added to the trie.
 */
Trie.prototype.contains = function(str)
{
	return this.wordsSet.has(str);
};

/**
 * Try add a string to the trie
 *
 * @param str - the string to add to the trie
 */
Trie.prototype.insert = function(str)
{
	if (str.length == 0)
	{
		// Avoid adding empty string
		return;
	}

	if (this.contains(str))
	{
		// Avoid adding string if it's already in the trie
		return;
	}

	this.RootNode.insert(str);
	this.wordsSet.add(str);
};

/**
 * Return all the words in the trie that have str as a prefix
 *
 * @param str - prefix string
 * @return - array of words that have str as a prefix
 */
Trie.prototype.getPrefixedWords = function(str)
{
	var words = [];

	if (str.length == 0)
	{
		return words;
	}

	this.RootNode.recursiveGetPrefixedWords(str, -1, words);

	return words;
};

// ------------- End trie implementaion ---------------


// The trie for search suggestions for the search box on the documentation homepage
var searchTrie = new Trie();

searchTrie.insert("UFogObeyingAudioComponent");
searchTrie.insert("UFogObeyingAudioComponent");
searchTrie.insert("Activate");
searchTrie.insert("PseudoMute");
searchTrie.insert("UnPseudoMute");
searchTrie.insert("IsMuted");
searchTrie.insert("PlaySound");
searchTrie.insert("OnExitFogOfWar_Dynamic");
searchTrie.insert("OnEnterFogOfWar_Dynamic");
searchTrie.insert("OnExitFogOfWar_DynamicExceptForInstigatorsTeam");
searchTrie.insert("OnEnterFogOfWar_DynamicExceptForInstigatorsTeam");
searchTrie.insert("OnExitFogOfWar_AlwaysKnownOnceHeard");
searchTrie.insert("OnAudioFinishedFunc");
searchTrie.insert("SavedVolumeMultiplier");
searchTrie.insert("bMuted");
searchTrie.insert("bInContainer");
searchTrie.insert("FogObeyingRule");
searchTrie.insert("URTSUnrealEdEngine");
searchTrie.insert("Init");
searchTrie.insert("CreateEditorPlaySettingsUtilityWidget");
searchTrie.insert("FAtLeastOneInt32");
searchTrie.insert("FAtLeastOneInt32");
searchTrie.insert("GetInteger");
searchTrie.insert("");
searchTrie.insert("FUnitTypeArray");
searchTrie.insert("Emplace");
searchTrie.insert("GetArray");
searchTrie.insert("Array");
searchTrie.insert("FBuildingTypeArray");
searchTrie.insert("Emplace");
searchTrie.insert("GetArray");
searchTrie.insert("Array");
searchTrie.insert("FButtonArray");
searchTrie.insert("Sort");
searchTrie.insert("GetButtons");
searchTrie.insert("AddButton");
searchTrie.insert("Buttons");
searchTrie.insert("FRankInfo");
searchTrie.insert("FRankInfo");
searchTrie.insert("GetBonus");
searchTrie.insert("GetParticles");
searchTrie.insert("GetSound");
searchTrie.insert("GetIcon");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AFactionInfo");
searchTrie.insert("AFactionInfo");
searchTrie.insert("BeginPlay");
searchTrie.insert("Initialize");
searchTrie.insert("InitHUDPersistentTabButtons");
searchTrie.insert("InitBuildingInfo");
searchTrie.insert("InitUnitInfo");
searchTrie.insert("CheckGhost");
searchTrie.insert("CreatePrerequisitesText");
searchTrie.insert("InitUpgradeInfo");
searchTrie.insert("EmptyBuildingInfo");
searchTrie.insert("EmptyUnitInfo");
searchTrie.insert("SortHUDPersistentTabButtons");
searchTrie.insert("InitButtonToPersistentTabMappings");
searchTrie.insert("InitLevelUpBonuses");
searchTrie.insert("InitMouseCursors");
searchTrie.insert("InitSelectionDecals");
searchTrie.insert("CreateTechTree");
searchTrie.insert("InitHUDWarningInfo");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("SetInitialFaction");
searchTrie.insert("GetName");
searchTrie.insert("GetFactionIcon");
searchTrie.insert("GetBuildingInfo");
searchTrie.insert("GetBuildingInfoSlow");
searchTrie.insert("GetUnitInfo");
searchTrie.insert("GetUpgradeInfoChecked");
searchTrie.insert("GetUpgradeInfoMutable");
searchTrie.insert("GetUpgradeInfoNotChecked");
searchTrie.insert("IsUpgradeResearchableThroughBuilding");
searchTrie.insert("HasSelectable");
searchTrie.insert("GetProductionTime");
searchTrie.insert("GetStartingGrid");
searchTrie.insert("GetFaction");
searchTrie.insert("GetUpgradesMap");
searchTrie.insert("GetLevelUpInfo");
searchTrie.insert("GetLevelUpBonus");
searchTrie.insert("GetCommanderLevelUpInfo");
searchTrie.insert("GetNumInitialCommanderSkillPoints");
searchTrie.insert("GetMouseCursorInfo");
searchTrie.insert("GetEdgeScrollingCursorInfo_Top");
searchTrie.insert("GetEdgeScrollingCursorInfo_TopRight");
searchTrie.insert("GetEdgeScrollingCursorInfo_Right");
searchTrie.insert("GetEdgeScrollingCursorInfo_BottomRight");
searchTrie.insert("GetEdgeScrollingCursorInfo_Bottom");
searchTrie.insert("GetEdgeScrollingCursorInfo_BottomLeft");
searchTrie.insert("GetEdgeScrollingCursorInfo_Left");
searchTrie.insert("GetEdgeScrollingCursorInfo_TopLeft");
searchTrie.insert("GetEdgeScrollingCursorInfo");
searchTrie.insert("GetDefaultMouseCursorInfo_CanAttackHoveredHostileUnit");
searchTrie.insert("GetDefaultMouseCursorInfo_CannotAttackHoveredHostileUnit");
searchTrie.insert("GetDefaultMouseCursorInfo_CanAttackHoveredFriendlyUnit");
searchTrie.insert("GetDefaultMouseCursorInfo_CannotAttackHoveredFriendlyUnit");
searchTrie.insert("GetDefaultMouseCursorInfo_CanAttackHoveredHostileBuilding");
searchTrie.insert("GetDefaultMouseCursorInfo_CannotAttackHoveredHostileBuilding");
searchTrie.insert("GetDefaultMouseCursorInfo_CanAttackHoveredFriendlyBuilding");
searchTrie.insert("GetDefaultMouseCursorInfo_CannotAttackHoveredFriendlyBuilding");
searchTrie.insert("GetDefaultMouseCursorInfo_CanPickUpHoveredInventoryItem");
searchTrie.insert("GetDefaultMouseCursorInfo_CannotPickUpHoveredInventoryItem");
searchTrie.insert("GetDefaultMouseCursorInfo_CanGatherFromHoveredResourceSpot");
searchTrie.insert("GetDefaultMouseCursorInfo_CannotGatherFromHoveredResourceSpot");
searchTrie.insert("GetSelectablePersistentWorldWidget");
searchTrie.insert("GetSelectableSelectionWorldWidget");
searchTrie.insert("GetResourceSpotPersistentWorldWidget");
searchTrie.insert("GetResourceSpotSelectionWorldWidget");
searchTrie.insert("GetSelectionDecalInfo");
searchTrie.insert("GetSelectionParticles");
searchTrie.insert("GetRightClickParticles");
searchTrie.insert("GetRightClickCommandStaticParticles");
searchTrie.insert("GetRightClickCommandDecal");
searchTrie.insert("GetMatchWidgetBP");
searchTrie.insert("GetHUDErrorMessage");
searchTrie.insert("GetHUDErrorMessage");
searchTrie.insert("GetHUDMissingResourceMessage");
searchTrie.insert("GetHUDMissingHousingResourceMessage");
searchTrie.insert("GetWarningSound");
searchTrie.insert("GetWarningSound");
searchTrie.insert("GetWarningSound");
searchTrie.insert("GetWarningSound");
searchTrie.insert("GetHUDPersistentTabButton");
searchTrie.insert("GetHUDPersistentTabButtons");
searchTrie.insert("GetHUDPersistentTab");
searchTrie.insert("GetHUDPersistentTab");
searchTrie.insert("GetConstantHousingResourceAmountProvided");
searchTrie.insert("GetHousingResourceLimits");
searchTrie.insert("IsQuantityLimited");
searchTrie.insert("IsQuantityLimited");
searchTrie.insert("GetQuantityLimit");
searchTrie.insert("GetQuantityLimit");
searchTrie.insert("GetBuildInfo");
searchTrie.insert("GetDisplayInfo");
searchTrie.insert("GetUnitQuantityLimits");
searchTrie.insert("GetDefaultBuildingBuildMethod");
searchTrie.insert("GetBuildingProximityRange");
searchTrie.insert("CanBuildOffAllies");
searchTrie.insert("HasOverriddenResourceImage");
searchTrie.insert("GetResourceImage");
searchTrie.insert("GetMatchMusic");
searchTrie.insert("GetChangeRallyPointSound");
searchTrie.insert("GetNumUpgrades");
searchTrie.insert("GetAllBuildingTypes");
searchTrie.insert("GetPersistentQueueTypes");
searchTrie.insert("GetAllUnitTypes");
searchTrie.insert("GetWorkerTypes");
searchTrie.insert("GetCollectorTypes");
searchTrie.insert("GetAllDepotsForResource");
searchTrie.insert("GetBarracksBuildingTypes");
searchTrie.insert("GetAttackingUnitTypes");
searchTrie.insert("GetBaseDefenseTypes");
searchTrie.insert("HasCollectorType");
searchTrie.insert("HasUpgrades");
searchTrie.insert("HasBaseDefenseTypeBuildings");
searchTrie.insert("HasAttackingUnitTypes");
searchTrie.insert("Random_GetPersistentQueueSupportingType");
searchTrie.insert("Random_GetWorkerType");
searchTrie.insert("Random_GetAttackingUnitType");
searchTrie.insert("Random_GetBaseDefenseType");
searchTrie.insert("GetLargestContextMenu");
searchTrie.insert("GetLargestProductionQueueCapacity");
searchTrie.insert("GetLargestBuildingGarrisonSlotCapacity");
searchTrie.insert("GetLargestShopCatalogue");
searchTrie.insert("GetLargestInventory");
searchTrie.insert("");
searchTrie.insert("Faction");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UpgradesResearchableThroughBuildings");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MouseCursor_Info");
searchTrie.insert("EdgeScrollingCursor_Infos[8]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredHostileUnit_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredHostileUnit_Info");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredFriendlyUnit_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredFriendlyUnit_Info");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredHostileBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredHostileBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CanAttackHoveredFriendlyBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CannotAttackHoveredFriendlyBuilding_Info");
searchTrie.insert("DefaultMouseCursor_CanPickUpHoveredInventoryItem_Info");
searchTrie.insert("DefaultMouseCursor_CannotPickUpHoveredInventoryItem_Info");
searchTrie.insert("DefaultMouseCursor_CanGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]");
searchTrie.insert("DefaultMouseCursor_CannotGatherFromHoveredResourceSpot_Info[Statics::NUM_RESOURCE_TYPES]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("LargestContextMenu");
searchTrie.insert("LargestProductionQueueCapacity");
searchTrie.insert("LargestBuildingGarrisonSlotCapacity");
searchTrie.insert("MaxNumberOfShopItemsOnAShop");
searchTrie.insert("MaxUnitInventoryCapacity");
searchTrie.insert("Info2)");
searchTrie.insert("");
searchTrie.insert("URTSGameInstance");
searchTrie.insert("URTSGameInstance");
searchTrie.insert("SetupInitialSettings");
searchTrie.insert("InitDevelopmentSettings");
searchTrie.insert("CreatePoolingManager");
searchTrie.insert("InitFactionInfo");
searchTrie.insert("InitContextActions");
searchTrie.insert("InitCommanderAbilityInfo");
searchTrie.insert("InitCommanderSkillTreeNodeInfo");
searchTrie.insert("InitBuildingTargetingAbilityInfo");
searchTrie.insert("SetupBuffsAndDebuffInfos");
searchTrie.insert("InitInventoryItemInfo");
searchTrie.insert("InitKeyInfo");
searchTrie.insert("CreateHeavyTaskManager");
searchTrie.insert("InitMouseCursorInfo");
searchTrie.insert("SetupDefeatConditionInfo");
searchTrie.insert("SetupMapPool");
searchTrie.insert("SetupLoadingScreenMessages");
searchTrie.insert("SetupCommonContextActions");
searchTrie.insert("SetupCustomContextActions");
searchTrie.insert("SetupMissingContextActions");
searchTrie.insert("SetupCPUInfo");
searchTrie.insert("SetupMatchWidgets_BP");
searchTrie.insert("SetDefaultHUDMessages");
searchTrie.insert("SetupResourceInfo");
searchTrie.insert("SetupLeaveOnMapList");
searchTrie.insert("SetupSelectableResourceInfo");
searchTrie.insert("SetupInventoryItemInfo");
searchTrie.insert("SetupKeyInfo");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("Initialize");
searchTrie.insert("OnMapChange");
searchTrie.insert("Shutdown");
searchTrie.insert("GetAllFactionInfo");
searchTrie.insert("GetFactionInfo");
searchTrie.insert("GetRandomFactionInfo");
searchTrie.insert("GetRandomFaction");
searchTrie.insert("GetContextInfo");
searchTrie.insert("GetCommanderAbilityInfo");
searchTrie.insert("GetCommanderSkillTreeNodeInfo");
searchTrie.insert("GetAllCommanderAbilities");
searchTrie.insert("GetBuildingTargetingAbilityInfo");
searchTrie.insert("GetResourceInfo");
searchTrie.insert("GetStartingResourceConfig");
searchTrie.insert("GetAllStartingResourceConfigs");
searchTrie.insert("GetPoolingManager");
searchTrie.insert("GetHeavyTaskManager");
searchTrie.insert("GetDamageMultiplier");
searchTrie.insert("GetBuildingNetworkInfo");
searchTrie.insert("GetExperienceBountyMultiplierPerLevel");
searchTrie.insert("IsInitializingFactionInfo");
searchTrie.insert("GetAllContextInfo");
searchTrie.insert("GetDefeatConditionInfo");
searchTrie.insert("GetAllDefeatConditions");
searchTrie.insert("GetMapPool");
searchTrie.insert("GetMapInfo");
searchTrie.insert("GetMapInfo");
searchTrie.insert("IsLocationInsideMapBounds");
searchTrie.insert("GetMouseCursorInfo");
searchTrie.insert("GetMatchMouseCursor");
searchTrie.insert("GetEdgeScrollingCursor_Top");
searchTrie.insert("GetEdgeScrollingCursor_TopRight");
searchTrie.insert("GetEdgeScrollingCursor_Right");
searchTrie.insert("GetEdgeScrollingCursor_BottomRight");
searchTrie.insert("GetEdgeScrollingCursor_Bottom");
searchTrie.insert("GetEdgeScrollingCursor_BottomLeft");
searchTrie.insert("GetEdgeScrollingCursor_Left");
searchTrie.insert("GetEdgeScrollingCursor_TopLeft");
searchTrie.insert("GetAbilityDefaultMouseCursor_Default");
searchTrie.insert("GetAbilityDefaultMouseCursor_AcceptableTarget");
searchTrie.insert("GetAbilityDefaultMouseCursor_UnacceptableTarget");
searchTrie.insert("GetSoundMix");
searchTrie.insert("GetSoundClasses");
searchTrie.insert("GetSoundClass");
searchTrie.insert("GetBuffOrDebuffInfo");
searchTrie.insert("GetBuffOrDebuffInfo");
searchTrie.insert("GetBuffOrDebuffSubTypeInfo");
searchTrie.insert("GetSelectableResourceInfo");
searchTrie.insert("GetInventoryItemInfo");
searchTrie.insert("GetRandomInventoryItem");
searchTrie.insert("GetEmptyInventorySlotImage_Normal");
searchTrie.insert("GetEmptyInventorySlotImage_Hovered");
searchTrie.insert("GetEmptyInventorySlotImage_Pressed");
searchTrie.insert("GetEmptyInventorySlotSound_Hovered");
searchTrie.insert("GetEmptyInventorySlotSound_PressedByLMB");
searchTrie.insert("GetEmptyInventorySlotSound_PressedByRMB");
searchTrie.insert("IsBuff");
searchTrie.insert("IsBuff");
searchTrie.insert("IsDebuff");
searchTrie.insert("IsDebuff");
searchTrie.insert("GetMenuCursorInfo");
searchTrie.insert("GetObserverSelectionDecal");
searchTrie.insert("GetObserverSelectableSelectionWorldWidget");
searchTrie.insert("GetObserverSelectablePersistentWorldWidget");
searchTrie.insert("GetObserverResourceSpotSelectionWorldWidget");
searchTrie.insert("GetObserverResourceSpotPersistentWorldWidget");
searchTrie.insert("GetWorldWidgetViewMode");
searchTrie.insert("GetCPUDifficulty");
searchTrie.insert("GetCPUDifficultyInfo");
searchTrie.insert("IsMatchWidgetBlueprintSet");
searchTrie.insert("GetMatchWidgetBP");
searchTrie.insert("GetHUDNotificationMessageInfo");
searchTrie.insert("GetGameWarningInfo");
searchTrie.insert("GetGameWarningInfo");
searchTrie.insert("GetGameWarningInfo");
searchTrie.insert("GetGameWarningInfo");
searchTrie.insert("GetHUDGameMessageCooldown");
searchTrie.insert("GetMarqueeSelectionBoxStyle");
searchTrie.insert("GetMarqueeBoxRectangleFillColor");
searchTrie.insert("GetMarqueeBoxBorderColor");
searchTrie.insert("GetMarqueeBoxBorderLineThickness");
searchTrie.insert("GetBuildingStartHealthPercentage");
searchTrie.insert("GetBuildingRallyPointDisplayRule");
searchTrie.insert("GetGhostBadLocationParamName");
searchTrie.insert("GetGhostBadLocationParamValue");
searchTrie.insert("GetFogOfWarMaterial");
searchTrie.insert("UsingAtLeastOneUnifiedMouseFocusImage");
searchTrie.insert("GetUnifiedButtonAssets_ActionBar");
searchTrie.insert("GetUnifiedButtonAssets_Inventory");
searchTrie.insert("GetUnifiedButtonAssets_Shop");
searchTrie.insert("GetUnifiedButtonAssets_Menus");
searchTrie.insert("GetUnifiedHoverBrush_ActionBar");
searchTrie.insert("GetUnifiedPressedBrush_ActionBar");
searchTrie.insert("GetUnifiedHoverSound_ActionBar");
searchTrie.insert("GetUnifiedLMBPressedSound_ActionBar");
searchTrie.insert("GetUnifiedRMBPressedSound_ActionBar");
searchTrie.insert("GetUnifiedHoverBrush_Inventory");
searchTrie.insert("GetUnifiedPressedBrush_Inventory");
searchTrie.insert("GetUnifiedHoverSound_Inventory");
searchTrie.insert("GetUnifiedLMBPressedSound_Inventory");
searchTrie.insert("GetUnifiedRMBPressedSound_Inventory");
searchTrie.insert("GetUnifiedHoverBrush_Shop");
searchTrie.insert("GetUnifiedPressedBrush_Shop");
searchTrie.insert("GetUnifiedHoverSound_Shop");
searchTrie.insert("GetUnifiedLMBPressedSound_Shop");
searchTrie.insert("GetUnifiedRMBPressedSound_Shop");
searchTrie.insert("GetUnifiedHoverBrush_Menus");
searchTrie.insert("GetUnifiedPressedBrush_Menus");
searchTrie.insert("GetUnifiedHoverSound_Menus");
searchTrie.insert("GetUnifiedLMBPressedSound_Menus");
searchTrie.insert("GetUnifiedRMBPressedSound_Menus");
searchTrie.insert("GetUnifiedButtonAssetFlags_ActionBar");
searchTrie.insert("GetUnifiedButtonAssetFlags_InventoryItems");
searchTrie.insert("GetUnifiedButtonAssetFlags_Shop");
searchTrie.insert("GetUnifiedButtonAssetFlags_Menus");
searchTrie.insert("GetCamaraZoomToMoveSpeedCurve");
searchTrie.insert("GetCameraMouseWheelZoomCurve");
searchTrie.insert("GetCameraResetCurve");
searchTrie.insert("GetInputKeyInfo");
searchTrie.insert("KeyMappings_GetPlusSymbolImage");
searchTrie.insert("KeyMappings_GetCTRLModifierImage");
searchTrie.insert("KeyMappings_GetALTModifierImage");
searchTrie.insert("KeyMappings_GetSHIFTModifierImage");
searchTrie.insert("ShouldStayOnMap");
searchTrie.insert("GetLargestShopCatalogueSize");
searchTrie.insert("GetLargestInventoryCapacity");
searchTrie.insert("SetupAudioComponents");
searchTrie.insert("PlayMusic");
searchTrie.insert("IsPlayingPlayerSelectionSound");
searchTrie.insert("PlayPlayerSelectionSound");
searchTrie.insert("IsPlayingPlayerCommandSound");
searchTrie.insert("PlayPlayerCommandSound");
searchTrie.insert("IsPlayingZeroHealthSound");
searchTrie.insert("PlayZeroHealthSound");
searchTrie.insert("PlayEffectSound");
searchTrie.insert("GetChatMessageReceivedSound");
searchTrie.insert("ShowWidget");
searchTrie.insert("ShowPreviousWidget");
searchTrie.insert("Internal_HideWidget");
searchTrie.insert("HideAllMenuWidgets");
searchTrie.insert("RemoveFromWidgetHistory");
searchTrie.insert("DestroyMenuWidgetsBeforeMatch");
searchTrie.insert("OnWidgetExitAnimFinished");
searchTrie.insert("OnWidgetEnterAnimFinished");
searchTrie.insert("IsWidgetBlueprintSet");
searchTrie.insert("GetWidget");
searchTrie.insert("GetWidget");
searchTrie.insert("GetCurrentWidget");
searchTrie.insert("GetZOrder");
searchTrie.insert("PlayWidgetExitAnim");
searchTrie.insert("void");
searchTrie.insert("PlayWidgetEnterAnim");
searchTrie.insert("Delay)");
searchTrie.insert("ShowPopupWidget");
searchTrie.insert("HidePopupWidget");
searchTrie.insert("OnEnterMainMenuFromStartup");
searchTrie.insert("OnEnterMainMenu");
searchTrie.insert("OnQuitGameInitiated");
searchTrie.insert("QuitGame");
searchTrie.insert("QuitGame");
searchTrie.insert("CreateSingleplayerLobby");
searchTrie.insert("LoadLobbyMapForSingleplayer");
searchTrie.insert("SetupLobbyWidget_Singleplayer");
searchTrie.insert("CreateNetworkedSession");
searchTrie.insert("OnNetworkedSessionCreated");
searchTrie.insert("CreateMultiplayerLobby");
searchTrie.insert("LoadLobbyMapForMultiplayer");
searchTrie.insert("SetupLobbyWidget_Multiplayer");
searchTrie.insert("GetSessionSettings");
searchTrie.insert("GetLobbyPassword");
searchTrie.insert("SetLobbyPassword");
searchTrie.insert("GetPendingSessionSettings");
searchTrie.insert("SetPendingSessionSettings");
searchTrie.insert("GoFromLobbyToMainMenu");
searchTrie.insert("GoFromMatchToMainMenu");
searchTrie.insert("ReturnToMainMenu");
searchTrie.insert("SearchForNetworkedLobbies");
searchTrie.insert("TryJoinNetworkedSession");
searchTrie.insert("TryCreateMatch");
searchTrie.insert("OnStartSessionComplete");
searchTrie.insert("AssignOptimalStartingSpots");
searchTrie.insert("LoadMatch");
searchTrie.insert("OnMatchLevelLoaded");
searchTrie.insert("OnLevelLoadedAndPCSetupsDone");
searchTrie.insert("OnInitialValuesAcked");
searchTrie.insert("OnMatchFinalSetupComplete");
searchTrie.insert("GetMatchInfo");
searchTrie.insert("GetMatchInfoModifiable");
searchTrie.insert("GetMatchLoadingStatusText");
searchTrie.insert("IsColdBooting");
searchTrie.insert("SetIsColdBooting");
searchTrie.insert("IsInMainMenuMap");
searchTrie.insert("SpawnCPUPlayer");
searchTrie.insert("SpawnStartingSelectables");
searchTrie.insert("OnInitiateSkipMainMenu");
searchTrie.insert("SetupMatchInfoForPIE");
searchTrie.insert("EditorPlaySession_ShouldSkipOpeningCutscene");
searchTrie.insert("EditorPlaySession_ShouldSkipMainMenu");
searchTrie.insert("EditorPlaySession_GetDefeatCondition");
searchTrie.insert("EditorPlaySession_GetHumanPlayerInfo");
searchTrie.insert("EditorPlaySession_GetNumCPUPlayers");
searchTrie.insert("EditorPlaySession_GetCPUPlayerInfo");
searchTrie.insert("EditorPlaySession_GetInvalidHumanOwnerRule");
searchTrie.insert("EditorPlaySession_GetInvalidCPUOwnerRule");
searchTrie.insert("EditorPlaySession_IsCheatWidgetBPSet");
searchTrie.insert("EditorPlaySession_ShouldInitiallyShowCheatWidget");
searchTrie.insert("EditorPlaySession_GetCheatWidgetBP");
searchTrie.insert("EditorPlaySession_ShowInfantryControllerDebugWidgets");
searchTrie.insert("EditorPlaySession_GetInfantryControllerDebugWidgetBP");
searchTrie.insert("EditorPlaySession_GetStartingResourceConfig");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsInitializingFactionInfo");
searchTrie.insert("bHasInitialized");
searchTrie.insert("bHasSpawnedInfoActors");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MenuMouseCursor_Info");
searchTrie.insert("DefaultAbilityCursor_Default_Info");
searchTrie.insert("DefaultAbilityCursor_AcceptableTarget_Info");
searchTrie.insert("DefaultAbilityCursor_UnacceptableTarget_Info");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("LeaveOnMapList");
searchTrie.insert("LargestShopCatalogueSize");
searchTrie.insert("LargestInventoryCapacity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("WidgetTransitionFunction");
searchTrie.insert("WidgetToShow");
searchTrie.insert("NumWidgetsBack");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SessionSettings");
searchTrie.insert("LobbyPassword");
searchTrie.insert("PendingSessionSettings");
searchTrie.insert("bIsColdBooting");
searchTrie.insert("bIsInMainMenuMap");
searchTrie.insert("MatchInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("EditorPlaySettingsWidget");
searchTrie.insert("FMinimalPlayerInfo");
searchTrie.insert("FMinimalPlayerInfo");
searchTrie.insert("FMinimalPlayerInfo");
searchTrie.insert("IsHumanPlayer");
searchTrie.insert("GetTeam");
searchTrie.insert("GetFaction");
searchTrie.insert("GetStartingSpot");
searchTrie.insert("SetStartingSpot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPIESelectableLoggingInfo");
searchTrie.insert("FPIESelectableLoggingInfo");
searchTrie.insert("FPIESelectableLoggingInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPIEStartingSelectableInfo");
searchTrie.insert("FPIEStartingSelectableInfo");
searchTrie.insert("FPIEStartingSelectableInfo");
searchTrie.insert("GetActorBP");
searchTrie.insert("GetSpawnTransform");
searchTrie.insert("GetOwnerIndex");
searchTrie.insert("IsForCPUPlayer");
searchTrie.insert("GetBuildingType");
searchTrie.insert("GetUnitType");
searchTrie.insert("IsForBuilding");
searchTrie.insert("IsForUnit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingType");
searchTrie.insert("UnitType");
searchTrie.insert("FNewPlayerDefaultValues");
searchTrie.insert("FNewPlayerDefaultValues");
searchTrie.insert("FNewPlayerDefaultValues");
searchTrie.insert("GetFaction");
searchTrie.insert("");
searchTrie.insert("ARTSGameMode");
searchTrie.insert("ARTSGameMode");
searchTrie.insert("InitNewPlayer");
searchTrie.insert("PostLogin");
searchTrie.insert("Logout");
searchTrie.insert("BeginPlay");
searchTrie.insert("RestartPlayer");
searchTrie.insert("GoToMapFromStartup");
searchTrie.insert("GoToMapFromStartupPart0");
searchTrie.insert("GoToMapFromStartupPartZeroPointFive");
searchTrie.insert("GoToMapFromStartupPartZeroPointSevenFive");
searchTrie.insert("GoToMapFromStartupPart1");
searchTrie.insert("GoToMapFromStartupPart2");
searchTrie.insert("GoToMapFromStartupPart3");
searchTrie.insert("GoToMapFromStartupPart4");
searchTrie.insert("GoToMapFromStartupPart5");
searchTrie.insert("ShowIntro");
searchTrie.insert("OnIntroFinished");
searchTrie.insert("Delay)");
searchTrie.insert("bool");
searchTrie.insert("IsPlayerDefeated");
searchTrie.insert("SetupDefeatFunctions");
searchTrie.insert("DefeatFunction_NoCondition");
searchTrie.insert("DefeatFunction_AllBuildingsDestroyed");
searchTrie.insert("StartDefeatConditionChecking");
searchTrie.insert("StopDefeatConditionChecking");
searchTrie.insert("CheckDefeatCondition");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumPIEClients");
searchTrie.insert("NumPIECPUPlayers");
searchTrie.insert("");
searchTrie.insert("NeutralSelectables");
searchTrie.insert("DefeatCondition");
searchTrie.insert("DefeatFunctions[Statics::NUM_DEFEAT_CONDITIONS]");
searchTrie.insert("");
searchTrie.insert("TimerHandle_DefeatCondition");
searchTrie.insert("FResourcesArray");
searchTrie.insert("GetArray");
searchTrie.insert("AddResourceSpot");
searchTrie.insert("Array");
searchTrie.insert("FAudioComponentContainer");
searchTrie.insert("Num");
searchTrie.insert("Contains");
searchTrie.insert("Add");
searchTrie.insert("RemoveChecked");
searchTrie.insert("GetArray");
searchTrie.insert("Map");
searchTrie.insert("");
searchTrie.insert("ARTSGameState");
searchTrie.insert("ARTSGameState");
searchTrie.insert("Tick");
searchTrie.insert("BeginPlay");
searchTrie.insert("PreReplication");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("OnRep_TickCounter");
searchTrie.insert("Server_RegenSelectableResources");
searchTrie.insert("Client_RegenSelectableResources");
searchTrie.insert("InitTeamTraceChannels");
searchTrie.insert("SetPoolingManager");
searchTrie.insert("SetupEffectsActors");
searchTrie.insert("SetupCommanderAbilityEffects");
searchTrie.insert("SetupTeamTags");
searchTrie.insert("AddController");
searchTrie.insert("SetupForMatch");
searchTrie.insert("GetAllResourceSpots");
searchTrie.insert("GetResourceSpots");
searchTrie.insert("AddToResourceSpots");
searchTrie.insert("AddToTeam");
searchTrie.insert("AddCPUController");
searchTrie.insert("SetupCollisionChannels");
searchTrie.insert("GetGameTickCounter");
searchTrie.insert("GetObjectPoolingManager");
searchTrie.insert("OnBuildingPlaced");
searchTrie.insert("OnBuildingConstructionCompleted");
searchTrie.insert("OnInfantryBuilt");
searchTrie.insert("OnBuildingZeroHealth");
searchTrie.insert("OnInfantryZeroHealth");
searchTrie.insert("Server_RegisterSelectableResourceRegener");
searchTrie.insert("Client_RegisterSelectableResourceRegener");
searchTrie.insert("Server_UnregisterSelectableResourceRegener");
searchTrie.insert("Client_UnregisterSelectableResourceRegener");
searchTrie.insert("OnSelectableDestroyed");
searchTrie.insert("Server_RegisterNeutralSelectable");
searchTrie.insert("RegisterFogProjectile");
searchTrie.insert("UnregisterFogProjectile");
searchTrie.insert("RegisterFogParticles");
searchTrie.insert("Multicast_OnSelectableLevelUp");
searchTrie.insert("Multicast_OnUpgradeComplete");
searchTrie.insert("GetAbilityEffectActor");
searchTrie.insert("Server_CreateAbilityEffect");
searchTrie.insert("IsServer");
searchTrie.insert("AbilityMulticasts_PassedInstigatorValidChecks");
searchTrie.insert("AbilityMulticasts_PassedInstigatorAndTargetValidChecks");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationRandom");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationNotRandom");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfAbilityUse_SingleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_MultipleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoEMultipleHitOutcomesNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeAoESingleHitOutcomeNoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoEWithTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetWithLocationNotRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationRandomWithTickCount");
searchTrie.insert("Multicast_NotifyOfInventorySlotUse_SingleOutcomeNotAoENoTargetNoLocationNotRandomWithTickCount");
searchTrie.insert("GetAllCommanderAbilityEffectObjects");
searchTrie.insert("GetCommanderAbilityEffectObject");
searchTrie.insert("Server_CreateAbilityEffect");
searchTrie.insert("Multicast_NotifyOfCommanderAbilityUse_EverySingleParam");
searchTrie.insert("Server_CreateAbilityEffect");
searchTrie.insert("Multicast_NotifyOfBuildingTargetingAbilityUse_EverySingleParam");
searchTrie.insert("GetInventoryItemsInWorld");
searchTrie.insert("GenerateInventoryItemUniqueID");
searchTrie.insert("PutInventoryItemActorInArray");
searchTrie.insert("GetInventoryItemFromID");
searchTrie.insert("Server_TryPutItemInInventory");
searchTrie.insert("Server_TryPutItemInInventory");
searchTrie.insert("Multicast_PutItemInInventoryFromGround");
searchTrie.insert("PutItemInInventoryFromShopPurchase_PassedParamChecks");
searchTrie.insert("Multicast_PutItemInInventoryFromShopPurchase");
searchTrie.insert("Multicast_PutItemInInventory");
searchTrie.insert("Multicast_OnInventoryItemSold");
searchTrie.insert("PutInventoryItemInObjectPool");
searchTrie.insert("PutInventoryItemInObjectPool");
searchTrie.insert("ShouldPlayInventoryItemAquireSound");
searchTrie.insert("ShouldShowInventoryItemAquireParticles");
searchTrie.insert("PlayItemAquireParticles");
searchTrie.insert("PutInventoryItemInWorld");
searchTrie.insert("Multicast_OnSelectableZeroHealth");
searchTrie.insert("NoteDownUnexecutedRPC_Ability");
searchTrie.insert("NoteDownUnexecutedRPC_CommanderAbility");
searchTrie.insert("NoteDownUnexecutedRPC_BuildingTargetingAbility");
searchTrie.insert("NoteDownUnexecutedRPC_PutItemInInventory");
searchTrie.insert("NoteDownUnexecutedRPC_PutItemInInventoryFromGround");
searchTrie.insert("NoteDownUnexecutedRPC_OnSelectableZeroHealth");
searchTrie.insert("NoteDownUnexecutedRPC_OnInventoryItemSold");
searchTrie.insert("SetGI");
searchTrie.insert("Server_GetMatchTime");
searchTrie.insert("SetLocalPlayersTeam");
searchTrie.insert("GetLocalPlayersTeam");
searchTrie.insert("GetPlayers");
searchTrie.insert("GetPlayerStates");
searchTrie.insert("GetPlayerStatesByValue");
searchTrie.insert("GetCPUControllers");
searchTrie.insert("GetTeams");
searchTrie.insert("GetTeamPlayerStates");
searchTrie.insert("GetUndefeatedPlayers");
searchTrie.insert("GetPlayerFromID");
searchTrie.insert("GetTeamVisibilityInfo");
searchTrie.insert("GetTeamVisibilityInfo");
searchTrie.insert("GetAllTeamsVisibilityInfo");
searchTrie.insert("GetNumTeams");
searchTrie.insert("GetNeutrals");
searchTrie.insert("GetTeamTag");
searchTrie.insert("GetTemporaryFogProjectiles");
searchTrie.insert("GetTemporaryFogParticles");
searchTrie.insert("GetAllTeamCollisionChannels");
searchTrie.insert("GetAllTeamsQueryParams");
searchTrie.insert("GetAllTeamsCollisionResponseContainer_Overlap");
searchTrie.insert("GetTeamCollisionChannel");
searchTrie.insert("GetEnemyChannels");
searchTrie.insert("GetAllEnemiesQueryParams");
searchTrie.insert("GetNeutralTeamCollisionChannel");
searchTrie.insert("SetFogManager");
searchTrie.insert("GetFogManager");
searchTrie.insert("SetupSingleplayerLobby");
searchTrie.insert("SetupNetworkedLobby");
searchTrie.insert("OnClientJoinsLobby");
searchTrie.insert("GetNextOpenLobbySlot");
searchTrie.insert("ClearLobby");
searchTrie.insert("PopulateLobbySlot");
searchTrie.insert("PopulateLobbySlot");
searchTrie.insert("RemoveFromLobby");
searchTrie.insert("UpdateServerLobby");
searchTrie.insert("OnRep_LobbyName");
searchTrie.insert("OnRep_LobbyPlayers");
searchTrie.insert("OnRep_LobbyPlayerTypes");
searchTrie.insert("OnRep_LobbyCPUDifficulties");
searchTrie.insert("OnRep_LobbyTeams");
searchTrie.insert("OnRep_LobbyFactions");
searchTrie.insert("OnRep_LobbyPlayerStarts");
searchTrie.insert("OnRep_LobbyStartingResources");
searchTrie.insert("OnRep_LobbyDefeatCondition");
searchTrie.insert("OnRep_LobbyMap");
searchTrie.insert("OnRep_LobbyAreSlotsLocked");
searchTrie.insert("IsInMatch");
searchTrie.insert("AreLobbySlotsLocked");
searchTrie.insert("ChangeTeamInLobby");
searchTrie.insert("ChangeTeamInLobby");
searchTrie.insert("ChangeFactionInLobby");
searchTrie.insert("ChangeFactionInLobby");
searchTrie.insert("ChangeStartingSpotInLobby");
searchTrie.insert("ChangeCPUDifficultyInLobby");
searchTrie.insert("ChangeStartingResourcesInLobby");
searchTrie.insert("ChangeDefeatConditionInLobby");
searchTrie.insert("ChangeMapInLobby");
searchTrie.insert("KickPlayerInLobby");
searchTrie.insert("ChangeLockedSlotsStatusInLobby");
searchTrie.insert("SetTeamFromServer");
searchTrie.insert("SetFactionFromServer");
searchTrie.insert("SetStartingSpotFromServer");
searchTrie.insert("TryOpenLobbySlot");
searchTrie.insert("CloseLobbySlot");
searchTrie.insert("Multicast_SendLobbyChatMessage");
searchTrie.insert("GetLobbyPlayerStart");
searchTrie.insert("IsMatchInfoCorrect");
searchTrie.insert("AreMatchInfoPlayerStartsCorrect");
searchTrie.insert("GetNumPCSetupAcksForPIE");
searchTrie.insert("GetNumPSSetupAcksForPIE");
searchTrie.insert("GetNumFinalSetupAcks");
searchTrie.insert("GenerateUniquePlayerID");
searchTrie.insert("Multicast_LoadMatchMap");
searchTrie.insert("SetNumPlayersForMatch");
searchTrie.insert("OnRep_MatchLoadingStatus");
searchTrie.insert("StreamInMatchLevel");
searchTrie.insert("OnLevelStreamedOut");
searchTrie.insert("OnMatchLevelStreamedIn");
searchTrie.insert("DestroyAllSelectablesOnMap");
searchTrie.insert("CheckIfStreamingComplete");
searchTrie.insert("CheckIfLevelsLoadedAndPostLoginsComplete");
searchTrie.insert("GetMatchLoadingStatus");
searchTrie.insert("SetMatchLoadingStatus");
searchTrie.insert("Server_AckPCSetupComplete");
searchTrie.insert("AckLevelStreamingComplete");
searchTrie.insert("Server_AckInitialValuesReceived");
searchTrie.insert("Server_AckFinalSetupComplete");
searchTrie.insert("StartMatch");
searchTrie.insert("Multicast_OnMatchStarted");
searchTrie.insert("OnMatchStarted_Part2");
searchTrie.insert("StartMatchTimer");
searchTrie.insert("StartCPUPlayerBehavior");
searchTrie.insert("StartPIEMatch");
searchTrie.insert("HandleClientLoggingOutInMatch");
searchTrie.insert("DisconnectAllClients");
searchTrie.insert("IsMatchNowOver");
searchTrie.insert("Multicast_OnPlayersDefeated");
searchTrie.insert("OnMatchWinnerFound");
searchTrie.insert("Multicast_OnMatchWinnerFound");
searchTrie.insert("SendInMatchChatMessageToEveryone");
searchTrie.insert("SendInMatchChatMessageToTeam");
searchTrie.insert("Delay)");
searchTrie.insert("AccumulatedTimeTowardsNextGameTick");
searchTrie.insert("");
searchTrie.insert("Server_SelectableResourceUsersThatRegen");
searchTrie.insert("PreviousTickCounterValue");
searchTrie.insert("Client_SelectableResourceUsersThatRegen");
searchTrie.insert("TimeWhenMatchStarted");
searchTrie.insert("NextUniquePlayerID");
searchTrie.insert("LocalPlayersTeam");
searchTrie.insert("NumTeams");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("EnemyQueryParams");
searchTrie.insert("NeutralTraceChannel");
searchTrie.insert("AllTeamsQueryParams");
searchTrie.insert("AllTeams_Overlap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CurrentInventoryItemUniqueID");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("PIE_NumPCSetupCompleteAcks");
searchTrie.insert("PIE_NumPSSetInitialValuesAcks");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ExpectedNumHumanPlayers");
searchTrie.insert("ExpectedNumPlayers");
searchTrie.insert("NumPCSetupAcks");
searchTrie.insert("NumLoadedLevelAcks");
searchTrie.insert("NumInitialValueAcks");
searchTrie.insert("NumFinalSetupAcks");
searchTrie.insert("NumLevelsStreamedOut");
searchTrie.insert("bHasStreamedInMatchLevel");
searchTrie.insert("bHasAckedPostLoginsAndMaps");
searchTrie.insert("URTSLocalPlayer");
searchTrie.insert("URTSLocalPlayer");
searchTrie.insert("GetGameLoginOptions");
searchTrie.insert("SetPassword");
searchTrie.insert("");
searchTrie.insert("FCtrlGroupList");
searchTrie.insert("GetArray");
searchTrie.insert("GetNum");
searchTrie.insert("");
searchTrie.insert("FTryBindActionResult");
searchTrie.insert("FTryBindActionResult");
searchTrie.insert("KeyWeAreTryingToAssign");
searchTrie.insert("AlreadyBoundToKey_Axis");
searchTrie.insert("AlreadyBoundToKey_Action[8]");
searchTrie.insert("Warning");
searchTrie.insert("ARTSPlayerController");
searchTrie.insert("ARTSPlayerController");
searchTrie.insert("SetPlayer");
searchTrie.insert("BeginPlay");
searchTrie.insert("Tick");
searchTrie.insert("SetupInputComponent");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("OnLMBPressed_HUDPersistentPanel_Build");
searchTrie.insert("OnLMBReleased_HUDPersistentPanel_Build");
searchTrie.insert("OnRMBPressed_HUDPersistentPanel_Build");
searchTrie.insert("OnRMBReleased_HUDPersistentPanel_Build");
searchTrie.insert("OnLMBPressed_HUDPersistentPanel_SwitchTab");
searchTrie.insert("OnLMBReleased_HUDPersistentPanel_SwitchTab");
searchTrie.insert("OnRMBPressed_HUDPersistentPanel_SwitchTab");
searchTrie.insert("OnRMBReleased_HUDPersistentPanel_SwitchTab");
searchTrie.insert("OnLMBPressed_PrimarySelected_ActionBar");
searchTrie.insert("OnLMBReleased_PrimarySelected_ActionBar");
searchTrie.insert("OnRMBPressed_PrimarySelected_ActionBar");
searchTrie.insert("OnRMBReleased_PrimarySelected_ActionBar");
searchTrie.insert("OnLMBPressed_PrimarySelected_InventoryButton");
searchTrie.insert("OnLMBReleased_PrimarySelected_InventoryButton");
searchTrie.insert("OnRMBPressed_PrimarySelected_InventoryButton");
searchTrie.insert("OnRMBReleased_PrimarySelected_InventoryButton");
searchTrie.insert("OnLMBPressed_PrimarySelected_ShopButton");
searchTrie.insert("OnLMBReleased_PrimarySelected_ShopButton");
searchTrie.insert("OnRMBPressed_PrimarySelected_ShopButton");
searchTrie.insert("OnRMBReleased_PrimarySelected_ShopButton");
searchTrie.insert("OnLMBPressed_PrimarySelected_ProductionQueueSlot");
searchTrie.insert("OnLMBReleased_PrimarySelected_ProductionQueueSlot");
searchTrie.insert("OnRMBPressed_PrimarySelected_ProductionQueueSlot");
searchTrie.insert("OnRMBReleased_PrimarySelected_ProductionQueueSlot");
searchTrie.insert("OnLMBPressed_PauseGame");
searchTrie.insert("OnLMBReleased_PauseGame");
searchTrie.insert("OnRMBPressed_PauseGame");
searchTrie.insert("OnRMBReleased_PauseGame");
searchTrie.insert("OnLMBPressed_CommanderSkillTreeShowButton");
searchTrie.insert("OnLMBReleased_CommanderSkillTreeShowButton");
searchTrie.insert("OnRMBPressed_CommanderSkillTreeShowButton");
searchTrie.insert("OnRMBReleased_CommanderSkillTreeShowButton");
searchTrie.insert("OnLMBPressed_GlobalSkillsPanelButton");
searchTrie.insert("OnLMBReleased_GlobalSkillsPanelButton");
searchTrie.insert("OnRMBPressed_GlobalSkillsPanelButton");
searchTrie.insert("OnRMBReleased_GlobalSkillsPanelButton");
searchTrie.insert("OnLMBPressed_PlayerTargetingPanelButton");
searchTrie.insert("OnLMBReleased_PlayerTargetingPanelButton");
searchTrie.insert("OnRMBPressed_PlayerTargetingPanelButton");
searchTrie.insert("OnRMBReleased_PlayerTargetingPanelButton");
searchTrie.insert("OnLMBPressed_HidePlayerTargetingPanel");
searchTrie.insert("OnLMBReleased_HidePlayerTargetingPanel");
searchTrie.insert("OnRMBPressed_HidePlayerTargetingPanel");
searchTrie.insert("OnRMBReleased_HidePlayerTargetingPanel");
searchTrie.insert("OnLMBPressed_CommanderSkillTreeNode");
searchTrie.insert("OnLMBReleased_CommanderSkillTreeNode");
searchTrie.insert("OnRMBPressed_CommanderSkillTreeNode");
searchTrie.insert("OnRMBReleased_CommanderSkillTreeNode");
searchTrie.insert("OnLMBPressed_UnloadSingleGarrisonUnit");
searchTrie.insert("OnLMBReleased_UnloadSingleGarrisonUnit");
searchTrie.insert("OnRMBPressed_UnloadSingleGarrisonUnit");
searchTrie.insert("OnRMBReleased_UnloadSingleGarrisonUnit");
searchTrie.insert("OnLMBPressed_UnloadGarrisonButton");
searchTrie.insert("OnLMBReleased_UnloadGarrisonButton");
searchTrie.insert("OnRMBPressed_UnloadGarrisonButton");
searchTrie.insert("OnRMBReleased_UnloadGarrisonButton");
searchTrie.insert("OnLMBPressed_PauseMenu_Resume");
searchTrie.insert("OnLMBReleased_PauseMenu_Resume");
searchTrie.insert("OnRMBPressed_PauseMenu_Resume");
searchTrie.insert("OnRMBReleased_PauseMenu_Resume");
searchTrie.insert("OnLMBPressed_PauseMenu_ShowSettingsMenu");
searchTrie.insert("OnLMBReleased_PauseMenu_ShowSettingsMenu");
searchTrie.insert("OnRMBPressed_PauseMenu_ShowSettingsMenu");
searchTrie.insert("OnRMBReleased_PauseMenu_ShowSettingsMenu");
searchTrie.insert("OnLMBPressed_PauseMenu_ReturnToMainMenu");
searchTrie.insert("OnLMBReleased_PauseMenu_ReturnToMainMenu");
searchTrie.insert("OnRMBPressed_PauseMenu_ReturnToMainMenu");
searchTrie.insert("OnRMBReleased_PauseMenu_ReturnToMainMenu");
searchTrie.insert("OnLMBPressed_PauseMenu_ReturnToOperatingSystem");
searchTrie.insert("OnLMBReleased_PauseMenu_ReturnToOperatingSystem");
searchTrie.insert("OnRMBPressed_PauseMenu_ReturnToOperatingSystem");
searchTrie.insert("OnRMBReleased_PauseMenu_ReturnToOperatingSystem");
searchTrie.insert("OnLMBPressed_ConfirmationWidgetYesButton");
searchTrie.insert("OnLMBReleased_ConfirmationWidgetYesButton");
searchTrie.insert("OnRMBPressed_ConfirmationWidgetYesButton");
searchTrie.insert("OnRMBReleased_ConfirmationWidgetYesButton");
searchTrie.insert("OnLMBPressed_ConfirmationWidgetNoButton");
searchTrie.insert("OnLMBReleased_ConfirmationWidgetNoButton");
searchTrie.insert("OnRMBPressed_ConfirmationWidgetNoButton");
searchTrie.insert("OnRMBReleased_ConfirmationWidgetNoButton");
searchTrie.insert("OnLMBPressed_SettingsMenu_SaveChangesAndReturnButton");
searchTrie.insert("OnLMBReleased_SettingsMenu_SaveChangesAndReturnButton");
searchTrie.insert("OnRMBPressed_SettingsMenu_SaveChangesAndReturnButton");
searchTrie.insert("OnRMBReleased_SettingsMenu_SaveChangesAndReturnButton");
searchTrie.insert("OnLMBPressed_SettingsMenu_DiscardChangesAndReturnButton");
searchTrie.insert("OnLMBReleased_SettingsMenu_DiscardChangesAndReturnButton");
searchTrie.insert("OnRMBPressed_SettingsMenu_DiscardChangesAndReturnButton");
searchTrie.insert("OnRMBReleased_SettingsMenu_DiscardChangesAndReturnButton");
searchTrie.insert("OnLMBPressed_SettingsMenu_ResetToDefaults");
searchTrie.insert("OnLMBReleased_SettingsMenu_ResetToDefaults");
searchTrie.insert("OnRMBPressed_SettingsMenu_ResetToDefaults");
searchTrie.insert("OnRMBReleased_SettingsMenu_ResetToDefaults");
searchTrie.insert("OnLMBPressed_SettingsMenu_ConfirmResetToDefaults");
searchTrie.insert("OnLMBReleased_SettingsMenu_ConfirmResetToDefaults");
searchTrie.insert("OnRMBPressed_SettingsMenu_ConfirmResetToDefaults");
searchTrie.insert("OnRMBReleased_SettingsMenu_ConfirmResetToDefaults");
searchTrie.insert("OnLMBPressed_SettingsMenu_CancelResetToDefaults");
searchTrie.insert("OnLMBReleased_SettingsMenu_CancelResetToDefaults");
searchTrie.insert("OnRMBPressed_SettingsMenu_CancelResetToDefaults");
searchTrie.insert("OnRMBReleased_SettingsMenu_CancelResetToDefaults");
searchTrie.insert("OnLMBPressed_SettingsConfirmationWidget_Confirm");
searchTrie.insert("OnLMBReleased_SettingsConfirmationWidget_Confirm");
searchTrie.insert("OnRMBPressed_SettingsConfirmationWidget_Confirm");
searchTrie.insert("OnRMBReleased_SettingsConfirmationWidget_Confirm");
searchTrie.insert("OnLMBPressed_SettingsConfirmationWidget_Discard");
searchTrie.insert("OnLMBReleased_SettingsConfirmationWidget_Discard");
searchTrie.insert("OnRMBPressed_SettingsConfirmationWidget_Discard");
searchTrie.insert("OnRMBReleased_SettingsConfirmationWidget_Discard");
searchTrie.insert("OnLMBPressed_SettingsConfirmationWidget_Cancel");
searchTrie.insert("OnLMBReleased_SettingsConfirmationWidget_Cancel");
searchTrie.insert("OnRMBPressed_SettingsConfirmationWidget_Cancel");
searchTrie.insert("OnRMBReleased_SettingsConfirmationWidget_Cancel");
searchTrie.insert("OnLMBPressed_SwitchSettingsSubmenu");
searchTrie.insert("OnLMBReleased_SwitchSettingsSubmenu");
searchTrie.insert("OnRMBPressed_SwitchSettingsSubmenu");
searchTrie.insert("OnRMBReleased_SwitchSettingsSubmenu");
searchTrie.insert("OnLMBPressed_AdjustVideoSettingLeft");
searchTrie.insert("OnLMBReleased_AdjustVideoSettingLeft");
searchTrie.insert("OnRMBPressed_AdjustVideoSettingLeft");
searchTrie.insert("OnRMBReleased_AdjustVideoSettingLeft");
searchTrie.insert("OnLMBPressed_AdjustVideoSettingRight");
searchTrie.insert("OnLMBReleased_AdjustVideoSettingRight");
searchTrie.insert("OnRMBPressed_AdjustVideoSettingRight");
searchTrie.insert("OnRMBReleased_AdjustVideoSettingRight");
searchTrie.insert("OnLMBPressed_DecreaseAudioQuality");
searchTrie.insert("OnLMBReleased_DecreaseAudioQuality");
searchTrie.insert("OnRMBPressed_DecreaseAudioQuality");
searchTrie.insert("OnRMBReleased_DecreaseAudioQuality");
searchTrie.insert("OnLMBPressed_IncreaseAudioQuality");
searchTrie.insert("OnLMBReleased_IncreaseAudioQuality");
searchTrie.insert("OnRMBPressed_IncreaseAudioQuality");
searchTrie.insert("OnRMBReleased_IncreaseAudioQuality");
searchTrie.insert("OnLMBPressed_DecreaseVolumeButton");
searchTrie.insert("OnLMBReleased_DecreaseVolumeButton");
searchTrie.insert("OnRMBPressed_DecreaseVolumeButton");
searchTrie.insert("OnRMBReleased_DecreaseVolumeButton");
searchTrie.insert("OnLMBPressed_IncreaseVolumeButton");
searchTrie.insert("OnLMBReleased_IncreaseVolumeButton");
searchTrie.insert("OnRMBPressed_IncreaseVolumeButton");
searchTrie.insert("OnRMBReleased_IncreaseVolumeButton");
searchTrie.insert("OnLMBPressed_AdjustBoolControlSettingLeft");
searchTrie.insert("OnLMBReleased_AdjustBoolControlSettingLeft");
searchTrie.insert("OnRMBPressed_AdjustBoolControlSettingLeft");
searchTrie.insert("OnRMBReleased_AdjustBoolControlSettingLeft");
searchTrie.insert("OnLMBPressed_AdjustBoolControlSettingRight");
searchTrie.insert("OnLMBReleased_AdjustBoolControlSettingRight");
searchTrie.insert("OnRMBPressed_AdjustBoolControlSettingRight");
searchTrie.insert("OnRMBReleased_AdjustBoolControlSettingRight");
searchTrie.insert("OnLMBPressed_DecreaseControlSetting_Float");
searchTrie.insert("OnLMBReleased_DecreaseControlSetting_Float");
searchTrie.insert("OnRMBPressed_DecreaseControlSetting_Float");
searchTrie.insert("OnRMBReleased_DecreaseControlSetting_Float");
searchTrie.insert("OnLMBPressed_IncreaseControlSetting_Float");
searchTrie.insert("OnLMBReleased_IncreaseControlSetting_Float");
searchTrie.insert("OnRMBPressed_IncreaseControlSetting_Float");
searchTrie.insert("OnRMBReleased_IncreaseControlSetting_Float");
searchTrie.insert("OnLMBPressed_RemapKey");
searchTrie.insert("OnLMBReleased_RemapKey");
searchTrie.insert("OnRMBPressed_RemapKey");
searchTrie.insert("OnRMBReleased_RemapKey");
searchTrie.insert("OnLMBPressed_RebindingCollisionWidgetConfirm");
searchTrie.insert("OnLMBReleased_RebindingCollisionWidgetConfirm");
searchTrie.insert("OnRMBPressed_RebindingCollisionWidgetConfirm");
searchTrie.insert("OnRMBReleased_RebindingCollisionWidgetConfirm");
searchTrie.insert("OnLMBPressed_RebindingCollisionWidgetCancel");
searchTrie.insert("OnLMBReleased_RebindingCollisionWidgetCancel");
searchTrie.insert("OnRMBPressed_RebindingCollisionWidgetCancel");
searchTrie.insert("OnRMBReleased_RebindingCollisionWidgetCancel");
searchTrie.insert("OnLMBPressed_ResetKeyBindingsToDefaults");
searchTrie.insert("OnLMBReleased_ResetKeyBindingsToDefaults");
searchTrie.insert("OnRMBPressed_ResetKeyBindingsToDefaults");
searchTrie.insert("OnRMBReleased_ResetKeyBindingsToDefaults");
searchTrie.insert("ListenForKeyRemappingInputEvents");
searchTrie.insert("ListenForKeyRemappingInputEvents");
searchTrie.insert("CancelPendingKeyRebind");
searchTrie.insert("OnCancelPendingKeyRebindButtonHeld");
searchTrie.insert("InputKey");
searchTrie.insert("PendingKeyRebind_UpdatePressedModifierFlags");
searchTrie.insert("TryRebindAction");
searchTrie.insert("TryRebindAction");
searchTrie.insert("DoOnEveryLMBPress");
searchTrie.insert("DoOnEveryLMBRelease");
searchTrie.insert("PendingKeyRebind_GetAllKeyModifiers");
searchTrie.insert("Input_LMBPressed");
searchTrie.insert("Input_LMBReleased");
searchTrie.insert("Input_RMBPressed");
searchTrie.insert("Input_RMBReleased");
searchTrie.insert("Axis_MoveCameraRight");
searchTrie.insert("Axis_MoveCameraForward");
searchTrie.insert("Input_ZoomCameraIn");
searchTrie.insert("Input_ZoomCameraOut");
searchTrie.insert("Input_EnableCameraFreeLook");
searchTrie.insert("Input_DisableCameraFreeLook");
searchTrie.insert("Input_ResetCameraRotationToOriginal");
searchTrie.insert("Input_ResetCameraZoomToOriginal");
searchTrie.insert("Input_ResetCameraRotationAndZoomToOriginal");
searchTrie.insert("Input_OpenTeamChat");
searchTrie.insert("Input_OpenAllChat");
searchTrie.insert("Input_Cancel");
searchTrie.insert("Input_QuitGame");
searchTrie.insert("Input_ToggleDevelopmentCheatWidget");
searchTrie.insert("Input_OpenCommanderSkillTree");
searchTrie.insert("Input_CloseCommanderSkillTree");
searchTrie.insert("Input_ToggleCommanderSkillTree");
searchTrie.insert("Input_AssignControlGroupButtonPressed_0");
searchTrie.insert("Input_AssignControlGroupButtonPressed_1");
searchTrie.insert("Input_AssignControlGroupButtonPressed_2");
searchTrie.insert("Input_AssignControlGroupButtonPressed_3");
searchTrie.insert("Input_AssignControlGroupButtonPressed_4");
searchTrie.insert("Input_AssignControlGroupButtonPressed_5");
searchTrie.insert("Input_AssignControlGroupButtonPressed_6");
searchTrie.insert("Input_AssignControlGroupButtonPressed_7");
searchTrie.insert("Input_AssignControlGroupButtonPressed_8");
searchTrie.insert("Input_AssignControlGroupButtonPressed_9");
searchTrie.insert("Input_SelectControlGroupButtonPressed_0");
searchTrie.insert("Input_SelectControlGroupButtonPressed_1");
searchTrie.insert("Input_SelectControlGroupButtonPressed_2");
searchTrie.insert("Input_SelectControlGroupButtonPressed_3");
searchTrie.insert("Input_SelectControlGroupButtonPressed_4");
searchTrie.insert("Input_SelectControlGroupButtonPressed_5");
searchTrie.insert("Input_SelectControlGroupButtonPressed_6");
searchTrie.insert("Input_SelectControlGroupButtonPressed_7");
searchTrie.insert("Input_SelectControlGroupButtonPressed_8");
searchTrie.insert("Input_SelectControlGroupButtonPressed_9");
searchTrie.insert("Input_SelectControlGroupButtonReleased_0");
searchTrie.insert("Input_SelectControlGroupButtonReleased_1");
searchTrie.insert("Input_SelectControlGroupButtonReleased_2");
searchTrie.insert("Input_SelectControlGroupButtonReleased_3");
searchTrie.insert("Input_SelectControlGroupButtonReleased_4");
searchTrie.insert("Input_SelectControlGroupButtonReleased_5");
searchTrie.insert("Input_SelectControlGroupButtonReleased_6");
searchTrie.insert("Input_SelectControlGroupButtonReleased_7");
searchTrie.insert("Input_SelectControlGroupButtonReleased_8");
searchTrie.insert("Input_SelectControlGroupButtonReleased_9");
searchTrie.insert("On_Mouse_Move_X");
searchTrie.insert("On_Mouse_Move_Y");
searchTrie.insert("GetCameraMovementMultiplierDueToZoom");
searchTrie.insert("MoveCameraForward");
searchTrie.insert("MoveCameraRight");
searchTrie.insert("MoveIfAtEdgeOfScreen");
searchTrie.insert("ShouldResetCameraRotation");
searchTrie.insert("ShouldResetCameraZoom");
searchTrie.insert("OnAssignControlGroupButtonPressed");
searchTrie.insert("OnSelectControlGroupButtonPressed");
searchTrie.insert("OnSelectControlGroupButtonReleased");
searchTrie.insert("OnSelectControlGroupButtonSinglePress");
searchTrie.insert("OnSelectControlGroupButtonDoublePress");
searchTrie.insert("CreateControlGroup");
searchTrie.insert("SelectControlGroup");
searchTrie.insert("SnapViewToControlGroup");
searchTrie.insert("GetNumCtrlGroupMembers");
searchTrie.insert("InitCtrlGroups");
searchTrie.insert("WasDoublePress");
searchTrie.insert("RotateGhost");
searchTrie.insert("GhostRotStandard_GetAngleFalloffMultiplier");
searchTrie.insert("GhostRotStandard_GetDistanceFalloffMultiplier");
searchTrie.insert("GhostRotStandard_AssignNeutralDirectionYawRot");
searchTrie.insert("GhostRotStandard_AssignYawRotForClockwiseTypeMouseMovement");
searchTrie.insert("GhostRotStandard_AssignYawRotForCounterClockwiseTypeMouseMovement");
searchTrie.insert("GetMouseCoords");
searchTrie.insert("SpawnGhostBuilding");
searchTrie.insert("IsHoveringUIElement");
searchTrie.insert("WasMouseClick");
searchTrie.insert("LineTraceUnderMouse");
searchTrie.insert("LineTraceUnderMouse");
searchTrie.insert("MoveGhostBuilding");
searchTrie.insert("CanPlaceBuilding");
searchTrie.insert("CanPlaceBuilding");
searchTrie.insert("Server_PlaceBuilding");
searchTrie.insert("Client_OnPlaceBuildingSuccess");
searchTrie.insert("Client_OnBuildsInTabPlaceBuildingSuccess");
searchTrie.insert("CancelGhost");
searchTrie.insert("GetWidget");
searchTrie.insert("ShowWidget");
searchTrie.insert("ShowPreviousWidget");
searchTrie.insert("HideWidget");
searchTrie.insert("IsWidgetBlueprintSet");
searchTrie.insert("GetWidgetZOrder");
searchTrie.insert("GetBuildingIndex");
searchTrie.insert("OnRep_PlayerState");
searchTrie.insert("SetupReferences");
searchTrie.insert("AssignGI");
searchTrie.insert("AssignPS");
searchTrie.insert("Delay)");
searchTrie.insert("IsContextActionPending");
searchTrie.insert("IsGlobalSkillsPanelAbilityPending");
searchTrie.insert("SendMouseLocToMarqueeHUD");
searchTrie.insert("OnLMBReleased_WasUIButtonClicked");
searchTrie.insert("OnRMBReleased_WasUIButtonClicked");
searchTrie.insert("IsASelectable");
searchTrie.insert("SetSpringArmTargetArmLength");
searchTrie.insert("AdjustWorldWidgetLocations");
searchTrie.insert("SingleSelect");
searchTrie.insert("ShouldPlaySelectionSound");
searchTrie.insert("PlaySelectablesSelectionSound");
searchTrie.insert("ShouldPlayMoveCommandSound");
searchTrie.insert("PlayMoveCommandSound");
searchTrie.insert("ShouldPlayCommandSound");
searchTrie.insert("PlayCommandSound");
searchTrie.insert("ShouldPlayChangeRallyPointSound");
searchTrie.insert("PlayChangeRallyPointSound");
searchTrie.insert("ShouldPlayChatMessageReceivedSound");
searchTrie.insert("PlayChatMessageReceivedSound");
searchTrie.insert("ShouldPlayZeroHealthSound");
searchTrie.insert("PlayZeroHealthSound");
searchTrie.insert("SetPerformMarqueeNextTick");
searchTrie.insert("IsGlobalSkillsPanelAbilityUsable");
searchTrie.insert("IsGlobalSkillsPanelAbilityUsable");
searchTrie.insert("IsGlobalSkillsPanelAbilityUsable");
searchTrie.insert("IsGlobalSkillsPanelAbilityUsable");
searchTrie.insert("HighlightButton");
searchTrie.insert("UnhighlightHighlightedButton");
searchTrie.insert("UpdateMouseAppearance");
searchTrie.insert("GetMouseCursor_NoAbilitiesPending");
searchTrie.insert("SetMouseCursor");
searchTrie.insert("SetMouseDecal");
searchTrie.insert("SetContextDecal");
searchTrie.insert("SetContextDecalType");
searchTrie.insert("SetCommanderAbilityDecalType");
searchTrie.insert("ResetMouseAppearance");
searchTrie.insert("HideContextDecal");
searchTrie.insert("UpdateSelectableUnderMouse");
searchTrie.insert("UnhoverPreviouslyHoveredSelectable");
searchTrie.insert("UpdateMouseDecalLocation");
searchTrie.insert("Server_GiveLayFoundationCommand");
searchTrie.insert("PrepareContextCommandRPC");
searchTrie.insert("PrepareContextCommandRPC");
searchTrie.insert("Server_IssueContextCommand");
searchTrie.insert("Server_IssueLocationTargetingContextCommand");
searchTrie.insert("Server_IssueInstantContextCommand");
searchTrie.insert("Server_IssueInstantUseInventoryItemCommand");
searchTrie.insert("Server_IssueLocationTargetingUseInventoryItemCommand");
searchTrie.insert("Server_IssueSelectableTargetingUseInventoryItemCommand");
searchTrie.insert("IssueTargetRequiredContextCommandChecked");
searchTrie.insert("IssueLocationRequiredContextCommandChecked");
searchTrie.insert("IssueInstantUseInventoryItemCommandChecked");
searchTrie.insert("IssueUseInventoryItemCommandChecked");
searchTrie.insert("IssueUseInventoryItemCommandChecked");
searchTrie.insert("IssueContextCommand");
searchTrie.insert("IssueContextCommand");
searchTrie.insert("IssueInstantContextCommand");
searchTrie.insert("ExecuteCommanderAbility");
searchTrie.insert("ExecuteCommanderAbility");
searchTrie.insert("ExecuteCommanderAbility");
searchTrie.insert("ExecuteCommanderAbility");
searchTrie.insert("ExecuteCommanderAbility");
searchTrie.insert("Server_RequestExecuteCommanderAbility");
searchTrie.insert("Server_RequestExecuteCommanderAbility_PlayerTargeting");
searchTrie.insert("Server_RequestExecuteCommanderAbility_SelectableTargeting");
searchTrie.insert("Server_RequestExecuteCommanderAbility_LocationTargeting");
searchTrie.insert("Server_RequestExecuteCommanderAbility_LocationOrSelectableTargeting_UsingSelectable");
searchTrie.insert("Server_RequestExecuteCommanderAbility_LocationOrSelectableTargeting_UsingLocation");
searchTrie.insert("CancelPendingContextCommand");
searchTrie.insert("CancelPendingGlobalSkillsPanelAbility");
searchTrie.insert("RemoveSelection");
searchTrie.insert("RemoveSelection");
searchTrie.insert("HasSelection");
searchTrie.insert("HasMultipleSelected");
searchTrie.insert("IsControlledByThis");
searchTrie.insert("IsControlledByThis");
searchTrie.insert("IsSelectionControlledByThis");
searchTrie.insert("ToSelectablePtr");
searchTrie.insert("IsNeutral");
searchTrie.insert("OnRightClickCommand");
searchTrie.insert("FillCommandWithIDs");
searchTrie.insert("PlayRightClickCommandParticlesAndSound");
searchTrie.insert("Server_IssueRightClickCommand");
searchTrie.insert("Server_IssueRightClickCommandOnInventoryItem");
searchTrie.insert("IssueRightClickCommand");
searchTrie.insert("SetupFogOfWarManager");
searchTrie.insert("SetupGhostPool");
searchTrie.insert("SetupExternalReferences");
searchTrie.insert("SetupPlayerID");
searchTrie.insert("InitHUD");
searchTrie.insert("SetupMouseCursorProperties");
searchTrie.insert("SetStartingSpotInMatch");
searchTrie.insert("Server_SetupForMatch");
searchTrie.insert("Client_SetupForMatch");
searchTrie.insert("Server_AckSetupForMatchComplete");
searchTrie.insert("Server_BeginPlay");
searchTrie.insert("Client_OnPIEStarted");
searchTrie.insert("OnMatchStarted");
searchTrie.insert("NotifyOfBuildingReachingZeroHealth");
searchTrie.insert("NotifyOfInfantryReachingZeroHealth");
searchTrie.insert("NotifyOfInfantryEnteringGarrison");
searchTrie.insert("NotifyOfInventoryItemBeingPickedUp");
searchTrie.insert("ServerUnloadSingleUnitFromGarrison");
searchTrie.insert("ServerUnloadGarrison");
searchTrie.insert("Server_RequestUnloadSingleUnitFromGarrison");
searchTrie.insert("Server_RequestUnloadGarrison");
searchTrie.insert("RemoveFromSelected");
searchTrie.insert("OnInventoryIndicesOfPrimarySelectedSwapped");
searchTrie.insert("OnMarqueeSelect");
searchTrie.insert("OnPersistentTabButtonLeftClicked");
searchTrie.insert("OnPersistentTabButtonRightClicked");
searchTrie.insert("OnContextButtonClick");
searchTrie.insert("OnGlobalSkillsPanelButtonLeftClicked");
searchTrie.insert("OnPlayerTargetingPanelButtonLeftClicked");
searchTrie.insert("OnInventorySlotButtonLeftClicked");
searchTrie.insert("OnInventorySlotButtonRightClicked");
searchTrie.insert("OnShopSlotButtonLeftClicked");
searchTrie.insert("UnhoverHoveredUIElement");
searchTrie.insert("ShouldIgnoreMouseHoverEvents");
searchTrie.insert("ShouldIgnoreButtonUpOrDownEvents");
searchTrie.insert("OnButtonHovered");
searchTrie.insert("OnButtonUnhovered");
searchTrie.insert("ShowUIButtonHoveredImage");
searchTrie.insert("ShowUIButtonPressedImage_Mouse");
searchTrie.insert("HideUIButtonPressedImage_Mouse");
searchTrie.insert("OnMenuWarningHappened");
searchTrie.insert("ShouldShowMenuWarningMessage");
searchTrie.insert("PlayCameraShake");
searchTrie.insert("Server_RequestBuyItemFromShop");
searchTrie.insert("Server_SellInventoryItem");
searchTrie.insert("PauseGameAndShowPauseMenu");
searchTrie.insert("ResumePlay");
searchTrie.insert("SetGamePaused");
searchTrie.insert("OnLevelUp_LastForEvent");
searchTrie.insert("Server_RequestAquireCommanderSkill");
searchTrie.insert("IsPlacingGhost");
searchTrie.insert("IsMarqueeActive");
searchTrie.insert("SetupCameraReferences");
searchTrie.insert("GetGhostType");
searchTrie.insert("GetTeam");
searchTrie.insert("GetPS");
searchTrie.insert("SetPS");
searchTrie.insert("GetGS");
searchTrie.insert("SetGS");
searchTrie.insert("GetFactionInfo");
searchTrie.insert("GetGI");
searchTrie.insert("GetSelected");
searchTrie.insert("GetCurrentSelected");
searchTrie.insert("GetPoolingManager");
searchTrie.insert("GetFogOfWarManager");
searchTrie.insert("GetHUDWidget");
searchTrie.insert("IsSelected");
searchTrie.insert("AddToSelectedIDs");
searchTrie.insert("RemoveFromSelectedIDs");
searchTrie.insert("IsObserver");
searchTrie.insert("FailedToSpawnPawn");
searchTrie.insert("DisableHUD");
searchTrie.insert("IsChatInputOpen");
searchTrie.insert("OpenChatInput");
searchTrie.insert("CloseChatInput");
searchTrie.insert("Server_SendInMatchChatMessageToEveryone");
searchTrie.insert("Server_SendInMatchChatMessageToTeam");
searchTrie.insert("Client_OnAllChatInMatchChatMessageReceived");
searchTrie.insert("Client_OnTeamChatInMatchChatMessageReceived");
searchTrie.insert("GetLobbySlotIndex");
searchTrie.insert("SetLobbySlotIndexForHost");
searchTrie.insert("Client_OnTryJoinButLobbyFull");
searchTrie.insert("Client_ShowLobbyWidget");
searchTrie.insert("Server_ChangeTeamInLobby");
searchTrie.insert("Server_ChangeFactionInLobby");
searchTrie.insert("Server_ChangeStartingSpotInLobby");
searchTrie.insert("Client_OnChangeTeamInLobbySuccess");
searchTrie.insert("Client_OnChangeFactionInLobbySuccess");
searchTrie.insert("Client_OnChangeStartingSpotInLobbySuccess");
searchTrie.insert("Client_OnChangeTeamInLobbyFailed");
searchTrie.insert("Client_OnChangeFactionInLobbyFailed");
searchTrie.insert("Client_OnChangeStartingSpotInLobbyFailed");
searchTrie.insert("Server_SendLobbyChatMessage");
searchTrie.insert("Server_AckPSSetupOnClient");
searchTrie.insert("Server_AckLevelStreamedIn");
searchTrie.insert("SetupCameraCurves");
searchTrie.insert("AssignViewportValues");
searchTrie.insert("SetCameraKeyboardMoveSpeed");
searchTrie.insert("SetCameraMouseMoveSpeed");
searchTrie.insert("SetCameraMaxSpeed");
searchTrie.insert("SetCameraAcceleration");
searchTrie.insert("SetEnableCameraMovementLag");
searchTrie.insert("SetCameraMovementLagSpeed");
searchTrie.insert("SetCameraTurningBoost");
searchTrie.insert("SetCameraDeceleration");
searchTrie.insert("SetCameraEdgeMovementThreshold");
searchTrie.insert("SetCameraZoomIncrementalAmount");
searchTrie.insert("SetCameraZoomSpeed");
searchTrie.insert("SetMMBLookYawSensitivity");
searchTrie.insert("SetMMBLookPitchSensitivity");
searchTrie.insert("SetInvertMMBYawLook");
searchTrie.insert("SetInvertMMBPitchLook");
searchTrie.insert("SetEnableMMBLookLag");
searchTrie.insert("SetMMBLookLagAmount");
searchTrie.insert("SetMouseMovementThreshold");
searchTrie.insert("SetDefaultCameraYaw");
searchTrie.insert("SetDefaultCameraPitch");
searchTrie.insert("SetDefaultCameraZoomAmount");
searchTrie.insert("SetResetCameraToDefaultRate");
searchTrie.insert("SetDoubleClickTime");
searchTrie.insert("SetGhostRotationRadius");
searchTrie.insert("SetGhostRotationSpeed");
searchTrie.insert("OnDevelopmentWidgetRequest");
searchTrie.insert("OnDevelopmentWidgetRequest");
searchTrie.insert("ExecuteDevelopmentInputInterceptAction_LMBPress");
searchTrie.insert("ExecuteDevelopmentInputInterceptAction_LMBRelease");
searchTrie.insert("ExecuteDevelopmentInputInterceptAction_RMBPress");
searchTrie.insert("Server_DealDamageToSelectable");
searchTrie.insert("Server_AwardExperience");
searchTrie.insert("Server_AwardExperienceToPlayer");
searchTrie.insert("Server_GiveInventoryItem");
searchTrie.insert("");
searchTrie.insert("TeamTag");
searchTrie.insert("Team");
searchTrie.insert("Type");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HoveredUIElement");
searchTrie.insert("HighlightedButton");
searchTrie.insert("HoveredUserWidget");
searchTrie.insert("AccumulatedTimeSpentHoveringUIElement");
searchTrie.insert("TimeSpentNotHoveringUIElement");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("AccumulatedTimeSpentHoveringSelectable");
searchTrie.insert("TimeSpentNotHoveringSelectable");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Faction");
searchTrie.insert("");
searchTrie.insert("PendingKeyRebind_Action");
searchTrie.insert("PendingKeyRebind_Axis");
searchTrie.insert("PendingKeyRebind_bWaitingForConfirmation");
searchTrie.insert("PendingKeyRebind_PressedModifierFlags_Left");
searchTrie.insert("PendingKeyRebind_PressedModifierFlags_Right");
searchTrie.insert("PendingKeyRebind_KeyBindingsWidget");
searchTrie.insert("PendingKeyRebind_TimeSpentTryingToCancel");
searchTrie.insert("");
searchTrie.insert("LastSelectControlGroupButtonReleased");
searchTrie.insert("LastSelectControlGroupButtonReleaseTime");
searchTrie.insert("bWasLastSelectControlGroupButtonPressADoublePress");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bNeedToRecordGhostLocOnNextTick");
searchTrie.insert("bIsGhostRotationActive");
searchTrie.insert("GhostScreenSpaceLoc");
searchTrie.insert("GhostRotationRadius");
searchTrie.insert("GhostRotationSpeed");
searchTrie.insert("GhostRotationDirection");
searchTrie.insert("GhostAccumulatedMovementTowardsDirection");
searchTrie.insert("bIsCameraFreeLookEnabled");
searchTrie.insert("MouseLocLastFrame");
searchTrie.insert("MouseLocThisFrame");
searchTrie.insert("MaxLineTraceDistance");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HitResult");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsLMBPressed");
searchTrie.insert("bWantsMarquee");
searchTrie.insert("bIsMarqueeActive");
searchTrie.insert("ButtonPressedOnLMBPressed");
searchTrie.insert("ButtonPressedOnRMBPressed");
searchTrie.insert("MouseMovement");
searchTrie.insert("MouseMovementThreshold");
searchTrie.insert("PlayerID");
searchTrie.insert("");
searchTrie.insert("DefaultCursor");
searchTrie.insert("ScreenLocationCurrentCursor");
searchTrie.insert("CurrentCursor");
searchTrie.insert("");
searchTrie.insert("PendingContextAction");
searchTrie.insert("PendingContextActionUseMethod");
searchTrie.insert("GhostInstigatorID");
searchTrie.insert("PendingContextActionAuxilleryData");
searchTrie.insert("PendingContextActionMoreAuxilleryData");
searchTrie.insert("bHasPrimarySelectedChanged");
searchTrie.insert("PendingContextActionAuxilleryDataPtr");
searchTrie.insert("PendingCommanderAbility");
searchTrie.insert("TimeOfLastSelection_Owned");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bShowingUIButtonPressedImage");
searchTrie.insert("UNKNOWN_PLAYER_NAME");
searchTrie.insert("LobbySlotIndex");
searchTrie.insert("CameraMoveSpeed");
searchTrie.insert("CameraEdgeMoveSpeed");
searchTrie.insert("CameraEdgeThreshold");
searchTrie.insert("CameraZoomIncrementalAmount");
searchTrie.insert("");
searchTrie.insert("CameraZoomSpeed");
searchTrie.insert("NumPendingScrollZooms");
searchTrie.insert("DefaultCameraRotation");
searchTrie.insert("DefaultCameraZoomAmount");
searchTrie.insert("ResetCameraCurve");
searchTrie.insert("ResetCameraToDefaultRate");
searchTrie.insert("ViewportSize_Y");
searchTrie.insert("bIsForwardBackwardCameraMovementKeyPressed");
searchTrie.insert("bIsResettingCameraRotation");
searchTrie.insert("MouseWheelZoomCurveAccumulatedTime");
searchTrie.insert("MouseWheelZoomCurveMax");
searchTrie.insert("bIsResettingCameraZoom");
searchTrie.insert("ResetCameraCurveAccumulatedTime");
searchTrie.insert("ResetCameraCurveMax");
searchTrie.insert("StartResetRotation");
searchTrie.insert("TargetResetRotation");
searchTrie.insert("StartZoomAmount");
searchTrie.insert("TargetZoomAmount");
searchTrie.insert("");
searchTrie.insert("Development_bIsLMBPressed");
searchTrie.insert("DevelopmentInputIntercept_LMBPress");
searchTrie.insert("DevelopmentInputIntercept_LMBRelease");
searchTrie.insert("DevelopmentInputIntercept_RMBPress");
searchTrie.insert("DevelopmentWidgetAuxilleryData");
searchTrie.insert("FUpgradeTypeArray");
searchTrie.insert("FUpgradeTypeArray");
searchTrie.insert("Array");
searchTrie.insert("FBuildingSet");
searchTrie.insert("GetSet");
searchTrie.insert("AddBuilding");
searchTrie.insert("RemoveBuilding");
searchTrie.insert("");
searchTrie.insert("FBuildingArray");
searchTrie.insert("GetArray");
searchTrie.insert("AddBuilding");
searchTrie.insert("RemoveBuilding");
searchTrie.insert("");
searchTrie.insert("ARTSPlayerState");
searchTrie.insert("ARTSPlayerState");
searchTrie.insert("BeginPlay");
searchTrie.insert("PreReplication");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("UpdateClosestDepots");
searchTrie.insert("GetProductionBuilding");
searchTrie.insert("GetReplicatedResourceVariable");
searchTrie.insert("void");
searchTrie.insert("GetReplicatedResourceOnRepFunction_DEPRECIATED");
searchTrie.insert("GetReplicatedResourceOnRepFunction");
searchTrie.insert("ResourceTypeToArrayIndex");
searchTrie.insert("ArrayIndexToResourceType");
searchTrie.insert("OnRep_ResourcesCash");
searchTrie.insert("OnRep_ResourcesSand");
searchTrie.insert("Server_PostResourceChange_Cash");
searchTrie.insert("Server_PostResourceChange_Sand");
searchTrie.insert("OnRep_Experience");
searchTrie.insert("OnLevelUp_NotLastForEvent");
searchTrie.insert("OnLevelUp_LastForEvent");
searchTrie.insert("InitIDQueue");
searchTrie.insert("Client_ShowHUDNotificationMessage");
searchTrie.insert("CanShowGameWarning");
searchTrie.insert("CanShowGameWarning");
searchTrie.insert("Client_OnGameWarningHappened");
searchTrie.insert("Client_OnGameWarningHappenedAbility");
searchTrie.insert("Client_OnGameWarningHappenedMissingResource");
searchTrie.insert("Client_OnGameWarningHappenedMissingHousingResource");
searchTrie.insert("Delay)");
searchTrie.insert("DoNothing");
searchTrie.insert("StartAbilitysCooldownTimer");
searchTrie.insert("OnItemAddedToAProductionQueue");
searchTrie.insert("OnItemRemovedFromAProductionQueue");
searchTrie.insert("OnBuildingPlaced");
searchTrie.insert("OnBuildingBuilt");
searchTrie.insert("OnBuildingZeroHealth");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("RemoveBuildingFromBuildingsContainer");
searchTrie.insert("OnUnitBuilt");
searchTrie.insert("OnUnitDestroyed");
searchTrie.insert("Setup_OnUnitDestroyed");
searchTrie.insert("Server_SetInitialValues");
searchTrie.insert("Multicast_SetInitialValues");
searchTrie.insert("SetStartLocation");
searchTrie.insert("Client_FinalSetup");
searchTrie.insert("BelongsToLocalPlayer");
searchTrie.insert("HasBeenDefeated");
searchTrie.insert("SetupUpgradeManager");
searchTrie.insert("BusyWaitForSetupToComplete");
searchTrie.insert("HasFullySetup");
searchTrie.insert("Server_SetInitialResourceAmounts");
searchTrie.insert("Server_AckFinalSetupComplete");
searchTrie.insert("Client_SetInitialResourceAmounts");
searchTrie.insert("GetBuildingResourceCost");
searchTrie.insert("GetUnitResourceCost");
searchTrie.insert("GetNumResources");
searchTrie.insert("HasEnoughResources");
searchTrie.insert("HasEnoughResourcesSpecific");
searchTrie.insert("HasEnoughResources");
searchTrie.insert("HasEnoughResources");
searchTrie.insert("HasEnoughResources");
searchTrie.insert("HasEnoughResources");
searchTrie.insert("HasEnoughResources");
searchTrie.insert("HasEnoughHousingResources");
searchTrie.insert("HasEnoughHousingResources");
searchTrie.insert("GainExperience");
searchTrie.insert("GetTotalExperience");
searchTrie.insert("GetRank");
searchTrie.insert("GetNumUnspentSkillPoints");
searchTrie.insert("RegisterCommanderSkillTreeNode");
searchTrie.insert("GetCommanderAbilityState");
searchTrie.insert("GetCommanderSkillTreeNodeType");
searchTrie.insert("GetCommanderAbilityObtainedRank");
searchTrie.insert("CanAffordCommanderAbilityAquireCost");
searchTrie.insert("ArePrerequisitesForNextCommanderAbilityRankMet");
searchTrie.insert("GetUnaquiredCommanderAbilities");
searchTrie.insert("CanAquireCommanderAbility");
searchTrie.insert("CanAquireCommanderAbility");
searchTrie.insert("AquireNextRankForCommanderAbility");
searchTrie.insert("AquireNextRankForCommanderAbility");
searchTrie.insert("AquireNextRankForCommanderAbilityInternal");
searchTrie.insert("Client_AquireNextRankForCommanderAbility");
searchTrie.insert("OnCommanderAbilityUse");
searchTrie.insert("OnCommanderAbilityCooledDown");
searchTrie.insert("GetActorToBuildFrom");
searchTrie.insert("GetBuildsInTabCompleteBuildings");
searchTrie.insert("OnBuildsInTabProductionComplete");
searchTrie.insert("OnGameEventHappened");
searchTrie.insert("OnGameWarningHappened");
searchTrie.insert("OnGameWarningHappened");
searchTrie.insert("TryShowGameWarning_NotEnoughResources");
searchTrie.insert("OnGameWarningHappened");
searchTrie.insert("OnGameWarningHappened");
searchTrie.insert("SpendResource");
searchTrie.insert("GainResource");
searchTrie.insert("SpendResources");
searchTrie.insert("GainResources");
searchTrie.insert("GainResources");
searchTrie.insert("GainResources");
searchTrie.insert("AdjustResources");
searchTrie.insert("ClampResource");
searchTrie.insert("AddHousingResourceConsumption");
searchTrie.insert("AddHousingResourceConsumption");
searchTrie.insert("RemoveHousingResourceConsumption");
searchTrie.insert("RemoveHousingResourceConsumption");
searchTrie.insert("AddHousingResourcesProvided");
searchTrie.insert("RemoveHousingResourcesProvided");
searchTrie.insert("GetNumPersistentQueues");
searchTrie.insert("GetNumSupportedProducers");
searchTrie.insert("GetProductionCapableBuildings");
searchTrie.insert("GetPersistentQueueSupportingBuildings");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("HasQueueSupport");
searchTrie.insert("IsAtSelectableCap");
searchTrie.insert("GenerateSelectableID");
searchTrie.insert("FreeUpSelectableID");
searchTrie.insert("Client_RegisterSelectableID");
searchTrie.insert("IsAtUniqueBuildingCap");
searchTrie.insert("IsAtUniqueUnitCap");
searchTrie.insert("IsAtUniqueSelectableCap");
searchTrie.insert("IsAllied");
searchTrie.insert("CanBeTargetedByAbility");
searchTrie.insert("GetCommandLocation");
searchTrie.insert("SetupProductionCapableBuildingsMap");
searchTrie.insert("GetBuildingGarrisonNetworkInfo");
searchTrie.insert("ShouldPlayBuildingBuiltSound_ConstructionComplete");
searchTrie.insert("PlayBuildingBuiltSound");
searchTrie.insert("ShouldPlayUnitBuiltSound");
searchTrie.insert("PlayUnitBuiltSound");
searchTrie.insert("OnDefeated");
searchTrie.insert("GetFI");
searchTrie.insert("SetFactionInfo");
searchTrie.insert("GetPC");
searchTrie.insert("SetPC");
searchTrie.insert("GetAIController");
searchTrie.insert("SetAIController");
searchTrie.insert("GetGS");
searchTrie.insert("SetGS");
searchTrie.insert("SetGI");
searchTrie.insert("GetBuildingIndex");
searchTrie.insert("GetPlayerIDAsInt");
searchTrie.insert("GetPlayerID");
searchTrie.insert("GetTeam");
searchTrie.insert("SetTeam");
searchTrie.insert("GetAffiliation");
searchTrie.insert("SetAffiliation");
searchTrie.insert("GetTeamTag");
searchTrie.insert("SetTeamTag");
searchTrie.insert("GetFaction");
searchTrie.insert("GetStartingSpot");
searchTrie.insert("AICon_SetFinalStartingSpot");
searchTrie.insert("GetBuildings");
searchTrie.insert("GetUnits");
searchTrie.insert("GetPrereqInfo");
searchTrie.insert("GetUpgradeManager");
searchTrie.insert("GetSelectableFromID");
searchTrie.insert("GetPlayerNormalImage");
searchTrie.insert("GetPlayerHoveredImage");
searchTrie.insert("GetPlayerPressedImage");
searchTrie.insert("GetHUDWidget");
searchTrie.insert("AssignPlayerImages");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingGarrisonNetworkInfos");
searchTrie.insert("");
searchTrie.insert("NumUnspentSkillPoints");
searchTrie.insert("Rank");
searchTrie.insert("AllCommanderSkillTreeNodes");
searchTrie.insert("CommanderAbilityToNodeType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AquiredCommanderAbilitiesTMap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bBelongsToLocalPlayer");
searchTrie.insert("bHasBeenDefeated");
searchTrie.insert("");
searchTrie.insert("IDAsInt");
searchTrie.insert("");
searchTrie.insert("Team");
searchTrie.insert("");
searchTrie.insert("Affiliation");
searchTrie.insert("Faction");
searchTrie.insert("StartingSpot");
searchTrie.insert("StartLocation");
searchTrie.insert("");
searchTrie.insert("NumQueuedSelectables");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingTypeToMissingUpgradePrereqs");
searchTrie.insert("UnitTypeToMissingUpgradePrereqs");
searchTrie.insert("UpgradeTypeToMissingUpgradePrereqs");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("IDQueue");
searchTrie.insert("IDQueueNum");
searchTrie.insert("");
searchTrie.insert("TimerHandle_GameWarning");
searchTrie.insert("FSelectableRootComponent2DShapeInfo");
searchTrie.insert("FSelectableRootComponent2DShapeInfo");
searchTrie.insert("FSelectableRootComponent2DShapeInfo");
searchTrie.insert("GetXAxisHalfDistance");
searchTrie.insert("GetYAxisHalfDistance");
searchTrie.insert("Data");
searchTrie.insert("ISelectable");
searchTrie.insert("Setup");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributes");
searchTrie.insert("GetBuildingAttributes");
searchTrie.insert("GetInfantryAttributes");
searchTrie.insert("GetAttackAttributes");
searchTrie.insert("GetContextMenu");
searchTrie.insert("GetBuildingAttributesModifiable");
searchTrie.insert("GetAttributesModifiable");
searchTrie.insert("GetAttackAttributesModifiable");
searchTrie.insert("SetupBuildInfo");
searchTrie.insert("SetupBuildInfo");
searchTrie.insert("CanClassGainExperience");
searchTrie.insert("GetRank");
searchTrie.insert("GetCurrentRankExperience");
searchTrie.insert("GetTotalExperienceRequiredForNextLevel");
searchTrie.insert("GetTotalExperienceRequiredForLevel");
searchTrie.insert("GainExperience");
searchTrie.insert("GetBounds");
searchTrie.insert("GetRootComponent2DCollisionInfo");
searchTrie.insert("OnSingleSelect");
searchTrie.insert("OnMarqueeSelect");
searchTrie.insert("OnCtrlGroupSelect");
searchTrie.insert("GetSelectableID");
searchTrie.insert("GetOwnersID");
searchTrie.insert("OnDeselect");
searchTrie.insert("OnRightClick");
searchTrie.insert("OnMouseHover");
searchTrie.insert("OnMouseUnhover");
searchTrie.insert("OnEnterMarqueeBox");
searchTrie.insert("OnExitMarqueeBox");
searchTrie.insert("GetHealth");
searchTrie.insert("GetHealthRef");
searchTrie.insert("SetHealth");
searchTrie.insert("GetTeam");
searchTrie.insert("GetTeamIndex");
searchTrie.insert("GetInfo");
searchTrie.insert("GetPrerequisites");
searchTrie.insert("GetCooldownRemaining");
searchTrie.insert("GetContextCooldowns");
searchTrie.insert("HasEnoughSelectableResources");
searchTrie.insert("GetAppliedGameTickCount");
searchTrie.insert("RegenSelectableResourcesFromGameTicks");
searchTrie.insert("OnAbilityUse");
searchTrie.insert("GetSightRadius");
searchTrie.insert("GetVisionInfo");
searchTrie.insert("GetBoundsLength");
searchTrie.insert("UpdateFogStatus");
searchTrie.insert("Security_CanBeClickedOn");
searchTrie.insert("IsInStealthMode");
searchTrie.insert("OnUpgradeComplete");
searchTrie.insert("GetProjectileBP");
searchTrie.insert("GetLocalPC");
searchTrie.insert("HasAttack");
searchTrie.insert("SetIsInvulnerable");
searchTrie.insert("GetMuzzleLocation");
searchTrie.insert("CanAquireTarget");
searchTrie.insert("GetSpecialRightClickActionTowardsBuildingInfo");
searchTrie.insert("GetSelectedMouseCursor_CanAttackHostileUnit");
searchTrie.insert("GetSelectedMouseCursor_CanAttackFriendlyUnit");
searchTrie.insert("GetSelectedMouseCursor_CanAttackHostileBuilding");
searchTrie.insert("GetSelectedMouseCursor_CanAttackFriendlyBuilding");
searchTrie.insert("OnRightClickCommand");
searchTrie.insert("OnRightClickCommand");
searchTrie.insert("IssueCommand_PickUpItem");
searchTrie.insert("IssueCommand_MoveTo");
searchTrie.insert("IssueCommand_RightClickOnResourceSpot");
searchTrie.insert("IssueCommand_SpecialBuildingTargetingAbility");
searchTrie.insert("IssueCommand_EnterGarrison");
searchTrie.insert("OnLayFoundationCommand");
searchTrie.insert("OnContextCommand");
searchTrie.insert("OnContextCommand");
searchTrie.insert("OnContextCommand");
searchTrie.insert("IssueCommand_UseInventoryItem");
searchTrie.insert("IssueCommand_UseInventoryItem");
searchTrie.insert("IssueCommand_UseInventoryItem");
searchTrie.insert("OnEnemyDestroyed");
searchTrie.insert("Client_OnLevelGained");
searchTrie.insert("GetProductionQueue");
searchTrie.insert("OnProductionCancelled");
searchTrie.insert("GetBuildingQueuePercentage");
searchTrie.insert("SetOnSpawnValues");
searchTrie.insert("SetSelectableIDAndGameTickCount");
searchTrie.insert("GetBodyLocationInfo");
searchTrie.insert("AttachParticles");
searchTrie.insert("AttachParticles");
searchTrie.insert("AttachParticles");
searchTrie.insert("RemoveAttachedParticles");
searchTrie.insert("RemoveAttachedParticles");
searchTrie.insert("OnContextMenuPlaceBuildingResult");
searchTrie.insert("OnWorkedOnBuildingConstructionComplete");
searchTrie.insert("Server_OnOwningPlayerDefeated");
searchTrie.insert("GetActorLocationSelectable");
searchTrie.insert("GetDistanceFromAnotherForAbilitySquared");
searchTrie.insert("GetDistanceFromLocationForAbilitySquared");
searchTrie.insert("Consume_BuildingTargetingAbilityInstigator");
searchTrie.insert("CanClassAcceptBuffsAndDebuffs");
searchTrie.insert("GetStaticBuffArray");
searchTrie.insert("GetTickableBuffArray");
searchTrie.insert("GetStaticDebuffArray");
searchTrie.insert("GetTickableDebuffArray");
searchTrie.insert("GetBuffState");
searchTrie.insert("GetBuffState");
searchTrie.insert("GetDebuffState");
searchTrie.insert("GetDebuffState");
searchTrie.insert("RegisterBuff");
searchTrie.insert("RegisterDebuff");
searchTrie.insert("RegisterBuff");
searchTrie.insert("RegisterDebuff");
searchTrie.insert("RemoveBuff");
searchTrie.insert("RemoveDebuff");
searchTrie.insert("RemoveBuff");
searchTrie.insert("RemoveDebuff");
searchTrie.insert("Client_RemoveBuffGivenOutcome");
searchTrie.insert("Client_RemoveDebuffGivenOutcome");
searchTrie.insert("Client_RemoveBuffGivenOutcome");
searchTrie.insert("Client_RemoveDebuffGivenOutcome");
searchTrie.insert("TakeDamageSelectable");
searchTrie.insert("HasZeroHealth");
searchTrie.insert("ApplyTempMoveSpeedMultiplier");
searchTrie.insert("RemoveTempMoveSpeedMultiplier");
searchTrie.insert("ApplyTempStealthModeEffect");
searchTrie.insert("RemoveTempStealthModeEffect");
searchTrie.insert("Selectable_GetGI");
searchTrie.insert("Selectable_GetPS");
searchTrie.insert("ShowTooltip");
searchTrie.insert("GetPersistentWorldWidget");
searchTrie.insert("GetSelectedWorldWidget");
searchTrie.insert("AdjustPersistentWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("AdjustSelectedWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("GetShopAttributes");
searchTrie.insert("OnItemPurchasedFromHere");
searchTrie.insert("IsAShopInRange");
searchTrie.insert("GetInventory");
searchTrie.insert("GetInventoryModifiable");
searchTrie.insert("OnInventoryItemUse");
searchTrie.insert("StartInventoryItemUseCooldownTimerHandle");
searchTrie.insert("PIE_IsForCPUPlayer");
searchTrie.insert("PIE_GetHumanOwnerIndex");
searchTrie.insert("PIE_GetCPUOwnerIndex");
searchTrie.insert("AdjustForUpgrades");
searchTrie.insert("ABuffAndDebuffManager");
searchTrie.insert("ABuffAndDebuffManager");
searchTrie.insert("Tick");
searchTrie.insert("TickSingleBuffOrDebuff");
searchTrie.insert("Dash_TryApplyTo");
searchTrie.insert("Dash_DoTick");
searchTrie.insert("Dash_OnRemoved");
searchTrie.insert("Haste_TryApplyTo");
searchTrie.insert("Haste_DoTick");
searchTrie.insert("Haste_OnRemoved");
searchTrie.insert("BasicHealOverTime_TryApplyTo");
searchTrie.insert("BasicHealOverTime_DoTick");
searchTrie.insert("BasicHealOverTime_OnRemoved");
searchTrie.insert("IncreasingHealOverTime_TryApplyTo");
searchTrie.insert("IncreasingHealOverTime_DoTick");
searchTrie.insert("IncreasingHealOverTime_OnRemoved");
searchTrie.insert("ThePlague_TryApplyTo");
searchTrie.insert("ThePlague_OnRemoved");
searchTrie.insert("CleansersMightOrWhatever_TryApplyTo");
searchTrie.insert("CleansersMightOrWhatever_DoTick");
searchTrie.insert("CleansersMightOrWhatever_OnRemoved");
searchTrie.insert("PainOverTime_TryApplyTo");
searchTrie.insert("PainOverTime_DoTick");
searchTrie.insert("PainOverTime_OnRemoved");
searchTrie.insert("Corruption_TryApplyTo");
searchTrie.insert("Corruption_DoTick");
searchTrie.insert("Corruption_OnRemoved");
searchTrie.insert("SealFate_TryApplyTo");
searchTrie.insert("SealFate_DoTick");
searchTrie.insert("SealFate_OnRemoved");
searchTrie.insert("TheCurse_TryApplyTo");
searchTrie.insert("TheCurse_DoTick");
searchTrie.insert("TheCurse_OnRemoved");
searchTrie.insert("NearInvulnerability_TryApplyTo");
searchTrie.insert("NearInvulnerability_DoTick");
searchTrie.insert("NearInvulnerability_OnRemoved");
searchTrie.insert("TempStealth_TryApplyTo");
searchTrie.insert("TempStealth_DoTick");
searchTrie.insert("TempStealth_OnRemoved");
searchTrie.insert("EatPumpkinEffect_TryApplyTo");
searchTrie.insert("EatPumpkinEffect_DoTick");
searchTrie.insert("EatPumpkinEffect_OnRemoved");
searchTrie.insert("Beserk_TryApplyTo");
searchTrie.insert("Beserk_DoTick");
searchTrie.insert("Beserk_OnRemoved");
searchTrie.insert("ACPUControllerTickManager");
searchTrie.insert("ACPUControllerTickManager");
searchTrie.insert("Tick");
searchTrie.insert("RegisterNewCPUPlayerAIController");
searchTrie.insert("NUM_CONTROLLER_ARRAY_ENTRIES");
searchTrie.insert("Index");
searchTrie.insert("AIControllers");
searchTrie.insert("NumAIControllers");
searchTrie.insert("FTileArray");
searchTrie.insert("GetTiles");
searchTrie.insert("GetTiles");
searchTrie.insert("SetTileVisibility");
searchTrie.insert("");
searchTrie.insert("FIntegerArray");
searchTrie.insert("Reserve");
searchTrie.insert("Emplace");
searchTrie.insert("GetArray");
searchTrie.insert("FIntegerArray");
searchTrie.insert("FIntegerArray");
searchTrie.insert("");
searchTrie.insert("AFogOfWarManager");
searchTrie.insert("AFogOfWarManager");
searchTrie.insert("Initialize");
searchTrie.insert("SetupReferences");
searchTrie.insert("SetupMapInfo");
searchTrie.insert("SetupTileInfo");
searchTrie.insert("SetupRenderingReferences");
searchTrie.insert("SetupTeamTempRevealEffects");
searchTrie.insert("Tick");
searchTrie.insert("BeginDestroy");
searchTrie.insert("GetGridCoords");
searchTrie.insert("GetGridCoords");
searchTrie.insert("GetGridCoords");
searchTrie.insert("GetFogStatusForLocation");
searchTrie.insert("GetFogStatusForLocation");
searchTrie.insert("GetFogStatusForLocation");
searchTrie.insert("GetTileIndex");
searchTrie.insert("ResetTeamVisibility");
searchTrie.insert("ComputeTeamVisibility");
searchTrie.insert("Client_HideAndRevealSelectables");
searchTrie.insert("Server_HideAndRevealSelectables");
searchTrie.insert("Server_StoreResourceSpotVisInfo");
searchTrie.insert("HideAndRevealTemporaries");
searchTrie.insert("Server_HideAndRevealInventoryItems");
searchTrie.insert("Server_StoreNonLocalTeamsInventoryItemVisInfo");
searchTrie.insert("Client_HideAndRevealInventoryItems");
searchTrie.insert("MuteAndUnmuteAudio");
searchTrie.insert("RevealFogAroundLocation");
searchTrie.insert("StoreTeamVisibility");
searchTrie.insert("RenderFogOfWar");
searchTrie.insert("FillTextureBuffer");
searchTrie.insert("UpdateTextureRegions");
searchTrie.insert("IsTileVisible");
searchTrie.insert("IsTileVisibleNotChecked");
searchTrie.insert("BitwiseOrOperator");
searchTrie.insert("BitwiseOrOperator");
searchTrie.insert("IsLocationVisible");
searchTrie.insert("IsLocationVisibleNotChecked");
searchTrie.insert("IsLocationLocallyVisible");
searchTrie.insert("IsLocationLocallyVisibleNotChecked");
searchTrie.insert("GetLocationVisibilityStatus");
searchTrie.insert("GetLocationVisibilityStatusLocally");
searchTrie.insert("GetLocationVisibilityStatusNotChecked");
searchTrie.insert("GetLocationVisibilityStatusLocallyNotChecked");
searchTrie.insert("IsProjectileVisible");
searchTrie.insert("OnBuildingPlaced");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("CreateTeamTemporaryRevealEffect");
searchTrie.insert("NumTeams");
searchTrie.insert("LocalPlayersTeam");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamTempRevealEffects");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MapCenter");
searchTrie.insert("MapDimensions");
searchTrie.insert("MapTileDimensions");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TextureBuffer");
searchTrie.insert("FogTexture");
searchTrie.insert("TextureRegions");
searchTrie.insert("MapDimensionsInverse");
searchTrie.insert("UHeavyTaskManager");
searchTrie.insert("Tick");
searchTrie.insert("GetStatId");
searchTrie.insert("GetTickableTickType");
searchTrie.insert("AsyncCapsuleOverlapTest");
searchTrie.insert("RegisterBuildingAttackComponent");
searchTrie.insert("UnregisterBuildingAttackComponent");
searchTrie.insert("GetOptimalBucket_BuildingAttackComponent");
searchTrie.insert("NUM_BUILDING_ATTACK_COMP_BUCKETS");
searchTrie.insert("CurrentBuildingAttackCompBucketForTick");
searchTrie.insert("BuildingAttackComps[NUM_BUILDING_ATTACK_COMP_BUCKETS]");
searchTrie.insert("BuildingAttackComp_TurretData");
searchTrie.insert("BuildingAttackComp_TurretData");
searchTrie.insert("GetAttackComponent");
searchTrie.insert("GetTraceDelegate");
searchTrie.insert("GetQueryParams");
searchTrie.insert("GetLocation");
searchTrie.insert("GetSweepRadius");
searchTrie.insert("AttackComponent");
searchTrie.insert("TraceDelegate");
searchTrie.insert("QueryParams");
searchTrie.insert("Location");
searchTrie.insert("SweepRadius");
searchTrie.insert("Array_BuildingAttackComp_TurretData");
searchTrie.insert("Array");
searchTrie.insert("FTaskManagerBucketInfo");
searchTrie.insert("FTaskManagerBucketInfo");
searchTrie.insert("FTaskManagerBucketInfo");
searchTrie.insert("BucketIndex");
searchTrie.insert("ArrayIndex");
searchTrie.insert("MultithreadedFogOfWarManager");
searchTrie.insert("Get");
searchTrie.insert("Setup");
searchTrie.insert("GetNumFogOfWarThreadsToCreate");
searchTrie.insert("OnGameThreadTick");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("RegisterTeamTemporaryRevealEffect");
searchTrie.insert("RevealTilesAroundLocation");
searchTrie.insert("GetLocationFogStatus");
searchTrie.insert("OnAllTasksComplete");
searchTrie.insert("AddRecentlyCreatedBuilding");
searchTrie.insert("WorldLocationToTilesIndex");
searchTrie.insert("GetFogGridCoords");
searchTrie.insert("GetFogGridCoords");
searchTrie.insert("BitwiseOrOperator");
searchTrie.insert("BitwiseOrOperator");
searchTrie.insert("IsLocationLocallyVisible");
searchTrie.insert("IsLocationVisibleNotChecked");
searchTrie.insert("IsSelectableOutsideFog");
searchTrie.insert("GetTileIndex");
searchTrie.insert("FogManager");
searchTrie.insert("TextureBuffer");
searchTrie.insert("RecentlyCreatedBuildings[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("RecentlyModifiedBuildings[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("RecentlyDestroyedBuildings[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TeamsInfantry[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("RecentlyCreatedTemporaryRevealEffects[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TilesArrays[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TeamVisibilityInfo[ProjectSettings::MAX_NUM_TEAMS][ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("LocalPlayersTeamIndex");
searchTrie.insert("NumTeams");
searchTrie.insert("ServerIdleThreads");
searchTrie.insert("ClientIdleThreads");
searchTrie.insert("TeamProgress[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TeamTilesShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("InfantryStatesShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("BuildingStatesShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("TemporaryRevealEffectsShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("InfantryStatesBasicShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("DestroyedBuildingsShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("VisibilityInfoShared[ProjectSettings::MAX_NUM_TEAMS]");
searchTrie.insert("DeltaTime");
searchTrie.insert("DeltaTimeNotThreadSafe");
searchTrie.insert("MapTileDimensions");
searchTrie.insert("MapCenter");
searchTrie.insert("MapDimensionsInverse");
searchTrie.insert("FogTexture");
searchTrie.insert("TextureRegions");
searchTrie.insert("FogOfWarMaterialInstance");
searchTrie.insert("ServerFogOfWarThread");
searchTrie.insert("ServerFogOfWarThread");
searchTrie.insert("OnTaskComplete");
searchTrie.insert("ClientFogOfWarThread");
searchTrie.insert("ClientFogOfWarThread");
searchTrie.insert("");
searchTrie.insert("Init");
searchTrie.insert("Run");
searchTrie.insert("Stop");
searchTrie.insert("Exit");
searchTrie.insert("ResetTileInfo");
searchTrie.insert("CalculateTeamVisibilityFromBuildings");
searchTrie.insert("CalculateTeamVisibilityFromInfantry");
searchTrie.insert("TickAndCalculateTeamVisibilityFromTemporaryRevealEffects");
searchTrie.insert("StoreTileVisibilityInfo");
searchTrie.insert("QueueRenderFogCommand");
searchTrie.insert("CalculateAndStoreSelectableVisibilityInfo");
searchTrie.insert("CalculateAndStoreProjectileVisibilityInfo");
searchTrie.insert("CalculateAndStoreParticleSystemVisibilityInfo");
searchTrie.insert("CalculateAndStoreInventoryItemVisibilityInfo");
searchTrie.insert("FogLock");
searchTrie.insert("Lock");
searchTrie.insert("TryLock");
searchTrie.insert("Unlock");
searchTrie.insert("LockObject");
searchTrie.insert("CalculationProgress");
searchTrie.insert("CalculationProgress");
searchTrie.insert("AdvanceNextTask");
searchTrie.insert("GetNextTeamIndexForStoringSelectableVisibilityInfo");
searchTrie.insert("GetNextTask");
searchTrie.insert("Lock");
searchTrie.insert("NextTask");
searchTrie.insert("NextTeamIndexForStoringSelectableVisibilityInfo");
searchTrie.insert("JobQueue");
searchTrie.insert("GetJob");
searchTrie.insert("BitField");
searchTrie.insert("TilesArray_NoLock");
searchTrie.insert("Array");
searchTrie.insert("ServerThreadArray");
searchTrie.insert("Array");
searchTrie.insert("Lock");
searchTrie.insert("ClientThreadArray");
searchTrie.insert("Array");
searchTrie.insert("Lock");
searchTrie.insert("InfantryFogInfo");
searchTrie.insert("InfantryFogInfo");
searchTrie.insert("WorldLocation");
searchTrie.insert("SightRadius");
searchTrie.insert("StealthRevealRadius");
searchTrie.insert("BuildingFogInfo");
searchTrie.insert("BuildingFogInfo");
searchTrie.insert("WorldLocation");
searchTrie.insert("SightRadius");
searchTrie.insert("StealthRevealRadius");
searchTrie.insert("SelectableID");
searchTrie.insert("FogStatus");
searchTrie.insert("FogLocationsIndices");
searchTrie.insert("InfantryFogInfoArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("InfantryFogInfoBasic");
searchTrie.insert("InfantryFogInfoBasic");
searchTrie.insert("WorldLocation");
searchTrie.insert("SelectableID");
searchTrie.insert("FogStatus");
searchTrie.insert("InfantryFogInfoFinal");
searchTrie.insert("TilesFogStatus");
searchTrie.insert("InfantryArray");
searchTrie.insert("Array");
searchTrie.insert("InfantryFogInfoBasicArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("BuildingFogInfoArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("BuildingFogInfoArrayBasic");
searchTrie.insert("Array");
searchTrie.insert("SelectableIDArray");
searchTrie.insert("Array");
searchTrie.insert("DestroyedBuildingArray");
searchTrie.insert("WasRecentlyDestroyed");
searchTrie.insert("SetBitToRecentlyDestroyed");
searchTrie.insert("SetBitToNotRecentlyDestroyed");
searchTrie.insert("AreAllFlagsReset");
searchTrie.insert("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]");
searchTrie.insert("TempRevealEffectArray");
searchTrie.insert("Array");
searchTrie.insert("ArrayLock");
searchTrie.insert("TempRevealEffectArray_NoLock");
searchTrie.insert("Array");
searchTrie.insert("TeamVisibilityInfoStruct");
searchTrie.insert("Array[ProjectSettings::MAX_NUM_SELECTABLES_PER_PLAYER]");
searchTrie.insert("ArrayLock");
searchTrie.insert("TilesArray");
searchTrie.insert("Array");
searchTrie.insert("Lock");
searchTrie.insert("FSuggestProjectileVelocityEntry");
searchTrie.insert("FSuggestProjectileVelocityEntry");
searchTrie.insert("GetDistance");
searchTrie.insert("Elem_2)");
searchTrie.insert("StartLocation");
searchTrie.insert("TargetLocation");
searchTrie.insert("Distance");
searchTrie.insert("FSuggestProjectileVelocityEntryContainer");
searchTrie.insert("FSuggestProjectileVelocityEntryContainer");
searchTrie.insert("Array");
searchTrie.insert("MAX_CONTAINER_ENTRIES");
searchTrie.insert("FProjectileArray");
searchTrie.insert("FProjectileArray");
searchTrie.insert("FProjectileArray");
searchTrie.insert("AddToStack");
searchTrie.insert("IsPoolEmpty");
searchTrie.insert("Pop");
searchTrie.insert("Last");
searchTrie.insert("");
searchTrie.insert("AObjectPoolingManager");
searchTrie.insert("AObjectPoolingManager");
searchTrie.insert("BeginPlay");
searchTrie.insert("GetNumForPool");
searchTrie.insert("GetInventoryItemInitialPoolSize_SM");
searchTrie.insert("GetInventoryItemInitialPoolSize_SK");
searchTrie.insert("IsFitForEnteringPool");
searchTrie.insert("IsFitForEnteringPool");
searchTrie.insert("Server_FireProjectileAtTarget");
searchTrie.insert("Client_FireProjectileAtTarget");
searchTrie.insert("Server_FireProjectileAtLocation");
searchTrie.insert("Client_FireProjectileAtLocation");
searchTrie.insert("Server_FireProjectileInDirection");
searchTrie.insert("Client_FireProjectileInDirection");
searchTrie.insert("AddToPool");
searchTrie.insert("AddProjectileBP");
searchTrie.insert("CreatePools");
searchTrie.insert("GetProjectileChecked");
searchTrie.insert("GetProjectileReference");
searchTrie.insert("GetProjectileFromPoolOrSpawnIfNeeded");
searchTrie.insert("NotifyOfSuggestProjectileVelocityFailing");
searchTrie.insert("LogWorstProjectileFrame");
searchTrie.insert("LogSuggestProjectileVelocityFails");
searchTrie.insert("PutInventoryItemInPool");
searchTrie.insert("PutInventoryItemInPool");
searchTrie.insert("PutItemInWorld");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CurrentFrameNumber");
searchTrie.insert("NumProjectilesSpawnedThisFrame");
searchTrie.insert("WorstProjectileFrame");
searchTrie.insert("WorstProjectileFrameNumber");
searchTrie.insert("SuggestProjectileVelocityFails");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bHasCreatedPools");
searchTrie.insert("FUpgradeTypeArrayPtrArray");
searchTrie.insert("Array");
searchTrie.insert("FUpgradeArray");
searchTrie.insert("AddCompletedUpgrade");
searchTrie.insert("GetArray");
searchTrie.insert("");
searchTrie.insert("AUpgradeManager");
searchTrie.insert("AUpgradeManager");
searchTrie.insert("BeginPlay");
searchTrie.insert("SetupReferences");
searchTrie.insert("CreateUpgradeClassesAndPopulateUnresearchedArray");
searchTrie.insert("SetupUpgradesCompleted");
searchTrie.insert("SetupHasUpgradePrerequisiteContainers");
searchTrie.insert("Delay)");
searchTrie.insert("Init");
searchTrie.insert("HasInited");
searchTrie.insert("OnUpgradePutInProductionQueue");
searchTrie.insert("OnUpgradeProductionStarted");
searchTrie.insert("OnUpgradeCancelledFromProductionQueue");
searchTrie.insert("OnUpgradeComplete");
searchTrie.insert("OnUpgradeComplete_UpdateSomeContainers");
searchTrie.insert("ApplyAllCompletedUpgrades");
searchTrie.insert("ApplyAllCompletedUpgrades");
searchTrie.insert("HasBeenFullyResearched");
searchTrie.insert("IsUpgradeQueued");
searchTrie.insert("HasResearchedAllUpgrades");
searchTrie.insert("Random_GetUnresearchedUpgrade");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TotalNumUpgradesResearched");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HasUpgradePrerequisite_Buildings");
searchTrie.insert("HasUpgradePrerequisite_Units");
searchTrie.insert("HasUpgradePrerequisite_Upgrades");
searchTrie.insert("bHasInited");
searchTrie.insert("FBuildingAnimState");
searchTrie.insert("FBuildingAnimState");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildingAnimPauseInfo");
searchTrie.insert("FBuildingAnimPauseInfo");
searchTrie.insert("StartTime");
searchTrie.insert("AnimationType");
searchTrie.insert("FConstructionProgressInfo");
searchTrie.insert("FConstructionProgressInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ABuilding");
searchTrie.insert("ABuilding");
searchTrie.insert("PostLoad");
searchTrie.insert("PreInitializeComponents");
searchTrie.insert("PostInitializeComponents");
searchTrie.insert("RunStartOfBeginPlayLogic");
searchTrie.insert("BeginPlay");
searchTrie.insert("OnRep_ID");
searchTrie.insert("OnRep_CreationMethod");
searchTrie.insert("OnRep_Owner");
searchTrie.insert("OnRep_GameTickCountOnConstructionComplete");
searchTrie.insert("OnRep_AnimationState");
searchTrie.insert("PlayAnimInternal");
searchTrie.insert("Setup");
searchTrie.insert("SetupSelectionInfo");
searchTrie.insert("AdjustForUpgrades");
searchTrie.insert("PutAbilitiesOnInitialCooldown");
searchTrie.insert("SetupSelectionDecal");
searchTrie.insert("SetMeshColors");
searchTrie.insert("SetupWidgetComponents");
searchTrie.insert("SetupBuildingAttackComponents");
searchTrie.insert("SetupInitialConstructionValues");
searchTrie.insert("Tick");
searchTrie.insert("ProgressSinkingIntoGround");
searchTrie.insert("OnRep_RallyPointLocation");
searchTrie.insert("OnRep_ConstructionProgressInfo");
searchTrie.insert("ProgressConstruction");
searchTrie.insert("Server_OnConstructionComplete");
searchTrie.insert("Client_SetAppearanceForConstructionComplete");
searchTrie.insert("Client_FinalizeConstructionComplete");
searchTrie.insert("Client_OnConstructionComplete");
searchTrie.insert("SetInitialBuildingVisibility");
searchTrie.insert("SetInitialBuildingVisibilityV2");
searchTrie.insert("SetBuildingVisibility");
searchTrie.insert("SetBuildingVisibilityV2");
searchTrie.insert("HideBuilding");
searchTrie.insert("OnEnterFogOfWar");
searchTrie.insert("OnExitFogOfWar");
searchTrie.insert("PlayJustPlacedParticles");
searchTrie.insert("PlayJustPlacedSound");
searchTrie.insert("InitProductionQueues");
searchTrie.insert("Server_SetBeingBuilt");
searchTrie.insert("PlayBeingConstructedParticles");
searchTrie.insert("StopBeingConstructedParticles");
searchTrie.insert("PlayBeingConstructedSound");
searchTrie.insert("StopBeingConstructedSound");
searchTrie.insert("ActivateAttackComponents");
searchTrie.insert("PlayAnimation");
searchTrie.insert("PauseAnimation");
searchTrie.insert("UnpauseAnimation");
searchTrie.insert("DoNothing");
searchTrie.insert("IsSelectableSelected");
searchTrie.insert("ShowSelectionDecal");
searchTrie.insert("ShowHoverDecal");
searchTrie.insert("HideSelectionDecal");
searchTrie.insert("IsStartingSelectable");
searchTrie.insert("IsFullyVisibleLocally");
searchTrie.insert("OnServer");
searchTrie.insert("OnClient");
searchTrie.insert("AreAnimationsPausedLocally");
searchTrie.insert("PreReplication");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("Delay)");
searchTrie.insert("DelayAmount)");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("GetType");
searchTrie.insert("GetFaction");
searchTrie.insert("IsInsideFogOfWar");
searchTrie.insert("GetRemainingBuildTime");
searchTrie.insert("GetFinalLocation");
searchTrie.insert("IsConstructionComplete");
searchTrie.insert("IsBeingBuilt");
searchTrie.insert("CanAcceptBuilder");
searchTrie.insert("CanAcceptBuilderChecked");
searchTrie.insert("OnWorkerGained");
searchTrie.insert("OnWorkerLost");
searchTrie.insert("IsDropPointFor");
searchTrie.insert("GetInitialMoveLocation");
searchTrie.insert("GetRallyPointLocation");
searchTrie.insert("GetProducedUnitInitialBehavior");
searchTrie.insert("CanChangeRallyPoint");
searchTrie.insert("GetClosestResourceSpot");
searchTrie.insert("Server_ChangeRallyPointLocation");
searchTrie.insert("ChangeRallyPointLocation");
searchTrie.insert("GetPS");
searchTrie.insert("GetGS");
searchTrie.insert("GetPC");
searchTrie.insert("GetGhostBP");
searchTrie.insert("GetBoxComponent");
searchTrie.insert("GetMesh");
searchTrie.insert("GetFogLocations");
searchTrie.insert("CheckAnimationProperties");
searchTrie.insert("VerifyAllAnimNotifiesArePresentOnMontage");
searchTrie.insert("GetPersistentProductionQueue");
searchTrie.insert("GetPersistentProductionQueue");
searchTrie.insert("GetContextProductionQueue");
searchTrie.insert("Server_OnProductionRequestBuilding");
searchTrie.insert("Server_OnProductionRequestUnit");
searchTrie.insert("Server_OnProductionRequestUpgrade");
searchTrie.insert("Server_OnProductionRequest");
searchTrie.insert("Client_StartProductionBuilding");
searchTrie.insert("Client_StartProductionUnit");
searchTrie.insert("Client_StartProductionUpgrade");
searchTrie.insert("Client_StartProduction");
searchTrie.insert("Client_OnBuildingAddedToProductionQueue");
searchTrie.insert("Client_OnUnitAddedToProductionQueue");
searchTrie.insert("Client_OnUpgradeAddedToProductionQueue");
searchTrie.insert("Client_OnItemAddedToProductionQueue");
searchTrie.insert("Server_OnProductionComplete_Context");
searchTrie.insert("Server_OnProductionComplete_Persistent");
searchTrie.insert("Server_OnProductionComplete_Inner");
searchTrie.insert("OnUnitProductionComplete");
searchTrie.insert("AnimNotify_OnDoorFullyOpen");
searchTrie.insert("SpawnUnit");
searchTrie.insert("Server_OnProductionCompletePart2_Persistent");
searchTrie.insert("Server_OnProductionCompletePart2_Context");
searchTrie.insert("Server_OnProductionCompletePart2_Inner");
searchTrie.insert("Client_OnProductionComplete");
searchTrie.insert("Client_OnProductionQueueTimerHandleFinished_Context");
searchTrie.insert("Client_OnProductionQueueTimerHandleFinished_Persistent");
searchTrie.insert("AICon_QueueProduction");
searchTrie.insert("AICon_QueueProduction");
searchTrie.insert("AICon_QueueProductionInner");
searchTrie.insert("AICon_OnQueueProductionComplete_Persistent");
searchTrie.insert("AICon_OnQueueProductionComplete_Context");
searchTrie.insert("AICon_OnQueueProductionComplete_Inner");
searchTrie.insert("AICon_OnProductionCompletePart2_Persistent");
searchTrie.insert("AICon_OnProductionCompletePart2_Context");
searchTrie.insert("AICon_OnProductionCompletePart2_Inner");
searchTrie.insert("GetBounds");
searchTrie.insert("OnSingleSelect");
searchTrie.insert("OnMarqueeSelect");
searchTrie.insert("OnDeselect");
searchTrie.insert("GetSelectableID");
searchTrie.insert("Security_CanBeClickedOn");
searchTrie.insert("OnRightClick");
searchTrie.insert("OnMouseHover");
searchTrie.insert("OnMouseUnhover");
searchTrie.insert("GetTeam");
searchTrie.insert("GetTeamIndex");
searchTrie.insert("GetContextMenu");
searchTrie.insert("GetInfo");
searchTrie.insert("GetPrerequisites");
searchTrie.insert("GetCooldownRemaining");
searchTrie.insert("OnContextCommand");
searchTrie.insert("OnContextCommand");
searchTrie.insert("OnAbilityUse");
searchTrie.insert("GetBodyLocationInfo");
searchTrie.insert("UpdateFogStatus");
searchTrie.insert("GetVisionInfo");
searchTrie.insert("GetProductionQueue");
searchTrie.insert("SetOnSpawnValues");
searchTrie.insert("SetSelectableIDAndGameTickCount");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributes");
searchTrie.insert("GetBuildingAttributes");
searchTrie.insert("GetBuildingAttributesModifiable");
searchTrie.insert("GetHealth");
searchTrie.insert("GetBoundsLength");
searchTrie.insert("GetProjectileBP");
searchTrie.insert("HasAttack");
searchTrie.insert("CanClassGainExperience");
searchTrie.insert("GetRank");
searchTrie.insert("GetCurrentRankExperience");
searchTrie.insert("GetContextCooldowns");
searchTrie.insert("GetShopAttributes");
searchTrie.insert("GetInventory");
searchTrie.insert("GetTotalExperienceRequiredForNextLevel");
searchTrie.insert("GetLocalPC");
searchTrie.insert("OnItemPurchasedFromHere");
searchTrie.insert("GetOwnersID");
searchTrie.insert("GetActorLocationSelectable");
searchTrie.insert("IsInStealthMode");
searchTrie.insert("HasEnoughSelectableResources");
searchTrie.insert("ShowTooltip");
searchTrie.insert("OnEnemyDestroyed");
searchTrie.insert("AdjustPersistentWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("AdjustSelectedWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("Selectable_GetPS");
searchTrie.insert("GetSpecialRightClickActionTowardsBuildingInfo");
searchTrie.insert("CanAquireTarget");
searchTrie.insert("Selectable_GetGI");
searchTrie.insert("CanClassAcceptBuffsAndDebuffs");
searchTrie.insert("GetStaticBuffArray");
searchTrie.insert("GetStaticDebuffArray");
searchTrie.insert("GetTickableBuffArray");
searchTrie.insert("GetTickableDebuffArray");
searchTrie.insert("PIE_IsForCPUPlayer");
searchTrie.insert("PIE_GetHumanOwnerIndex");
searchTrie.insert("PIE_GetCPUOwnerIndex");
searchTrie.insert("SetupBuildingInfo");
searchTrie.insert("IsOwnedByCPUPlayer");
searchTrie.insert("TakeDamage");
searchTrie.insert("OnZeroHealthAnimFinished");
searchTrie.insert("RunOnZeroHealthAnimFinishedLogic");
searchTrie.insert("OnSinkingIntoGroundComplete");
searchTrie.insert("HasBeenCompletelyDestroyed");
searchTrie.insert("ServerCleanUp");
searchTrie.insert("ClientCleanUp");
searchTrie.insert("TornOff");
searchTrie.insert("DestroyBuilding");
searchTrie.insert("CallAbilityPreparationLogicAfterDelay");
searchTrie.insert("OnAbilityPreparationCooldownFinished");
searchTrie.insert("OnAbilityCooldownFinished");
searchTrie.insert("OnRep_Health");
searchTrie.insert("uint8");
searchTrie.insert("OnZeroHealth");
searchTrie.insert("ServerInitiateSinkingIntoGround");
searchTrie.insert("BeginSinkingIntoGround");
searchTrie.insert("OnProducerBuildingZeroHealth");
searchTrie.insert("CalculateBoundsHeight");
searchTrie.insert("Multicast_OnBuildingAttackComponentAttackMade");
searchTrie.insert("GetBuildingAttackComp_Turret");
searchTrie.insert("TimeToSpendSinking");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BeingWorkedOnAudioComp");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bHasRunOnConstructionCompleteLogic");
searchTrie.insert("");
searchTrie.insert("PausedAnimInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeIntoZeroHealthAnimThatAnimNotifyIs");
searchTrie.insert("HealthWhileUnderConstruction");
searchTrie.insert("DamageTakenWhileUnderConstruction");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HealthGainRate");
searchTrie.insert("SpawnLocation");
searchTrie.insert("");
searchTrie.insert("bIsBeingBuiltParticlesRunning");
searchTrie.insert("bRiseFromGround");
searchTrie.insert("TimeSpentBuilding");
searchTrie.insert("Building2)");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("TimeSpentSinking");
searchTrie.insert("TimerHandle_Destroy");
searchTrie.insert("BoundsHeight");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AGhostBuilding");
searchTrie.insert("AGhostBuilding");
searchTrie.insert("BeginPlay");
searchTrie.insert("SetRotationToDefault");
searchTrie.insert("FellOutOfWorld");
searchTrie.insert("SetInitialValues");
searchTrie.insert("SetDefaultRotation");
searchTrie.insert("OnEnterPool");
searchTrie.insert("OnExitPool");
searchTrie.insert("TrySetAppearanceForBuildLocation");
searchTrie.insert("SetRotationUsingOffset");
searchTrie.insert("GetType");
searchTrie.insert("GetBoxComponent");
searchTrie.insert("GetMesh");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Type");
searchTrie.insert("bIsAtBuildableLocation");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PlayersDefaultYawRot");
searchTrie.insert("FInfantryGarrisonStatus");
searchTrie.insert("FInfantryGarrisonStatus");
searchTrie.insert("SetEnteredSelectable");
searchTrie.insert("ClearEnteredSelectable");
searchTrie.insert("IsInsideGarrison");
searchTrie.insert("Elem_2)");
searchTrie.insert("Elem_2)");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AInfantry");
searchTrie.insert("AInfantry");
searchTrie.insert("PostLoad");
searchTrie.insert("PostInitializeComponents");
searchTrie.insert("BeginPlay");
searchTrie.insert("OnRep_ID");
searchTrie.insert("OnRep_CreationMethod");
searchTrie.insert("OnRep_GameTickCountOnCreation");
searchTrie.insert("OnRep_Owner");
searchTrie.insert("Setup");
searchTrie.insert("Tick");
searchTrie.insert("SetupSelectionInfo");
searchTrie.insert("PossessedBy");
searchTrie.insert("PreReplication");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("InitContextCooldowns");
searchTrie.insert("OnCooldownFinished");
searchTrie.insert("ShowSelectionDecal");
searchTrie.insert("HideSelectionDecal");
searchTrie.insert("ShowHoverDecal");
searchTrie.insert("PutAbilitiesOnInitialCooldown");
searchTrie.insert("SetupSelectionDecal");
searchTrie.insert("SetColorOnMaterials");
searchTrie.insert("OnRep_AnimationState");
searchTrie.insert("OnRep_bInStealthMode");
searchTrie.insert("OnRep_GarrisonStatus");
searchTrie.insert("OnRep_HeldResourceType");
searchTrie.insert("OnRep_ExperienceTowardsNextRank");
searchTrie.insert("ApplyLevelUpBonuses");
searchTrie.insert("PlayLevelUpParticles");
searchTrie.insert("PlayLevelUpSound");
searchTrie.insert("EnterStealthMode");
searchTrie.insert("SetUnitInitialVisibility");
searchTrie.insert("SetUnitVisibility");
searchTrie.insert("SetUnitCollisionEnabled");
searchTrie.insert("OnEnterFogOfWar");
searchTrie.insert("OnExitFogOfWar");
searchTrie.insert("AssignController");
searchTrie.insert("InitStealthingVariables");
searchTrie.insert("SetupWeaponAttachment");
searchTrie.insert("SetupWidgetComponents");
searchTrie.insert("OnInventoryItemUseCooldownFinished");
searchTrie.insert("GetNumWeaponMeshMaterials");
searchTrie.insert("ServerEnterBuildingGarrison");
searchTrie.insert("GetActorLocationForGarrison");
searchTrie.insert("ServerEvacuateGarrison");
searchTrie.insert("Delay)");
searchTrie.insert("Delay)");
searchTrie.insert("InitAnimationsForConstructor");
searchTrie.insert("InitMovementDefaults");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("SetDamageValues");
searchTrie.insert("AdjustForUpgrades");
searchTrie.insert("GetType");
searchTrie.insert("IsStartingSelectable");
searchTrie.insert("CheckAnimationProperties");
searchTrie.insert("IsAnimationAssigned");
searchTrie.insert("VerifyAllAnimNotifiesArePresentOnMontage");
searchTrie.insert("PlayAnimation");
searchTrie.insert("GetAnimPlayRate");
searchTrie.insert("GetHealthPercentage");
searchTrie.insert("IsInsideGarrison");
searchTrie.insert("GetBounds");
searchTrie.insert("GetRootComponent2DCollisionInfo");
searchTrie.insert("OnRightClickCommand");
searchTrie.insert("OnRightClickCommand");
searchTrie.insert("IssueCommand_MoveTo");
searchTrie.insert("IssueCommand_PickUpItem");
searchTrie.insert("IssueCommand_RightClickOnResourceSpot");
searchTrie.insert("OnSingleSelect");
searchTrie.insert("OnMarqueeSelect");
searchTrie.insert("OnCtrlGroupSelect");
searchTrie.insert("OnDeselect");
searchTrie.insert("GetSelectableID");
searchTrie.insert("Security_CanBeClickedOn");
searchTrie.insert("OnRightClick");
searchTrie.insert("OnMouseHover");
searchTrie.insert("OnMouseUnhover");
searchTrie.insert("OnEnterMarqueeBox");
searchTrie.insert("OnExitMarqueeBox");
searchTrie.insert("GetTeam");
searchTrie.insert("GetTeamIndex");
searchTrie.insert("GetContextMenu");
searchTrie.insert("GetInfo");
searchTrie.insert("OnLayFoundationCommand");
searchTrie.insert("OnContextCommand");
searchTrie.insert("OnContextCommand");
searchTrie.insert("OnContextCommand");
searchTrie.insert("IssueCommand_UseInventoryItem");
searchTrie.insert("IssueCommand_UseInventoryItem");
searchTrie.insert("IssueCommand_UseInventoryItem");
searchTrie.insert("IssueCommand_SpecialBuildingTargetingAbility");
searchTrie.insert("IssueCommand_EnterGarrison");
searchTrie.insert("OnContextMenuPlaceBuildingResult");
searchTrie.insert("OnWorkedOnBuildingConstructionComplete");
searchTrie.insert("GetBoundsLength");
searchTrie.insert("GetSightRadius");
searchTrie.insert("OnUpgradeComplete");
searchTrie.insert("OnEnemyDestroyed");
searchTrie.insert("Client_OnLevelGained");
searchTrie.insert("GetVisionInfo");
searchTrie.insert("UpdateFogStatus");
searchTrie.insert("IsInStealthMode");
searchTrie.insert("GetProjectileBP");
searchTrie.insert("SetupBuildInfo");
searchTrie.insert("GetHealth");
searchTrie.insert("GetBodyLocationInfo");
searchTrie.insert("SetOnSpawnValues");
searchTrie.insert("SetSelectableIDAndGameTickCount");
searchTrie.insert("CanClassGainExperience");
searchTrie.insert("GetCurrentRankExperience");
searchTrie.insert("GetTotalExperienceRequiredForNextLevel");
searchTrie.insert("GetTotalExperienceRequiredForLevel");
searchTrie.insert("GainExperience");
searchTrie.insert("GetOwnersID");
searchTrie.insert("RegenSelectableResourcesFromGameTicks");
searchTrie.insert("HasEnoughSelectableResources");
searchTrie.insert("GetCooldownRemaining");
searchTrie.insert("GetContextCooldowns");
searchTrie.insert("OnAbilityUse");
searchTrie.insert("OnInventoryItemUse");
searchTrie.insert("StartInventoryItemUseCooldownTimerHandle");
searchTrie.insert("Selectable_GetGI");
searchTrie.insert("Selectable_GetPS");
searchTrie.insert("HasZeroHealth");
searchTrie.insert("CanClassAcceptBuffsAndDebuffs");
searchTrie.insert("GetStaticBuffArray");
searchTrie.insert("GetTickableBuffArray");
searchTrie.insert("GetStaticDebuffArray");
searchTrie.insert("GetTickableDebuffArray");
searchTrie.insert("GetBuffState");
searchTrie.insert("GetDebuffState");
searchTrie.insert("GetBuffState");
searchTrie.insert("GetDebuffState");
searchTrie.insert("RegisterDebuff");
searchTrie.insert("RegisterBuff");
searchTrie.insert("RegisterDebuff");
searchTrie.insert("RemoveBuff");
searchTrie.insert("RemoveDebuff");
searchTrie.insert("RemoveBuff");
searchTrie.insert("RemoveDebuff");
searchTrie.insert("GetAppliedGameTickCount");
searchTrie.insert("GetActorLocationSelectable");
searchTrie.insert("GetDistanceFromAnotherForAbilitySquared");
searchTrie.insert("GetDistanceFromLocationForAbilitySquared");
searchTrie.insert("GetLocalPC");
searchTrie.insert("HasAttack");
searchTrie.insert("GetShopAttributes");
searchTrie.insert("GetInventory");
searchTrie.insert("GetInventoryModifiable");
searchTrie.insert("GetHealthRef");
searchTrie.insert("ShowTooltip");
searchTrie.insert("GetPersistentWorldWidget");
searchTrie.insert("GetSelectedWorldWidget");
searchTrie.insert("AdjustPersistentWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("AdjustSelectedWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("AttachParticles");
searchTrie.insert("AttachParticles");
searchTrie.insert("AttachParticles");
searchTrie.insert("RemoveAttachedParticles");
searchTrie.insert("RemoveAttachedParticles");
searchTrie.insert("GetMuzzleLocation");
searchTrie.insert("CanAquireTarget");
searchTrie.insert("GetSpecialRightClickActionTowardsBuildingInfo");
searchTrie.insert("GetSelectedMouseCursor_CanAttackHostileUnit");
searchTrie.insert("GetSelectedMouseCursor_CanAttackFriendlyUnit");
searchTrie.insert("GetSelectedMouseCursor_CanAttackHostileBuilding");
searchTrie.insert("GetSelectedMouseCursor_CanAttackFriendlyBuilding");
searchTrie.insert("PIE_IsForCPUPlayer");
searchTrie.insert("PIE_GetHumanOwnerIndex");
searchTrie.insert("PIE_GetCPUOwnerIndex");
searchTrie.insert("FellOutOfWorld");
searchTrie.insert("TakeDamage");
searchTrie.insert("TakeDamageSelectable");
searchTrie.insert("Consume_BuildingTargetingAbilityInstigator");
searchTrie.insert("OnRep_Health");
searchTrie.insert("OnZeroHealth");
searchTrie.insert("FinalizeDestruction");
searchTrie.insert("AnimNotify_ExitStealthMode");
searchTrie.insert("AnimNotify_PlayAttackPreparationSound");
searchTrie.insert("AnimNotify_FireWeapon");
searchTrie.insert("AnimNotify_OnAttackAnimationFinished");
searchTrie.insert("AnimNotify_ExecuteContextAction");
searchTrie.insert("AnimNotify_OnContextAnimationFinished");
searchTrie.insert("AnimNotify_DropOffResources");
searchTrie.insert("AnimNotify_TryPickUpInventoryItemOffGround");
searchTrie.insert("AnimNotify_OnZeroHealthAnimationFinished");
searchTrie.insert("CanBuildBuildings");
searchTrie.insert("IsACollector");
searchTrie.insert("CanCollectResource");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributes");
searchTrie.insert("GetInfantryAttributes");
searchTrie.insert("GetAttackAttributes");
searchTrie.insert("GetAttributesModifiable");
searchTrie.insert("GetInfantryAttributesModifiable");
searchTrie.insert("GetAttackAttributesModifiable");
searchTrie.insert("SetHasAttack");
searchTrie.insert("GetRank");
searchTrie.insert("GetFaction");
searchTrie.insert("GetTeamTag");
searchTrie.insert("SetMoveAnimPlayRate");
searchTrie.insert("GetMoveSpeed");
searchTrie.insert("GetDefaultMoveSpeed");
searchTrie.insert("GetStartingMoveSpeed");
searchTrie.insert("Internal_SetNewDefaultMoveSpeed");
searchTrie.insert("SetNewDefaultMoveSpeed");
searchTrie.insert("SetNewDefaultMoveSpeedViaMultiplier");
searchTrie.insert("ApplyTempMoveSpeedMultiplier");
searchTrie.insert("RemoveTempMoveSpeedMultiplier");
searchTrie.insert("RemoveMoveSpeedEffectOfResources");
searchTrie.insert("ApplyTempStealthModeEffect");
searchTrie.insert("RemoveTempStealthModeEffect");
searchTrie.insert("GetResourceGatheringProperties");
searchTrie.insert("GetMoveSpeedMultiplierForHoldingResources");
searchTrie.insert("IsHoldingResources");
searchTrie.insert("GetHeldResourceType");
searchTrie.insert("SetHeldResource");
searchTrie.insert("GetHeldResourceAmount");
searchTrie.insert("GetResourceGatherRate");
searchTrie.insert("GetCapacityForResource");
searchTrie.insert("GetAIController");
searchTrie.insert("DisplayAIControllerOnScreenDebugInfo");
searchTrie.insert("Multicast_OnAttackMade");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bStartedInMap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PreviousHeldResourceType");
searchTrie.insert("HeldResourceAmount");
searchTrie.insert("Rank");
searchTrie.insert("PreviousRank");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("TimerHandle_ReenterStealth");
searchTrie.insert("");
searchTrie.insert("ClientPreviousGarrisonStatus");
searchTrie.insert("");
searchTrie.insert("RangeSquared");
searchTrie.insert("");
searchTrie.insert("MoveAnimPlayRate");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildingSpawnedFrom");
searchTrie.insert("BarracksRallyLoc");
searchTrie.insert("AInventoryItem");
searchTrie.insert("AInventoryItem");
searchTrie.insert("BeginPlay");
searchTrie.insert("Setup");
searchTrie.insert("SetupStuff");
searchTrie.insert("SetupSomeStuff");
searchTrie.insert("SetupSelectionDecal");
searchTrie.insert("SetupParticles");
searchTrie.insert("ExitPool_BasicStuff");
searchTrie.insert("ExitPool_FinalStuff");
searchTrie.insert("IsBlueprintClass");
searchTrie.insert("SetVis");
searchTrie.insert("GetUniqueID");
searchTrie.insert("GetType");
searchTrie.insert("GetItemQuantity");
searchTrie.insert("GetNumItemCharges");
searchTrie.insert("GetItemInfo");
searchTrie.insert("IsInObjectPool");
searchTrie.insert("IsSelectableInRangeToPickUp");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("OnPickedUp");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("SetVisibilityFromFogManager");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributes");
searchTrie.insert("OnMouseHover");
searchTrie.insert("OnMouseUnhover");
searchTrie.insert("OnSingleSelect");
searchTrie.insert("OnDeselect");
searchTrie.insert("Security_CanBeClickedOn");
searchTrie.insert("OnRightClick");
searchTrie.insert("ShowTooltip");
searchTrie.insert("HasAttack");
searchTrie.insert("CanClassGainExperience");
searchTrie.insert("GetShopAttributes");
searchTrie.insert("GetInventory");
searchTrie.insert("PIE_IsForCPUPlayer");
searchTrie.insert("PIE_GetHumanOwnerIndex");
searchTrie.insert("TakeDamage");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SelectionParticlesTemplate");
searchTrie.insert("RightClickParticlesTemplate");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumItemCharges");
searchTrie.insert("");
searchTrie.insert("ItemInfo");
searchTrie.insert("Attributes");
searchTrie.insert("SelectionDecalInfo");
searchTrie.insert("AInventoryItem_SM");
searchTrie.insert("AInventoryItem_SM");
searchTrie.insert("SetupStuff");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("SetVis");
searchTrie.insert("ExitPool");
searchTrie.insert("ExitPool_FreshlySpawnedActor");
searchTrie.insert("OnPickedUp");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("");
searchTrie.insert("AInventoryItem_SK");
searchTrie.insert("AInventoryItem_SK");
searchTrie.insert("SetupStuff");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("SetVis");
searchTrie.insert("ExitPool");
searchTrie.insert("ExitPool_FreshlySpawnedActor");
searchTrie.insert("OnPickedUp");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("");
searchTrie.insert("AResourceSpot");
searchTrie.insert("AResourceSpot");
searchTrie.insert("BeginPlay");
searchTrie.insert("SetupForLocalPlayer");
searchTrie.insert("Setup");
searchTrie.insert("Init");
searchTrie.insert("SetupSelectionInfo");
searchTrie.insert("GetQueueFront");
searchTrie.insert("OnResourcesDepleted");
searchTrie.insert("Delay)");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("GetType");
searchTrie.insert("GetCollectionAcceptanceRadius");
searchTrie.insert("IsDepleted");
searchTrie.insert("GetCurrentResources");
searchTrie.insert("Enqueue");
searchTrie.insert("TakeResourcesFrom");
searchTrie.insert("OnCollectorLeaveSpot");
searchTrie.insert("GetClosestDepot");
searchTrie.insert("SetClosestDepot");
searchTrie.insert("AICon_GetBaseBuildRadius");
searchTrie.insert("GetBounds");
searchTrie.insert("GetBoundsLength");
searchTrie.insert("OnSingleSelect");
searchTrie.insert("GetSelectableID");
searchTrie.insert("OnDeselect");
searchTrie.insert("OnRightClick");
searchTrie.insert("ShowTooltip");
searchTrie.insert("HideSelectionDecal");
searchTrie.insert("ShowSelectionDecal");
searchTrie.insert("ShowHoverDecal");
searchTrie.insert("Security_CanBeClickedOn");
searchTrie.insert("OnMouseHover");
searchTrie.insert("OnMouseUnhover");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributesBase");
searchTrie.insert("GetAttributes");
searchTrie.insert("HasAttack");
searchTrie.insert("CanClassGainExperience");
searchTrie.insert("GetInventory");
searchTrie.insert("AdjustPersistentWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("AdjustSelectedWorldWidgetForNewCameraZoomAmount");
searchTrie.insert("PIE_IsForCPUPlayer");
searchTrie.insert("PIE_GetHumanOwnerIndex");
searchTrie.insert("PIE_GetCPUOwnerIndex");
searchTrie.insert("TakeDamage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsLocalPlayerObserver");
searchTrie.insert("bIsMouseHovering");
searchTrie.insert("CurrentAmount");
searchTrie.insert("");
searchTrie.insert("SelectionDecalInfo");
searchTrie.insert("");
searchTrie.insert("ARTSPlayerStart");
searchTrie.insert("ARTSPlayerStart");
searchTrie.insert("BeginPlay");
searchTrie.insert("OnConstruction");
searchTrie.insert("PostEditChangeProperty");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("PostEditMove");
searchTrie.insert("TellLevelVolumeToUpdateMapInfo");
searchTrie.insert("SetUniqueID");
searchTrie.insert("GetUniquePlayerStartID");
searchTrie.insert("UniqueID");
searchTrie.insert("AAbilityBase");
searchTrie.insert("AAbilityBase");
searchTrie.insert("BeginPlay");
searchTrie.insert("GenerateInitialRandomSeed");
searchTrie.insert("GetRandomFloat");
searchTrie.insert("GetRandomInteger");
searchTrie.insert("SeedAs16BitTo32Bit");
searchTrie.insert("HasMultipleOutcomes");
searchTrie.insert("IsAoEAbilityForStart");
searchTrie.insert("AoEHitsHaveMultipleOutcomes");
searchTrie.insert("RequiresTargetOtherThanSelf");
searchTrie.insert("RequiresLocation");
searchTrie.insert("HasRandomBehavior");
searchTrie.insert("RequiresTickCount");
searchTrie.insert("IsUsable_SelfChecks");
searchTrie.insert("IsUsable_SelfChecks");
searchTrie.insert("IsUsable_TargetChecks");
searchTrie.insert("IsUsable_TargetChecks");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("OnListenedProjectileHit");
searchTrie.insert("");
searchTrie.insert("bHasMultipleOutcomes");
searchTrie.insert("bCallAoEStartFunction");
searchTrie.insert("bAoEHitsHaveMultipleOutcomes");
searchTrie.insert("bRequiresTargetOtherThanSelf");
searchTrie.insert("bRequiresLocation");
searchTrie.insert("bHasRandomBehavior");
searchTrie.insert("bRequiresTickCount");
searchTrie.insert("AAbility_AoEBuffOrDebuff");
searchTrie.insert("AAbility_AoEBuffOrDebuff");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_AoEDamage");
searchTrie.insert("AAbility_AoEDamage");
searchTrie.insert("BeginPlay");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("CheckCurves");
searchTrie.insert("DealDamage");
searchTrie.insert("DealDamageAfterDelay");
searchTrie.insert("CalculateDamage");
searchTrie.insert("ShowTargetLocationParticles");
searchTrie.insert("GetTargetLocationParticlesRotation");
searchTrie.insert("PlayTargetLocationSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_ApplyBuffDebuffToTarget");
searchTrie.insert("AAbility_ApplyBuffDebuffToTarget");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FArtilleryStrikeInfo");
searchTrie.insert("FArtilleryStrikeInfo");
searchTrie.insert("FArtilleryStrikeInfo");
searchTrie.insert("GetLocation");
searchTrie.insert("GetInstigator");
searchTrie.insert("GetInstigatorsTeam");
searchTrie.insert("GetLastYawRot");
searchTrie.insert("SetLastYawRot");
searchTrie.insert("GetActionTimerHandle");
searchTrie.insert("GetNumProjectilesRemaining");
searchTrie.insert("DecrementNumProjectiles");
searchTrie.insert("GetRandomStream");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Instigator");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_ArtilleryStrike");
searchTrie.insert("AAbility_ArtilleryStrike");
searchTrie.insert("BeginPlay");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("OnListenedProjectileHit");
searchTrie.insert("GetRandomSpot");
searchTrie.insert("GetRandomDistanceFromCenter");
searchTrie.insert("GetRandomYawRotation");
searchTrie.insert("SpawnProjectile");
searchTrie.insert("EndEffect");
searchTrie.insert("SetupCurveValues");
searchTrie.insert("Delay_SpawnProjectile");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BeaconProjectileDamageInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("RotationCurveMaxY");
searchTrie.insert("DistanceCurveMaxY");
searchTrie.insert("AAbility_BasicApplyBuffOrDebuff");
searchTrie.insert("AAbility_BasicApplyBuffOrDebuff");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_BasicSingleTargetDamage");
searchTrie.insert("AAbility_BasicSingleTargetDamage");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("ShowTargetParticles");
searchTrie.insert("PlayTargetSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_BuffAndDebuffRemoval");
searchTrie.insert("AAbility_BuffAndDebuffRemoval");
searchTrie.insert("IsUsable_TargetChecks");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_CullingBladeClone");
searchTrie.insert("AAbility_CullingBladeClone");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("ShowTargetParticles");
searchTrie.insert("PlayTargetSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_DamageAndRestoreMana");
searchTrie.insert("AAbility_DamageAndRestoreMana");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("ShowInstigatorParticles");
searchTrie.insert("ShowTargetParticles");
searchTrie.insert("PlayTargetSound");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_FinishingBlow");
searchTrie.insert("AAbility_FinishingBlow");
searchTrie.insert("IsUsable_TargetChecks");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("GetOutgoingDamage");
searchTrie.insert("ShowTargetParticles");
searchTrie.insert("PlayTargetSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_ManaBurn");
searchTrie.insert("AAbility_ManaBurn");
searchTrie.insert("IsUsable_TargetChecks");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("GetOutgoingDamage");
searchTrie.insert("ShowTargetParticles");
searchTrie.insert("PlayTargetSound");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_Nuke");
searchTrie.insert("AAbility_Nuke");
searchTrie.insert("BeginPlay");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("Begin");
searchTrie.insert("NotifyLocalPlayerOfLaunch");
searchTrie.insert("GetLaunchActor");
searchTrie.insert("GetLaunchSelectable");
searchTrie.insert("ShowLaunchLocationParticles");
searchTrie.insert("PlayLaunchLocationSound");
searchTrie.insert("LaunchProjectile");
searchTrie.insert("RevealFogAtTargetLocation");
searchTrie.insert("SpawnDecalAtTargetLocation");
searchTrie.insert("SpawnDecalAtTargetLocationAfterDelay");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("PoolingManager");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FOngoingAoEDamageInstance");
searchTrie.insert("FOngoingAoEDamageInstance");
searchTrie.insert("FOngoingAoEDamageInstance");
searchTrie.insert("GetAbilityUseLocation");
searchTrie.insert("DecrementNumTicksRemaining");
searchTrie.insert("GetNumTicksRemaining");
searchTrie.insert("GetTimerHandle");
searchTrie.insert("AbilityEpicenter");
searchTrie.insert("AbilityInstigator");
searchTrie.insert("TimerHandle_DoDamageTick");
searchTrie.insert("NumTicksRemaining");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("AAbility_OngoingAoEDamage");
searchTrie.insert("AAbility_OngoingAoEDamage");
searchTrie.insert("BeginPlay");
searchTrie.insert("CheckCurves");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("SpawnEpicenterParticles");
searchTrie.insert("PlayEpicenterSound");
searchTrie.insert("DoDamageTick");
searchTrie.insert("DoInitialDamageTickAfterDelay");
searchTrie.insert("DoDamageTickAfterDelay");
searchTrie.insert("CalculateDamage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AAbility_Scan");
searchTrie.insert("AAbility_Scan");
searchTrie.insert("Server_Begin");
searchTrie.insert("Client_Begin");
searchTrie.insert("Begin");
searchTrie.insert("PlaySound");
searchTrie.insert("DrawTargetLocationDecal");
searchTrie.insert("ShowTargetLocationParticles");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AInfantryController");
searchTrie.insert("AInfantryController");
searchTrie.insert("OnPossess");
searchTrie.insert("SetReferences");
searchTrie.insert("DisplayDebug");
searchTrie.insert("GrabDebugSnapshot");
searchTrie.insert("void");
searchTrie.insert("FunctionPtrToString");
searchTrie.insert("StartBehavior");
searchTrie.insert("Tick");
searchTrie.insert("UpdateControlRotation");
searchTrie.insert("OnMoveCompleted");
searchTrie.insert("TickBehavior");
searchTrie.insert("TickAI_MovingToBarracksInitialPoint");
searchTrie.insert("TickAI_MovingToBarracksRallyPoint");
searchTrie.insert("TickAI_IdleWithoutTarget");
searchTrie.insert("TickAI_IdleWithTarget");
searchTrie.insert("TickAI_Idle_ReturningToLeashLocation");
searchTrie.insert("TickAI_HoldingPositionWithoutTarget");
searchTrie.insert("TickAI_HoldingPositionWithTarget");
searchTrie.insert("TickAI_MovingToRightClickLocation");
searchTrie.insert("TickAI_MovingToPointNearStaticSelectable");
searchTrie.insert("TickAI_MoveCommandToFriendlyMobileSelectable");
searchTrie.insert("TickAI_RightClickOnEnemy");
searchTrie.insert("TickAI_AttackMoveCommandWithNoTargetAquired");
searchTrie.insert("TickAI_AttackMoveCommandWithTargetAquired");
searchTrie.insert("TickAI_AttackMoveCommand_ReturningToLeashLocation");
searchTrie.insert("TickAI_HeadingToContextCommandWorldLocation");
searchTrie.insert("TickAI_ChasingTargetToDoContextCommand");
searchTrie.insert("TickAI_HeadingToBuildingToDoBuildingTargetingAbility");
searchTrie.insert("TickAI_HeadingToBuildingToEnterItsGarrison");
searchTrie.insert("TickAI_InsideBuildingGarrison");
searchTrie.insert("TickAI_HeadingToResourceSpot");
searchTrie.insert("TickAI_WaitingToGatherResources");
searchTrie.insert("TickAI_GatheringResources");
searchTrie.insert("TickAI_ReturningToResourceDepot");
searchTrie.insert("TickAI_DroppingOffResources");
searchTrie.insert("TickAI_HeadingToConstructionSite");
searchTrie.insert("TickAI_HeadingToPotentialConstructionSite");
searchTrie.insert("TickAI_WaitingForFoundationsToBePlaced");
searchTrie.insert("TickAI_ConstructingBuilding");
searchTrie.insert("TickAI_DoingContextActionAnim");
searchTrie.insert("TickAI_DoingSpecialBuildingTargetingAbility");
searchTrie.insert("TickAI_GoingToPickUpInventoryItem");
searchTrie.insert("TickAI_PickingUpInventoryItem");
searchTrie.insert("OnCommand_ClearResourceGatheringProperties");
searchTrie.insert("OnCommand_ClearBuildingConstructingProperties");
searchTrie.insert("OnCommand_ClearTargetFocus");
searchTrie.insert("OnHoldPositionCommand");
searchTrie.insert("OnAttackMoveCommand");
searchTrie.insert("OnRightClickCommand");
searchTrie.insert("OnRightClickCommand");
searchTrie.insert("OnRightClickOnResourceSpotCommand");
searchTrie.insert("OnInstantContextCommand");
searchTrie.insert("OnTargetedContextCommand");
searchTrie.insert("OnTargetedContextCommand");
searchTrie.insert("OnInstantUseInventoryItemCommand");
searchTrie.insert("OnLocationTargetingUseInventoryItemCommand");
searchTrie.insert("OnSelectableTargetingUseInventoryItemCommand");
searchTrie.insert("OnSpecialBuildingTargetingAbilityCommand");
searchTrie.insert("OnEnterGarrisonCommand");
searchTrie.insert("OnUnitExitGarrison");
searchTrie.insert("OnAbilityCommandInner");
searchTrie.insert("OnAbilityCommandInner");
searchTrie.insert("OnAbilityCommandInner");
searchTrie.insert("OnPickUpInventoryItemCommand");
searchTrie.insert("OnLayFoundationCommand");
searchTrie.insert("OnContextMenuPlaceBuildingResult");
searchTrie.insert("OnWorkedOnBuildingConstructionComplete");
searchTrie.insert("OnUnitEnterStealthMode");
searchTrie.insert("OnUnitExitStealthMode");
searchTrie.insert("OnUnitTakeDamage");
searchTrie.insert("OnPossessedUnitDestroyed");
searchTrie.insert("OnPossessedUnitConsumed");
searchTrie.insert("OnControlledPawnKilledSomething");
searchTrie.insert("AnimNotify_OnWeaponFired");
searchTrie.insert("AnimNotify_OnAttackAnimationFinished");
searchTrie.insert("AnimNotify_OnContextActionExecuted");
searchTrie.insert("AnimNotify_OnContextAnimationFinished");
searchTrie.insert("AnimNotify_OnResourcesDroppedOff");
searchTrie.insert("AnimNotify_TryPickUpInventoryItemOffGround");
searchTrie.insert("PlayIdleAnim");
searchTrie.insert("GoIdle");
searchTrie.insert("StopMovementAndGoIdle");
searchTrie.insert("StandStill");
searchTrie.insert("AttackMove_OnReturnedToLeashLoc");
searchTrie.insert("MoveToRallyPoint");
searchTrie.insert("GetPickUpItemAcceptanceRadius");
searchTrie.insert("OnMoveToPickUpInventoryItemComplete");
searchTrie.insert("StartResourceGatheringRoute");
searchTrie.insert("OnMoveToResourceSpotComplete");
searchTrie.insert("TryGatherResources");
searchTrie.insert("IsAtResourceSpot");
searchTrie.insert("GetDistanceRequirementForResourceSpot");
searchTrie.insert("GetResourceSpotAcceptanceRadius");
searchTrie.insert("IsWaitingToCollectResources");
searchTrie.insert("StartCollectingResources");
searchTrie.insert("OnResourceGatheringComplete");
searchTrie.insert("ReturnToDepot");
searchTrie.insert("IsAtDepot");
searchTrie.insert("GetDistanceRequirementForDepot");
searchTrie.insert("GetDepotAcceptanceRadius");
searchTrie.insert("OnReturnedToDepotMoveComplete");
searchTrie.insert("OnReturnedToDepot");
searchTrie.insert("DropOffResources");
searchTrie.insert("ReturnToResourceSpot");
searchTrie.insert("IsAtPotentialConstructionSite");
searchTrie.insert("GetDistanceRequirementForPotentialConstructionSite");
searchTrie.insert("GetPotentialConstructionSiteAcceptanceRadius");
searchTrie.insert("TryLayFoundations");
searchTrie.insert("IsAtConstructionSite");
searchTrie.insert("GetDistanceRequirementForConstructionSite");
searchTrie.insert("GetConstructionSiteAcceptanceRadius");
searchTrie.insert("OnMoveToConstructionSiteComplete");
searchTrie.insert("WorkOnBuilding");
searchTrie.insert("SetPendingContextActionType");
searchTrie.insert("SetPendingContextActionType");
searchTrie.insert("GetPendingContextActionType");
searchTrie.insert("GetPendingBuildingTargetingAbilityType");
searchTrie.insert("TryDoInstantContextCommand");
searchTrie.insert("DoInstantContextCommand");
searchTrie.insert("GetDistanceFromLocationForAbility");
searchTrie.insert("GetLocationTargetedAcceptanceRadius");
searchTrie.insert("OnMoveToLocationTargetedContextActionComplete");
searchTrie.insert("StartLocationTargetedContextAction");
searchTrie.insert("TryDoLocationTargetedContextAction");
searchTrie.insert("DoLocationTargetedContextAction");
searchTrie.insert("OnMoveToBuildingForBuildingTargetingAbilityComplete");
searchTrie.insert("StartBuildingTargetingAbility");
searchTrie.insert("TryDoBuildingTargetingAbility");
searchTrie.insert("DoBuildingTargetingAbility");
searchTrie.insert("GetDistanceFromAnotherSelectableForAbility");
searchTrie.insert("GetDistanceFromAnotherSelectableForAbility");
searchTrie.insert("GetDistanceFromBuildingForEnteringItsGarrison");
searchTrie.insert("GetSelectableTargetingAbilityAcceptanceRadius");
searchTrie.insert("GetBuildingTargetingAbilityAcceptanceRadius");
searchTrie.insert("GetBuildingEnterGarrisonAcceptanceRadius");
searchTrie.insert("OnMoveToSingleTargetContextActionTargetComplete");
searchTrie.insert("StartSingleTargetContextAction");
searchTrie.insert("TryDoSingleTargetContextAction");
searchTrie.insert("DoSingleTargetContextAction");
searchTrie.insert("MoveTowardsAttackTarget");
searchTrie.insert("GetMoveToAttackTargetAcceptanceRadius");
searchTrie.insert("GetNonHostileMoveToLocationAcceptanceRadius");
searchTrie.insert("MoveTowardsContextActionTarget");
searchTrie.insert("MoveTowardsBuildingTargetingAbilityTarget");
searchTrie.insert("MoveTowardsBuildingToEnterItsGarrison");
searchTrie.insert("OnMoveToBuildingToEnterItsGarrisonComplete");
searchTrie.insert("ShouldChangeTargetOnDamage");
searchTrie.insert("CanTargetBeAquired");
searchTrie.insert("HasTarget");
searchTrie.insert("IsTargetAttackable");
searchTrie.insert("IsSelectableAttackable");
searchTrie.insert("BeginAttackAnim");
searchTrie.insert("OnAttackMade");
searchTrie.insert("OnResetFire");
searchTrie.insert("FindClosestValidEnemyInRange");
searchTrie.insert("IsMoving");
searchTrie.insert("WillStopMovementGoThrough");
searchTrie.insert("CanFire");
searchTrie.insert("IsTargetInRange");
searchTrie.insert("IsFacingAttackTarget");
searchTrie.insert("OnTargetChange");
searchTrie.insert("OnContextActionTargetChange");
searchTrie.insert("WantsToAttack");
searchTrie.insert("SetFacing_MovementDirection");
searchTrie.insert("SetFacing_Focus");
searchTrie.insert("StopBehaviour");
searchTrie.insert("Move");
searchTrie.insert("Delay)");
searchTrie.insert("Delay)");
searchTrie.insert("SetupReferences");
searchTrie.insert("SetupTickFunctions");
searchTrie.insert("DoNothing");
searchTrie.insert("OnUnitHasAttackChanged");
searchTrie.insert("OnUnitRangeChanged");
searchTrie.insert("OnUnitAttackFacingRotationRequiredChanged");
searchTrie.insert("GetUnitState");
searchTrie.insert("GetUnitAnimState");
searchTrie.insert("DisplayOnScreenDebugInfo");
searchTrie.insert("LastCompletedMoveResult");
searchTrie.insert("TickFunctions");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AccumulatedTickBehaviorTime");
searchTrie.insert("TimeTillAttackResets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CharacterMovement");
searchTrie.insert("UnitState");
searchTrie.insert("AnimStateForBehavior");
searchTrie.insert("ClickLocation");
searchTrie.insert("LeashLocation");
searchTrie.insert("EncounterPoint");
searchTrie.insert("TeamVisInfo");
searchTrie.insert("");
searchTrie.insert("AttackTargetBoundsLength");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ContextActionTargetBoundsLength");
searchTrie.insert("bIgnoreLookingAtFocus");
searchTrie.insert("bUnitHasAttack");
searchTrie.insert("bCanUnitBuildBuildings");
searchTrie.insert("TimerHandle_TargetAquiring");
searchTrie.insert("bIsTargetStillInRange");
searchTrie.insert("DoOnMoveComplete");
searchTrie.insert("PendingContextAction");
searchTrie.insert("PendingContextActionType");
searchTrie.insert("PendingAbilityUsageCase");
searchTrie.insert("PendingAbilityAuxilleryData");
searchTrie.insert("PendingAbilityMoreAuxilleryData");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_ResourceGathering");
searchTrie.insert("");
searchTrie.insert("FoundationType");
searchTrie.insert("FoundationRotation");
searchTrie.insert("Range");
searchTrie.insert("LenienceRange");
searchTrie.insert("AttackFacingRotationRequirement");
searchTrie.insert("UBuildingAnimInstance");
searchTrie.insert("NativeBeginPlay");
searchTrie.insert("AnimNotify_OnDoorFullyOpen");
searchTrie.insert("AnimNotify_OnZeroHealthAnimationFinished");
searchTrie.insert("");
searchTrie.insert("UInfantryAnimInstance");
searchTrie.insert("UInfantryAnimInstance");
searchTrie.insert("NativeBeginPlay");
searchTrie.insert("AnimNotify_ExitStealthMode");
searchTrie.insert("AnimNotify_PlayAttackPreparationSound");
searchTrie.insert("AnimNotify_FireWeapon");
searchTrie.insert("AnimNotify_OnAttackAnimationFinished");
searchTrie.insert("AnimNotify_ExecuteContextAction");
searchTrie.insert("AnimNotify_OnContextAnimationFinished");
searchTrie.insert("AnimNotify_DropOffResources");
searchTrie.insert("AnimNotify_PickUpInventoryItemOffGround");
searchTrie.insert("AnimNotify_OnZeroHealthAnimationFinished");
searchTrie.insert("");
searchTrie.insert("UBuildingAttackComponent_SK");
searchTrie.insert("UBuildingAttackComponent_SK");
searchTrie.insert("BeginPlay");
searchTrie.insert("CheckAnimBlueprint");
searchTrie.insert("CheckAnimNotifies");
searchTrie.insert("TickComponent");
searchTrie.insert("ServerDoAttack");
searchTrie.insert("ClientDoAttack");
searchTrie.insert("ServerAnimNotify_DoAttack");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("GetAsMeshComponent");
searchTrie.insert("SetupAttackComp");
searchTrie.insert("ServerSetupAttackCompMore");
searchTrie.insert("ClientSetupAttackCompMore");
searchTrie.insert("GetTargetingTraceDelegate");
searchTrie.insert("GetTargetingQueryParams");
searchTrie.insert("GetTargetingSweepOrigin");
searchTrie.insert("GetTargetingSweepRadius");
searchTrie.insert("SetTaskManagerBucketIndices");
searchTrie.insert("SetTaskManagerArrayIndex");
searchTrie.insert("GrabTaskManagerBucketIndices");
searchTrie.insert("OnParentBuildingExitFogOfWar");
searchTrie.insert("SetRotatingBase");
searchTrie.insert("HasRotatingBase");
searchTrie.insert("HasIdleAnimation");
searchTrie.insert("HasAttackAnimationOrAttackWarmupAnimation");
searchTrie.insert("HasAttackWarmupAnimation");
searchTrie.insert("HasAttackAnimation");
searchTrie.insert("IsPlayingAttackAnimation");
searchTrie.insert("IsPlayingAttackOrWarmupAnimation");
searchTrie.insert("IsAttackOffCooldown");
searchTrie.insert("HasAttackWarmup");
searchTrie.insert("HasAttackFullyWarmedUp");
searchTrie.insert("IsAttackWarmingUp");
searchTrie.insert("OnSweepForTargetsComplete");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("IsCurrentTargetStillAquirable");
searchTrie.insert("uint8");
searchTrie.insert("GetCurrentTargetTargetingStatus");
searchTrie.insert("IsActorInRange_NoLenience");
searchTrie.insert("IsActorInRange_UseLeneince");
searchTrie.insert("GetYawToActor");
searchTrie.insert("GetYawToActor");
searchTrie.insert("GetEffectiveComponentYawRotation");
searchTrie.insert("SetTarget");
searchTrie.insert("GetTarget");
searchTrie.insert("StartAttackWarmUp");
searchTrie.insert("PlayAttackWarmupParticlesAndSound");
searchTrie.insert("ServerStopAttackWarmUp");
searchTrie.insert("ClientStopAttackWarmUp");
searchTrie.insert("StopWarmupParticles");
searchTrie.insert("ServerStartAttackWarmupAnimation");
searchTrie.insert("ServerStartAttackAnimation");
searchTrie.insert("ServerStopAttackOrWarmupAnimation");
searchTrie.insert("ServerStopAttackAnimation");
searchTrie.insert("ClientPlayAttackWarmupAnimation");
searchTrie.insert("ClientPlayAttackAnimation");
searchTrie.insert("ClientStopAttackWarmupAnimation");
searchTrie.insert("SetComponentAnimationTickingEnabled");
searchTrie.insert("ClientOnMontageEnded");
searchTrie.insert("OnRep_TimeAttackWarmupOrAnimStarted");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamVisibilityInfo");
searchTrie.insert("Target");
searchTrie.insert("OwningBuilding");
searchTrie.insert("GS");
searchTrie.insert("PoolingManager");
searchTrie.insert("TargetingTraceDelegate");
searchTrie.insert("TaskManagerBucket");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeSpentWarmingUpAttack");
searchTrie.insert("Team");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("QueryParams");
searchTrie.insert("");
searchTrie.insert("AttackCompUniqueID");
searchTrie.insert("RotatingBase");
searchTrie.insert("UBuildingAttackComponent_SM");
searchTrie.insert("UBuildingAttackComponent_SM");
searchTrie.insert("BeginPlay");
searchTrie.insert("TickComponent");
searchTrie.insert("ServerDoAttack");
searchTrie.insert("ClientDoAttack");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("GetAsMeshComponent");
searchTrie.insert("SetupAttackComp");
searchTrie.insert("ServerSetupAttackCompMore");
searchTrie.insert("ClientSetupAttackCompMore");
searchTrie.insert("GetTargetingTraceDelegate");
searchTrie.insert("GetTargetingQueryParams");
searchTrie.insert("GetTargetingSweepOrigin");
searchTrie.insert("GetTargetingSweepRadius");
searchTrie.insert("SetTaskManagerBucketIndices");
searchTrie.insert("SetTaskManagerArrayIndex");
searchTrie.insert("GrabTaskManagerBucketIndices");
searchTrie.insert("OnParentBuildingEnterFogOfWar");
searchTrie.insert("OnParentBuildingExitFogOfWar");
searchTrie.insert("SetRotatingBase");
searchTrie.insert("HasRotatingBase");
searchTrie.insert("IsAttackOffCooldown");
searchTrie.insert("HasAttackWarmup");
searchTrie.insert("HasAttackFullyWarmedUp");
searchTrie.insert("IsAttackWarmingUp");
searchTrie.insert("OnSweepForTargetsComplete");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("IsCurrentTargetStillAquirable");
searchTrie.insert("uint8");
searchTrie.insert("GetCurrentTargetTargetingStatus");
searchTrie.insert("IsActorInRange_NoLenience");
searchTrie.insert("IsActorInRange_UseLeneince");
searchTrie.insert("GetYawToActor");
searchTrie.insert("GetYawToActor");
searchTrie.insert("GetEffectiveComponentYawRotation");
searchTrie.insert("SetTarget");
searchTrie.insert("GetTarget");
searchTrie.insert("StartAttackWarmUp");
searchTrie.insert("ServerStopAttackWarmUp");
searchTrie.insert("ClientStopAttackWarmUp");
searchTrie.insert("OnRep_TimeAttackWarmupStarted");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamVisibilityInfo");
searchTrie.insert("Target");
searchTrie.insert("OwningBuilding");
searchTrie.insert("GS");
searchTrie.insert("PoolingManager");
searchTrie.insert("TargetingTraceDelegate");
searchTrie.insert("TaskManagerBucket");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeSpentWarmingUpAttack");
searchTrie.insert("Team");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("QueryParams");
searchTrie.insert("");
searchTrie.insert("AttackCompUniqueID");
searchTrie.insert("RotatingBase");
searchTrie.insert("UBuildingAttackCompStructBase_SK");
searchTrie.insert("UBuildingAttackCompStructBase_SK");
searchTrie.insert("SetupComp");
searchTrie.insert("GetEffectiveComponentYawRotation");
searchTrie.insert("OnParentBuildingExitFogOfWar");
searchTrie.insert("TickComponent");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("PreNetReceive");
searchTrie.insert("OnRep_RelativeYawRotation");
searchTrie.insert("PostRepNotifies");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("OwningBuilding");
searchTrie.insert("TurretComp");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("");
searchTrie.insert("UBuildingAttackCompStructBase_SM");
searchTrie.insert("UBuildingAttackCompStructBase_SM");
searchTrie.insert("SetupComp");
searchTrie.insert("GetEffectiveComponentYawRotation");
searchTrie.insert("OnParentBuildingExitFogOfWar");
searchTrie.insert("TickComponent");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("PreNetReceive");
searchTrie.insert("OnRep_RelativeYawRotation");
searchTrie.insert("PostRepNotifies");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("OwningBuilding");
searchTrie.insert("TurretComp");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("");
searchTrie.insert("IBuildingAttackComp_Turret");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("IBuildingAttackComp_TurretsBase");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("UMySphereComponent");
searchTrie.insert("OnComponentCreated");
searchTrie.insert("GetOverlaps");
searchTrie.insert("UPitchChangeBuildingAttackComp_SK");
searchTrie.insert("UPitchChangeBuildingAttackComp_SK");
searchTrie.insert("TickComponent");
searchTrie.insert("RotatePitchToFaceTarget");
searchTrie.insert("GetCurrentTargetTargetingStatus");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("PreNetReceive");
searchTrie.insert("OnRep_RelativePitchRotation");
searchTrie.insert("PostRepNotifies");
searchTrie.insert("OnParentBuildingExitFogOfWar");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("GetEffectiveComponentPitchRotation");
searchTrie.insert("CanPitchBeChangedEnoughToFace");
searchTrie.insert("GetPitchTargetingStatus");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("RunPostEditLogic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MIN_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert("MAX_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("1");
searchTrie.insert("UPitchChangeBuildingAttackComp_SM");
searchTrie.insert("UPitchChangeBuildingAttackComp_SM");
searchTrie.insert("TickComponent");
searchTrie.insert("RotatePitchToFaceTarget");
searchTrie.insert("GetCurrentTargetTargetingStatus");
searchTrie.insert("GetLifetimeReplicatedProps");
searchTrie.insert("PreNetReceive");
searchTrie.insert("OnRep_RelativePitchRotation");
searchTrie.insert("PostRepNotifies");
searchTrie.insert("OnParentBuildingExitFogOfWar");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("CanSweptActorBeAquiredAsTarget");
searchTrie.insert("GetEffectiveComponentPitchRotation");
searchTrie.insert("CanPitchBeChangedEnoughToFace");
searchTrie.insert("GetPitchTargetingStatus");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("RunPostEditLogic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MIN_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert("MAX_TURRET_PITCH");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("1");
searchTrie.insert("UBuildingTurretCompAnimInstance");
searchTrie.insert("NativeBeginPlay");
searchTrie.insert("GetOwningAttackComp");
searchTrie.insert("AnimNotify_FireWeapon");
searchTrie.insert("bIsOnServer");
searchTrie.insert("UBAbility_DealDamage");
searchTrie.insert("UBAbility_DealDamage");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("");
searchTrie.insert("UBAbility_StealResources");
searchTrie.insert("UBAbility_StealResources");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("PlaySound");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UBuildingTargetingAbilityBase");
searchTrie.insert("InitialSetup");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("SeedAs16BitTo32Bit");
searchTrie.insert("UAbility_SingleTargetBuffOrDebuff");
searchTrie.insert("UAbility_SingleTargetBuffOrDebuff");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UAbility_StealResources");
searchTrie.insert("UAbility_StealResources");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("PlaySound");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCAbility_Airstrike");
searchTrie.insert("UCAbility_Airstrike");
searchTrie.insert("FinalSetup");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("RevealFogAtTargetLocation");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCAbility_AoEDamage");
searchTrie.insert("UCAbility_AoEDamage");
searchTrie.insert("FinalSetup");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("DealDamageAfterDelay");
searchTrie.insert("DealDamage");
searchTrie.insert("CalculateDamage");
searchTrie.insert("ShowTargetLocationParticles");
searchTrie.insert("CheckCurveAssets");
searchTrie.insert("DelayAmount)");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UActiveArtilleryStrikeState");
searchTrie.insert("UActiveArtilleryStrikeState");
searchTrie.insert("Init");
searchTrie.insert("Tick");
searchTrie.insert("GetStatId");
searchTrie.insert("GetTickableTickType");
searchTrie.insert("GetRandomInt");
searchTrie.insert("GetRandomFloat");
searchTrie.insert("SpawnProjectile");
searchTrie.insert("CalculateProjectileSpawnLocation");
searchTrie.insert("CalculateTimeBetweenShots");
searchTrie.insert("Stop");
searchTrie.insert("EffectObject");
searchTrie.insert("PoolingManager");
searchTrie.insert("TimeTillStop");
searchTrie.insert("TimeTillSpawnNextProjectile");
searchTrie.insert("AbilityLocation");
searchTrie.insert("LastYawRot");
searchTrie.insert("RandomStream");
searchTrie.insert("bIsServer");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("NumProjectilesRemainingInSalvo");
searchTrie.insert("UCAbility_ArtilleryStrike");
searchTrie.insert("UCAbility_ArtilleryStrike");
searchTrie.insert("FinalSetup");
searchTrie.insert("CheckCurveAssets");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("RevealFogAtUseLocation");
searchTrie.insert("HandleSpawningOfDecal");
searchTrie.insert("ShouldSeeDecal");
searchTrie.insert("SpawnAtUseLocationAfterDelay");
searchTrie.insert("SpawnDecalAtUseLocation");
searchTrie.insert("OnActiveStrikeExpired");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBarrageProjectileInfo");
searchTrie.insert("FBarrageProjectileInfo");
searchTrie.insert("SetDamageValues");
searchTrie.insert("CheckCurveAssets");
searchTrie.insert("GetProjectileBP");
searchTrie.insert("GetProjectileDamageValues");
searchTrie.insert("GetMinInitialDelay");
searchTrie.insert("GetMaxInitialDelay");
searchTrie.insert("GetMinDuration");
searchTrie.insert("GetMaxDuration");
searchTrie.insert("GetMinTimeBetweenSalvos");
searchTrie.insert("GetMaxTimeBetweenSalvos");
searchTrie.insert("GetSalvoRadius");
searchTrie.insert("GetMinShotsPerSalvo");
searchTrie.insert("GetMaxShotsPerSalvo");
searchTrie.insert("GetMinTimeBetweenShots");
searchTrie.insert("GetMaxTimeBetweenShots");
searchTrie.insert("GetLocationOffset");
searchTrie.insert("GetDistanceFromCenterCurve_SalvoLocation");
searchTrie.insert("GetDistanceFromCenterCurve_Projectiles");
searchTrie.insert("GetZAxisOption");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UActiveBarrageSingleSalvoTypeState");
searchTrie.insert("UActiveBarrageSingleSalvoTypeState");
searchTrie.insert("Init");
searchTrie.insert("Tick");
searchTrie.insert("GetStatId");
searchTrie.insert("GetTickableTickType");
searchTrie.insert("PoolingManager");
searchTrie.insert("World");
searchTrie.insert("CalculateProjectileSpawnLocation");
searchTrie.insert("CalculateSalvoLocation");
searchTrie.insert("CalculateProjectileFireAtLocation");
searchTrie.insert("CalculateTimeBetweenShots");
searchTrie.insert("SpawnProjectile");
searchTrie.insert("Stop");
searchTrie.insert("BarrageState");
searchTrie.insert("Info");
searchTrie.insert("TimeSpentAlive");
searchTrie.insert("TimeTillStop");
searchTrie.insert("TimeTillNextProjectileSpawn");
searchTrie.insert("CurrentSalvoLocation");
searchTrie.insert("NumProjectilesRemainingInSalvo");
searchTrie.insert("bNextProjectileIsFirstOfSalvo");
searchTrie.insert("ArrayIndex");
searchTrie.insert("FActiveBarrageState");
searchTrie.insert("FActiveBarrageState");
searchTrie.insert("FActiveBarrageState");
searchTrie.insert("MoreSetup");
searchTrie.insert("CalculateFirersOriginalLocation");
searchTrie.insert("GetRandomInt");
searchTrie.insert("GetRandomFloat");
searchTrie.insert("GetUseLocation");
searchTrie.insert("GetFirersOriginalLocation");
searchTrie.insert("GetRadius");
searchTrie.insert("GetRotationRate");
searchTrie.insert("GetInstigatorsTeam");
searchTrie.insert("OnActiveProjectileTypeFinished");
searchTrie.insert("EffectActor");
searchTrie.insert("Elem_2)");
searchTrie.insert("Elem)");
searchTrie.insert("RandomStream");
searchTrie.insert("TargetLocation");
searchTrie.insert("FirersOriginalLocation");
searchTrie.insert("Radius");
searchTrie.insert("RotationRate");
searchTrie.insert("UniqueID");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("");
searchTrie.insert("UCAbility_Barrage");
searchTrie.insert("UCAbility_Barrage");
searchTrie.insert("FinalSetup");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("RevealFogAtTargetLocation");
searchTrie.insert("PlaySound");
searchTrie.insert("OnEffectInstanceExpired");
searchTrie.insert("GetNumProjectileTypes");
searchTrie.insert("GetProjectileInfo");
searchTrie.insert("GetRadius");
searchTrie.insert("GetFirerDistance_Length");
searchTrie.insert("GetFirerDistance_Height");
searchTrie.insert("GetRotationRate");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCAbility_ResearchUpgrade");
searchTrie.insert("UCAbility_ResearchUpgrade");
searchTrie.insert("FinalSetup");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("");
searchTrie.insert("UCAbility_SingleTargetDamage");
searchTrie.insert("UCAbility_SingleTargetDamage");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("");
searchTrie.insert("UCommanderAbilityBase");
searchTrie.insert("UCommanderAbilityBase");
searchTrie.insert("FinalSetup");
searchTrie.insert("Server_Execute");
searchTrie.insert("Client_Execute");
searchTrie.insert("GenerateInitialRandomSeed");
searchTrie.insert("SeedAs16BitTo32Bit");
searchTrie.insert("GI");
searchTrie.insert("GS");
searchTrie.insert("PS");
searchTrie.insert("bHasMultipleOutcomes");
searchTrie.insert("bCallAoEStartFunction");
searchTrie.insert("bAoEHitsHaveMultipleOutcomes");
searchTrie.insert("bRequiresSelectableTarget");
searchTrie.insert("bRequiresPlayerTarget");
searchTrie.insert("bRequiresLocation");
searchTrie.insert("bHasRandomBehavior");
searchTrie.insert("bRequiresTickCount");
searchTrie.insert("bRequiresDirection");
searchTrie.insert("FWarthogAttackAttributes");
searchTrie.insert("FWarthogAttackAttributes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AWarthog");
searchTrie.insert("AWarthog");
searchTrie.insert("BeginPlay");
searchTrie.insert("CheckCurveAssets");
searchTrie.insert("InitialSetup");
searchTrie.insert("OnOwningAbilityUsed");
searchTrie.insert("Tick");
searchTrie.insert("TakeDamage");
searchTrie.insert("GetAttackAttributes");
searchTrie.insert("GetStartingLocation");
searchTrie.insert("GetStartingLocation");
searchTrie.insert("GetStartingRotation");
searchTrie.insert("FireProjectiles");
searchTrie.insert("GetProjectileFireDirection");
searchTrie.insert("GetPhase1AndPhase4MoveSpeed");
searchTrie.insert("GetPhase2AndPhase3MoveSpeed");
searchTrie.insert("GetAttackPhase");
searchTrie.insert("GetPhase2Tilt");
searchTrie.insert("GetTimeSpentInPhase2AndPhase3");
searchTrie.insert("GetPhase4Tilt");
searchTrie.insert("GetTimeSpentInPhase4");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("RunPostEditLogic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AbilityUseLocation");
searchTrie.insert("Phase");
searchTrie.insert("InstigatorsTeam");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("GI");
searchTrie.insert("PoolingManager");
searchTrie.insert("");
searchTrie.insert("RandomStream");
searchTrie.insert("TimeSpentInPhase2AndPhase3");
searchTrie.insert("TimeBetweenShotsCurveYValue");
searchTrie.insert("TimeTillFireNextProjectile");
searchTrie.insert("NumProjectilesRemaining");
searchTrie.insert("TimeSpentInPhase4");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UWarthogMovementComponent");
searchTrie.insert("UWarthogMovementComponent");
searchTrie.insert("InitializeComponent");
searchTrie.insert("BeginPlay");
searchTrie.insert("TickComponent");
searchTrie.insert("GetOwnerAsWarthog");
searchTrie.insert("OnOwningAbilityUsed");
searchTrie.insert("OriginalVelocity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ARTSLevelVolume");
searchTrie.insert("ARTSLevelVolume");
searchTrie.insert("OnConstruction");
searchTrie.insert("Destroyed");
searchTrie.insert("SetMapWallConstructorValues");
searchTrie.insert("CalcSceneCaptureOrthoWidth");
searchTrie.insert("StoreMapInfo");
searchTrie.insert("GetMinimapTexture");
searchTrie.insert("GetMapBounds");
searchTrie.insert("GetPlayerStarts");
searchTrie.insert("CreateMinimapTexture");
searchTrie.insert("StorePlayerStartInfo");
searchTrie.insert("StoreMapBounds");
searchTrie.insert("WriteMapInfoToDisk");
searchTrie.insert("AdjustWallDimensions");
searchTrie.insert("PostEditChangeProperty");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("PostEditMove");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MapName");
searchTrie.insert("WALL_THICKNESS");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPlayerCameraMovement");
searchTrie.insert("UPlayerCameraMovement");
searchTrie.insert("BeginPlay");
searchTrie.insert("TickComponent");
searchTrie.insert("MoveToGround");
searchTrie.insert("GlueToGround");
searchTrie.insert("GetMaxSpeed");
searchTrie.insert("ResolvePenetrationImpl");
searchTrie.insert("SetMaxSpeed");
searchTrie.insert("SetAcceleration");
searchTrie.insert("SetDeceleration");
searchTrie.insert("SetTurningBoost");
searchTrie.insert("MaxSpeed");
searchTrie.insert("Acceleration");
searchTrie.insert("Deceleration");
searchTrie.insert("TurningBoost");
searchTrie.insert(":");
searchTrie.insert("ACollidingProjectile");
searchTrie.insert("ACollidingProjectile");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("AddToPool");
searchTrie.insert("OnProjectileStop");
searchTrie.insert("Delay)");
searchTrie.insert("FireAtTarget");
searchTrie.insert("FireAtLocation");
searchTrie.insert("FireInDirection");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ACollidingProjectileBase");
searchTrie.insert("ACollidingProjectileBase");
searchTrie.insert("BeginPlay");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("AddToPool");
searchTrie.insert("ResetTeamCollision");
searchTrie.insert("SetupCollisionChannels");
searchTrie.insert("GetStartingRotation");
searchTrie.insert("GetStartingRotation");
searchTrie.insert("OnLifetimeExpired");
searchTrie.insert("Delay)");
searchTrie.insert("FireAtTarget");
searchTrie.insert("FireAtLocation");
searchTrie.insert("FireInDirection");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("IsSphereCollisionAcceptableForEnteringObjectPool");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HitResult");
searchTrie.insert("");
searchTrie.insert("AHomingProjectile");
searchTrie.insert("AHomingProjectile");
searchTrie.insert("BeginPlay");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("AddToPool");
searchTrie.insert("SetupCollisionChannels");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("SetupAccelerationCurve");
searchTrie.insert("DoNothing");
searchTrie.insert("Delay)");
searchTrie.insert("FireAtTarget");
searchTrie.insert("OnHit");
searchTrie.insert("GetTarget");
searchTrie.insert("GetLifetimeTimerHandle");
searchTrie.insert("GetInitialSpeed");
searchTrie.insert("GetMaxSpeed");
searchTrie.insert("GetAccelerationCurve");
searchTrie.insert("CanOnlyHitTarget");
searchTrie.insert("GetSphere");
searchTrie.insert("RegistersHitOnTimeout");
searchTrie.insert("CanHitDefeatedTargets");
searchTrie.insert("OnTargetNoLongerValid");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AInstantHitProjectile");
searchTrie.insert("AInstantHitProjectile");
searchTrie.insert("GetTraceDistance");
searchTrie.insert("SetTrailParticlesBeamData");
searchTrie.insert("FireAtTarget");
searchTrie.insert("FireAtLocation");
searchTrie.insert("FireInDirection");
searchTrie.insert("GetFogLocations");
searchTrie.insert("HitResult");
searchTrie.insert("StartLocation");
searchTrie.insert("EndLocation");
searchTrie.insert("ALeaveThenComeBackProjectile");
searchTrie.insert("ALeaveThenComeBackProjectile");
searchTrie.insert("BeginPlay");
searchTrie.insert("FireAtLocation");
searchTrie.insert("SetupCollisionChannels");
searchTrie.insert("GetStartingRotation");
searchTrie.insert("GetInitialVelocity");
searchTrie.insert("GetDescentStartRotation");
searchTrie.insert("GetDescentStartLocation");
searchTrie.insert("OnAscentCompleted");
searchTrie.insert("SetProjectileVisibility");
searchTrie.insert("BeginDescent");
searchTrie.insert("SetupCollisionForDescent");
searchTrie.insert("OnProjectileStop");
searchTrie.insert("OnProjectileStopFromMovementComp");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("AddToPool");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("Delay)");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("DescentStartingRotation");
searchTrie.insert("DescentStartingLocation");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ANoCollisionTimedProjectile");
searchTrie.insert("ANoCollisionTimedProjectile");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("AddToPool");
searchTrie.insert("CalculateLifetime");
searchTrie.insert("OnFireAtTargetComplete");
searchTrie.insert("RegisterHitOnTarget");
searchTrie.insert("OnFireAtLocationComplete");
searchTrie.insert("RegisterHitAtTargetLocation");
searchTrie.insert("OnMeshReachedTarget");
searchTrie.insert("OnHitTarget");
searchTrie.insert("OnMeshReachedTargetLocation");
searchTrie.insert("OnHitTargetLocation");
searchTrie.insert("MakeInactive");
searchTrie.insert("HideTrails");
searchTrie.insert("Delay)");
searchTrie.insert("FireAtTarget");
searchTrie.insert("FireAtLocation");
searchTrie.insert("OnTimedOut");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("AreAllTimerHandlesCleared");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("RunPostEditLogic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_Hit");
searchTrie.insert("HitResult");
searchTrie.insert("");
searchTrie.insert("FParticleAudioPair");
searchTrie.insert("FParticleAudioPair");
searchTrie.insert("GetImpactParticles");
searchTrie.insert("GetImpactSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AProjectileBase");
searchTrie.insert("AProjectileBase");
searchTrie.insert("BeginPlay");
searchTrie.insert("FellOutOfWorld");
searchTrie.insert("SetupForEnteringObjectPool");
searchTrie.insert("AddToPool");
searchTrie.insert("DisableTrailParticles");
searchTrie.insert("DisableTrailsAndTryAddToPool");
searchTrie.insert("GetTargetsWithinRadius");
searchTrie.insert("OnHit");
searchTrie.insert("CallDealDamageAfterDelay");
searchTrie.insert("DealDamageAndTryAddToPool");
searchTrie.insert("DealDamage");
searchTrie.insert("GetDamageDistanceMultiplier");
searchTrie.insert("GetImpactParticles");
searchTrie.insert("GetImpactSound");
searchTrie.insert("SetupAoECollisionChannels");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("SetupCurveValues");
searchTrie.insert("Delay)");
searchTrie.insert("GetImpactDamage");
searchTrie.insert("GetImpactDamageType");
searchTrie.insert("GetImpactRandomDamageFactor");
searchTrie.insert("GetAoEDamage");
searchTrie.insert("GetAoEDamageType");
searchTrie.insert("GetAoERandomDamageFactor");
searchTrie.insert("SetProjectileBP");
searchTrie.insert("SetPoolingManager");
searchTrie.insert("FireAtTarget");
searchTrie.insert("FireAtLocation");
searchTrie.insert("FireInDirection");
searchTrie.insert("GetFogLocations");
searchTrie.insert("OnProjectileStopFromMovementComp");
searchTrie.insert("IsFitForEnteringObjectPool");
searchTrie.insert("AreAllTimerHandlesCleared");
searchTrie.insert("NUM_FOG_LOCATIONS");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ListeningForOnHit");
searchTrie.insert("ListeningForOnHitData");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerManager");
searchTrie.insert("TimerHandle_Lifetime");
searchTrie.insert("TimerHandle_DealDamage");
searchTrie.insert("TimerHandle_TrailParticles");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OwningTeam");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AoEObjectQueryParams");
searchTrie.insert("DamageCurveMaxY");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHomingProjectileMovement");
searchTrie.insert("UHomingProjectileMovement");
searchTrie.insert("TickComponent");
searchTrie.insert("ComputeMoveDelta");
searchTrie.insert("ComputeVelocity");
searchTrie.insert("ClampVelocity");
searchTrie.insert("ComputeAccelerationAmount");
searchTrie.insert("IsCloseEnoughToTarget");
searchTrie.insert("KeepTrackingTarget");
searchTrie.insert("GetLockOnLocation");
searchTrie.insert("SetInitialValues");
searchTrie.insert("OnOwningProjectileFired");
searchTrie.insert("TimeSpentInFlight");
searchTrie.insert("LastTargetLocation");
searchTrie.insert("TargetBoundsRadius");
searchTrie.insert("InitialSpeed");
searchTrie.insert("MaxSpeed");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UNoCollisionProjectileMovement");
searchTrie.insert("UNoCollisionProjectileMovement");
searchTrie.insert("BeginPlay");
searchTrie.insert("TickComponent");
searchTrie.insert("IsCloseEnoughToTargetLocation");
searchTrie.insert("GetArcCalculationMethod");
searchTrie.insert("GetProjectileLifetime");
searchTrie.insert("UseHighArc");
searchTrie.insert("GetArcValue");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("Projectile");
searchTrie.insert("TargetLocation");
searchTrie.insert("TargetType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPreciseProjectileMovement");
searchTrie.insert("BeginPlay");
searchTrie.insert("TickComponent");
searchTrie.insert("HasStoppedSimulation");
searchTrie.insert("CheckStillInWorld");
searchTrie.insert("SetMovementMode");
searchTrie.insert("OnProjectileFired");
searchTrie.insert("CurveMode_OnDescentStart");
searchTrie.insert("SoftSetTickEnabled");
searchTrie.insert("HandleBlockingHit");
searchTrie.insert("StopSimulating");
searchTrie.insert("GetProjectile");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ReferenceLocation");
searchTrie.insert("ReferenceRotation");
searchTrie.insert("TimeSpentAlive");
searchTrie.insert("");
searchTrie.insert("bTickMostlyPaused");
searchTrie.insert("URTSProjectileMovement");
searchTrie.insert("StopSimulating");
searchTrie.insert("FUint8Set");
searchTrie.insert("Emplace");
searchTrie.insert("Num");
searchTrie.insert("Container");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("FMacroCommandReason");
searchTrie.insert("GetActualCommand");
searchTrie.insert("GetRawAuxilleryReason");
searchTrie.insert("GetBuildingType");
searchTrie.insert("GetUnitType");
searchTrie.insert("GetUpgradeType");
searchTrie.insert("OriginalCommand_GetResourceType");
searchTrie.insert("GetOriginalCommandMainReason");
searchTrie.insert("GetOriginalCommandAuxilleryData");
searchTrie.insert("ActualCommand");
searchTrie.insert("AuxilleryInfo");
searchTrie.insert("OriginalCommand_PrimaryReason");
searchTrie.insert("OriginalCommand_AuxilleryInfo");
searchTrie.insert("FSavingUpForInfo");
searchTrie.insert("FSavingUpForInfo");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("IsSavingUp");
searchTrie.insert("IsForBuilding");
searchTrie.insert("IsForUnit");
searchTrie.insert("IsForUpgrade");
searchTrie.insert("HasEnoughResourcesForIt");
searchTrie.insert("ArePrerequisitesMetForIt");
searchTrie.insert("HasBuilderForIt");
searchTrie.insert("BuildIt");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("");
searchTrie.insert("Building");
searchTrie.insert("Unit");
searchTrie.insert("Upgrade");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CommandReason");
searchTrie.insert("FQueueWaitingInfo");
searchTrie.insert("IsForBuilding");
searchTrie.insert("IsForUnit");
searchTrie.insert("IsForUpgrade");
searchTrie.insert("FQueueWaitingInfo");
searchTrie.insert("WaitForQueue");
searchTrie.insert("WaitForQueue");
searchTrie.insert("WaitForQueue");
searchTrie.insert("IsWaiting");
searchTrie.insert("IsQueueOwnerValidAndAlive");
searchTrie.insert("IsQueueNowUnFull");
searchTrie.insert("ArePrerequisitesMetForIt");
searchTrie.insert("HasEnoughResourcesForIt");
searchTrie.insert("BuyIt");
searchTrie.insert("CancelWaiting");
searchTrie.insert("bWaiting");
searchTrie.insert("");
searchTrie.insert("Queue");
searchTrie.insert("Building");
searchTrie.insert("Unit");
searchTrie.insert("Upgrade");
searchTrie.insert("CommandReason");
searchTrie.insert("FTryingToPlaceBuildingInfo");
searchTrie.insert("FTryingToPlaceBuildingInfo");
searchTrie.insert("BeginForResourceDepot");
searchTrie.insert("BeginForResourceDepot");
searchTrie.insert("BeginForBuilding");
searchTrie.insert("BeginForBuilding");
searchTrie.insert("IsPending");
searchTrie.insert("GetBuilding");
searchTrie.insert("GetResourceDepotBuildLocsIndex");
searchTrie.insert("GetBuildLocMultipliersIndex");
searchTrie.insert("GetNumGeneralAreasExhausted");
searchTrie.insert("GetCurrentGeneralArea");
searchTrie.insert("GetRotation");
searchTrie.insert("TryPlaceForTick");
searchTrie.insert("IsProducerUsable");
searchTrie.insert("GiveUp");
searchTrie.insert("PendingBuilding");
searchTrie.insert("bIsForDepot");
searchTrie.insert("");
searchTrie.insert("bUsingConstructionYard");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CommandReason");
searchTrie.insert("NumBuildLocationsTriedThisTick");
searchTrie.insert("NumResourceDepotSpotsTried");
searchTrie.insert("ResourceDepotBuildLocsIndex");
searchTrie.insert("NumGeneralAreasExhausted");
searchTrie.insert("BuildLocMultipliersIndex");
searchTrie.insert("NumLocationsTriedForCurrentGeneralArea");
searchTrie.insert("GeneralArea");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("FSingleBuildsInTabInfo");
searchTrie.insert("GetConstructionYard");
searchTrie.insert("GetQueue");
searchTrie.insert("FlagProductionAsComplete");
searchTrie.insert("FlagProductionAsCancelled");
searchTrie.insert("IsProductionComplete");
searchTrie.insert("NowTryPlaceEachTick");
searchTrie.insert("Building");
searchTrie.insert("bForResourceDepot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Queue");
searchTrie.insert("bProductionComplete");
searchTrie.insert("CommandReason");
searchTrie.insert("FBuildsInTabBuildingInfo");
searchTrie.insert("NoteAsProducing");
searchTrie.insert("NoteAsProducing");
searchTrie.insert("IsBuildingSomething");
searchTrie.insert("FlagProductionAsComplete");
searchTrie.insert("NowTryPlaceEachTick");
searchTrie.insert("");
searchTrie.insert("ACPUPlayerAIController");
searchTrie.insert("ACPUPlayerAIController");
searchTrie.insert("Setup");
searchTrie.insert("SetInitialLocAndRot");
searchTrie.insert("NotifyOfStartingSelectables");
searchTrie.insert("PerformFinalSetup");
searchTrie.insert("GrabDebugSnapshot");
searchTrie.insert("TickFromManager");
searchTrie.insert("PreBehaviorPass");
searchTrie.insert("DoBehavior");
searchTrie.insert("DecideIfShouldBuildCollector");
searchTrie.insert("DecideIfShouldBuildResourceDepot");
searchTrie.insert("DecideIfShouldBuildInfastructureProducingThing");
searchTrie.insert("DecideIfShouldBuildBarracks");
searchTrie.insert("DecideIfShouldResearchUpgrade");
searchTrie.insert("DecideIfShouldBuildBaseDefense");
searchTrie.insert("DecideIfShouldBuildArmyUnit");
searchTrie.insert("AssignIdleCollectors");
searchTrie.insert("TryIssueBuildResourceDepotCommand");
searchTrie.insert("TryIssueBuildResourceDepotCommand");
searchTrie.insert("TryIssueBuildBuildingCommand");
searchTrie.insert("TryIssueBuildBuildingCommand");
searchTrie.insert("PreBuildBuildingCommandChecks");
searchTrie.insert("PreBuildBuildingCommandChecks");
searchTrie.insert("PreTrainUnitCommandChecks");
searchTrie.insert("PreResearchUpgradeCommandChecks");
searchTrie.insert("ActuallyIssueBuildResourceDepotCommand");
searchTrie.insert("ActuallyIssueBuildResourceDepotCommand");
searchTrie.insert("ActuallyIssueBuildBuildingCommand");
searchTrie.insert("ActuallyIssueBuildBuildingCommand");
searchTrie.insert("ActuallyIssueTrainUnitCommand");
searchTrie.insert("ActuallyIssueResearchUpgradeCommand");
searchTrie.insert("ActuallyIssueCollectResourcesCommand");
searchTrie.insert("ActuallyIssueCancelProductionCommand");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("SetSavingsTarget");
searchTrie.insert("OnSavingsTargetPrereqNotMet");
searchTrie.insert("OnSavingsTargetPrereqNotMet");
searchTrie.insert("SetQueueWaitTarget");
searchTrie.insert("SetQueueWaitTarget");
searchTrie.insert("SetQueueWaitTarget");
searchTrie.insert("IsUnitIdle");
searchTrie.insert("CanUseConstructionYard");
searchTrie.insert("CanTrainFromBuilding");
searchTrie.insert("CanResearchFromBuilding");
searchTrie.insert("CanUseIdleWorker");
searchTrie.insert("CanUseWorker");
searchTrie.insert("IsTryingToPlaceBuilding");
searchTrie.insert("IsWaitingForQueueToBecomeUnFull");
searchTrie.insert("IsSavingUp");
searchTrie.insert("GetNumAquiredResourceSpots");
searchTrie.insert("GetNumConstructionYards");
searchTrie.insert("GetNumWorkers");
searchTrie.insert("GetNumBarracks");
searchTrie.insert("GetNumBaseDefenses");
searchTrie.insert("GetArmyStrength");
searchTrie.insert("GetExpectedNumDepots");
searchTrie.insert("GetExpectedNumConstructionYards");
searchTrie.insert("GetExpectedNumWorkers");
searchTrie.insert("GetExpectedNumBarracks");
searchTrie.insert("GetExpectedNumBaseDefenses");
searchTrie.insert("GetExpectedArmyStrength");
searchTrie.insert("InitialRecursiveTryBuildWrapper");
searchTrie.insert("InitialRecursiveTryBuildWrapper");
searchTrie.insert("InitialRecursiveTryBuildWrapper");
searchTrie.insert("RecursiveTryBuild");
searchTrie.insert("RecursiveTryBuild");
searchTrie.insert("RecursiveTryBuild");
searchTrie.insert("GetOptimalNumCollectors");
searchTrie.insert("GetNumCollectorsAssigned");
searchTrie.insert("");
searchTrie.insert("TryPlaceResourceDepotInner");
searchTrie.insert("TryPlaceResourceDepot");
searchTrie.insert("TryPlaceResourceDepot");
searchTrie.insert("GenerateGeneralArea");
searchTrie.insert("TryPlaceBuildingInner");
searchTrie.insert("TryPlaceBuilding");
searchTrie.insert("TryPlaceBuilding");
searchTrie.insert("GiveUpPlacingBuilding");
searchTrie.insert("OnGiveUpPlacingBuilding");
searchTrie.insert("Delay)");
searchTrie.insert("IncrementNumPendingCommands");
searchTrie.insert("DecrementNumPendingCommands");
searchTrie.insert("IncrementState");
searchTrie.insert("IncrementState");
searchTrie.insert("GetNumMacroCommandTypes");
searchTrie.insert("ArrayIndexToMacroCommandType");
searchTrie.insert("GetNumMacroCommandReasons");
searchTrie.insert("ArrayIndexToMacroCommandReason");
searchTrie.insert("OnQueueProductionComplete");
searchTrie.insert("GetDifficulty");
searchTrie.insert("GetPS");
searchTrie.insert("GetFI");
searchTrie.insert("Difficulty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StartingSpotLocation");
searchTrie.insert("StartingViewYaw");
searchTrie.insert("BuildsInTabBuildingInfo");
searchTrie.insert("TryingToPlaceBuildingInfo");
searchTrie.insert("ThingSavingUpFor");
searchTrie.insert("QueueWereWaitingToFinish");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TriedRecursiveBuildBuildings");
searchTrie.insert("TriedRecursiveBuildUnits");
searchTrie.insert("NumWorkers");
searchTrie.insert("NumBarracks");
searchTrie.insert("NumBaseDefenses");
searchTrie.insert("ArmyStrength");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PendingCommands_ArmyStrength");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BUILD_LOC_MULTIPLERS_NUM");
searchTrie.insert("BuildLocMultipliers[BUILD_LOC_MULTIPLERS_NUM]");
searchTrie.insert("NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY");
searchTrie.insert("CIRCLE_PORTIONS_IN_RADIANS");
searchTrie.insert("ResourceDepotBuildLocs[NUM_POTENTIAL_DEPOT_SPOTS_TO_TRY]");
searchTrie.insert("NUM_GENERAL_AREAS_TO_TRY");
searchTrie.insert("MAX_NUM_BUILD_LOC_TRIES_PER_TICK");
searchTrie.insert("ParsedUINTERFACE");
searchTrie.insert("Reset");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Name");
searchTrie.insert("ParsedEnumValue");
searchTrie.insert("Reset");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Comment");
searchTrie.insert("Name");
searchTrie.insert("ParsedEnum");
searchTrie.insert("Reset");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Comment");
searchTrie.insert("1");
searchTrie.insert("Name");
searchTrie.insert("BackingInteger");
searchTrie.insert("Values");
searchTrie.insert("ParsedFunctionParamDefaultValue");
searchTrie.insert("Reset");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Value");
searchTrie.insert("ParsedVariableTemplateValue");
searchTrie.insert("ParsedVariableTemplateValue");
searchTrie.insert("Type");
searchTrie.insert("Pointers");
searchTrie.insert("NestedTemplateValues");
searchTrie.insert("ParsedFunctionParameter");
searchTrie.insert("ParsedFunctionParameter");
searchTrie.insert("1");
searchTrie.insert("VariableTypeName");
searchTrie.insert("TemplateValues");
searchTrie.insert("VariableTypePointers");
searchTrie.insert("Name");
searchTrie.insert("DefaultValue");
searchTrie.insert("UFUNCTIONSpecifier");
searchTrie.insert("UFUNCTIONSpecifier");
searchTrie.insert("UFUNCTIONSpecifier");
searchTrie.insert("Type");
searchTrie.insert("SecondValue");
searchTrie.insert("UFUNCTIONMetaSpecifier");
searchTrie.insert("UFUNCTIONMetaSpecifier");
searchTrie.insert("UFUNCTIONMetaSpecifier");
searchTrie.insert("Type");
searchTrie.insert("SecondValue");
searchTrie.insert("ParsedFunction");
searchTrie.insert("ParsedFunction");
searchTrie.insert("ParsedFunction");
searchTrie.insert("ParsedFunction");
searchTrie.insert("Reset");
searchTrie.insert("DefaultStruct");
searchTrie.insert("AccessSpecifier");
searchTrie.insert("Comment");
searchTrie.insert("Name");
searchTrie.insert("1");
searchTrie.insert("UFUNCTIONSpecifiers");
searchTrie.insert("UFUNCTIONMetaSpecifiers");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("ReturnValue");
searchTrie.insert("ReturnValuePointers");
searchTrie.insert("ReturnValueTemplateValues");
searchTrie.insert("Parameters");
searchTrie.insert("TemplateParameters");
searchTrie.insert("ParsedUPROPERTYSpecifier");
searchTrie.insert("ParsedUPROPERTYSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValue");
searchTrie.insert("ParsedUPROPERTYMetaSpecifier");
searchTrie.insert("ParsedUPROPERTYMetaSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValues");
searchTrie.insert("ParsedVariable");
searchTrie.insert("ParsedVariable");
searchTrie.insert("ParsedVariable");
searchTrie.insert("Reset");
searchTrie.insert("DefaultStruct");
searchTrie.insert("AccessSpecifier");
searchTrie.insert("Comment");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("UPROPERTYSpecifiers");
searchTrie.insert("UPROPERTYMetaSpecifiers");
searchTrie.insert("1");
searchTrie.insert("TypeName");
searchTrie.insert("TemplateValues");
searchTrie.insert("Pointers");
searchTrie.insert("Name");
searchTrie.insert("ParsedUSTRUCTOrUCLASSSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValues");
searchTrie.insert("ParsedUSTRUCTOrUCLASSMetaSpecifier");
searchTrie.insert("Value");
searchTrie.insert("SecondValues");
searchTrie.insert("ParsedStructOrClass");
searchTrie.insert("Reset");
searchTrie.insert("DefaultStruct");
searchTrie.insert("Comment");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("USTRUCTOrUCLASSSpecifiers");
searchTrie.insert("USTRUCTOrUCLASSMetaSpecifiers");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("Name");
searchTrie.insert("ParentsNames");
searchTrie.insert("Functions");
searchTrie.insert("Variables");
searchTrie.insert("DocumentationTool");
searchTrie.insert("DocumentationTool");
searchTrie.insert("DoWork");
searchTrie.insert("ParseProjectAndCreateDocumentationFile");
searchTrie.insert("DoEngineInfoParsing");
searchTrie.insert("ReadFileContents");
searchTrie.insert("ParseFile");
searchTrie.insert("AtStartOfComment");
searchTrie.insert("SkipSingleLineComments");
searchTrie.insert("SkipMultiLineComment");
searchTrie.insert("AtString");
searchTrie.insert("AtString_Test");
searchTrie.insert("IsWhitespace");
searchTrie.insert("IsNewline");
searchTrie.insert("IsAlphaNumeric");
searchTrie.insert("AtEndOfFile");
searchTrie.insert("AtEndOfFile");
searchTrie.insert("ParseToken");
searchTrie.insert("ParseToken");
searchTrie.insert("ParseTokenLeaveIndexUnchanged");
searchTrie.insert("SkipToken");
searchTrie.insert("ParseSingleLineComments");
searchTrie.insert("ParseMultiLineComment");
searchTrie.insert("GetCurrentComment");
searchTrie.insert("SkipWhitespaceAndComments");
searchTrie.insert("SkipWhitespaceAndCommentsButRememberLastComment");
searchTrie.insert("ParsePreprocessorCommand");
searchTrie.insert("SkipPreprocessorCommand");
searchTrie.insert("ParseUINTERFACE");
searchTrie.insert("ParseStructOrClass");
searchTrie.insert("ParseUSTRUCTOrUCLASS");
searchTrie.insert("ParseEnum");
searchTrie.insert("ParseUENUM");
searchTrie.insert("ParseTypedef");
searchTrie.insert("ParseVariableOrFunctionDeclaration");
searchTrie.insert("ParseUSTRUCTOrUCLASSStuffInBrackets");
searchTrie.insert("ParseUENUMUMETAStuffInBrackets");
searchTrie.insert("ParseUPROPERTYStuffInBrackets");
searchTrie.insert("ParseUFUNCTIONStuffInBrackets");
searchTrie.insert("ParseUPROPERTYVariableDeclaration");
searchTrie.insert("ParseUFUNCTIONFunctionDeclaration");
searchTrie.insert("ParseTemplateParameters");
searchTrie.insert("ParseVariableTemplateValues");
searchTrie.insert("ParseFunctionParameters");
searchTrie.insert("ParseParameterTemplateValues");
searchTrie.insert("ParseFunctionParamDefaultValue");
searchTrie.insert("SkipFunctionBody");
searchTrie.insert("SkipTo");
searchTrie.insert("SkipTo");
searchTrie.insert("SkipToEither");
searchTrie.insert("SkipTo");
searchTrie.insert("SkipToClosingCurlyBracket");
searchTrie.insert("RememberLastStringBefore");
searchTrie.insert("PostProcessParsedData");
searchTrie.insert("PostProcessComment");
searchTrie.insert("GenerateHTMLFiles");
searchTrie.insert("UploadHTMLFilesToGitHub");
searchTrie.insert("AddCurrentUINTERFACE");
searchTrie.insert("AddCurrentEnum");
searchTrie.insert("GetFileContentsAroundCharNumber");
searchTrie.insert("GetAreaAroundIndex");
searchTrie.insert("GetAreaAroundIndex");
searchTrie.insert("GetHumanReadableChar");
searchTrie.insert("CHECK_FOR_ERRORS");
searchTrie.insert("GetParsedStructsAndClasses");
searchTrie.insert("GetParsedEnums");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("GetHumanReadableString");
searchTrie.insert("bParseCppFiles");
searchTrie.insert("ExcludeList");
searchTrie.insert("bTesting");
searchTrie.insert("TestList");
searchTrie.insert("CurrentParsingFileName");
searchTrie.insert("Chars");
searchTrie.insert("Index");
searchTrie.insert("CurrentComment");
searchTrie.insert("CurrentAccessSpecifier");
searchTrie.insert("CurrentClassOrStruct");
searchTrie.insert("CurrentEnumValue");
searchTrie.insert("CurrentEnum");
searchTrie.insert("CurrentUINTERFACE");
searchTrie.insert("CurrentUFUNCTIONUFUNCTIONSpecifiers");
searchTrie.insert("CurrentUFUNCTIONUFUNCTIONMetaSpecifiers");
searchTrie.insert("CurrentFunctionTemplateParameters");
searchTrie.insert("CurrentFunctionParameters");
searchTrie.insert("CurrentUPROPERTYSpecifiers");
searchTrie.insert("CurrentUPROPERTYMetaSpecifiers");
searchTrie.insert("CurrentVariable");
searchTrie.insert("ParsedStructsAndClasses");
searchTrie.insert("ParsedEnums");
searchTrie.insert("ParsedUINTERFACEs");
searchTrie.insert("");
searchTrie.insert("ParsedFiles");
searchTrie.insert("");
searchTrie.insert("NumFunctionCalls");
searchTrie.insert("FunctionReturnType");
searchTrie.insert("FunctionReturnType");
searchTrie.insert("FunctionReturnType");
searchTrie.insert("S2)");
searchTrie.insert("bIsConst");
searchTrie.insert("Type");
searchTrie.insert("Pointers");
searchTrie.insert("FunctionParameter");
searchTrie.insert("FunctionParameter");
searchTrie.insert("GetStringForCachedClassInfoFile");
searchTrie.insert("S2)");
searchTrie.insert("bIsConst");
searchTrie.insert("Type");
searchTrie.insert("VariableTemplateValues");
searchTrie.insert("Pointers");
searchTrie.insert("Name");
searchTrie.insert("VirtualFunctionSignature");
searchTrie.insert("VirtualFunctionSignature");
searchTrie.insert("VirtualFunctionSignature");
searchTrie.insert("GetStringForCachedClassInfoFile");
searchTrie.insert("S2)");
searchTrie.insert("ReturnType");
searchTrie.insert("Name");
searchTrie.insert("Parameters");
searchTrie.insert("bIsConst");
searchTrie.insert("EngineClassInfo");
searchTrie.insert("EngineClassInfo");
searchTrie.insert("RecursiveAppendParents");
searchTrie.insert("Parents");
searchTrie.insert("bHaveVirtualsBeenConfirmed");
searchTrie.insert("VirtualFunctions");
searchTrie.insert("RelativeDocumentationURL");
searchTrie.insert("FileDeclaredIn");
searchTrie.insert("DocumentationTool_Engine");
searchTrie.insert("DocumentationTool_Engine");
searchTrie.insert("GatherEngineClassAndStructData");
searchTrie.insert("ParseEngineHeaderFile");
searchTrie.insert("ParseClassBodyForVirtuals");
searchTrie.insert("ParseUnrealDocumentationAllClassesSite");
searchTrie.insert("BusyWaitForEngineDocsFileDownloadToComplete");
searchTrie.insert("ParseUnrealDocumentationAllClassesSite_Part2");
searchTrie.insert("GetVirtualFunctions");
searchTrie.insert("RecursiveConfirmVirtualsInner");
searchTrie.insert("CreateAndWriteToCachedClassHierarchyFile");
searchTrie.insert("LoadCachedClassHierarchyFile");
searchTrie.insert("SkipWhitespaceAndComments");
searchTrie.insert("AtStartOfComment");
searchTrie.insert("SkipSingleLineComments");
searchTrie.insert("SkipMultiLineComment");
searchTrie.insert("SkipPreprocessorCommand");
searchTrie.insert("SkipTypedef");
searchTrie.insert("SkipFunctionBody");
searchTrie.insert("SkipToClosingCurlyBracket");
searchTrie.insert("ParseVirtualFunctionParameters");
searchTrie.insert("ParseVirtualFunctionParameterTemplateValues");
searchTrie.insert("AtEOF");
searchTrie.insert("ParseToken");
searchTrie.insert("ParseToken");
searchTrie.insert("ParsePreviousToken");
searchTrie.insert("SkipToken");
searchTrie.insert("SkipTo");
searchTrie.insert("IsWhitespace");
searchTrie.insert("GetAreaAroundIndex");
searchTrie.insert("ToHumanReadableChar");
searchTrie.insert("GetStringForCachedClassInfoFile");
searchTrie.insert("World");
searchTrie.insert("HeaderFileBeingParsed");
searchTrie.insert("TimeBusyWaitForDocsFileDownloadToCompleteStarted");
searchTrie.insert("CachedEngineClassesFilePath");
searchTrie.insert("WebsiteSourceBatchFilePath");
searchTrie.insert("WebsiteSourceFileLocation");
searchTrie.insert("ClassNameToInfo");
searchTrie.insert("bTesting");
searchTrie.insert("DocumentationTool_HTML");
searchTrie.insert("DocumentationTool_HTML");
searchTrie.insert("AssignRelativeFolderPath_Class");
searchTrie.insert("AssignRelativeFolderPath_Struct");
searchTrie.insert("AssignRelativeFolderPath_Enum");
searchTrie.insert("AssignRelativeFolderPath_Function");
searchTrie.insert("AssignRelativeFolderPath_Variable");
searchTrie.insert("AssignRelativeFolderPath_EnumValue");
searchTrie.insert("GetPartialWordsFromClassName");
searchTrie.insert("GetPartialWordsFromStructName");
searchTrie.insert("GetPartialWordsFromEnumName");
searchTrie.insert("GetPartialWordsFromFunctionName");
searchTrie.insert("GetPartialWordsFromVariableName");
searchTrie.insert("GetPartialWordsFromEnumValueName");
searchTrie.insert("AppendBasicJavascript");
searchTrie.insert("CreateSeperateHTMLFileForClass");
searchTrie.insert("CreateSeperateHTMLFileForStruct");
searchTrie.insert("CreateSeperateHTMLFileForEnum");
searchTrie.insert("CreateSeperateHTMLFileForFunction");
searchTrie.insert("CreateSeperateHTMLFileForVariable");
searchTrie.insert("CreateSeperateHTMLFileForEnumValue");
searchTrie.insert("GetSeperateHTMLFileHTMLForClass");
searchTrie.insert("GetSeperateHTMLFileHTMLForStruct");
searchTrie.insert("GetSeperateHTMLFileHTMLForEnum");
searchTrie.insert("GetSeperateHTMLFileHTMLForFunction");
searchTrie.insert("GetSeperateHTMLFileHTMLForVariable");
searchTrie.insert("GetSeperateHTMLFileHTMLForEnumValue");
searchTrie.insert("UploadDocumentationFilesToGitHub");
searchTrie.insert("SearchTokenToPathsContainer");
searchTrie.insert("PathToBasicInfoContainer");
searchTrie.insert("PATH_TOKEN_CHAR_LIMIT");
searchTrie.insert("JS");
searchTrie.insert("MoreJS");
searchTrie.insert("PathsInUse");
searchTrie.insert("UDocToolTestUObject");
searchTrie.insert("SomeInt");
searchTrie.insert("");
searchTrie.insert("FSomeTestStruct");
searchTrie.insert("A64BitInt");
searchTrie.insert("AMyTestClass");
searchTrie.insert("MyFunc");
searchTrie.insert("Func2");
searchTrie.insert("APlayerCamera");
searchTrie.insert("APlayerCamera");
searchTrie.insert("BeginPlay");
searchTrie.insert("Tick");
searchTrie.insert("PossessedBy");
searchTrie.insert("OnRep_Controller");
searchTrie.insert("DestroyIfNotOurs");
searchTrie.insert("SnapToLocation");
searchTrie.insert("GetSpringArm");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UUpgradeEffect");
searchTrie.insert("ApplyEffect_Building");
searchTrie.insert("ApplyEffect_Infantry");
searchTrie.insert("UUpgrade_DamageAndDefense");
searchTrie.insert("UUpgrade_DamageAndDefense");
searchTrie.insert("ApplyEffect_Building");
searchTrie.insert("ApplyEffect_Infantry");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UUpgrade_IncreaseResourceCapacity");
searchTrie.insert("UUpgrade_IncreaseResourceCapacity");
searchTrie.insert("ApplyEffect_Infantry");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UUpgrade_AttackSpeed");
searchTrie.insert("UUpgrade_AttackSpeed");
searchTrie.insert("ApplyEffect_Infantry");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("CalculateActualMultiplier");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AStartingGrid");
searchTrie.insert("AStartingGrid");
searchTrie.insert("PostLoad");
searchTrie.insert("BeginPlay");
searchTrie.insert("GetSpawnLocation");
searchTrie.insert("GetSpawnRotation");
searchTrie.insert("PIE_IsForCPUPlayer");
searchTrie.insert("PIE_GetCPUOwnerIndex");
searchTrie.insert("PIE_GetHumanOwnerIndex");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("SpawnStartingBuilding");
searchTrie.insert("SpawnStartingInfantry");
searchTrie.insert("GetSpawnedBuildingTypes");
searchTrie.insert("GetSpawnedUnitTypes");
searchTrie.insert("RegisterGridComponent");
searchTrie.insert("bStartedInMap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UStartingGridComponent");
searchTrie.insert("OnRegister");
searchTrie.insert("GetSelectableBP");
searchTrie.insert("SessionOptions");
searchTrie.insert("Map_ToString");
searchTrie.insert("Map_ToID");
searchTrie.insert("IsPasswordProtected_ToString");
searchTrie.insert("IsPasswordProtected_ToBool");
searchTrie.insert("StartingResources_ToString");
searchTrie.insert("StartingResources_ToEnumValue");
searchTrie.insert("DefeatCondition_ToString");
searchTrie.insert("DefeatCondition_ToEnumValue");
searchTrie.insert("IsLANSession");
searchTrie.insert("GetLobbyName");
searchTrie.insert("GetStartingResources");
searchTrie.insert("GetDefeatCondition");
searchTrie.insert("GetMapID");
searchTrie.insert("GetNumPublicConnections");
searchTrie.insert("IsLAN");
searchTrie.insert("GetHostName");
searchTrie.insert("GetServerName");
searchTrie.insert("GetCurrentNumPlayers");
searchTrie.insert("GetMaxNumPlayers");
searchTrie.insert("IsPasswordProtected");
searchTrie.insert("GetPing");
searchTrie.insert("GetMapID");
searchTrie.insert("GetStartingResources");
searchTrie.insert("GetDefeatCondition");
searchTrie.insert("MAX_NUM_LAN_SEARCH_RESULTS");
searchTrie.insert("MAX_NUM_STEAM_SEARCH_RESULTS");
searchTrie.insert("PING_BUCKET_SIZE");
searchTrie.insert("LOBBY_NAME_KEY");
searchTrie.insert("IS_PASSWORD_PROTECTED_KEY");
searchTrie.insert("MAP_NAME_KEY");
searchTrie.insert("STARTING_RESOURCES_KEY");
searchTrie.insert("DEFEAT_CONDITION_KEY");
searchTrie.insert("UNIQUE_RTS_KEY");
searchTrie.insert("ARTSGameSession");
searchTrie.insert("ARTSGameSession");
searchTrie.insert("PreInitializeComponents");
searchTrie.insert("HostSession");
searchTrie.insert("OnCreateSessionComplete");
searchTrie.insert("FindSessions");
searchTrie.insert("OnFindSessionsComplete");
searchTrie.insert("JoinSession");
searchTrie.insert("OnJoinSessionComplete");
searchTrie.insert("StartSession");
searchTrie.insert("OnStartOnlineGameComplete");
searchTrie.insert("DestroySession");
searchTrie.insert("OnDestroySessionComplete");
searchTrie.insert("GetSessionJoinability");
searchTrie.insert("ApproveLogin");
searchTrie.insert("GetSessionSearch");
searchTrie.insert("GetSessionInterface");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DoOnDestroySessionComplete");
searchTrie.insert("SessionSearch");
searchTrie.insert("OnCreateSessionCompleteDelegate");
searchTrie.insert("OnStartSessionCompleteDelegate");
searchTrie.insert("OnDestroySessionCompleteDelegate");
searchTrie.insert("OnFindSessionsCompleteDelegate");
searchTrie.insert("OnJoinSessionCompleteDelegate");
searchTrie.insert("DelegateHandle_OnCreateSessionComplete");
searchTrie.insert("DelegateHandle_OnStartSessionComplete");
searchTrie.insert("DelegateHandle_OnDestroySessionComplete");
searchTrie.insert("DelegateHandle_OnFindSessionsComplete");
searchTrie.insert("DelegateHandle_OnJoinSessionComplete");
searchTrie.insert("FRTSConnectionAlwaysRelevantNodePair");
searchTrie.insert("FRTSConnectionAlwaysRelevantNodePair");
searchTrie.insert("FRTSConnectionAlwaysRelevantNodePair");
searchTrie.insert("operator=");
searchTrie.insert("URTSReplicationGraph");
searchTrie.insert("URTSReplicationGraph");
searchTrie.insert("InitGlobalActorClassSettings");
searchTrie.insert("InitGlobalGraphNodes");
searchTrie.insert("InitConnectionGraphNodes");
searchTrie.insert("NotifyOfNumTeams");
searchTrie.insert("RouteAddNetworkActorToNodes");
searchTrie.insert("RouteRemoveNetworkActorToNodes");
searchTrie.insert("ServerReplicateActors");
searchTrie.insert("ReplicateActorListsForConnection_Default");
searchTrie.insert("ReplicateActorListsForConnection_FastShared");
searchTrie.insert("ReplicateSingleActor");
searchTrie.insert("ProcessRemoteFunction");
searchTrie.insert("GetMappingPolicy");
searchTrie.insert("GetAlwaysRelevantNodeForConnection");
searchTrie.insert("GetBuildingsNodeForTeam");
searchTrie.insert("GetInfantryNodeForTeam");
searchTrie.insert("HasSelectableSetUp");
searchTrie.insert("GetTeamVisibilityInfo");
searchTrie.insert("NotifyOfBuildingDestroyed");
searchTrie.insert("ForceNetUpdate");
searchTrie.insert("FlushNetDormancy");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TeamVisibilityInfos");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ClassRepNodePolicies");
searchTrie.insert("RTSReplicationGraphFrame");
searchTrie.insert("URTSReplicationGraphConnection");
searchTrie.insert("PrepareForReplication");
searchTrie.insert("NotifyAddDestructionInfo");
searchTrie.insert("NotifyRemoveDestructionInfo");
searchTrie.insert("NotifyResetDestructionInfo");
searchTrie.insert("ReplicateDestructionInfos");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("RTSPendingDestructInfoList");
searchTrie.insert("URTSReplicationGraphNode_ActorList");
searchTrie.insert("URTSReplicationGraphNode_ActorList");
searchTrie.insert("SetupNode");
searchTrie.insert("NotifyAddNetworkActor");
searchTrie.insert("NotifyRemoveNetworkActor");
searchTrie.insert("NotifyResetAllNetworkActors");
searchTrie.insert("GatherActorListsForConnection");
searchTrie.insert("LogNode");
searchTrie.insert("GetAllActorsInNode_Debugging");
searchTrie.insert("ReplicationActorList");
searchTrie.insert("URTSReplicationGraphNode_AlwaysRelevant");
searchTrie.insert("URTSReplicationGraphNode_AlwaysRelevantForConnection");
searchTrie.insert("URTSReplicationGraphNode_TeamBuildings");
searchTrie.insert("SetupNode");
searchTrie.insert("NotifyAddNetworkActor");
searchTrie.insert("NotifyRemoveNetworkActor");
searchTrie.insert("NotifyResetAllNetworkActors");
searchTrie.insert("GatherActorListsForConnection");
searchTrie.insert("Buildings");
searchTrie.insert("Team");
searchTrie.insert("URTSReplicationGraphNode_TeamInfantry");
searchTrie.insert("SetupNode");
searchTrie.insert("NotifyAddNetworkActor");
searchTrie.insert("NotifyRemoveNetworkActor");
searchTrie.insert("NotifyResetAllNetworkActors");
searchTrie.insert("GatherActorListsForConnection");
searchTrie.insert("Infantry");
searchTrie.insert("Team");
searchTrie.insert("FTestConnectionAlwaysRelevantNodePair");
searchTrie.insert("FTestConnectionAlwaysRelevantNodePair");
searchTrie.insert("FTestConnectionAlwaysRelevantNodePair");
searchTrie.insert("operator=");
searchTrie.insert("UTestReplicationGraph");
searchTrie.insert("UTestReplicationGraph");
searchTrie.insert("InitGlobalActorClassSettings");
searchTrie.insert("InitGlobalGraphNodes");
searchTrie.insert("InitConnectionGraphNodes");
searchTrie.insert("RouteAddNetworkActorToNodes");
searchTrie.insert("RouteRemoveNetworkActorToNodes");
searchTrie.insert("ServerReplicateActors");
searchTrie.insert("GetAlwaysRelevantNodeForConnection");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ClassRepNodePolicies");
searchTrie.insert("UTestReplicationGraphNode_ActorList");
searchTrie.insert("UTestReplicationGraphNode_ActorList");
searchTrie.insert("SetupNode");
searchTrie.insert("NotifyAddNetworkActor");
searchTrie.insert("NotifyRemoveNetworkActor");
searchTrie.insert("NotifyResetAllNetworkActors");
searchTrie.insert("GatherActorListsForConnection");
searchTrie.insert("UTestReplicationGraphNode_AlwaysRelevant");
searchTrie.insert("UTestReplicationGraphNode_AlwaysRelevantForConnection");
searchTrie.insert("UAnotherTestReplicationGraph");
searchTrie.insert("UAnotherTestReplicationGraph");
searchTrie.insert("InitGlobalActorClassSettings");
searchTrie.insert("InitGlobalGraphNodes");
searchTrie.insert("InitConnectionGraphNodes");
searchTrie.insert("RouteAddNetworkActorToNodes");
searchTrie.insert("RouteRemoveNetworkActorToNodes");
searchTrie.insert("ServerReplicateActors");
searchTrie.insert("GetAlwaysRelevantNodeForConnection");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ADevelopmentSettings");
searchTrie.insert("ADevelopmentSettings");
searchTrie.insert("InitHumanConfiguration");
searchTrie.insert("InitCPUConfiguration");
searchTrie.insert("InitStartingResources");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("ShouldSkipMainMenu");
searchTrie.insert("ShouldSkipOpeningCutscene");
searchTrie.insert("GetNumCPUPlayers");
searchTrie.insert("GetInvalidHumanOwnerRule");
searchTrie.insert("GetInvalidCPUOwnerRule");
searchTrie.insert("GetHumanPlayerInfo");
searchTrie.insert("GetCPUPlayerInfo");
searchTrie.insert("GetStartingResourceConfig");
searchTrie.insert("GetDefeatCondition");
searchTrie.insert("IsCheatWidgetBPSet");
searchTrie.insert("GetCheatWidgetBP");
searchTrie.insert("ShouldInitiallyShowCheatWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UEnumStringRepresentations");
searchTrie.insert("UEnumStringRepresentations");
searchTrie.insert("Get");
searchTrie.insert("GetString");
searchTrie.insert("GetString");
searchTrie.insert("GetString");
searchTrie.insert("GetString");
searchTrie.insert("GetString");
searchTrie.insert("GetString");
searchTrie.insert("GetEnumValueFromStringSlow_EditorPlaySkippingOption");
searchTrie.insert("GetEnumValueFromStringSlow_DefeatCondition");
searchTrie.insert("GetEnumValueFromStringSlow_PIEPlayInvalidOwnerRule");
searchTrie.insert("GetEnumValueFromStringSlow_Faction");
searchTrie.insert("GetEnumValueFromStringSlow_Team");
searchTrie.insert("GetEnumValueFromStringSlow_CPUDifficulty");
searchTrie.insert("InitializeEnumToString_EditorPlaySkippingOption");
searchTrie.insert("InitializeEnumToString_DefeatConditions");
searchTrie.insert("InitializeEnumToString_InvalidOwnerIndexAction");
searchTrie.insert("InitializeEnumToString_Faction");
searchTrie.insert("InitializeEnumToString_Team");
searchTrie.insert("InitializeEnumToString_CPUDifficulty");
searchTrie.insert("EnumToString_EditorPlaySkippingOption");
searchTrie.insert("EnumToString_DefeatConditions");
searchTrie.insert("EnumToString_InvalidOwnerIndexAction");
searchTrie.insert("EnumToString_Faction");
searchTrie.insert("EnumToString_Team");
searchTrie.insert("EnumToString_CPUDifficulty");
searchTrie.insert("FInputInfoBase");
searchTrie.insert("FInputInfoBase");
searchTrie.insert("FInputInfoBase");
searchTrie.insert("HasCTRLKeyModifier");
searchTrie.insert("HasALTKeyModifier");
searchTrie.insert("HasShiftKeyModifier");
searchTrie.insert("DisplayName");
searchTrie.insert("ActionName");
searchTrie.insert("KeyWithModifiers");
searchTrie.insert("ActionAsEnum");
searchTrie.insert("AxisAsEnum");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("FInputActionInfo");
searchTrie.insert("FInputActionInfo");
searchTrie.insert("FInputActionInfo");
searchTrie.insert("HasActionForKeyPress");
searchTrie.insert("HasActionForKeyRelease");
searchTrie.insert("OnPressedAction");
searchTrie.insert("OnReleasedAction");
searchTrie.insert("KeyMappings");
searchTrie.insert("CreateDefaultActionInfos");
searchTrie.insert("AddActionInfo");
searchTrie.insert("AddActionInfo");
searchTrie.insert("ActionTypeToArrayIndex");
searchTrie.insert("ArrayIndexToActionType");
searchTrie.insert("NUM_ACTIONS");
searchTrie.insert("ActionInfos");
searchTrie.insert("NumArrayEntries");
searchTrie.insert("FInputAxisInfo");
searchTrie.insert("FInputAxisInfo");
searchTrie.insert("FInputAxisInfo");
searchTrie.insert("FunctionPtr");
searchTrie.insert("Scale");
searchTrie.insert("AxisMappings");
searchTrie.insert("CreateDefaultAxisInfos");
searchTrie.insert("AddAxisInfo");
searchTrie.insert("AddAxisInfo");
searchTrie.insert("AxisTypeToArrayIndex");
searchTrie.insert("ArrayIndexToAxisType");
searchTrie.insert("NUM_AXIS");
searchTrie.insert("AxisInfos");
searchTrie.insert("NumArrayEntries");
searchTrie.insert("InputMappings");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("FControlSettingDependencyInfo");
searchTrie.insert("Dependency");
searchTrie.insert("DependencyFullfilledOperator");
searchTrie.insert("bRequiredValue");
searchTrie.insert("RequiredValue");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("void");
searchTrie.insert("void");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("FControlSettingInfo");
searchTrie.insert("GetDisplayName");
searchTrie.insert("GetVariableType");
searchTrie.insert("GetValue");
searchTrie.insert("GetStep");
searchTrie.insert("GetNumSteps");
searchTrie.insert("SetValue");
searchTrie.insert("AdjustValue");
searchTrie.insert("ClampValue");
searchTrie.insert("ResetToDefault");
searchTrie.insert("GetDefaultValue");
searchTrie.insert("ApplyValue");
searchTrie.insert("DisplayName");
searchTrie.insert("VariablePtr");
searchTrie.insert("VariableType");
searchTrie.insert("");
searchTrie.insert("DefaultValueStep");
searchTrie.insert("Steps");
searchTrie.insert("");
searchTrie.insert("URTSGameUserSettings");
searchTrie.insert("URTSGameUserSettings");
searchTrie.insert("PostInitProperties");
searchTrie.insert("SetupControlSettingStepArrays");
searchTrie.insert("UseCPlusPlusDefaults");
searchTrie.insert("SetToDefaults");
searchTrie.insert("SetToDefaultsNoFail");
searchTrie.insert("LoadSettings");
searchTrie.insert("LoadSettingsNoFail");
searchTrie.insert("LoadSettingsInner");
searchTrie.insert("InitialSetup");
searchTrie.insert("ApplyAllSettings");
searchTrie.insert("ApplySettings");
searchTrie.insert("HasSeenProfile");
searchTrie.insert("GetPlayerAlias");
searchTrie.insert("GetDefaultFaction");
searchTrie.insert("ChangeHasSeenProfile");
searchTrie.insert("ChangePlayerAlias");
searchTrie.insert("ChangeDefaultFaction");
searchTrie.insert("ResetProfileSettingsToDefaults");
searchTrie.insert("ApplyProfileSettings");
searchTrie.insert("GetControlSettingInfo");
searchTrie.insert("GetControlSettingValue");
searchTrie.insert("ResetControlSettingsToDefaults");
searchTrie.insert("ApplyControlSettings");
searchTrie.insert("GetVolume");
searchTrie.insert("GetStepCount");
searchTrie.insert("SetVolume");
searchTrie.insert("AdjustVolume");
searchTrie.insert("PopulateSoundClassVolumes");
searchTrie.insert("ResetAudioSettingsToDefaults");
searchTrie.insert("ApplySoundSettings");
searchTrie.insert("ResetKeyMappingsToDefault");
searchTrie.insert("ApplyKeyMappingSettings");
searchTrie.insert("RemapKeyBinding");
searchTrie.insert("RemapKeyBinding");
searchTrie.insert("GetKey");
searchTrie.insert("GetKey");
searchTrie.insert("GetBoundAction");
searchTrie.insert("GetBoundActionIgnoringModifiers");
searchTrie.insert("GetBoundAxis");
searchTrie.insert("GetBoundAxis");
searchTrie.insert("ResetCustomVideoSettingsToDefaults");
searchTrie.insert("ApplyCustomVideoSettings");
searchTrie.insert("GetOverallScalabilityLevel");
searchTrie.insert("SetOverallScalabilityLevel");
searchTrie.insert("GetAntiAliasingMethod");
searchTrie.insert("SetAntiAliasingMethod");
searchTrie.insert("MIN_CAMERA_ZOOM_AMOUNT");
searchTrie.insert("MAX_CAMERA_ZOOM_AMOUNT");
searchTrie.insert("MIN_CAMERA_PITCH");
searchTrie.insert("MAX_CAMERA_PITCH");
searchTrie.insert("MOUSE_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER");
searchTrie.insert("KEYBOARD_DIAGONAL_MOVEMENT_SPEED_MULTIPLIER");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("VOLUME_MIN");
searchTrie.insert("VOLUME_MAX");
searchTrie.insert("VOLUME_DEFAULT_STEP");
searchTrie.insert("NUM_VOLUME_STEPS");
searchTrie.insert("VOLUME_STEPS[NUM_VOLUME_STEPS]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("KeyToAction");
searchTrie.insert("");
searchTrie.insert("KeyToAxis");
searchTrie.insert("");
searchTrie.insert("URTSDamageType");
searchTrie.insert("URTSDamageType");
searchTrie.insert("UDamageType_Default");
searchTrie.insert("UDamageType_Bullet");
searchTrie.insert("UDamageType_SniperRound");
searchTrie.insert("UDamageType_Explosive");
searchTrie.insert("UDamageType_BiologicalHeal");
searchTrie.insert("UDamageType_Shadow");
searchTrie.insert("UDamageType_Lightning");
searchTrie.insert("UDamageType_Frost");
searchTrie.insert("UDamageType_Nuke");
searchTrie.insert("UDamageType_GAU8ArmourPiercing");
searchTrie.insert("UDamageType_GAU8HighExplosive");
searchTrie.insert("DevelopmentStatics");
searchTrie.insert("BreakpointMessage");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("Message");
searchTrie.insert("IsViewportFocused");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("CurrentPIEInstanceMessage");
searchTrie.insert("IsValid");
searchTrie.insert("PrintToScreenAndLog");
searchTrie.insert("LogMessage");
searchTrie.insert("EnumToString");
searchTrie.insert("InventoryItemBehavior");
searchTrie.insert("Shoes_OnAquired");
searchTrie.insert("Shoes_OnRemoved");
searchTrie.insert("Bangle_OnAquired");
searchTrie.insert("Bangle_OnRemoved");
searchTrie.insert("RedGem_OnAquired");
searchTrie.insert("RedGem_OnRemoved");
searchTrie.insert("GreenGem_OnAquired");
searchTrie.insert("GreenGem_OnRemoved");
searchTrie.insert("GoldenDagger_OnAquired");
searchTrie.insert("GoldenDagger_OnRemoved");
searchTrie.insert("Necklace_OnAquired");
searchTrie.insert("Necklace_OnRemoved");
searchTrie.insert("GoldenCrown_OnAquired");
searchTrie.insert("GoldenCrown_OnRemoved");
searchTrie.insert("StrongSniperRifle_OnAquired");
searchTrie.insert("StrongSniperRifle_OnRemoved");
searchTrie.insert("RottenPumpkin_OnAquired");
searchTrie.insert("RottenPumpkin_OnRemoved");
searchTrie.insert("Statics");
searchTrie.insert("IsValid");
searchTrie.insert("IsValid");
searchTrie.insert("IsValid");
searchTrie.insert("IsValid");
searchTrie.insert("IsValid");
searchTrie.insert("ToSelectablePtr");
searchTrie.insert("SpawnBuilding");
searchTrie.insert("SpawnBuildingForFactionInfo");
searchTrie.insert("SpawnUnitAsSelectable");
searchTrie.insert("SpawnUnit");
searchTrie.insert("SpawnUnitForFactionInfo");
searchTrie.insert("SpawnStartingSelectables");
searchTrie.insert("SpawnFogParticles");
searchTrie.insert("SpawnFogParticlesAttached");
searchTrie.insert("SpawnParticles");
searchTrie.insert("GetMapName");
searchTrie.insert("IsBuildableLocation");
searchTrie.insert("IsBuildableLocationReturn");
searchTrie.insert("Server_TryApplyBuffOrDebuff");
searchTrie.insert("Server_TryApplyBuffOrDebuff");
searchTrie.insert("Client_ApplyBuffOrDebuffGivenOutcome");
searchTrie.insert("Client_ApplyBuffOrDebuffGivenOutcome");
searchTrie.insert("GetPlayerColor");
searchTrie.insert("GetTeamColor");
searchTrie.insert("GetActorFromOverlap");
searchTrie.insert("PlaySound2D");
searchTrie.insert("SpawnSoundAtLocation");
searchTrie.insert("SpawnSoundAttached");
searchTrie.insert("");
searchTrie.insert("SpawnDecalAtLocation");
searchTrie.insert("SpawnDecalAtLocation");
searchTrie.insert("LineTraceSingleByChannel");
searchTrie.insert("LineTraceMultiByChannel");
searchTrie.insert("LineTraceSingleByObjectType");
searchTrie.insert("CapsuleSweep");
searchTrie.insert("GetDistance2D");
searchTrie.insert("GetDistance2DSquared");
searchTrie.insert("GetPathDistanceSqr");
searchTrie.insert("IsSelectableInRangeForAbility");
searchTrie.insert("IsSelectableInRangeForAbility");
searchTrie.insert("GetAbilityRangeSquared");
searchTrie.insert("GetSelectablesDistanceForAbilitySquared");
searchTrie.insert("GetSelectablesDistanceForAbilitySquared");
searchTrie.insert("GetSelectablesDistanceSquaredFromInventoryItemActor");
searchTrie.insert("CanBeSelected");
searchTrie.insert("IsSelectableVisibleLocally");
searchTrie.insert("IsSelectableVisible");
searchTrie.insert("IsOutsideFog");
searchTrie.insert("IsLocationOutsideFog");
searchTrie.insert("IsLocationOutsideFogLocally");
searchTrie.insert("IsLocationOutsideFogLocallyNotChecked");
searchTrie.insert("GetLocationVisionStatusLocally");
searchTrie.insert("GetLocationVisionStatusLocallyNotChecked");
searchTrie.insert("IsShouldBeSetAnim");
searchTrie.insert("GetPlayerIDTagIndex");
searchTrie.insert("GetTeamTagIndex");
searchTrie.insert("GetTargetingTypeTagIndex");
searchTrie.insert("GetAirTagIndex");
searchTrie.insert("GetSelectableTypeTagIndex");
searchTrie.insert("GetHasAttackTagIndex");
searchTrie.insert("GetZeroHealthTagIndex");
searchTrie.insert("GetInventoryTagIndex");
searchTrie.insert("GenerateTeamTag");
searchTrie.insert("HasZeroHealth");
searchTrie.insert("IsABuilding");
searchTrie.insert("IsAUnit");
searchTrie.insert("IsOwned");
searchTrie.insert("IsOwned");
searchTrie.insert("IsFriendly");
searchTrie.insert("IsHostile");
searchTrie.insert("CanTypeBeTargeted");
searchTrie.insert("CanTypeBeTargeted");
searchTrie.insert("HasAttack");
searchTrie.insert("GetTargetingType");
searchTrie.insert("GetTargetingType");
searchTrie.insert("IsAirUnit");
searchTrie.insert("HasInventory");
searchTrie.insert("IsAShopThatAcceptsRefunds");
searchTrie.insert("GetSocketName");
searchTrie.insert("SocketLocationToArrayIndex");
searchTrie.insert("InitSocketNames");
searchTrie.insert("InitTargetTypeFNames");
searchTrie.insert("InitImportantAnims");
searchTrie.insert("CreateProjectAPIMacroText");
searchTrie.insert("ConcateText");
searchTrie.insert("TextToInt");
searchTrie.insert("IntToText");
searchTrie.insert("TeamToStringSlow");
searchTrie.insert("StringToTeamSlow");
searchTrie.insert("StringToCPUDifficultySlow");
searchTrie.insert("FactionToString");
searchTrie.insert("StringToFaction");
searchTrie.insert("IsPowerOfTwo");
searchTrie.insert("IntToCollisionChannel");
searchTrie.insert("TeamToArrayIndex");
searchTrie.insert("ArrayIndexToTeam");
searchTrie.insert("AnimationToArrayIndex");
searchTrie.insert("ArrayIndexToAnimation");
searchTrie.insert("ContextButtonToArrayIndex");
searchTrie.insert("ArrayIndexToContextButton");
searchTrie.insert("ArmourTypeToArrayIndex");
searchTrie.insert("ArrayIndexToArmourType");
searchTrie.insert("TargetingTypeToArrayIndex");
searchTrie.insert("ResourceTypeToArrayIndex");
searchTrie.insert("ArrayIndexToResourceType");
searchTrie.insert("HousingResourceTypeToArrayIndex");
searchTrie.insert("ArrayIndexToHousingResourceType");
searchTrie.insert("StartingResourceAmountToArrayIndex");
searchTrie.insert("ArrayIndexToStartingResourceAmount");
searchTrie.insert("ArrayIndexToGameNotification");
searchTrie.insert("FactionToArrayIndex");
searchTrie.insert("ArrayIndexToFaction");
searchTrie.insert("ArrayIndexToPersistentTabType");
searchTrie.insert("ArrayIndexToAffiliation");
searchTrie.insert("ArrayIndexToCommandTargetType");
searchTrie.insert("AffiliationToCommandTargetType");
searchTrie.insert("DefeatConditionToArrayIndex");
searchTrie.insert("ArrayIndexToDefeatCondition");
searchTrie.insert("ArrayIndexToGameWarning");
searchTrie.insert("ArrayIndexToMessageRecipientType");
searchTrie.insert("ArrayIndexToCPUDifficulty");
searchTrie.insert("ArrayIndexToMatchWidgetType");
searchTrie.insert("ArrayIndexToUnitType");
searchTrie.insert("UnitTypeToArrayIndex");
searchTrie.insert("ArrayIndexToUpgradeType");
searchTrie.insert("ArrayIndexToStaticBuffOrDebuffType");
searchTrie.insert("ArrayIndexToTickableBuffOrDebuffType");
searchTrie.insert("ArrayIndexToBuffOrDebuffSubType");
searchTrie.insert("ArrayIndexToAbilityRequirement");
searchTrie.insert("ArrayIndexToSelectableResourceType");
searchTrie.insert("ArrayIndexToInventoryItem");
searchTrie.insert("InventoryItemToArrayIndex");
searchTrie.insert("ArrayIndexToCommanderAbilityType");
searchTrie.insert("CommanderAbilityTypeToArrayIndex");
searchTrie.insert("CommanderSkillTreeNodeToArrayIndex");
searchTrie.insert("ArrayIndexToControlSettingType");
searchTrie.insert("PhysicalSurfaceTypeToArrayIndex");
searchTrie.insert("ArrayIndexToBuildingNetworkType");
searchTrie.insert("BuildingNetworkTypeToArrayIndex");
searchTrie.insert("ArrayIndexToEditorPlaySkippingOption");
searchTrie.insert("ArrayIndexToPIESeshInvalidOwnerRule");
searchTrie.insert("PROJECT_API_MACRO_TEXT");
searchTrie.insert("HARDWARE_CURSOR_PATH");
searchTrie.insert("POOLED_ACTOR_SPAWN_LOCATION");
searchTrie.insert("INFO_ACTOR_SPAWN_LOCATION");
searchTrie.insert("NUM_CUSTOM_MESH_SOCKETS");
searchTrie.insert("MeshFloorSocket");
searchTrie.insert("MeshMiddleSocket");
searchTrie.insert("MeshHeadSocket");
searchTrie.insert("LOBBY_OBSERVER_COMBO_BOX_OPTION");
searchTrie.insert("NUM_FACTIONS");
searchTrie.insert("NUM_MENU_WIDGET_TYPES");
searchTrie.insert("NUM_BUILDING_TYPES");
searchTrie.insert("NUM_UNIT_TYPES");
searchTrie.insert("NUM_CONTEXT_ACTIONS");
searchTrie.insert("NUM_CUSTOM_CONTEXT_ACTIONS");
searchTrie.insert("NUM_ANIMATIONS");
searchTrie.insert("NUM_GAME_NOTIFICATION_TYPES");
searchTrie.insert("NUM_GENERIC_GAME_WARNING_TYPES");
searchTrie.insert("NUM_ARMOUR_TYPES");
searchTrie.insert("NUM_UPGRADE_TYPES");
searchTrie.insert("NUM_CPU_DIFFICULTIES");
searchTrie.insert("NUM_DEFEAT_CONDITIONS");
searchTrie.insert("NUM_RESOURCE_TYPES");
searchTrie.insert("NUM_HOUSING_RESOURCE_TYPES");
searchTrie.insert("NUM_PERSISTENT_HUD_TAB_TYPES");
searchTrie.insert("NUM_MATCH_WIDGET_TYPES");
searchTrie.insert("NUM_BUILDING_ANIMATIONS");
searchTrie.insert("NUM_TARGETING_TYPES");
searchTrie.insert("NUM_COMMAND_TARGET_TYPES");
searchTrie.insert("NUM_AFFILIATIONS");
searchTrie.insert("NUM_MATCH_LOADING_STATUSES");
searchTrie.insert("NUM_STARTING_RESOURCE_AMOUNT_TYPES");
searchTrie.insert("NUM_MESSAGE_RECIPIENT_TYPES");
searchTrie.insert("NUM_STATIC_BUFF_AND_DEBUFF_TYPES");
searchTrie.insert("NUM_TICKABLE_BUFF_AND_DEBUFF_TYPES");
searchTrie.insert("NUM_BUFF_AND_DEBUFF_SUBTYPES");
searchTrie.insert("NUM_CUSTOM_ABILITY_CHECK_TYPES");
searchTrie.insert("NUM_SELECTABLE_RESOURCE_TYPES");
searchTrie.insert("NUM_INVENTORY_ITEM_TYPES");
searchTrie.insert("NUM_COMMANDER_ABILITY_TYPES");
searchTrie.insert("NUM_COMMANDER_SKILL_TREE_NODE_TYPES");
searchTrie.insert("NUM_CONTROL_SETTING_TYPES");
searchTrie.insert("NUM_BUILDING_GARRISON_NETWORK_TYPES");
searchTrie.insert("NUM_EDITOR_PLAY_SKIP_OPTIONS");
searchTrie.insert("NUM_PIE_SESSION_INVALID_OWNER_RULES");
searchTrie.insert("SWEEP_HEIGHT");
searchTrie.insert("");
searchTrie.insert("NUM_ACTOR_TAGS");
searchTrie.insert("NeutralID");
searchTrie.insert("NEUTRAL_TEAM_TAG");
searchTrie.insert("OBSERVER_TEAM_TAG");
searchTrie.insert("UNTARGETABLE_TAG");
searchTrie.insert("BuildingTag");
searchTrie.insert("UnitTag");
searchTrie.insert("InventoryItemTag");
searchTrie.insert("AirTag");
searchTrie.insert("NotAirTag");
searchTrie.insert("HasAttackTag");
searchTrie.insert("NotHasAttackTag");
searchTrie.insert("HasZeroHealthTag");
searchTrie.insert("AboveZeroHealthTag");
searchTrie.insert("NotHasInventoryTag");
searchTrie.insert("HasZeroCapacityInventoryTag");
searchTrie.insert("HasInventoryWithCapacityGreaterThanZeroTag");
searchTrie.insert("IsShopThatAcceptsRefundsTag");
searchTrie.insert("DamageTypes");
searchTrie.insert("SocketNames");
searchTrie.insert("TargetTypeFNames");
searchTrie.insert("ImportantAnims");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("GetInteger");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("FAtLeastOneInt16");
searchTrie.insert("");
searchTrie.insert("FFactionBuildingTypePair");
searchTrie.insert("FFactionBuildingTypePair");
searchTrie.insert("FFactionBuildingTypePair");
searchTrie.insert("Elem)");
searchTrie.insert("Elem_2)");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedImageAndSoundFlags");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("FStaticMeshInfo");
searchTrie.insert("FStaticMeshInfo");
searchTrie.insert("GetMesh");
searchTrie.insert("GetTransform");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FMeshInfoBasic");
searchTrie.insert("FMeshInfoBasic");
searchTrie.insert("IsMeshSet");
searchTrie.insert("IsStaticMesh");
searchTrie.insert("IsSkeletalMesh");
searchTrie.insert("GetMeshAsStaticMesh");
searchTrie.insert("GetMeshAsSkeletalMesh");
searchTrie.insert("GetLocation");
searchTrie.insert("GetRotation");
searchTrie.insert("GetScale3D");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCursorInfo");
searchTrie.insert("FCursorInfo");
searchTrie.insert("FCursorInfo");
searchTrie.insert("GetCursorPath");
searchTrie.insert("GetHotSpot");
searchTrie.insert("GetFullPath");
searchTrie.insert("SetFullPath");
searchTrie.insert("ContainsCustomCursor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextCommand");
searchTrie.insert("FContextCommand");
searchTrie.insert("FContextCommand");
searchTrie.insert("FContextCommand");
searchTrie.insert("AddSelectable");
searchTrie.insert("SetupTypes");
searchTrie.insert("SetupTypes");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextCommandWithLocation");
searchTrie.insert("FContextCommandWithLocation");
searchTrie.insert("FContextCommandWithLocation");
searchTrie.insert("GetClickLocation");
searchTrie.insert("");
searchTrie.insert("FContextCommandWithTarget");
searchTrie.insert("FContextCommandWithTarget");
searchTrie.insert("FContextCommandWithTarget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FRightClickCommandBase");
searchTrie.insert("FRightClickCommandBase");
searchTrie.insert("FRightClickCommandBase");
searchTrie.insert("ReserveAffectedSelectables");
searchTrie.insert("AddSelectable");
searchTrie.insert("SetUseSameGroup");
searchTrie.insert("UseSameGroup");
searchTrie.insert("GetAffectedSelectables");
searchTrie.insert("GetClickLocation");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FRightClickCommandWithTarget");
searchTrie.insert("FRightClickCommandWithTarget");
searchTrie.insert("FRightClickCommandWithTarget");
searchTrie.insert("GetTarget");
searchTrie.insert("");
searchTrie.insert("FRightClickCommandOnInventoryItem");
searchTrie.insert("FRightClickCommandOnInventoryItem");
searchTrie.insert("FRightClickCommandOnInventoryItem");
searchTrie.insert("GetClickedInventoryItem");
searchTrie.insert("GetClickedInventoryItemID");
searchTrie.insert("");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("FContextButton");
searchTrie.insert("ToString");
searchTrie.insert("UpdateFieldVisibilitys");
searchTrie.insert("Button2)");
searchTrie.insert("Button)");
searchTrie.insert("Button2)");
searchTrie.insert("GetButtonType");
searchTrie.insert("GetBuildingType");
searchTrie.insert("GetUnitType");
searchTrie.insert("GetUpgradeType");
searchTrie.insert("GetBuildInfo");
searchTrie.insert("GetHUDPersistentTabButtonOrdering");
searchTrie.insert("SetHUDPersistentTabButtonOrdering");
searchTrie.insert("SetBuildInfo");
searchTrie.insert("IsForBuildBuilding");
searchTrie.insert("IsForTrainUnit");
searchTrie.insert("IsForResearchUpgrade");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BuildInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("IsProductionForBuilding");
searchTrie.insert("IsForUnit");
searchTrie.insert("IsForUpgrade");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("FTrainingInfo");
searchTrie.insert("ToString");
searchTrie.insert("GetBuildingType");
searchTrie.insert("GetUnitType");
searchTrie.insert("GetUpgradeType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("Info)");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("FCPUPlayerTrainingInfo");
searchTrie.insert("GetActualCommand");
searchTrie.insert("GetRawAuxilleryInfo");
searchTrie.insert("GetOriginalCommandReasonForProduction");
searchTrie.insert("GetOriginalCommandAuxilleryInfo");
searchTrie.insert("ActualCommandType");
searchTrie.insert("AuxilleryInfo");
searchTrie.insert("OriginalCommand_ReasonForProduction");
searchTrie.insert("OriginalCommand_AuxilleryInfo");
searchTrie.insert("FBasicDecalInfo");
searchTrie.insert("FBasicDecalInfo");
searchTrie.insert("FBasicDecalInfo");
searchTrie.insert("GetDecal");
searchTrie.insert("GetRadius");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("FContextButtonInfo");
searchTrie.insert("MostlyDefaultValues");
searchTrie.insert("SetInitialType");
searchTrie.insert("AddAcceptableTargetFName");
searchTrie.insert("SetupHardwareCursors");
searchTrie.insert("GetButtonType");
searchTrie.insert("GetName");
searchTrie.insert("GetImage");
searchTrie.insert("GetHoveredImage");
searchTrie.insert("GetPressedImage");
searchTrie.insert("GetHighlightedImage");
searchTrie.insert("GetHoveredSound");
searchTrie.insert("GetPressedByLMBSound");
searchTrie.insert("GetPressedByRMBSound");
searchTrie.insert("GetDescription");
searchTrie.insert("IsInstant");
searchTrie.insert("IsIssuedToAllSelected");
searchTrie.insert("ShouldCheckRangeAtCommandIssueTime");
searchTrie.insert("PassesCommandTimeRangeCheck");
searchTrie.insert("PassesCommandTimeRangeCheck");
searchTrie.insert("PassesAnimNotifyTargetVisibilityCheck");
searchTrie.insert("PassesAnimNotifyRangeCheck");
searchTrie.insert("DoesCommandStopMovement");
searchTrie.insert("UsesAnimation");
searchTrie.insert("UsesPreparationAnimation");
searchTrie.insert("GetAnimationType");
searchTrie.insert("GetBuildingPreparationAnimationType");
searchTrie.insert("GetBuildingAnimationType");
searchTrie.insert("DoesAnimationBlockCommands");
searchTrie.insert("GetMouseAppearanceOption");
searchTrie.insert("RequiresSelectableTarget");
searchTrie.insert("CanLocationBeInsideFog");
searchTrie.insert("CanTargetEnemies");
searchTrie.insert("CanTargetFriendlies");
searchTrie.insert("CanTargetSelf");
searchTrie.insert("GetAcceptableTargets");
searchTrie.insert("GetAcceptableTargetFNames");
searchTrie.insert("GetDefaultCursorInfo");
searchTrie.insert("GetAcceptableTargetCursorInfo");
searchTrie.insert("GetUnacceptableTargetCursorInfo");
searchTrie.insert("GetAcceptableLocationDecal");
searchTrie.insert("GetUnusableLocationDecal");
searchTrie.insert("GetCooldown");
searchTrie.insert("GetInitialCooldown");
searchTrie.insert("GetPreparationAnimPlayPoint");
searchTrie.insert("GetSelectableResourceCost_1");
searchTrie.insert("GetMaxRange");
searchTrie.insert("GetEffectBP");
searchTrie.insert("GetEffectActor");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefaultMouseCursor_Info");
searchTrie.insert("AcceptableTargetMouseCursor_Info");
searchTrie.insert("UnacceptableTargetMouseCursor_Info");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderAbilityInfo");
searchTrie.insert("FCommanderAbilityInfo");
searchTrie.insert("SetType");
searchTrie.insert("PopulateAcceptableTargetFNames");
searchTrie.insert("SetupHardwareCursors");
searchTrie.insert("OnPostEdit");
searchTrie.insert("GetName");
searchTrie.insert("GetNormalImage");
searchTrie.insert("GetHoveredImage");
searchTrie.insert("GetPressedImage");
searchTrie.insert("GetHighlightedImage");
searchTrie.insert("GetHoveredSound");
searchTrie.insert("GetPressedByLMBSound");
searchTrie.insert("GetPressedByRMBSound");
searchTrie.insert("GetDescription");
searchTrie.insert("GetType");
searchTrie.insert("GetTargetingMethod");
searchTrie.insert("CanTargetInsideFog");
searchTrie.insert("CanTargetEnemies");
searchTrie.insert("CanTargetFriendlies");
searchTrie.insert("CanTargetSelf");
searchTrie.insert("GetAcceptableSelectableTargetFNames");
searchTrie.insert("GetCooldown");
searchTrie.insert("GetInitialCooldown");
searchTrie.insert("HasUnlimitedUses");
searchTrie.insert("GetNumUses");
searchTrie.insert("GetEffectBP");
searchTrie.insert("GetAbilityObject");
searchTrie.insert("GetMouseAppearance");
searchTrie.insert("GetDefaultMouseCursorInfo");
searchTrie.insert("GetAcceptableTargetMouseCursorInfo");
searchTrie.insert("GetUnacceptableTargetMouseCursorInfo");
searchTrie.insert("GetAcceptableLocationDecalInfo");
searchTrie.insert("GetUnusableLocationDecalInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefaultMouseCursor_Info");
searchTrie.insert("AcceptableTargetMouseCursor_Info");
searchTrie.insert("UnacceptableTargetMouseCursor_Info");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderSkillTreePrerequisiteArrayEntry");
searchTrie.insert("FCommanderSkillTreePrerequisiteArrayEntry");
searchTrie.insert("FCommanderSkillTreePrerequisiteArrayEntry");
searchTrie.insert("Elem_2)");
searchTrie.insert("Elem_1)");
searchTrie.insert("GetPrerequisiteType");
searchTrie.insert("GetPrerequisiteRank");
searchTrie.insert("ToString");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderAbilityTreeNodeSingleRankInfo");
searchTrie.insert("FCommanderAbilityTreeNodeSingleRankInfo");
searchTrie.insert("GetAbilityType");
searchTrie.insert("GetUnlockRank");
searchTrie.insert("GetCost");
searchTrie.insert("GetAbilityInfo");
searchTrie.insert("SetAbilityInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AbilityInfo");
searchTrie.insert("FCommanderAbilityTreeNodeInfo");
searchTrie.insert("FCommanderAbilityTreeNodeInfo");
searchTrie.insert("SetupInfo");
searchTrie.insert("GetName");
searchTrie.insert("GetNormalImage");
searchTrie.insert("GetHoveredImage");
searchTrie.insert("GetPressedImage");
searchTrie.insert("GetHoveredSound");
searchTrie.insert("GetPressedByLMBSound");
searchTrie.insert("GetPressedByRMBSound");
searchTrie.insert("GetDescription");
searchTrie.insert("GetNodeType");
searchTrie.insert("OnlyExecuteOnAquired");
searchTrie.insert("IsRankValid");
searchTrie.insert("GetAbilityInfo");
searchTrie.insert("GetPrerequisites");
searchTrie.insert("GetUnlockRank");
searchTrie.insert("GetCost");
searchTrie.insert("GetNumRanks");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FCommanderLevelUpInfo");
searchTrie.insert("FCommanderLevelUpInfo");
searchTrie.insert("GetSound");
searchTrie.insert("GetSkillPointGain");
searchTrie.insert("GetExperienceRequired");
searchTrie.insert("GetCumulativeExperienceRequired");
searchTrie.insert("SetCumulativeExperienceRequired");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnaquiredCommanderAbilityState");
searchTrie.insert("FUnaquiredCommanderAbilityState");
searchTrie.insert("FUnaquiredCommanderAbilityState");
searchTrie.insert("OnAnotherAbilityAquired");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("NodeInfo");
searchTrie.insert("MissingPrerequisites");
searchTrie.insert("FAquiredCommanderAbilityState");
searchTrie.insert("FAquiredCommanderAbilityState");
searchTrie.insert("FAquiredCommanderAbilityState");
searchTrie.insert("GetAbilityInfo");
searchTrie.insert("GetAquiredRank");
searchTrie.insert("OnAnotherRankAquired");
searchTrie.insert("GetCooldownRemaining");
searchTrie.insert("GetCooldownPercent");
searchTrie.insert("GetNumTimesUsed");
searchTrie.insert("GetGlobalSkillsPanelButtonIndex");
searchTrie.insert("SetGlobalSkillsPanelButtonIndex");
searchTrie.insert("OnAbilityUsed");
searchTrie.insert("AbilityInfo");
searchTrie.insert("TimerHandle_CooldownRemaining");
searchTrie.insert("RankAquired");
searchTrie.insert("NumTimesUsed");
searchTrie.insert("GlobalSkillsPanelButtonIndex");
searchTrie.insert("FBuildingTargetingAbilityStaticInfo");
searchTrie.insert("FBuildingTargetingAbilityStaticInfo");
searchTrie.insert("InitialSetup");
searchTrie.insert("SetupMouseCursors");
searchTrie.insert("GetAbilityType");
searchTrie.insert("GetEffectObject");
searchTrie.insert("GetAcceptableTargetMouseCursor");
searchTrie.insert("HasUnlimitedRange");
searchTrie.insert("GetRange");
searchTrie.insert("HasAnimation");
searchTrie.insert("GetAnimation");
searchTrie.insert("ConsumesInstigator");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AcceptableTargetMouseCursor_Info");
searchTrie.insert("");
searchTrie.insert("AbilityType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildingTargetingAbilityPerSelectableInfo");
searchTrie.insert("FBuildingTargetingAbilityPerSelectableInfo");
searchTrie.insert("GetAbilityType");
searchTrie.insert("GetAcceptableTargetMouseCursor");
searchTrie.insert("IsAffiliationTargetable");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("FBuildingTargetingAbilitiesAttributes");
searchTrie.insert("GetAbilityInfo");
searchTrie.insert("");
searchTrie.insert("FProductionQueue");
searchTrie.insert("FProductionQueue");
searchTrie.insert("SetupForHumanOwner");
searchTrie.insert("SetupForCPUOwner");
searchTrie.insert("HasRoom");
searchTrie.insert("GetCapacity");
searchTrie.insert("Peek");
searchTrie.insert("Client_OnProductionComplete");
searchTrie.insert("AddToQueue");
searchTrie.insert("SetBuildingBeingProduced");
searchTrie.insert("GetTimerHandle");
searchTrie.insert("GetTimerHandle");
searchTrie.insert("GetPercentageCompleteForUI");
searchTrie.insert("GetUnitAtFront");
searchTrie.insert("GetBuildingBeingProduced");
searchTrie.insert("Num");
searchTrie.insert("Pop");
searchTrie.insert("Insert");
searchTrie.insert("operator[]");
searchTrie.insert("SetHasCompletedEarly");
searchTrie.insert("SetHasCompletedBuildsInTab");
searchTrie.insert("HasCompletedBuildsInTab");
searchTrie.insert("OnBuildsInTabBuildingPlaced");
searchTrie.insert("GetType");
searchTrie.insert("Server_CancelProductionOfFrontItem");
searchTrie.insert("OnPostEdit");
searchTrie.insert("AICon_Num");
searchTrie.insert("AICon_Pop");
searchTrie.insert("AICon_HasRoom");
searchTrie.insert("AICon_Insert");
searchTrie.insert("AICon_Last");
searchTrie.insert("AICon_BracketOperator");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FContextMenuButtons");
searchTrie.insert("HasButton");
searchTrie.insert("GetButtons");
searchTrie.insert("GetButtons");
searchTrie.insert("GetButtonsArray");
searchTrie.insert("GetButtonsArray");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FDisplayInfoBase");
searchTrie.insert("FDisplayInfoBase");
searchTrie.insert("");
searchTrie.insert("GetCosts");
searchTrie.insert("GetTrainTime");
searchTrie.insert("GetPrerequisites");
searchTrie.insert("GetUpgradePrerequisites");
searchTrie.insert("GetPrerequisitesText");
searchTrie.insert("GetName");
searchTrie.insert("GetHUDImage");
searchTrie.insert("GetHoveredHUDImage");
searchTrie.insert("GetPressedHUDImage");
searchTrie.insert("GetHoveredButtonSound");
searchTrie.insert("GetPressedByLMBSound");
searchTrie.insert("GetPressedByRMBSound");
searchTrie.insert("GetDescription");
searchTrie.insert("GetJustBuiltSound");
searchTrie.insert("GetHUDPersistentTabCategory");
searchTrie.insert("GetHUDPersistentTabOrdering");
searchTrie.insert("GetContextMenu");
searchTrie.insert("SetupCostsArray");
searchTrie.insert("SetTrainTime");
searchTrie.insert("SetPrerequisites");
searchTrie.insert("SetName");
searchTrie.insert("SetHUDImage");
searchTrie.insert("SetHUDHoveredImage");
searchTrie.insert("SetHUDPressedImage");
searchTrie.insert("SetDescription");
searchTrie.insert("SetJustBuiltSound");
searchTrie.insert("SetHUDPersistentTabType");
searchTrie.insert("SetHUDPersistentTabOrdering");
searchTrie.insert("SetContextMenu");
searchTrie.insert("CreatePrerequisitesText");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUpgradeInfo");
searchTrie.insert("FUpgradeInfo");
searchTrie.insert("");
searchTrie.insert("AffectsUnitType");
searchTrie.insert("AffectsBuildingType");
searchTrie.insert("AddTechTreeParent");
searchTrie.insert("OnPostEdit");
searchTrie.insert("AffectsAllUnits");
searchTrie.insert("AffectsAllBuildings");
searchTrie.insert("GetUnitTypesAffected");
searchTrie.insert("GetBuildingTypesAffected");
searchTrie.insert("GetEffectBP");
searchTrie.insert("Random_GetTechTreeParent");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildInfo");
searchTrie.insert("GetSelectableBP");
searchTrie.insert("GetSelectableType");
searchTrie.insert("GetBuildingType");
searchTrie.insert("GetUnitType");
searchTrie.insert("AnnounceToAllWhenBuilt");
searchTrie.insert("ConstructBuildButton");
searchTrie.insert("SetSelectableBP");
searchTrie.insert("SetBuildingType");
searchTrie.insert("SetUnitType");
searchTrie.insert("SetSelectableType");
searchTrie.insert("SetAnnounceToAllWhenBuilt");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("FBuildingInfo");
searchTrie.insert("FBuildingInfo");
searchTrie.insert("AddTechTreeParent");
searchTrie.insert("AddTechTreeParent");
searchTrie.insert("IsAConstructionYardType");
searchTrie.insert("IsABarracksType");
searchTrie.insert("IsABaseDefenseType");
searchTrie.insert("GetHighlightedHUDImage");
searchTrie.insert("GetGhostBuildingBP");
searchTrie.insert("GetBoundsHeight");
searchTrie.insert("GetScaledBoundsExtent");
searchTrie.insert("GetBuildingBuildMethod");
searchTrie.insert("ShouldBuildingRiseFromGround");
searchTrie.insert("GetBuildProximityRange");
searchTrie.insert("GetFoundationRadius");
searchTrie.insert("GetNumPersistentQueues");
searchTrie.insert("GetTimeIntoZeroHealthAnimThatAnimNotifyIs");
searchTrie.insert("SetHUDHighlightedImage");
searchTrie.insert("SetGhostBuildingBP");
searchTrie.insert("SetBoundsHeight");
searchTrie.insert("SetScaledBoxExtent");
searchTrie.insert("SetBuildingBuildMethod");
searchTrie.insert("SetBuildingRisesFromGround");
searchTrie.insert("SetBuildProximityDistance");
searchTrie.insert("SetFoundationRadius");
searchTrie.insert("SetNumPersistentQueues");
searchTrie.insert("SetIsBarracksType");
searchTrie.insert("SetIsBaseDefenseType");
searchTrie.insert("SetTimeIntoZeroHealthAnimThatAnimNotifyIs");
searchTrie.insert("CanBeBuiltByConstructionYard");
searchTrie.insert("IsBuildMethodSupportedByConstructionYards");
searchTrie.insert("CanBeBuiltByWorkers");
searchTrie.insert("IsBuildMethodSupportedByUnits");
searchTrie.insert("GetTechTreeParentBuildings");
searchTrie.insert("GetTechTreeParentUnits");
searchTrie.insert("Random_GetTechTreeParentBuilding");
searchTrie.insert("Random_GetTechTreeParentUnit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("FUnitInfo");
searchTrie.insert("SetupHousingCostsArray");
searchTrie.insert("GetHousingCosts");
searchTrie.insert("GetImpactDamage");
searchTrie.insert("GetImpactDamageType");
searchTrie.insert("GetImpactRandomDamageFactor");
searchTrie.insert("GetAoEDamage");
searchTrie.insert("GetAoEDamageType");
searchTrie.insert("GetAoERandomDamageFactor");
searchTrie.insert("SetDamageValues");
searchTrie.insert("AddTechTreeParent");
searchTrie.insert("SetIsACollectorType");
searchTrie.insert("SetIsAWorkerType");
searchTrie.insert("SetIsAAttackingType");
searchTrie.insert("IsTrainable");
searchTrie.insert("IsACollectorType");
searchTrie.insert("IsAWorkerType");
searchTrie.insert("IsAArmyUnitType");
searchTrie.insert("GetTechTreeParents");
searchTrie.insert("Random_GetTechTreeParent");
searchTrie.insert("");
searchTrie.insert("ImpactDamage");
searchTrie.insert("ImpactDamageType");
searchTrie.insert("ImpactRandomDamageFactor");
searchTrie.insert("AoEDamage");
searchTrie.insert("AoEDamageType");
searchTrie.insert("AoERandomDamageFactor");
searchTrie.insert("");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("FStaticBuffOrDebuffInstanceInfo");
searchTrie.insert("FStaticBuffOrDebuffInstanceInfo");
searchTrie.insert("FStaticBuffOrDebuffInstanceInfo");
searchTrie.insert("GetInstigator");
searchTrie.insert("GetInstigatorAsSelectable");
searchTrie.insert("GetInfoStruct");
searchTrie.insert("GetSpecificType");
searchTrie.insert("Info2)");
searchTrie.insert("Info)");
searchTrie.insert("Info");
searchTrie.insert("SpecificType");
searchTrie.insert("Instigator");
searchTrie.insert("InstigatorAsSelectable");
searchTrie.insert("FTickableBuffOrDebuffInstanceInfo");
searchTrie.insert("FTickableBuffOrDebuffInstanceInfo");
searchTrie.insert("FTickableBuffOrDebuffInstanceInfo");
searchTrie.insert("ResetDuration");
searchTrie.insert("GetTickCount");
searchTrie.insert("GetInstigator");
searchTrie.insert("GetInstigatorAsSelectable");
searchTrie.insert("GetInfoStruct");
searchTrie.insert("GetSpecificType");
searchTrie.insert("DecrementDeltaTime");
searchTrie.insert("GetTimeRemainingTillNextTick");
searchTrie.insert("IncreaseTimeRemainingTillNextTick");
searchTrie.insert("IncrementTickCount");
searchTrie.insert("CalculateDurationRemaining");
searchTrie.insert("Info");
searchTrie.insert("SpecificType");
searchTrie.insert("TickCount");
searchTrie.insert("TimeRemainingTillNextTick");
searchTrie.insert("Instigator");
searchTrie.insert("InstigatorAsSelectable");
searchTrie.insert("FPlayerStateArray");
searchTrie.insert("AddToArray");
searchTrie.insert("GetPlayerStates");
searchTrie.insert("");
searchTrie.insert("FVaryingSizeParticleArray");
searchTrie.insert("FVaryingSizeParticleArray");
searchTrie.insert("GetTemplate");
searchTrie.insert("");
searchTrie.insert("FParticleInfo");
searchTrie.insert("FParticleInfo");
searchTrie.insert("GetTemplate");
searchTrie.insert("GetTransform");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FParticleInfo_Attach");
searchTrie.insert("FParticleInfo_Attach");
searchTrie.insert("GetParticles");
searchTrie.insert("GetAttachPoint");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("FAttachedParticleInfo");
searchTrie.insert("GetPSC");
searchTrie.insert("GenerateUniqueID");
searchTrie.insert("GenerateUniqueID");
searchTrie.insert("GenerateUniqueID");
searchTrie.insert("Info_2)");
searchTrie.insert("PSC");
searchTrie.insert("UniqueID");
searchTrie.insert("FDecalInfo");
searchTrie.insert("FDecalInfo");
searchTrie.insert("GetDecal");
searchTrie.insert("GetInitialDuration");
searchTrie.insert("GetFadeDuration");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttachInfo");
searchTrie.insert("FAttachInfo");
searchTrie.insert("GetComponent");
searchTrie.insert("GetSocketName");
searchTrie.insert("GetAttachTransform");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAnimationRepVariable");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FInventoryItemInfo");
searchTrie.insert("void");
searchTrie.insert("void");
searchTrie.insert("void");
searchTrie.insert("FInventoryItemInfo");
searchTrie.insert("FInventoryItemInfo");
searchTrie.insert("SetItemType");
searchTrie.insert("ClearIngredients");
searchTrie.insert("AddCombinationResult");
searchTrie.insert("SetBehaviorFunctionPointers");
searchTrie.insert("SetUseAbilityInfo");
searchTrie.insert("RunOnAquiredLogic");
searchTrie.insert("RunOnRemovedLogic");
searchTrie.insert("RunCustomOnNumChargesChangedLogic");
searchTrie.insert("GetItemType");
searchTrie.insert("GetDisplayName");
searchTrie.insert("GetDescription");
searchTrie.insert("GetStatChangeText");
searchTrie.insert("GetFlavorText");
searchTrie.insert("GetDisplayImage");
searchTrie.insert("GetDisplayImage_Hovered");
searchTrie.insert("GetDisplayImage_Pressed");
searchTrie.insert("GetDisplayImage_Highlighted");
searchTrie.insert("GetUISound_Hovered");
searchTrie.insert("GetUISound_PressedByLMB");
searchTrie.insert("GetUISound_PressedByRMB");
searchTrie.insert("GetAquireSound");
searchTrie.insert("GetAquireParticles");
searchTrie.insert("GetOnDroppedAnim");
searchTrie.insert("GetMeshInfo");
searchTrie.insert("GetDefaultCost");
searchTrie.insert("IsSelectablesTypeAcceptable");
searchTrie.insert("CanStack");
searchTrie.insert("GetNumStacksLimit");
searchTrie.insert("GetStackSize");
searchTrie.insert("HasNumberOfStacksLimit");
searchTrie.insert("HasNumberInStackLimit");
searchTrie.insert("DropsOnDeath");
searchTrie.insert("CanBeSold");
searchTrie.insert("GetNumChargesChangedBehavior");
searchTrie.insert("IsUsable");
searchTrie.insert("GetUseAbilityType");
searchTrie.insert("GetUseAbilityInfo");
searchTrie.insert("GetNumCharges");
searchTrie.insert("HasUnlimitedNumberOfUsesChecked");
searchTrie.insert("HasUnlimitedNumberOfUses");
searchTrie.insert("GetIngredients");
searchTrie.insert("GetIngredientsByValue");
searchTrie.insert("GetItemsMadeFromThis");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OnAquiredFunctionPtr");
searchTrie.insert("OnRemovedFunctionPtr");
searchTrie.insert("ItemType");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UseAbilityInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OnNumChargesChangedFunctionPtr");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FItemOnDisplayInShopSlot");
searchTrie.insert("FItemOnDisplayInShopSlot");
searchTrie.insert("GetItemType");
searchTrie.insert("IsForSale");
searchTrie.insert("GetQuantityBoughtPerPurchase");
searchTrie.insert("GetPurchasesRemaining");
searchTrie.insert("HasUnlimitedPurchases");
searchTrie.insert("OnPurchase");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FShopInfo");
searchTrie.insert("FShopInfo");
searchTrie.insert("GetItems");
searchTrie.insert("SellsAtLeastOneItem");
searchTrie.insert("AcceptsRefunds");
searchTrie.insert("GetSlotInfo");
searchTrie.insert("CanShopHere");
searchTrie.insert("GetSelectablesInRangeOfShopOnTeam");
searchTrie.insert("GetShopLocation");
searchTrie.insert("OnPurchase");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FInventorySlotState");
searchTrie.insert("FInventorySlotState");
searchTrie.insert("FInventorySlotState");
searchTrie.insert("GetItemType");
searchTrie.insert("HasItem");
searchTrie.insert("CanItemStack");
searchTrie.insert("DropsOnZeroHealth");
searchTrie.insert("IsItemUsable");
searchTrie.insert("HasUnlimitedCharges");
searchTrie.insert("GetNumInStack");
searchTrie.insert("GetNumCharges");
searchTrie.insert("PutItemIn");
searchTrie.insert("PutItemInForReversal");
searchTrie.insert("AdjustAmount");
searchTrie.insert("RemoveAmount");
searchTrie.insert("RemoveCharge");
searchTrie.insert("SetItemTypeToNone");
searchTrie.insert("ReduceQuantityToZero");
searchTrie.insert("GetItemUseCooldownTimerHandle");
searchTrie.insert("IsOnCooldown");
searchTrie.insert("GetUseCooldownRemaining");
searchTrie.insert("GetUseCooldownRemainingChecked");
searchTrie.insert("ToString");
searchTrie.insert("ItemType");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("NumInStackOrNumCharges");
searchTrie.insert("TimerHandle_ItemUseCooldown");
searchTrie.insert("FInventoryItemQuantity");
searchTrie.insert("FInventoryItemQuantity");
searchTrie.insert("FInventoryItemQuantity");
searchTrie.insert("GetNumStacks");
searchTrie.insert("GetTotalNum");
searchTrie.insert("IncrementNumStacksAndAdjustNum");
searchTrie.insert("AdjustAmount");
searchTrie.insert("DecrementNumStacksAndAdjustNum");
searchTrie.insert("NumStacks");
searchTrie.insert("Num");
searchTrie.insert("FInventoryItemQuantityPair");
searchTrie.insert("FInventoryItemQuantityPair");
searchTrie.insert("FInventoryItemQuantityPair");
searchTrie.insert("ItemType");
searchTrie.insert("Quantity");
searchTrie.insert("FInventory");
searchTrie.insert("AtNumStacksLimit");
searchTrie.insert("AtTotalNumLimit");
searchTrie.insert("RunOnItemAquiredLogic");
searchTrie.insert("RunOnItemRemovedLogic");
searchTrie.insert("RunOnNumChargesChangedLogic");
searchTrie.insert("FInventory");
searchTrie.insert("IsSlotIndexValid");
searchTrie.insert("GetLocalIndexFromServerIndex");
searchTrie.insert("GetSlotGivenServerIndex");
searchTrie.insert("GetSlotForDisplayAtIndex");
searchTrie.insert("GetCapacity");
searchTrie.insert("GetNumSlotsOccupied");
searchTrie.insert("AreAllSlotsOccupied");
searchTrie.insert("");
searchTrie.insert("TryPutItemInInventory");
searchTrie.insert("TryCreateCombinationItem");
searchTrie.insert("AreAllIngredientsPresent");
searchTrie.insert("SwapJustCreatedCombinationItemIntoLowestDisplayIndex");
searchTrie.insert("SwapSlotPositions_ServerIndicies");
searchTrie.insert("SwapSlotPositions_LocalIndicies");
searchTrie.insert("CanItemEnterInventory");
searchTrie.insert("CanItemEnterInventory");
searchTrie.insert("PutItemInSlotChecked");
searchTrie.insert("OnItemUsed");
searchTrie.insert("OnItemSold");
searchTrie.insert("OnOwnerZeroHealth");
searchTrie.insert("OnOwnerZeroHealth_IsLocationConsideredACliff");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableResourceInfo");
searchTrie.insert("AmountUndividedToAmount");
searchTrie.insert("CalculateRegenRatePerGameTick");
searchTrie.insert("FSelectableResourceInfo");
searchTrie.insert("GetType");
searchTrie.insert("SetNumTicksAhead");
searchTrie.insert("SetNumTicksAheadGivenStuff");
searchTrie.insert("SetAmountInternal");
searchTrie.insert("SetAmount");
searchTrie.insert("SetAmountViaMultiplier");
searchTrie.insert("AdjustAmount");
searchTrie.insert("AdjustAmount");
searchTrie.insert("SetMaxAmount");
searchTrie.insert("SetMaxAmountViaMultiplier");
searchTrie.insert("AdjustMaxAmount");
searchTrie.insert("AdjustRegenRate");
searchTrie.insert("SetRegenRate");
searchTrie.insert("SetRegenRateViaMultiplier");
searchTrie.insert("SetStartingAmount");
searchTrie.insert("SetStartingAmountViaMultiplier");
searchTrie.insert("AdjustStartingAmount");
searchTrie.insert("RegenFromGameTicks");
searchTrie.insert("GetAmount");
searchTrie.insert("GetAmountAsFloatForDisplay");
searchTrie.insert("GetRegenRatePerSecond");
searchTrie.insert("GetRegenRatePerSecondForDisplay");
searchTrie.insert("GetMaxAmount");
searchTrie.insert("RegensOverTime");
searchTrie.insert("OnPostEdit");
searchTrie.insert("MULTIPLIER");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FGatheredResourceMeshInfo");
searchTrie.insert("FGatheredResourceMeshInfo");
searchTrie.insert("GetMesh");
searchTrie.insert("GetSocketName");
searchTrie.insert("GetAttachmentRule");
searchTrie.insert("GetAttachTransform");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FResourceCollectionAttribute");
searchTrie.insert("FResourceCollectionAttribute");
searchTrie.insert("GetGatherTime");
searchTrie.insert("GetCapacity");
searchTrie.insert("SetCapacity");
searchTrie.insert("GetMeshInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FResourceGatheringProperties");
searchTrie.insert("FResourceGatheringProperties");
searchTrie.insert("GetMoveSpeedPenaltyForHoldingResources");
searchTrie.insert("IsCollector");
searchTrie.insert("CanGatherResource");
searchTrie.insert("GetGatherTime");
searchTrie.insert("GetCapacity");
searchTrie.insert("GetGatheredMeshProperties");
searchTrie.insert("GetTMap");
searchTrie.insert("GetAllAttributesModifiable");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableAttributesBase");
searchTrie.insert("FSelectableAttributesBase");
searchTrie.insert("");
searchTrie.insert("GetName");
searchTrie.insert("SetName");
searchTrie.insert("GetDescription");
searchTrie.insert("GetSelectionSound");
searchTrie.insert("GetContextMenu");
searchTrie.insert("IsSelected");
searchTrie.insert("SetIsSelected");
searchTrie.insert("IsPrimarySelected");
searchTrie.insert("SetIsPrimarySelected");
searchTrie.insert("GetTeam");
searchTrie.insert("SetTeam");
searchTrie.insert("GetAffiliation");
searchTrie.insert("SetAffiliation");
searchTrie.insert("GetOwnerID");
searchTrie.insert("GetSelectableType");
searchTrie.insert("GetBuildingType");
searchTrie.insert("GetUnitType");
searchTrie.insert("GetVisionState");
searchTrie.insert("SetupBasicTypeInfo");
searchTrie.insert("SetupSelectionInfo");
searchTrie.insert("SetVisionState");
searchTrie.insert("GetSelectionDecalSetup");
searchTrie.insert("SetSelectionDecalSetup");
searchTrie.insert("GetSelectionDecalMID");
searchTrie.insert("SetSelectionDecalMaterial");
searchTrie.insert("GetHUDImage_Normal");
searchTrie.insert("GetHUDImage_Hovered");
searchTrie.insert("GetHUDImage_Pressed");
searchTrie.insert("SetHUDImage_Normal");
searchTrie.insert("SetHUDImage_Hovered");
searchTrie.insert("SetHUDImage_Pressed");
searchTrie.insert("GetParticleSize");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableAttributesBasic");
searchTrie.insert("FSelectableAttributesBasic");
searchTrie.insert("");
searchTrie.insert("GetCosts");
searchTrie.insert("GetBuildTime");
searchTrie.insert("GetMaxHealth");
searchTrie.insert("GetTargetingType");
searchTrie.insert("GetArmourType");
searchTrie.insert("GetSightRange");
searchTrie.insert("GetStealthRevealRange");
searchTrie.insert("GetExperienceBounty");
searchTrie.insert("SetExperienceBounty");
searchTrie.insert("GetSelectableResource_1");
searchTrie.insert("GetSelectableResource_1");
searchTrie.insert("AnnounceToAllWhenBuilt");
searchTrie.insert("GetJustBuiltSound");
searchTrie.insert("GetZeroHealthSound");
searchTrie.insert("GetCommandSound");
searchTrie.insert("GetPrerequisites");
searchTrie.insert("GetUpgradePrerequisites");
searchTrie.insert("GetBodyAttachPointInfo");
searchTrie.insert("GetHUDPersistentTabCategory");
searchTrie.insert("GetHUDPersistentTabButtonOrdering");
searchTrie.insert("IsAStartingSelectable");
searchTrie.insert("GetCreationMethod");
searchTrie.insert("SetCreationMethod");
searchTrie.insert("SetNumCustomGameTicksAhead");
searchTrie.insert("HasASelectableResource");
searchTrie.insert("HasASelectableResourceThatRegens");
searchTrie.insert("GetSelectableResourceType");
searchTrie.insert("AdjustCurrentHealthAfterMaxHealthChange");
searchTrie.insert("TellHUDAboutChange_MaxHealth");
searchTrie.insert("TellHUDAboutChange_MaxHealthAndCurrentHealth");
searchTrie.insert("TellHUDAboutChange_DefenseMultiplier");
searchTrie.insert("GetDefaultMaxHealth");
searchTrie.insert("SetMaxHealth");
searchTrie.insert("SetMaxHealthViaMultiplier");
searchTrie.insert("ApplyTempMaxHealthModifierViaMultiplier");
searchTrie.insert("RemoveTempMaxHealthModifierViaMultiplier");
searchTrie.insert("GetDefenseMultiplier");
searchTrie.insert("GetDefaultDefenseMultiplier");
searchTrie.insert("SetDefenseMultiplier");
searchTrie.insert("SetDefenseMultiplierViaMultiplier");
searchTrie.insert("ApplyTempDefenseMultiplierViaMultiplier");
searchTrie.insert("RemoveTempDefenseMultiplierViaMultiplier");
searchTrie.insert("IncrementNumReppedVariablesReceived");
searchTrie.insert("CanSetup");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumTempMaxHealthModifiers");
searchTrie.insert("");
searchTrie.insert("NumTempDefenseMultiplierModifiers");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
searchTrie.insert("FGarrisonEvacHistory_UnloadAllAtOnce_Grid");
searchTrie.insert("GetInitialTransformToTry");
searchTrie.insert("PutLocationOnGround");
searchTrie.insert("uint8");
searchTrie.insert("uint8");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NotifyOfFailedOverlapTest");
searchTrie.insert("NotifyOfSuccessfulOverlapTest");
searchTrie.insert("OnAllAdjustmentsTriedForLocation");
searchTrie.insert("TryResolveOverlapsWithPreviousLocations");
searchTrie.insert("LOCATION_INVALID");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FoursSidesInfo[4]");
searchTrie.insert("CurrentFoursSidesInfoIndex");
searchTrie.insert("NumUnitsEvacced");
searchTrie.insert("bHasGivenOutFirstLocation");
searchTrie.insert("FBuildingNetworkAttributes");
searchTrie.insert("FBuildingNetworkAttributes");
searchTrie.insert("GetNumGarrisonSlots");
searchTrie.insert("");
searchTrie.insert("FBuildingNetworkState");
searchTrie.insert("FBuildingNetworkState");
searchTrie.insert("SetupStruct");
searchTrie.insert("GetGarrisonedUnits");
searchTrie.insert("GetGarrisonedUnits");
searchTrie.insert("HasEnoughCapacityToAcceptUnit");
searchTrie.insert("ServerOnUnitEntered");
searchTrie.insert("ClientOnUnitEntered");
searchTrie.insert("ServerOnUnitExited");
searchTrie.insert("ClientOnUnitExited");
searchTrie.insert("OnGarrisonedUnitZeroHealth");
searchTrie.insert("OnUnitAdded_UpdateSlotUsage");
searchTrie.insert("OnUnitRemoved_UpdateSlotUsage");
searchTrie.insert("GarrisonedUnits");
searchTrie.insert("SlotCapacity");
searchTrie.insert("SlotUsage");
searchTrie.insert("FPlayersBuildingNetworksState");
searchTrie.insert("FPlayersBuildingNetworksState");
searchTrie.insert("GetNetworkInfo");
searchTrie.insert("]");
searchTrie.insert("FBuildingGarrisonAttributes");
searchTrie.insert("FBuildingGarrisonAttributes");
searchTrie.insert("OnOwningBuildingSetup");
searchTrie.insert("ServerOnUnitEntered");
searchTrie.insert("ClientOnUnitEntered");
searchTrie.insert("ServerUnloadSingleUnit");
searchTrie.insert("ServerUnloadAll");
searchTrie.insert("ClientOnUnitExited");
searchTrie.insert("OnGarrisonedUnitZeroHealth");
searchTrie.insert("GetSuitableEvacuationTransform");
searchTrie.insert("ComponentEncroachesBlockingGeometry_WithAdjustment");
searchTrie.insert("ComponentEncroachesBlockingGeometry_NoAdjustment");
searchTrie.insert("OnUnitAdded_UpdateSlotUsage");
searchTrie.insert("OnUnitRemoved_UpdateSlotUsage");
searchTrie.insert("OnUnitRemoved_UpdateSightAndStealthRadius");
searchTrie.insert("PlayEvacSound");
searchTrie.insert("IsGarrison");
searchTrie.insert("GetGarrisonNetworkInfo");
searchTrie.insert("IsPartOfGarrisonNetwork");
searchTrie.insert("GetTotalNumGarrisonSlots");
searchTrie.insert("GetSlotUsage");
searchTrie.insert("GetNumUnitsInGarrison");
searchTrie.insert("GetGarrisonedUnitsContainerTakingIntoAccountNetworkType");
searchTrie.insert("GetCanEnterMouseCursor");
searchTrie.insert("GetEnterRange");
searchTrie.insert("HasEnoughCapacityToAcceptUnit");
searchTrie.insert("GetUnloadAllMethod");
searchTrie.insert("GetGarrisonNetworkType");
searchTrie.insert("OnPostEdit");
searchTrie.insert("GarrisonNetworkInfo");
searchTrie.insert("GarrisonedUnits");
searchTrie.insert("");
searchTrie.insert("SlotUsage");
searchTrie.insert("HightestSightRadiusContainerContributor");
searchTrie.insert("HighestStealthRevealRadiusContainerContributor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert(":");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuildingAttributes");
searchTrie.insert("FBuildingAttributes");
searchTrie.insert("GetHUDImage_Highlighted");
searchTrie.insert("GetEffectiveSightRange");
searchTrie.insert("GetEffectiveStealthRevealRange");
searchTrie.insert("SetEffectiveSightRange");
searchTrie.insert("SetEffectiveStealthRevealRange");
searchTrie.insert("GetProductionQueueLimit");
searchTrie.insert("GetNumPersistentBuildSlots");
searchTrie.insert("GetProducedUnitInitialBehavior");
searchTrie.insert("CanProduce");
searchTrie.insert("IsAnimationValid");
searchTrie.insert("GetAllAnimations");
searchTrie.insert("GetAnimation");
searchTrie.insert("GetJustPlacedSound");
searchTrie.insert("GetBeingWorkedOnSound");
searchTrie.insert("OverridesFactionBuildMethod");
searchTrie.insert("GetBuildMethod");
searchTrie.insert("SetBuildMethod");
searchTrie.insert("OverrideFactionBuildProximity");
searchTrie.insert("GetBuildProximityRange");
searchTrie.insert("GetConstructTime");
searchTrie.insert("GetResourceCollectionTypes");
searchTrie.insert("GetResourceDropRadius");
searchTrie.insert("GetFoundationsRadius");
searchTrie.insert("GetHousingResourcesProvidedArray");
searchTrie.insert("IsDefenseBuilding");
searchTrie.insert("GetPlacedParticles");
searchTrie.insert("GetAdvancingConstructionParticles");
searchTrie.insert("GetShoppingInfo");
searchTrie.insert("GetShoppingInfo");
searchTrie.insert("GetTimeIntoZeroHealthAnimThatAnimNotifyIsSlow");
searchTrie.insert("GetGarrisonAttributes");
searchTrie.insert("GetGarrisonAttributes");
searchTrie.insert("GetStaticBuffs");
searchTrie.insert("GetStaticBuffs");
searchTrie.insert("GetStaticDebuffs");
searchTrie.insert("GetStaticDebuffs");
searchTrie.insert("GetTickableBuffs");
searchTrie.insert("GetTickableBuffs");
searchTrie.insert("GetTickableDebuffs");
searchTrie.insert("GetTickableDebuffs");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StaticBuffs");
searchTrie.insert("StaticDebuffs");
searchTrie.insert("TickableBuffs");
searchTrie.insert("TickableDebuffs");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FEnteringGarrisonAttributes");
searchTrie.insert("FEnteringGarrisonAttributes");
searchTrie.insert("GetBuildingGarrisonSlotUsage");
searchTrie.insert("");
searchTrie.insert("FInfantryAttributes");
searchTrie.insert("FInfantryAttributes");
searchTrie.insert("TellHUDAboutChange_ExperienceGainMultiplier");
searchTrie.insert("ShouldSpawnStealthed");
searchTrie.insert("GetInStealthParamValue");
searchTrie.insert("GetHousingCosts");
searchTrie.insert("GetMoveCommandSound");
searchTrie.insert("GetCommandSound");
searchTrie.insert("GetInventory");
searchTrie.insert("GetInventory");
searchTrie.insert("LevelToArrayIndex");
searchTrie.insert("GetTotalExperienceRequirementForLevel");
searchTrie.insert("CanEverGainExperience");
searchTrie.insert("GetStaticBuffs");
searchTrie.insert("GetStaticBuffs");
searchTrie.insert("GetStaticDebuffs");
searchTrie.insert("GetStaticDebuffs");
searchTrie.insert("GetTickableBuffs");
searchTrie.insert("GetTickableBuffs");
searchTrie.insert("GetTickableDebuffs");
searchTrie.insert("GetTickableDebuffs");
searchTrie.insert("GetNumTempMoveSpeedModifiers");
searchTrie.insert("GetExperienceGainMultiplier");
searchTrie.insert("GetDefaultExperienceGainMultiplier");
searchTrie.insert("SetExperienceGainMultiplier");
searchTrie.insert("SetExperienceGainMultiplierViaMultiplier");
searchTrie.insert("ApplyTempExperienceGainMultiplierViaMultiplier");
searchTrie.insert("RemoveTempExperienceGainMultiplierViaMultiplier");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StaticBuffs");
searchTrie.insert("StaticDebuffs");
searchTrie.insert("TickableBuffs");
searchTrie.insert("TickableDebuffs");
searchTrie.insert("AttachedParticles");
searchTrie.insert("NumTempMoveSpeedModifiers");
searchTrie.insert("NumTempExperienceGainModifiers");
searchTrie.insert("DefaultExperienceGainMultiplier");
searchTrie.insert("NumTempStealthModeEffects");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FStartingSelectables");
searchTrie.insert("AddStartingSelectable");
searchTrie.insert("AddStartingSelectable");
searchTrie.insert("SetStartingBuildings");
searchTrie.insert("SetStartingUnits");
searchTrie.insert("GetBuildings");
searchTrie.insert("GetUnits");
searchTrie.insert("Buildings");
searchTrie.insert("Units");
searchTrie.insert("FGameNotificationInfo");
searchTrie.insert("FGameNotificationInfo");
searchTrie.insert("FGameNotificationInfo");
searchTrie.insert("GetMessage");
searchTrie.insert("GetSound");
searchTrie.insert("SetMessage");
searchTrie.insert("SetSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FGameWarningInfo");
searchTrie.insert("FGameWarningInfo");
searchTrie.insert("FGameWarningInfo");
searchTrie.insert("GetMessage");
searchTrie.insert("GetSound");
searchTrie.insert("SetMessage");
searchTrie.insert("SetSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedMouseFocusImage");
searchTrie.insert("FUnifiedMouseFocusImage");
searchTrie.insert("UsingImage");
searchTrie.insert("GetBrush");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedUIButtonSound");
searchTrie.insert("FUnifiedUIButtonSound");
searchTrie.insert("UsingSound");
searchTrie.insert("GetSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FUnifiedImageAndSoundAssets");
searchTrie.insert("GetUnifiedMouseHoverImage");
searchTrie.insert("GetUnifiedMousePressImage");
searchTrie.insert("GetUnifiedMouseHoverSound");
searchTrie.insert("GetUnifiedPressedByLMBSound");
searchTrie.insert("GetUnifiedPressedByRMBSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FVisibilityInfo");
searchTrie.insert("AddToMap");
searchTrie.insert("RemoveFromMap");
searchTrie.insert("IsVisible");
searchTrie.insert("SetVisibility");
searchTrie.insert("");
searchTrie.insert("FUint64Array");
searchTrie.insert("AddToArray");
searchTrie.insert("GetArray");
searchTrie.insert("");
searchTrie.insert("FAttackAttributes");
searchTrie.insert("TellHUDAboutChange_ImpactDamage");
searchTrie.insert("TellHUDAboutChange_ImpactDamageType");
searchTrie.insert("TellHUDAboutChange_AttackRate");
searchTrie.insert("TellHUDAboutChange_AttackRange");
searchTrie.insert("FAttackAttributes");
searchTrie.insert("SetValues");
searchTrie.insert("SetValues");
searchTrie.insert("SetDamageValues");
searchTrie.insert("GetAcceptableTargetTypes");
searchTrie.insert("GetMuzzleParticles");
searchTrie.insert("GetProjectileBP");
searchTrie.insert("GetDamageInfo");
searchTrie.insert("ShouldOverrideProjectileDamageValues");
searchTrie.insert("GetMuzzleSocket");
searchTrie.insert("GetMuzzleCameraShakeBP");
searchTrie.insert("GetMuzzleShakeRadius");
searchTrie.insert("GetMuzzleShakeFalloff");
searchTrie.insert("GetPreparationSound");
searchTrie.insert("GetAttackMadeSound");
searchTrie.insert("GetImpactDamage");
searchTrie.insert("GetDefaultImpactDamage");
searchTrie.insert("SetImpactDamage");
searchTrie.insert("SetImpactDamageViaMultiplier");
searchTrie.insert("ApplyTempImpactDamageModifierViaMultiplier");
searchTrie.insert("RemoveTempImpactDamageModifierViaMultiplier");
searchTrie.insert("GetImpactDamageType");
searchTrie.insert("SetImpactDamageType");
searchTrie.insert("GetImpactRandomDamageFactor");
searchTrie.insert("GetAoEDamage");
searchTrie.insert("GetAoEDamageType");
searchTrie.insert("GetAoERandomDamageFactor");
searchTrie.insert("CanAttackAir");
searchTrie.insert("SetCanAttackAir");
searchTrie.insert("GetAttackRate");
searchTrie.insert("GetDefaultAttackRate");
searchTrie.insert("SetAttackRate");
searchTrie.insert("SetAttackRateViaMultiplier");
searchTrie.insert("ApplyTempAttackRateModifierViaMultiplier");
searchTrie.insert("RemoveTempAttackRateModifierViaMultiplier");
searchTrie.insert("GetAttackRange");
searchTrie.insert("GetDefaultAttackRange");
searchTrie.insert("SetAttackRange");
searchTrie.insert("SetAttackRangeViaMultiplier");
searchTrie.insert("ApplyTempAttackRangeModifierViaMultiplier");
searchTrie.insert("RemoveTempAttackRangeModifierViaMultiplier");
searchTrie.insert("OnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumTempImpactDamageModifiers");
searchTrie.insert("DefaultImpactDamage");
searchTrie.insert("NumTempAoEDamageModifiers");
searchTrie.insert("DefaultAoEDamage");
searchTrie.insert("NumTempAttackRateModifiers");
searchTrie.insert("DefaultAttackRate");
searchTrie.insert("NumTempAttackRangeModifiers");
searchTrie.insert("DefaultAttackRange");
searchTrie.insert("Default");
searchTrie.insert("");
searchTrie.insert("FDamageMultipliers");
searchTrie.insert("FDamageMultipliers");
searchTrie.insert("GetMultiplier");
searchTrie.insert("");
searchTrie.insert("FSelectionDecalInfo");
searchTrie.insert("FSelectionDecalInfo");
searchTrie.insert("GetDecal");
searchTrie.insert("GetParamName");
searchTrie.insert("IsParamNameValid");
searchTrie.insert("SetIsParamNameValid");
searchTrie.insert("GetMouseoverParamValue");
searchTrie.insert("GetOriginalParamValue");
searchTrie.insert("SetOriginalParamValue");
searchTrie.insert("RequiresCreatingMaterialInstanceDynamic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FDefeatConditionInfo");
searchTrie.insert("GetName");
searchTrie.insert("");
searchTrie.insert("FCPUDifficultyInfo");
searchTrie.insert("FCPUDifficultyInfo");
searchTrie.insert("FCPUDifficultyInfo");
searchTrie.insert("GetName");
searchTrie.insert("GetIcon");
searchTrie.insert("GetControllerBP");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPlayerStartDistanceInfo");
searchTrie.insert("FPlayerStartDistanceInfo");
searchTrie.insert("FPlayerStartDistanceInfo");
searchTrie.insert("GetID");
searchTrie.insert("GetDistance");
searchTrie.insert("GetDistanceBetweenSpots");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Info2)");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("FPlayerStartInfo");
searchTrie.insert("GetUniqueID");
searchTrie.insert("GetLocation");
searchTrie.insert("GetRotation");
searchTrie.insert("EmptyNearbyPlayerStarts");
searchTrie.insert("AddNearbyPlayerStart");
searchTrie.insert("SortNearbyPlayerStarts");
searchTrie.insert("GetNearbyPlayerStartsSorted");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FMapInfo");
searchTrie.insert("FMapInfo");
searchTrie.insert("GetPlayerStartTransform");
searchTrie.insert("GetDisplayName");
searchTrie.insert("SetMapFName");
searchTrie.insert("GetMapFName");
searchTrie.insert("SetUniqueID");
searchTrie.insert("GetUniqueID");
searchTrie.insert("GetUserDefinedImage");
searchTrie.insert("GetDescription");
searchTrie.insert("GetMaxPlayers");
searchTrie.insert("GetMapBounds");
searchTrie.insert("SetMapBounds");
searchTrie.insert("GetMapBoundsYawRotation");
searchTrie.insert("GetMinimapTexture");
searchTrie.insert("SetMinimapTexture");
searchTrie.insert("GetPlayerStarts");
searchTrie.insert("SetPlayerStartPoints");
searchTrie.insert("GetLevelVolumeBP");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FResourceInfo");
searchTrie.insert("FResourceInfo");
searchTrie.insert("GetIcon");
searchTrie.insert("");
searchTrie.insert("FStartingResourceConfig");
searchTrie.insert("FStartingResourceConfig");
searchTrie.insert("FStartingResourceConfig");
searchTrie.insert("ToString");
searchTrie.insert("GetName");
searchTrie.insert("GetResourceArraySlow");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("FPlayerInfo");
searchTrie.insert("SetCPUPlayerState");
searchTrie.insert("IsObserver");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FMatchInfo");
searchTrie.insert("GetNumTeams");
searchTrie.insert("SetNumTeams");
searchTrie.insert("GetMatchType");
searchTrie.insert("SetMatchType");
searchTrie.insert("SetMap");
searchTrie.insert("GetMapDisplayName");
searchTrie.insert("GetMapUniqueID");
searchTrie.insert("GetMapFName");
searchTrie.insert("GetDefeatCondition");
searchTrie.insert("SetDefeatCondition");
searchTrie.insert("GetStartingResources");
searchTrie.insert("SetStartingResources");
searchTrie.insert("GetPlayers");
searchTrie.insert("GetPlayers");
searchTrie.insert("AddPlayer");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FStaticBuffOrDebuffInfo");
searchTrie.insert("FStaticBuffOrDebuffInfo");
searchTrie.insert("FStaticBuffOrDebuffInfo");
searchTrie.insert("SetFunctionPointers");
searchTrie.insert("IsBuff");
searchTrie.insert("IsDebuff");
searchTrie.insert("GetParticlesTemplate");
searchTrie.insert("GetParticlesAttachPoint");
searchTrie.insert("ExecuteTryApplyBehavior");
searchTrie.insert("ExecuteOnRemovedBehavior");
searchTrie.insert("GetDisplayName");
searchTrie.insert("GetDisplayImage");
searchTrie.insert("GetSpecificType");
searchTrie.insert("GetSubType");
searchTrie.insert("SetSpecificType");
searchTrie.insert("SpecificType");
searchTrie.insert("TryApplyToPtr");
searchTrie.insert("OnRemovedPtr");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FTickableBuffOrDebuffInfo");
searchTrie.insert("FTickableBuffOrDebuffInfo");
searchTrie.insert("FTickableBuffOrDebuffInfo");
searchTrie.insert("SetFunctionPointers");
searchTrie.insert("GetTickInterval");
searchTrie.insert("GetNumberOfTicks");
searchTrie.insert("ExpiresOverTime");
searchTrie.insert("GetFullDuration");
searchTrie.insert("IsBuff");
searchTrie.insert("IsDebuff");
searchTrie.insert("GetParticlesTemplate");
searchTrie.insert("GetParticlesAttachPoint");
searchTrie.insert("ExecuteTryApplyBehavior");
searchTrie.insert("ExecuteDoTickBehavior");
searchTrie.insert("ExecuteOnRemovedBehavior");
searchTrie.insert("GetDisplayName");
searchTrie.insert("GetDisplayImage");
searchTrie.insert("GetSpecificType");
searchTrie.insert("GetSubType");
searchTrie.insert("SetSpecificType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SpecificType");
searchTrie.insert("TryApplyToPtr");
searchTrie.insert("DoTickPtr");
searchTrie.insert("OnRemovedPtr");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FBuffOrDebuffSubTypeInfo");
searchTrie.insert("FBuffOrDebuffSubTypeInfo");
searchTrie.insert("GetTexture");
searchTrie.insert("GetBrushColor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FSelectableResourceColorInfo");
searchTrie.insert("FSelectableResourceColorInfo");
searchTrie.insert("GetPBarFillColor");
searchTrie.insert("");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("FSelectableIdentifier");
searchTrie.insert("GetSelectableID");
searchTrie.insert("GetSelectable");
searchTrie.insert("GetPlayerState");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAbilityHitWithOutcome");
searchTrie.insert("FAbilityHitWithOutcome");
searchTrie.insert("FAbilityHitWithOutcome");
searchTrie.insert("GetOutcome");
searchTrie.insert("GetOutcome");
searchTrie.insert("");
searchTrie.insert("FHitActorAndOutcome");
searchTrie.insert("FHitActorAndOutcome");
searchTrie.insert("FHitActorAndOutcome");
searchTrie.insert("GetSelectable");
searchTrie.insert("GetOutcome");
searchTrie.insert("GetOutcome");
searchTrie.insert("HitActor");
searchTrie.insert("Outcome");
searchTrie.insert("FHousingResourceState");
searchTrie.insert("FHousingResourceState");
searchTrie.insert("FHousingResourceState");
searchTrie.insert("AddConsumption");
searchTrie.insert("RemoveConsumption");
searchTrie.insert("AddAmountProvided");
searchTrie.insert("RemoveAmountProvided");
searchTrie.insert("GetAmountConsumed");
searchTrie.insert("GetAmountProvidedClamped");
searchTrie.insert("AmountConsumed");
searchTrie.insert("AmountProvidedClamped");
searchTrie.insert("AmountProvided");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("ToString");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("FInventoryItemID");
searchTrie.insert("IDStruct)");
searchTrie.insert("RHS)");
searchTrie.insert("");
searchTrie.insert("FMapID");
searchTrie.insert("FMapID");
searchTrie.insert("FMapID");
searchTrie.insert("ToString");
searchTrie.insert("ID_2)");
searchTrie.insert("InID)");
searchTrie.insert("");
searchTrie.insert("FSelectableRankInt");
searchTrie.insert("FSelectableRankInt");
searchTrie.insert("FSelectableRankInt");
searchTrie.insert("Elem_2)");
searchTrie.insert("Elem)");
searchTrie.insert("");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("FBasicDamageInfo");
searchTrie.insert("SetValues");
searchTrie.insert("SetValuesFromProjectile");
searchTrie.insert("SetValuesFromProjectile");
searchTrie.insert("GetImpactOutgoingDamage");
searchTrie.insert("GetImpactDamageType");
searchTrie.insert("GetImpactRandomDamageFactor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Workarounds");
searchTrie.insert("CreateMaterialInstanceConstant");
searchTrie.insert("FFloatAttributeBase");
searchTrie.insert("FFloatAttributeBase");
searchTrie.insert("FFloatAttributeBase");
searchTrie.insert("GetFinalValue");
searchTrie.insert("SetValuesOnPostEdit");
searchTrie.insert("SetDefaultValue");
searchTrie.insert("AdjustDefaultValue");
searchTrie.insert("AdjustDefaultMultiplier_Addition");
searchTrie.insert("AdjustDefaultMultiplier_Multiplication");
searchTrie.insert("ApplyTempAbsoluteValueChange_Addition");
searchTrie.insert("ApplyTempMultiplierChange_Addition");
searchTrie.insert("ApplyTempMultiplierChange_Multiplication");
searchTrie.insert("RemoveTempAbsoluteValueChange_Addition");
searchTrie.insert("RemoveTempMultiplierChange_Addition");
searchTrie.insert("RemoveTempMultiplierChange_Multiplication");
searchTrie.insert("CheckIfSightRangeOrStealthRevealRangeChanged");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UpdateUI");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumTempValueModifiers");
searchTrie.insert("NumTempMultiplierModifiers");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttribute_AttackSpeed");
searchTrie.insert("FAttribute_AttackSpeed");
searchTrie.insert("");
searchTrie.insert("FAttribute_AttackRange");
searchTrie.insert("FAttribute_AttackRange");
searchTrie.insert("");
searchTrie.insert("FAttribute_Building_SightRange");
searchTrie.insert("FAttribute_Building_SightRange");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttribute_Building_StealthRevealRange");
searchTrie.insert("FAttribute_Building_StealthRevealRange");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FAttribute_Unit_SightRange");
searchTrie.insert("FAttribute_Unit_SightRange");
searchTrie.insert("");
searchTrie.insert("FAttribute_Unit_StealthRevealRange");
searchTrie.insert("FAttribute_Unit_StealthRevealRange");
searchTrie.insert("");
searchTrie.insert("FAttribute_Defense");
searchTrie.insert("FAttribute_Defense");
searchTrie.insert("ReductionRule");
searchTrie.insert("FAttribute_ExperienceBounty");
searchTrie.insert("FAttribute_ExperienceBounty");
searchTrie.insert("");
searchTrie.insert("FPIEPlayerInfo");
searchTrie.insert("GetTeam");
searchTrie.insert("GetFaction");
searchTrie.insert("GetStartingSpot");
searchTrie.insert("FPIEPlayerInfo");
searchTrie.insert("FPIEPlayerInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FPIECPUPlayerInfo");
searchTrie.insert("GetDifficulty");
searchTrie.insert("FPIECPUPlayerInfo");
searchTrie.insert("FPIECPUPlayerInfo");
searchTrie.insert("");
searchTrie.insert("GarrisonStructs");
searchTrie.insert("GarrisonStructs");
searchTrie.insert("");
searchTrie.insert("FTemporaryFogRevealEffectInfo");
searchTrie.insert("FTemporaryFogRevealEffectInfo");
searchTrie.insert("FTemporaryFogRevealEffectInfo");
searchTrie.insert("CreateForTeam");
searchTrie.insert("CreateForTeam");
searchTrie.insert("Tick");
searchTrie.insert("SetDuration");
searchTrie.insert("GetLocation");
searchTrie.insert("HasCompleted");
searchTrie.insert("OnPostEdit");
searchTrie.insert("ConstructorOnPostEdit");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeExisted");
searchTrie.insert("Location");
searchTrie.insert("");
searchTrie.insert("FTemporaryFogRevealEffectsArray");
searchTrie.insert("FTemporaryFogRevealEffectsArray");
searchTrie.insert("FTemporaryFogRevealEffectsArray");
searchTrie.insert("Array");
searchTrie.insert("FSpawnDecalInfo");
searchTrie.insert("FSpawnDecalInfo");
searchTrie.insert("GetDecal");
searchTrie.insert("GetSize");
searchTrie.insert("GetRotation");
searchTrie.insert("GetDuration");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FKeyInfo");
searchTrie.insert("FKeyInfo");
searchTrie.insert("FKeyInfo");
searchTrie.insert("FKeyInfo");
searchTrie.insert("DefaultConstructFontInfo");
searchTrie.insert("GetText");
searchTrie.insert("GetImageDisplayMethod");
searchTrie.insert("SetImageDisplayMethod");
searchTrie.insert("GetFullBrush");
searchTrie.insert("GetPartialBrush");
searchTrie.insert("SetPartialBrush");
searchTrie.insert("GetPartialBrushText");
searchTrie.insert("GetPartialBrushTextFont");
searchTrie.insert("SetPartialFont");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("FKeyWithModifiers");
searchTrie.insert("HasSHIFTModifier");
searchTrie.insert("HasCTRLModifier");
searchTrie.insert("HasALTModifier");
searchTrie.insert("HasCMDModifier");
searchTrie.insert("Struct_2)");
searchTrie.insert("Struct)");
searchTrie.insert("ToString");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleBuffOrDebuffWidget");
searchTrie.insert("USingleBuffOrDebuffWidget");
searchTrie.insert("PopulateBindWidgetOptionalList");
searchTrie.insert("GetDisplayTextForDuration");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("SetupFor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleTickableBuffOrDebuffWidget");
searchTrie.insert("SetupFor");
searchTrie.insert("SetDurationRemaining");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TotalDuration");
searchTrie.insert("UEndOfMatchWidget");
searchTrie.insert("SetupWidget");
searchTrie.insert("SetupForResult");
searchTrie.insert("NativeTick");
searchTrie.insert("UIBinding_OnSpectateButtonClicked");
searchTrie.insert("UIBinding_OnReturnToMainMenuButtonClicked");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UInGameWidgetBase");
searchTrie.insert("UInGameWidgetBase");
searchTrie.insert("SetupWidget");
searchTrie.insert("RespondToEscapeRequest");
searchTrie.insert("NativeTick");
searchTrie.insert("GetCurrentSelected");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bHasSetup");
searchTrie.insert("");
searchTrie.insert("UInMatchDeveloperWidget");
searchTrie.insert("UInMatchDeveloperWidget");
searchTrie.insert("SetupWidget");
searchTrie.insert("IsEditorOnly");
searchTrie.insert("RebuildWidget");
searchTrie.insert("UIBinding_OnDestroySelectableButtonClicked");
searchTrie.insert("UIBinding_OnDamageSelectableButtonClicked");
searchTrie.insert("UIBinding_OnAwardExperienceButtonClicked");
searchTrie.insert("UIBinding_OnAwardLotsOfExperienceButtonClicked");
searchTrie.insert("UIBinding_OnAwardExperienceToPlayerButtonClicked");
searchTrie.insert("UIBinding_OnGiveRandomItemButtonClicked");
searchTrie.insert("UIBinding_OnGiveSpecificItemButtonClicked");
searchTrie.insert("UIBinding_OnGetUnitAIInfoButtonClicked");
searchTrie.insert("IsPopupMenuShowing");
searchTrie.insert("ShowPopupWidget");
searchTrie.insert("HidePopupWidget");
searchTrie.insert("STARTING_Y_POSITION");
searchTrie.insert("Y_SPACING_BETWEEN_BUTTONS");
searchTrie.insert("BUTTON_SIZE");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UDevelopmentPopupWidget");
searchTrie.insert("UDevelopmentPopupWidget");
searchTrie.insert("IsEditorOnly");
searchTrie.insert("RebuildWidget");
searchTrie.insert("OnWidgetAddedToSelectionsPanel");
searchTrie.insert("SetAppearanceFor");
searchTrie.insert("NUM_GRID_PANEL_CHILDREN_PER_ROW");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UDevelopmentPopupWidgetButton");
searchTrie.insert("uint8");
searchTrie.insert("UDevelopmentPopupWidgetButton");
searchTrie.insert("SetupWidget");
searchTrie.insert("IsEditorOnly");
searchTrie.insert("RebuildWidget");
searchTrie.insert("UIBinding_OnButtonClicked");
searchTrie.insert("SetupFor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ClickFunctionality");
searchTrie.insert("ClickAuxilleryInfo");
searchTrie.insert("AMarqueeHUD");
searchTrie.insert("AMarqueeHUD");
searchTrie.insert("PostInitializeComponents");
searchTrie.insert("DrawHUD");
searchTrie.insert("DrawSelectionBox");
searchTrie.insert("DrawSelectionFilledRectangle");
searchTrie.insert("DrawSelectionBorder");
searchTrie.insert("ClearHighlightedSelectables");
searchTrie.insert("HighlightUnitsInsideBox");
searchTrie.insert("MakeMarqueeSelection");
searchTrie.insert("SetClickLocation");
searchTrie.insert("SetMouseLoc");
searchTrie.insert("SetMarqueeSettingsValues");
searchTrie.insert("SetPerformMarqueeASAP");
searchTrie.insert("SetPC");
searchTrie.insert("ClickLoc");
searchTrie.insert("MouseLoc");
searchTrie.insert("MarqueeBoxDrawMethod");
searchTrie.insert("MarqueeBoxRectangleColor");
searchTrie.insert("MarqueeBoxBorderColor");
searchTrie.insert("MarqueeBorderLineThickness");
searchTrie.insert("bPerformMarqueeASAP");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("URTSHUD");
searchTrie.insert("URTSHUD");
searchTrie.insert("SetupWidget");
searchTrie.insert("SetupMinimap");
searchTrie.insert("NativeTick");
searchTrie.insert("SetupBindings");
searchTrie.insert("SetupBoundWidgets");
searchTrie.insert("SpawnMouseHoverAndPressedWidget");
searchTrie.insert("SetupCommanderSkillTreeWidget");
searchTrie.insert("SetupPlayerTargetingWidget");
searchTrie.insert("PerformPlayerTargetingPanelFinalSetup");
searchTrie.insert("SetupPauseMenu");
searchTrie.insert("SetupMenuOutputWidget");
searchTrie.insert("SpawnTooltipWidgets");
searchTrie.insert("GetPlayerExperienceAquiredAsText");
searchTrie.insert("GetPlayerExperienceRequiredAsText");
searchTrie.insert("UIBinding_OnPauseMenuButtonLeftMousePress");
searchTrie.insert("UIBinding_OnPauseMenuButtonLeftMouseReleased");
searchTrie.insert("UIBinding_OnPauseMenuButtonRightMousePress");
searchTrie.insert("UIBinding_OnPauseMenuButtonRightMouseReleased");
searchTrie.insert("UIBinding_OnCommanderSkillTreeButtonLeftMousePress");
searchTrie.insert("UIBinding_OnCommanderSkillTreeButtonLeftMouseReleased");
searchTrie.insert("UIBinding_OnCommanderSkillTreeButtonRightMousePress");
searchTrie.insert("UIBinding_OnCommanderSkillTreeButtonRightMouseReleased");
searchTrie.insert("TellPlayerTargetingPanelAboutButtonAction_LMBPressed");
searchTrie.insert("TellPlayerTargetingPanelAboutButtonAction_LMBReleased");
searchTrie.insert("TellPlayerTargetingPanelAboutButtonAction_RMBPressed");
searchTrie.insert("TellPlayerTargetingPanelAboutButtonAction_RMBReleased");
searchTrie.insert("OnPlayerCurrentSelectedChanged");
searchTrie.insert("OnPlayerNoSelection");
searchTrie.insert("TryShowCommanderSkillTree");
searchTrie.insert("TryHideCommanderSkillTree");
searchTrie.insert("OnToggleCommanderSkillTreeButtonClicked");
searchTrie.insert("OnToggleCommanderSkillTreeVisibilityKeyPressed");
searchTrie.insert("ShowPlayerTargetingPanel");
searchTrie.insert("HidePlayerTargetingPanel");
searchTrie.insert("OnCommanderExperienceGained");
searchTrie.insert("OnCommanderRankGained_LastForEvent");
searchTrie.insert("OnCommanderSkillAquired");
searchTrie.insert("OnCommanderAbilityUsed");
searchTrie.insert("OnCommanderAbilityCooledDown");
searchTrie.insert("Selected_OnHealthChanged");
searchTrie.insert("Selected_OnMaxHealthChanged");
searchTrie.insert("Selected_OnCurrentAndMaxHealthChanged");
searchTrie.insert("Selected_OnSelectableResourceCurrentAmountChanged");
searchTrie.insert("Selected_OnSelectableResourceMaxAmountChanged");
searchTrie.insert("Selected_OnSelectableResourceCurrentAndMaxAmountsChanged");
searchTrie.insert("Selected_OnSelectableResourceRegenRateChanged");
searchTrie.insert("Selected_OnRankChanged");
searchTrie.insert("Selected_OnCurrentRankExperienceChanged");
searchTrie.insert("Selected_OnImpactDamageChanged");
searchTrie.insert("Selected_OnAttackRateChanged");
searchTrie.insert("Selected_OnAttackRangeChanged");
searchTrie.insert("Selected_OnDefenseMultiplierChanged");
searchTrie.insert("Selected_OnItemAddedToInventory");
searchTrie.insert("Selected_OnItemsRemovedFromInventory");
searchTrie.insert("Selected_OnInventoryPositionsSwapped");
searchTrie.insert("Selected_OnInventoryItemUsed");
searchTrie.insert("Selected_OnInventoryItemUseCooldownFinished");
searchTrie.insert("Selected_OnItemPurchasedFromShop");
searchTrie.insert("Selected_OnInventoryItemSold");
searchTrie.insert("Selected_OnBuffApplied");
searchTrie.insert("Selected_OnBuffApplied");
searchTrie.insert("Selected_OnDebuffApplied");
searchTrie.insert("Selected_OnDebuffApplied");
searchTrie.insert("Selected_OnTickableBuffRemoved");
searchTrie.insert("Selected_OnTickableDebuffRemoved");
searchTrie.insert("Selected_OnStaticBuffRemoved");
searchTrie.insert("Selected_OnStaticDebuffRemoved");
searchTrie.insert("Selected_UpdateTickableBuffDuration");
searchTrie.insert("Selected_UpdateTickableDebuffDuration");
searchTrie.insert("OnUnitEnteredBuildingGarrison");
searchTrie.insert("OnUnitExitedBuildingGarrison");
searchTrie.insert("OnBuildingGarrisonMultipleUnitsEnteredOrExited");
searchTrie.insert("OnGarrisonedUnitZeroHealth");
searchTrie.insert("IsChatBoxShowing");
searchTrie.insert("OpenChatBox");
searchTrie.insert("CloseChatBox");
searchTrie.insert("OnGameMessageReceived");
searchTrie.insert("OnChatMessageReceived");
searchTrie.insert("OnMenuWarningHappened");
searchTrie.insert("SendChatMessage");
searchTrie.insert("IsPauseMenuShowingOrPlayingShowAnimation");
searchTrie.insert("ShowPauseMenu");
searchTrie.insert("HidePauseMenu");
searchTrie.insert("TryCloseEscapableWidget");
searchTrie.insert("SetInitialResourceAmounts");
searchTrie.insert("OnResourceChanged");
searchTrie.insert("OnResourcesChanged");
searchTrie.insert("OnHousingResourceConsumptionChanged");
searchTrie.insert("OnHousingResourceProvisionsChanged");
searchTrie.insert("OnUpgradeComplete");
searchTrie.insert("OnItemAddedToProductionQueue");
searchTrie.insert("OnItemAddedAndProductionStarted");
searchTrie.insert("OnProductionComplete");
searchTrie.insert("OnBuildsInTabProductionComplete");
searchTrie.insert("OnBuildsInTabBuildingPlaced");
searchTrie.insert("OnBuildingConstructed");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("OnAnotherPlayerDefeated");
searchTrie.insert("GetMouseFocusWidget");
searchTrie.insert("GetMouseFocusWidgetSlot");
searchTrie.insert("GetTimeWhenPauseMenuWasShown");
searchTrie.insert("IsTooltipWidgetShowing");
searchTrie.insert("GetNumTooltipWidgetsShowing");
searchTrie.insert("ShowTooltipWidget");
searchTrie.insert("ShowTooltipWidget_SelectableActionBar_Ability");
searchTrie.insert("ShowTooltipWidget_SelectableActionBar_BuildBuilding");
searchTrie.insert("ShowTooltipWidget_SelectableActionBar_TrainUnit");
searchTrie.insert("ShowTooltipWidget_SelectableActionBar_ResearchUpgrade");
searchTrie.insert("ShowTooltipWidget_PersistentPanel_BuildBuilding");
searchTrie.insert("ShowTooltipWidget_PersistentPanel_TrainUnit");
searchTrie.insert("ShowTooltipWidget_PersistentPanel_ResearchUpgrade");
searchTrie.insert("ShowTooltipWidget_ProductionQueueSlot_BuildBuilding");
searchTrie.insert("ShowTooltipWidget_ProductionQueueSlot_TrainUnit");
searchTrie.insert("ShowTooltipWidget_ProductionQueueSlot_ResearchUpgrade");
searchTrie.insert("ShowTooltipWidget_InventorySlot");
searchTrie.insert("ShowTooltipWidget_ShopSlot");
searchTrie.insert("ShowTooltipWidget_InventoryItemInWorld");
searchTrie.insert("ShowTooltipWidget_GlobalSkillsPanelButton");
searchTrie.insert("ShowTooltipWidget_CommanderSkillTreeNode");
searchTrie.insert("HideTooltipWidget");
searchTrie.insert("HideTooltipWidget_InventoryItemInWorld");
searchTrie.insert("AddToEscapeRequestResponableWidgets");
searchTrie.insert("RemoveFromEscapeRequestResponableWidgets");
searchTrie.insert("PALETTE_CATEGORY");
searchTrie.insert("BLANK_TEXT");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CommanderSkillTreeWidget");
searchTrie.insert("");
searchTrie.insert("PlayerTargetingPanel");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("EscapeRequestResponableWidgets");
searchTrie.insert("PauseMenu");
searchTrie.insert("MenuOutputWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeWhenPauseMenuWasShown");
searchTrie.insert("");
searchTrie.insert("SkillTreeWantsOpeningAnimName");
searchTrie.insert("SkillTreeWantsOpeningAnim");
searchTrie.insert("");
searchTrie.insert("USelectableContextMenu");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnTick");
searchTrie.insert("OnPlayerSelectionChanged");
searchTrie.insert("OnPlayerNoSelection");
searchTrie.insert("Selected_OnHealthChanged");
searchTrie.insert("Selected_OnMaxHealthChanged");
searchTrie.insert("Selected_OnCurrentAndMaxHealthChanged");
searchTrie.insert("Selected_OnSelectableResourceCurrentAmountChanged");
searchTrie.insert("Selected_OnSelectableResourceMaxAmountChanged");
searchTrie.insert("Selected_OnSelectableResourceCurrentAndMaxAmountsChanged");
searchTrie.insert("Selected_OnSelectableResourceRegenRateChanged");
searchTrie.insert("Selected_OnRankChanged");
searchTrie.insert("Selected_OnCurrentRankExperienceChanged");
searchTrie.insert("Selected_OnImpactDamageChanged");
searchTrie.insert("Selected_OnAttackRateChanged");
searchTrie.insert("Selected_OnAttackRangeChanged");
searchTrie.insert("Selected_OnDefenseMultiplierChanged");
searchTrie.insert("Selected_OnBuffApplied");
searchTrie.insert("Selected_OnDebuffApplied");
searchTrie.insert("Selected_OnBuffApplied");
searchTrie.insert("Selected_OnDebuffApplied");
searchTrie.insert("Selected_OnTickableBuffRemoved");
searchTrie.insert("Selected_OnTickableDebuffRemoved");
searchTrie.insert("Selected_OnStaticBuffRemoved");
searchTrie.insert("Selected_OnStaticDebuffRemoved");
searchTrie.insert("Selected_UpdateTickableBuffDuration");
searchTrie.insert("Selected_UpdateTickableDebuffDuration");
searchTrie.insert("Selected_OnItemAddedToInventory");
searchTrie.insert("Selected_OnItemsRemovedFromInventory");
searchTrie.insert("Selected_OnInventoryPositionsSwapped");
searchTrie.insert("Selected_OnInventoryItemUsed");
searchTrie.insert("Selected_OnInventoryItemUseCooldownFinished");
searchTrie.insert("Selected_OnItemPurchasedFromShop");
searchTrie.insert("Selected_OnInventoryItemSold");
searchTrie.insert("OnBuildingConstructed");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("OnUpgradeComplete");
searchTrie.insert("OnItemAddedToProductionQueue");
searchTrie.insert("OnItemAddedAndProductionStarted");
searchTrie.insert("OnProductionComplete");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USelectableInfo");
searchTrie.insert("USelectableInfo");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnTick");
searchTrie.insert("GetStaticBuffWidget");
searchTrie.insert("GetTickableBuffWidget");
searchTrie.insert("GetStaticDebuffWidget");
searchTrie.insert("GetTickableDebuffWidget");
searchTrie.insert("OnItemOnDisplayButtonAddedToPanel");
searchTrie.insert("OnInventoryItemButtonAddedToPanel");
searchTrie.insert("SetInfoVisibilities");
searchTrie.insert("UpdateTextName");
searchTrie.insert("UpdateTextDescription");
searchTrie.insert("UpdateImageIcon");
searchTrie.insert("UpdateTextLevel");
searchTrie.insert("UpdateImageLevel");
searchTrie.insert("UpdateTextExperienceRequired");
searchTrie.insert("UpdateTextExperienceTowardsNextLevel");
searchTrie.insert("UpdateProgressBarExperience");
searchTrie.insert("UpdateTextHealth");
searchTrie.insert("UpdateTextMaxHealth");
searchTrie.insert("UpdateProgressBarHealth");
searchTrie.insert("UpdateTextSelectableResource");
searchTrie.insert("UpdateTextSelectableResourceMax");
searchTrie.insert("UpdateProgressBarSelectableResource");
searchTrie.insert("UpdateTextSelectableResourceRegenRate");
searchTrie.insert("UpdateTextImpactDamage");
searchTrie.insert("UpdateTextAttackRate");
searchTrie.insert("UpdateTextAttackRange");
searchTrie.insert("UpdateTextDefenseMultiplier");
searchTrie.insert("UpdateProgressBarProductionQueue");
searchTrie.insert("UpdateBuffsAndDebuffs");
searchTrie.insert("UpdateProductionQueueContents");
searchTrie.insert("ShouldShowProductionQueueInfo");
searchTrie.insert("ShouldShowAttackAttributes");
searchTrie.insert("DamageFloatToText");
searchTrie.insert("AttackRateFloatToText");
searchTrie.insert("AttackRangeFloatToText");
searchTrie.insert("CurrentHealthFloatToText");
searchTrie.insert("MaxHealthFloatToText");
searchTrie.insert("SelectableResourceCurrentAmountFloatToText");
searchTrie.insert("SelectableResourceRegenRateFloatToText");
searchTrie.insert("DefenseMultiplierFloatToText");
searchTrie.insert("DefenseMultiplierFloatToTextInner");
searchTrie.insert("ExperienceGainedFloatToText");
searchTrie.insert("ExperienceRequiredFloatToText");
searchTrie.insert("OnPlayerSelectionChanged");
searchTrie.insert("OnNoPlayerSelection");
searchTrie.insert("Selected_OnHealthChanged");
searchTrie.insert("Selected_OnMaxHealthChanged");
searchTrie.insert("Selected_OnCurrentAndMaxHealthChanged");
searchTrie.insert("Selected_OnSelectableResourceCurrentAmountChanged");
searchTrie.insert("Selected_OnSelectableResourceMaxAmountChanged");
searchTrie.insert("Selected_OnSelectableResourceCurrentAndMaxAmountsChanged");
searchTrie.insert("Selected_OnSelectableResourceRegenRateChanged");
searchTrie.insert("Selected_OnRankChanged");
searchTrie.insert("Selected_OnCurrentRankExperienceChanged");
searchTrie.insert("Selected_OnImpactDamageChanged");
searchTrie.insert("Selected_OnAttackRateChanged");
searchTrie.insert("Selected_OnAttackRangeChanged");
searchTrie.insert("Selected_OnDefenseMultiplierChanged");
searchTrie.insert("Selected_OnBuffApplied");
searchTrie.insert("Selected_OnDebuffApplied");
searchTrie.insert("Selected_OnBuffApplied");
searchTrie.insert("Selected_OnDebuffApplied");
searchTrie.insert("Selected_OnTickableBuffRemoved");
searchTrie.insert("Selected_OnTickableDebuffRemoved");
searchTrie.insert("Selected_OnStaticBuffRemoved");
searchTrie.insert("Selected_OnStaticDebuffRemoved");
searchTrie.insert("Selected_UpdateTickableBuffDuration");
searchTrie.insert("Selected_UpdateTickableDebuffDuration");
searchTrie.insert("Selected_OnItemAddedToInventory");
searchTrie.insert("Selected_OnItemsRemovedFromInventory");
searchTrie.insert("Selected_OnInventoryPositionsSwapped");
searchTrie.insert("Selected_OnInventoryItemUsed");
searchTrie.insert("Selected_OnInventoryItemUseCooldownFinished");
searchTrie.insert("Selected_OnItemPurchasedFromShop");
searchTrie.insert("Selected_OnInventoryItemSold");
searchTrie.insert("OnItemAddedToProductionQueue");
searchTrie.insert("OnItemAddedAndProductionStarted");
searchTrie.insert("OnProductionComplete");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("QueueNum");
searchTrie.insert("ProductionQueue");
searchTrie.insert("LastSelectableResourceType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ItemOnDisplayInShopButtons");
searchTrie.insert("");
searchTrie.insert("CoolingDownInventorySlots");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("InventoryButtons");
searchTrie.insert("UProductionQueueButton");
searchTrie.insert("UProductionQueueButton");
searchTrie.insert("Setup");
searchTrie.insert("UIBinding_OnLeftMouseButtonPress");
searchTrie.insert("UIBinding_OnLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnRightMouseButtonPress");
searchTrie.insert("UIBinding_OnRightMouseButtonReleased");
searchTrie.insert("GetButtonType");
searchTrie.insert("OnPlayerSelectionChanged");
searchTrie.insert("Assign");
searchTrie.insert("Unassign");
searchTrie.insert("OnCreationFromPalette");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ButtonType");
searchTrie.insert("UItemOnDisplayInShopButton");
searchTrie.insert("uint8");
searchTrie.insert("UItemOnDisplayInShopButton");
searchTrie.insert("SetupWidget");
searchTrie.insert("SetupMore");
searchTrie.insert("GetPurchasesRemainingText");
searchTrie.insert("GetSoldOutRenderOpacity");
searchTrie.insert("UIBinding_OnLeftMouseButtonPress");
searchTrie.insert("UIBinding_OnLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnRightMouseButtonPress");
searchTrie.insert("UIBinding_OnRightMouseButtonReleased");
searchTrie.insert("GetShopSlotIndex");
searchTrie.insert("GetSlotStateInfo");
searchTrie.insert("GetItemInfo");
searchTrie.insert("MakeActive");
searchTrie.insert("OnPurchaseFromHere");
searchTrie.insert("");
searchTrie.insert("OwningWidget");
searchTrie.insert("ShopSlotIndex");
searchTrie.insert("SlotStateInfo");
searchTrie.insert("ItemInfo");
searchTrie.insert("OriginalOpacity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UInventoryItemButton");
searchTrie.insert("UInventoryItemButton");
searchTrie.insert("SetupWidget");
searchTrie.insert("SetAppearanceForEmptySlot");
searchTrie.insert("ItemUseCooldownFloatToText");
searchTrie.insert("UIBinding_OnButtonLeftMouseButtonPressed");
searchTrie.insert("UIBinding_OnButtonLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnButtonRightMouseButtonPressed");
searchTrie.insert("UIBinding_OnButtonRightMouseButtonReleased");
searchTrie.insert("GetInventorySlot");
searchTrie.insert("GetItemInfo");
searchTrie.insert("GetServerSlotIndex");
searchTrie.insert("MakeActive");
searchTrie.insert("OnItemAdded");
searchTrie.insert("OnAmountRemoved");
searchTrie.insert("OnUsed");
searchTrie.insert("UpdateCooldown");
searchTrie.insert("OnUseCooldownFinished");
searchTrie.insert("InventorySlot");
searchTrie.insert("SlotsItemInfo");
searchTrie.insert("");
searchTrie.insert("ServerSlotIndex");
searchTrie.insert("DisplayedItemType");
searchTrie.insert("StackQuantityOrNumChargesShown");
searchTrie.insert("UnifiedBrushAndSoundFlags");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ItemUseTotalCooldown");
searchTrie.insert("USelectableActionBar");
searchTrie.insert("USelectableActionBar");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnTick");
searchTrie.insert("OnPlayerSelectionChanged");
searchTrie.insert("OnNoPlayerSelection");
searchTrie.insert("UpdateButtonCooldowns");
searchTrie.insert("OnProductionComplete");
searchTrie.insert("OnUpgradeComplete");
searchTrie.insert("OnBuildingConstructed");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumButtonsInMenu");
searchTrie.insert("UContextActionButton");
searchTrie.insert("UContextActionButton");
searchTrie.insert("Setup");
searchTrie.insert("OnCreationFromPalette");
searchTrie.insert("OnButtonCreationFromPalette");
searchTrie.insert("SetImageAndProgressBarReferences");
searchTrie.insert("GetDurationRemainingText");
searchTrie.insert("SetAppearanceForFullyResearchedUpgrade");
searchTrie.insert("UIBinding_OnLMBPressed");
searchTrie.insert("UIBinding_OnLMBReleased");
searchTrie.insert("UIBinding_OnRMBPressed");
searchTrie.insert("UIBinding_OnRMBReleased");
searchTrie.insert("MakeActive");
searchTrie.insert("MakeActive");
searchTrie.insert("MakeActive");
searchTrie.insert("UpdateCooldownProgressBarAndText");
searchTrie.insert("Disable");
searchTrie.insert("ArePrequisitesMet");
searchTrie.insert("GetButtonType");
searchTrie.insert("GetDisplayedInfo");
searchTrie.insert("OnPrerequisitesMet");
searchTrie.insert("OnPrerequisiteLost");
searchTrie.insert("OnUpgradeResearchComplete");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsCooldownTextEmpty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsForProductionAction");
searchTrie.insert("ProductionQueue");
searchTrie.insert("TimerHandle_ProgressBar");
searchTrie.insert("ButtonType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bPrerequisitesMet");
searchTrie.insert("OriginalAlpha");
searchTrie.insert("UGarrisonedUnitInfo");
searchTrie.insert("SetupWidget");
searchTrie.insert("SetAppearanceFor");
searchTrie.insert("UIBinding_OnUnloadButtonLMBPressed");
searchTrie.insert("UIBinding_OnUnloadButtonLMBReleased");
searchTrie.insert("UIBinding_OnUnloadButtonRMBPressed");
searchTrie.insert("UIBinding_OnUnloadButtonRMBReleased");
searchTrie.insert("OnUnloadButtonClicked");
searchTrie.insert("GetGarrisonedSelectable");
searchTrie.insert("");
searchTrie.insert("GarrisonedSelectable");
searchTrie.insert("UGarrisonInfo");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnPlayerPrimarySelectedChanged");
searchTrie.insert("OnPlayerNoSelection");
searchTrie.insert("OnBuildingGarrisonedUnitGained");
searchTrie.insert("OnBuildingGarrisonedUnitLost");
searchTrie.insert("OnBuildingPotentiallyManyGarrisonedUnitsLost");
searchTrie.insert("UIBinding_OnUnloadGarrisonButtonLeftMousePress");
searchTrie.insert("UIBinding_OnUnloadGarrisonButtonLeftMouseReleased");
searchTrie.insert("UIBinding_OnUnloadGarrisonButtonRightMousePress");
searchTrie.insert("UIBinding_OnUnloadGarrisonButtonRightMouseReleased");
searchTrie.insert("OnUnloadGarrisonButtonClicked");
searchTrie.insert("PrimarySelectedsGarrisonNetworkType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDResourcesWidget");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnTick");
searchTrie.insert("SetInitialResourceAmounts");
searchTrie.insert("OnResourcesChanged");
searchTrie.insert("OnHousingResourceConsumptionChanged");
searchTrie.insert("OnHousingResourceProvisionsChanged");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDSingleResourcesWidget");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnTick");
searchTrie.insert("CheckUpdateCurve");
searchTrie.insert("UpdateResourceDisplayAmount");
searchTrie.insert("GetResourceType");
searchTrie.insert("SetInitialValue");
searchTrie.insert("OnResourcesChanged");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StartAmount");
searchTrie.insert("CurrentAmount");
searchTrie.insert("TargetAmount");
searchTrie.insert("UpdateCurveDuration");
searchTrie.insert("CurrentCurveTime");
searchTrie.insert("Range");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDSingleHousingResourceWidget");
searchTrie.insert("UHUDSingleHousingResourceWidget");
searchTrie.insert("SetupResourceWidget");
searchTrie.insert("CheckIfStateHasChanged");
searchTrie.insert("OnGoneOverCap");
searchTrie.insert("OnReturnedToWithinCap");
searchTrie.insert("GetResourceType");
searchTrie.insert("SetInitialValue");
searchTrie.insert("OnAmountConsumedChanged");
searchTrie.insert("OnAmountProvidedChanged");
searchTrie.insert("");
searchTrie.insert("Consumed_OriginalColor");
searchTrie.insert("Provided_OriginalColor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsOverCap");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDChatInputWidget");
searchTrie.insert("UHUDChatInputWidget");
searchTrie.insert("SetupWidget");
searchTrie.insert("SetupBindings");
searchTrie.insert("RemoveFocus");
searchTrie.insert("GetMessageToSend");
searchTrie.insert("SendMessage");
searchTrie.insert("UIBinding_OnInputTextChanged");
searchTrie.insert("UIBinding_OnInputTextCommitted");
searchTrie.insert("Open");
searchTrie.insert("Close");
searchTrie.insert("RespondToEscapeRequest");
searchTrie.insert("SendChatMessageAndClose");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MessageRecipients");
searchTrie.insert("NumUndeletableCharacters");
searchTrie.insert("UHUDChatOutputWidget");
searchTrie.insert("UHUDChatOutputWidget");
searchTrie.insert("SetupWidget");
searchTrie.insert("NativeTick");
searchTrie.insert("GetNextArrayIndex");
searchTrie.insert("HideWidget");
searchTrie.insert("Delay)");
searchTrie.insert("OnChatMessageReceived");
searchTrie.insert("MessageReceivedAnimName");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FrontOfMessageIndices");
searchTrie.insert("NumMessages");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_Hide");
searchTrie.insert("FGameMessageAttributes");
searchTrie.insert("void");
searchTrie.insert("GetNextArrayIndex");
searchTrie.insert("GetPreviousArrayIndex");
searchTrie.insert("FGameMessageAttributes");
searchTrie.insert("SetMessageReceivedAnimName");
searchTrie.insert("Init");
searchTrie.insert("OnMessageReceived");
searchTrie.insert("ClearText");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_HidePanel");
searchTrie.insert("FrontOfMessageIndices");
searchTrie.insert("NumMessages");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OwningWidget");
searchTrie.insert("HidePanelFunctionPtr");
searchTrie.insert("UHUDGameOutputWidget");
searchTrie.insert("UHUDGameOutputWidget");
searchTrie.insert("SetupWidget");
searchTrie.insert("NativeTick");
searchTrie.insert("HideWarningPanel");
searchTrie.insert("HideNotificationPanel");
searchTrie.insert("OnGameWarningReceived");
searchTrie.insert("OnGameNotificationReceived");
searchTrie.insert("Delay)");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UHUDPersistentPanel");
searchTrie.insert("UHUDPersistentPanel");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnTick");
searchTrie.insert("SwitchToTab");
searchTrie.insert("OnUpgradeComplete");
searchTrie.insert("OnBuildingConstructed");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("OnItemAddedToProductionQueue");
searchTrie.insert("OnItemAddedAndProductionStarted");
searchTrie.insert("OnProductionComplete");
searchTrie.insert("OnBuildsInTabProductionStarted");
searchTrie.insert("OnBuildsInTabProductionComplete");
searchTrie.insert("OnBuildsInTabBuildingPlaced");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ActiveTab");
searchTrie.insert("UHUDPersistentTabSwitchingButton");
searchTrie.insert("UHUDPersistentTabSwitchingButton");
searchTrie.insert("Setup");
searchTrie.insert("UIBinding_OnLeftMouseButtonPress");
searchTrie.insert("UIBinding_OnLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnRightMouseButtonPress");
searchTrie.insert("UIBinding_OnRightMouseButtonReleased");
searchTrie.insert("OnClicked");
searchTrie.insert("GetTabType");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("FButtonClickabilityInfo");
searchTrie.insert("GetButtonPtr");
searchTrie.insert("ArePrerequisitesMet");
searchTrie.insert("HasQueueSupport");
searchTrie.insert("SetArePrerequisitesMet");
searchTrie.insert("SetHasQueueSupport");
searchTrie.insert("CanBeActive");
searchTrie.insert("ButtonPtr");
searchTrie.insert("bArePrerequisitesMet");
searchTrie.insert("bHasQueueSupport");
searchTrie.insert("FActiveButtonStateData");
searchTrie.insert("FActiveButtonStateData");
searchTrie.insert("GetQueue");
searchTrie.insert("GetQueueOwner");
searchTrie.insert("GetNumItemsInQueue");
searchTrie.insert("IsAnotherButtonsPersistentQueueProducing");
searchTrie.insert("GetCannotFunctionReason");
searchTrie.insert("SetQueue");
searchTrie.insert("SetQueueOwner");
searchTrie.insert("SetNumItemsInQueue");
searchTrie.insert("SetIsAnotherButtonsPersistentQueueProducing");
searchTrie.insert("SetCannotFunctionReason");
searchTrie.insert("ToString");
searchTrie.insert("Queue");
searchTrie.insert("");
searchTrie.insert("NumItemsInQueue");
searchTrie.insert("bIsAnotherButtonsPersistentQueueProducing");
searchTrie.insert("CannotFunctionReason");
searchTrie.insert("UHUDPersistentTab");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnTick");
searchTrie.insert("GetNumActiveButtons");
searchTrie.insert("GetType");
searchTrie.insert("OnBuildingConstructed");
searchTrie.insert("OnBuildingDestroyed");
searchTrie.insert("SetUnclickableButtonOpacity");
searchTrie.insert("SetShowTextLabelsOnButtons");
searchTrie.insert("OnItemAddedToProductionQueue");
searchTrie.insert("OnItemAddedAndProductionStarted");
searchTrie.insert("OnProductionComplete");
searchTrie.insert("OnBuildsInTabProductionStarted");
searchTrie.insert("OnBuildsInTabProductionComplete");
searchTrie.insert("OnBuildsInTabBuildingPlaced");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ButtonIndices");
searchTrie.insert("ButtonStates");
searchTrie.insert("UnactiveButtons");
searchTrie.insert("");
searchTrie.insert("UnclickableButtonOpacity");
searchTrie.insert("bShowTextLabelsOnButtons");
searchTrie.insert("Widget2)");
searchTrie.insert("UHUDPersistentTabButton");
searchTrie.insert("UHUDPersistentTabButton");
searchTrie.insert("SetupButton");
searchTrie.insert("SetPermanentButtonType");
searchTrie.insert("SetPeramentStateInfo");
searchTrie.insert("MakeActive");
searchTrie.insert("MakeActive");
searchTrie.insert("MakeUnactive");
searchTrie.insert("OnCreationFromPalette");
searchTrie.insert("OnTick");
searchTrie.insert("OnAnotherPersistentQueueProductionStarted");
searchTrie.insert("OnAnotherPersistentQueueProductionFinished");
searchTrie.insert("GetQuantityText");
searchTrie.insert("UIBinding_OnLMBPress");
searchTrie.insert("UIBinding_OnLMBReleased");
searchTrie.insert("UIBinding_OnRMBPress");
searchTrie.insert("UIBinding_OnRMBReleased");
searchTrie.insert("GetButtonType");
searchTrie.insert("GetStateInfo");
searchTrie.insert("IsProducingSomething");
searchTrie.insert("HasProductionCompleted");
searchTrie.insert("OnItemAddedToProductionQueue");
searchTrie.insert("OnItemAddedAndProductionStarted");
searchTrie.insert("OnProductionComplete");
searchTrie.insert("OnBuildsInTabProductionStarted");
searchTrie.insert("OnBuildsInTabProductionComplete");
searchTrie.insert("OnBuildsInTabBuildingPlaced");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Button");
searchTrie.insert("StateInfo");
searchTrie.insert("OriginalAlpha");
searchTrie.insert("UnclickableAlpha");
searchTrie.insert("UMinimap");
searchTrie.insert("UMinimap");
searchTrie.insert("SetupWidget");
searchTrie.insert("Setup");
searchTrie.insert("NativePaint");
searchTrie.insert("DrawSelectables");
searchTrie.insert("DrawFogOfWar");
searchTrie.insert("WorldCoordsToMinimapCoords");
searchTrie.insert("MinimapCoordsToWorldCoords");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MapCenter");
searchTrie.insert("MapDimensionsInverse");
searchTrie.insert("ImageSizeInPixels");
searchTrie.insert("ViewportSizeInPixels");
searchTrie.insert("UTooltipWidget_InventoryItem");
searchTrie.insert("UTooltipWidget_InventoryItem");
searchTrie.insert("InitialSetup");
searchTrie.insert("SetupForInner");
searchTrie.insert("SetupFor");
searchTrie.insert("SetupFor");
searchTrie.insert("SetupFor");
searchTrie.insert("IsSetupFor");
searchTrie.insert("DisplayedInventoryItem");
searchTrie.insert("DisplayedItemInfo");
searchTrie.insert("DisplayedNumInStackOrNumCharges");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_Ability");
searchTrie.insert("SetupFor");
searchTrie.insert("DisplayedButtonType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_Production");
searchTrie.insert("GetProductionTimeText");
searchTrie.insert("SetupFor");
searchTrie.insert("DisplayedInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_GlobalSkillsPanelButton");
searchTrie.insert("SetupFor");
searchTrie.insert("OnNewRankAquired");
searchTrie.insert("GetDisplayedInfo");
searchTrie.insert("DisplayedAbilityState");
searchTrie.insert("DisplayedAbilityInfoStruct");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UTooltipWidget_CommanderSkillTreeNode");
searchTrie.insert("UTooltipWidget_CommanderSkillTreeNode");
searchTrie.insert("InitialSetup");
searchTrie.insert("SetupFor");
searchTrie.insert("OnNewRankAquired");
searchTrie.insert("GetDisplayedNodeInfo");
searchTrie.insert("GetMissingRequirementsText");
searchTrie.insert("DisplayedNodeInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("CostTextOriginalColor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UIUtilities");
searchTrie.insert("FindWidgetAnim");
searchTrie.insert("CreateChildEditorUtilityWidget");
searchTrie.insert("UEditorPlayStartingResourcesWidget");
searchTrie.insert("RebuildWidget");
searchTrie.insert("");
searchTrie.insert("UPIEHumanPlayerInfoProxy");
searchTrie.insert("UIBinding_OnTeamComboBoxSelectionChanged");
searchTrie.insert("UIBinding_OnFactionComboBoxSelectionChanged");
searchTrie.insert("UIBinding_OnStartingSpotTextChanged");
searchTrie.insert("UIBinding_OnStartingSpotTextCommitted");
searchTrie.insert("EnumStringObject");
searchTrie.insert("PlaySettingsWidget");
searchTrie.insert("PlayerIndex");
searchTrie.insert("PlayerInfo");
searchTrie.insert("Text_PlayerIndex");
searchTrie.insert("ComboBox_Team");
searchTrie.insert("ComboBox_Faction");
searchTrie.insert("Text_StartingSpot");
searchTrie.insert("UPIECPUPlayerInfoProxy");
searchTrie.insert("UIBinding_OnTeamComboBoxSelectionChanged");
searchTrie.insert("UIBinding_OnFactionComboBoxSelectionChanged");
searchTrie.insert("UIBinding_OnStartingSpotTextChanged");
searchTrie.insert("UIBinding_OnStartingSpotTextCommitted");
searchTrie.insert("UIBinding_OnCPUDifficultyComboBoxSelectionChanged");
searchTrie.insert("EnumStringObject");
searchTrie.insert("PlaySettingsWidget");
searchTrie.insert("PlayerIndex");
searchTrie.insert("PlayerInfo");
searchTrie.insert("Text_PlayerIndex");
searchTrie.insert("ComboBox_Team");
searchTrie.insert("ComboBox_Faction");
searchTrie.insert("Text_StartingSpot");
searchTrie.insert("ComboBox_CPUDifficulty");
searchTrie.insert("UEditorPlaySettingsWidget");
searchTrie.insert("UEditorPlaySettingsWidget");
searchTrie.insert("final");
searchTrie.insert("ShouldSkipOpeningCutscene");
searchTrie.insert("ShouldSkipMainMenu");
searchTrie.insert("GetDefeatCondition");
searchTrie.insert("GetStartingResourceConfig");
searchTrie.insert("IsCheatWidgetBPSet");
searchTrie.insert("ShouldInitiallyShowCheatWidget");
searchTrie.insert("GetCheatWidgetBP");
searchTrie.insert("GetHumanPlayerInfo");
searchTrie.insert("GetNumCPUPlayers");
searchTrie.insert("GetCPUPlayerInfo");
searchTrie.insert("GetInvalidHumanOwnerRule");
searchTrie.insert("GetInvalidCPUOwnerRule");
searchTrie.insert("RebuildWidget");
searchTrie.insert("NativePreConstruct");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("CreateSingleHumanPlayerConfigurationWidget");
searchTrie.insert("CreateSingleCPUPlayerConfigurationWidget");
searchTrie.insert("GetTextSize");
searchTrie.insert("GetText");
searchTrie.insert("GetString");
searchTrie.insert("GetText");
searchTrie.insert("GetString");
searchTrie.insert("GetText");
searchTrie.insert("GetString");
searchTrie.insert("GetString");
searchTrie.insert("GetString");
searchTrie.insert("GetString_StartingSpot");
searchTrie.insert("GetString");
searchTrie.insert("SetSkippingOptionFromString");
searchTrie.insert("SetDefeatConditionFromString");
searchTrie.insert("SetNumCPUPlayersFromString");
searchTrie.insert("SetCheatWidgetBPFromString");
searchTrie.insert("SetInvalidHumanOwnerRuleFromString");
searchTrie.insert("SetInvalidCPUOwnerRuleFromString");
searchTrie.insert("DecrementEnum");
searchTrie.insert("IncrementEnum");
searchTrie.insert("CreateHumanReadableNameForUClassName");
searchTrie.insert("CreateUClassNameFromHumanReadableName");
searchTrie.insert("SetSlotAnchors");
searchTrie.insert("SetSlotAlignment");
searchTrie.insert("UIBinding_OnSkippingComboBoxOptionChanged");
searchTrie.insert("UIBinding_OnAdjustSkippingOptionLeftButtonClicked");
searchTrie.insert("UIBinding_OnAdjustSkippingOptionRightButtonClicked");
searchTrie.insert("UIBinding_OnDefeatConditionComboBoxOptionChanged");
searchTrie.insert("UIBinding_OnAdjustDefeatConditionLeftButtonClicked");
searchTrie.insert("UIBinding_OnAdjustDefeatConditionRightButtonClicked");
searchTrie.insert("UIBinding_OnNumCPUPlayersComboBoxOptionChanged");
searchTrie.insert("UIBinding_OnDecreaseNumCPUPlayersButtonClicked");
searchTrie.insert("UIBinding_OnIncreaseNumCPUPlayersButtonClicked");
searchTrie.insert("UIBinding_OnShowCheatWidgetCheckBoxChanged");
searchTrie.insert("UIBinding_OnCheatWidgetComboBoxOptionChanged");
searchTrie.insert("UIBinding_OnInvalidHumanOwnerRuleComboxBoxOptionChanged");
searchTrie.insert("UIBinding_OnInvalidCPUOwnerRuleComboxBoxOptionChanged");
searchTrie.insert("EnumStringObject");
searchTrie.insert("SkippingOption");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("HumanPlayerInfoCopy");
searchTrie.insert("CPUPlayerInfoCopy");
searchTrie.insert("NumCPUPlayers");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("StartingResourceAmounts");
searchTrie.insert("StartingResourceConfig");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DefeatCondition");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bInitiallyShowCheatWidget");
searchTrie.insert("CheatWidget_BP");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("InvalidHumanOwnerRule");
searchTrie.insert("InvalidCPUOwnerRule");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCreateDocumentationConfirmationWidget");
searchTrie.insert("final");
searchTrie.insert("RebuildWidget");
searchTrie.insert("UIBinding_OnConfirmCreateDocumentationButtonClicked");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPluginMaintainerEditorWidget");
searchTrie.insert("final");
searchTrie.insert("RebuildWidget");
searchTrie.insert("UIBinding_OnCreateDocumentationButtonClicked");
searchTrie.insert("UIBinding_OnLogFileContentsTextCommitted");
searchTrie.insert("ReadFileContents");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UCommanderSkillTreeNodeWidget");
searchTrie.insert("UCommanderSkillTreeNodeWidget");
searchTrie.insert("SetupNodeWidget");
searchTrie.insert("SetAppearanceForCannotAffordOrPrerequisitesNotMet");
searchTrie.insert("SetAppearanceForRankNotHighEnough");
searchTrie.insert("SetAppearanceForAquirable");
searchTrie.insert("SetAppearanceForAquired");
searchTrie.insert("GetNodeInfo");
searchTrie.insert("OnClicked");
searchTrie.insert("OnAbilityRankAquired");
searchTrie.insert("UIBinding_OnLMBPress");
searchTrie.insert("UIBinding_OnLMBReleased");
searchTrie.insert("UIBinding_OnRMBPress");
searchTrie.insert("UIBinding_OnRMBReleased");
searchTrie.insert("UNAQUIRABLE_COLOR_MULTIPLIER");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("OriginalColor");
searchTrie.insert("");
searchTrie.insert("NodeInfo");
searchTrie.insert("");
searchTrie.insert("AllNodesArrayIndex");
searchTrie.insert("FNodeArray");
searchTrie.insert("Array");
searchTrie.insert("UCommanderSkillTreeWidget");
searchTrie.insert("UCommanderSkillTreeWidget");
searchTrie.insert("SetupWidget_GettingDestroyedAfter");
searchTrie.insert("SetupWidget");
searchTrie.insert("MoreSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("IsShowingOrPlayingShowAnimation");
searchTrie.insert("OnRequestToBeShown");
searchTrie.insert("OnRequestToBeHidden");
searchTrie.insert("RespondToEscapeRequest");
searchTrie.insert("OnExperienceGained");
searchTrie.insert("OnLevelUp_LastForEvent");
searchTrie.insert("OnNewAbilityRankAquired");
searchTrie.insert("GetExperienceAquiredAsText");
searchTrie.insert("GetExperienceRequiredAsText");
searchTrie.insert("bShownOrPlayingShowAnim");
searchTrie.insert("NodesUnlockedByRank");
searchTrie.insert("RankHighEnoughButNotFullyAquiredNodes");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ShowAnimationFName");
searchTrie.insert("HideAnimationFName");
searchTrie.insert("ShowAnim");
searchTrie.insert("HideAnim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UGlobalSkillsPanel");
searchTrie.insert("UGlobalSkillsPanel");
searchTrie.insert("SetupWidget");
searchTrie.insert("MoreSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("OnCommanderSkillAquired_FirstRank");
searchTrie.insert("OnCommanderSkillAquired_NotFirstRank");
searchTrie.insert("OnCommanderSkillUsed");
searchTrie.insert("OnCommanderAbilityCooledDown");
searchTrie.insert("CoolingDownAbilities");
searchTrie.insert("AllButtons");
searchTrie.insert("");
searchTrie.insert("EnterAnimFName");
searchTrie.insert("EnterAnim");
searchTrie.insert("NumActiveButtons");
searchTrie.insert("UGlobalSkillsPanelButton");
searchTrie.insert("UGlobalSkillsPanelButton");
searchTrie.insert("SetupWidget");
searchTrie.insert("OnCommanderSkillAquired_FirstRank");
searchTrie.insert("OnCommanderSkillAquired_NotFirstRank");
searchTrie.insert("UpdateCooldownProgress");
searchTrie.insert("OnLastChargeUsed");
searchTrie.insert("GetAbilityState");
searchTrie.insert("NativeTick");
searchTrie.insert("SetAppearanceForNotOutOfCharges");
searchTrie.insert("SetAppearanceForOutOfCharges");
searchTrie.insert("UIBinding_OnLMBPress");
searchTrie.insert("UIBinding_OnLMBReleased");
searchTrie.insert("UIBinding_OnRMBPress");
searchTrie.insert("UIBinding_OnRMBReleased");
searchTrie.insert("");
searchTrie.insert("EnterAnimFName");
searchTrie.insert("EnterAnim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OriginalOpacity");
searchTrie.insert("");
searchTrie.insert("AssignedCommanderAbilityInfo");
searchTrie.insert("UInfantryControllerDebugWidget");
searchTrie.insert("RebuildWidget");
searchTrie.insert("IsEditorOnly");
searchTrie.insert("SetInitialValues");
searchTrie.insert("OnUnitsStateChanged");
searchTrie.insert("OnUnitsAnimStateChanged");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UInMatchConfirmationWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("OnRequestToBeShown");
searchTrie.insert("OnNoButtonClicked");
searchTrie.insert("RespondToEscapeRequest");
searchTrie.insert("GetPurpose");
searchTrie.insert("UIBinding_OnYesButtonLeftMousePress");
searchTrie.insert("UIBinding_OnYesButtonLeftMouseReleased");
searchTrie.insert("UIBinding_OnYesButtonRightMousePress");
searchTrie.insert("UIBinding_OnYesButtonRightMouseReleased");
searchTrie.insert("UIBinding_OnNoButtonLeftMousePress");
searchTrie.insert("UIBinding_OnNoButtonLeftMouseReleased");
searchTrie.insert("UIBinding_OnNoButtonRightMousePress");
searchTrie.insert("UIBinding_OnNoButtonRightMouseReleased");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("Purpose");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPauseMenu");
searchTrie.insert("SetupWidget");
searchTrie.insert("SetupBoundWidgets");
searchTrie.insert("SpawnConfirmationWidgets");
searchTrie.insert("SpawnSettingsWidget");
searchTrie.insert("HasConfirmExitToMainMenuWidget");
searchTrie.insert("ShowConfirmExitToMainMenuWidget");
searchTrie.insert("HasConfirmExitToOperatingSystemWidget");
searchTrie.insert("ShowConfirmExitToOperatingSystemWidget");
searchTrie.insert("IsShowingOrPlayingShowAnimation");
searchTrie.insert("RespondToEscapeRequest");
searchTrie.insert("ShowSettingsMenu");
searchTrie.insert("UIBinding_OnResumeButtonLeftMouseButtonPress");
searchTrie.insert("UIBinding_OnResumeButtonLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnResumeButtonRightMouseButtonPress");
searchTrie.insert("UIBinding_OnResumeButtonRightMouseButtonReleased");
searchTrie.insert("UIBinding_OnSettingsButtonLeftMouseButtonPress");
searchTrie.insert("UIBinding_OnSettingsButtonLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnSettingsButtonRightMouseButtonPress");
searchTrie.insert("UIBinding_OnSettingsButtonRightMouseButtonReleased");
searchTrie.insert("UIBinding_OnReturnToMainMenuLeftMouseButtonPress");
searchTrie.insert("UIBinding_OnReturnToMainMenuLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnReturnToMainMenuRightMouseButtonPress");
searchTrie.insert("UIBinding_OnReturnToMainMenuRightMouseButtonReleased");
searchTrie.insert("UIBinding_OnReturnToOSLeftMouseButtonPress");
searchTrie.insert("UIBinding_OnReturnToOSLeftMouseButtonReleased");
searchTrie.insert("UIBinding_OnReturnToOSRightMouseButtonPress");
searchTrie.insert("UIBinding_OnReturnToOSRightMouseButtonReleased");
searchTrie.insert("SETTINGS_WIDGET_Z_ORDER");
searchTrie.insert("CONFIRMATION_WIDGET_Z_ORDER");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SettingsWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ConfirmExitToMainMenuWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ConfirmExitToOperatingSystemWidget");
searchTrie.insert("");
searchTrie.insert("FButtonArrayEntry");
searchTrie.insert("FButtonArrayEntry");
searchTrie.insert("FButtonArrayEntry");
searchTrie.insert("UpdateAppearance");
searchTrie.insert("OnPlayerDefeated");
searchTrie.insert("GetButton");
searchTrie.insert("GetAssignedPlayer");
searchTrie.insert("SetButtonAppearanceForTargetable");
searchTrie.insert("SetButtonAppearanceForUntargetable");
searchTrie.insert("Button");
searchTrie.insert("AssignedPlayer");
searchTrie.insert("ButtonOriginalOpacity");
searchTrie.insert("bHasAssignedPlayerBeenDefeated");
searchTrie.insert("AssignedPlayersAffiliation");
searchTrie.insert("UPlayerTargetingPanel");
searchTrie.insert("SetupWidget");
searchTrie.insert("MoreSetup");
searchTrie.insert("SetupPlayerTargetingButton");
searchTrie.insert("NativeTick");
searchTrie.insert("IsShowingOrPlayingShowAnimation");
searchTrie.insert("OnRequestToBeShown");
searchTrie.insert("OnRequestToBeHidden");
searchTrie.insert("RespondToEscapeRequest");
searchTrie.insert("OnAnotherPlayerDefeated");
searchTrie.insert("OnPlayerTargetingButtonEvent_LMBPressed");
searchTrie.insert("OnPlayerTargetingButtonEvent_LMBReleased");
searchTrie.insert("OnPlayerTargetingButtonEvent_RMBPressed");
searchTrie.insert("OnPlayerTargetingButtonEvent_RMBReleased");
searchTrie.insert("SetupTargetingButtonsForAbility");
searchTrie.insert("UIBinding_OnCancelButtonLMBPressed");
searchTrie.insert("UIBinding_OnCancelButtonLMBReleased");
searchTrie.insert("UIBinding_OnCancelButtonRMBPressed");
searchTrie.insert("UIBinding_OnCancelButtonRMBReleased");
searchTrie.insert("AssignedAbilityInfo");
searchTrie.insert("Buttons");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ShowAnimFName");
searchTrie.insert("HideAnimFName");
searchTrie.insert("ShowAnim");
searchTrie.insert("HideAnim");
searchTrie.insert("bShownOrPlayingShowAnim");
searchTrie.insert("");
searchTrie.insert("UMyButton");
searchTrie.insert("UMyButton");
searchTrie.insert("SynchronizeProperties");
searchTrie.insert("RebuildWidget");
searchTrie.insert("ReleaseSlateResources");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("GetSlotClass");
searchTrie.insert("OnSlotAdded");
searchTrie.insert("OnSlotRemoved");
searchTrie.insert("PostLoad");
searchTrie.insert("PostEditChangeProperty");
searchTrie.insert("SetPurpose");
searchTrie.insert("GetPurpose");
searchTrie.insert("SetImages");
searchTrie.insert("SetImagesAndUnifiedImageFlags_ExcludeNormalImage");
searchTrie.insert("SetImagesAndUnifiedImageFlags_ExcludeNormalAndHighlightedImage");
searchTrie.insert("SetImages_PlayerTargetingPanel");
searchTrie.insert("SetImages_ExcludeHighlightedImage");
searchTrie.insert("SetUnifiedImages_ExcludeNormalAndHighlightedImage");
searchTrie.insert("SetImages_CommandSkillTreeNode");
searchTrie.insert("SetImages_ExcludeHighlightedImageAndIgnoreUnifiedFlags");
searchTrie.insert("SetHoveredSound");
searchTrie.insert("SetPressedByLMBSound");
searchTrie.insert("SetPressedByRMBSound");
searchTrie.insert("SetIgnoreHoveredImage");
searchTrie.insert("SetIgnorePressedImage");
searchTrie.insert("SetPC");
searchTrie.insert("SetOwningWidget");
searchTrie.insert("SetImagesAndSounds");
searchTrie.insert("GetNormalImage");
searchTrie.insert("GetHoverImage");
searchTrie.insert("GetPressedImage");
searchTrie.insert("GetHighlightedImage");
searchTrie.insert("GetOnLeftMouseButtonPressDelegate");
searchTrie.insert("GetOnRightMouseButtonPressDelegate");
searchTrie.insert("GetOnLeftMouseButtonReleasedDelegate");
searchTrie.insert("GetOnRightMouseButtonReleasedDelegate");
searchTrie.insert("OnLeftMouseButtonPressed");
searchTrie.insert("OnRightMouseButtonPressed");
searchTrie.insert("OnLeftMouseButtonReleased");
searchTrie.insert("OnRightMouseButtonReleased");
searchTrie.insert("SetIsPressedByLMB");
searchTrie.insert("SetIsPressedByRMB");
searchTrie.insert("SetIsHighlighted");
searchTrie.insert("ForceUnhover");
searchTrie.insert("SetPadding");
searchTrie.insert("SetHorizontalAlignment");
searchTrie.insert("SetVerticalAlignment");
searchTrie.insert("SetBrushColor");
searchTrie.insert("PlayerTargetingButton_OnLMBPressed");
searchTrie.insert("PlayerTargetingButton_OnLMBReleased");
searchTrie.insert("PlayerTargetingButton_OnRMBPressed");
searchTrie.insert("PlayerTargetingButton_OnRMBReleased");
searchTrie.insert("Purpose");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("MyButton");
searchTrie.insert("UMyButtonSlot");
searchTrie.insert("UMyButtonSlot");
searchTrie.insert("SetPadding");
searchTrie.insert("SetHorizontalAlignment");
searchTrie.insert("SetVerticalAlignment");
searchTrie.insert("SynchronizeProperties");
searchTrie.insert("BuildSlot");
searchTrie.insert("ReleaseSlateResources");
searchTrie.insert("PostEditChangeProperty");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Button");
searchTrie.insert("SMyButton");
searchTrie.insert(")");
searchTrie.insert("SMyButton");
searchTrie.insert("Construct");
searchTrie.insert("SetContent");
searchTrie.insert("SetDesiredSizeScale");
searchTrie.insert("SetHAlign");
searchTrie.insert("SetVAlign");
searchTrie.insert("SetPadding");
searchTrie.insert("SetNormalImageUPROPERTY");
searchTrie.insert("SetBackgroundColor");
searchTrie.insert("OnPaint");
searchTrie.insert("SupportsKeyboardFocus");
searchTrie.insert("OnMouseButtonDown");
searchTrie.insert("OnMouseButtonUp");
searchTrie.insert("OnMouseButtonDoubleClick");
searchTrie.insert("OnMouseEnter");
searchTrie.insert("OnMouseLeave");
searchTrie.insert("ComputeDesiredSize");
searchTrie.insert("GetImage");
searchTrie.insert("PlayHoverSound");
searchTrie.insert("PlayPressedByLMBSound");
searchTrie.insert("PlayPressedByRMBSound");
searchTrie.insert("GetOnLeftMouseButtonPressDelegate");
searchTrie.insert("GetOnRightMouseButtonPressDelegate");
searchTrie.insert("GetOnLeftMouseButtonReleasedDelegate");
searchTrie.insert("GetOnRightMouseButtonReleasedDelegate");
searchTrie.insert("SetNormalImage");
searchTrie.insert("SetHoverImage");
searchTrie.insert("SetPressedImage");
searchTrie.insert("SetHighlightedImage");
searchTrie.insert("SetHoveredSound");
searchTrie.insert("SetPressedByLMBSound");
searchTrie.insert("SetPressedByRMBSound");
searchTrie.insert("SetIgnoreHoveredImage");
searchTrie.insert("SetIgnorePressedImage");
searchTrie.insert("SetPC");
searchTrie.insert("SetOwningWidget");
searchTrie.insert("SetUserWidgetOwnerButton");
searchTrie.insert("SetIsPressedByLMB");
searchTrie.insert("SetIsPressedByRMB");
searchTrie.insert("SetIsHighlighted");
searchTrie.insert("ForceUnhover");
searchTrie.insert("PlaySound");
searchTrie.insert("NormalImage");
searchTrie.insert("HoverImage");
searchTrie.insert("PressedImage");
searchTrie.insert("HighlightedImage");
searchTrie.insert("OnLeftMouseButtonPressed");
searchTrie.insert("OnRightMouseButtonPressed");
searchTrie.insert("OnLeftMouseButtonReleased");
searchTrie.insert("OnRightMouseButtonReleased");
searchTrie.insert("HoveredSound");
searchTrie.insert("PressedByLMBSound");
searchTrie.insert("PressedByRMBSound");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("1");
searchTrie.insert("PC");
searchTrie.insert("UMGWidget");
searchTrie.insert("UserWidgetButtonOwner");
searchTrie.insert("BorderImage");
searchTrie.insert("DesiredSizeScale");
searchTrie.insert("BorderBackgroundColor");
searchTrie.insert("UGameMessageWidget");
searchTrie.insert("Setup");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("SetMessage");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OriginalTextColor");
searchTrie.insert("UChatOutputSingleMessageWidget");
searchTrie.insert("UChatOutputSingleMessageWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetMessage");
searchTrie.insert("PlayReceivedAnim");
searchTrie.insert("OnAnimationFinished_Implementation");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("OriginalTextColor");
searchTrie.insert("ULobbyChat");
searchTrie.insert("ULobbyChat");
searchTrie.insert("Setup");
searchTrie.insert("UIBinding_OnChatInputTextChanged");
searchTrie.insert("UIBinding_OnChatInputTextCommitted");
searchTrie.insert("CreateAndAddOutputSpacer");
searchTrie.insert("RemoveMessagesToFit");
searchTrie.insert("OnChildAddedToOutputPanel");
searchTrie.insert("ShouldPlayMessageReceivedSound");
searchTrie.insert("SetupFor");
searchTrie.insert("OnChatMessageReceived");
searchTrie.insert("ClearChat");
searchTrie.insert("NumChatLogMessages");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimeAtLastMessageReceived");
searchTrie.insert("ULobbySlot");
searchTrie.insert("ULobbySlot");
searchTrie.insert("PreSetup");
searchTrie.insert("Setup");
searchTrie.insert("UIBinding_OnAddCPUPlayerButtonClicked");
searchTrie.insert("UIBinding_OnCPUDifficultySelectionChanged");
searchTrie.insert("UIBinding_OnKickButtonClicked");
searchTrie.insert("IsLocalPlayerHost");
searchTrie.insert("UIBinding_OnCloseButtonClicked");
searchTrie.insert("UIBinding_OnFactionSelectionChanged");
searchTrie.insert("UIBinding_OnTeamSelectionChanged");
searchTrie.insert("Close");
searchTrie.insert("SetSlotVisibility");
searchTrie.insert("SetWidgetVisibility");
searchTrie.insert("GetSlotIndex");
searchTrie.insert("HasHumanPlayer");
searchTrie.insert("HasCPUPlayer");
searchTrie.insert("GetPlayerState");
searchTrie.insert("SetPlayerState");
searchTrie.insert("GetStatus");
searchTrie.insert("SetStatus");
searchTrie.insert("GetCPUDifficulty");
searchTrie.insert("SetCPUDifficulty");
searchTrie.insert("GetTeam");
searchTrie.insert("SetTeam");
searchTrie.insert("GetFaction");
searchTrie.insert("SetFaction");
searchTrie.insert("UpdateVisibilities");
searchTrie.insert("IsMultiplayerLobby");
searchTrie.insert("Status");
searchTrie.insert("");
searchTrie.insert("SlotIndex");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("FTextAndSound");
searchTrie.insert("FTextAndSound");
searchTrie.insert("FTextAndSound");
searchTrie.insert("GetMessage");
searchTrie.insert("GetSound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ULobbyWidget");
searchTrie.insert("ULobbyWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetupSlots");
searchTrie.insert("OnLobbySlotConstructed");
searchTrie.insert("IsHost");
searchTrie.insert("UIBinding_OnStartMatchButtonClicked");
searchTrie.insert("OnStartSessionComplete");
searchTrie.insert("GatherMatchInfo");
searchTrie.insert("GetNumHumanPlayers");
searchTrie.insert("CanLockSlots");
searchTrie.insert("CanStartMatch");
searchTrie.insert("ShouldShowNoStartWarning");
searchTrie.insert("ShouldPlayNoStartSound");
searchTrie.insert("GetNumPlayers");
searchTrie.insert("HaveDifferentTeams");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("UIBinding_OnAddSlotButtonClicked");
searchTrie.insert("UIBinding_OnLockSlotsButtonClicked");
searchTrie.insert("UIBinding_OnChangeMapButtonClicked");
searchTrie.insert("DoNothing");
searchTrie.insert("Delay)");
searchTrie.insert("NotifyPlayerLeft");
searchTrie.insert("ExitLobby");
searchTrie.insert("AreSlotsLocked");
searchTrie.insert("IsMultiplayerLobby");
searchTrie.insert("OnChatMessageReceived");
searchTrie.insert("UpdateMapDisplay");
searchTrie.insert("GetLobbyType");
searchTrie.insert("SetLobbyType");
searchTrie.insert("SetLobbyName");
searchTrie.insert("SetStartingResources");
searchTrie.insert("SetDefeatCondition");
searchTrie.insert("SetMap");
searchTrie.insert("SetMap");
searchTrie.insert("SetAreSlotsLocked");
searchTrie.insert("UpdatePlayerStartAssignments");
searchTrie.insert("GetSlots");
searchTrie.insert("GetSlot");
searchTrie.insert("UpdateVisibilities");
searchTrie.insert("ClearChat");
searchTrie.insert("SINGLEPLAYER_DEFAULT_LOBBY_NAME");
searchTrie.insert("DEFAULT_NUM_CPU_OPPONENTS");
searchTrie.insert("DEFAULT_CPU_DIFFICULTY");
searchTrie.insert("DEFAULT_TEAM");
searchTrie.insert("LobbyType");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Map");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("TimerHandle_CannotStartMatchWidget");
searchTrie.insert("TimerHandle_CannotStartMatchSound");
searchTrie.insert("bAreSlotsLocked");
searchTrie.insert("NumPlayersWhenStartMatchButtonPressed");
searchTrie.insert("ULoadingScreen");
searchTrie.insert("SetStatusText");
searchTrie.insert("");
searchTrie.insert("ULobbyInfo");
searchTrie.insert("Setup");
searchTrie.insert("OnAddToList");
searchTrie.insert("SetValues");
searchTrie.insert("SetLobbyBrowserWidget");
searchTrie.insert("UIBinding_OnSelectButtonClicked");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ULobbyBrowserWidget");
searchTrie.insert("Setup");
searchTrie.insert("OnShown");
searchTrie.insert("OnSearchingStarted");
searchTrie.insert("OnSearchingComplete");
searchTrie.insert("UIBinding_OnJoinButtonClicked");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("UIBinding_OnRefreshButtonClicked");
searchTrie.insert("UIBinding_OnDirectIPConnectTextCommitted");
searchTrie.insert("FindSessions");
searchTrie.insert("GetSearchResult");
searchTrie.insert("SetCurrentlySelectedLobby");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("bIsFindingSessions");
searchTrie.insert("UPasswordEntryWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetupBindings");
searchTrie.insert("UIBinding_OnPasswordEntryTextChanged");
searchTrie.insert("UIBinding_OnPasswordEntryTextCommitted");
searchTrie.insert("UIBinding_OnAcceptButtonClicked");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("TryPassword");
searchTrie.insert("SetLobbyBrowserWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("ULobbyCreationWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetupBindings");
searchTrie.insert("SetDefaultValues");
searchTrie.insert("SetMap");
searchTrie.insert("UIBinding_OnCreateButtonClicked");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("UIBinding_OnLobbyNameTextChanged");
searchTrie.insert("UIBinding_OnNetworkTypeLeftButtonClicked");
searchTrie.insert("UIBinding_OnNetworkTypeRightButtonClicked");
searchTrie.insert("UIBinding_OnPasswordTextChanged");
searchTrie.insert("UIBinding_OnDecreaseNumSlotsButtonClicked");
searchTrie.insert("UIBinding_OnIncreaseNumSlotsButtonClicked");
searchTrie.insert("UIBinding_OnChangeMapButtonClicked");
searchTrie.insert("IsTextForLAN");
searchTrie.insert("IsTextForOnline");
searchTrie.insert("UpdateMapDisplay");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMainMenuWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetupButtonFunctionality");
searchTrie.insert("UIBinding_OnPlayButtonClicked");
searchTrie.insert("UIBinding_OnCreateSingleplayerButtonClicked");
searchTrie.insert("UIBinding_OnCreateMultiplayerButtonClicked");
searchTrie.insert("UIBinding_OnFindMultiplayerButtonClicked");
searchTrie.insert("UIBinding_OnSettingsButtonClicked");
searchTrie.insert("UIBinding_OnExitToOSButtonClicked");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPlayerStartWidget");
searchTrie.insert("UPlayerStartWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetupForPlayerSpot");
searchTrie.insert("UIBinding_OnButtonClicked");
searchTrie.insert("IsHost");
searchTrie.insert("SetAssignedPlayer");
searchTrie.insert("GetAssignedPlayer");
searchTrie.insert("PlayerStartUniqueID");
searchTrie.insert("AssignedLobbySlot");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMapInfoWidget");
searchTrie.insert("UMapInfoWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetRefToOwningWidget");
searchTrie.insert("SetMap");
searchTrie.insert("GetSetMap");
searchTrie.insert("GetSetMapID");
searchTrie.insert("GetSetMapInfo");
searchTrie.insert("SetMinimapLocationValues");
searchTrie.insert("SetupBindings");
searchTrie.insert("UIBinding_OnSelectButtonClicked");
searchTrie.insert("UpdatePlayerStartAssignments");
searchTrie.insert("GetStartingSpots");
searchTrie.insert("OnWidgetRebuilt");
searchTrie.insert("");
searchTrie.insert("MapInfo");
searchTrie.insert("");
searchTrie.insert("bIsDisplayingPlayerStarts");
searchTrie.insert("");
searchTrie.insert("MinimapImageScreenLoc");
searchTrie.insert("MinimapImageScreenDim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMapSelectionWidget");
searchTrie.insert("UMapSelectionWidget");
searchTrie.insert("Setup");
searchTrie.insert("SetupMapList");
searchTrie.insert("SetupBindings");
searchTrie.insert("OnMapInfoAddedToPanel");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("SetCurrentMap");
searchTrie.insert("SetRefToUpdatedWidget");
searchTrie.insert("CurrentMapInfo");
searchTrie.insert("bHasSetupMapInfoList");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMatchRulesWidget");
searchTrie.insert("SetIsForLobby");
searchTrie.insert("Setup");
searchTrie.insert("IsForLobby");
searchTrie.insert("UIBinding_OnStartingResourcesSelectionChanged");
searchTrie.insert("UIBinding_OnDefeatConditionSelectionChanged");
searchTrie.insert("GetStartingResources");
searchTrie.insert("SetStartingResources");
searchTrie.insert("GetDefeatCondition");
searchTrie.insert("SetDefeatCondition");
searchTrie.insert("bIsForLobby");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("Menus");
searchTrie.insert("GetGameInstance");
searchTrie.insert("GetGameState");
searchTrie.insert("PALETTE_CATEGORY");
searchTrie.insert("BLANK_TEXT");
searchTrie.insert("UMenuButton");
searchTrie.insert("UMenuButton");
searchTrie.insert("UIBinding_OnPress");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("UMenuTextBox");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("UMenuEditableText");
searchTrie.insert("UIBinding_OnTextChanged");
searchTrie.insert("UIBinding_OnTextCommitted");
searchTrie.insert("GetPaletteCategory");
searchTrie.insert("UConfirmExitToOS_YesButton");
searchTrie.insert("UIBinding_OnPress");
searchTrie.insert("UConfirmExitToOS_NoButton");
searchTrie.insert("UIBinding_OnPress");
searchTrie.insert("UNicknameEntryWidget");
searchTrie.insert("Setup");
searchTrie.insert("UIBinding_OnNameTextChanged");
searchTrie.insert("UIBinding_OnNameTextCommitted");
searchTrie.insert("UIBinding_OnContinueButtonClicked");
searchTrie.insert("UIBinding_OnReturnButtonClicked");
searchTrie.insert("SetNextWidget");
searchTrie.insert("");
searchTrie.insert("NextWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPopupWidget");
searchTrie.insert("UPopupWidget");
searchTrie.insert("Init");
searchTrie.insert("AssignWidgetAnims");
searchTrie.insert("TimeToHide");
searchTrie.insert("HideInternal");
searchTrie.insert("Delay)");
searchTrie.insert("OnAnimationFinished_Implementation");
searchTrie.insert("Show");
searchTrie.insert("Hide");
searchTrie.insert("ShowAnimFullName");
searchTrie.insert("HideAnimFullName");
searchTrie.insert("SingleAnimFullName");
searchTrie.insert("");
searchTrie.insert("OriginalTextColor");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AnimStatus");
searchTrie.insert("ShowDuration");
searchTrie.insert("TimerHandle_Hide");
searchTrie.insert("USingleAudioClassWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("UpdateAppearanceForCurrentValues");
searchTrie.insert("VolumeToText");
searchTrie.insert("NativeTick");
searchTrie.insert("UIBinding_OnDecreaseVolumeButtonLeftMousePress");
searchTrie.insert("UIBinding_OnDecreaseVolumeButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnDecreaseVolumeButtonRightMousePress");
searchTrie.insert("UIBinding_OnDecreaseVolumeButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnIncreaseVolumeButtonLeftMousePress");
searchTrie.insert("UIBinding_OnIncreaseVolumeButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnIncreaseVolumeButtonRightMousePress");
searchTrie.insert("UIBinding_OnIncreaseVolumeButtonRightMouseRelease");
searchTrie.insert("OnDecreaseVolumeButtonClicked");
searchTrie.insert("OnIncreaseVolumeButtonClicked");
searchTrie.insert("UIBinding_OnVolumeSliderValueChanged");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UAudioSettingsWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("UpdateAppearanceForCurrentValues");
searchTrie.insert("UpdateAudioQualityWidgetsAppearanceForCurrentValues");
searchTrie.insert("GetAudioQualityText");
searchTrie.insert("UIBinding_OnDecreaseAudioQualityButtonLeftMousePress");
searchTrie.insert("UIBinding_OnDecreaseAudioQualityButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnDecreaseAudioQualityButtonRightMousePress");
searchTrie.insert("UIBinding_OnDecreaseAudioQualityButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnIncreaseAudioQualityButtonLeftMousePress");
searchTrie.insert("UIBinding_OnIncreaseAudioQualityButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnIncreaseAudioQualityButtonRightMousePress");
searchTrie.insert("UIBinding_OnIncreaseAudioQualityButtonRightMouseRelease");
searchTrie.insert("OnDecreaseAudioQualityButtonClicked");
searchTrie.insert("OnIncreaseAudioQualityButtonClicked");
searchTrie.insert("PC");
searchTrie.insert("SingleAudioClassWidgets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleControlSettingWidgetBase");
searchTrie.insert("USingleControlSettingWidgetBase");
searchTrie.insert("InitialSetup");
searchTrie.insert("InitialSetup");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("SetTextNameText");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("NativeTick");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("PC");
searchTrie.insert("ControlSettingsWidget");
searchTrie.insert("");
searchTrie.insert("SettingInfo");
searchTrie.insert("");
searchTrie.insert("USingleBoolControlSettingWidget");
searchTrie.insert("InitialSetupInner");
searchTrie.insert("UpdateAppearanceForCurrentValue");
searchTrie.insert("UpdateTextValueForCurrentValues");
searchTrie.insert("UpdateButtonsForCurrentValues");
searchTrie.insert("UpdateCheckBoxForCurrentValues");
searchTrie.insert("UIBinding_OnAdjustLeftButtonLeftMousePress");
searchTrie.insert("UIBinding_OnAdjustLeftButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnAdjustLeftButtonRightMousePress");
searchTrie.insert("UIBinding_OnAdjustLeftButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnAdjustRightButtonLeftMousePress");
searchTrie.insert("UIBinding_OnAdjustRightButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnAdjustRightButtonRightMousePress");
searchTrie.insert("UIBinding_OnAdjustRightButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnCheckBoxStateChanged");
searchTrie.insert("OnAdjustLeftButtonClicked");
searchTrie.insert("OnAdjustRightButtonClicked");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AdjustLeftButtonOriginalOpacity");
searchTrie.insert("AdjustRightButtonOriginalOpacity");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleFloatControlSettingWidget");
searchTrie.insert("InitialSetupInner");
searchTrie.insert("UpdateAppearanceForCurrentValue");
searchTrie.insert("UIBinding_OnDecreaseButtonLeftMousePress");
searchTrie.insert("UIBinding_OnDecreaseButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnDecreaseButtonRightMousePress");
searchTrie.insert("UIBinding_OnDecreaseButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnIncreaseButtonLeftMousePress");
searchTrie.insert("UIBinding_OnIncreaseButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnIncreaseButtonRightMousePress");
searchTrie.insert("UIBinding_OnIncreaseButtonRightMouseRelease");
searchTrie.insert("OnDecreaseButtonClicked");
searchTrie.insert("OnIncreaseButtonClicked");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("DecreaseButtonOriginalOpacity");
searchTrie.insert("IncreaseButtonOriginalOpacity");
searchTrie.insert("");
searchTrie.insert("UControlSettingsWidget");
searchTrie.insert("UControlSettingsWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("GetObsoleteAdjustButtonRenderOpacityMultiplier");
searchTrie.insert("GetObsoleteAdjustButtonVisibility");
searchTrie.insert("UpdateAppearanceForCurrentValues");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("PostEditLogic");
searchTrie.insert("SingleSettingWidgets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UGameSettingsWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("UpdateAppearanceForCurrentValues");
searchTrie.insert("UIBinding_OnAliasTextChanged");
searchTrie.insert("UIBinding_OnAliasTextCommitted");
searchTrie.insert("IsPlayerAllowedToChangeAlias");
searchTrie.insert("GI");
searchTrie.insert("");
searchTrie.insert("TextBoxPlayerAliasOriginalOpacity");
searchTrie.insert("USingleKeyBindingWidget");
searchTrie.insert("USingleKeyBindingWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("SetTypes");
searchTrie.insert("NativeTick");
searchTrie.insert("UpdateAppearanceForCurrentBindingValue");
searchTrie.insert("IsForActionMapping");
searchTrie.insert("GetActionType");
searchTrie.insert("GetAxisType");
searchTrie.insert("GetDisplayText");
searchTrie.insert("SetBrushAndText_Modifier");
searchTrie.insert("SetBrushAndText_PlusSymbol");
searchTrie.insert("SetBrushAndText_Key");
searchTrie.insert("HideKeyElementWidgetsFromIndex");
searchTrie.insert("HideKeyElementWidgetsFromIndexCheckIfNull");
searchTrie.insert("UIBinding_OnRemapButtonLeftMousePress");
searchTrie.insert("UIBinding_OnRemapButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnRemapButtonRightMousePress");
searchTrie.insert("UIBinding_OnRemapButtonRightMouseRelease");
searchTrie.insert("OnClicked");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("RunOnPostEditLogic");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("PC");
searchTrie.insert("OwningWidget");
searchTrie.insert("BindingInfo");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("NumKeyElementWidgetsBound");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("BorderKeyElements[7]");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UPressAnyKeyWidget");
searchTrie.insert("NativeTick");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("SetupForAboutToBeShown");
searchTrie.insert("");
searchTrie.insert("URebindingCollisionWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("SetupFor");
searchTrie.insert("OnCancelButtonClicked");
searchTrie.insert("UIBinding_OnConfirmButtonLeftMousePress");
searchTrie.insert("UIBinding_OnConfirmButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnConfirmButtonRightMousePress");
searchTrie.insert("UIBinding_OnConfirmButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnCancelButtonLeftMousePress");
searchTrie.insert("UIBinding_OnCancelButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnCancelButtonRightMousePress");
searchTrie.insert("UIBinding_OnCancelButtonRightMouseRelease");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("PC");
searchTrie.insert("KeyBindingsWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UKeyBindingsWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("UpdateAppearanceForCurrentValues");
searchTrie.insert("IsShowingOrPlayingShowAnim");
searchTrie.insert("OnRequestToBeToggled");
searchTrie.insert("OnSingleBindingWidgetClicked");
searchTrie.insert("OnKeyBindAttempt");
searchTrie.insert("OnPendingKeyBindCancelled");
searchTrie.insert("OnPendingKeyBindCancelledViaCancelKey");
searchTrie.insert("IsCollisionConfirmationWidgetShowingOrPlayingShowAnim");
searchTrie.insert("GetPendingKey");
searchTrie.insert("OnOpened");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonLeftMousePress");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonRightMousePress");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonRightMouseRelease");
searchTrie.insert("AssignWidgetsArrayIndex");
searchTrie.insert("GetBindingWidgetsArrayIndex");
searchTrie.insert("GetBindingWidgetsArrayIndex");
searchTrie.insert("PRESS_ANY_KEY_WIDGET_Z_ORDER");
searchTrie.insert("REBINDING_COLLISION_WIDGET_Z_ORDER");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("BindingWidgets");
searchTrie.insert("PressAnyKeyWidget");
searchTrie.insert("RebindingCollisionWidget");
searchTrie.insert("PendingRebindInstigator");
searchTrie.insert("PendingKey");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USingleMenuOutputMessageWidget");
searchTrie.insert("USingleMenuOutputMessageWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("SetupFor");
searchTrie.insert("Show");
searchTrie.insert("OnAnimationFinished_Implementation");
searchTrie.insert("OwningWidget");
searchTrie.insert("");
searchTrie.insert("ShowAnimName");
searchTrie.insert("ShowAnim");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("UMenuOutputWidget");
searchTrie.insert("UMenuOutputWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("ShowWarningMessageAndPlaySound");
searchTrie.insert("OnWarningMessageExpired");
searchTrie.insert("AddSingleWarningMessageWidget");
searchTrie.insert("AreAnyMessagesShowing");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("PC");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("WarningMessages");
searchTrie.insert("NumWarningMessages");
searchTrie.insert("");
searchTrie.insert("USettingsSubmenuBase");
searchTrie.insert("PURE_VIRTUAL");
searchTrie.insert("NativeTick");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("USettingsConfirmationWidget_Exit");
searchTrie.insert("InitialSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("UIBinding_OnConfirmButtonLeftMousePress");
searchTrie.insert("UIBinding_OnConfirmButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnConfirmButtonRightMousePress");
searchTrie.insert("UIBinding_OnConfirmButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnDiscardButtonLeftMousePress");
searchTrie.insert("UIBinding_OnDiscardButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnDiscardButtonRightMousePress");
searchTrie.insert("UIBinding_OnDiscardButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnCancelButtonLeftMousePress");
searchTrie.insert("UIBinding_OnCancelButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnCancelButtonRightMousePress");
searchTrie.insert("UIBinding_OnCancelButtonRightMouseRelease");
searchTrie.insert("OnSaveButtonClicked");
searchTrie.insert("OnDiscardButtonClicked");
searchTrie.insert("OnCancelButtonClicked");
searchTrie.insert("OnRequestToShow");
searchTrie.insert("OnEscapeRequest");
searchTrie.insert("PC");
searchTrie.insert("SettingsMenu");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USettingsConfirmationWidget_ResetToDefaults");
searchTrie.insert("InitialSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("OnRequestToShow");
searchTrie.insert("OnEscapeRequest");
searchTrie.insert("UIBinding_OnYesButtonLeftMousePress");
searchTrie.insert("UIBinding_OnYesButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnYesButtonRightMousePress");
searchTrie.insert("UIBinding_OnYesButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnNoButtonLeftMousePress");
searchTrie.insert("UIBinding_OnNoButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnNoButtonRightMousePress");
searchTrie.insert("UIBinding_OnNoButtonRightMouseRelease");
searchTrie.insert("OnYesButtonClicked");
searchTrie.insert("OnNoButtonClicked");
searchTrie.insert("PC");
searchTrie.insert("SettingsMenu");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("USettingsWidget");
searchTrie.insert("USettingsWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("SetupConfirmationWidgets");
searchTrie.insert("UsingExitConfirmationWidget");
searchTrie.insert("UsingResetToDefaultsConfirmationWidget");
searchTrie.insert("NativeTick");
searchTrie.insert("IsShowingOrPlayingShowAnim");
searchTrie.insert("Show");
searchTrie.insert("OnEscapeRequest");
searchTrie.insert("ApplyAndSaveChangesAndInitiateClose");
searchTrie.insert("DiscardChangesAndInitiateClose");
searchTrie.insert("ShowAskSaveChangesWidget");
searchTrie.insert("ShowConfirmResetToDefaultsWidget");
searchTrie.insert("InitiateClose");
searchTrie.insert("IsExitConfirmationWidgetShowingOrPlayingShowAnim");
searchTrie.insert("IsResetToDefaultsConfirmationWidgetShowingOrPlayingShowAnim");
searchTrie.insert("UIBinding_OnSaveChangesAndReturnButtonLeftMousePress");
searchTrie.insert("UIBinding_OnSaveChangesAndReturnButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnSaveChangesAndReturnButtonRightMousePress");
searchTrie.insert("UIBinding_OnSaveChangesAndReturnButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnDiscardChangesAndReturnButtonLeftMousePress");
searchTrie.insert("UIBinding_OnDiscardChangesAndReturnButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnDiscardChangesAndReturnButtonRightMousePress");
searchTrie.insert("UIBinding_OnDiscardChangesAndReturnButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonLeftMousePress");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonRightMousePress");
searchTrie.insert("UIBinding_OnResetToDefaultsButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToVideoSubmenuButtonLeftMousePress");
searchTrie.insert("UIBinding_OnSwitchToVideoSubmenuButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToVideoSubmenuButtonRightMousePress");
searchTrie.insert("UIBinding_OnSwitchToVideoSubmenuButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToAudioSubmenuButtonLeftMousePress");
searchTrie.insert("UIBinding_OnSwitchToAudioSubmenuButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToAudioSubmenuButtonRightMousePress");
searchTrie.insert("UIBinding_OnSwitchToAudioSubmenuButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToControlsSubmenuButtonLeftMousePress");
searchTrie.insert("UIBinding_OnSwitchToControlsSubmenuButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToControlsSubmenuButtonRightMousePress");
searchTrie.insert("UIBinding_OnSwitchToControlsSubmenuButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToKeyBindingsSubmenuButtonLeftMousePress");
searchTrie.insert("UIBinding_OnSwitchToKeyBindingsSubmenuButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToKeyBindingsSubmenuButtonRightMousePress");
searchTrie.insert("UIBinding_OnSwitchToKeyBindingsSubmenuButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToGameSubmenuButtonLeftMousePress");
searchTrie.insert("UIBinding_OnSwitchToGameSubmenuButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnSwitchToGameSubmenuButtonRightMousePress");
searchTrie.insert("UIBinding_OnSwitchToGameSubmenuButtonRightMouseRelease");
searchTrie.insert("OnSwitchToSubmenuButtonClicked");
searchTrie.insert("OnSaveChangesAndReturnButtonClicked");
searchTrie.insert("OnDiscardChangesAndReturnButtonClicked");
searchTrie.insert("OnResetToDefaultsButtonClicked");
searchTrie.insert("ResetAllSettingsToDefaults");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("RESET_TO_DEFAULTS_CONFIRMATION_WIDGET_Z_ORDER");
searchTrie.insert("EXIT_CONFIRMATION_WIDGET_Z_ORDER");
searchTrie.insert("GI");
searchTrie.insert("PC");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SubmenuToShowOnNextOpen");
searchTrie.insert("");
searchTrie.insert("ConfirmationWidget_Exit");
searchTrie.insert("");
searchTrie.insert("ConfirmationWidget_ResetToDefaults");
searchTrie.insert("");
searchTrie.insert("FVideoSettingInfoBase");
searchTrie.insert("FVideoSettingInfoBase");
searchTrie.insert("InitialSetup");
searchTrie.insert("GetDisplayName");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("CanValueWrap");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("");
searchTrie.insert("GetTextForZeroToFourRange");
searchTrie.insert("GetDisplayPercentageForZeroToFourRange");
searchTrie.insert("");
searchTrie.insert("DisplayName");
searchTrie.insert("FVideoSetting_WindowMode");
searchTrie.insert("FVideoSetting_WindowMode");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_Resolution");
searchTrie.insert("FVideoSetting_Resolution");
searchTrie.insert("InitialSetup");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("ResolutionsArray");
searchTrie.insert("CurrentResolutionIndex");
searchTrie.insert("FVideoSetting_OverallQuality");
searchTrie.insert("FVideoSetting_OverallQuality");
searchTrie.insert("InitialSetup");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("OnChangeUpdateUI");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("ValueBeforeSwitchingToCustom");
searchTrie.insert("FVideoSetting_FoliageQuality");
searchTrie.insert("FVideoSetting_FoliageQuality");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_FrameRateLimit");
searchTrie.insert("FVideoSetting_FrameRateLimit");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FramerateAsFloatToInt");
searchTrie.insert("MIN");
searchTrie.insert("MAX");
searchTrie.insert("STEP_SIZE");
searchTrie.insert("FVideoSetting_AntiAliasingQuality");
searchTrie.insert("FVideoSetting_AntiAliasingQuality");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_ShadowQuality");
searchTrie.insert("FVideoSetting_ShadowQuality");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_ViewDistanceQuality");
searchTrie.insert("FVideoSetting_ViewDistanceQuality");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_TextureQuality");
searchTrie.insert("FVideoSetting_TextureQuality");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_VisualEffectQuality");
searchTrie.insert("FVideoSetting_VisualEffectQuality");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_PostProcessingQuality");
searchTrie.insert("FVideoSetting_PostProcessingQuality");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("FVideoSetting_VSync");
searchTrie.insert("FVideoSetting_VSync");
searchTrie.insert("GetDisplayText");
searchTrie.insert("GetDisplayPercentage");
searchTrie.insert("TryAdjustLeft");
searchTrie.insert("TryAdjustRight");
searchTrie.insert("IsAtLowestValue");
searchTrie.insert("IsAtHighestValue");
searchTrie.insert("USingleVideoSettingWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("InitialSetup");
searchTrie.insert("NativeTick");
searchTrie.insert("UIBinding_OnAdjustLeftButtonLeftMousePress");
searchTrie.insert("UIBinding_OnAdjustLeftButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnAdjustLeftButtonRightMousePress");
searchTrie.insert("UIBinding_OnAdjustLeftButtonRightMouseRelease");
searchTrie.insert("UIBinding_OnAdjustRightButtonLeftMousePress");
searchTrie.insert("UIBinding_OnAdjustRightButtonLeftMouseRelease");
searchTrie.insert("UIBinding_OnAdjustRightButtonRightMousePress");
searchTrie.insert("UIBinding_OnAdjustRightButtonRightMouseRelease");
searchTrie.insert("UpdateAppearanceForCurrentValue");
searchTrie.insert("OnAdjustLeftButtonClicked");
searchTrie.insert("OnAdjustRightButtonClicked");
searchTrie.insert("GetVideoSettingType");
searchTrie.insert("GetVideoSettingsWidget");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("PC");
searchTrie.insert("VideoSettingsWidget");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("AdjustLeftButtonOriginalOpacity");
searchTrie.insert("AdjustRightButtonOriginalOpacity");
searchTrie.insert("");
searchTrie.insert("SettingInfo");
searchTrie.insert("");
searchTrie.insert("UVideoSettingsWidget");
searchTrie.insert("UVideoSettingsWidget");
searchTrie.insert("InitialSetup");
searchTrie.insert("UpdateAppearanceForCurrentValues");
searchTrie.insert("GetNumVideoSettingTypes");
searchTrie.insert("ArrayIndexToVideoSettingType");
searchTrie.insert("VideoSettingTypeToArrayIndex");
searchTrie.insert("GetObsoleteAdjustButtonRenderOpacityMultiplier");
searchTrie.insert("GetObsoleteAdjustButtonVisibility");
searchTrie.insert("GetAllSingleSettingWidgets");
searchTrie.insert("GetSingleSettingWidget");
searchTrie.insert("PostEditChangeChainProperty");
searchTrie.insert("RunPostEditLogic");
searchTrie.insert("");
searchTrie.insert("SingleSettingWidgets");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SettingInfo_WindowMode");
searchTrie.insert("SettingInfo_Resolution");
searchTrie.insert("SettingInfo_OverallQuality");
searchTrie.insert("SettingInfo_FoliageQuality");
searchTrie.insert("SettingInfo_FramerateLimit");
searchTrie.insert("SettingInfo_AntiAliasingQuality");
searchTrie.insert("SettingInfo_ShadowQuality");
searchTrie.insert("SettingInfo_ViewDistanceQuality");
searchTrie.insert("SettingInfo_TextureQuality");
searchTrie.insert("SettingInfo_VisualEffectQuality");
searchTrie.insert("SettingInfo_PostProcessingQuality");
searchTrie.insert("SettingInfo_VSync");
searchTrie.insert("USelectableWidgetComponent");
searchTrie.insert("USelectableWidgetComponent");
searchTrie.insert("InitWidget");
searchTrie.insert("SetWidgetClassAndSpawn");
searchTrie.insert("SetWidgetClassAndSpawn");
searchTrie.insert("OnHealthChanged");
searchTrie.insert("OnZeroHealth");
searchTrie.insert("OnSelectableResourceAmountChanged");
searchTrie.insert("OnConstructionProgressChanged");
searchTrie.insert("OnConstructionComplete");
searchTrie.insert("OnConstructionComplete");
searchTrie.insert("");
searchTrie.insert("UWorldWidget");
searchTrie.insert("UWorldWidget");
searchTrie.insert("Setup");
searchTrie.insert("Setup");
searchTrie.insert("NativeTick");
searchTrie.insert("GetHealthText");
searchTrie.insert("ConstructionProgressAsText");
searchTrie.insert("IsWidgetBound");
searchTrie.insert("OnHealthChanged");
searchTrie.insert("OnZeroHealth");
searchTrie.insert("OnSelectableResourceAmountChanged");
searchTrie.insert("OnConstructionProgressChanged");
searchTrie.insert("OnConstructionComplete");
searchTrie.insert("OnConstructionComplete");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("");
searchTrie.insert("SelectableMaxHealth");
searchTrie.insert("");
searchTrie.insert("FRTS_Ver2EditorModule");
searchTrie.insert("StartupModule");
searchTrie.insert("ShutdownModule");
searchTrie.insert("EPlayerSpawnRule");
searchTrie.insert("Random");
searchTrie.insert("NearTeammates");
searchTrie.insert("EPropertyOverrideMode");
searchTrie.insert("UseDefaultIfNotSet");
searchTrie.insert("AlwaysUseDefault");
searchTrie.insert("EPIEOnMapSelectableSetupResult");
searchTrie.insert("None");
searchTrie.insert("OwnerIndexTooHigh");
searchTrie.insert("ObserverOwner");
searchTrie.insert("WrongFaction");
searchTrie.insert("Success");
searchTrie.insert("EPlayerType");
searchTrie.insert("Unknown");
searchTrie.insert("Player");
searchTrie.insert("Observer");
searchTrie.insert("ERotationDirection");
searchTrie.insert("NoDirectionEstablished");
searchTrie.insert("Clockwise");
searchTrie.insert("CounterClockwise");
searchTrie.insert("");
searchTrie.insert("ResetTiles");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("0");
searchTrie.insert("RevealTilesFromBuildings");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("1");
searchTrie.insert("RevealTilesFromInfantry");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("2");
searchTrie.insert("TickAndRevealTilesFromTemporaryRevealEffects");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("3");
searchTrie.insert("StoreTileVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("4");
searchTrie.insert("QueueUpRenderingFogOfWar");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("5");
searchTrie.insert("StoreHostileTeamSelectableVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("6");
searchTrie.insert("StoreProjectilesVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("7");
searchTrie.insert("StoreParticleSystemsVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("8");
searchTrie.insert("StoreInventoryItemVisibility");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("9");
searchTrie.insert("Finished");
searchTrie.insert("=");
searchTrie.insert("1");
searchTrie.insert("<<");
searchTrie.insert("10");
searchTrie.insert("");
searchTrie.insert("ResearchedFromBuilding");
searchTrie.insert("CommanderAbility");
searchTrie.insert("");
searchTrie.insert("Uninitialized");
searchTrie.insert("False");
searchTrie.insert("True");
searchTrie.insert("EDamageDealingRule");
searchTrie.insert("AbsoluteAmount");
searchTrie.insert("PercentageOfSelectableResourceAmountDrained");
searchTrie.insert("EUnitState");
searchTrie.insert("BehaviorNotStarted");
searchTrie.insert("MovingToBarracksInitialPoint");
searchTrie.insert("MovingToBarracksRallyPoint");
searchTrie.insert("PossessedUnitDestroyed");
searchTrie.insert("Idle_WithoutTarget");
searchTrie.insert("Idle_WithTarget");
searchTrie.insert("Idle_ReturningToLeashLocation");
searchTrie.insert("HoldingPositionWithoutTarget");
searchTrie.insert("HoldingPositionWithTarget");
searchTrie.insert("MovingToRightClickLocation");
searchTrie.insert("MovingToPointNearStaticSelectable");
searchTrie.insert("MoveCommandToFriendlyMobileSelectable");
searchTrie.insert("RightClickOnEnemy");
searchTrie.insert("AttackMoveCommand_WithNoTargetAquired");
searchTrie.insert("AttackMoveCommand_WithTargetAquired");
searchTrie.insert("AttackMoveCommand_ReturningToLeashLocation");
searchTrie.insert("HeadingToContextCommandWorldLocation");
searchTrie.insert("ChasingTargetToDoContextCommand");
searchTrie.insert("HeadingToBuildingToDoBuildingTargetingAbility");
searchTrie.insert("HeadingToBuildingToEnterItsGarrison");
searchTrie.insert("InsideBuildingGarrison");
searchTrie.insert("HeadingToResourceSpot");
searchTrie.insert("WaitingToGatherResources");
searchTrie.insert("GatheringResources");
searchTrie.insert("ReturningToResourceDepot");
searchTrie.insert("DroppingOfResources");
searchTrie.insert("HeadingToConstructionSite");
searchTrie.insert("HeadingToPotentialConstructionSite");
searchTrie.insert("WaitingForFoundationsToBePlaced");
searchTrie.insert("ConstructingBuilding");
searchTrie.insert("DoingContextActionAnim");
searchTrie.insert("DoingSpecialBuildingTargetingAbility");
searchTrie.insert("GoingToPickUpInventoryItem");
searchTrie.insert("PickingUpInventoryItem");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EUnitAnimState");
searchTrie.insert("NotPlayingImportantAnim");
searchTrie.insert("DoingAttackAnim");
searchTrie.insert("DoingInterruptibleContextActionAnim");
searchTrie.insert("DoingUninterruptibleContextActionAnim");
searchTrie.insert("DoingInterruptibleBuildingTargetingAbilityAnim");
searchTrie.insert("PlayingGatheringResourcesAnim");
searchTrie.insert("PlayingDropOffResourcesAnim");
searchTrie.insert("ConstructingBuildingAnim");
searchTrie.insert("EDistanceCheckMethod");
searchTrie.insert("Closest");
searchTrie.insert("Furtherest");
searchTrie.insert("ETargetAquireMethodPriorties");
searchTrie.insert("None");
searchTrie.insert("LeastRotationRequired");
searchTrie.insert("HasAttack");
searchTrie.insert("Distance");
searchTrie.insert("HasAttack_LeastRotationRequired");
searchTrie.insert("HasAttack_Distance");
searchTrie.insert("ETargetLocationZAxisOption");
searchTrie.insert("DoNothing");
searchTrie.insert("LineTrace");
searchTrie.insert("");
searchTrie.insert("Uninitialized");
searchTrie.insert("False");
searchTrie.insert("True");
searchTrie.insert("");
searchTrie.insert("Phase1_MovingToTarget");
searchTrie.insert("Phase2_Descending");
searchTrie.insert("Phase3_Firing");
searchTrie.insert("Phase4_PostFired");
searchTrie.insert("EPreciseProjectileMovementMode");
searchTrie.insert("StraightLine");
searchTrie.insert("CurveAssets");
searchTrie.insert("EArcingProjectileTrajectoryMethod");
searchTrie.insert("ChooseInitialVelocity");
searchTrie.insert("ChooseArc");
searchTrie.insert("ENoCollisionProjectileMode");
searchTrie.insert("StraightFiringAtTarget");
searchTrie.insert("StraightFiringAtLocation");
searchTrie.insert("ArcedFiringAtLocation");
searchTrie.insert("ArcedFiringAtLocation");
searchTrie.insert("");
searchTrie.insert("HitSomething");
searchTrie.insert("OutsideWorldBounds");
searchTrie.insert("ECPUPlayerState");
searchTrie.insert("None");
searchTrie.insert("Normal");
searchTrie.insert("InfastructureUnrecoverable");
searchTrie.insert("EconomyUnrecoverable");
searchTrie.insert("InfastructureUnrecoverableAndArmyProductionImpossible");
searchTrie.insert("");
searchTrie.insert("None");
searchTrie.insert("SingleLineComment");
searchTrie.insert("MultiLineComment");
searchTrie.insert("");
searchTrie.insert("Private");
searchTrie.insert("Protected");
searchTrie.insert("Public");
searchTrie.insert("");
searchTrie.insert("Reference");
searchTrie.insert("Pointer");
searchTrie.insert("ConstPointer");
searchTrie.insert("");
searchTrie.insert("Class");
searchTrie.insert("Struct");
searchTrie.insert("Enum");
searchTrie.insert("Function");
searchTrie.insert("Variable");
searchTrie.insert("EnumValue");
searchTrie.insert("EActionToTakeAfterDestroySession");
searchTrie.insert("None");
searchTrie.insert("ReturnToLobbyBrowsingScreen");
searchTrie.insert("HostToMainMenuClientsToLobbyBrowsing");
searchTrie.insert("CreateNewSession");
searchTrie.insert("EClassRepNodeMapping");
searchTrie.insert("NotRouted");
searchTrie.insert("RelevantAllConnections");
searchTrie.insert("RelevantOwnerOnly");
searchTrie.insert("PlayerOwnedSelectable_Building");
searchTrie.insert("PlayerOwnedSelectable_Infantry");
searchTrie.insert("ETestRepPolicy");
searchTrie.insert("NotRouted");
searchTrie.insert("RelevantOwnerOnly");
searchTrie.insert("RelevantAllConnections");
searchTrie.insert("RelevantAllConnections");
searchTrie.insert("");
searchTrie.insert("PlayerOnly");
searchTrie.insert("ObserverOnly");
searchTrie.insert("PlayerAndObserver");
searchTrie.insert("EKeyMappingAction");
searchTrie.insert("None");
searchTrie.insert("LMB");
searchTrie.insert("RMB");
searchTrie.insert("ZoomCameraIn");
searchTrie.insert("ZoomCameraOut");
searchTrie.insert("EnableCameraLookAround");
searchTrie.insert("ResetCameraRotationToOriginal");
searchTrie.insert("ResetCameraZoomToOriginal");
searchTrie.insert("ResetCameraRotationAndZoomToOriginal");
searchTrie.insert("OpenTeamChat");
searchTrie.insert("OpenAllChat");
searchTrie.insert("OpenPauseMenuSlashCancel");
searchTrie.insert("InstaQuitGame");
searchTrie.insert("ShowDevelopmentCheatWidget");
searchTrie.insert("OpenCommanderSkillTree");
searchTrie.insert("CloseCommanderSkillTree");
searchTrie.insert("ToggleCommanderSkillTree");
searchTrie.insert("AssignControlGroup0");
searchTrie.insert("AssignControlGroup1");
searchTrie.insert("AssignControlGroup2");
searchTrie.insert("AssignControlGroup3");
searchTrie.insert("AssignControlGroup4");
searchTrie.insert("AssignControlGroup5");
searchTrie.insert("AssignControlGroup6");
searchTrie.insert("AssignControlGroup7");
searchTrie.insert("AssignControlGroup8");
searchTrie.insert("AssignControlGroup9");
searchTrie.insert("SelectControlGroup0");
searchTrie.insert("SelectControlGroup1");
searchTrie.insert("SelectControlGroup2");
searchTrie.insert("SelectControlGroup3");
searchTrie.insert("SelectControlGroup4");
searchTrie.insert("SelectControlGroup5");
searchTrie.insert("SelectControlGroup6");
searchTrie.insert("SelectControlGroup7");
searchTrie.insert("SelectControlGroup8");
searchTrie.insert("SelectControlGroup9");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EKeyMappingAxis");
searchTrie.insert("None");
searchTrie.insert("MouseMoveX");
searchTrie.insert("MouseMoveY");
searchTrie.insert("MoveCameraLeft");
searchTrie.insert("MoveCameraRight");
searchTrie.insert("MoveCameraForward");
searchTrie.insert("MoveCameraBackward");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EVariableType");
searchTrie.insert("None");
searchTrie.insert("Bool");
searchTrie.insert("Float");
searchTrie.insert("EDependencyRequirementType");
searchTrie.insert("Bool");
searchTrie.insert("Float_IsLessThanOrEqualTo");
searchTrie.insert("Float_IsLessThan");
searchTrie.insert("Float_IsEqualTo");
searchTrie.insert("Float_IsGreaterThan");
searchTrie.insert("Float_IsGreaterThanOrEqualTo");
searchTrie.insert("EGameStartType");
searchTrie.insert("HasNotStartedGameBefore");
searchTrie.insert("HasStartedGameBefore");
searchTrie.insert("HasStartedGameBefore");
searchTrie.insert("EFaction");
searchTrie.insert("None");
searchTrie.insert("Humans");
searchTrie.insert("Monsters");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ETeam");
searchTrie.insert("Uninitialized");
searchTrie.insert("Team1");
searchTrie.insert("Team2");
searchTrie.insert("Team3");
searchTrie.insert("Team4");
searchTrie.insert("Neutral");
searchTrie.insert("Observer");
searchTrie.insert("EBuildingType");
searchTrie.insert("HumanMain");
searchTrie.insert("HumanSupplyDepot");
searchTrie.insert("HumanPowerPlant");
searchTrie.insert("HumanBarracks");
searchTrie.insert("HumanRadar");
searchTrie.insert("HumanAirForceBase");
searchTrie.insert("HumanMissleSilo");
searchTrie.insert("HumanTurret");
searchTrie.insert("HumanMissleTurret");
searchTrie.insert("HumanSniperNest");
searchTrie.insert("MonstersMain");
searchTrie.insert("MonstersBarracks");
searchTrie.insert("MonstersAdvancedBarracks");
searchTrie.insert("MonstersItemShop");
searchTrie.insert("MonstersSpecialBarracks");
searchTrie.insert("MonstersSandDepot");
searchTrie.insert("MonstersSuperweapon");
searchTrie.insert("MonstersObelisk");
searchTrie.insert("ResourceSpot");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("NotBuilding");
searchTrie.insert("EUnitType");
searchTrie.insert("None");
searchTrie.insert("HumanWorker");
searchTrie.insert("HumanCollector");
searchTrie.insert("HumanBasic");
searchTrie.insert("HumanSniper");
searchTrie.insert("HumanRecon");
searchTrie.insert("HumanSpellcaster");
searchTrie.insert("HumanSpecial");
searchTrie.insert("MonstersCollector");
searchTrie.insert("MonstersMelee");
searchTrie.insert("MonstersBasicInfantry");
searchTrie.insert("MonstersHeavyInfantry");
searchTrie.insert("MonstersMedic");
searchTrie.insert("MonstersSpecial");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("NotUnit");
searchTrie.insert("EUpgradeType");
searchTrie.insert("ImprovedBasicInfantryDamage");
searchTrie.insert("ImprovedSniperFireRate");
searchTrie.insert("ImprovedSpellcasterManaRegenRate");
searchTrie.insert("ImprovedCollectorResourceCapacity");
searchTrie.insert("UnlockTrainMonstersMelee");
searchTrie.insert("UnlockTrainSnipers");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("None");
searchTrie.insert("EInventoryItem");
searchTrie.insert("Shoes");
searchTrie.insert("SimpleBangle");
searchTrie.insert("RedGem");
searchTrie.insert("GreenGem");
searchTrie.insert("RottenPumpkin");
searchTrie.insert("Apple");
searchTrie.insert("AverageCrown");
searchTrie.insert("GoldenCrown");
searchTrie.insert("Necklace");
searchTrie.insert("GoldBar");
searchTrie.insert("GoldenDagger");
searchTrie.insert("StrongSniperRifle");
searchTrie.insert("ArtilleryBeacon");
searchTrie.insert("None");
searchTrie.insert("EResourceType");
searchTrie.insert("None");
searchTrie.insert("Cash");
searchTrie.insert("Sand");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EHousingResourceType");
searchTrie.insert("None");
searchTrie.insert("Population");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ECPUDifficulty");
searchTrie.insert("None");
searchTrie.insert("DoesNothing");
searchTrie.insert("Easy");
searchTrie.insert("Medium");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ETargetingType");
searchTrie.insert("None");
searchTrie.insert("Default");
searchTrie.insert("BiologicalInfantry");
searchTrie.insert("MechanicalInfantry");
searchTrie.insert("BiologicalAndMechanicalInfantry");
searchTrie.insert("Building");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EArmourType");
searchTrie.insert("None");
searchTrie.insert("Default");
searchTrie.insert("Building");
searchTrie.insert("SuperweaponBuilding");
searchTrie.insert("Infantry");
searchTrie.insert("HeavyInfantry");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EHUDPersistentTabType");
searchTrie.insert("None");
searchTrie.insert("Buildings");
searchTrie.insert("Units");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAnimation");
searchTrie.insert("None");
searchTrie.insert("Idle");
searchTrie.insert("Moving");
searchTrie.insert("Attack");
searchTrie.insert("Destroyed");
searchTrie.insert("GatheringResources");
searchTrie.insert("ConstructBuilding");
searchTrie.insert("PickingUpInventoryItem");
searchTrie.insert("MovingWithResources");
searchTrie.insert("DropOffResources");
searchTrie.insert("ContextAction_1");
searchTrie.insert("ContextAction_2");
searchTrie.insert("ContextAction_3");
searchTrie.insert("Throw");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EBuildingAnimation");
searchTrie.insert("None");
searchTrie.insert("Construction");
searchTrie.insert("Idle");
searchTrie.insert("OpenDoor");
searchTrie.insert("Destroyed");
searchTrie.insert("OpenMissleSiloDoor");
searchTrie.insert("CloseMissleSiloDoor");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("SinkIntoGround");
searchTrie.insert("EContextButton");
searchTrie.insert("None");
searchTrie.insert("Heal");
searchTrie.insert("ArtilleryStrike");
searchTrie.insert("Dash");
searchTrie.insert("Haste");
searchTrie.insert("Corruption");
searchTrie.insert("StealthSelf");
searchTrie.insert("Cleanse");
searchTrie.insert("IceBarrier");
searchTrie.insert("DeathAura");
searchTrie.insert("Death");
searchTrie.insert("Blizzard");
searchTrie.insert("ManaBurn");
searchTrie.insert("EatRottenPumpkin");
searchTrie.insert("EatApple");
searchTrie.insert("LightningStrike");
searchTrie.insert("FinishingBlow");
searchTrie.insert("CullingBlade");
searchTrie.insert("RadarScan");
searchTrie.insert("Nuke");
searchTrie.insert("HealOverTime");
searchTrie.insert("IncreasingHealOverTime");
searchTrie.insert("Beserk");
searchTrie.insert("Sacrifice");
searchTrie.insert("Tribute");
searchTrie.insert("BeaconArtilleryStrike");
searchTrie.insert("AttackMove");
searchTrie.insert("HoldPosition");
searchTrie.insert("BuildBuilding");
searchTrie.insert("Train");
searchTrie.insert("Upgrade");
searchTrie.insert("z_ALWAYS_3RD_LAST_IN_ENUM");
searchTrie.insert("PlacingGhost");
searchTrie.insert("RecentlyExecuted");
searchTrie.insert("RecentlyExecuted");
searchTrie.insert("ECommanderAbility");
searchTrie.insert("None");
searchTrie.insert("Human_ArtilleryStrike_Rank1");
searchTrie.insert("Human_ArtilleryStrike_Rank2");
searchTrie.insert("Human_ResourceSteal");
searchTrie.insert("Monsters_Explosion_Rank1");
searchTrie.insert("Monsters_Explosion_Rank2");
searchTrie.insert("Monsters_Frenzy_Rank1");
searchTrie.insert("Monsters_Frenzy_Rank2");
searchTrie.insert("Monsters_Frenzy_Rank3");
searchTrie.insert("Monsters_GlobalFrenzy");
searchTrie.insert("Monsters_DestroyAllPlayersCollectors");
searchTrie.insert("Monsters_MakeUnitInvulnerable");
searchTrie.insert("Monsters_KillUnit");
searchTrie.insert("Human_AirshipBarrage");
searchTrie.insert("Monsters_UnlockTrainMelee");
searchTrie.insert("Humans_Snipers_Rank1");
searchTrie.insert("Humans_Snipers_Rank2");
searchTrie.insert("Human_Warthog");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ECommanderSkillTreeNodeType");
searchTrie.insert("None");
searchTrie.insert("Human_ArtilleryStrike");
searchTrie.insert("Human_ResourceSteal");
searchTrie.insert("Monsters_Explosion");
searchTrie.insert("Monsters_Frenzy");
searchTrie.insert("Monsters_GlobalFrenzy");
searchTrie.insert("Monsters_DestroyAllPlayersCollectors");
searchTrie.insert("Monsters_MakeUnitInvulnerable");
searchTrie.insert("Monsters_KillUnit");
searchTrie.insert("Human_AirshipBarrage");
searchTrie.insert("Monsters_UnlockTrainMelee");
searchTrie.insert("Humans_UnlockTrainSnipers");
searchTrie.insert("Human_Warthog");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EBuildingTargetingAbility");
searchTrie.insert("None");
searchTrie.insert("StealResources");
searchTrie.insert("DealDamage");
searchTrie.insert("DealDamage");
searchTrie.insert("EAbilityRequirement");
searchTrie.insert("Uninitialized");
searchTrie.insert("NoMissingRequirement");
searchTrie.insert("BuffOrDebuffNotPresent");
searchTrie.insert("TargetMustUseMana");
searchTrie.insert("RequiresTargetWithHealth");
searchTrie.insert("TargetsHealthNotLowEnough");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EStaticBuffAndDebuffType");
searchTrie.insert("None");
searchTrie.insert("HoldingResources");
searchTrie.insert("ThePlague");
searchTrie.insert("Disease");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ETickableBuffAndDebuffType");
searchTrie.insert("None");
searchTrie.insert("Dash");
searchTrie.insert("Haste");
searchTrie.insert("BasicHealOverTime");
searchTrie.insert("IncreasingHealOverTime");
searchTrie.insert("CleansersMight");
searchTrie.insert("PainOverTime");
searchTrie.insert("Corruption");
searchTrie.insert("NearInvulnerability");
searchTrie.insert("RottenPumpkinEatEffect");
searchTrie.insert("TempStealth");
searchTrie.insert("Beserk");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EBuffAndDebuffSubType");
searchTrie.insert("Default");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAbilityOutcome");
searchTrie.insert("Default");
searchTrie.insert("CullingBlade_BelowThreshold");
searchTrie.insert("CullingBlade_AboveThreshold");
searchTrie.insert("DidNotKill");
searchTrie.insert("DidKill");
searchTrie.insert("DidKill");
searchTrie.insert("EBuffOrDebuffApplicationOutcome");
searchTrie.insert("Failure");
searchTrie.insert("ResetDuration");
searchTrie.insert("Success");
searchTrie.insert("AlreadyHasIt");
searchTrie.insert("CullingBlade_Kill");
searchTrie.insert("CullingBlade_DealDamage");
searchTrie.insert("CullingBlade_DealDamage");
searchTrie.insert("EBuffOrDebuffTickOutcome");
searchTrie.insert("StandardOutcome");
searchTrie.insert("PainOverTime_KilledTargetAndGotHeal");
searchTrie.insert("PainOverTime_KilledTargetButNoHeal");
searchTrie.insert("EBuffOrDebuffRemovalOutcome");
searchTrie.insert("NotPresent");
searchTrie.insert("Failure");
searchTrie.insert("Success");
searchTrie.insert("Cleanse_ResetDurationOfCleansersMight");
searchTrie.insert("Cleanse_FreshApplicationOfCleansersMight");
searchTrie.insert("Cleanse_FreshApplicationOfCleansersMight");
searchTrie.insert("EBuffAndDebuffRemovalReason");
searchTrie.insert("Expired");
searchTrie.insert("TargetDied");
searchTrie.insert("CleanseSpell");
searchTrie.insert("Test");
searchTrie.insert("Test");
searchTrie.insert("ESelectableBodySocket");
searchTrie.insert("None");
searchTrie.insert("Floor");
searchTrie.insert("Middle");
searchTrie.insert("Head");
searchTrie.insert("AboveHead_DoesNotRotate");
searchTrie.insert("Floor_DoesNotRotate");
searchTrie.insert("NukeLaunchSite");
searchTrie.insert("NukeLaunchSite");
searchTrie.insert("EStartingResourceAmount");
searchTrie.insert("Default");
searchTrie.insert("Low");
searchTrie.insert("Medium");
searchTrie.insert("High");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("DevelopmentSettings");
searchTrie.insert("EDefeatCondition");
searchTrie.insert("None");
searchTrie.insert("NoCondition");
searchTrie.insert("AllBuildingsDestroyed");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("ESelectableResourceType");
searchTrie.insert("Mana");
searchTrie.insert("None");
searchTrie.insert("None");
searchTrie.insert("EBuildingNetworkType");
searchTrie.insert("None");
searchTrie.insert("HumanBarracks");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMouseCursorType");
searchTrie.insert("None");
searchTrie.insert("SciFi_Default");
searchTrie.insert("SciFi_BlueOutline");
searchTrie.insert("SciFi_RedCross");
searchTrie.insert("SciFi_QuestionMark");
searchTrie.insert("SciFi_BlueCrosshair");
searchTrie.insert("SciFi_EdgeScrollUp");
searchTrie.insert("SciFi_EdgeScrollUpRight");
searchTrie.insert("SciFi_EdgeScrollRight");
searchTrie.insert("SciFi_EdgeScrollDownRight");
searchTrie.insert("SciFi_EdgeScrollDown");
searchTrie.insert("SciFi_EdgeScrollDownLeft");
searchTrie.insert("SciFi_EdgeScrollLeft");
searchTrie.insert("SciFi_EdgeScrollUpLeft");
searchTrie.insert("EnterGarrison");
searchTrie.insert("CashHack");
searchTrie.insert("CommandoBomb");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EControlSettingType");
searchTrie.insert("None");
searchTrie.insert("CameraPanSpeed_Keyboard");
searchTrie.insert("CameraPanSpeed_Mouse");
searchTrie.insert("CameraMaxSpeed");
searchTrie.insert("bEnableCameraMovementLag");
searchTrie.insert("CameraMovementLagSpeed");
searchTrie.insert("CameraTurningBoost");
searchTrie.insert("CameraZoomIncrementalAmount");
searchTrie.insert("CameraZoomSpeed");
searchTrie.insert("MMBLookYawSensitivity");
searchTrie.insert("MMBLookPitchSensitivity");
searchTrie.insert("bInvertMMBLookYaw");
searchTrie.insert("bInvertMMBLookPitch");
searchTrie.insert("bEnableMMBLookLag");
searchTrie.insert("MMBLookLagAmount");
searchTrie.insert("DefaultCameraPitch");
searchTrie.insert("DefaultCameraZoomAmount");
searchTrie.insert("ResetCameraToDefaultSpeed");
searchTrie.insert("CameraEdgeMovementThreshold");
searchTrie.insert("CameraAcceleration");
searchTrie.insert("CameraDeceleration");
searchTrie.insert("DoubleClickTime");
searchTrie.insert("MouseMovementThreshold");
searchTrie.insert("GhostRotationRadius");
searchTrie.insert("GhostRotationSpeed");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EItemAquireReason");
searchTrie.insert("PurchasedFromShop");
searchTrie.insert("CombinedFromOthers");
searchTrie.insert("PickedUpOffGround");
searchTrie.insert("MagicallyCreated");
searchTrie.insert("MagicallyCreated");
searchTrie.insert("EItemRemovalReason");
searchTrie.insert("DroppedOnDeath");
searchTrie.insert("Ingredient");
searchTrie.insert("RemovedOnZeroCharges");
searchTrie.insert("Sold");
searchTrie.insert("Sold");
searchTrie.insert("EItemEntersWorldReason");
searchTrie.insert("DroppedOnDeath");
searchTrie.insert("ExplicitlyDropped");
searchTrie.insert("ExplicitlyDropped");
searchTrie.insert("EItemChangesNumChargesReason");
searchTrie.insert("Use");
searchTrie.insert("Use");
searchTrie.insert("ELobbySlotStatus");
searchTrie.insert("JustInitialized");
searchTrie.insert("Human");
searchTrie.insert("CPU");
searchTrie.insert("Open");
searchTrie.insert("Closed");
searchTrie.insert("Closed");
searchTrie.insert("EMatchType");
searchTrie.insert("None");
searchTrie.insert("Offline");
searchTrie.insert("LAN");
searchTrie.insert("SteamOnline");
searchTrie.insert("ELoadingStatus");
searchTrie.insert("None");
searchTrie.insert("LoadingPersistentMap");
searchTrie.insert("WaitingForAllPlayersToConnect");
searchTrie.insert("WaitingForPlayerControllerClientSetupForMatchAcknowledgementFromAllPlayers");
searchTrie.insert("WaitingForAllPlayersToStreamInLevel");
searchTrie.insert("WaitingForInitialValuesAcknowledgementFromAllPlayers");
searchTrie.insert("WaitingForFinalSetupAcks");
searchTrie.insert("SpawningStartingSelectables");
searchTrie.insert("ShowingBlackScreenRightBeforeMatchStart");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAffiliation");
searchTrie.insert("Unknown");
searchTrie.insert("Owned");
searchTrie.insert("Allied");
searchTrie.insert("Neutral");
searchTrie.insert("Hostile");
searchTrie.insert("Observed");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EWidgetType");
searchTrie.insert("Lobby");
searchTrie.insert("PasswordEntry");
searchTrie.insert("ConfirmExitFromLobby");
searchTrie.insert("LobbyCreationScreen");
searchTrie.insert("MapSelectionScreen");
searchTrie.insert("LobbyBrowser");
searchTrie.insert("MainMenu");
searchTrie.insert("Settings");
searchTrie.insert("Profile");
searchTrie.insert("GameMessage");
searchTrie.insert("NicknameEntryScreen");
searchTrie.insert("PlayMenu");
searchTrie.insert("LoadingScreen");
searchTrie.insert("ConfirmExitToOS");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMatchWidgetType");
searchTrie.insert("None");
searchTrie.insert("HUD");
searchTrie.insert("CommanderSkillTree_Ver2");
searchTrie.insert("Defeat");
searchTrie.insert("EndOfMatch");
searchTrie.insert("PauseMenu");
searchTrie.insert("Settings");
searchTrie.insert("ConfirmReturnToMainMenu");
searchTrie.insert("z_ALWAYS_3RD_LAST_IN_ENUM");
searchTrie.insert("DevelopmentCheats");
searchTrie.insert("DevelopmentCheatsPopupMenu");
searchTrie.insert("EProductionQueueType");
searchTrie.insert("None");
searchTrie.insert("Persistent");
searchTrie.insert("Context");
searchTrie.insert("EMessageType");
searchTrie.insert("None");
searchTrie.insert("GameNotification");
searchTrie.insert("GameWarning");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EGameNotification");
searchTrie.insert("None");
searchTrie.insert("ResourceSpotDepleted");
searchTrie.insert("PlayerDefeated");
searchTrie.insert("NukeLaunchedByOurselves");
searchTrie.insert("NukeLaunchedByAllies");
searchTrie.insert("NukeLaunchedByHostiles");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EGameWarning");
searchTrie.insert("None");
searchTrie.insert("ActionOnCooldown");
searchTrie.insert("NotEnoughSelectableResources");
searchTrie.insert("PrerequisitesNotMet");
searchTrie.insert("TrainingQueueFull");
searchTrie.insert("AlreadyBeingResearched");
searchTrie.insert("FullyResearched");
searchTrie.insert("Building_InsideFog");
searchTrie.insert("Building_SelectableInTheWay");
searchTrie.insert("Building_NotCloseEnoughToBase");
searchTrie.insert("Building_GroundNotFlatEnough");
searchTrie.insert("CannotProduce");
searchTrie.insert("BuildingInProgress");
searchTrie.insert("BuildingNotReadyYet");
searchTrie.insert("InternalSelectableCapReached");
searchTrie.insert("BuildingTypeQuantityLimit");
searchTrie.insert("UnitTypeQuantityLimit");
searchTrie.insert("InvalidTarget");
searchTrie.insert("AbilityCannotTargetHostiles");
searchTrie.insert("AbilityCannotTargetFriendlies");
searchTrie.insert("CannotUseAbility");
searchTrie.insert("NoTarget");
searchTrie.insert("AbilityCannotTargetSelf");
searchTrie.insert("AbilityOutOfRange");
searchTrie.insert("AbilityLocationInsideFog");
searchTrie.insert("UserNoLongerAlive");
searchTrie.insert("UserNoLongerValid");
searchTrie.insert("TargetNoLongerAlive");
searchTrie.insert("NothingSelectedCanPickUpItem");
searchTrie.insert("TypeCannotAquireItem");
searchTrie.insert("TargetNotVisible");
searchTrie.insert("SelectionNotUnderYourControl");
searchTrie.insert("BuilderDestroyed");
searchTrie.insert("NotValid_Shop");
searchTrie.insert("ItemNotForSale");
searchTrie.insert("ItemSoldOut");
searchTrie.insert("ItemOutOfCharges");
searchTrie.insert("ItemNoLongerInInventory");
searchTrie.insert("ItemNoLongerInWorld");
searchTrie.insert("ItemOnCooldown");
searchTrie.insert("ItemNotUsable");
searchTrie.insert("NotInRangeToPurchaseFromShop");
searchTrie.insert("NotInRangeToSellToShop");
searchTrie.insert("ItemCannotBeSold");
searchTrie.insert("InventoryFull");
searchTrie.insert("CannotCarryAnymoreOfItem");
searchTrie.insert("CommanderSkillTree_MaxAbilityRankObtained");
searchTrie.insert("CommanderSkillTree_CommanderRankNotHighEnough");
searchTrie.insert("CommanderSkillTree_PrerequisitesNotMet");
searchTrie.insert("CommanderSkillTree_NotEnoughSkillPoints");
searchTrie.insert("AllAbilityChargesUsed");
searchTrie.insert("TargetPlayerHasBeenDefeated");
searchTrie.insert("TargetPlayerIsHostile");
searchTrie.insert("TargetPlayerIsAllied");
searchTrie.insert("TargetPlayerIsSelf");
searchTrie.insert("NotAllowedToRemapAction");
searchTrie.insert("WouldUnbindUnremappableAction");
searchTrie.insert("z_ALWAYS_2ND_LAST_IN_ENUM");
searchTrie.insert("NotEnoughResources");
searchTrie.insert("EBuildingBuildMethod");
searchTrie.insert("None");
searchTrie.insert("BuildsInTab");
searchTrie.insert("BuildsItself");
searchTrie.insert("LayFoundationsInstantly");
searchTrie.insert("LayFoundationsWhenAtLocation");
searchTrie.insert("Protoss");
searchTrie.insert("EBuildingRallyPointDisplayRule");
searchTrie.insert("Always");
searchTrie.insert("OnlyWhenFullyConstructed");
searchTrie.insert("OnlyWhenFullyConstructed");
searchTrie.insert("ESelectableType");
searchTrie.insert("Building");
searchTrie.insert("Unit");
searchTrie.insert("InventoryItem");
searchTrie.insert("EFogStatus");
searchTrie.insert("0x00");
searchTrie.insert("0x01");
searchTrie.insert("0x02");
searchTrie.insert("0x03");
searchTrie.insert("EMatchResult");
searchTrie.insert("None");
searchTrie.insert("Defeat");
searchTrie.insert("Draw");
searchTrie.insert("Victory");
searchTrie.insert("EAbilityMouseAppearance");
searchTrie.insert("NoChange");
searchTrie.insert("CustomMouseCursor");
searchTrie.insert("HideAndShowDecal");
searchTrie.insert("ECommandTargetType");
searchTrie.insert("NoTarget");
searchTrie.insert("OwnedSelectable");
searchTrie.insert("AlliedSelectable");
searchTrie.insert("NeutralSelectable");
searchTrie.insert("HostileSelectable");
searchTrie.insert("ObservedSelectable");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMessageRecipients");
searchTrie.insert("None");
searchTrie.insert("TeamOnly");
searchTrie.insert("Everyone");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMarqueeBoxDrawMethod");
searchTrie.insert("BorderOnly");
searchTrie.insert("FilledRectangleOnly");
searchTrie.insert("BorderAndFill");
searchTrie.insert("EBuffOrDebuffType");
searchTrie.insert("Buff");
searchTrie.insert("Debuff");
searchTrie.insert("EMacroCommandType");
searchTrie.insert("None");
searchTrie.insert("TrainCollector");
searchTrie.insert("BuildResourceDepot");
searchTrie.insert("BuildConstructionYard");
searchTrie.insert("TrainWorker");
searchTrie.insert("BuildBarracks");
searchTrie.insert("ResearchUpgrade");
searchTrie.insert("BuildBaseDefense");
searchTrie.insert("TrainArmyUnit");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EMacroCommandSecondaryType");
searchTrie.insert("None");
searchTrie.insert("TrainingUnit");
searchTrie.insert("BuildingBuilding");
searchTrie.insert("ResearchingUpgrade");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EAbilityDecalType");
searchTrie.insert("UsableLocation");
searchTrie.insert("NotUsableLocation");
searchTrie.insert("EAttributeAdjustmentRule");
searchTrie.insert("NoChange");
searchTrie.insert("Percentage");
searchTrie.insert("Absolute");
searchTrie.insert("Absolute");
searchTrie.insert("ESelectableCreationMethod");
searchTrie.insert("Uninitialized");
searchTrie.insert("StartingSelectable");
searchTrie.insert("Production");
searchTrie.insert("Spawned");
searchTrie.insert("Spawned");
searchTrie.insert("EInventoryItemNumChargesChangedBehavior");
searchTrie.insert("AlwaysDoNothing");
searchTrie.insert("DestroyAtZeroCharges");
searchTrie.insert("CustomBehavior");
searchTrie.insert("EAbilityUsageType");
searchTrie.insert("SelectablesActionBar");
searchTrie.insert("SelectablesInventory");
searchTrie.insert("SpecialBuildingTargetingAbility");
searchTrie.insert("ESelectionDecalSetup");
searchTrie.insert("Unknown");
searchTrie.insert("DoesNotUse");
searchTrie.insert("UsesNonDynamicMaterial");
searchTrie.insert("UsesDynamicMaterial");
searchTrie.insert("EUIElementType");
searchTrie.insert("SelectablesActionBar");
searchTrie.insert("PersistentPanel");
searchTrie.insert("InventorySlot");
searchTrie.insert("ShopSlot");
searchTrie.insert("ProductionQueueSlot");
searchTrie.insert("GlobalSkillsPanelButton");
searchTrie.insert("CommanderSkillTreeNode");
searchTrie.insert("NoTooltipRequired");
searchTrie.insert("None");
searchTrie.insert("EUnitInitialSpawnBehavior");
searchTrie.insert("MoveToRallyPoint");
searchTrie.insert("CollectFromNearestResourceSpot");
searchTrie.insert("ESoundFogRules");
searchTrie.insert("Ignore");
searchTrie.insert("DecideOnSpawn");
searchTrie.insert("InstigatingTeamOnly");
searchTrie.insert("AlwaysKnownOnceHeard");
searchTrie.insert("DynamicExceptForInstigatorsTeam");
searchTrie.insert("Dynamic");
searchTrie.insert("Dynamic");
searchTrie.insert("EWorldWidgetViewMode");
searchTrie.insert("NoChange");
searchTrie.insert("NoChange");
searchTrie.insert("EAbilityTargetingMethod");
searchTrie.insert("DoesNotRequireAnyTarget");
searchTrie.insert("RequiresSelectable");
searchTrie.insert("RequiresWorldLocation");
searchTrie.insert("RequiresWorldLocationOrSelectable");
searchTrie.insert("RequiresPlayer");
searchTrie.insert("EGarrisonUnloadAllMethod");
searchTrie.insert("AllAtOnce_Grid");
searchTrie.insert("AllAtOnce_Grid");
searchTrie.insert("EDevelopmentAction");
searchTrie.insert("None");
searchTrie.insert("ClosePopupMenu");
searchTrie.insert("IgnoreAllLMBRelease");
searchTrie.insert("IgnoreNextLMBRelease");
searchTrie.insert("DealMassiveDamageToSelectable");
searchTrie.insert("CancelDealMassiveDamage");
searchTrie.insert("DamageSelectable");
searchTrie.insert("CancelDamageSelectable");
searchTrie.insert("AwardExperience");
searchTrie.insert("CancelAwardExperience");
searchTrie.insert("AwardLotsOfExperience");
searchTrie.insert("CancelAwardLotsOfExperience");
searchTrie.insert("AwardExperienceToLocalPlayer");
searchTrie.insert("GiveRandomInventoryItem");
searchTrie.insert("CancelGiveRandomInventoryItem");
searchTrie.insert("GiveSpecificInventoryItem_SelectionPhase");
searchTrie.insert("GiveSpecificInventoryItem_SelectTarget");
searchTrie.insert("CancelGiveSpecificInventoryItem_SelectTarget");
searchTrie.insert("GetUnitAIInfo");
searchTrie.insert("GetUnitAIInfo");
searchTrie.insert("EEditorPlaySkippingOption");
searchTrie.insert("SkipNothing");
searchTrie.insert("SkipOpeningCutsceneOnly");
searchTrie.insert("SkipMainMenu");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EInvalidOwnerIndexAction");
searchTrie.insert("DoNotSpawn");
searchTrie.insert("AssignToServerPlayer");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EImcomingDamageReductionRule");
searchTrie.insert("MultiplyThenAdd");
searchTrie.insert("AddThenMultiply");
searchTrie.insert("EInputKeyDisplayMethod");
searchTrie.insert("ImageOnly");
searchTrie.insert("ImageAndAddTextAtRuntime");
searchTrie.insert("EKeyModifiers");
searchTrie.insert("0");
searchTrie.insert("1");
searchTrie.insert("2");
searchTrie.insert("4");
searchTrie.insert("3");
searchTrie.insert("5");
searchTrie.insert("6");
searchTrie.insert("7");
searchTrie.insert("ECommanderSkillTreeAnimationPlayRule");
searchTrie.insert("Never");
searchTrie.insert("CanAffordAbilityAtStartOfMatchOrLevelUp");
searchTrie.insert("CanAffordAbilityAtStartOfMatchOrLevelUp");
searchTrie.insert("EAssignedAbilityType");
searchTrie.insert("CommanderSkill");
searchTrie.insert("CommanderSkill");
searchTrie.insert("");
searchTrie.insert("ExitToMainMenu");
searchTrie.insert("ExitToOperatingSystem");
searchTrie.insert("ECannotStartMatchReason");
searchTrie.insert("NotEnoughPlayers");
searchTrie.insert("EveryonesOnOneTeam");
searchTrie.insert("SlotsNotLocked");
searchTrie.insert("NoReason");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
searchTrie.insert("EPlayerStartDisplay");
searchTrie.insert("FString");
searchTrie.insert("const;");
searchTrie.insert("EWidgetAnimStatus");
searchTrie.insert("NoAnims");
searchTrie.insert("ShowAnimOnly");
searchTrie.insert("HideAnimOnly");
searchTrie.insert("ShowAndHideAnims");
searchTrie.insert("SingleAnim");
searchTrie.insert("");
searchTrie.insert("EscapeRequest");
searchTrie.insert("ButtonWidget");
searchTrie.insert("ECloseRequestBehavior");
searchTrie.insert("DoNotSave");
searchTrie.insert("Save");
searchTrie.insert("Ask");
searchTrie.insert("Ask");
searchTrie.insert("ESettingsSubmenuType");
searchTrie.insert("VideoSettings");
searchTrie.insert("AudioSettings");
searchTrie.insert("ControlSettings");
searchTrie.insert("KeyBindings");
searchTrie.insert("GameSettings");
searchTrie.insert("EVideoSettingType");
searchTrie.insert("None");
searchTrie.insert("WindowMode");
searchTrie.insert("Resolution");
searchTrie.insert("FrameRateLimit");
searchTrie.insert("VSync");
searchTrie.insert("OverallQuality");
searchTrie.insert("ShadowQuality");
searchTrie.insert("TextureQuality");
searchTrie.insert("AntiAliasingQuality");
searchTrie.insert("ViewDistanceQuality");
searchTrie.insert("VisualEffectQuality");
searchTrie.insert("PostProcessingQuality");
searchTrie.insert("FoliageQuality");
searchTrie.insert("z_ALWAYS_LAST_IN_ENUM");
